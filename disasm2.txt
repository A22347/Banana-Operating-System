
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 41 02 c0       	mov    eax,0xc0024144
c0000025:	3d 44 41 02 c0       	cmp    eax,0xc0024144
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 41 02 c0       	push   0xc0024144
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 41 02 c0       	mov    eax,0xc0024144
c0000051:	2d 44 41 02 c0       	sub    eax,0xc0024144
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 41 02 c0       	push   0xc0024144
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c 03 02 c0       	mov    ebx,0xc002039c
c0000097:	81 eb 98 03 02 c0    	sub    ebx,0xc0020398
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 03 02 c0       	mov    esi,0xc0020398
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 41 02 c0       	push   0xc0024144
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 41 02 c0       	push   0xc0024144
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 9b 55 01 00       	call   c0015848 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 79 55 01 00       	call   c0015848 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 86 5a 01 00       	call   c0015d74 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 21 61 01 00       	call   c0016418 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 93 11 01 00       	jmp    c0011512 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc60],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc60],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc60],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc60],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc60],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc60],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 a4 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb5c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 0a 7c 01 00       	jmp    c00199e4 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 34 7c 01 00       	jmp    c0019a24 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 55 7c 01 00       	jmp    c0019a64 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 00 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfa00]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 00 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfa00]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 2d 02 c0       	mov    edx,0xc0022d64
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba bc 04 02 c0       	mov    edx,0xc00204bc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 c2 04 02 c0       	mov    eax,0xc00204c2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 80 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa80]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 cb 04 02 c0       	mov    eax,0xc00204cb
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 00 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfa00]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 50 05 02 c0       	mov    eax,0xc0020550
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 40 05 02 c0       	mov    ebx,0xc0020540
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 20 05 02 c0       	mov    eax,0xc0020520
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 30 05 02 c0       	mov    eax,0xc0020530
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba d2 04 02 c0       	mov    edx,0xc00204d2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba de 04 02 c0       	mov    edx,0xc00204de
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba f2 04 02 c0       	mov    edx,0xc00204f2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 20 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020920
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 20 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020920
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 20 07 02 c0       	mov    eax,0xc0020720
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 60 06 02 c0       	mov    eax,0xc0020660
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 20 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf9e0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 20 0a 02 c0       	push   0xc0020a20
c0006147:	e8 3c 42 01 00       	call   c001a388 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 2e 0a 02 c0       	push   0xc0020a2e
c000617f:	e8 04 42 01 00       	call   c001a388 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 6d 41 01 00       	call   c001a32c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 3d 0a 02 c0       	push   0xc0020a3d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 40 0a 02 c0       	push   0xc0020a40
c000682f:	e8 54 3b 01 00       	call   c001a388 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 62 3b 01 00       	call   c001a3a4 <iso_kprintfd>
c0006842:	c7 04 24 45 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a45
c0006849:	e8 3a 3b 01 00       	call   c001a388 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 4a 3b 01 00       	call   c001a3a4 <iso_kprintfd>
c000685a:	c7 04 24 4b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a4b
c0006861:	e8 22 3b 01 00       	call   c001a388 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 32 3b 01 00       	call   c001a3a4 <iso_kprintfd>
c0006872:	c7 04 24 51 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a51
c0006879:	e8 0a 3b 01 00       	call   c001a388 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 1a 3b 01 00       	call   c001a3a4 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 3d 0a 02 c0       	push   0xc0020a3d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 5a 0a 02 c0       	push   0xc0020a5a
c0006a52:	e8 31 39 01 00       	call   c001a388 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 65 0a 02 c0       	push   0xc0020a65
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 6c 0a 02 c0       	push   0xc0020a6c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 73 0a 02 c0       	push   0xc0020a73
c0006b69:	e8 1a 38 01 00       	call   c001a388 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 7e 0a 02 c0       	push   0xc0020a7e
c0006b84:	e8 ff 37 01 00       	call   c001a388 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 b6 a0 00 00       	call   c0010d4a <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 db 5d 00 00       	call   c000ca7e <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 8f 0a 02 c0       	push   0xc0020a8f
c0006cd4:	e8 50 a1 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 a8 0a 02 c0       	push   0xc0020aa8
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 9f ee 00 00       	call   c0015ba0 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 ae f0 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 88 68 01 c0       	push   0xc0016888
c0006d25:	52                   	push   edx
c0006d26:	e8 99 f0 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 a4 0b 02 c0       	push   0xc0020ba4
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 ec a0 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 95 a9 00 00       	call   c00116de <KeInitRand()>
c0006d49:	e8 5d ff 00 00       	call   c0016cab <Vm::initialise8086()>
c0006d4e:	e8 59 4a 00 00       	call   c000b7ac <Fs::initVFS()>
c0006d53:	c7 04 24 b5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ab5
c0006d5a:	e8 ca a0 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 a4 0b 02 c0       	push   0xc0020ba4
c0006d7e:	e8 a6 a0 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0006d83:	e8 48 46 00 00       	call   c000b3d0 <KeInitialiseSymlinks()>
c0006d88:	e8 fd a5 00 00       	call   c001138a <KeLoadSystemEnv()>
c0006d8d:	e8 5a a8 00 00       	call   c00115ec <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 cf 0a 02 c0       	push   0xc0020acf
c0006d9c:	68 d8 0a 02 c0       	push   0xc0020ad8
c0006da1:	e8 fc cf 00 00       	call   c0013da2 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 2a 56 00 00       	call   c000c3d8 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 c8 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc8
c0006db5:	e8 6f a0 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 b0 5c 00 00       	call   c000ca7c <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 e0 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ae0
c0006dd3:	e8 51 a0 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 f1 0a 02 c0       	push   0xc0020af1
c0006de7:	e8 b9 e7 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 f0 e9 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 0e f4 00 00       	call   c0016210 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 0d 0b 02 c0       	push   0xc0020b0d
c0006e17:	50                   	push   eax
c0006e18:	e8 db 5c 00 00       	call   c000caf8 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 14 0c 02 c0       	mov    edx,0xc0020c14
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 7f 84 01 00       	call   c001f396 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 0d 93 00 00       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 e6 92 00 00       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 c4 92 00 00       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 a2 92 00 00       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 af 91 00 00       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 8a 91 00 00       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 de 82 01 00       	call   c001f350 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 2c 7f 01 00       	call   c001efc0 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 a0 91 00 00       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 16 0b 02 c0       	push   0xc0020b16
c0007104:	e8 1e a4 00 00       	call   c0011527 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 1c 0b 02 c0       	push   0xc0020b1c
c0007140:	e8 e2 a3 00 00       	call   c0011527 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 a7 8b 00 00       	jmp    c000fd34 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 22 0b 02 c0       	push   0xc0020b22
c00071e3:	0f 94 05 a0 35 02 c0 	sete   BYTE PTR ds:0xc00235a0
c00071ea:	e8 3a 9c 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 a3 86 00 00       	call   c000f8a8 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 4c 57 00 00       	call   c000c960 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 3a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b3a
c000722d:	e8 f7 9b 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 d2 90 00 00       	call   c001031a <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 09 57 00 00       	call   c000c960 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 e8 0b 02 c0       	push   0xc0020be8
c0007274:	e8 b0 9b 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0007279:	e8 74 0c 01 00       	call   c0017ef2 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 54 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b54
c0007285:	e8 9f 9b 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 56 ec 00 00       	call   c0015eec <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 6f 0b 02 c0       	push   0xc0020b6f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 80 0b 02 c0       	push   0xc0020b80
c000730d:	e8 15 a2 00 00       	call   c0011527 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 8d 0b 02 c0       	push   0xc0020b8d
c0007322:	e8 00 a2 00 00       	call   c0011527 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 97 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b97
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 e6 a1 00 00       	jmp    c0011527 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 8b 06 01 00       	call   c0017bbe <HalSystemIdle()>
c0007533:	e8 1a 84 01 00       	call   c001f952 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 50 f0 01 c0       	push   0xc001f050
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 60 f0 01 c0       	push   0xc001f060
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 6a f0 01 c0       	push   0xc001f06a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 74 f0 01 c0       	push   0xc001f074
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 7e f0 01 c0       	push   0xc001f07e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 88 f0 01 c0       	push   0xc001f088
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 92 f0 01 c0       	push   0xc001f092
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 9c f0 01 c0       	push   0xc001f09c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 a6 f0 01 c0       	push   0xc001f0a6
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 ae f0 01 c0       	push   0xc001f0ae
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 b8 f0 01 c0       	push   0xc001f0b8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 c0 f0 01 c0       	push   0xc001f0c0
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 c8 f0 01 c0       	push   0xc001f0c8
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 d0 f0 01 c0       	push   0xc001f0d0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 ea f0 01 c0       	push   0xc001f0ea
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 f2 f0 01 c0       	push   0xc001f0f2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 fc f0 01 c0       	push   0xc001f0fc
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 06 f1 01 c0       	push   0xc001f106
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 10 f1 01 c0       	push   0xc001f110
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 aa f1 01 c0       	push   0xc001f1aa
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 b1 f1 01 c0       	push   0xc001f1b1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 9c f1 01 c0       	push   0xc001f19c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 a3 f1 01 c0       	push   0xc001f1a3
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 1a f1 01 c0       	push   0xc001f11a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 24 f1 01 c0       	push   0xc001f124
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 2e f1 01 c0       	push   0xc001f12e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 38 f1 01 c0       	push   0xc001f138
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 42 f1 01 c0       	push   0xc001f142
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 4c f1 01 c0       	push   0xc001f14c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 56 f1 01 c0       	push   0xc001f156
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 60 f1 01 c0       	push   0xc001f160
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 6a f1 01 c0       	push   0xc001f16a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 74 f1 01 c0       	push   0xc001f174
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 7e f1 01 c0       	push   0xc001f17e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 88 f1 01 c0       	push   0xc001f188
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 92 f1 01 c0       	push   0xc001f192
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 ec f2 01 c0       	push   0xc001f2ec
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 f6 f2 01 c0       	push   0xc001f2f6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 00 f3 01 c0       	push   0xc001f300
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 0a f3 01 c0       	push   0xc001f30a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 14 f3 01 c0       	push   0xc001f314
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 1e f3 01 c0       	push   0xc001f31e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 28 f3 01 c0       	push   0xc001f328
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 32 f3 01 c0       	push   0xc001f332
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 a6 f0 01 c0       	push   0xc001f0a6
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023594
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 94 35 02 c0    	mov    edi,DWORD PTR ds:0xc0023594
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023594,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 35 02 c0       	mov    eax,ds:0xc0023594
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 38 0c 02 c0       	push   0xc0020c38
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 68 0c 02 c0       	push   0xc0020c68
c0007a44:	e8 de 9a 00 00       	call   c0011527 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 6d 0c 02 c0       	push   0xc0020c6d
c0007a5a:	e8 c8 9a 00 00       	call   c0011527 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 74 0c 02 c0       	push   0xc0020c74
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 27 92 00 00       	call   c0010dad <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 50 91 00 00       	call   c0010cf7 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 2d 7d 01 00       	call   c001f8ea <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 8c 0c 02 c0       	push   0xc0020c8c
c0007c4b:	e8 d7 98 00 00       	call   c0011527 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 8c 0c 02 c0       	push   0xc0020c8c
c0007cc5:	e8 5d 98 00 00       	call   c0011527 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023598
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023598
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023598
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 31 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d31
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 57 97 00 00       	jmp    c0011527 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 b4 0c 02 c0       	push   0xc0020cb4
c0007e54:	e8 ce 96 00 00       	call   c0011527 <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 47 0d 02 c0       	push   0xc0020d47
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 e4 0c 02 c0       	push   0xc0020ce4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 5f 0d 02 c0       	push   0xc0020d5f
c000810a:	e8 18 94 00 00       	call   c0011527 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 08 0d 02 c0       	push   0xc0020d08
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 6d 0d 02 c0       	push   0xc0020d6d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 89 0d 02 c0       	push   0xc0020d89
c0008331:	e8 f1 91 00 00       	call   c0011527 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 91 dc 00 00       	call   c0016010 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 c3 73 01 00       	call   c001f7d0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 a6 0d 02 c0       	push   0xc0020da6
c0008422:	e8 00 91 00 00       	call   c0011527 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 14 0e 02 c0       	mov    edx,0xc0020e14
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 36 53 00 00       	call   c000d842 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 7e 08 01 00       	call   c0018db0 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca40]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca40]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb88]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbb0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 b0 05 01 00       	call   c0018c44 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 0d 06 01 00       	jmp    c0018d4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 e0 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020de0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 9b 8d 00 00       	jmp    c0011527 <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 96 3a 00 00       	jmp    c000c37f <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ee 0d 02 c0       	mov    esi,0xc0020dee
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 24 01 01 00       	call   c0018d4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 14 0e 02 c0       	mov    edx,0xc0020e14
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 ff 0d 02 c0       	push   0xc0020dff
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 05 0e 02 c0       	push   0xc0020e05
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 cf 67 01 00       	call   c001f9b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba f8 0e 02 c0       	mov    edx,0xc0020ef8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 cf 66 01 00       	call   c001fa8c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 c3 66 01 00       	call   c001fa94 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 c9 65 01 00       	call   c001f9b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 b4 0e 02 c0       	push   0xc0020eb4
c0009414:	e8 0e 81 00 00       	call   c0011527 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba f8 0e 02 c0       	mov    edx,0xc0020ef8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 ce 65 01 00       	call   c001fa8c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 5b 66 01 00       	call   c001fb36 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 19 64 01 00       	call   c001f976 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 35 02 c0       	push   0xc0023590
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 74 f9 01 c0       	push   0xc001f974
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023608
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023608
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023604
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023604,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 0c 0f 02 c0       	push   0xc0020f0c
c0009674:	e8 ae 7e 00 00       	call   c0011527 <KePanic(char const*)>
c0009679:	8b 2d 04 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023604
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 36 02 c0       	mov    eax,ds:0xc0023604
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 36 02 c0       	mov    ds:0xc0023604,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002360c
c000973e:	8b 0d 14 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023614
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023610
c0009759:	8b 0d 0c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002360c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 a0 11 02 c0       	push   0xc00211a0
c000979e:	e8 84 7d 00 00       	call   c0011527 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 b7 11 02 c0       	push   0xc00211b7
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 36 02 c0    	mov    DWORD PTR ds:0xc0023610,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 36 02 c0 43 	mov    BYTE PTR ds:0xc0023618,0x43
c000984f:	c7 05 0c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002360c,0x8
c0009859:	a3 14 36 02 c0       	mov    ds:0xc0023614,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 36 02 c0       	mov    eax,ds:0xc0023610
c0009874:	f7 35 0c 36 02 c0    	div    DWORD PTR ds:0xc002360c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 2c 0f 02 c0       	push   0xc0020f2c
c00098af:	e8 73 7c 00 00       	call   c0011527 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ce 11 02 c0       	push   0xc00211ce
c0009981:	e8 a1 7b 00 00       	call   c0011527 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 50 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f50
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 3e 7b 00 00       	jmp    c0011527 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ea 11 02 c0       	push   0xc00211ea
c00099f6:	e8 2c 7b 00 00       	call   c0011527 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 06 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021206
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 e2 7a 00 00       	jmp    c0011527 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 74 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f74
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 98 0f 02 c0       	push   0xc0020f98
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 00 10 02 c0       	push   0xc0021000
c0009d87:	e8 9b 77 00 00       	call   c0011527 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 24 10 02 c0       	push   0xc0021024
c0009e7b:	e8 a7 76 00 00       	call   c0011527 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 50 10 02 c0       	push   0xc0021050
c0009fd9:	e8 49 75 00 00       	call   c0011527 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 e6 29 00 00       	call   c000cbf4 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 20 12 02 c0       	push   0xc0021220
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023618
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 c2 3a 00 00       	call   c000ddb6 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 36 02 c0    	cmp    DWORD PTR ds:0xc002360c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 74 10 02 c0       	push   0xc0021074
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 2e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002122e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 51 12 02 c0       	push   0xc0021251
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 3f 12 02 c0       	push   0xc002123f
c000a413:	e8 0f 71 00 00       	call   c0011527 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 a4 10 02 c0       	push   0xc00210a4
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023618
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 7e 38 00 00       	call   c000dd4a <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 36 02 c0    	cmp    DWORD PTR ds:0xc002360c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 64 12 02 c0       	push   0xc0021264
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 c4 10 02 c0       	push   0xc00210c4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 24 11 02 c0 	mov    DWORD PTR [esp],0xc0021124
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 79 12 02 c0       	push   0xc0021279
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 8d 12 02 c0       	push   0xc002128d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 a0 12 02 c0       	push   0xc00212a0
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 ad 12 02 c0       	push   0xc00212ad
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 c6 12 02 c0       	push   0xc00212c6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 c6 12 02 c0       	push   0xc00212c6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ce 12 02 c0 	mov    DWORD PTR [esp],0xc00212ce
c000a7ec:	e8 36 6d 00 00       	call   c0011527 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 e6 12 02 c0       	push   0xc00212e6
c000a7fe:	e8 24 6d 00 00       	call   c0011527 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 fc 12 02 c0 	jmp    DWORD PTR [eax*4-0x3ffded04]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 4c 14 02 c0       	push   0xc002144c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 60 14 02 c0       	push   0xc0021460
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 6a 14 02 c0       	push   0xc002146a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 74 14 02 c0       	push   0xc0021474
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 b8 15 02 c0       	push   0xc00215b8
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 7e 14 02 c0       	push   0xc002147e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 d8 15 02 c0       	push   0xc00215d8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 93 14 02 c0       	push   0xc0021493
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 ad 14 02 c0       	push   0xc00214ad
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9e0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 00 16 02 c0       	push   0xc0021600
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 b8 15 02 c0       	push   0xc00215b8
c000ab78:	e8 aa 69 00 00       	call   c0011527 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 48 16 02 c0       	push   0xc0021648
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 48 16 02 c0       	push   0xc0021648
c000aba7:	e8 7b 69 00 00       	call   c0011527 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 b8 14 02 c0       	push   0xc00214b8
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 b8 14 02 c0       	push   0xc00214b8
c000abd3:	e8 4f 69 00 00       	call   c0011527 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 d5 14 02 c0       	push   0xc00214d5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 d5 14 02 c0       	push   0xc00214d5
c000abff:	e8 23 69 00 00       	call   c0011527 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 68 16 02 c0       	push   0xc0021668
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 68 16 02 c0       	push   0xc0021668
c000ac2b:	e8 f7 68 00 00       	call   c0011527 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 8c 16 02 c0       	push   0xc002168c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 8c 16 02 c0       	push   0xc002168c
c000ac57:	e8 cb 68 00 00       	call   c0011527 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 f1 14 02 c0       	push   0xc00214f1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 f1 14 02 c0       	push   0xc00214f1
c000ac83:	e8 9f 68 00 00       	call   c0011527 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 0d 15 02 c0       	push   0xc002150d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 0d 15 02 c0       	push   0xc002150d
c000acaf:	e8 73 68 00 00       	call   c0011527 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 ac 16 02 c0       	push   0xc00216ac
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 ac 16 02 c0       	push   0xc00216ac
c000acdb:	e8 47 68 00 00       	call   c0011527 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 d0 16 02 c0       	push   0xc00216d0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 d0 16 02 c0       	push   0xc00216d0
c000ad07:	e8 1b 68 00 00       	call   c0011527 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 ef 16 02 c0       	push   0xc00216ef
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 5e 0d 00 00       	call   c000bae2 <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 0d 17 02 c0       	push   0xc002170d
c000ad93:	e8 8f 67 00 00       	call   c0011527 <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	50                   	push   eax
c000ad9c:	50                   	push   eax
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 5b 0d 00 00       	call   c000bb00 <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 27 17 02 c0       	push   0xc0021727
c000adb4:	e8 6e 67 00 00       	call   c0011527 <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	89 f0                	mov    eax,esi
c000adcb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adcd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add1:	c1 e0 08             	shl    eax,0x8
c000add4:	57                   	push   edi
c000add5:	05 00 70 02 c0       	add    eax,0xc0027000
c000adda:	50                   	push   eax
c000addb:	6a 00                	push   0x0
c000addd:	68 00 01 00 00       	push   0x100
c000ade2:	53                   	push   ebx
c000ade3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ade6:	83 c4 20             	add    esp,0x20
c000ade9:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000adf1:	74 10                	je     c000ae03 <KiFlushSymlinkChanges()+0xa5>
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	68 41 17 02 c0       	push   0xc0021741
c000adfb:	e8 27 67 00 00       	call   c0011527 <KePanic(char const*)>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae05:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	57                   	push   edi
c000ae10:	52                   	push   edx
c000ae11:	6a 00                	push   0x0
c000ae13:	6a 08                	push   0x8
c000ae15:	53                   	push   ebx
c000ae16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae19:	83 c4 20             	add    esp,0x20
c000ae1c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 5b 17 02 c0       	push   0xc002175b
c000ae2b:	e8 f7 66 00 00       	call   c0011527 <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 1f 0d 00 00       	call   c000bb5e <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	5b                   	pop    ebx
c000ae60:	5e                   	pop    esi
c000ae61:	5f                   	pop    edi
c000ae62:	c3                   	ret    

c000ae63 <KiDeinitialiseSymlinks(void*)>:
c000ae63:	e9 f6 fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000ae68 <KiGetSymlinkHash(char const*)>:
c000ae68:	53                   	push   ebx
c000ae69:	89 c3                	mov    ebx,eax
c000ae6b:	83 ec 14             	sub    esp,0x14
c000ae6e:	50                   	push   eax
c000ae6f:	e8 0c 57 ff ff       	call   c0000580 <strlen>
c000ae74:	5a                   	pop    edx
c000ae75:	59                   	pop    ecx
c000ae76:	50                   	push   eax
c000ae77:	53                   	push   ebx
c000ae78:	e8 2c 60 00 00       	call   c0010ea9 <KeCalculateCRC32(unsigned char*, int)>
c000ae7d:	83 c4 18             	add    esp,0x18
c000ae80:	5b                   	pop    ebx
c000ae81:	89 c2                	mov    edx,eax
c000ae83:	c1 ea 10             	shr    edx,0x10
c000ae86:	31 d0                	xor    eax,edx
c000ae88:	c3                   	ret    

c000ae89 <KiCreateSymlinkID()>:
c000ae89:	55                   	push   ebp
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	53                   	push   ebx
c000ae8d:	31 db                	xor    ebx,ebx
c000ae8f:	83 ec 1c             	sub    esp,0x1c
c000ae92:	e8 de 67 00 00       	call   c0011675 <KeRand()>
c000ae97:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	43                   	inc    ebx
c000aea0:	31 ff                	xor    edi,edi
c000aea2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aea5:	89 ee                	mov    esi,ebp
c000aea7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aead:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aeb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aeb5:	c1 e0 1b             	shl    eax,0x1b
c000aeb8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec2:	75 10                	jne    c000aed4 <KiCreateSymlinkID()+0x4b>
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	68 75 17 02 c0       	push   0xc0021775
c000aecc:	e8 56 66 00 00       	call   c0011527 <KePanic(char const*)>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aed8:	75 06                	jne    c000aee0 <KiCreateSymlinkID()+0x57>
c000aeda:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aede:	74 b2                	je     c000ae92 <KiCreateSymlinkID()+0x9>
c000aee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aee4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee8:	83 c4 1c             	add    esp,0x1c
c000aeeb:	5b                   	pop    ebx
c000aeec:	31 f0                	xor    eax,esi
c000aeee:	5e                   	pop    esi
c000aeef:	31 fa                	xor    edx,edi
c000aef1:	5f                   	pop    edi
c000aef2:	5d                   	pop    ebp
c000aef3:	c3                   	ret    

c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>:
c000aef4:	53                   	push   ebx
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aefc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af00:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af09:	68 00 01 00 00       	push   0x100
c000af0e:	6a 00                	push   0x0
c000af10:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af17:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af1e:	c1 e0 08             	shl    eax,0x8
c000af21:	05 00 70 02 c0       	add    eax,0xc0027000
c000af26:	50                   	push   eax
c000af27:	e8 c4 55 ff ff       	call   c00004f0 <memset>
c000af2c:	58                   	pop    eax
c000af2d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af32:	5a                   	pop    edx
c000af33:	c1 e0 08             	shl    eax,0x8
c000af36:	53                   	push   ebx
c000af37:	05 00 70 02 c0       	add    eax,0xc0027000
c000af3c:	50                   	push   eax
c000af3d:	e8 0e 57 ff ff       	call   c0000650 <strcpy>
c000af42:	89 d8                	mov    eax,ebx
c000af44:	e8 1f ff ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af49:	ba 01 00 00 00       	mov    edx,0x1
c000af4e:	0f b7 c0             	movzx  eax,ax
c000af51:	e8 d8 fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000af56:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	40                   	inc    eax
c000af5f:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af64:	83 f8 03             	cmp    eax,0x3
c000af67:	7e 09                	jle    c000af72 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000af69:	83 c4 08             	add    esp,0x8
c000af6c:	5b                   	pop    ebx
c000af6d:	e9 ec fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000af72:	83 c4 08             	add    esp,0x8
c000af75:	5b                   	pop    ebx
c000af76:	c3                   	ret    

c000af77 <KiIsSymlinkRegistered(char const*)>:
c000af77:	55                   	push   ebp
c000af78:	57                   	push   edi
c000af79:	56                   	push   esi
c000af7a:	53                   	push   ebx
c000af7b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000af81:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000af88:	89 f0                	mov    eax,esi
c000af8a:	e8 d9 fe ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af8f:	0f b7 c0             	movzx  eax,ax
c000af92:	e8 7d fd ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000af97:	31 d2                	xor    edx,edx
c000af99:	88 c1                	mov    cl,al
c000af9b:	31 c0                	xor    eax,eax
c000af9d:	84 c9                	test   cl,cl
c000af9f:	0f 84 3d 01 00 00    	je     c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afa5:	31 db                	xor    ebx,ebx
c000afa7:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afad:	7e 30                	jle    c000afdf <KiIsSymlinkRegistered(char const*)+0x68>
c000afaf:	89 d8                	mov    eax,ebx
c000afb1:	c1 e0 08             	shl    eax,0x8
c000afb4:	57                   	push   edi
c000afb5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afba:	57                   	push   edi
c000afbb:	50                   	push   eax
c000afbc:	56                   	push   esi
c000afbd:	e8 be 57 ff ff       	call   c0000780 <strcmp>
c000afc2:	83 c4 10             	add    esp,0x10
c000afc5:	85 c0                	test   eax,eax
c000afc7:	75 13                	jne    c000afdc <KiIsSymlinkRegistered(char const*)+0x65>
c000afc9:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000afd0:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000afd7:	e9 06 01 00 00       	jmp    c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afdc:	43                   	inc    ebx
c000afdd:	eb c8                	jmp    c000afa7 <KiIsSymlinkRegistered(char const*)+0x30>
c000afdf:	83 ec 0c             	sub    esp,0xc
c000afe2:	68 14 01 00 00       	push   0x114
c000afe7:	e8 e7 ca ff ff       	call   c0007ad3 <malloc>
c000afec:	83 c4 0c             	add    esp,0xc
c000afef:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000aff5:	68 ef 16 02 c0       	push   0xc00216ef
c000affa:	50                   	push   eax
c000affb:	89 c3                	mov    ebx,eax
c000affd:	e8 e0 0a 00 00       	call   c000bae2 <File::File(char const*, Process*)>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	85 db                	test   ebx,ebx
c000b007:	75 12                	jne    c000b01b <KiIsSymlinkRegistered(char const*)+0xa4>
c000b009:	83 ec 0c             	sub    esp,0xc
c000b00c:	68 7e 17 02 c0       	push   0xc002177e
c000b011:	e8 11 65 00 00       	call   c0011527 <KePanic(char const*)>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	eb 10                	jmp    c000b02b <KiIsSymlinkRegistered(char const*)+0xb4>
c000b01b:	83 ec 0c             	sub    esp,0xc
c000b01e:	53                   	push   ebx
c000b01f:	e8 a0 0d 00 00       	call   c000bdc4 <File::exists()>
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	84 c0                	test   al,al
c000b029:	74 de                	je     c000b009 <KiIsSymlinkRegistered(char const*)+0x92>
c000b02b:	51                   	push   ecx
c000b02c:	51                   	push   ecx
c000b02d:	6a 01                	push   0x1
c000b02f:	53                   	push   ebx
c000b030:	e8 cb 0a 00 00       	call   c000bb00 <File::open(FileOpenMode)>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	85 c0                	test   eax,eax
c000b03a:	74 10                	je     c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	68 99 17 02 c0       	push   0xc0021799
c000b044:	e8 de 64 00 00       	call   c0011527 <KePanic(char const*)>
c000b049:	83 c4 10             	add    esp,0x10
c000b04c:	83 ec 0c             	sub    esp,0xc
c000b04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b051:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b055:	55                   	push   ebp
c000b056:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b05a:	57                   	push   edi
c000b05b:	6a 00                	push   0x0
c000b05d:	68 00 01 00 00       	push   0x100
c000b062:	53                   	push   ebx
c000b063:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b066:	83 c4 20             	add    esp,0x20
c000b069:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b071:	75 57                	jne    c000b0ca <KiIsSymlinkRegistered(char const*)+0x153>
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b078:	55                   	push   ebp
c000b079:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b07d:	52                   	push   edx
c000b07e:	6a 00                	push   0x0
c000b080:	6a 08                	push   0x8
c000b082:	53                   	push   ebx
c000b083:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b086:	83 c4 20             	add    esp,0x20
c000b089:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b08e:	75 3a                	jne    c000b0ca <KiIsSymlinkRegistered(char const*)+0x153>
c000b090:	52                   	push   edx
c000b091:	52                   	push   edx
c000b092:	57                   	push   edi
c000b093:	56                   	push   esi
c000b094:	e8 e7 56 ff ff       	call   c0000780 <strcmp>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	85 c0                	test   eax,eax
c000b09e:	75 ac                	jne    c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0a0:	50                   	push   eax
c000b0a1:	50                   	push   eax
c000b0a2:	57                   	push   edi
c000b0a3:	68 b4 17 02 c0       	push   0xc00217b4
c000b0a8:	e8 5d f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0b0:	e8 a9 0a 00 00       	call   c000bb5e <File::close()>
c000b0b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	eb 18                	jmp    c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	53                   	push   ebx
c000b0ce:	e8 8b 0a 00 00       	call   c000bb5e <File::close()>
c000b0d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	31 c0                	xor    eax,eax
c000b0e0:	31 d2                	xor    edx,edx
c000b0e2:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b0e8:	5b                   	pop    ebx
c000b0e9:	5e                   	pop    esi
c000b0ea:	5f                   	pop    edi
c000b0eb:	5d                   	pop    ebp
c000b0ec:	c3                   	ret    

c000b0ed <KeDereferenceSymlink(char const*, char*)>:
c000b0ed:	55                   	push   ebp
c000b0ee:	57                   	push   edi
c000b0ef:	56                   	push   esi
c000b0f0:	53                   	push   ebx
c000b0f1:	83 ec 48             	sub    esp,0x48
c000b0f4:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b0f8:	56                   	push   esi
c000b0f9:	e8 79 fe ff ff       	call   c000af77 <KiIsSymlinkRegistered(char const*)>
c000b0fe:	83 c4 10             	add    esp,0x10
c000b101:	89 c7                	mov    edi,eax
c000b103:	89 d0                	mov    eax,edx
c000b105:	09 f8                	or     eax,edi
c000b107:	75 07                	jne    c000b110 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b109:	31 c0                	xor    eax,eax
c000b10b:	e9 7c 01 00 00       	jmp    c000b28c <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b110:	83 ec 0c             	sub    esp,0xc
c000b113:	89 d5                	mov    ebp,edx
c000b115:	68 14 01 00 00       	push   0x114
c000b11a:	e8 b4 c9 ff ff       	call   c0007ad3 <malloc>
c000b11f:	83 c4 0c             	add    esp,0xc
c000b122:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b128:	56                   	push   esi
c000b129:	50                   	push   eax
c000b12a:	89 c3                	mov    ebx,eax
c000b12c:	e8 b1 09 00 00       	call   c000bae2 <File::File(char const*, Process*)>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	85 db                	test   ebx,ebx
c000b136:	0f 84 32 01 00 00    	je     c000b26e <KeDereferenceSymlink(char const*, char*)+0x181>
c000b13c:	56                   	push   esi
c000b13d:	56                   	push   esi
c000b13e:	6a 01                	push   0x1
c000b140:	53                   	push   ebx
c000b141:	e8 ba 09 00 00       	call   c000bb00 <File::open(FileOpenMode)>
c000b146:	83 c4 10             	add    esp,0x10
c000b149:	85 c0                	test   eax,eax
c000b14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b14d:	74 09                	je     c000b158 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	53                   	push   ebx
c000b153:	e9 10 01 00 00       	jmp    c000b268 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b15f:	56                   	push   esi
c000b160:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b164:	52                   	push   edx
c000b165:	6a 00                	push   0x0
c000b167:	6a 08                	push   0x8
c000b169:	53                   	push   ebx
c000b16a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b16d:	83 c4 20             	add    esp,0x20
c000b170:	85 c0                	test   eax,eax
c000b172:	0f 85 e2 00 00 00    	jne    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b178:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b17d:	0f 85 d7 00 00 00    	jne    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b183:	83 ec 0c             	sub    esp,0xc
c000b186:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b188:	56                   	push   esi
c000b189:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b18d:	52                   	push   edx
c000b18e:	6a 00                	push   0x0
c000b190:	6a 08                	push   0x8
c000b192:	53                   	push   ebx
c000b193:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b196:	83 c4 20             	add    esp,0x20
c000b199:	85 c0                	test   eax,eax
c000b19b:	0f 85 b9 00 00 00    	jne    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1a1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1a6:	0f 85 ae 00 00 00    	jne    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1ac:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b1b0:	0f 85 53 ff ff ff    	jne    c000b109 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1b6:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b1ba:	0f 85 49 ff ff ff    	jne    c000b109 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1c8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b1d0:	51                   	push   ecx
c000b1d1:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b1d5:	50                   	push   eax
c000b1d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b1da:	50                   	push   eax
c000b1db:	53                   	push   ebx
c000b1dc:	e8 21 0c 00 00       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b1e9:	75 6f                	jne    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1ef:	31 c9                	xor    ecx,ecx
c000b1f1:	bf 0f 00 00 00       	mov    edi,0xf
c000b1f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b1fa:	39 c7                	cmp    edi,eax
c000b1fc:	89 cf                	mov    edi,ecx
c000b1fe:	19 d7                	sbb    edi,edx
c000b200:	73 58                	jae    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b202:	83 c0 f0             	add    eax,0xfffffff0
c000b205:	bf ff 00 00 00       	mov    edi,0xff
c000b20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b20e:	83 d2 ff             	adc    edx,0xffffffff
c000b211:	39 c7                	cmp    edi,eax
c000b213:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b217:	19 d1                	sbb    ecx,edx
c000b219:	72 53                	jb     c000b26e <KeDereferenceSymlink(char const*, char*)+0x181>
c000b21b:	40                   	inc    eax
c000b21c:	52                   	push   edx
c000b21d:	50                   	push   eax
c000b21e:	6a 00                	push   0x0
c000b220:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b224:	e8 c7 52 ff ff       	call   c00004f0 <memset>
c000b229:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b22b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b22e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b232:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b236:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b23a:	53                   	push   ebx
c000b23b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b23e:	83 c4 20             	add    esp,0x20
c000b241:	85 c0                	test   eax,eax
c000b243:	75 15                	jne    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b245:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b249:	89 c7                	mov    edi,eax
c000b24b:	c1 ff 1f             	sar    edi,0x1f
c000b24e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b252:	75 06                	jne    c000b25a <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b254:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b258:	74 19                	je     c000b273 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b25a:	83 ec 0c             	sub    esp,0xc
c000b25d:	53                   	push   ebx
c000b25e:	e8 fb 08 00 00       	call   c000bb5e <File::close()>
c000b263:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b268:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b26b:	83 c4 10             	add    esp,0x10
c000b26e:	83 c8 ff             	or     eax,0xffffffff
c000b271:	eb 19                	jmp    c000b28c <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b273:	83 ec 0c             	sub    esp,0xc
c000b276:	53                   	push   ebx
c000b277:	e8 e2 08 00 00       	call   c000bb5e <File::close()>
c000b27c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b27e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b284:	83 c4 10             	add    esp,0x10
c000b287:	b8 01 00 00 00       	mov    eax,0x1
c000b28c:	83 c4 3c             	add    esp,0x3c
c000b28f:	5b                   	pop    ebx
c000b290:	5e                   	pop    esi
c000b291:	5f                   	pop    edi
c000b292:	5d                   	pop    ebp
c000b293:	c3                   	ret    

c000b294 <KeCreateSymlink(char const*, char const*)>:
c000b294:	55                   	push   ebp
c000b295:	57                   	push   edi
c000b296:	56                   	push   esi
c000b297:	53                   	push   ebx
c000b298:	83 ec 38             	sub    esp,0x38
c000b29b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b29f:	68 14 01 00 00       	push   0x114
c000b2a4:	e8 2a c8 ff ff       	call   c0007ad3 <malloc>
c000b2a9:	6a 00                	push   0x0
c000b2ab:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2b1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b2b5:	89 c3                	mov    ebx,eax
c000b2b7:	50                   	push   eax
c000b2b8:	e8 47 07 00 00       	call   c000ba04 <File::File(char const*, Process*, bool)>
c000b2bd:	83 c4 20             	add    esp,0x20
c000b2c0:	85 db                	test   ebx,ebx
c000b2c2:	b8 01 00 00 00       	mov    eax,0x1
c000b2c7:	0f 84 fb 00 00 00    	je     c000b3c8 <KeCreateSymlink(char const*, char const*)+0x134>
c000b2cd:	52                   	push   edx
c000b2ce:	52                   	push   edx
c000b2cf:	6a 12                	push   0x12
c000b2d1:	53                   	push   ebx
c000b2d2:	e8 29 08 00 00       	call   c000bb00 <File::open(FileOpenMode)>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	85 c0                	test   eax,eax
c000b2dc:	74 0b                	je     c000b2e9 <KeCreateSymlink(char const*, char const*)+0x55>
c000b2de:	83 ec 0c             	sub    esp,0xc
c000b2e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2e3:	53                   	push   ebx
c000b2e4:	e9 d4 00 00 00       	jmp    c000b3bd <KeCreateSymlink(char const*, char const*)+0x129>
c000b2e9:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b2ed:	be cb 17 02 c0       	mov    esi,0xc00217cb
c000b2f2:	b9 09 00 00 00       	mov    ecx,0x9
c000b2f7:	fc                   	cld    
c000b2f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b2fa:	83 ec 0c             	sub    esp,0xc
c000b2fd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b301:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b303:	56                   	push   esi
c000b304:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b308:	52                   	push   edx
c000b309:	6a 00                	push   0x0
c000b30b:	6a 08                	push   0x8
c000b30d:	53                   	push   ebx
c000b30e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b311:	83 c4 20             	add    esp,0x20
c000b314:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b319:	0f 85 90 00 00 00    	jne    c000b3af <KeCreateSymlink(char const*, char const*)+0x11b>
c000b31f:	85 c0                	test   eax,eax
c000b321:	0f 85 88 00 00 00    	jne    c000b3af <KeCreateSymlink(char const*, char const*)+0x11b>
c000b327:	e8 5d fb ff ff       	call   c000ae89 <KiCreateSymlinkID()>
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b333:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b337:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b339:	56                   	push   esi
c000b33a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b33e:	52                   	push   edx
c000b33f:	6a 00                	push   0x0
c000b341:	6a 08                	push   0x8
c000b343:	53                   	push   ebx
c000b344:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b347:	83 c4 20             	add    esp,0x20
c000b34a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b34f:	75 5e                	jne    c000b3af <KeCreateSymlink(char const*, char const*)+0x11b>
c000b351:	85 c0                	test   eax,eax
c000b353:	75 5a                	jne    c000b3af <KeCreateSymlink(char const*, char const*)+0x11b>
c000b355:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b357:	83 ec 0c             	sub    esp,0xc
c000b35a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b35d:	55                   	push   ebp
c000b35e:	e8 1d 52 ff ff       	call   c0000580 <strlen>
c000b363:	31 d2                	xor    edx,edx
c000b365:	89 34 24             	mov    DWORD PTR [esp],esi
c000b368:	55                   	push   ebp
c000b369:	52                   	push   edx
c000b36a:	50                   	push   eax
c000b36b:	53                   	push   ebx
c000b36c:	ff d7                	call   edi
c000b36e:	83 c4 14             	add    esp,0x14
c000b371:	55                   	push   ebp
c000b372:	89 c6                	mov    esi,eax
c000b374:	e8 07 52 ff ff       	call   c0000580 <strlen>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b380:	75 2d                	jne    c000b3af <KeCreateSymlink(char const*, char const*)+0x11b>
c000b382:	85 f6                	test   esi,esi
c000b384:	75 29                	jne    c000b3af <KeCreateSymlink(char const*, char const*)+0x11b>
c000b386:	50                   	push   eax
c000b387:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b38b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b38f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b393:	e8 5c fb ff ff       	call   c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>
c000b398:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b39b:	e8 be 07 00 00       	call   c000bb5e <File::close()>
c000b3a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	31 c0                	xor    eax,eax
c000b3ad:	eb 19                	jmp    c000b3c8 <KeCreateSymlink(char const*, char const*)+0x134>
c000b3af:	83 ec 0c             	sub    esp,0xc
c000b3b2:	53                   	push   ebx
c000b3b3:	e8 a6 07 00 00       	call   c000bb5e <File::close()>
c000b3b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	b8 01 00 00 00       	mov    eax,0x1
c000b3c8:	83 c4 2c             	add    esp,0x2c
c000b3cb:	5b                   	pop    ebx
c000b3cc:	5e                   	pop    esi
c000b3cd:	5f                   	pop    edi
c000b3ce:	5d                   	pop    ebp
c000b3cf:	c3                   	ret    

c000b3d0 <KeInitialiseSymlinks()>:
c000b3d0:	57                   	push   edi
c000b3d1:	56                   	push   esi
c000b3d2:	53                   	push   ebx
c000b3d3:	81 ec 14 01 00 00    	sub    esp,0x114
c000b3d9:	68 00 20 00 00       	push   0x2000
c000b3de:	6a 00                	push   0x0
c000b3e0:	68 00 74 02 c0       	push   0xc0027400
c000b3e5:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b3ef:	e8 fc 50 ff ff       	call   c00004f0 <memset>
c000b3f4:	5f                   	pop    edi
c000b3f5:	58                   	pop    eax
c000b3f6:	6a 00                	push   0x0
c000b3f8:	68 63 ae 00 c0       	push   0xc000ae63
c000b3fd:	e8 14 59 00 00       	call   c0010d16 <KeRegisterAtexit(void (*)(void*), void*)>
c000b402:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b409:	e8 c5 c6 ff ff       	call   c0007ad3 <malloc>
c000b40e:	83 c4 0c             	add    esp,0xc
c000b411:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b417:	68 ef 16 02 c0       	push   0xc00216ef
c000b41c:	50                   	push   eax
c000b41d:	89 c3                	mov    ebx,eax
c000b41f:	e8 be 06 00 00       	call   c000bae2 <File::File(char const*, Process*)>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	85 db                	test   ebx,ebx
c000b429:	75 10                	jne    c000b43b <KeInitialiseSymlinks()+0x6b>
c000b42b:	83 ec 0c             	sub    esp,0xc
c000b42e:	68 d4 17 02 c0       	push   0xc00217d4
c000b433:	e8 ef 60 00 00       	call   c0011527 <KePanic(char const*)>
c000b438:	83 c4 10             	add    esp,0x10
c000b43b:	83 ec 0c             	sub    esp,0xc
c000b43e:	53                   	push   ebx
c000b43f:	e8 80 09 00 00       	call   c000bdc4 <File::exists()>
c000b444:	83 c4 10             	add    esp,0x10
c000b447:	84 c0                	test   al,al
c000b449:	75 3a                	jne    c000b485 <KeInitialiseSymlinks()+0xb5>
c000b44b:	56                   	push   esi
c000b44c:	56                   	push   esi
c000b44d:	6a 12                	push   0x12
c000b44f:	53                   	push   ebx
c000b450:	e8 ab 06 00 00       	call   c000bb00 <File::open(FileOpenMode)>
c000b455:	83 c4 10             	add    esp,0x10
c000b458:	85 c0                	test   eax,eax
c000b45a:	74 10                	je     c000b46c <KeInitialiseSymlinks()+0x9c>
c000b45c:	83 ec 0c             	sub    esp,0xc
c000b45f:	68 f1 17 02 c0       	push   0xc00217f1
c000b464:	e8 be 60 00 00       	call   c0011527 <KePanic(char const*)>
c000b469:	83 c4 10             	add    esp,0x10
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	53                   	push   ebx
c000b470:	e8 e9 06 00 00       	call   c000bb5e <File::close()>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	85 db                	test   ebx,ebx
c000b47a:	0f 84 a5 00 00 00    	je     c000b525 <KeInitialiseSymlinks()+0x155>
c000b480:	e9 94 00 00 00       	jmp    c000b519 <KeInitialiseSymlinks()+0x149>
c000b485:	51                   	push   ecx
c000b486:	51                   	push   ecx
c000b487:	6a 01                	push   0x1
c000b489:	53                   	push   ebx
c000b48a:	e8 71 06 00 00       	call   c000bb00 <File::open(FileOpenMode)>
c000b48f:	83 c4 10             	add    esp,0x10
c000b492:	85 c0                	test   eax,eax
c000b494:	74 10                	je     c000b4a6 <KeInitialiseSymlinks()+0xd6>
c000b496:	83 ec 0c             	sub    esp,0xc
c000b499:	68 0e 18 02 c0       	push   0xc002180e
c000b49e:	e8 84 60 00 00       	call   c0011527 <KePanic(char const*)>
c000b4a3:	83 c4 10             	add    esp,0x10
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b4af:	57                   	push   edi
c000b4b0:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b4b4:	56                   	push   esi
c000b4b5:	6a 00                	push   0x0
c000b4b7:	68 00 01 00 00       	push   0x100
c000b4bc:	53                   	push   ebx
c000b4bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4c0:	83 c4 20             	add    esp,0x20
c000b4c3:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b4cb:	75 40                	jne    c000b50d <KeInitialiseSymlinks()+0x13d>
c000b4cd:	83 ec 0c             	sub    esp,0xc
c000b4d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4d2:	57                   	push   edi
c000b4d3:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4d7:	52                   	push   edx
c000b4d8:	6a 00                	push   0x0
c000b4da:	6a 08                	push   0x8
c000b4dc:	53                   	push   ebx
c000b4dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4e0:	83 c4 20             	add    esp,0x20
c000b4e3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4e8:	75 23                	jne    c000b50d <KeInitialiseSymlinks()+0x13d>
c000b4ea:	52                   	push   edx
c000b4eb:	52                   	push   edx
c000b4ec:	56                   	push   esi
c000b4ed:	68 29 18 02 c0       	push   0xc0021829
c000b4f2:	e8 13 f4 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b4f7:	89 f0                	mov    eax,esi
c000b4f9:	e8 6a f9 ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b4fe:	ba 01 00 00 00       	mov    edx,0x1
c000b503:	0f b7 c0             	movzx  eax,ax
c000b506:	e8 23 f8 ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b50b:	eb 96                	jmp    c000b4a3 <KeInitialiseSymlinks()+0xd3>
c000b50d:	83 ec 0c             	sub    esp,0xc
c000b510:	53                   	push   ebx
c000b511:	e8 48 06 00 00       	call   c000bb5e <File::close()>
c000b516:	83 c4 10             	add    esp,0x10
c000b519:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	53                   	push   ebx
c000b51f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	50                   	push   eax
c000b526:	50                   	push   eax
c000b527:	68 61 18 02 c0       	push   0xc0021861
c000b52c:	68 6f 18 02 c0       	push   0xc002186f
c000b531:	e8 5e fd ff ff       	call   c000b294 <KeCreateSymlink(char const*, char const*)>
c000b536:	81 c4 20 01 00 00    	add    esp,0x120
c000b53c:	5b                   	pop    ebx
c000b53d:	5e                   	pop    esi
c000b53e:	5f                   	pop    edi
c000b53f:	c3                   	ret    

c000b540 <File::read(unsigned long long, void*, int*)>:
c000b540:	53                   	push   ebx
c000b541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b545:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b549:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b550:	83 f8 19             	cmp    eax,0x19
c000b553:	77 35                	ja     c000b58a <File::read(unsigned long long, void*, int*)+0x4a>
c000b555:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b55c:	85 c0                	test   eax,eax
c000b55e:	74 2a                	je     c000b58a <File::read(unsigned long long, void*, int*)+0x4a>
c000b560:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b566:	85 c0                	test   eax,eax
c000b568:	74 20                	je     c000b58a <File::read(unsigned long long, void*, int*)+0x4a>
c000b56a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b56e:	74 21                	je     c000b591 <File::read(unsigned long long, void*, int*)+0x51>
c000b570:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b572:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b576:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b57c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b580:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b584:	5b                   	pop    ebx
c000b585:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b588:	ff e0                	jmp    eax
c000b58a:	b8 0b 00 00 00       	mov    eax,0xb
c000b58f:	eb 05                	jmp    c000b596 <File::read(unsigned long long, void*, int*)+0x56>
c000b591:	b8 05 00 00 00       	mov    eax,0x5
c000b596:	5b                   	pop    ebx
c000b597:	c3                   	ret    

c000b598 <File::write(unsigned long long, void*, int*)>:
c000b598:	53                   	push   ebx
c000b599:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b59d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5a1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5a8:	83 f8 19             	cmp    eax,0x19
c000b5ab:	77 35                	ja     c000b5e2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5ad:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5b4:	85 c0                	test   eax,eax
c000b5b6:	74 2a                	je     c000b5e2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5b8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5be:	85 c0                	test   eax,eax
c000b5c0:	74 20                	je     c000b5e2 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5c6:	74 21                	je     c000b5e9 <File::write(unsigned long long, void*, int*)+0x51>
c000b5c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5ca:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5ce:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	5b                   	pop    ebx
c000b5dd:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b5e0:	ff e0                	jmp    eax
c000b5e2:	b8 0b 00 00 00       	mov    eax,0xb
c000b5e7:	eb 05                	jmp    c000b5ee <File::write(unsigned long long, void*, int*)+0x56>
c000b5e9:	b8 05 00 00 00       	mov    eax,0x5
c000b5ee:	5b                   	pop    ebx
c000b5ef:	c3                   	ret    

c000b5f0 <Directory::read(unsigned long long, void*, int*)>:
c000b5f0:	53                   	push   ebx
c000b5f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b600:	83 f8 19             	cmp    eax,0x19
c000b603:	77 35                	ja     c000b63a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b605:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b60c:	85 c0                	test   eax,eax
c000b60e:	74 2a                	je     c000b63a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b610:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b616:	85 c0                	test   eax,eax
c000b618:	74 20                	je     c000b63a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b61a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b61e:	74 21                	je     c000b641 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b620:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b622:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b626:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b634:	5b                   	pop    ebx
c000b635:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b638:	ff e0                	jmp    eax
c000b63a:	b8 0b 00 00 00       	mov    eax,0xb
c000b63f:	eb 05                	jmp    c000b646 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b641:	b8 05 00 00 00       	mov    eax,0x5
c000b646:	5b                   	pop    ebx
c000b647:	c3                   	ret    

c000b648 <Directory::write(unsigned long long, void*, int*)>:
c000b648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b653:	b8 0b 00 00 00       	mov    eax,0xb
c000b658:	83 fa 19             	cmp    edx,0x19
c000b65b:	77 18                	ja     c000b675 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b65d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b664:	85 d2                	test   edx,edx
c000b666:	74 0d                	je     c000b675 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b668:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b66f:	19 c0                	sbb    eax,eax
c000b671:	83 e0 0a             	and    eax,0xa
c000b674:	40                   	inc    eax
c000b675:	c3                   	ret    

c000b676 <File::isAtty()>:
c000b676:	31 c0                	xor    eax,eax
c000b678:	c3                   	ret    
c000b679:	90                   	nop

c000b67a <Directory::isAtty()>:
c000b67a:	31 c0                	xor    eax,eax
c000b67c:	c3                   	ret    
c000b67d:	90                   	nop

c000b67e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b67e:	b8 0a 00 00 00       	mov    eax,0xa
c000b683:	c3                   	ret    

c000b684 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b684:	b8 0a 00 00 00       	mov    eax,0xa
c000b689:	c3                   	ret    

c000b68a <Filesystem::allocateSwapfile(char const*, int)>:
c000b68a:	31 c0                	xor    eax,eax
c000b68c:	31 d2                	xor    edx,edx
c000b68e:	c3                   	ret    
c000b68f:	90                   	nop

c000b690 <File::~File()>:
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	ba 44 19 02 c0       	mov    edx,0xc0021944
c000b698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b69c:	89 10                	mov    DWORD PTR [eax],edx
c000b69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a2:	83 ec 0c             	sub    esp,0xc
c000b6a5:	50                   	push   eax
c000b6a6:	e8 e1 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	90                   	nop
c000b6af:	83 c4 0c             	add    esp,0xc
c000b6b2:	c3                   	ret    
c000b6b3:	90                   	nop

c000b6b4 <File::~File()>:
c000b6b4:	83 ec 0c             	sub    esp,0xc
c000b6b7:	83 ec 0c             	sub    esp,0xc
c000b6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6be:	e8 cd ff ff ff       	call   c000b690 <File::~File()>
c000b6c3:	83 c4 10             	add    esp,0x10
c000b6c6:	83 ec 08             	sub    esp,0x8
c000b6c9:	68 14 01 00 00       	push   0x114
c000b6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d2:	e8 35 f1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	83 c4 0c             	add    esp,0xc
c000b6dd:	c3                   	ret    

c000b6de <Directory::~Directory()>:
c000b6de:	83 ec 0c             	sub    esp,0xc
c000b6e1:	ba 60 19 02 c0       	mov    edx,0xc0021960
c000b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ea:	89 10                	mov    DWORD PTR [eax],edx
c000b6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f0:	83 ec 0c             	sub    esp,0xc
c000b6f3:	50                   	push   eax
c000b6f4:	e8 93 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b6f9:	83 c4 10             	add    esp,0x10
c000b6fc:	90                   	nop
c000b6fd:	83 c4 0c             	add    esp,0xc
c000b700:	c3                   	ret    
c000b701:	90                   	nop

c000b702 <Directory::~Directory()>:
c000b702:	83 ec 0c             	sub    esp,0xc
c000b705:	83 ec 0c             	sub    esp,0xc
c000b708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b70c:	e8 cd ff ff ff       	call   c000b6de <Directory::~Directory()>
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	83 ec 08             	sub    esp,0x8
c000b717:	68 14 01 00 00       	push   0x114
c000b71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b720:	e8 e7 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	83 c4 0c             	add    esp,0xc
c000b72b:	c3                   	ret    

c000b72c <Filesystem::Filesystem()>:
c000b72c:	ba d8 18 02 c0       	mov    edx,0xc00218d8
c000b731:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b735:	89 10                	mov    DWORD PTR [eax],edx
c000b737:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b748:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b74d:	90                   	nop
c000b74e:	c3                   	ret    
c000b74f:	90                   	nop

c000b750 <Filesystem::~Filesystem()>:
c000b750:	ba d8 18 02 c0       	mov    edx,0xc00218d8
c000b755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b759:	89 10                	mov    DWORD PTR [eax],edx
c000b75b:	90                   	nop
c000b75c:	c3                   	ret    
c000b75d:	90                   	nop

c000b75e <Filesystem::~Filesystem()>:
c000b75e:	83 ec 0c             	sub    esp,0xc
c000b761:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b765:	e8 e6 ff ff ff       	call   c000b750 <Filesystem::~Filesystem()>
c000b76a:	83 c4 04             	add    esp,0x4
c000b76d:	83 ec 08             	sub    esp,0x8
c000b770:	6a 08                	push   0x8
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	e8 91 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b77b:	83 c4 10             	add    esp,0x10
c000b77e:	83 c4 0c             	add    esp,0xc
c000b781:	c3                   	ret    

c000b782 <Fs::getcwd(Process*, char*, int)>:
c000b782:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b786:	31 c0                	xor    eax,eax
c000b788:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b78c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b78f:	7d 15                	jge    c000b7a6 <Fs::getcwd(Process*, char*, int)+0x24>
c000b791:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b795:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b79c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b79f:	84 c9                	test   cl,cl
c000b7a1:	74 06                	je     c000b7a9 <Fs::getcwd(Process*, char*, int)+0x27>
c000b7a3:	40                   	inc    eax
c000b7a4:	eb e2                	jmp    c000b788 <Fs::getcwd(Process*, char*, int)+0x6>
c000b7a6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b7a9:	31 c0                	xor    eax,eax
c000b7ab:	c3                   	ret    

c000b7ac <Fs::initVFS()>:
c000b7ac:	83 ec 18             	sub    esp,0x18
c000b7af:	6a 08                	push   0x8
c000b7b1:	e8 1d c3 ff ff       	call   c0007ad3 <malloc>
c000b7b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7b9:	e8 c6 e3 00 00       	call   c0019b84 <FAT::FAT()>
c000b7be:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b7c5:	e8 09 c3 ff ff       	call   c0007ad3 <malloc>
c000b7ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7cd:	e8 e0 f2 00 00       	call   c001aab2 <ISO9660::ISO9660()>
c000b7d2:	83 c4 1c             	add    esp,0x1c
c000b7d5:	c3                   	ret    

c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b7d6:	55                   	push   ebp
c000b7d7:	57                   	push   edi
c000b7d8:	56                   	push   esi
c000b7d9:	53                   	push   ebx
c000b7da:	81 ec 20 04 00 00    	sub    esp,0x420
c000b7e0:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b7e7:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b7ee:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b7f5:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b7fc:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b800:	68 00 04 00 00       	push   0x400
c000b805:	6a 00                	push   0x0
c000b807:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b80b:	57                   	push   edi
c000b80c:	e8 df 4c ff ff       	call   c00004f0 <memset>
c000b811:	83 c4 10             	add    esp,0x10
c000b814:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b818:	75 0b                	jne    c000b825 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b81a:	50                   	push   eax
c000b81b:	50                   	push   eax
c000b81c:	56                   	push   esi
c000b81d:	57                   	push   edi
c000b81e:	e8 2d 4e ff ff       	call   c0000650 <strcpy>
c000b823:	eb 45                	jmp    c000b86a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b825:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b828:	83 f8 2f             	cmp    eax,0x2f
c000b82b:	74 05                	je     c000b832 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b82d:	83 f8 5c             	cmp    eax,0x5c
c000b830:	75 19                	jne    c000b84b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b832:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b835:	3c 60                	cmp    al,0x60
c000b837:	7e 03                	jle    c000b83c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b839:	83 e8 20             	sub    eax,0x20
c000b83c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b840:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b847:	50                   	push   eax
c000b848:	50                   	push   eax
c000b849:	eb 18                	jmp    c000b863 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b84b:	50                   	push   eax
c000b84c:	50                   	push   eax
c000b84d:	55                   	push   ebp
c000b84e:	57                   	push   edi
c000b84f:	e8 fc 4d ff ff       	call   c0000650 <strcpy>
c000b854:	58                   	pop    eax
c000b855:	5a                   	pop    edx
c000b856:	68 83 28 02 c0       	push   0xc0022883
c000b85b:	57                   	push   edi
c000b85c:	e8 0f 50 ff ff       	call   c0000870 <strcat>
c000b861:	59                   	pop    ecx
c000b862:	5d                   	pop    ebp
c000b863:	56                   	push   esi
c000b864:	57                   	push   edi
c000b865:	e8 06 50 ff ff       	call   c0000870 <strcat>
c000b86a:	83 c4 10             	add    esp,0x10
c000b86d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b871:	3c 60                	cmp    al,0x60
c000b873:	7e 03                	jle    c000b878 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b875:	83 e8 20             	sub    eax,0x20
c000b878:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b87c:	be 03 00 00 00       	mov    esi,0x3
c000b881:	88 03                	mov    BYTE PTR [ebx],al
c000b883:	b8 03 00 00 00       	mov    eax,0x3
c000b888:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b88f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b895:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b899:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b89e:	89 fa                	mov    edx,edi
c000b8a0:	0f be ea             	movsx  ebp,dl
c000b8a3:	85 ed                	test   ebp,ebp
c000b8a5:	0f 84 a1 00 00 00    	je     c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b8ab:	8d 56 01             	lea    edx,[esi+0x1]
c000b8ae:	83 fd 2f             	cmp    ebp,0x2f
c000b8b1:	74 05                	je     c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b8b3:	83 fd 5c             	cmp    ebp,0x5c
c000b8b6:	75 12                	jne    c000b8ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8b8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b8bd:	89 c5                	mov    ebp,eax
c000b8bf:	74 09                	je     c000b8ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8c1:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b8c5:	40                   	inc    eax
c000b8c6:	89 d6                	mov    esi,edx
c000b8c8:	eb cf                	jmp    c000b899 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b8ca:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b8cf:	89 f9                	mov    ecx,edi
c000b8d1:	0f be e9             	movsx  ebp,cl
c000b8d4:	75 61                	jne    c000b937 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b8d6:	83 fd 2e             	cmp    ebp,0x2e
c000b8d9:	75 5c                	jne    c000b937 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b8db:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b8e0:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b8e5:	74 19                	je     c000b900 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b8e7:	83 fd 2e             	cmp    ebp,0x2e
c000b8ea:	74 55                	je     c000b941 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b8ec:	89 f2                	mov    edx,esi
c000b8ee:	42                   	inc    edx
c000b8ef:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b8f4:	83 f9 2f             	cmp    ecx,0x2f
c000b8f7:	74 f5                	je     c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b8f9:	83 f9 5c             	cmp    ecx,0x5c
c000b8fc:	74 f0                	je     c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b8fe:	eb c6                	jmp    c000b8c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b900:	83 fd 2e             	cmp    ebp,0x2e
c000b903:	74 3c                	je     c000b941 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b905:	83 f8 03             	cmp    eax,0x3
c000b908:	74 bc                	je     c000b8c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b90a:	42                   	inc    edx
c000b90b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b910:	83 f9 2f             	cmp    ecx,0x2f
c000b913:	74 f5                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b915:	83 f9 5c             	cmp    ecx,0x5c
c000b918:	74 f0                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b91a:	48                   	dec    eax
c000b91b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b91f:	75 06                	jne    c000b927 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b921:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b925:	eb f3                	jmp    c000b91a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b927:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b92b:	74 07                	je     c000b934 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b92d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b931:	48                   	dec    eax
c000b932:	eb f3                	jmp    c000b927 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b934:	40                   	inc    eax
c000b935:	eb 8f                	jmp    c000b8c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b937:	83 fd 2f             	cmp    ebp,0x2f
c000b93a:	74 8a                	je     c000b8c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b93c:	83 fd 5c             	cmp    ebp,0x5c
c000b93f:	74 85                	je     c000b8c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b941:	89 f9                	mov    ecx,edi
c000b943:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b946:	40                   	inc    eax
c000b947:	e9 7a ff ff ff       	jmp    c000b8c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b94c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b950:	83 ec 0c             	sub    esp,0xc
c000b953:	53                   	push   ebx
c000b954:	e8 27 4c ff ff       	call   c0000580 <strlen>
c000b959:	83 c4 10             	add    esp,0x10
c000b95c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b961:	74 1c                	je     c000b97f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b963:	83 ec 0c             	sub    esp,0xc
c000b966:	53                   	push   ebx
c000b967:	e8 14 4c ff ff       	call   c0000580 <strlen>
c000b96c:	83 c4 10             	add    esp,0x10
c000b96f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b974:	74 09                	je     c000b97f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b976:	31 ff                	xor    edi,edi
c000b978:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b97d:	eb 5c                	jmp    c000b9db <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b97f:	83 ec 0c             	sub    esp,0xc
c000b982:	53                   	push   ebx
c000b983:	e8 f8 4b ff ff       	call   c0000580 <strlen>
c000b988:	83 c4 10             	add    esp,0x10
c000b98b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b990:	74 e4                	je     c000b976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b992:	83 ec 0c             	sub    esp,0xc
c000b995:	53                   	push   ebx
c000b996:	e8 e5 4b ff ff       	call   c0000580 <strlen>
c000b99b:	83 c4 10             	add    esp,0x10
c000b99e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b9a3:	eb ab                	jmp    c000b950 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b9a5:	52                   	push   edx
c000b9a6:	52                   	push   edx
c000b9a7:	53                   	push   ebx
c000b9a8:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b9ac:	55                   	push   ebp
c000b9ad:	e8 9e 4c ff ff       	call   c0000650 <strcpy>
c000b9b2:	59                   	pop    ecx
c000b9b3:	58                   	pop    eax
c000b9b4:	53                   	push   ebx
c000b9b5:	55                   	push   ebp
c000b9b6:	e8 32 f7 ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	48                   	dec    eax
c000b9bf:	75 37                	jne    c000b9f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000b9c1:	50                   	push   eax
c000b9c2:	53                   	push   ebx
c000b9c3:	55                   	push   ebp
c000b9c4:	68 8d 18 02 c0       	push   0xc002188d
c000b9c9:	e8 3c ef ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b9ce:	8d 47 01             	lea    eax,[edi+0x1]
c000b9d1:	83 c4 10             	add    esp,0x10
c000b9d4:	83 ff 14             	cmp    edi,0x14
c000b9d7:	74 08                	je     c000b9e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000b9d9:	89 c7                	mov    edi,eax
c000b9db:	85 f6                	test   esi,esi
c000b9dd:	75 c6                	jne    c000b9a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b9df:	eb 17                	jmp    c000b9f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000b9e1:	83 ec 0c             	sub    esp,0xc
c000b9e4:	bf 15 00 00 00       	mov    edi,0x15
c000b9e9:	68 a8 18 02 c0       	push   0xc00218a8
c000b9ee:	e8 34 5b 00 00       	call   c0011527 <KePanic(char const*)>
c000b9f3:	83 c4 10             	add    esp,0x10
c000b9f6:	eb e3                	jmp    c000b9db <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b9f8:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b9fe:	5b                   	pop    ebx
c000b9ff:	5e                   	pop    esi
c000ba00:	5f                   	pop    edi
c000ba01:	5d                   	pop    ebp
c000ba02:	c3                   	ret    
c000ba03:	90                   	nop

c000ba04 <File::File(char const*, Process*, bool)>:
c000ba04:	83 ec 1c             	sub    esp,0x1c
c000ba07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba0b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba13:	83 ec 08             	sub    esp,0x8
c000ba16:	6a 00                	push   0x0
c000ba18:	50                   	push   eax
c000ba19:	e8 88 d7 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	ba 44 19 02 c0       	mov    edx,0xc0021944
c000ba26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba2a:	89 10                	mov    DWORD PTR [eax],edx
c000ba2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba31:	85 c0                	test   eax,eax
c000ba33:	74 0f                	je     c000ba44 <File::File(char const*, Process*, bool)+0x40>
c000ba35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba3a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba3e:	74 04                	je     c000ba44 <File::File(char const*, Process*, bool)+0x40>
c000ba40:	b0 01                	mov    al,0x1
c000ba42:	eb 02                	jmp    c000ba46 <File::File(char const*, Process*, bool)+0x42>
c000ba44:	b0 00                	mov    al,0x0
c000ba46:	0f b6 c0             	movzx  eax,al
c000ba49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba4d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba57:	83 c2 0d             	add    edx,0xd
c000ba5a:	50                   	push   eax
c000ba5b:	51                   	push   ecx
c000ba5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba60:	52                   	push   edx
c000ba61:	e8 70 fd ff ff       	call   c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000ba66:	83 c4 10             	add    esp,0x10
c000ba69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba6d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ba70:	83 e8 41             	sub    eax,0x41
c000ba73:	88 c2                	mov    dl,al
c000ba75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba79:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ba7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba83:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ba87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba8b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ba91:	0f b6 c0             	movzx  eax,al
c000ba94:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000ba9b:	85 c0                	test   eax,eax
c000ba9d:	74 3e                	je     c000badd <File::File(char const*, Process*, bool)+0xd9>
c000ba9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baa9:	0f b6 c0             	movzx  eax,al
c000baac:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bab3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bab9:	85 c0                	test   eax,eax
c000babb:	75 20                	jne    c000badd <File::File(char const*, Process*, bool)+0xd9>
c000babd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bac7:	0f b6 c0             	movzx  eax,al
c000baca:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bad1:	83 ec 0c             	sub    esp,0xc
c000bad4:	50                   	push   eax
c000bad5:	e8 ae 21 00 00       	call   c000dc88 <LogicalDisk::mount()>
c000bada:	83 c4 10             	add    esp,0x10
c000badd:	90                   	nop
c000bade:	83 c4 1c             	add    esp,0x1c
c000bae1:	c3                   	ret    

c000bae2 <File::File(char const*, Process*)>:
c000bae2:	83 ec 0c             	sub    esp,0xc
c000bae5:	6a 01                	push   0x1
c000bae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf3:	e8 0c ff ff ff       	call   c000ba04 <File::File(char const*, Process*, bool)>
c000baf8:	83 c4 10             	add    esp,0x10
c000bafb:	90                   	nop
c000bafc:	83 c4 0c             	add    esp,0xc
c000baff:	c3                   	ret    

c000bb00 <File::open(FileOpenMode)>:
c000bb00:	53                   	push   ebx
c000bb01:	b8 0b 00 00 00       	mov    eax,0xb
c000bb06:	83 ec 08             	sub    esp,0x8
c000bb09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb0d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb14:	83 fa 19             	cmp    edx,0x19
c000bb17:	77 40                	ja     c000bb59 <File::open(FileOpenMode)+0x59>
c000bb19:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb20:	85 d2                	test   edx,edx
c000bb22:	74 35                	je     c000bb59 <File::open(FileOpenMode)+0x59>
c000bb24:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb2a:	85 d2                	test   edx,edx
c000bb2c:	74 2b                	je     c000bb59 <File::open(FileOpenMode)+0x59>
c000bb2e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb32:	b8 06 00 00 00       	mov    eax,0x6
c000bb37:	75 20                	jne    c000bb59 <File::open(FileOpenMode)+0x59>
c000bb39:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb3b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb45:	51                   	push   ecx
c000bb46:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb49:	51                   	push   ecx
c000bb4a:	52                   	push   edx
c000bb4b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb4e:	83 c4 10             	add    esp,0x10
c000bb51:	85 c0                	test   eax,eax
c000bb53:	75 04                	jne    c000bb59 <File::open(FileOpenMode)+0x59>
c000bb55:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb59:	83 c4 08             	add    esp,0x8
c000bb5c:	5b                   	pop    ebx
c000bb5d:	c3                   	ret    

c000bb5e <File::close()>:
c000bb5e:	53                   	push   ebx
c000bb5f:	b8 0b 00 00 00       	mov    eax,0xb
c000bb64:	83 ec 08             	sub    esp,0x8
c000bb67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb6b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb72:	83 f9 19             	cmp    ecx,0x19
c000bb75:	77 41                	ja     c000bbb8 <File::close()+0x5a>
c000bb77:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bb7e:	85 db                	test   ebx,ebx
c000bb80:	74 36                	je     c000bbb8 <File::close()+0x5a>
c000bb82:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bb89:	74 2d                	je     c000bbb8 <File::close()+0x5a>
c000bb8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb8f:	b8 05 00 00 00       	mov    eax,0x5
c000bb94:	74 22                	je     c000bbb8 <File::close()+0x5a>
c000bb96:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bb9a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bba1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bba7:	53                   	push   ebx
c000bba8:	53                   	push   ebx
c000bba9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbab:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbb1:	50                   	push   eax
c000bbb2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bbb5:	83 c4 10             	add    esp,0x10
c000bbb8:	83 c4 08             	add    esp,0x8
c000bbbb:	5b                   	pop    ebx
c000bbbc:	c3                   	ret    
c000bbbd:	90                   	nop

c000bbbe <File::seek(unsigned long long)>:
c000bbbe:	56                   	push   esi
c000bbbf:	b8 0b 00 00 00       	mov    eax,0xb
c000bbc4:	53                   	push   ebx
c000bbc5:	51                   	push   ecx
c000bbc6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bbce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbd2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bbd9:	83 fa 19             	cmp    edx,0x19
c000bbdc:	77 31                	ja     c000bc0f <File::seek(unsigned long long)+0x51>
c000bbde:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbe5:	85 d2                	test   edx,edx
c000bbe7:	74 26                	je     c000bc0f <File::seek(unsigned long long)+0x51>
c000bbe9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbef:	85 d2                	test   edx,edx
c000bbf1:	74 1c                	je     c000bc0f <File::seek(unsigned long long)+0x51>
c000bbf3:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bbf7:	b8 05 00 00 00       	mov    eax,0x5
c000bbfc:	74 11                	je     c000bc0f <File::seek(unsigned long long)+0x51>
c000bbfe:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc00:	53                   	push   ebx
c000bc01:	51                   	push   ecx
c000bc02:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc08:	52                   	push   edx
c000bc09:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	5a                   	pop    edx
c000bc10:	5b                   	pop    ebx
c000bc11:	5e                   	pop    esi
c000bc12:	c3                   	ret    
c000bc13:	90                   	nop

c000bc14 <File::truncate(unsigned long long)>:
c000bc14:	56                   	push   esi
c000bc15:	b8 0b 00 00 00       	mov    eax,0xb
c000bc1a:	53                   	push   ebx
c000bc1b:	51                   	push   ecx
c000bc1c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc24:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc28:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc2f:	83 fa 19             	cmp    edx,0x19
c000bc32:	77 31                	ja     c000bc65 <File::truncate(unsigned long long)+0x51>
c000bc34:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc3b:	85 d2                	test   edx,edx
c000bc3d:	74 26                	je     c000bc65 <File::truncate(unsigned long long)+0x51>
c000bc3f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc45:	85 d2                	test   edx,edx
c000bc47:	74 1c                	je     c000bc65 <File::truncate(unsigned long long)+0x51>
c000bc49:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc4d:	b8 05 00 00 00       	mov    eax,0x5
c000bc52:	74 11                	je     c000bc65 <File::truncate(unsigned long long)+0x51>
c000bc54:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc56:	53                   	push   ebx
c000bc57:	51                   	push   ecx
c000bc58:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc5e:	52                   	push   edx
c000bc5f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bc62:	83 c4 10             	add    esp,0x10
c000bc65:	5a                   	pop    edx
c000bc66:	5b                   	pop    ebx
c000bc67:	5e                   	pop    esi
c000bc68:	c3                   	ret    
c000bc69:	90                   	nop

c000bc6a <File::tell(unsigned long long*)>:
c000bc6a:	83 ec 0c             	sub    esp,0xc
c000bc6d:	b8 0b 00 00 00       	mov    eax,0xb
c000bc72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc76:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bc7d:	83 fa 19             	cmp    edx,0x19
c000bc80:	77 34                	ja     c000bcb6 <File::tell(unsigned long long*)+0x4c>
c000bc82:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc89:	85 d2                	test   edx,edx
c000bc8b:	74 29                	je     c000bcb6 <File::tell(unsigned long long*)+0x4c>
c000bc8d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc93:	85 d2                	test   edx,edx
c000bc95:	74 1f                	je     c000bcb6 <File::tell(unsigned long long*)+0x4c>
c000bc97:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bc9b:	b8 05 00 00 00       	mov    eax,0x5
c000bca0:	74 14                	je     c000bcb6 <File::tell(unsigned long long*)+0x4c>
c000bca2:	50                   	push   eax
c000bca3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bca9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bcaf:	52                   	push   edx
c000bcb0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bcb3:	83 c4 10             	add    esp,0x10
c000bcb6:	83 c4 0c             	add    esp,0xc
c000bcb9:	c3                   	ret    

c000bcba <File::rewind()>:
c000bcba:	83 ec 10             	sub    esp,0x10
c000bcbd:	6a 00                	push   0x0
c000bcbf:	6a 00                	push   0x0
c000bcc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc5:	e8 f4 fe ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c000bcca:	83 c4 1c             	add    esp,0x1c
c000bccd:	c3                   	ret    

c000bcce <File::unlink()>:
c000bcce:	83 ec 0c             	sub    esp,0xc
c000bcd1:	b8 0b 00 00 00       	mov    eax,0xb
c000bcd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bce1:	83 f9 19             	cmp    ecx,0x19
c000bce4:	77 2f                	ja     c000bd15 <File::unlink()+0x47>
c000bce6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bced:	85 c9                	test   ecx,ecx
c000bcef:	74 24                	je     c000bd15 <File::unlink()+0x47>
c000bcf1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bcf7:	85 c9                	test   ecx,ecx
c000bcf9:	74 1a                	je     c000bd15 <File::unlink()+0x47>
c000bcfb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bcff:	b8 06 00 00 00       	mov    eax,0x6
c000bd04:	75 0f                	jne    c000bd15 <File::unlink()+0x47>
c000bd06:	50                   	push   eax
c000bd07:	83 c2 0d             	add    edx,0xd
c000bd0a:	50                   	push   eax
c000bd0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd0d:	52                   	push   edx
c000bd0e:	51                   	push   ecx
c000bd0f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd12:	83 c4 10             	add    esp,0x10
c000bd15:	83 c4 0c             	add    esp,0xc
c000bd18:	c3                   	ret    
c000bd19:	90                   	nop

c000bd1a <File::rename(char const*)>:
c000bd1a:	83 ec 0c             	sub    esp,0xc
c000bd1d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd2d:	83 f9 19             	cmp    ecx,0x19
c000bd30:	77 32                	ja     c000bd64 <File::rename(char const*)+0x4a>
c000bd32:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd39:	85 c9                	test   ecx,ecx
c000bd3b:	74 27                	je     c000bd64 <File::rename(char const*)+0x4a>
c000bd3d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd43:	85 c9                	test   ecx,ecx
c000bd45:	74 1d                	je     c000bd64 <File::rename(char const*)+0x4a>
c000bd47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd4b:	b8 06 00 00 00       	mov    eax,0x6
c000bd50:	75 12                	jne    c000bd64 <File::rename(char const*)+0x4a>
c000bd52:	50                   	push   eax
c000bd53:	83 c2 0d             	add    edx,0xd
c000bd56:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd5c:	52                   	push   edx
c000bd5d:	51                   	push   ecx
c000bd5e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bd61:	83 c4 10             	add    esp,0x10
c000bd64:	83 c4 0c             	add    esp,0xc
c000bd67:	c3                   	ret    

c000bd68 <File::chfatattr(unsigned char, unsigned char)>:
c000bd68:	57                   	push   edi
c000bd69:	b8 0b 00 00 00       	mov    eax,0xb
c000bd6e:	56                   	push   esi
c000bd6f:	53                   	push   ebx
c000bd70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bd78:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd83:	83 f9 19             	cmp    ecx,0x19
c000bd86:	77 37                	ja     c000bdbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd88:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd8f:	85 c9                	test   ecx,ecx
c000bd91:	74 2c                	je     c000bdbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd93:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd99:	85 c9                	test   ecx,ecx
c000bd9b:	74 22                	je     c000bdbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd9d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bda1:	b8 06 00 00 00       	mov    eax,0x6
c000bda6:	75 17                	jne    c000bdbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bda8:	89 f0                	mov    eax,esi
c000bdaa:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bdac:	0f b6 db             	movzx  ebx,bl
c000bdaf:	0f b6 f0             	movzx  esi,al
c000bdb2:	83 c2 0d             	add    edx,0xd
c000bdb5:	56                   	push   esi
c000bdb6:	53                   	push   ebx
c000bdb7:	52                   	push   edx
c000bdb8:	51                   	push   ecx
c000bdb9:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bdbc:	83 c4 10             	add    esp,0x10
c000bdbf:	5b                   	pop    ebx
c000bdc0:	5e                   	pop    esi
c000bdc1:	5f                   	pop    edi
c000bdc2:	c3                   	ret    
c000bdc3:	90                   	nop

c000bdc4 <File::exists()>:
c000bdc4:	83 ec 0c             	sub    esp,0xc
c000bdc7:	31 c0                	xor    eax,eax
c000bdc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdcd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdd4:	83 f9 19             	cmp    ecx,0x19
c000bdd7:	77 24                	ja     c000bdfd <File::exists()+0x39>
c000bdd9:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bde0:	85 c9                	test   ecx,ecx
c000bde2:	74 19                	je     c000bdfd <File::exists()+0x39>
c000bde4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdea:	85 c9                	test   ecx,ecx
c000bdec:	74 0f                	je     c000bdfd <File::exists()+0x39>
c000bdee:	50                   	push   eax
c000bdef:	83 c2 0d             	add    edx,0xd
c000bdf2:	50                   	push   eax
c000bdf3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdf5:	52                   	push   edx
c000bdf6:	51                   	push   ecx
c000bdf7:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bdfa:	83 c4 10             	add    esp,0x10
c000bdfd:	83 c4 0c             	add    esp,0xc
c000be00:	c3                   	ret    
c000be01:	90                   	nop

c000be02 <File::stat(unsigned long long*, bool*)>:
c000be02:	56                   	push   esi
c000be03:	53                   	push   ebx
c000be04:	50                   	push   eax
c000be05:	b8 0b 00 00 00       	mov    eax,0xb
c000be0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be0e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be12:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be16:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be1d:	83 f9 19             	cmp    ecx,0x19
c000be20:	77 3d                	ja     c000be5f <File::stat(unsigned long long*, bool*)+0x5d>
c000be22:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be29:	85 c9                	test   ecx,ecx
c000be2b:	74 32                	je     c000be5f <File::stat(unsigned long long*, bool*)+0x5d>
c000be2d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be33:	85 c9                	test   ecx,ecx
c000be35:	74 28                	je     c000be5f <File::stat(unsigned long long*, bool*)+0x5d>
c000be37:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be3d:	74 13                	je     c000be52 <File::stat(unsigned long long*, bool*)+0x50>
c000be3f:	83 ec 04             	sub    esp,0x4
c000be42:	56                   	push   esi
c000be43:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be49:	51                   	push   ecx
c000be4a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be4d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be50:	eb 0a                	jmp    c000be5c <File::stat(unsigned long long*, bool*)+0x5a>
c000be52:	53                   	push   ebx
c000be53:	83 c2 0d             	add    edx,0xd
c000be56:	56                   	push   esi
c000be57:	52                   	push   edx
c000be58:	51                   	push   ecx
c000be59:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000be5c:	83 c4 10             	add    esp,0x10
c000be5f:	5a                   	pop    edx
c000be60:	5b                   	pop    ebx
c000be61:	5e                   	pop    esi
c000be62:	c3                   	ret    

c000be63 <Fs::setcwd(Process*, char*)>:
c000be63:	55                   	push   ebp
c000be64:	57                   	push   edi
c000be65:	56                   	push   esi
c000be66:	53                   	push   ebx
c000be67:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000be6d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000be74:	6a 00                	push   0x0
c000be76:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000be7c:	57                   	push   edi
c000be7d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000be84:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000be88:	56                   	push   esi
c000be89:	e8 48 f9 ff ff       	call   c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be8e:	89 34 24             	mov    DWORD PTR [esp],esi
c000be91:	e8 ea 46 ff ff       	call   c0000580 <strlen>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	83 f8 02             	cmp    eax,0x2
c000be9c:	77 15                	ja     c000beb3 <Fs::setcwd(Process*, char*)+0x50>
c000be9e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bea3:	83 eb 41             	sub    ebx,0x41
c000bea6:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bead:	85 c0                	test   eax,eax
c000beaf:	75 1c                	jne    c000becd <Fs::setcwd(Process*, char*)+0x6a>
c000beb1:	eb 2f                	jmp    c000bee2 <Fs::setcwd(Process*, char*)+0x7f>
c000beb3:	83 ec 0c             	sub    esp,0xc
c000beb6:	56                   	push   esi
c000beb7:	e8 c4 46 ff ff       	call   c0000580 <strlen>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	83 f8 03             	cmp    eax,0x3
c000bec2:	75 57                	jne    c000bf1b <Fs::setcwd(Process*, char*)+0xb8>
c000bec4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bec9:	75 50                	jne    c000bf1b <Fs::setcwd(Process*, char*)+0xb8>
c000becb:	eb d1                	jmp    c000be9e <Fs::setcwd(Process*, char*)+0x3b>
c000becd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bed4:	75 0c                	jne    c000bee2 <Fs::setcwd(Process*, char*)+0x7f>
c000bed6:	83 ec 0c             	sub    esp,0xc
c000bed9:	50                   	push   eax
c000beda:	e8 a9 1d 00 00       	call   c000dc88 <LogicalDisk::mount()>
c000bedf:	83 c4 10             	add    esp,0x10
c000bee2:	83 fb 19             	cmp    ebx,0x19
c000bee5:	b8 03 00 00 00       	mov    eax,0x3
c000beea:	0f 87 c6 00 00 00    	ja     c000bfb6 <Fs::setcwd(Process*, char*)+0x153>
c000bef0:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bef7:	b8 05 00 00 00       	mov    eax,0x5
c000befc:	85 d2                	test   edx,edx
c000befe:	0f 84 b2 00 00 00    	je     c000bfb6 <Fs::setcwd(Process*, char*)+0x153>
c000bf04:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf0b:	b8 06 00 00 00       	mov    eax,0x6
c000bf10:	0f 85 92 00 00 00    	jne    c000bfa8 <Fs::setcwd(Process*, char*)+0x145>
c000bf16:	e9 9b 00 00 00       	jmp    c000bfb6 <Fs::setcwd(Process*, char*)+0x153>
c000bf1b:	83 ec 0c             	sub    esp,0xc
c000bf1e:	68 14 01 00 00       	push   0x114
c000bf23:	e8 ab bb ff ff       	call   c0007ad3 <malloc>
c000bf28:	83 c4 0c             	add    esp,0xc
c000bf2b:	55                   	push   ebp
c000bf2c:	56                   	push   esi
c000bf2d:	50                   	push   eax
c000bf2e:	89 c3                	mov    ebx,eax
c000bf30:	e8 ad fb ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c000bf35:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf3a:	83 c4 0c             	add    esp,0xc
c000bf3d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf41:	50                   	push   eax
c000bf42:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf46:	50                   	push   eax
c000bf47:	53                   	push   ebx
c000bf48:	e8 b5 fe ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c000bf4d:	83 c4 10             	add    esp,0x10
c000bf50:	83 f8 02             	cmp    eax,0x2
c000bf53:	74 27                	je     c000bf7c <Fs::setcwd(Process*, char*)+0x119>
c000bf55:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf5a:	75 1c                	jne    c000bf78 <Fs::setcwd(Process*, char*)+0x115>
c000bf5c:	85 db                	test   ebx,ebx
c000bf5e:	b8 02 00 00 00       	mov    eax,0x2
c000bf63:	74 51                	je     c000bfb6 <Fs::setcwd(Process*, char*)+0x153>
c000bf65:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf67:	83 ec 0c             	sub    esp,0xc
c000bf6a:	53                   	push   ebx
c000bf6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf6e:	83 c4 10             	add    esp,0x10
c000bf71:	b8 02 00 00 00       	mov    eax,0x2
c000bf76:	eb 3e                	jmp    c000bfb6 <Fs::setcwd(Process*, char*)+0x153>
c000bf78:	85 c0                	test   eax,eax
c000bf7a:	74 1c                	je     c000bf98 <Fs::setcwd(Process*, char*)+0x135>
c000bf7c:	85 db                	test   ebx,ebx
c000bf7e:	b8 01 00 00 00       	mov    eax,0x1
c000bf83:	74 31                	je     c000bfb6 <Fs::setcwd(Process*, char*)+0x153>
c000bf85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf87:	83 ec 0c             	sub    esp,0xc
c000bf8a:	53                   	push   ebx
c000bf8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf8e:	83 c4 10             	add    esp,0x10
c000bf91:	b8 01 00 00 00       	mov    eax,0x1
c000bf96:	eb 1e                	jmp    c000bfb6 <Fs::setcwd(Process*, char*)+0x153>
c000bf98:	85 db                	test   ebx,ebx
c000bf9a:	74 0c                	je     c000bfa8 <Fs::setcwd(Process*, char*)+0x145>
c000bf9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	53                   	push   ebx
c000bfa2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	50                   	push   eax
c000bfa9:	50                   	push   eax
c000bfaa:	56                   	push   esi
c000bfab:	57                   	push   edi
c000bfac:	e8 9f 46 ff ff       	call   c0000650 <strcpy>
c000bfb1:	83 c4 10             	add    esp,0x10
c000bfb4:	31 c0                	xor    eax,eax
c000bfb6:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bfbc:	5b                   	pop    ebx
c000bfbd:	5e                   	pop    esi
c000bfbe:	5f                   	pop    edi
c000bfbf:	5d                   	pop    ebp
c000bfc0:	c3                   	ret    
c000bfc1:	90                   	nop

c000bfc2 <Directory::Directory(char const*, Process*)>:
c000bfc2:	83 ec 0c             	sub    esp,0xc
c000bfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfc9:	83 ec 08             	sub    esp,0x8
c000bfcc:	6a 00                	push   0x0
c000bfce:	50                   	push   eax
c000bfcf:	e8 d2 d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bfd4:	83 c4 10             	add    esp,0x10
c000bfd7:	ba 60 19 02 c0       	mov    edx,0xc0021960
c000bfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe0:	89 10                	mov    DWORD PTR [eax],edx
c000bfe2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bfe7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bfeb:	0f 95 c0             	setne  al
c000bfee:	0f b6 c0             	movzx  eax,al
c000bff1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bff5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfff:	83 c2 0d             	add    edx,0xd
c000c002:	50                   	push   eax
c000c003:	51                   	push   ecx
c000c004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c008:	52                   	push   edx
c000c009:	e8 c8 f7 ff ff       	call   c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c00e:	83 c4 10             	add    esp,0x10
c000c011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c015:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c018:	83 e8 41             	sub    eax,0x41
c000c01b:	88 c2                	mov    dl,al
c000c01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c021:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c033:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c039:	0f b6 c0             	movzx  eax,al
c000c03c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c043:	85 c0                	test   eax,eax
c000c045:	74 3e                	je     c000c085 <Directory::Directory(char const*, Process*)+0xc3>
c000c047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c051:	0f b6 c0             	movzx  eax,al
c000c054:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c05b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c061:	85 c0                	test   eax,eax
c000c063:	75 20                	jne    c000c085 <Directory::Directory(char const*, Process*)+0xc3>
c000c065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c069:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c06f:	0f b6 c0             	movzx  eax,al
c000c072:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c079:	83 ec 0c             	sub    esp,0xc
c000c07c:	50                   	push   eax
c000c07d:	e8 06 1c 00 00       	call   c000dc88 <LogicalDisk::mount()>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	90                   	nop
c000c086:	83 c4 0c             	add    esp,0xc
c000c089:	c3                   	ret    

c000c08a <Directory::open()>:
c000c08a:	53                   	push   ebx
c000c08b:	b8 0b 00 00 00       	mov    eax,0xb
c000c090:	83 ec 08             	sub    esp,0x8
c000c093:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c097:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c09e:	83 fa 19             	cmp    edx,0x19
c000c0a1:	77 3d                	ja     c000c0e0 <Directory::open()+0x56>
c000c0a3:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c0aa:	85 d2                	test   edx,edx
c000c0ac:	74 32                	je     c000c0e0 <Directory::open()+0x56>
c000c0ae:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c0b4:	85 d2                	test   edx,edx
c000c0b6:	74 28                	je     c000c0e0 <Directory::open()+0x56>
c000c0b8:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c0bc:	b8 06 00 00 00       	mov    eax,0x6
c000c0c1:	75 1d                	jne    c000c0e0 <Directory::open()+0x56>
c000c0c3:	50                   	push   eax
c000c0c4:	8b 02                	mov    eax,DWORD PTR [edx]
c000c0c6:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c0cc:	51                   	push   ecx
c000c0cd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c0d0:	51                   	push   ecx
c000c0d1:	52                   	push   edx
c000c0d2:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c0d5:	83 c4 10             	add    esp,0x10
c000c0d8:	85 c0                	test   eax,eax
c000c0da:	75 04                	jne    c000c0e0 <Directory::open()+0x56>
c000c0dc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c0e0:	83 c4 08             	add    esp,0x8
c000c0e3:	5b                   	pop    ebx
c000c0e4:	c3                   	ret    
c000c0e5:	90                   	nop

c000c0e6 <Directory::close()>:
c000c0e6:	53                   	push   ebx
c000c0e7:	b8 0b 00 00 00       	mov    eax,0xb
c000c0ec:	83 ec 08             	sub    esp,0x8
c000c0ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0f3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0fa:	83 f9 19             	cmp    ecx,0x19
c000c0fd:	77 41                	ja     c000c140 <Directory::close()+0x5a>
c000c0ff:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c106:	85 db                	test   ebx,ebx
c000c108:	74 36                	je     c000c140 <Directory::close()+0x5a>
c000c10a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c111:	74 2d                	je     c000c140 <Directory::close()+0x5a>
c000c113:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c117:	b8 05 00 00 00       	mov    eax,0x5
c000c11c:	74 22                	je     c000c140 <Directory::close()+0x5a>
c000c11e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c122:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c129:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c12f:	53                   	push   ebx
c000c130:	53                   	push   ebx
c000c131:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c133:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c139:	50                   	push   eax
c000c13a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c13d:	83 c4 10             	add    esp,0x10
c000c140:	83 c4 08             	add    esp,0x8
c000c143:	5b                   	pop    ebx
c000c144:	c3                   	ret    
c000c145:	90                   	nop

c000c146 <Directory::unlink()>:
c000c146:	83 ec 0c             	sub    esp,0xc
c000c149:	b8 0b 00 00 00       	mov    eax,0xb
c000c14e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c152:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c159:	83 f9 19             	cmp    ecx,0x19
c000c15c:	77 2f                	ja     c000c18d <Directory::unlink()+0x47>
c000c15e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c165:	85 c9                	test   ecx,ecx
c000c167:	74 24                	je     c000c18d <Directory::unlink()+0x47>
c000c169:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c16f:	85 c9                	test   ecx,ecx
c000c171:	74 1a                	je     c000c18d <Directory::unlink()+0x47>
c000c173:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c177:	b8 06 00 00 00       	mov    eax,0x6
c000c17c:	75 0f                	jne    c000c18d <Directory::unlink()+0x47>
c000c17e:	50                   	push   eax
c000c17f:	83 c2 0d             	add    edx,0xd
c000c182:	50                   	push   eax
c000c183:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c185:	52                   	push   edx
c000c186:	51                   	push   ecx
c000c187:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 0c             	add    esp,0xc
c000c190:	c3                   	ret    
c000c191:	90                   	nop

c000c192 <Directory::rename(char const*)>:
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	b8 0b 00 00 00       	mov    eax,0xb
c000c19a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c19e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1a5:	83 f9 19             	cmp    ecx,0x19
c000c1a8:	77 32                	ja     c000c1dc <Directory::rename(char const*)+0x4a>
c000c1aa:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1b1:	85 c9                	test   ecx,ecx
c000c1b3:	74 27                	je     c000c1dc <Directory::rename(char const*)+0x4a>
c000c1b5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1bb:	85 c9                	test   ecx,ecx
c000c1bd:	74 1d                	je     c000c1dc <Directory::rename(char const*)+0x4a>
c000c1bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1c3:	b8 06 00 00 00       	mov    eax,0x6
c000c1c8:	75 12                	jne    c000c1dc <Directory::rename(char const*)+0x4a>
c000c1ca:	50                   	push   eax
c000c1cb:	83 c2 0d             	add    edx,0xd
c000c1ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1d4:	52                   	push   edx
c000c1d5:	51                   	push   ecx
c000c1d6:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c1d9:	83 c4 10             	add    esp,0x10
c000c1dc:	83 c4 0c             	add    esp,0xc
c000c1df:	c3                   	ret    

c000c1e0 <Directory::exists()>:
c000c1e0:	83 ec 0c             	sub    esp,0xc
c000c1e3:	31 c0                	xor    eax,eax
c000c1e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1e9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f0:	83 f9 19             	cmp    ecx,0x19
c000c1f3:	77 24                	ja     c000c219 <Directory::exists()+0x39>
c000c1f5:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1fc:	85 c9                	test   ecx,ecx
c000c1fe:	74 19                	je     c000c219 <Directory::exists()+0x39>
c000c200:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c206:	85 c9                	test   ecx,ecx
c000c208:	74 0f                	je     c000c219 <Directory::exists()+0x39>
c000c20a:	50                   	push   eax
c000c20b:	83 c2 0d             	add    edx,0xd
c000c20e:	50                   	push   eax
c000c20f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c211:	52                   	push   edx
c000c212:	51                   	push   ecx
c000c213:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	83 c4 0c             	add    esp,0xc
c000c21c:	c3                   	ret    
c000c21d:	90                   	nop

c000c21e <Directory::read(dirent*)>:
c000c21e:	83 ec 1c             	sub    esp,0x1c
c000c221:	b8 0b 00 00 00       	mov    eax,0xb
c000c226:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c22a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c231:	83 f9 19             	cmp    ecx,0x19
c000c234:	77 30                	ja     c000c266 <Directory::read(dirent*)+0x48>
c000c236:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c23d:	85 c9                	test   ecx,ecx
c000c23f:	74 25                	je     c000c266 <Directory::read(dirent*)+0x48>
c000c241:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c248:	74 1c                	je     c000c266 <Directory::read(dirent*)+0x48>
c000c24a:	83 ec 0c             	sub    esp,0xc
c000c24d:	8b 02                	mov    eax,DWORD PTR [edx]
c000c24f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c253:	51                   	push   ecx
c000c254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c258:	6a 00                	push   0x0
c000c25a:	68 10 01 00 00       	push   0x110
c000c25f:	52                   	push   edx
c000c260:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c263:	83 c4 20             	add    esp,0x20
c000c266:	83 c4 1c             	add    esp,0x1c
c000c269:	c3                   	ret    

c000c26a <Directory::create()>:
c000c26a:	83 ec 0c             	sub    esp,0xc
c000c26d:	b8 0b 00 00 00       	mov    eax,0xb
c000c272:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c276:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c27d:	83 f9 19             	cmp    ecx,0x19
c000c280:	77 2f                	ja     c000c2b1 <Directory::create()+0x47>
c000c282:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c289:	85 c9                	test   ecx,ecx
c000c28b:	74 24                	je     c000c2b1 <Directory::create()+0x47>
c000c28d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c293:	85 c9                	test   ecx,ecx
c000c295:	74 1a                	je     c000c2b1 <Directory::create()+0x47>
c000c297:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c29b:	b8 06 00 00 00       	mov    eax,0x6
c000c2a0:	75 0f                	jne    c000c2b1 <Directory::create()+0x47>
c000c2a2:	50                   	push   eax
c000c2a3:	83 c2 0d             	add    edx,0xd
c000c2a6:	50                   	push   eax
c000c2a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2a9:	52                   	push   edx
c000c2aa:	51                   	push   ecx
c000c2ab:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c2ae:	83 c4 10             	add    esp,0x10
c000c2b1:	83 c4 0c             	add    esp,0xc
c000c2b4:	c3                   	ret    
c000c2b5:	90                   	nop

c000c2b6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c2b6:	b8 0a 00 00 00       	mov    eax,0xa
c000c2bb:	c3                   	ret    

c000c2bc <Bus::Bus(char const*)>:
c000c2bc:	83 ec 0c             	sub    esp,0xc
c000c2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2c3:	83 ec 08             	sub    esp,0x8
c000c2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ca:	50                   	push   eax
c000c2cb:	e8 28 08 00 00       	call   c000caf8 <Device::Device(char const*)>
c000c2d0:	83 c4 10             	add    esp,0x10
c000c2d3:	ba 7c 19 02 c0       	mov    edx,0xc002197c
c000c2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2dc:	89 10                	mov    DWORD PTR [eax],edx
c000c2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c2ec:	90                   	nop
c000c2ed:	83 c4 0c             	add    esp,0xc
c000c2f0:	c3                   	ret    
c000c2f1:	90                   	nop
c000c2f2:	66 90                	xchg   ax,ax

c000c2f4 <Bus::~Bus()>:
c000c2f4:	83 ec 0c             	sub    esp,0xc
c000c2f7:	ba 7c 19 02 c0       	mov    edx,0xc002197c
c000c2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c300:	89 10                	mov    DWORD PTR [eax],edx
c000c302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c306:	83 ec 0c             	sub    esp,0xc
c000c309:	50                   	push   eax
c000c30a:	e8 53 05 00 00       	call   c000c862 <Device::~Device()>
c000c30f:	83 c4 10             	add    esp,0x10
c000c312:	90                   	nop
c000c313:	83 c4 0c             	add    esp,0xc
c000c316:	c3                   	ret    
c000c317:	90                   	nop

c000c318 <Bus::~Bus()>:
c000c318:	83 ec 0c             	sub    esp,0xc
c000c31b:	83 ec 0c             	sub    esp,0xc
c000c31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c322:	e8 cd ff ff ff       	call   c000c2f4 <Bus::~Bus()>
c000c327:	83 c4 10             	add    esp,0x10
c000c32a:	83 ec 08             	sub    esp,0x8
c000c32d:	68 58 01 00 00       	push   0x158
c000c332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c336:	e8 d1 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	83 c4 0c             	add    esp,0xc
c000c341:	c3                   	ret    

c000c342 <beepThread(void*)>:
c000c342:	83 ec 0c             	sub    esp,0xc
c000c345:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c34a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c34e:	48                   	dec    eax
c000c34f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c354:	75 01                	jne    c000c357 <beepThread(void*)+0x15>
c000c356:	fb                   	sti    
c000c357:	6b c2 0a             	imul   eax,edx,0xa
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	50                   	push   eax
c000c35e:	e8 c9 9f 00 00       	call   c001632c <milliTenthSleep(unsigned int)>
c000c363:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c36a:	e8 16 bf 00 00       	call   c0018285 <HalMakeBeep(int)>
c000c36f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c377:	83 c4 1c             	add    esp,0x1c
c000c37a:	e9 91 9e 00 00       	jmp    c0016210 <blockTask(TaskState)>

c000c37f <Krnl::beep(int, int, bool)>:
c000c37f:	56                   	push   esi
c000c380:	53                   	push   ebx
c000c381:	83 ec 10             	sub    esp,0x10
c000c384:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c390:	e8 f0 be 00 00       	call   c0018285 <HalMakeBeep(int)>
c000c395:	89 f0                	mov    eax,esi
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	84 c0                	test   al,al
c000c39c:	74 1e                	je     c000c3bc <Krnl::beep(int, int, bool)+0x3d>
c000c39e:	6b db 0a             	imul   ebx,ebx,0xa
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	53                   	push   ebx
c000c3a5:	e8 82 9f 00 00       	call   c001632c <milliTenthSleep(unsigned int)>
c000c3aa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3b2:	83 c4 14             	add    esp,0x14
c000c3b5:	5b                   	pop    ebx
c000c3b6:	5e                   	pop    esi
c000c3b7:	e9 c9 be 00 00       	jmp    c0018285 <HalMakeBeep(int)>
c000c3bc:	68 e6 00 00 00       	push   0xe6
c000c3c1:	53                   	push   ebx
c000c3c2:	68 42 c3 00 c0       	push   0xc000c342
c000c3c7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3cd:	e8 f2 99 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c000c3d2:	83 c4 14             	add    esp,0x14
c000c3d5:	5b                   	pop    ebx
c000c3d6:	5e                   	pop    esi
c000c3d7:	c3                   	ret    

c000c3d8 <User::loadClockSettings(int)>:
c000c3d8:	53                   	push   ebx
c000c3d9:	83 ec 14             	sub    esp,0x14
c000c3dc:	68 14 01 00 00       	push   0x114
c000c3e1:	e8 ed b6 ff ff       	call   c0007ad3 <malloc>
c000c3e6:	83 c4 0c             	add    esp,0xc
c000c3e9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3ef:	68 a0 19 02 c0       	push   0xc00219a0
c000c3f4:	50                   	push   eax
c000c3f5:	89 c3                	mov    ebx,eax
c000c3f7:	e8 e6 f6 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c000c3fc:	58                   	pop    eax
c000c3fd:	5a                   	pop    edx
c000c3fe:	6a 01                	push   0x1
c000c400:	53                   	push   ebx
c000c401:	e8 fa f6 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c000c406:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c409:	e8 50 f7 ff ff       	call   c000bb5e <File::close()>
c000c40e:	83 c4 10             	add    esp,0x10
c000c411:	85 db                	test   ebx,ebx
c000c413:	74 0f                	je     c000c424 <User::loadClockSettings(int)+0x4c>
c000c415:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c417:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c41b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c41e:	83 c4 08             	add    esp,0x8
c000c421:	5b                   	pop    ebx
c000c422:	ff e0                	jmp    eax
c000c424:	83 c4 08             	add    esp,0x8
c000c427:	5b                   	pop    ebx
c000c428:	c3                   	ret    
c000c429:	90                   	nop

c000c42a <Clock::Clock(char const*)>:
c000c42a:	83 ec 0c             	sub    esp,0xc
c000c42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c431:	83 ec 08             	sub    esp,0x8
c000c434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c438:	50                   	push   eax
c000c439:	e8 ba 06 00 00       	call   c000caf8 <Device::Device(char const*)>
c000c43e:	83 c4 10             	add    esp,0x10
c000c441:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000c446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44a:	89 10                	mov    DWORD PTR [eax],edx
c000c44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c450:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c45a:	90                   	nop
c000c45b:	83 c4 0c             	add    esp,0xc
c000c45e:	c3                   	ret    
c000c45f:	90                   	nop

c000c460 <Clock::~Clock()>:
c000c460:	83 ec 0c             	sub    esp,0xc
c000c463:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000c468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c46c:	89 10                	mov    DWORD PTR [eax],edx
c000c46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c472:	83 ec 0c             	sub    esp,0xc
c000c475:	50                   	push   eax
c000c476:	e8 e7 03 00 00       	call   c000c862 <Device::~Device()>
c000c47b:	83 c4 10             	add    esp,0x10
c000c47e:	90                   	nop
c000c47f:	83 c4 0c             	add    esp,0xc
c000c482:	c3                   	ret    
c000c483:	90                   	nop

c000c484 <Clock::~Clock()>:
c000c484:	83 ec 0c             	sub    esp,0xc
c000c487:	83 ec 0c             	sub    esp,0xc
c000c48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c48e:	e8 cd ff ff ff       	call   c000c460 <Clock::~Clock()>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	83 ec 08             	sub    esp,0x8
c000c499:	68 58 01 00 00       	push   0x158
c000c49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a2:	e8 65 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c4a7:	83 c4 10             	add    esp,0x10
c000c4aa:	83 c4 0c             	add    esp,0xc
c000c4ad:	c3                   	ret    

c000c4ae <Clock::timeInSecondsLocal()>:
c000c4ae:	53                   	push   ebx
c000c4af:	83 ec 14             	sub    esp,0x14
c000c4b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4b8:	50                   	push   eax
c000c4b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c4bc:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c4c3:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c4c9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4cf:	89 cb                	mov    ebx,ecx
c000c4d1:	c1 fb 1f             	sar    ebx,0x1f
c000c4d4:	01 c8                	add    eax,ecx
c000c4d6:	11 da                	adc    edx,ebx
c000c4d8:	83 c4 10             	add    esp,0x10
c000c4db:	31 c9                	xor    ecx,ecx
c000c4dd:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c4e4:	74 05                	je     c000c4eb <Clock::timeInSecondsLocal()+0x3d>
c000c4e6:	b9 08 07 00 00       	mov    ecx,0x708
c000c4eb:	31 db                	xor    ebx,ebx
c000c4ed:	01 c8                	add    eax,ecx
c000c4ef:	11 da                	adc    edx,ebx
c000c4f1:	83 c4 08             	add    esp,0x8
c000c4f4:	5b                   	pop    ebx
c000c4f5:	c3                   	ret    

c000c4f6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c4f6:	57                   	push   edi
c000c4f7:	56                   	push   esi
c000c4f8:	53                   	push   ebx
c000c4f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c4fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c501:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c505:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c507:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c50a:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c511:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c517:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c51d:	99                   	cdq    
c000c51e:	29 c6                	sub    esi,eax
c000c520:	19 d7                	sbb    edi,edx
c000c522:	89 f0                	mov    eax,esi
c000c524:	31 f6                	xor    esi,esi
c000c526:	89 fa                	mov    edx,edi
c000c528:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c52f:	74 05                	je     c000c536 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c531:	be 08 07 00 00       	mov    esi,0x708
c000c536:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c53a:	31 ff                	xor    edi,edi
c000c53c:	29 f0                	sub    eax,esi
c000c53e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c542:	19 fa                	sbb    edx,edi
c000c544:	89 d8                	mov    eax,ebx
c000c546:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c54a:	5b                   	pop    ebx
c000c54b:	5e                   	pop    esi
c000c54c:	5f                   	pop    edi
c000c54d:	ff e0                	jmp    eax

c000c54f <datetimeToSeconds(datetime_t)>:
c000c54f:	55                   	push   ebp
c000c550:	57                   	push   edi
c000c551:	56                   	push   esi
c000c552:	53                   	push   ebx
c000c553:	83 ec 0c             	sub    esp,0xc
c000c556:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c55a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c55e:	89 f7                	mov    edi,esi
c000c560:	89 f0                	mov    eax,esi
c000c562:	0f b6 cf             	movzx  ecx,bh
c000c565:	0f b6 c4             	movzx  eax,ah
c000c568:	c1 ef 10             	shr    edi,0x10
c000c56b:	89 da                	mov    edx,ebx
c000c56d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c570:	89 f9                	mov    ecx,edi
c000c572:	0f b6 f9             	movzx  edi,cl
c000c575:	89 f1                	mov    ecx,esi
c000c577:	6b c0 3c             	imul   eax,eax,0x3c
c000c57a:	0f b6 f1             	movzx  esi,cl
c000c57d:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c583:	0f b6 db             	movzx  ebx,bl
c000c586:	c1 ea 10             	shr    edx,0x10
c000c589:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c58f:	01 f8                	add    eax,edi
c000c591:	01 f0                	add    eax,esi
c000c593:	89 04 24             	mov    DWORD PTR [esp],eax
c000c596:	c1 f8 1f             	sar    eax,0x1f
c000c599:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c59d:	89 e8                	mov    eax,ebp
c000c59f:	0f b6 c0             	movzx  eax,al
c000c5a2:	8b 0c 85 00 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde600]
c000c5a9:	83 f8 01             	cmp    eax,0x1
c000c5ac:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c5b0:	0f b7 da             	movzx  ebx,dx
c000c5b3:	76 27                	jbe    c000c5dc <datetimeToSeconds(datetime_t)+0x8d>
c000c5b5:	80 e2 03             	and    dl,0x3
c000c5b8:	75 22                	jne    c000c5dc <datetimeToSeconds(datetime_t)+0x8d>
c000c5ba:	31 d2                	xor    edx,edx
c000c5bc:	be 64 00 00 00       	mov    esi,0x64
c000c5c1:	89 d8                	mov    eax,ebx
c000c5c3:	f7 f6                	div    esi
c000c5c5:	85 d2                	test   edx,edx
c000c5c7:	75 12                	jne    c000c5db <datetimeToSeconds(datetime_t)+0x8c>
c000c5c9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c5cf:	be 90 01 00 00       	mov    esi,0x190
c000c5d4:	99                   	cdq    
c000c5d5:	f7 fe                	idiv   esi
c000c5d7:	85 d2                	test   edx,edx
c000c5d9:	75 01                	jne    c000c5dc <datetimeToSeconds(datetime_t)+0x8d>
c000c5db:	41                   	inc    ecx
c000c5dc:	83 fb 46             	cmp    ebx,0x46
c000c5df:	76 48                	jbe    c000c629 <datetimeToSeconds(datetime_t)+0xda>
c000c5e1:	be 46 00 00 00       	mov    esi,0x46
c000c5e6:	bf 64 00 00 00       	mov    edi,0x64
c000c5eb:	bd 90 01 00 00       	mov    ebp,0x190
c000c5f0:	f7 c6 03 00 00 00    	test   esi,0x3
c000c5f6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c5fb:	75 23                	jne    c000c620 <datetimeToSeconds(datetime_t)+0xd1>
c000c5fd:	89 f0                	mov    eax,esi
c000c5ff:	99                   	cdq    
c000c600:	f7 ff                	idiv   edi
c000c602:	b8 6e 01 00 00       	mov    eax,0x16e
c000c607:	85 d2                	test   edx,edx
c000c609:	75 15                	jne    c000c620 <datetimeToSeconds(datetime_t)+0xd1>
c000c60b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c611:	99                   	cdq    
c000c612:	f7 fd                	idiv   ebp
c000c614:	83 fa 01             	cmp    edx,0x1
c000c617:	19 c0                	sbb    eax,eax
c000c619:	f7 d0                	not    eax
c000c61b:	05 6e 01 00 00       	add    eax,0x16e
c000c620:	46                   	inc    esi
c000c621:	01 c1                	add    ecx,eax
c000c623:	39 de                	cmp    esi,ebx
c000c625:	7c c9                	jl     c000c5f0 <datetimeToSeconds(datetime_t)+0xa1>
c000c627:	eb 34                	jmp    c000c65d <datetimeToSeconds(datetime_t)+0x10e>
c000c629:	74 32                	je     c000c65d <datetimeToSeconds(datetime_t)+0x10e>
c000c62b:	b8 45 00 00 00       	mov    eax,0x45
c000c630:	89 c2                	mov    edx,eax
c000c632:	83 e2 03             	and    edx,0x3
c000c635:	39 d8                	cmp    eax,ebx
c000c637:	7e 0f                	jle    c000c648 <datetimeToSeconds(datetime_t)+0xf9>
c000c639:	83 fa 01             	cmp    edx,0x1
c000c63c:	19 d2                	sbb    edx,edx
c000c63e:	48                   	dec    eax
c000c63f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c646:	eb e8                	jmp    c000c630 <datetimeToSeconds(datetime_t)+0xe1>
c000c648:	85 d2                	test   edx,edx
c000c64a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c64f:	75 0a                	jne    c000c65b <datetimeToSeconds(datetime_t)+0x10c>
c000c651:	83 fb 01             	cmp    ebx,0x1
c000c654:	19 c0                	sbb    eax,eax
c000c656:	05 6e 01 00 00       	add    eax,0x16e
c000c65b:	29 c1                	sub    ecx,eax
c000c65d:	b8 80 51 01 00       	mov    eax,0x15180
c000c662:	f7 e9                	imul   ecx
c000c664:	03 04 24             	add    eax,DWORD PTR [esp]
c000c667:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c66b:	83 c4 0c             	add    esp,0xc
c000c66e:	5b                   	pop    ebx
c000c66f:	5e                   	pop    esi
c000c670:	5f                   	pop    edi
c000c671:	5d                   	pop    ebp
c000c672:	c3                   	ret    
c000c673:	90                   	nop

c000c674 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c674:	57                   	push   edi
c000c675:	56                   	push   esi
c000c676:	53                   	push   ebx
c000c677:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c67b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c67d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c680:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c688:	e8 c2 fe ff ff       	call   c000c54f <datetimeToSeconds(datetime_t)>
c000c68d:	59                   	pop    ecx
c000c68e:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c695:	5b                   	pop    ebx
c000c696:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c69c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c6a2:	89 cb                	mov    ebx,ecx
c000c6a4:	c1 fb 1f             	sar    ebx,0x1f
c000c6a7:	29 c8                	sub    eax,ecx
c000c6a9:	19 da                	sbb    edx,ebx
c000c6ab:	31 c9                	xor    ecx,ecx
c000c6ad:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c6b4:	74 05                	je     c000c6bb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c6b6:	b9 08 07 00 00       	mov    ecx,0x708
c000c6bb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c6bf:	31 db                	xor    ebx,ebx
c000c6c1:	29 c8                	sub    eax,ecx
c000c6c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6c7:	19 da                	sbb    edx,ebx
c000c6c9:	89 f8                	mov    eax,edi
c000c6cb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6cf:	5b                   	pop    ebx
c000c6d0:	5e                   	pop    esi
c000c6d1:	5f                   	pop    edi
c000c6d2:	ff e0                	jmp    eax

c000c6d4 <secondsToDatetime(unsigned long long)>:
c000c6d4:	55                   	push   ebp
c000c6d5:	57                   	push   edi
c000c6d6:	56                   	push   esi
c000c6d7:	53                   	push   ebx
c000c6d8:	83 ec 1c             	sub    esp,0x1c
c000c6db:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c6df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c6e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c6e7:	6a 00                	push   0x0
c000c6e9:	68 80 51 01 00       	push   0x15180
c000c6ee:	55                   	push   ebp
c000c6ef:	57                   	push   edi
c000c6f0:	e8 db 2f 01 00       	call   c001f6d0 <__udivdi3>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6fc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c702:	6a 00                	push   0x0
c000c704:	68 80 51 01 00       	push   0x15180
c000c709:	55                   	push   ebp
c000c70a:	57                   	push   edi
c000c70b:	bf 10 0e 00 00       	mov    edi,0xe10
c000c710:	e8 bb 30 01 00       	call   c001f7d0 <__umoddi3>
c000c715:	83 c4 10             	add    esp,0x10
c000c718:	99                   	cdq    
c000c719:	f7 ff                	idiv   edi
c000c71b:	bf 3c 00 00 00       	mov    edi,0x3c
c000c720:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c723:	89 d0                	mov    eax,edx
c000c725:	99                   	cdq    
c000c726:	f7 ff                	idiv   edi
c000c728:	85 db                	test   ebx,ebx
c000c72a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c72d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c730:	79 11                	jns    c000c743 <secondsToDatetime(unsigned long long)+0x6f>
c000c732:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c736:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c73c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c741:	eb 07                	jmp    c000c74a <secondsToDatetime(unsigned long long)+0x76>
c000c743:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c748:	89 d8                	mov    eax,ebx
c000c74a:	99                   	cdq    
c000c74b:	bf b4 05 00 00       	mov    edi,0x5b4
c000c750:	f7 f9                	idiv   ecx
c000c752:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c757:	31 d2                	xor    edx,edx
c000c759:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c75e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c762:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c76a:	01 c3                	add    ebx,eax
c000c76c:	89 d8                	mov    eax,ebx
c000c76e:	f7 f1                	div    ecx
c000c770:	31 d2                	xor    edx,edx
c000c772:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c775:	89 d8                	mov    eax,ebx
c000c777:	f7 f7                	div    edi
c000c779:	31 d2                	xor    edx,edx
c000c77b:	29 c1                	sub    ecx,eax
c000c77d:	89 d8                	mov    eax,ebx
c000c77f:	f7 f5                	div    ebp
c000c781:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c786:	31 d2                	xor    edx,edx
c000c788:	29 c1                	sub    ecx,eax
c000c78a:	89 c8                	mov    eax,ecx
c000c78c:	f7 f5                	div    ebp
c000c78e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c793:	31 d2                	xor    edx,edx
c000c795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c799:	89 c8                	mov    eax,ecx
c000c79b:	f7 f5                	div    ebp
c000c79d:	31 d2                	xor    edx,edx
c000c79f:	01 c3                	add    ebx,eax
c000c7a1:	89 c8                	mov    eax,ecx
c000c7a3:	f7 f7                	div    edi
c000c7a5:	bf 99 00 00 00       	mov    edi,0x99
c000c7aa:	31 d2                	xor    edx,edx
c000c7ac:	29 c3                	sub    ebx,eax
c000c7ae:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c7b6:	29 c3                	sub    ebx,eax
c000c7b8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c7bb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c7be:	83 c1 02             	add    ecx,0x2
c000c7c1:	89 c8                	mov    eax,ecx
c000c7c3:	bb 05 00 00 00       	mov    ebx,0x5
c000c7c8:	f7 f7                	div    edi
c000c7ca:	31 d2                	xor    edx,edx
c000c7cc:	89 c7                	mov    edi,eax
c000c7ce:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c7d4:	83 c0 02             	add    eax,0x2
c000c7d7:	f7 f3                	div    ebx
c000c7d9:	89 eb                	mov    ebx,ebp
c000c7db:	29 c3                	sub    ebx,eax
c000c7dd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c7e3:	88 1e                	mov    BYTE PTR [esi],bl
c000c7e5:	19 c0                	sbb    eax,eax
c000c7e7:	31 d2                	xor    edx,edx
c000c7e9:	83 e0 0c             	and    eax,0xc
c000c7ec:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c7f0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c7f8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c7fc:	83 f9 01             	cmp    ecx,0x1
c000c7ff:	0f 96 c2             	setbe  dl
c000c802:	41                   	inc    ecx
c000c803:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c806:	01 d0                	add    eax,edx
c000c808:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c80c:	83 c4 1c             	add    esp,0x1c
c000c80f:	89 f0                	mov    eax,esi
c000c811:	5b                   	pop    ebx
c000c812:	5e                   	pop    esi
c000c813:	5f                   	pop    edi
c000c814:	5d                   	pop    ebp
c000c815:	c2 04 00             	ret    0x4

c000c818 <Clock::timeInDatetimeLocal()>:
c000c818:	53                   	push   ebx
c000c819:	83 ec 14             	sub    esp,0x14
c000c81c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c820:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c824:	e8 85 fc ff ff       	call   c000c4ae <Clock::timeInSecondsLocal()>
c000c829:	83 c4 0c             	add    esp,0xc
c000c82c:	52                   	push   edx
c000c82d:	50                   	push   eax
c000c82e:	53                   	push   ebx
c000c82f:	e8 a0 fe ff ff       	call   c000c6d4 <secondsToDatetime(unsigned long long)>
c000c834:	89 d8                	mov    eax,ebx
c000c836:	83 c4 14             	add    esp,0x14
c000c839:	5b                   	pop    ebx
c000c83a:	c2 04 00             	ret    0x4
c000c83d:	90                   	nop

c000c83e <Device::hibernate()>:
c000c83e:	c3                   	ret    
c000c83f:	90                   	nop

c000c840 <Device::wake()>:
c000c840:	c3                   	ret    
c000c841:	90                   	nop

c000c842 <Device::detect()>:
c000c842:	c3                   	ret    
c000c843:	90                   	nop

c000c844 <Device::disableLegacy()>:
c000c844:	c3                   	ret    
c000c845:	90                   	nop

c000c846 <Device::powerSaving(PowerSavingLevel)>:
c000c846:	c3                   	ret    
c000c847:	90                   	nop

c000c848 <DriverlessDevice::close(int, int, void*)>:
c000c848:	31 c0                	xor    eax,eax
c000c84a:	c3                   	ret    
c000c84b:	90                   	nop

c000c84c <DriverlessDevice::detect()>:
c000c84c:	c3                   	ret    
c000c84d:	90                   	nop

c000c84e <DriverlessDevice::open(int, int, void*)>:
c000c84e:	83 ec 18             	sub    esp,0x18
c000c851:	68 30 1a 02 c0       	push   0xc0021a30
c000c856:	e8 cc 4c 00 00       	call   c0011527 <KePanic(char const*)>
c000c85b:	83 c8 ff             	or     eax,0xffffffff
c000c85e:	83 c4 1c             	add    esp,0x1c
c000c861:	c3                   	ret    

c000c862 <Device::~Device()>:
c000c862:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000c867:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c86b:	89 10                	mov    DWORD PTR [eax],edx
c000c86d:	90                   	nop
c000c86e:	c3                   	ret    
c000c86f:	90                   	nop

c000c870 <Device::~Device()>:
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c877:	e8 e6 ff ff ff       	call   c000c862 <Device::~Device()>
c000c87c:	83 c4 04             	add    esp,0x4
c000c87f:	83 ec 08             	sub    esp,0x8
c000c882:	68 58 01 00 00       	push   0x158
c000c887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c88b:	e8 7c df ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	83 c4 0c             	add    esp,0xc
c000c896:	c3                   	ret    
c000c897:	90                   	nop

c000c898 <Device::findAndLoadDriver()>:
c000c898:	c7 44 24 04 4e 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a4e
c000c8a0:	e9 65 e0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c8a5:	90                   	nop

c000c8a6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c8a6:	57                   	push   edi
c000c8a7:	b9 09 00 00 00       	mov    ecx,0x9
c000c8ac:	56                   	push   esi
c000c8ad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8b1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8b5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c8bf:	81 c7 18 01 00 00    	add    edi,0x118
c000c8c5:	fc                   	cld    
c000c8c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c8c8:	5e                   	pop    esi
c000c8c9:	5f                   	pop    edi
c000c8ca:	c3                   	ret    
c000c8cb:	90                   	nop

c000c8cc <Device::preOpenACPI(void*, char*, char*)>:
c000c8cc:	57                   	push   edi
c000c8cd:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c8d2:	56                   	push   esi
c000c8d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8df:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c8e9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c8ef:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c8f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8f7:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c8fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c901:	b9 0e 00 00 00       	mov    ecx,0xe
c000c906:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c908:	5e                   	pop    esi
c000c909:	5f                   	pop    edi
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c90c:	53                   	push   ebx
c000c90d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c911:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c915:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c919:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c91d:	0f b6 c0             	movzx  eax,al
c000c920:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c924:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c928:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c92c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c930:	5b                   	pop    ebx
c000c931:	e9 aa 05 00 00       	jmp    c000cee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c936 <Device::getParent()>:
c000c936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c93a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c940:	c3                   	ret    
c000c941:	90                   	nop

c000c942 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c946:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c94a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c94f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c953:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c957:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c95b:	e9 f7 06 00 00       	jmp    c000d057 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c960 <Device::addChild(Device*)>:
c000c960:	53                   	push   ebx
c000c961:	83 ec 08             	sub    esp,0x8
c000c964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c96c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c972:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c978:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c97a:	85 d2                	test   edx,edx
c000c97c:	74 04                	je     c000c982 <Device::addChild(Device*)+0x22>
c000c97e:	89 d3                	mov    ebx,edx
c000c980:	eb f6                	jmp    c000c978 <Device::addChild(Device*)+0x18>
c000c982:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c985:	83 ec 0c             	sub    esp,0xc
c000c988:	6a 08                	push   0x8
c000c98a:	e8 44 b1 ff ff       	call   c0007ad3 <malloc>
c000c98f:	89 03                	mov    DWORD PTR [ebx],eax
c000c991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c99e:	83 c4 18             	add    esp,0x18
c000c9a1:	5b                   	pop    ebx
c000c9a2:	c3                   	ret    
c000c9a3:	90                   	nop

c000c9a4 <Device::removeAllChildren()>:
c000c9a4:	56                   	push   esi
c000c9a5:	53                   	push   ebx
c000c9a6:	52                   	push   edx
c000c9a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c9ab:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9b4:	74 17                	je     c000c9cd <Device::removeAllChildren()+0x29>
c000c9b6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c9b9:	85 c0                	test   eax,eax
c000c9bb:	74 0c                	je     c000c9c9 <Device::removeAllChildren()+0x25>
c000c9bd:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c9c6:	83 c4 10             	add    esp,0x10
c000c9c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9cb:	eb e4                	jmp    c000c9b1 <Device::removeAllChildren()+0xd>
c000c9cd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9d9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9e6:	58                   	pop    eax
c000c9e7:	5b                   	pop    ebx
c000c9e8:	5e                   	pop    esi
c000c9e9:	c3                   	ret    

c000c9ea <Device::hibernateAll()>:
c000c9ea:	53                   	push   ebx
c000c9eb:	83 ec 14             	sub    esp,0x14
c000c9ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c9f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9f4:	53                   	push   ebx
c000c9f5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c9f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca04:	74 0f                	je     c000ca15 <Device::hibernateAll()+0x2b>
c000ca06:	83 ec 0c             	sub    esp,0xc
c000ca09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca0c:	e8 d9 ff ff ff       	call   c000c9ea <Device::hibernateAll()>
c000ca11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca13:	eb e9                	jmp    c000c9fe <Device::hibernateAll()+0x14>
c000ca15:	83 c4 08             	add    esp,0x8
c000ca18:	5b                   	pop    ebx
c000ca19:	c3                   	ret    

c000ca1a <Device::wakeAll()>:
c000ca1a:	53                   	push   ebx
c000ca1b:	83 ec 14             	sub    esp,0x14
c000ca1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca24:	53                   	push   ebx
c000ca25:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca2e:	83 c4 10             	add    esp,0x10
c000ca31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca34:	74 0f                	je     c000ca45 <Device::wakeAll()+0x2b>
c000ca36:	83 ec 0c             	sub    esp,0xc
c000ca39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca3c:	e8 d9 ff ff ff       	call   c000ca1a <Device::wakeAll()>
c000ca41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca43:	eb e9                	jmp    c000ca2e <Device::wakeAll()+0x14>
c000ca45:	83 c4 08             	add    esp,0x8
c000ca48:	5b                   	pop    ebx
c000ca49:	c3                   	ret    

c000ca4a <Device::detectAll()>:
c000ca4a:	53                   	push   ebx
c000ca4b:	83 ec 14             	sub    esp,0x14
c000ca4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca54:	53                   	push   ebx
c000ca55:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca64:	74 0f                	je     c000ca75 <Device::detectAll()+0x2b>
c000ca66:	83 ec 0c             	sub    esp,0xc
c000ca69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca6c:	e8 d9 ff ff ff       	call   c000ca4a <Device::detectAll()>
c000ca71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca73:	eb e9                	jmp    c000ca5e <Device::detectAll()+0x14>
c000ca75:	83 c4 08             	add    esp,0x8
c000ca78:	5b                   	pop    ebx
c000ca79:	c3                   	ret    

c000ca7a <Device::disableLegacyAll()>:
c000ca7a:	c3                   	ret    
c000ca7b:	90                   	nop

c000ca7c <Device::loadDriversForAll()>:
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <Device::closeAll()>:
c000ca7e:	53                   	push   ebx
c000ca7f:	83 ec 08             	sub    esp,0x8
c000ca82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca88:	6a 00                	push   0x0
c000ca8a:	6a 00                	push   0x0
c000ca8c:	6a 00                	push   0x0
c000ca8e:	53                   	push   ebx
c000ca8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ca92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca9e:	74 0f                	je     c000caaf <Device::closeAll()+0x31>
c000caa0:	83 ec 0c             	sub    esp,0xc
c000caa3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caa6:	e8 d3 ff ff ff       	call   c000ca7e <Device::closeAll()>
c000caab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caad:	eb e9                	jmp    c000ca98 <Device::closeAll()+0x1a>
c000caaf:	83 c4 08             	add    esp,0x8
c000cab2:	5b                   	pop    ebx
c000cab3:	c3                   	ret    

c000cab4 <Device::powerSavingAll(PowerSavingLevel)>:
c000cab4:	56                   	push   esi
c000cab5:	53                   	push   ebx
c000cab6:	83 ec 0c             	sub    esp,0xc
c000cab9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cabd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cac1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac3:	56                   	push   esi
c000cac4:	53                   	push   ebx
c000cac5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cac8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cad4:	74 0f                	je     c000cae5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cad6:	52                   	push   edx
c000cad7:	52                   	push   edx
c000cad8:	56                   	push   esi
c000cad9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cadc:	e8 d3 ff ff ff       	call   c000cab4 <Device::powerSavingAll(PowerSavingLevel)>
c000cae1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cae3:	eb e9                	jmp    c000cace <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cae5:	58                   	pop    eax
c000cae6:	5b                   	pop    ebx
c000cae7:	5e                   	pop    esi
c000cae8:	c3                   	ret    
c000cae9:	90                   	nop

c000caea <Device::setName(char const*)>:
c000caea:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000caf2:	e9 59 3b ff ff       	jmp    c0000650 <strcpy>
c000caf7:	90                   	nop

c000caf8 <Device::Device(char const*)>:
c000caf8:	83 ec 1c             	sub    esp,0x1c
c000cafb:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000cb00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb04:	89 10                	mov    DWORD PTR [eax],edx
c000cb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb0a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb18:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb26:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb34:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb3e:	83 ec 08             	sub    esp,0x8
c000cb41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb49:	e8 9c ff ff ff       	call   c000caea <Device::setName(char const*)>
c000cb4e:	83 c4 10             	add    esp,0x10
c000cb51:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb59:	83 ec 0c             	sub    esp,0xc
c000cb5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb60:	e8 6e af ff ff       	call   c0007ad3 <malloc>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cb79:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cb7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb83:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb93:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbaf:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbba:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe4:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cbee:	90                   	nop
c000cbef:	83 c4 1c             	add    esp,0x1c
c000cbf2:	c3                   	ret    
c000cbf3:	90                   	nop

c000cbf4 <Device::getName()>:
c000cbf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbf8:	05 d0 00 00 00       	add    eax,0xd0
c000cbfd:	c3                   	ret    

c000cbfe <DriverlessDevice::DriverlessDevice(char const*)>:
c000cbfe:	83 ec 0c             	sub    esp,0xc
c000cc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc05:	83 ec 08             	sub    esp,0x8
c000cc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc0c:	50                   	push   eax
c000cc0d:	e8 e6 fe ff ff       	call   c000caf8 <Device::Device(char const*)>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c000cc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc1e:	89 10                	mov    DWORD PTR [eax],edx
c000cc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc24:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc2e:	90                   	nop
c000cc2f:	83 c4 0c             	add    esp,0xc
c000cc32:	c3                   	ret    
c000cc33:	90                   	nop

c000cc34 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc34:	57                   	push   edi
c000cc35:	56                   	push   esi
c000cc36:	53                   	push   ebx
c000cc37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc3b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc43:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc49:	75 0c                	jne    c000cc57 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc4b:	52                   	push   edx
c000cc4c:	52                   	push   edx
c000cc4d:	53                   	push   ebx
c000cc4e:	56                   	push   esi
c000cc4f:	e8 2e 2f 01 00       	call   c001fb82 <LinkedList<Device>::addElement(Device*)>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc60:	74 12                	je     c000cc74 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cc62:	50                   	push   eax
c000cc63:	57                   	push   edi
c000cc64:	56                   	push   esi
c000cc65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc68:	e8 c7 ff ff ff       	call   c000cc34 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc6d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc6f:	83 c4 10             	add    esp,0x10
c000cc72:	eb e9                	jmp    c000cc5d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cc74:	5b                   	pop    ebx
c000cc75:	5e                   	pop    esi
c000cc76:	5f                   	pop    edi
c000cc77:	c3                   	ret    

c000cc78 <getDevicesOfType(DeviceType)>:
c000cc78:	53                   	push   ebx
c000cc79:	83 ec 14             	sub    esp,0x14
c000cc7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cc80:	53                   	push   ebx
c000cc81:	e8 d8 2f 01 00       	call   c001fc5e <LinkedList<Device>::LinkedList()>
c000cc86:	83 c4 0c             	add    esp,0xc
c000cc89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc8d:	53                   	push   ebx
c000cc8e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cc94:	e8 9b ff ff ff       	call   c000cc34 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc99:	83 c4 18             	add    esp,0x18
c000cc9c:	89 d8                	mov    eax,ebx
c000cc9e:	5b                   	pop    ebx
c000cc9f:	c2 04 00             	ret    0x4
c000cca2:	66 90                	xchg   ax,ax

c000cca4 <HardDiskController::HardDiskController(char const*)>:
c000cca4:	83 ec 0c             	sub    esp,0xc
c000cca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccab:	83 ec 08             	sub    esp,0x8
c000ccae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb2:	50                   	push   eax
c000ccb3:	e8 40 fe ff ff       	call   c000caf8 <Device::Device(char const*)>
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c000ccc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc4:	89 10                	mov    DWORD PTR [eax],edx
c000ccc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccca:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ccd4:	90                   	nop
c000ccd5:	83 c4 0c             	add    esp,0xc
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop
c000ccda:	66 90                	xchg   ax,ax

c000ccdc <HardDiskController::~HardDiskController()>:
c000ccdc:	83 ec 0c             	sub    esp,0xc
c000ccdf:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c000cce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce8:	89 10                	mov    DWORD PTR [eax],edx
c000ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccee:	83 ec 0c             	sub    esp,0xc
c000ccf1:	50                   	push   eax
c000ccf2:	e8 6b fb ff ff       	call   c000c862 <Device::~Device()>
c000ccf7:	83 c4 10             	add    esp,0x10
c000ccfa:	90                   	nop
c000ccfb:	83 c4 0c             	add    esp,0xc
c000ccfe:	c3                   	ret    
c000ccff:	90                   	nop

c000cd00 <HardDiskController::~HardDiskController()>:
c000cd00:	83 ec 0c             	sub    esp,0xc
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd0a:	e8 cd ff ff ff       	call   c000ccdc <HardDiskController::~HardDiskController()>
c000cd0f:	83 c4 10             	add    esp,0x10
c000cd12:	83 ec 08             	sub    esp,0x8
c000cd15:	68 58 01 00 00       	push   0x158
c000cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1e:	e8 e9 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	83 c4 0c             	add    esp,0xc
c000cd29:	c3                   	ret    

c000cd2a <PhysicalDisk::eject()>:
c000cd2a:	83 c8 ff             	or     eax,0xffffffff
c000cd2d:	c3                   	ret    

c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd2e:	83 ec 0c             	sub    esp,0xc
c000cd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd35:	83 ec 08             	sub    esp,0x8
c000cd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3c:	50                   	push   eax
c000cd3d:	e8 b6 fd ff ff       	call   c000caf8 <Device::Device(char const*)>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000cd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4e:	89 10                	mov    DWORD PTR [eax],edx
c000cd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd54:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cd90:	90                   	nop
c000cd91:	83 c4 0c             	add    esp,0xc
c000cd94:	c3                   	ret    
c000cd95:	90                   	nop

c000cd96 <PhysicalDisk::startCache()>:
c000cd96:	56                   	push   esi
c000cd97:	53                   	push   ebx
c000cd98:	83 ec 10             	sub    esp,0x10
c000cd9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd9f:	6a 44                	push   0x44
c000cda1:	e8 2d ad ff ff       	call   c0007ad3 <malloc>
c000cda6:	89 c6                	mov    esi,eax
c000cda8:	58                   	pop    eax
c000cda9:	5a                   	pop    edx
c000cdaa:	53                   	push   ebx
c000cdab:	56                   	push   esi
c000cdac:	e8 83 17 00 00       	call   c000e534 <VCache::VCache(PhysicalDisk*)>
c000cdb1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cdb7:	83 c4 14             	add    esp,0x14
c000cdba:	5b                   	pop    ebx
c000cdbb:	5e                   	pop    esi
c000cdbc:	c3                   	ret    
c000cdbd:	90                   	nop

c000cdbe <PhysicalDisk::~PhysicalDisk()>:
c000cdbe:	83 ec 0c             	sub    esp,0xc
c000cdc1:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdca:	89 10                	mov    DWORD PTR [eax],edx
c000cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	50                   	push   eax
c000cdd4:	e8 89 fa ff ff       	call   c000c862 <Device::~Device()>
c000cdd9:	83 c4 10             	add    esp,0x10
c000cddc:	90                   	nop
c000cddd:	83 c4 0c             	add    esp,0xc
c000cde0:	c3                   	ret    
c000cde1:	90                   	nop

c000cde2 <PhysicalDisk::~PhysicalDisk()>:
c000cde2:	83 ec 0c             	sub    esp,0xc
c000cde5:	83 ec 0c             	sub    esp,0xc
c000cde8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdec:	e8 cd ff ff ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c000cdf1:	83 c4 10             	add    esp,0x10
c000cdf4:	83 ec 08             	sub    esp,0x8
c000cdf7:	68 6c 01 00 00       	push   0x16c
c000cdfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce00:	e8 07 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ce05:	83 c4 10             	add    esp,0x10
c000ce08:	83 c4 0c             	add    esp,0xc
c000ce0b:	c3                   	ret    

c000ce0c <int_handler>:
c000ce0c:	55                   	push   ebp
c000ce0d:	57                   	push   edi
c000ce0e:	56                   	push   esi
c000ce0f:	53                   	push   ebx
c000ce10:	83 ec 0c             	sub    esp,0xc
c000ce13:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce1a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce1e:	74 0b                	je     c000ce2b <int_handler+0x1f>
c000ce20:	fa                   	cli    
c000ce21:	f4                   	hlt    
c000ce22:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce29:	75 f5                	jne    c000ce20 <int_handler+0x14>
c000ce2b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce2e:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce31:	83 f8 17             	cmp    eax,0x17
c000ce34:	76 40                	jbe    c000ce76 <int_handler+0x6a>
c000ce36:	c1 e6 04             	shl    esi,0x4
c000ce39:	31 db                	xor    ebx,ebx
c000ce3b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce41:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce47:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce4b:	85 c0                	test   eax,eax
c000ce4d:	74 13                	je     c000ce62 <int_handler+0x56>
c000ce4f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce53:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ce56:	74 2c                	je     c000ce84 <int_handler+0x78>
c000ce58:	83 ec 08             	sub    esp,0x8
c000ce5b:	52                   	push   edx
c000ce5c:	57                   	push   edi
c000ce5d:	ff d0                	call   eax
c000ce5f:	83 c4 10             	add    esp,0x10
c000ce62:	83 c3 01             	add    ebx,0x1
c000ce65:	83 fb 04             	cmp    ebx,0x4
c000ce68:	75 dd                	jne    c000ce47 <int_handler+0x3b>
c000ce6a:	83 c4 0c             	add    esp,0xc
c000ce6d:	31 c0                	xor    eax,eax
c000ce6f:	5b                   	pop    ebx
c000ce70:	31 d2                	xor    edx,edx
c000ce72:	5e                   	pop    esi
c000ce73:	5f                   	pop    edi
c000ce74:	5d                   	pop    ebp
c000ce75:	c3                   	ret    
c000ce76:	83 ec 0c             	sub    esp,0xc
c000ce79:	50                   	push   eax
c000ce7a:	e8 43 b4 00 00       	call   c00182c2 <HalEndOfInterrupt(int)>
c000ce7f:	83 c4 10             	add    esp,0x10
c000ce82:	eb b2                	jmp    c000ce36 <int_handler+0x2a>
c000ce84:	83 ec 08             	sub    esp,0x8
c000ce87:	52                   	push   edx
c000ce88:	57                   	push   edi
c000ce89:	ff d0                	call   eax
c000ce8b:	83 c4 10             	add    esp,0x10
c000ce8e:	83 c4 0c             	add    esp,0xc
c000ce91:	5b                   	pop    ebx
c000ce92:	5e                   	pop    esi
c000ce93:	5f                   	pop    edi
c000ce94:	5d                   	pop    ebp
c000ce95:	c3                   	ret    

c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ce96:	56                   	push   esi
c000ce97:	31 c0                	xor    eax,eax
c000ce99:	53                   	push   ebx
c000ce9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ce9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cea2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cea6:	89 ca                	mov    edx,ecx
c000cea8:	c1 e2 04             	shl    edx,0x4
c000ceab:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000ceb3:	74 17                	je     c000cecc <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000ceb5:	83 c0 01             	add    eax,0x1
c000ceb8:	83 f8 04             	cmp    eax,0x4
c000cebb:	75 ee                	jne    c000ceab <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cebd:	c7 44 24 0c 44 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b44
c000cec5:	5b                   	pop    ebx
c000cec6:	5e                   	pop    esi
c000cec7:	e9 5b 46 00 00       	jmp    c0011527 <KePanic(char const*)>
c000cecc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cecf:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000ced6:	5b                   	pop    ebx
c000ced7:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cede:	5e                   	pop    esi
c000cedf:	c3                   	ret    

c000cee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cee0:	55                   	push   ebp
c000cee1:	57                   	push   edi
c000cee2:	56                   	push   esi
c000cee3:	53                   	push   ebx
c000cee4:	83 ec 0c             	sub    esp,0xc
c000cee7:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000ceed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cefc:	8d 6e 20             	lea    ebp,[esi+0x20]
c000ceff:	74 57                	je     c000cf58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf01:	84 c0                	test   al,al
c000cf03:	89 c7                	mov    edi,eax
c000cf05:	74 1d                	je     c000cf24 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cf07:	83 fe 0f             	cmp    esi,0xf
c000cf0a:	0f 8f d9 00 00 00    	jg     c000cfe9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf10:	0f b6 b6 48 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc9b8]
c000cf17:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf1f:	d1 ef                	shr    edi,1
c000cf21:	83 e7 01             	and    edi,0x1
c000cf24:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf29:	83 ec 08             	sub    esp,0x8
c000cf2c:	31 db                	xor    ebx,ebx
c000cf2e:	50                   	push   eax
c000cf2f:	68 51 1b 02 c0       	push   0xc0021b51
c000cf34:	e8 d1 d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cf39:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf3e:	83 c4 10             	add    esp,0x10
c000cf41:	85 c0                	test   eax,eax
c000cf43:	7f 59                	jg     c000cf9e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cf45:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf48:	83 ec 0c             	sub    esp,0xc
c000cf4b:	68 68 1b 02 c0       	push   0xc0021b68
c000cf50:	e8 d2 45 00 00       	call   c0011527 <KePanic(char const*)>
c000cf55:	83 c4 10             	add    esp,0x10
c000cf58:	89 e8                	mov    eax,ebp
c000cf5a:	31 d2                	xor    edx,edx
c000cf5c:	c1 e0 04             	shl    eax,0x4
c000cf5f:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cf66:	85 c9                	test   ecx,ecx
c000cf68:	0f 84 92 00 00 00    	je     c000d000 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cf6e:	83 c2 01             	add    edx,0x1
c000cf71:	83 fa 04             	cmp    edx,0x4
c000cf74:	75 e9                	jne    c000cf5f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cf76:	83 ec 0c             	sub    esp,0xc
c000cf79:	68 bc 1b 02 c0       	push   0xc0021bbc
c000cf7e:	e8 a4 45 00 00       	call   c0011527 <KePanic(char const*)>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf8b:	83 c4 0c             	add    esp,0xc
c000cf8e:	5b                   	pop    ebx
c000cf8f:	5e                   	pop    esi
c000cf90:	5f                   	pop    edi
c000cf91:	5d                   	pop    ebp
c000cf92:	c3                   	ret    
c000cf93:	83 c3 01             	add    ebx,0x1
c000cf96:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cf9c:	7e a7                	jle    c000cf45 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cf9e:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfa5:	83 ec 08             	sub    esp,0x8
c000cfa8:	56                   	push   esi
c000cfa9:	55                   	push   ebp
c000cfaa:	e8 fd 1a 01 00       	call   c001eaac <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cfaf:	83 c4 10             	add    esp,0x10
c000cfb2:	84 c0                	test   al,al
c000cfb4:	74 dd                	je     c000cf93 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfb6:	89 f8                	mov    eax,edi
c000cfb8:	83 ec 04             	sub    esp,0x4
c000cfbb:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfc2:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfc5:	0f b6 f8             	movzx  edi,al
c000cfc8:	57                   	push   edi
c000cfc9:	89 e8                	mov    eax,ebp
c000cfcb:	6a 00                	push   0x0
c000cfcd:	0f b6 c0             	movzx  eax,al
c000cfd0:	50                   	push   eax
c000cfd1:	89 f0                	mov    eax,esi
c000cfd3:	6a 00                	push   0x0
c000cfd5:	0f b6 c0             	movzx  eax,al
c000cfd8:	6a 00                	push   0x0
c000cfda:	50                   	push   eax
c000cfdb:	53                   	push   ebx
c000cfdc:	e8 37 1c 01 00       	call   c001ec18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cfe1:	83 c4 20             	add    esp,0x20
c000cfe4:	e9 6f ff ff ff       	jmp    c000cf58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfe9:	83 ec 0c             	sub    esp,0xc
c000cfec:	31 ff                	xor    edi,edi
c000cfee:	68 84 1b 02 c0       	push   0xc0021b84
c000cff3:	e8 2f 45 00 00       	call   c0011527 <KePanic(char const*)>
c000cff8:	83 c4 10             	add    esp,0x10
c000cffb:	e9 24 ff ff ff       	jmp    c000cf24 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d000:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d003:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d007:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d00e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d012:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d019:	83 c4 0c             	add    esp,0xc
c000d01c:	89 f0                	mov    eax,esi
c000d01e:	5b                   	pop    ebx
c000d01f:	5e                   	pop    esi
c000d020:	5f                   	pop    edi
c000d021:	5d                   	pop    ebp
c000d022:	c3                   	ret    

c000d023 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d027:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d02b:	c1 e0 04             	shl    eax,0x4
c000d02e:	8d 50 10             	lea    edx,[eax+0x10]
c000d031:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d037:	74 08                	je     c000d041 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d039:	83 c0 04             	add    eax,0x4
c000d03c:	39 d0                	cmp    eax,edx
c000d03e:	75 f1                	jne    c000d031 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d040:	c3                   	ret    
c000d041:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d04b:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d055:	eb e2                	jmp    c000d039 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d057 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d057:	56                   	push   esi
c000d058:	53                   	push   ebx
c000d059:	83 ec 04             	sub    esp,0x4
c000d05c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d069:	74 0e                	je     c000d079 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d06b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d070:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d077:	75 34                	jne    c000d0ad <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d079:	8d 43 20             	lea    eax,[ebx+0x20]
c000d07c:	c1 e0 04             	shl    eax,0x4
c000d07f:	8d 50 10             	lea    edx,[eax+0x10]
c000d082:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d088:	74 0d                	je     c000d097 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d08a:	83 c0 04             	add    eax,0x4
c000d08d:	39 d0                	cmp    eax,edx
c000d08f:	75 f1                	jne    c000d082 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d091:	83 c4 04             	add    esp,0x4
c000d094:	5b                   	pop    ebx
c000d095:	5e                   	pop    esi
c000d096:	c3                   	ret    
c000d097:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0a1:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0ab:	eb dd                	jmp    c000d08a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d0ad:	83 fb 0f             	cmp    ebx,0xf
c000d0b0:	7f 09                	jg     c000d0bb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d0b2:	0f b6 9b 48 36 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc9b8]
c000d0b9:	eb be                	jmp    c000d079 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0bb:	83 ec 0c             	sub    esp,0xc
c000d0be:	68 75 1b 02 c0       	push   0xc0021b75
c000d0c3:	e8 5f 44 00 00       	call   c0011527 <KePanic(char const*)>
c000d0c8:	83 c4 10             	add    esp,0x10
c000d0cb:	eb ac                	jmp    c000d079 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d0cd <setupINTS()>:
c000d0cd:	31 c0                	xor    eax,eax
c000d0cf:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0d9:	83 c0 10             	add    eax,0x10
c000d0dc:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d0e6:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d0f0:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d0fa:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d104:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d10e:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d118:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d122:	3d 00 10 00 00       	cmp    eax,0x1000
c000d127:	75 a6                	jne    c000d0cf <setupINTS()+0x2>
c000d129:	c3                   	ret    

c000d12a <convertLegacyIRQNumber(int)>:
c000d12a:	83 ec 0c             	sub    esp,0xc
c000d12d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d137:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d13e:	74 0c                	je     c000d14c <convertLegacyIRQNumber(int)+0x22>
c000d140:	83 f8 0f             	cmp    eax,0xf
c000d143:	7f 0b                	jg     c000d150 <convertLegacyIRQNumber(int)+0x26>
c000d145:	0f b6 80 48 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc9b8]
c000d14c:	83 c4 0c             	add    esp,0xc
c000d14f:	c3                   	ret    
c000d150:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d154:	83 ec 0c             	sub    esp,0xc
c000d157:	68 84 1b 02 c0       	push   0xc0021b84
c000d15c:	e8 c6 43 00 00       	call   c0011527 <KePanic(char const*)>
c000d161:	83 c4 10             	add    esp,0x10
c000d164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d168:	83 c4 0c             	add    esp,0xc
c000d16b:	c3                   	ret    

c000d16c <startGUI(void*)>:
c000d16c:	55                   	push   ebp
c000d16d:	89 e5                	mov    ebp,esp
c000d16f:	53                   	push   ebx
c000d170:	83 ec 04             	sub    esp,0x4
c000d173:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d178:	83 e8 01             	sub    eax,0x1
c000d17b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d180:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d185:	85 c0                	test   eax,eax
c000d187:	75 01                	jne    c000d18a <startGUI(void*)+0x1e>
c000d189:	fb                   	sti    
c000d18a:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d190:	83 ec 08             	sub    esp,0x8
c000d193:	6a 01                	push   0x1
c000d195:	68 e1 1b 02 c0       	push   0xc0021be1
c000d19a:	e8 06 84 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c000d19f:	83 c4 10             	add    esp,0x10
c000d1a2:	83 ec 08             	sub    esp,0x8
c000d1a5:	53                   	push   ebx
c000d1a6:	50                   	push   eax
c000d1a7:	e8 39 86 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c000d1ac:	83 c4 10             	add    esp,0x10
c000d1af:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1b5:	83 ec 08             	sub    esp,0x8
c000d1b8:	6a 01                	push   0x1
c000d1ba:	68 fb 1b 02 c0       	push   0xc0021bfb
c000d1bf:	e8 e1 83 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	83 ec 08             	sub    esp,0x8
c000d1ca:	53                   	push   ebx
c000d1cb:	50                   	push   eax
c000d1cc:	e8 14 86 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c000d1d1:	83 c4 10             	add    esp,0x10
c000d1d4:	90                   	nop
c000d1d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d1d8:	c9                   	leave  
c000d1d9:	c3                   	ret    

c000d1da <startGUIVESA(void*)>:
c000d1da:	55                   	push   ebp
c000d1db:	89 e5                	mov    ebp,esp
c000d1dd:	53                   	push   ebx
c000d1de:	83 ec 04             	sub    esp,0x4
c000d1e1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1e6:	83 e8 01             	sub    eax,0x1
c000d1e9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1ee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	75 01                	jne    c000d1f8 <startGUIVESA(void*)+0x1e>
c000d1f7:	fb                   	sti    
c000d1f8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1fe:	83 ec 08             	sub    esp,0x8
c000d201:	6a 01                	push   0x1
c000d203:	68 19 1c 02 c0       	push   0xc0021c19
c000d208:	e8 98 83 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c000d20d:	83 c4 10             	add    esp,0x10
c000d210:	83 ec 08             	sub    esp,0x8
c000d213:	53                   	push   ebx
c000d214:	50                   	push   eax
c000d215:	e8 cb 85 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c000d21a:	83 c4 10             	add    esp,0x10
c000d21d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d223:	83 ec 08             	sub    esp,0x8
c000d226:	6a 01                	push   0x1
c000d228:	68 fb 1b 02 c0       	push   0xc0021bfb
c000d22d:	e8 73 83 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c000d232:	83 c4 10             	add    esp,0x10
c000d235:	83 ec 08             	sub    esp,0x8
c000d238:	53                   	push   ebx
c000d239:	50                   	push   eax
c000d23a:	e8 a6 85 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	90                   	nop
c000d243:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d246:	c9                   	leave  
c000d247:	c3                   	ret    

c000d248 <sendKeyToTerminal(unsigned char)>:
c000d248:	55                   	push   ebp
c000d249:	89 e5                	mov    ebp,esp
c000d24b:	83 ec 28             	sub    esp,0x28
c000d24e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d251:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d254:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d259:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d25d:	83 ec 08             	sub    esp,0x8
c000d260:	52                   	push   edx
c000d261:	50                   	push   eax
c000d262:	e8 55 bb ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d267:	83 c4 10             	add    esp,0x10
c000d26a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d26e:	83 f8 0a             	cmp    eax,0xa
c000d271:	74 16                	je     c000d289 <sendKeyToTerminal(unsigned char)+0x41>
c000d273:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d277:	83 f8 03             	cmp    eax,0x3
c000d27a:	74 0d                	je     c000d289 <sendKeyToTerminal(unsigned char)+0x41>
c000d27c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d280:	83 f8 1c             	cmp    eax,0x1c
c000d283:	0f 85 97 00 00 00    	jne    c000d320 <sendKeyToTerminal(unsigned char)+0xd8>
c000d289:	fa                   	cli    
c000d28a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d28f:	83 c0 01             	add    eax,0x1
c000d292:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d297:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d29c:	83 c0 01             	add    eax,0x1
c000d29f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2a4:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d2a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2ac:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d2b6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d2ba:	74 1f                	je     c000d2db <sendKeyToTerminal(unsigned char)+0x93>
c000d2bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d2bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d2c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d2c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d2c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2cb:	83 ec 0c             	sub    esp,0xc
c000d2ce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d2d1:	e8 32 92 00 00       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c000d2d6:	83 c4 10             	add    esp,0x10
c000d2d9:	eb db                	jmp    c000d2b6 <sendKeyToTerminal(unsigned char)+0x6e>
c000d2db:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2e0:	83 e8 01             	sub    eax,0x1
c000d2e3:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2e8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2ed:	85 c0                	test   eax,eax
c000d2ef:	75 18                	jne    c000d309 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2f1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d2f6:	85 c0                	test   eax,eax
c000d2f8:	74 0f                	je     c000d309 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2fa:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d304:	e8 07 8d 00 00       	call   c0016010 <schedule()>
c000d309:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d30e:	83 e8 01             	sub    eax,0x1
c000d311:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d316:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d31b:	85 c0                	test   eax,eax
c000d31d:	75 01                	jne    c000d320 <sendKeyToTerminal(unsigned char)+0xd8>
c000d31f:	fb                   	sti    
c000d320:	90                   	nop
c000d321:	c9                   	leave  
c000d322:	c3                   	ret    

c000d323 <sendKeyboardToken(KeyboardToken)>:
c000d323:	55                   	push   ebp
c000d324:	89 e5                	mov    ebp,esp
c000d326:	83 ec 18             	sub    esp,0x18
c000d329:	e8 49 42 00 00       	call   c0011577 <KeUserIOReceived()>
c000d32e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d334:	0f b7 c0             	movzx  eax,ax
c000d337:	83 f2 01             	xor    edx,0x1
c000d33a:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d340:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d345:	85 c0                	test   eax,eax
c000d347:	74 24                	je     c000d36d <sendKeyboardToken(KeyboardToken)+0x4a>
c000d349:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d34f:	83 ec 04             	sub    esp,0x4
c000d352:	68 40 b4 02 c0       	push   0xc002b440
c000d357:	83 ec 08             	sub    esp,0x8
c000d35a:	89 e0                	mov    eax,esp
c000d35c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d35f:	89 08                	mov    DWORD PTR [eax],ecx
c000d361:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d364:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d368:	ff d2                	call   edx
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d371:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d374:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d379:	0f b6 d2             	movzx  edx,dl
c000d37c:	0f b6 c0             	movzx  eax,al
c000d37f:	39 c2                	cmp    edx,eax
c000d381:	74 1c                	je     c000d39f <sendKeyboardToken(KeyboardToken)+0x7c>
c000d383:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d386:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d38b:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d390:	0f b6 c0             	movzx  eax,al
c000d393:	83 ec 0c             	sub    esp,0xc
c000d396:	50                   	push   eax
c000d397:	e8 7c b1 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d39c:	83 c4 10             	add    esp,0x10
c000d39f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d3a2:	0f b6 c0             	movzx  eax,al
c000d3a5:	85 c0                	test   eax,eax
c000d3a7:	0f 84 da 00 00 00    	je     c000d487 <sendKeyboardToken(KeyboardToken)+0x164>
c000d3ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b0:	0f b7 c0             	movzx  eax,ax
c000d3b3:	3d 18 03 00 00       	cmp    eax,0x318
c000d3b8:	75 06                	jne    c000d3c0 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d3ba:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d3c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c3:	0f b7 c0             	movzx  eax,ax
c000d3c6:	3d 19 03 00 00       	cmp    eax,0x319
c000d3cb:	75 06                	jne    c000d3d3 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d3cd:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d3d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d6:	0f b7 c0             	movzx  eax,ax
c000d3d9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d3de:	75 06                	jne    c000d3e6 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d3e0:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d3e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e9:	0f b7 c0             	movzx  eax,ax
c000d3ec:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d3f1:	75 06                	jne    c000d3f9 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d3f3:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3fc:	0f b7 c0             	movzx  eax,ax
c000d3ff:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d404:	75 06                	jne    c000d40c <sendKeyboardToken(KeyboardToken)+0xe9>
c000d406:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d40c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40f:	0f b7 c0             	movzx  eax,ax
c000d412:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d417:	75 06                	jne    c000d41f <sendKeyboardToken(KeyboardToken)+0xfc>
c000d419:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d422:	0f b7 c0             	movzx  eax,ax
c000d425:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d42a:	75 06                	jne    c000d432 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d42c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d435:	0f b7 c0             	movzx  eax,ax
c000d438:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d43d:	75 06                	jne    c000d445 <sendKeyboardToken(KeyboardToken)+0x122>
c000d43f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d448:	0f b7 c0             	movzx  eax,ax
c000d44b:	3d 20 03 00 00       	cmp    eax,0x320
c000d450:	75 06                	jne    c000d458 <sendKeyboardToken(KeyboardToken)+0x135>
c000d452:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45b:	0f b7 c0             	movzx  eax,ax
c000d45e:	3d 21 03 00 00       	cmp    eax,0x321
c000d463:	75 06                	jne    c000d46b <sendKeyboardToken(KeyboardToken)+0x148>
c000d465:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46e:	0f b7 c0             	movzx  eax,ax
c000d471:	3d 22 03 00 00       	cmp    eax,0x322
c000d476:	0f 85 f1 00 00 00    	jne    c000d56d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d47c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d482:	e9 e6 00 00 00       	jmp    c000d56d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48a:	0f b7 c0             	movzx  eax,ax
c000d48d:	3d 18 03 00 00       	cmp    eax,0x318
c000d492:	75 0a                	jne    c000d49e <sendKeyboardToken(KeyboardToken)+0x17b>
c000d494:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d49a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a1:	0f b7 c0             	movzx  eax,ax
c000d4a4:	3d 19 03 00 00       	cmp    eax,0x319
c000d4a9:	75 0a                	jne    c000d4b5 <sendKeyboardToken(KeyboardToken)+0x192>
c000d4ab:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d4b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b8:	0f b7 c0             	movzx  eax,ax
c000d4bb:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4c0:	75 0a                	jne    c000d4cc <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d4c2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d4c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cf:	0f b7 c0             	movzx  eax,ax
c000d4d2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4d7:	75 0a                	jne    c000d4e3 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d4d9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d4df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e6:	0f b7 c0             	movzx  eax,ax
c000d4e9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4ee:	75 0a                	jne    c000d4fa <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d4f0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d4f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fd:	0f b7 c0             	movzx  eax,ax
c000d500:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d505:	75 0a                	jne    c000d511 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d507:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d50d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d514:	0f b7 c0             	movzx  eax,ax
c000d517:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d51c:	75 0a                	jne    c000d528 <sendKeyboardToken(KeyboardToken)+0x205>
c000d51e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d524:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52b:	0f b7 c0             	movzx  eax,ax
c000d52e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d533:	75 0a                	jne    c000d53f <sendKeyboardToken(KeyboardToken)+0x21c>
c000d535:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d53b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d53f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d542:	0f b7 c0             	movzx  eax,ax
c000d545:	3d 20 03 00 00       	cmp    eax,0x320
c000d54a:	75 0a                	jne    c000d556 <sendKeyboardToken(KeyboardToken)+0x233>
c000d54c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d552:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d559:	0f b7 c0             	movzx  eax,ax
c000d55c:	3d 21 03 00 00       	cmp    eax,0x321
c000d561:	75 0a                	jne    c000d56d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d563:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d569:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d570:	0f b7 c0             	movzx  eax,ax
c000d573:	3d 00 02 00 00       	cmp    eax,0x200
c000d578:	75 2f                	jne    c000d5a9 <sendKeyboardToken(KeyboardToken)+0x286>
c000d57a:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d57f:	83 f0 01             	xor    eax,0x1
c000d582:	0f b6 c0             	movzx  eax,al
c000d585:	85 c0                	test   eax,eax
c000d587:	74 20                	je     c000d5a9 <sendKeyboardToken(KeyboardToken)+0x286>
c000d589:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d58e:	6a 01                	push   0x1
c000d590:	6a 00                	push   0x0
c000d592:	68 6c d1 00 c0       	push   0xc000d16c
c000d597:	50                   	push   eax
c000d598:	e8 27 88 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c000d59d:	83 c4 10             	add    esp,0x10
c000d5a0:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5a7:	eb 3a                	jmp    c000d5e3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ac:	0f b7 c0             	movzx  eax,ax
c000d5af:	3d 01 02 00 00       	cmp    eax,0x201
c000d5b4:	75 2d                	jne    c000d5e3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5b6:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5bb:	83 f0 01             	xor    eax,0x1
c000d5be:	0f b6 c0             	movzx  eax,al
c000d5c1:	85 c0                	test   eax,eax
c000d5c3:	74 1e                	je     c000d5e3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5c5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5ca:	6a 01                	push   0x1
c000d5cc:	6a 00                	push   0x0
c000d5ce:	68 da d1 00 c0       	push   0xc000d1da
c000d5d3:	50                   	push   eax
c000d5d4:	e8 eb 87 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c000d5d9:	83 c4 10             	add    esp,0x10
c000d5dc:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e6:	0f b7 c0             	movzx  eax,ax
c000d5e9:	3d 25 03 00 00       	cmp    eax,0x325
c000d5ee:	75 06                	jne    c000d5f6 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d5f0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d5f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f9:	0f b7 c0             	movzx  eax,ax
c000d5fc:	3d 24 03 00 00       	cmp    eax,0x324
c000d601:	75 06                	jne    c000d609 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d603:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60c:	0f b7 c0             	movzx  eax,ax
c000d60f:	3d 23 03 00 00       	cmp    eax,0x323
c000d614:	75 06                	jne    c000d61c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d616:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d61f:	0f b7 c0             	movzx  eax,ax
c000d622:	3d 26 03 00 00       	cmp    eax,0x326
c000d627:	75 06                	jne    c000d62f <sendKeyboardToken(KeyboardToken)+0x30c>
c000d629:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d632:	0f b7 c0             	movzx  eax,ax
c000d635:	3d 27 03 00 00       	cmp    eax,0x327
c000d63a:	75 06                	jne    c000d642 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d63c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d645:	0f b7 c0             	movzx  eax,ax
c000d648:	3d 22 03 00 00       	cmp    eax,0x322
c000d64d:	75 06                	jne    c000d655 <sendKeyboardToken(KeyboardToken)+0x332>
c000d64f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d655:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d659:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d65c:	83 f0 01             	xor    eax,0x1
c000d65f:	0f b6 c0             	movzx  eax,al
c000d662:	85 c0                	test   eax,eax
c000d664:	74 7c                	je     c000d6e2 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d666:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d66b:	0f b6 c0             	movzx  eax,al
c000d66e:	85 c0                	test   eax,eax
c000d670:	74 43                	je     c000d6b5 <sendKeyboardToken(KeyboardToken)+0x392>
c000d672:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d676:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d67a:	85 c0                	test   eax,eax
c000d67c:	74 2b                	je     c000d6a9 <sendKeyboardToken(KeyboardToken)+0x386>
c000d67e:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d684:	89 d0                	mov    eax,edx
c000d686:	c1 e0 02             	shl    eax,0x2
c000d689:	01 d0                	add    eax,edx
c000d68b:	d1 e0                	shl    eax,1
c000d68d:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d695:	0f b7 c0             	movzx  eax,ax
c000d698:	8d 50 d0             	lea    edx,[eax-0x30]
c000d69b:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6a0:	01 d0                	add    eax,edx
c000d6a2:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6a7:	eb 71                	jmp    c000d71a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6a9:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6b3:	eb 65                	jmp    c000d71a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6b5:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6ba:	85 c0                	test   eax,eax
c000d6bc:	74 18                	je     c000d6d6 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d6be:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6c3:	0f b6 c0             	movzx  eax,al
c000d6c6:	83 ec 0c             	sub    esp,0xc
c000d6c9:	50                   	push   eax
c000d6ca:	e8 79 fb ff ff       	call   c000d248 <sendKeyToTerminal(unsigned char)>
c000d6cf:	83 c4 10             	add    esp,0x10
c000d6d2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6d6:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6e0:	eb 38                	jmp    c000d71a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	0f b7 c0             	movzx  eax,ax
c000d6e8:	3d 01 01 00 00       	cmp    eax,0x101
c000d6ed:	75 2b                	jne    c000d71a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6ef:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	74 18                	je     c000d710 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d6f8:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6fd:	0f b6 c0             	movzx  eax,al
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	50                   	push   eax
c000d704:	e8 3f fb ff ff       	call   c000d248 <sendKeyToTerminal(unsigned char)>
c000d709:	83 c4 10             	add    esp,0x10
c000d70c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d710:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d71a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d71d:	83 f0 01             	xor    eax,0x1
c000d720:	0f b6 c0             	movzx  eax,al
c000d723:	85 c0                	test   eax,eax
c000d725:	74 5a                	je     c000d781 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d727:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d72a:	83 f0 01             	xor    eax,0x1
c000d72d:	0f b6 c0             	movzx  eax,al
c000d730:	85 c0                	test   eax,eax
c000d732:	74 4d                	je     c000d781 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d734:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d739:	83 f0 01             	xor    eax,0x1
c000d73c:	0f b6 c0             	movzx  eax,al
c000d73f:	85 c0                	test   eax,eax
c000d741:	74 3e                	je     c000d781 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d746:	0f b7 c0             	movzx  eax,ax
c000d749:	83 f8 1f             	cmp    eax,0x1f
c000d74c:	76 0b                	jbe    c000d759 <sendKeyboardToken(KeyboardToken)+0x436>
c000d74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d751:	0f b7 c0             	movzx  eax,ax
c000d754:	83 f8 7e             	cmp    eax,0x7e
c000d757:	76 16                	jbe    c000d76f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75c:	0f b7 c0             	movzx  eax,ax
c000d75f:	83 f8 0a             	cmp    eax,0xa
c000d762:	74 0b                	je     c000d76f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d767:	0f b7 c0             	movzx  eax,ax
c000d76a:	83 f8 08             	cmp    eax,0x8
c000d76d:	75 12                	jne    c000d781 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d76f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d772:	0f b6 c0             	movzx  eax,al
c000d775:	83 ec 0c             	sub    esp,0xc
c000d778:	50                   	push   eax
c000d779:	e8 ca fa ff ff       	call   c000d248 <sendKeyToTerminal(unsigned char)>
c000d77e:	83 c4 10             	add    esp,0x10
c000d781:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d784:	83 f0 01             	xor    eax,0x1
c000d787:	0f b6 c0             	movzx  eax,al
c000d78a:	85 c0                	test   eax,eax
c000d78c:	74 5d                	je     c000d7eb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d78e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d791:	83 f0 01             	xor    eax,0x1
c000d794:	0f b6 c0             	movzx  eax,al
c000d797:	85 c0                	test   eax,eax
c000d799:	74 50                	je     c000d7eb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d79b:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7a0:	0f b6 c0             	movzx  eax,al
c000d7a3:	85 c0                	test   eax,eax
c000d7a5:	74 44                	je     c000d7eb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7aa:	0f b7 c0             	movzx  eax,ax
c000d7ad:	83 f8 3f             	cmp    eax,0x3f
c000d7b0:	76 39                	jbe    c000d7eb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b5:	0f b7 c0             	movzx  eax,ax
c000d7b8:	83 f8 7f             	cmp    eax,0x7f
c000d7bb:	77 2e                	ja     c000d7eb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c0:	88 c2                	mov    dl,al
c000d7c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c5:	0f b7 c0             	movzx  eax,ax
c000d7c8:	83 f8 5f             	cmp    eax,0x5f
c000d7cb:	76 04                	jbe    c000d7d1 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d7cd:	b0 20                	mov    al,0x20
c000d7cf:	eb 02                	jmp    c000d7d3 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d7d1:	b0 00                	mov    al,0x0
c000d7d3:	89 d1                	mov    ecx,edx
c000d7d5:	29 c1                	sub    ecx,eax
c000d7d7:	89 c8                	mov    eax,ecx
c000d7d9:	83 e8 40             	sub    eax,0x40
c000d7dc:	0f b6 c0             	movzx  eax,al
c000d7df:	83 ec 0c             	sub    esp,0xc
c000d7e2:	50                   	push   eax
c000d7e3:	e8 60 fa ff ff       	call   c000d248 <sendKeyToTerminal(unsigned char)>
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ee:	0f b7 c0             	movzx  eax,ax
c000d7f1:	3d 00 03 00 00       	cmp    eax,0x300
c000d7f6:	75 12                	jne    c000d80a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d7f8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7fb:	83 f0 01             	xor    eax,0x1
c000d7fe:	0f b6 c0             	movzx  eax,al
c000d801:	85 c0                	test   eax,eax
c000d803:	74 05                	je     c000d80a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d805:	e8 0f ad ff ff       	call   c0008519 <doTerminalCycle()>
c000d80a:	90                   	nop
c000d80b:	c9                   	leave  
c000d80c:	c3                   	ret    

c000d80d <clearInternalKeybuffer(VgaText*)>:
c000d80d:	55                   	push   ebp
c000d80e:	89 e5                	mov    ebp,esp
c000d810:	83 ec 08             	sub    esp,0x8
c000d813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d816:	05 02 01 00 00       	add    eax,0x102
c000d81b:	83 ec 0c             	sub    esp,0xc
c000d81e:	50                   	push   eax
c000d81f:	e8 5c 2d ff ff       	call   c0000580 <strlen>
c000d824:	83 c4 10             	add    esp,0x10
c000d827:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d82a:	81 c2 02 01 00 00    	add    edx,0x102
c000d830:	83 ec 04             	sub    esp,0x4
c000d833:	50                   	push   eax
c000d834:	6a 00                	push   0x0
c000d836:	52                   	push   edx
c000d837:	e8 b4 2c ff ff       	call   c00004f0 <memset>
c000d83c:	83 c4 10             	add    esp,0x10
c000d83f:	90                   	nop
c000d840:	c9                   	leave  
c000d841:	c3                   	ret    

c000d842 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d842:	55                   	push   ebp
c000d843:	89 e5                	mov    ebp,esp
c000d845:	83 ec 18             	sub    esp,0x18
c000d848:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d84d:	85 c0                	test   eax,eax
c000d84f:	74 2a                	je     c000d87b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d851:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d857:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d85d:	83 ec 04             	sub    esp,0x4
c000d860:	68 40 b4 02 c0       	push   0xc002b440
c000d865:	83 ec 08             	sub    esp,0x8
c000d868:	89 e0                	mov    eax,esp
c000d86a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d86d:	89 08                	mov    DWORD PTR [eax],ecx
c000d86f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d872:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d876:	ff d2                	call   edx
c000d878:	83 c4 10             	add    esp,0x10
c000d87b:	fb                   	sti    
c000d87c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d883:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d887:	0f 84 0d 01 00 00    	je     c000d99a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d890:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d896:	0f be c0             	movsx  eax,al
c000d899:	85 c0                	test   eax,eax
c000d89b:	75 2c                	jne    c000d8c9 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d89d:	fa                   	cli    
c000d89e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8a3:	83 c0 01             	add    eax,0x1
c000d8a6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8ab:	e8 60 87 00 00       	call   c0016010 <schedule()>
c000d8b0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8b5:	83 e8 01             	sub    eax,0x1
c000d8b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8bd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8c2:	85 c0                	test   eax,eax
c000d8c4:	75 c7                	jne    c000d88d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8c6:	fb                   	sti    
c000d8c7:	eb c4                	jmp    c000d88d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d8cc:	8d 50 01             	lea    edx,[eax+0x1]
c000d8cf:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d8d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8d5:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d8db:	88 10                	mov    BYTE PTR [eax],dl
c000d8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8e6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d8e9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d8ed:	83 f8 03             	cmp    eax,0x3
c000d8f0:	75 1e                	jne    c000d910 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d8f2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d8f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000d8f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d8fc:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d902:	83 ec 08             	sub    esp,0x8
c000d905:	6a 02                	push   0x2
c000d907:	50                   	push   eax
c000d908:	e8 b6 40 00 00       	call   c00119c3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d90d:	83 c4 10             	add    esp,0x10
c000d910:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d914:	83 f8 1c             	cmp    eax,0x1c
c000d917:	75 1e                	jne    c000d937 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d919:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d91e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d920:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d923:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d929:	83 ec 08             	sub    esp,0x8
c000d92c:	6a 09                	push   0x9
c000d92e:	50                   	push   eax
c000d92f:	e8 8f 40 00 00       	call   c00119c3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d934:	83 c4 10             	add    esp,0x10
c000d937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d93a:	05 02 01 00 00       	add    eax,0x102
c000d93f:	83 ec 0c             	sub    esp,0xc
c000d942:	50                   	push   eax
c000d943:	e8 38 2c ff ff       	call   c0000580 <strlen>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d94e:	81 c2 02 01 00 00    	add    edx,0x102
c000d954:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d957:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d95a:	81 c2 02 01 00 00    	add    edx,0x102
c000d960:	83 ec 04             	sub    esp,0x4
c000d963:	50                   	push   eax
c000d964:	51                   	push   ecx
c000d965:	52                   	push   edx
c000d966:	e8 65 2a ff ff       	call   c00003d0 <memmove>
c000d96b:	83 c4 10             	add    esp,0x10
c000d96e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d972:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d976:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d97a:	83 f8 0a             	cmp    eax,0xa
c000d97d:	74 16                	je     c000d995 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d97f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d983:	83 f8 03             	cmp    eax,0x3
c000d986:	74 0d                	je     c000d995 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d988:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d98c:	83 f8 1c             	cmp    eax,0x1c
c000d98f:	0f 85 ee fe ff ff    	jne    c000d883 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d995:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d998:	eb 03                	jmp    c000d99d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d99a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d99d:	c9                   	leave  
c000d99e:	c3                   	ret    
c000d99f:	90                   	nop

c000d9a0 <Keyboard::Keyboard(char const*)>:
c000d9a0:	83 ec 0c             	sub    esp,0xc
c000d9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a7:	83 ec 08             	sub    esp,0x8
c000d9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ae:	50                   	push   eax
c000d9af:	e8 44 f1 ff ff       	call   c000caf8 <Device::Device(char const*)>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	ba 3c 1c 02 c0       	mov    edx,0xc0021c3c
c000d9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c0:	89 10                	mov    DWORD PTR [eax],edx
c000d9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d9d0:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000d9d7:	90                   	nop
c000d9d8:	83 c4 0c             	add    esp,0xc
c000d9db:	c3                   	ret    

c000d9dc <Keyboard::~Keyboard()>:
c000d9dc:	83 ec 0c             	sub    esp,0xc
c000d9df:	ba 3c 1c 02 c0       	mov    edx,0xc0021c3c
c000d9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e8:	89 10                	mov    DWORD PTR [eax],edx
c000d9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ee:	83 ec 0c             	sub    esp,0xc
c000d9f1:	50                   	push   eax
c000d9f2:	e8 6b ee ff ff       	call   c000c862 <Device::~Device()>
c000d9f7:	83 c4 10             	add    esp,0x10
c000d9fa:	90                   	nop
c000d9fb:	83 c4 0c             	add    esp,0xc
c000d9fe:	c3                   	ret    
c000d9ff:	90                   	nop

c000da00 <Keyboard::~Keyboard()>:
c000da00:	83 ec 0c             	sub    esp,0xc
c000da03:	83 ec 0c             	sub    esp,0xc
c000da06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0a:	e8 cd ff ff ff       	call   c000d9dc <Keyboard::~Keyboard()>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	83 ec 08             	sub    esp,0x8
c000da15:	68 5c 01 00 00       	push   0x15c
c000da1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1e:	e8 e9 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	83 c4 0c             	add    esp,0xc
c000da29:	c3                   	ret    

c000da2a <LogicalDisk::close(int, int, void*)>:
c000da2a:	83 c8 ff             	or     eax,0xffffffff
c000da2d:	c3                   	ret    

c000da2e <LogicalDisk::~LogicalDisk()>:
c000da2e:	83 ec 0c             	sub    esp,0xc
c000da31:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000da36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3a:	89 10                	mov    DWORD PTR [eax],edx
c000da3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	50                   	push   eax
c000da44:	e8 19 ee ff ff       	call   c000c862 <Device::~Device()>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	90                   	nop
c000da4d:	83 c4 0c             	add    esp,0xc
c000da50:	c3                   	ret    
c000da51:	90                   	nop

c000da52 <LogicalDisk::~LogicalDisk()>:
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	83 ec 0c             	sub    esp,0xc
c000da58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5c:	e8 cd ff ff ff       	call   c000da2e <LogicalDisk::~LogicalDisk()>
c000da61:	83 c4 10             	add    esp,0x10
c000da64:	83 ec 08             	sub    esp,0x8
c000da67:	68 78 01 00 00       	push   0x178
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 97 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	83 c4 0c             	add    esp,0xc
c000da7b:	c3                   	ret    

c000da7c <LogicalDisk::open(int, int, void*)>:
c000da7c:	83 ec 18             	sub    esp,0x18
c000da7f:	68 68 1c 02 c0       	push   0xc0021c68
c000da84:	e8 9e 3a 00 00       	call   c0011527 <KePanic(char const*)>
c000da89:	83 c8 ff             	or     eax,0xffffffff
c000da8c:	83 c4 1c             	add    esp,0x1c
c000da8f:	c3                   	ret    

c000da90 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000da90:	53                   	push   ebx
c000da91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da9d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000daa3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000daa9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000daaf:	77 10                	ja     c000dac1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000dab1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000dab7:	89 d3                	mov    ebx,edx
c000dab9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dabf:	72 05                	jb     c000dac6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dac1:	83 c8 ff             	or     eax,0xffffffff
c000dac4:	89 c2                	mov    edx,eax
c000dac6:	5b                   	pop    ebx
c000dac7:	c3                   	ret    

c000dac8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dac8:	56                   	push   esi
c000dac9:	83 c8 ff             	or     eax,0xffffffff
c000dacc:	53                   	push   ebx
c000dacd:	89 c2                	mov    edx,eax
c000dacf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dad3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dad7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dadb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dae1:	77 27                	ja     c000db0a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dae3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dae9:	89 d8                	mov    eax,ebx
c000daeb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000daf1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000daf6:	89 c2                	mov    edx,eax
c000daf8:	73 10                	jae    c000db0a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dafa:	89 c8                	mov    eax,ecx
c000dafc:	89 da                	mov    edx,ebx
c000dafe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db04:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db0a:	5b                   	pop    ebx
c000db0b:	5e                   	pop    esi
c000db0c:	c3                   	ret    
c000db0d:	90                   	nop

c000db0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db0e:	83 ec 1c             	sub    esp,0x1c
c000db11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db25:	89 04 24             	mov    DWORD PTR [esp],eax
c000db28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db34:	83 ec 08             	sub    esp,0x8
c000db37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db3b:	50                   	push   eax
c000db3c:	e8 b7 ef ff ff       	call   c000caf8 <Device::Device(char const*)>
c000db41:	83 c4 10             	add    esp,0x10
c000db44:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000db49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4d:	89 10                	mov    DWORD PTR [eax],edx
c000db4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db53:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db5e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000db65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db69:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db74:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000db7e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db8a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000db90:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000db96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db9a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000db9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dba1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dba7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dbb5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dbbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbf:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dbc9:	90                   	nop
c000dbca:	83 c4 1c             	add    esp,0x1c
c000dbcd:	c3                   	ret    

c000dbce <LogicalDisk::assignDriveLetter()>:
c000dbce:	55                   	push   ebp
c000dbcf:	57                   	push   edi
c000dbd0:	56                   	push   esi
c000dbd1:	53                   	push   ebx
c000dbd2:	83 ec 14             	sub    esp,0x14
c000dbd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbd9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dbdf:	b0 41                	mov    al,0x41
c000dbe1:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dbe7:	84 d2                	test   dl,dl
c000dbe9:	75 02                	jne    c000dbed <LogicalDisk::assignDriveLetter()+0x1f>
c000dbeb:	b0 43                	mov    al,0x43
c000dbed:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dbf3:	0f b6 ca             	movzx  ecx,dl
c000dbf6:	0f be e8             	movsx  ebp,al
c000dbf9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dbfd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc01:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc0b:	3c 43                	cmp    al,0x43
c000dc0d:	75 10                	jne    c000dc1f <LogicalDisk::assignDriveLetter()+0x51>
c000dc0f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc16:	75 5a                	jne    c000dc72 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc1d:	75 53                	jne    c000dc72 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc1f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc22:	ba 01 00 00 00       	mov    edx,0x1
c000dc27:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc2a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc2d:	d3 e2                	shl    edx,cl
c000dc2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc33:	89 d7                	mov    edi,edx
c000dc35:	89 d6                	mov    esi,edx
c000dc37:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc3b:	c1 ff 1f             	sar    edi,0x1f
c000dc3e:	21 f9                	and    ecx,edi
c000dc40:	09 d1                	or     ecx,edx
c000dc42:	75 2e                	jne    c000dc72 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc48:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc4c:	09 f2                	or     edx,esi
c000dc4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc51:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dc57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc5b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dc61:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dc68:	09 fa                	or     edx,edi
c000dc6a:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dc70:	eb 0d                	jmp    c000dc7f <LogicalDisk::assignDriveLetter()+0xb1>
c000dc72:	8d 50 01             	lea    edx,[eax+0x1]
c000dc75:	45                   	inc    ebp
c000dc76:	80 fa 5b             	cmp    dl,0x5b
c000dc79:	88 d0                	mov    al,dl
c000dc7b:	75 8e                	jne    c000dc0b <LogicalDisk::assignDriveLetter()+0x3d>
c000dc7d:	31 c0                	xor    eax,eax
c000dc7f:	83 c4 14             	add    esp,0x14
c000dc82:	5b                   	pop    ebx
c000dc83:	5e                   	pop    esi
c000dc84:	5f                   	pop    edi
c000dc85:	5d                   	pop    ebp
c000dc86:	c3                   	ret    
c000dc87:	90                   	nop

c000dc88 <LogicalDisk::mount()>:
c000dc88:	56                   	push   esi
c000dc89:	53                   	push   ebx
c000dc8a:	53                   	push   ebx
c000dc8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc8f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dc95:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dc9f:	85 db                	test   ebx,ebx
c000dca1:	74 27                	je     c000dcca <LogicalDisk::mount()+0x42>
c000dca3:	51                   	push   ecx
c000dca4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dcab:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dcad:	83 e8 41             	sub    eax,0x41
c000dcb0:	50                   	push   eax
c000dcb1:	56                   	push   esi
c000dcb2:	53                   	push   ebx
c000dcb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dcb6:	83 c4 10             	add    esp,0x10
c000dcb9:	84 c0                	test   al,al
c000dcbb:	74 08                	je     c000dcc5 <LogicalDisk::mount()+0x3d>
c000dcbd:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dcc3:	eb 07                	jmp    c000dccc <LogicalDisk::mount()+0x44>
c000dcc5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dcc8:	eb d5                	jmp    c000dc9f <LogicalDisk::mount()+0x17>
c000dcca:	31 c0                	xor    eax,eax
c000dccc:	5a                   	pop    edx
c000dccd:	5b                   	pop    ebx
c000dcce:	5e                   	pop    esi
c000dccf:	c3                   	ret    

c000dcd0 <LogicalDisk::unmount()>:
c000dcd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcde:	c3                   	ret    
c000dcdf:	90                   	nop

c000dce0 <LogicalDisk::eject()>:
c000dce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dce4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dcea:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcf0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dcf3:	90                   	nop

c000dcf4 <LogicalDisk::unassignDriveLetter()>:
c000dcf4:	57                   	push   edi
c000dcf5:	56                   	push   esi
c000dcf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dcfa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd01:	85 c9                	test   ecx,ecx
c000dd03:	75 0f                	jne    c000dd14 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd05:	c7 44 24 0c 8c 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c8c
c000dd0d:	5e                   	pop    esi
c000dd0e:	5f                   	pop    edi
c000dd0f:	e9 13 38 00 00       	jmp    c0011527 <KePanic(char const*)>
c000dd14:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd1b:	83 e9 41             	sub    ecx,0x41
c000dd1e:	b8 01 00 00 00       	mov    eax,0x1
c000dd23:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd2e:	d3 e0                	shl    eax,cl
c000dd30:	89 c7                	mov    edi,eax
c000dd32:	f7 d0                	not    eax
c000dd34:	c1 ff 1f             	sar    edi,0x1f
c000dd37:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd3d:	89 fe                	mov    esi,edi
c000dd3f:	f7 d6                	not    esi
c000dd41:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd47:	5e                   	pop    esi
c000dd48:	5f                   	pop    edi
c000dd49:	c3                   	ret    

c000dd4a <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd4a:	57                   	push   edi
c000dd4b:	56                   	push   esi
c000dd4c:	53                   	push   ebx
c000dd4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dd63:	77 41                	ja     c000dda6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dd65:	99                   	cdq    
c000dd66:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dd6c:	01 c8                	add    eax,ecx
c000dd6e:	11 da                	adc    edx,ebx
c000dd70:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dd76:	19 d7                	sbb    edi,edx
c000dd78:	72 33                	jb     c000ddad <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dd7a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dd80:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dd86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dd8a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dd8e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dd94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dd9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd9e:	5b                   	pop    ebx
c000dd9f:	5e                   	pop    esi
c000dda0:	5f                   	pop    edi
c000dda1:	e9 d4 0a 00 00       	jmp    c000e87a <VCache::read(unsigned long long, int, void*)>
c000dda6:	b8 05 00 00 00       	mov    eax,0x5
c000ddab:	eb 05                	jmp    c000ddb2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ddad:	b8 07 00 00 00       	mov    eax,0x7
c000ddb2:	5b                   	pop    ebx
c000ddb3:	5e                   	pop    esi
c000ddb4:	5f                   	pop    edi
c000ddb5:	c3                   	ret    

c000ddb6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ddb6:	57                   	push   edi
c000ddb7:	56                   	push   esi
c000ddb8:	53                   	push   ebx
c000ddb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddc1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddc9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddcf:	77 41                	ja     c000de12 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ddd1:	99                   	cdq    
c000ddd2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddd8:	01 c8                	add    eax,ecx
c000ddda:	11 da                	adc    edx,ebx
c000dddc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dde2:	19 d7                	sbb    edi,edx
c000dde4:	72 33                	jb     c000de19 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dde6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddf2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddf6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddfa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de00:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de0a:	5b                   	pop    ebx
c000de0b:	5e                   	pop    esi
c000de0c:	5f                   	pop    edi
c000de0d:	e9 6e 09 00 00       	jmp    c000e780 <VCache::write(unsigned long long, int, void*)>
c000de12:	b8 05 00 00 00       	mov    eax,0x5
c000de17:	eb 05                	jmp    c000de1e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de19:	b8 07 00 00 00       	mov    eax,0x7
c000de1e:	5b                   	pop    ebx
c000de1f:	5e                   	pop    esi
c000de20:	5f                   	pop    edi
c000de21:	c3                   	ret    
c000de22:	66 90                	xchg   ax,ax

c000de24 <Mouse::Mouse(char const*)>:
c000de24:	83 ec 0c             	sub    esp,0xc
c000de27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de2b:	83 ec 08             	sub    esp,0x8
c000de2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de32:	50                   	push   eax
c000de33:	e8 c0 ec ff ff       	call   c000caf8 <Device::Device(char const*)>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c000de40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de44:	89 10                	mov    DWORD PTR [eax],edx
c000de46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000de54:	90                   	nop
c000de55:	83 c4 0c             	add    esp,0xc
c000de58:	c3                   	ret    
c000de59:	90                   	nop
c000de5a:	66 90                	xchg   ax,ax

c000de5c <Mouse::~Mouse()>:
c000de5c:	83 ec 0c             	sub    esp,0xc
c000de5f:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c000de64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de68:	89 10                	mov    DWORD PTR [eax],edx
c000de6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6e:	83 ec 0c             	sub    esp,0xc
c000de71:	50                   	push   eax
c000de72:	e8 eb e9 ff ff       	call   c000c862 <Device::~Device()>
c000de77:	83 c4 10             	add    esp,0x10
c000de7a:	90                   	nop
c000de7b:	83 c4 0c             	add    esp,0xc
c000de7e:	c3                   	ret    
c000de7f:	90                   	nop

c000de80 <Mouse::~Mouse()>:
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	83 ec 0c             	sub    esp,0xc
c000de86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8a:	e8 cd ff ff ff       	call   c000de5c <Mouse::~Mouse()>
c000de8f:	83 c4 10             	add    esp,0x10
c000de92:	83 ec 08             	sub    esp,0x8
c000de95:	68 58 01 00 00       	push   0x158
c000de9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9e:	e8 69 c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	83 c4 0c             	add    esp,0xc
c000dea9:	c3                   	ret    

c000deaa <NIC::getMAC()>:
c000deaa:	31 c0                	xor    eax,eax
c000deac:	31 d2                	xor    edx,edx
c000deae:	c3                   	ret    
c000deaf:	90                   	nop

c000deb0 <NIC::write(int, unsigned char*, int*)>:
c000deb0:	b8 01 00 00 00       	mov    eax,0x1
c000deb5:	c3                   	ret    

c000deb6 <NIC::NIC(char const*)>:
c000deb6:	83 ec 0c             	sub    esp,0xc
c000deb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000debd:	83 ec 08             	sub    esp,0x8
c000dec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec4:	50                   	push   eax
c000dec5:	e8 2e ec ff ff       	call   c000caf8 <Device::Device(char const*)>
c000deca:	83 c4 10             	add    esp,0x10
c000decd:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000ded2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded6:	89 10                	mov    DWORD PTR [eax],edx
c000ded8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dee6:	90                   	nop
c000dee7:	83 c4 0c             	add    esp,0xc
c000deea:	c3                   	ret    
c000deeb:	90                   	nop

c000deec <NIC::~NIC()>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000def4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def8:	89 10                	mov    DWORD PTR [eax],edx
c000defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defe:	83 ec 0c             	sub    esp,0xc
c000df01:	50                   	push   eax
c000df02:	e8 5b e9 ff ff       	call   c000c862 <Device::~Device()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	90                   	nop
c000df0b:	83 c4 0c             	add    esp,0xc
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <NIC::~NIC()>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	83 ec 0c             	sub    esp,0xc
c000df16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1a:	e8 cd ff ff ff       	call   c000deec <NIC::~NIC()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	83 ec 08             	sub    esp,0x8
c000df25:	68 58 01 00 00       	push   0x158
c000df2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2e:	e8 d9 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	83 c4 0c             	add    esp,0xc
c000df39:	c3                   	ret    

c000df3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df3a:	55                   	push   ebp
c000df3b:	57                   	push   edi
c000df3c:	56                   	push   esi
c000df3d:	53                   	push   ebx
c000df3e:	81 ec 28 01 00 00    	sub    esp,0x128
c000df44:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000df4b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000df52:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000df59:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000df60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000df6f:	e8 80 ec ff ff       	call   c000cbf4 <Device::getName()>
c000df74:	5a                   	pop    edx
c000df75:	59                   	pop    ecx
c000df76:	50                   	push   eax
c000df77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000df7b:	55                   	push   ebp
c000df7c:	e8 cf 26 ff ff       	call   c0000650 <strcpy>
c000df81:	5b                   	pop    ebx
c000df82:	58                   	pop    eax
c000df83:	68 38 1d 02 c0       	push   0xc0021d38
c000df88:	55                   	push   ebp
c000df89:	e8 e2 28 ff ff       	call   c0000870 <strcat>
c000df8e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000df95:	e8 39 9b ff ff       	call   c0007ad3 <malloc>
c000df9a:	83 c4 0c             	add    esp,0xc
c000df9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfa1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfa5:	89 c3                	mov    ebx,eax
c000dfa7:	57                   	push   edi
c000dfa8:	56                   	push   esi
c000dfa9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dfb0:	55                   	push   ebp
c000dfb1:	50                   	push   eax
c000dfb2:	e8 57 fb ff ff       	call   c000db0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dfb7:	83 c4 14             	add    esp,0x14
c000dfba:	53                   	push   ebx
c000dfbb:	e8 0e fc ff ff       	call   c000dbce <LogicalDisk::assignDriveLetter()>
c000dfc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dfc3:	e8 c0 fc ff ff       	call   c000dc88 <LogicalDisk::mount()>
c000dfc8:	58                   	pop    eax
c000dfc9:	5a                   	pop    edx
c000dfca:	53                   	push   ebx
c000dfcb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfd2:	e8 89 e9 ff ff       	call   c000c960 <Device::addChild(Device*)>
c000dfd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dfdd:	5b                   	pop    ebx
c000dfde:	5e                   	pop    esi
c000dfdf:	5f                   	pop    edi
c000dfe0:	5d                   	pop    ebp
c000dfe1:	c3                   	ret    

c000dfe2 <createPartitionsForDisk(PhysicalDisk*)>:
c000dfe2:	55                   	push   ebp
c000dfe3:	57                   	push   edi
c000dfe4:	56                   	push   esi
c000dfe5:	53                   	push   ebx
c000dfe6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dfec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dff3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dff9:	3d 00 02 00 00       	cmp    eax,0x200
c000dffe:	74 27                	je     c000e027 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e000:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e006:	83 ec 10             	sub    esp,0x10
c000e009:	99                   	cdq    
c000e00a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e010:	52                   	push   edx
c000e011:	50                   	push   eax
c000e012:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e016:	c1 e6 0a             	shl    esi,0xa
c000e019:	89 fd                	mov    ebp,edi
c000e01b:	55                   	push   ebp
c000e01c:	56                   	push   esi
c000e01d:	e8 ae 16 01 00       	call   c001f6d0 <__udivdi3>
c000e022:	e9 b9 00 00 00       	jmp    c000e0e0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e02c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e030:	56                   	push   esi
c000e031:	6a 01                	push   0x1
c000e033:	6a 00                	push   0x0
c000e035:	6a 00                	push   0x0
c000e037:	53                   	push   ebx
c000e038:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e03b:	83 c4 20             	add    esp,0x20
c000e03e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e046:	75 0a                	jne    c000e052 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e048:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e050:	74 2c                	je     c000e07e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e052:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e058:	83 ec 10             	sub    esp,0x10
c000e05b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e061:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e067:	89 f7                	mov    edi,esi
c000e069:	c1 ff 1f             	sar    edi,0x1f
c000e06c:	57                   	push   edi
c000e06d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e071:	56                   	push   esi
c000e072:	c1 e0 0a             	shl    eax,0xa
c000e075:	52                   	push   edx
c000e076:	50                   	push   eax
c000e077:	e8 54 16 01 00       	call   c001f6d0 <__udivdi3>
c000e07c:	eb 62                	jmp    c000e0e0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e07e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e085:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e08c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e093:	89 cf                	mov    edi,ecx
c000e095:	83 e2 7f             	and    edx,0x7f
c000e098:	83 e7 7f             	and    edi,0x7f
c000e09b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e09e:	83 e0 7f             	and    eax,0x7f
c000e0a1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e0a4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e0ab:	83 e0 7f             	and    eax,0x7f
c000e0ae:	01 d0                	add    eax,edx
c000e0b0:	84 c0                	test   al,al
c000e0b2:	89 c5                	mov    ebp,eax
c000e0b4:	74 41                	je     c000e0f7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e0b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0bc:	83 ec 10             	sub    esp,0x10
c000e0bf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0c5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0cb:	89 f7                	mov    edi,esi
c000e0cd:	c1 ff 1f             	sar    edi,0x1f
c000e0d0:	57                   	push   edi
c000e0d1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0d5:	56                   	push   esi
c000e0d6:	c1 e0 0a             	shl    eax,0xa
c000e0d9:	52                   	push   edx
c000e0da:	50                   	push   eax
c000e0db:	e8 f0 15 01 00       	call   c001f6d0 <__udivdi3>
c000e0e0:	83 c4 14             	add    esp,0x14
c000e0e3:	52                   	push   edx
c000e0e4:	50                   	push   eax
c000e0e5:	6a 00                	push   0x0
c000e0e7:	6a 00                	push   0x0
c000e0e9:	53                   	push   ebx
c000e0ea:	e8 4b fe ff ff       	call   c000df3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e0ef:	83 c4 20             	add    esp,0x20
c000e0f2:	e9 73 01 00 00       	jmp    c000e26a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e0f7:	89 f0                	mov    eax,esi
c000e0f9:	31 c9                	xor    ecx,ecx
c000e0fb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e102:	75 02                	jne    c000e106 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e104:	89 cd                	mov    ebp,ecx
c000e106:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e10e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e115:	83 c0 10             	add    eax,0x10
c000e118:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e120:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e127:	c1 e2 08             	shl    edx,0x8
c000e12a:	c1 e6 10             	shl    esi,0x10
c000e12d:	09 f2                	or     edx,esi
c000e12f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e136:	09 f2                	or     edx,esi
c000e138:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e13f:	c1 e6 18             	shl    esi,0x18
c000e142:	09 f2                	or     edx,esi
c000e144:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e14b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e14f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e156:	c1 e6 10             	shl    esi,0x10
c000e159:	c1 e2 08             	shl    edx,0x8
c000e15c:	09 f2                	or     edx,esi
c000e15e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e165:	09 f2                	or     edx,esi
c000e167:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e16e:	c1 e6 18             	shl    esi,0x18
c000e171:	09 f2                	or     edx,esi
c000e173:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e177:	41                   	inc    ecx
c000e178:	83 f9 04             	cmp    ecx,0x4
c000e17b:	0f 85 7a ff ff ff    	jne    c000e0fb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e185:	83 f0 01             	xor    eax,0x1
c000e188:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e18c:	75 4f                	jne    c000e1dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e18e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e192:	83 f0 01             	xor    eax,0x1
c000e195:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e199:	75 42                	jne    c000e1dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e19b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1a9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1af:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1b7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1bd:	89 f7                	mov    edi,esi
c000e1bf:	c1 ff 1f             	sar    edi,0x1f
c000e1c2:	57                   	push   edi
c000e1c3:	56                   	push   esi
c000e1c4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1c8:	52                   	push   edx
c000e1c9:	c1 e0 0a             	shl    eax,0xa
c000e1cc:	50                   	push   eax
c000e1cd:	e8 fe 14 01 00       	call   c001f6d0 <__udivdi3>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e1dd:	89 e8                	mov    eax,ebp
c000e1df:	0f b6 e8             	movzx  ebp,al
c000e1e2:	85 ed                	test   ebp,ebp
c000e1e4:	74 50                	je     c000e236 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e1e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e1ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e1f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1fa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e1fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e202:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e20a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e20e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e212:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e216:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e21a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e21e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e222:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e226:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e22a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e22e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e232:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e236:	31 ed                	xor    ebp,ebp
c000e238:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e23c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e240:	89 f8                	mov    eax,edi
c000e242:	09 f0                	or     eax,esi
c000e244:	74 1e                	je     c000e264 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e246:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e24a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e24e:	89 d1                	mov    ecx,edx
c000e250:	09 c1                	or     ecx,eax
c000e252:	74 10                	je     c000e264 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e254:	83 ec 0c             	sub    esp,0xc
c000e257:	57                   	push   edi
c000e258:	56                   	push   esi
c000e259:	52                   	push   edx
c000e25a:	50                   	push   eax
c000e25b:	53                   	push   ebx
c000e25c:	e8 d9 fc ff ff       	call   c000df3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e261:	83 c4 20             	add    esp,0x20
c000e264:	45                   	inc    ebp
c000e265:	83 fd 04             	cmp    ebp,0x4
c000e268:	75 ce                	jne    c000e238 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e26a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e270:	5b                   	pop    ebx
c000e271:	5e                   	pop    esi
c000e272:	5f                   	pop    edi
c000e273:	5d                   	pop    ebp
c000e274:	c3                   	ret    
c000e275:	66 90                	xchg   ax,ax
c000e277:	90                   	nop

c000e278 <Serial::Serial(char const*)>:
c000e278:	83 ec 0c             	sub    esp,0xc
c000e27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27f:	83 ec 08             	sub    esp,0x8
c000e282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e286:	50                   	push   eax
c000e287:	e8 6c e8 ff ff       	call   c000caf8 <Device::Device(char const*)>
c000e28c:	83 c4 10             	add    esp,0x10
c000e28f:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000e294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e298:	89 10                	mov    DWORD PTR [eax],edx
c000e29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e29e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e2a8:	90                   	nop
c000e2a9:	83 c4 0c             	add    esp,0xc
c000e2ac:	c3                   	ret    
c000e2ad:	90                   	nop
c000e2ae:	66 90                	xchg   ax,ax

c000e2b0 <Serial::~Serial()>:
c000e2b0:	83 ec 0c             	sub    esp,0xc
c000e2b3:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000e2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2bc:	89 10                	mov    DWORD PTR [eax],edx
c000e2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c2:	83 ec 0c             	sub    esp,0xc
c000e2c5:	50                   	push   eax
c000e2c6:	e8 97 e5 ff ff       	call   c000c862 <Device::~Device()>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	90                   	nop
c000e2cf:	83 c4 0c             	add    esp,0xc
c000e2d2:	c3                   	ret    
c000e2d3:	90                   	nop

c000e2d4 <Serial::~Serial()>:
c000e2d4:	83 ec 0c             	sub    esp,0xc
c000e2d7:	83 ec 0c             	sub    esp,0xc
c000e2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2de:	e8 cd ff ff ff       	call   c000e2b0 <Serial::~Serial()>
c000e2e3:	83 c4 10             	add    esp,0x10
c000e2e6:	83 ec 08             	sub    esp,0x8
c000e2e9:	68 58 01 00 00       	push   0x158
c000e2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f2:	e8 15 c5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	83 c4 0c             	add    esp,0xc
c000e2fd:	c3                   	ret    
c000e2fe:	66 90                	xchg   ax,ax

c000e300 <Timer::Timer(char const*)>:
c000e300:	83 ec 0c             	sub    esp,0xc
c000e303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e307:	83 ec 08             	sub    esp,0x8
c000e30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e30e:	50                   	push   eax
c000e30f:	e8 e4 e7 ff ff       	call   c000caf8 <Device::Device(char const*)>
c000e314:	83 c4 10             	add    esp,0x10
c000e317:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c000e31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e320:	89 10                	mov    DWORD PTR [eax],edx
c000e322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e326:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e330:	90                   	nop
c000e331:	83 c4 0c             	add    esp,0xc
c000e334:	c3                   	ret    
c000e335:	90                   	nop
c000e336:	66 90                	xchg   ax,ax

c000e338 <Timer::~Timer()>:
c000e338:	83 ec 0c             	sub    esp,0xc
c000e33b:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c000e340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e344:	89 10                	mov    DWORD PTR [eax],edx
c000e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34a:	83 ec 0c             	sub    esp,0xc
c000e34d:	50                   	push   eax
c000e34e:	e8 0f e5 ff ff       	call   c000c862 <Device::~Device()>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	90                   	nop
c000e357:	83 c4 0c             	add    esp,0xc
c000e35a:	c3                   	ret    
c000e35b:	90                   	nop

c000e35c <Timer::~Timer()>:
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	83 ec 0c             	sub    esp,0xc
c000e362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e366:	e8 cd ff ff ff       	call   c000e338 <Timer::~Timer()>
c000e36b:	83 c4 10             	add    esp,0x10
c000e36e:	83 ec 08             	sub    esp,0x8
c000e371:	68 5c 01 00 00       	push   0x15c
c000e376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e37a:	e8 8d c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	83 c4 0c             	add    esp,0xc
c000e385:	c3                   	ret    

c000e386 <Timer::read()>:
c000e386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e38a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e390:	c3                   	ret    

c000e391 <setupTimer(int)>:
c000e391:	53                   	push   ebx
c000e392:	83 ec 14             	sub    esp,0x14
c000e395:	68 5c 01 00 00       	push   0x15c
c000e39a:	e8 34 97 ff ff       	call   c0007ad3 <malloc>
c000e39f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3a2:	89 c3                	mov    ebx,eax
c000e3a4:	e8 8b 0b 01 00       	call   c001ef34 <PIT::PIT()>
c000e3a9:	58                   	pop    eax
c000e3aa:	5a                   	pop    edx
c000e3ab:	53                   	push   ebx
c000e3ac:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e3b2:	e8 a9 e5 ff ff       	call   c000c960 <Device::addChild(Device*)>
c000e3b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3b9:	6a 00                	push   0x0
c000e3bb:	6a 00                	push   0x0
c000e3bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3c1:	53                   	push   ebx
c000e3c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3c5:	83 c4 28             	add    esp,0x28
c000e3c8:	89 d8                	mov    eax,ebx
c000e3ca:	5b                   	pop    ebx
c000e3cb:	c3                   	ret    

c000e3cc <timerHandler(unsigned int)>:
c000e3cc:	56                   	push   esi
c000e3cd:	53                   	push   ebx
c000e3ce:	51                   	push   ecx
c000e3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d3:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e3d9:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e3e0:	0f 84 4a 01 00 00    	je     c000e530 <timerHandler(unsigned int)+0x164>
c000e3e6:	fa                   	cli    
c000e3e7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e3ed:	83 ec 0c             	sub    esp,0xc
c000e3f0:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e3f5:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e3fb:	e8 a0 18 01 00       	call   c001fca0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e400:	83 c4 10             	add    esp,0x10
c000e403:	84 c0                	test   al,al
c000e405:	0f 85 a1 00 00 00    	jne    c000e4ac <timerHandler(unsigned int)+0xe0>
c000e40b:	83 ec 0c             	sub    esp,0xc
c000e40e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e413:	e8 a4 18 01 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e418:	83 c4 10             	add    esp,0x10
c000e41b:	89 c6                	mov    esi,eax
c000e41d:	8d 76 00             	lea    esi,[esi+0x0]
c000e420:	83 ec 0c             	sub    esp,0xc
c000e423:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e428:	e8 8f 18 01 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e42d:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e434:	89 c3                	mov    ebx,eax
c000e436:	e8 89 18 01 00       	call   c001fcc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e43b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e43e:	83 c4 10             	add    esp,0x10
c000e441:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e447:	77 23                	ja     c000e46c <timerHandler(unsigned int)+0xa0>
c000e449:	83 ec 0c             	sub    esp,0xc
c000e44c:	53                   	push   ebx
c000e44d:	e8 b6 80 00 00       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c000e452:	83 c4 10             	add    esp,0x10
c000e455:	39 de                	cmp    esi,ebx
c000e457:	75 27                	jne    c000e480 <timerHandler(unsigned int)+0xb4>
c000e459:	83 ec 0c             	sub    esp,0xc
c000e45c:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e461:	e8 56 18 01 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e466:	89 c6                	mov    esi,eax
c000e468:	eb 12                	jmp    c000e47c <timerHandler(unsigned int)+0xb0>
c000e46a:	66 90                	xchg   ax,ax
c000e46c:	52                   	push   edx
c000e46d:	52                   	push   edx
c000e46e:	53                   	push   ebx
c000e46f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e474:	e8 07 19 01 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e479:	8d 76 00             	lea    esi,[esi+0x0]
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	90                   	nop
c000e480:	83 ec 0c             	sub    esp,0xc
c000e483:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e488:	e8 13 18 01 00       	call   c001fca0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	84 c0                	test   al,al
c000e492:	75 18                	jne    c000e4ac <timerHandler(unsigned int)+0xe0>
c000e494:	83 ec 0c             	sub    esp,0xc
c000e497:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e49c:	e8 1b 18 01 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4a1:	83 c4 10             	add    esp,0x10
c000e4a4:	39 f0                	cmp    eax,esi
c000e4a6:	0f 85 74 ff ff ff    	jne    c000e420 <timerHandler(unsigned int)+0x54>
c000e4ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4b1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e4b5:	74 41                	je     c000e4f8 <timerHandler(unsigned int)+0x12c>
c000e4b7:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e4be:	74 38                	je     c000e4f8 <timerHandler(unsigned int)+0x12c>
c000e4c0:	fa                   	cli    
c000e4c1:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4c7:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e4cc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4d2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e4d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4db:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e4de:	72 08                	jb     c000e4e8 <timerHandler(unsigned int)+0x11c>
c000e4e0:	e8 2b 7b 00 00       	call   c0016010 <schedule()>
c000e4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e4ed:	48                   	dec    eax
c000e4ee:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e4f3:	75 03                	jne    c000e4f8 <timerHandler(unsigned int)+0x12c>
c000e4f5:	fb                   	sti    
c000e4f6:	66 90                	xchg   ax,ax
c000e4f8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e4fd:	48                   	dec    eax
c000e4fe:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e503:	75 1b                	jne    c000e520 <timerHandler(unsigned int)+0x154>
c000e505:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e50c:	74 12                	je     c000e520 <timerHandler(unsigned int)+0x154>
c000e50e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e518:	e8 f3 7a 00 00       	call   c0016010 <schedule()>
c000e51d:	8d 76 00             	lea    esi,[esi+0x0]
c000e520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e525:	48                   	dec    eax
c000e526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e52b:	75 03                	jne    c000e530 <timerHandler(unsigned int)+0x164>
c000e52d:	fb                   	sti    
c000e52e:	66 90                	xchg   ax,ax
c000e530:	58                   	pop    eax
c000e531:	5b                   	pop    ebx
c000e532:	5e                   	pop    esi
c000e533:	c3                   	ret    

c000e534 <VCache::VCache(PhysicalDisk*)>:
c000e534:	53                   	push   ebx
c000e535:	83 ec 18             	sub    esp,0x18
c000e538:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c000e53d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e541:	89 10                	mov    DWORD PTR [eax],edx
c000e543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e547:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e54e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e552:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e55d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e564:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e56b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e56f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e576:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e57d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e581:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e58c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e594:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e59b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ae:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5be:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e5c5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e5cd:	83 ec 0c             	sub    esp,0xc
c000e5d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5d4:	e8 fa 94 ff ff       	call   c0007ad3 <malloc>
c000e5d9:	83 c4 10             	add    esp,0x10
c000e5dc:	89 c3                	mov    ebx,eax
c000e5de:	83 ec 0c             	sub    esp,0xc
c000e5e1:	53                   	push   ebx
c000e5e2:	e8 c9 77 00 00       	call   c0015db0 <Mutex::Mutex()>
c000e5e7:	83 c4 10             	add    esp,0x10
c000e5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ee:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e5f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e5fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e600:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e607:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e60b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e615:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e618:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e61c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e622:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e628:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e62c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e62f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e636:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e63a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e63e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e644:	05 00 02 00 00       	add    eax,0x200
c000e649:	c1 e0 03             	shl    eax,0x3
c000e64c:	83 ec 0c             	sub    esp,0xc
c000e64f:	50                   	push   eax
c000e650:	e8 7e 94 ff ff       	call   c0007ad3 <malloc>
c000e655:	83 c4 10             	add    esp,0x10
c000e658:	89 c2                	mov    edx,eax
c000e65a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e665:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e670:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e674:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e678:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e67e:	89 d0                	mov    eax,edx
c000e680:	c1 e0 02             	shl    eax,0x2
c000e683:	01 d0                	add    eax,edx
c000e685:	c1 e0 04             	shl    eax,0x4
c000e688:	83 ec 0c             	sub    esp,0xc
c000e68b:	50                   	push   eax
c000e68c:	e8 42 94 ff ff       	call   c0007ad3 <malloc>
c000e691:	83 c4 10             	add    esp,0x10
c000e694:	89 c2                	mov    edx,eax
c000e696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e69d:	90                   	nop
c000e69e:	83 c4 18             	add    esp,0x18
c000e6a1:	5b                   	pop    ebx
c000e6a2:	c3                   	ret    
c000e6a3:	90                   	nop

c000e6a4 <VCache::invalidateReadBuffer()>:
c000e6a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e6ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6b2:	c3                   	ret    
c000e6b3:	90                   	nop

c000e6b4 <VCache::writeWriteBuffer()>:
c000e6b4:	53                   	push   ebx
c000e6b5:	83 ec 08             	sub    esp,0x8
c000e6b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e6c0:	74 1e                	je     c000e6e0 <VCache::writeWriteBuffer()+0x2c>
c000e6c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e6c5:	83 ec 0c             	sub    esp,0xc
c000e6c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e6cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e6d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e6d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e6d6:	50                   	push   eax
c000e6d7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e6da:	83 c4 20             	add    esp,0x20
c000e6dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6e0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e6e7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e6ee:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e6f2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e6f9:	83 c4 08             	add    esp,0x8
c000e6fc:	5b                   	pop    ebx
c000e6fd:	c3                   	ret    
c000e6fe:	66 90                	xchg   ax,ax

c000e700 <VCache::~VCache()>:
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c000e708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70c:	89 10                	mov    DWORD PTR [eax],edx
c000e70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e712:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e715:	0f b6 c0             	movzx  eax,al
c000e718:	85 c0                	test   eax,eax
c000e71a:	74 10                	je     c000e72c <VCache::~VCache()+0x2c>
c000e71c:	83 ec 0c             	sub    esp,0xc
c000e71f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e723:	e8 8c ff ff ff       	call   c000e6b4 <VCache::writeWriteBuffer()>
c000e728:	83 c4 10             	add    esp,0x10
c000e72b:	90                   	nop
c000e72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e730:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e733:	83 ec 0c             	sub    esp,0xc
c000e736:	50                   	push   eax
c000e737:	e8 a7 93 ff ff       	call   c0007ae3 <free>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e743:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e746:	83 ec 0c             	sub    esp,0xc
c000e749:	50                   	push   eax
c000e74a:	e8 94 93 ff ff       	call   c0007ae3 <free>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	90                   	nop
c000e753:	83 c4 0c             	add    esp,0xc
c000e756:	c3                   	ret    
c000e757:	90                   	nop

c000e758 <VCache::~VCache()>:
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	83 ec 0c             	sub    esp,0xc
c000e75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e762:	e8 99 ff ff ff       	call   c000e700 <VCache::~VCache()>
c000e767:	83 c4 10             	add    esp,0x10
c000e76a:	83 ec 08             	sub    esp,0x8
c000e76d:	6a 44                	push   0x44
c000e76f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e773:	e8 94 c0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e778:	83 c4 10             	add    esp,0x10
c000e77b:	83 c4 0c             	add    esp,0xc
c000e77e:	c3                   	ret    
c000e77f:	90                   	nop

c000e780 <VCache::write(unsigned long long, int, void*)>:
c000e780:	55                   	push   ebp
c000e781:	57                   	push   edi
c000e782:	56                   	push   esi
c000e783:	53                   	push   ebx
c000e784:	83 ec 1c             	sub    esp,0x1c
c000e787:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e78b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e78f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e793:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e797:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e79f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7a3:	74 0f                	je     c000e7b4 <VCache::write(unsigned long long, int, void*)+0x34>
c000e7a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e7a9:	53                   	push   ebx
c000e7aa:	e8 f5 fe ff ff       	call   c000e6a4 <VCache::invalidateReadBuffer()>
c000e7af:	58                   	pop    eax
c000e7b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7b8:	74 66                	je     c000e820 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e7ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7c1:	99                   	cdq    
c000e7c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e7c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e7c8:	89 c6                	mov    esi,eax
c000e7ca:	31 ce                	xor    esi,ecx
c000e7cc:	89 d0                	mov    eax,edx
c000e7ce:	31 e8                	xor    eax,ebp
c000e7d0:	09 c6                	or     esi,eax
c000e7d2:	75 38                	jne    c000e80c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e7d4:	83 ff 01             	cmp    edi,0x1
c000e7d7:	75 33                	jne    c000e80c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e7d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e7e0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e7e4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e7ea:	0f af f9             	imul   edi,ecx
c000e7ed:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e7f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7f5:	40                   	inc    eax
c000e7f6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e7f9:	83 f8 50             	cmp    eax,0x50
c000e7fc:	75 72                	jne    c000e870 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e7fe:	83 ec 0c             	sub    esp,0xc
c000e801:	53                   	push   ebx
c000e802:	e8 ad fe ff ff       	call   c000e6b4 <VCache::writeWriteBuffer()>
c000e807:	83 c4 10             	add    esp,0x10
c000e80a:	eb 64                	jmp    c000e870 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e80c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e810:	83 ec 0c             	sub    esp,0xc
c000e813:	53                   	push   ebx
c000e814:	e8 9b fe ff ff       	call   c000e6b4 <VCache::writeWriteBuffer()>
c000e819:	83 c4 10             	add    esp,0x10
c000e81c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e820:	83 ff 4f             	cmp    edi,0x4f
c000e823:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e826:	7f 20                	jg     c000e848 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e828:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e82b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e82f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e832:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e835:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e838:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e83c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e842:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e844:	eb 2a                	jmp    c000e870 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e846:	66 90                	xchg   ax,ax
c000e848:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e84c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e84e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e852:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e856:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e85a:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e85e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e862:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e865:	83 c4 1c             	add    esp,0x1c
c000e868:	5b                   	pop    ebx
c000e869:	5e                   	pop    esi
c000e86a:	5f                   	pop    edi
c000e86b:	5d                   	pop    ebp
c000e86c:	ff e0                	jmp    eax
c000e86e:	66 90                	xchg   ax,ax
c000e870:	83 c4 1c             	add    esp,0x1c
c000e873:	31 c0                	xor    eax,eax
c000e875:	5b                   	pop    ebx
c000e876:	5e                   	pop    esi
c000e877:	5f                   	pop    edi
c000e878:	5d                   	pop    ebp
c000e879:	c3                   	ret    

c000e87a <VCache::read(unsigned long long, int, void*)>:
c000e87a:	55                   	push   ebp
c000e87b:	57                   	push   edi
c000e87c:	56                   	push   esi
c000e87d:	53                   	push   ebx
c000e87e:	83 ec 1c             	sub    esp,0x1c
c000e881:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e885:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e889:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e88d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e891:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e895:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e899:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e89d:	74 0d                	je     c000e8ac <VCache::read(unsigned long long, int, void*)+0x32>
c000e89f:	83 ec 0c             	sub    esp,0xc
c000e8a2:	57                   	push   edi
c000e8a3:	e8 0c fe ff ff       	call   c000e6b4 <VCache::writeWriteBuffer()>
c000e8a8:	83 c4 10             	add    esp,0x10
c000e8ab:	90                   	nop
c000e8ac:	83 fd 01             	cmp    ebp,0x1
c000e8af:	0f 85 93 00 00 00    	jne    c000e948 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8b8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e8bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8c2:	0f 85 80 00 00 00    	jne    c000e948 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8c8:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e8cb:	89 cd                	mov    ebp,ecx
c000e8cd:	f7 dd                	neg    ebp
c000e8cf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e8d3:	89 e8                	mov    eax,ebp
c000e8d5:	21 dd                	and    ebp,ebx
c000e8d7:	c1 f8 1f             	sar    eax,0x1f
c000e8da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8de:	89 e8                	mov    eax,ebp
c000e8e0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e8e4:	21 f5                	and    ebp,esi
c000e8e6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e8ea:	89 ea                	mov    edx,ebp
c000e8ec:	74 2e                	je     c000e91c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8ee:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e8f1:	75 29                	jne    c000e91c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8f3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e8f6:	75 24                	jne    c000e91c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8f8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8fb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e901:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e904:	8d 70 ff             	lea    esi,[eax-0x1]
c000e907:	21 f3                	and    ebx,esi
c000e909:	0f af d9             	imul   ebx,ecx
c000e90c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e90f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e913:	89 de                	mov    esi,ebx
c000e915:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e917:	31 c0                	xor    eax,eax
c000e919:	eb 61                	jmp    c000e97c <VCache::read(unsigned long long, int, void*)+0x102>
c000e91b:	90                   	nop
c000e91c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e920:	83 ec 0c             	sub    esp,0xc
c000e923:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e926:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e92a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e92d:	8b 36                	mov    esi,DWORD PTR [esi]
c000e92f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e932:	51                   	push   ecx
c000e933:	52                   	push   edx
c000e934:	50                   	push   eax
c000e935:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e939:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e93c:	83 c4 20             	add    esp,0x20
c000e93f:	85 c0                	test   eax,eax
c000e941:	75 39                	jne    c000e97c <VCache::read(unsigned long long, int, void*)+0x102>
c000e943:	eb b3                	jmp    c000e8f8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e945:	8d 76 00             	lea    esi,[esi+0x0]
c000e948:	83 ec 0c             	sub    esp,0xc
c000e94b:	57                   	push   edi
c000e94c:	e8 53 fd ff ff       	call   c000e6a4 <VCache::invalidateReadBuffer()>
c000e951:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e954:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e958:	8b 10                	mov    edx,DWORD PTR [eax]
c000e95a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e95e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e962:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e966:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e96a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e96e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e971:	83 c4 2c             	add    esp,0x2c
c000e974:	5b                   	pop    ebx
c000e975:	5e                   	pop    esi
c000e976:	5f                   	pop    edi
c000e977:	5d                   	pop    ebp
c000e978:	ff e0                	jmp    eax
c000e97a:	66 90                	xchg   ax,ax
c000e97c:	83 c4 1c             	add    esp,0x1c
c000e97f:	5b                   	pop    ebx
c000e980:	5e                   	pop    esi
c000e981:	5f                   	pop    edi
c000e982:	5d                   	pop    ebp
c000e983:	c3                   	ret    

c000e984 <Video::putrect(int, int, int, int, unsigned int)>:
c000e984:	55                   	push   ebp
c000e985:	57                   	push   edi
c000e986:	56                   	push   esi
c000e987:	53                   	push   ebx
c000e988:	83 ec 1c             	sub    esp,0x1c
c000e98b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e98f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e993:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e997:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e99b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e99f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9a3:	01 df                	add    edi,ebx
c000e9a5:	39 fb                	cmp    ebx,edi
c000e9a7:	7d 1f                	jge    c000e9c8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e9a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e9ad:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e9b1:	7d 12                	jge    c000e9c5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e9b3:	8b 16                	mov    edx,DWORD PTR [esi]
c000e9b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e9b9:	53                   	push   ebx
c000e9ba:	55                   	push   ebp
c000e9bb:	45                   	inc    ebp
c000e9bc:	56                   	push   esi
c000e9bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e9c0:	83 c4 10             	add    esp,0x10
c000e9c3:	eb e8                	jmp    c000e9ad <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e9c5:	43                   	inc    ebx
c000e9c6:	eb dd                	jmp    c000e9a5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e9c8:	83 c4 1c             	add    esp,0x1c
c000e9cb:	5b                   	pop    ebx
c000e9cc:	5e                   	pop    esi
c000e9cd:	5f                   	pop    edi
c000e9ce:	5d                   	pop    ebp
c000e9cf:	c3                   	ret    

c000e9d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e9d0:	55                   	push   ebp
c000e9d1:	57                   	push   edi
c000e9d2:	31 ff                	xor    edi,edi
c000e9d4:	56                   	push   esi
c000e9d5:	53                   	push   ebx
c000e9d6:	83 ec 1c             	sub    esp,0x1c
c000e9d9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e9dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e9e1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e9e8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e9ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9f5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e9f9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e9fc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea00:	01 f9                	add    ecx,edi
c000ea02:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea06:	7d 2f                	jge    c000ea37 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea08:	31 f6                	xor    esi,esi
c000ea0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea0e:	01 f2                	add    edx,esi
c000ea10:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea14:	7d 1a                	jge    c000ea30 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea19:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea1c:	46                   	inc    esi
c000ea1d:	51                   	push   ecx
c000ea1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea22:	52                   	push   edx
c000ea23:	55                   	push   ebp
c000ea24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea27:	83 c4 10             	add    esp,0x10
c000ea2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea2e:	eb da                	jmp    c000ea0a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea30:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea34:	47                   	inc    edi
c000ea35:	eb c5                	jmp    c000e9fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea37:	83 c4 1c             	add    esp,0x1c
c000ea3a:	5b                   	pop    ebx
c000ea3b:	5e                   	pop    esi
c000ea3c:	5f                   	pop    edi
c000ea3d:	5d                   	pop    ebp
c000ea3e:	c3                   	ret    
c000ea3f:	90                   	nop

c000ea40 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea40:	55                   	push   ebp
c000ea41:	ba 00 00 00 00       	mov    edx,0x0
c000ea46:	57                   	push   edi
c000ea47:	56                   	push   esi
c000ea48:	53                   	push   ebx
c000ea49:	83 ec 1c             	sub    esp,0x1c
c000ea4c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea50:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ea54:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea58:	85 c0                	test   eax,eax
c000ea5a:	0f 49 d0             	cmovns edx,eax
c000ea5d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ea64:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea68:	89 eb                	mov    ebx,ebp
c000ea6a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ea6e:	01 ea                	add    edx,ebp
c000ea70:	39 da                	cmp    edx,ebx
c000ea72:	7e 54                	jle    c000eac8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ea74:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ea7a:	7c 4c                	jl     c000eac8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ea7c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea80:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea84:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea88:	01 c1                	add    ecx,eax
c000ea8a:	39 f9                	cmp    ecx,edi
c000ea8c:	7e 2f                	jle    c000eabd <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ea8e:	83 c2 04             	add    edx,0x4
c000ea91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ea97:	7c 21                	jl     c000eaba <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ea99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ea9f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eaa2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eaa6:	55                   	push   ebp
c000eaa7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaab:	56                   	push   esi
c000eaac:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eaaf:	83 c4 10             	add    esp,0x10
c000eab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eaba:	47                   	inc    edi
c000eabb:	eb c7                	jmp    c000ea84 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eabd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eac1:	43                   	inc    ebx
c000eac2:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eac6:	eb a2                	jmp    c000ea6a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eac8:	83 c4 1c             	add    esp,0x1c
c000eacb:	5b                   	pop    ebx
c000eacc:	5e                   	pop    esi
c000eacd:	5f                   	pop    edi
c000eace:	5d                   	pop    ebp
c000eacf:	c3                   	ret    

c000ead0 <Video::clearScreen(unsigned int)>:
c000ead0:	57                   	push   edi
c000ead1:	56                   	push   esi
c000ead2:	53                   	push   ebx
c000ead3:	31 db                	xor    ebx,ebx
c000ead5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ead9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eadf:	7e 1f                	jle    c000eb00 <Video::clearScreen(unsigned int)+0x30>
c000eae1:	31 ff                	xor    edi,edi
c000eae3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eae9:	7e 12                	jle    c000eafd <Video::clearScreen(unsigned int)+0x2d>
c000eaeb:	8b 06                	mov    eax,DWORD PTR [esi]
c000eaed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eaf1:	53                   	push   ebx
c000eaf2:	57                   	push   edi
c000eaf3:	47                   	inc    edi
c000eaf4:	56                   	push   esi
c000eaf5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaf8:	83 c4 10             	add    esp,0x10
c000eafb:	eb e6                	jmp    c000eae3 <Video::clearScreen(unsigned int)+0x13>
c000eafd:	43                   	inc    ebx
c000eafe:	eb d9                	jmp    c000ead9 <Video::clearScreen(unsigned int)+0x9>
c000eb00:	5b                   	pop    ebx
c000eb01:	5e                   	pop    esi
c000eb02:	5f                   	pop    edi
c000eb03:	c3                   	ret    

c000eb04 <Video::putpixel(int, int, unsigned int)>:
c000eb04:	c7 44 24 04 c8 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021dc8
c000eb0c:	e9 16 2a 00 00       	jmp    c0011527 <KePanic(char const*)>
c000eb11:	90                   	nop

c000eb12 <Video::readPixelApprox(int, int)>:
c000eb12:	83 ec 18             	sub    esp,0x18
c000eb15:	68 e9 1d 02 c0       	push   0xc0021de9
c000eb1a:	e8 08 2a 00 00       	call   c0011527 <KePanic(char const*)>
c000eb1f:	31 c0                	xor    eax,eax
c000eb21:	83 c4 1c             	add    esp,0x1c
c000eb24:	c3                   	ret    
c000eb25:	90                   	nop

c000eb26 <Video::Video(char const*)>:
c000eb26:	83 ec 0c             	sub    esp,0xc
c000eb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb2d:	83 ec 08             	sub    esp,0x8
c000eb30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb34:	50                   	push   eax
c000eb35:	e8 be df ff ff       	call   c000caf8 <Device::Device(char const*)>
c000eb3a:	83 c4 10             	add    esp,0x10
c000eb3d:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c000eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb46:	89 10                	mov    DWORD PTR [eax],edx
c000eb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb56:	90                   	nop
c000eb57:	83 c4 0c             	add    esp,0xc
c000eb5a:	c3                   	ret    
c000eb5b:	90                   	nop

c000eb5c <Video::~Video()>:
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c000eb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb68:	89 10                	mov    DWORD PTR [eax],edx
c000eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb6e:	83 ec 0c             	sub    esp,0xc
c000eb71:	50                   	push   eax
c000eb72:	e8 eb dc ff ff       	call   c000c862 <Device::~Device()>
c000eb77:	83 c4 10             	add    esp,0x10
c000eb7a:	90                   	nop
c000eb7b:	83 c4 0c             	add    esp,0xc
c000eb7e:	c3                   	ret    
c000eb7f:	90                   	nop

c000eb80 <Video::~Video()>:
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	83 ec 0c             	sub    esp,0xc
c000eb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb8a:	e8 cd ff ff ff       	call   c000eb5c <Video::~Video()>
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	83 ec 08             	sub    esp,0x8
c000eb95:	68 64 01 00 00       	push   0x164
c000eb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9e:	e8 69 bc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	83 c4 0c             	add    esp,0xc
c000eba9:	c3                   	ret    

c000ebaa <Video::isMonochrome()>:
c000ebaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebae:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ebb4:	c3                   	ret    
c000ebb5:	90                   	nop

c000ebb6 <Video::getWidth()>:
c000ebb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ebc0:	c3                   	ret    
c000ebc1:	90                   	nop

c000ebc2 <Video::getHeight()>:
c000ebc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebc6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ebcc:	c3                   	ret    
c000ebcd:	90                   	nop

c000ebce <Video::drawCursor(int, int, unsigned int*, int)>:
c000ebce:	55                   	push   ebp
c000ebcf:	57                   	push   edi
c000ebd0:	56                   	push   esi
c000ebd1:	53                   	push   ebx
c000ebd2:	83 ec 2c             	sub    esp,0x2c
c000ebd5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebd9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ebdd:	83 f8 01             	cmp    eax,0x1
c000ebe0:	19 c9                	sbb    ecx,ecx
c000ebe2:	31 db                	xor    ebx,ebx
c000ebe4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ebe8:	89 ce                	mov    esi,ecx
c000ebea:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ebf2:	f7 d6                	not    esi
c000ebf4:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ebfa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ebfe:	01 d8                	add    eax,ebx
c000ec00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec04:	57                   	push   edi
c000ec05:	e8 b8 ff ff ff       	call   c000ebc2 <Video::getHeight()>
c000ec0a:	59                   	pop    ecx
c000ec0b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec0f:	7e 70                	jle    c000ec81 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec15:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec19:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec20:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec24:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec2f:	89 e8                	mov    eax,ebp
c000ec31:	83 c0 20             	add    eax,0x20
c000ec34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec38:	57                   	push   edi
c000ec39:	e8 78 ff ff ff       	call   c000ebb6 <Video::getWidth()>
c000ec3e:	5a                   	pop    edx
c000ec3f:	39 c5                	cmp    ebp,eax
c000ec41:	7d 34                	jge    c000ec77 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec43:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec48:	74 05                	je     c000ec4f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec4a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec4c:	56                   	push   esi
c000ec4d:	eb 0d                	jmp    c000ec5c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec4f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec54:	74 12                	je     c000ec68 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec56:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec60:	55                   	push   ebp
c000ec61:	57                   	push   edi
c000ec62:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec65:	83 c4 10             	add    esp,0x10
c000ec68:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ec6c:	45                   	inc    ebp
c000ec6d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ec71:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ec75:	75 c1                	jne    c000ec38 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ec77:	43                   	inc    ebx
c000ec78:	83 fb 20             	cmp    ebx,0x20
c000ec7b:	0f 85 79 ff ff ff    	jne    c000ebfa <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ec81:	83 c4 2c             	add    esp,0x2c
c000ec84:	5b                   	pop    ebx
c000ec85:	5e                   	pop    esi
c000ec86:	5f                   	pop    edi
c000ec87:	5d                   	pop    ebp
c000ec88:	c3                   	ret    
c000ec89:	90                   	nop

c000ec8a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ec8a:	55                   	push   ebp
c000ec8b:	57                   	push   edi
c000ec8c:	56                   	push   esi
c000ec8d:	53                   	push   ebx
c000ec8e:	83 ec 28             	sub    esp,0x28
c000ec91:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec95:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ec99:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ec9d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000eca1:	c1 e7 08             	shl    edi,0x8
c000eca4:	01 c7                	add    edi,eax
c000eca6:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ecaa:	c1 e6 08             	shl    esi,0x8
c000ecad:	01 f0                	add    eax,esi
c000ecaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecb7:	0f af c7             	imul   eax,edi
c000ecba:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ecc1:	50                   	push   eax
c000ecc2:	e8 0c 8e ff ff       	call   c0007ad3 <malloc>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	85 c0                	test   eax,eax
c000eccc:	89 c5                	mov    ebp,eax
c000ecce:	75 10                	jne    c000ece0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ecd0:	83 ec 0c             	sub    esp,0xc
c000ecd3:	68 14 1e 02 c0       	push   0xc0021e14
c000ecd8:	e8 4a 28 00 00       	call   c0011527 <KePanic(char const*)>
c000ecdd:	83 c4 10             	add    esp,0x10
c000ece0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ece4:	ba 12 00 00 00       	mov    edx,0x12
c000ece9:	85 c0                	test   eax,eax
c000eceb:	74 11                	je     c000ecfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eced:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ecf1:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ecf5:	c1 fa 03             	sar    edx,0x3
c000ecf8:	0f af d1             	imul   edx,ecx
c000ecfb:	83 c2 12             	add    edx,0x12
c000ecfe:	85 ff                	test   edi,edi
c000ed00:	74 06                	je     c000ed08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed02:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed06:	75 12                	jne    c000ed1a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed08:	83 ec 0c             	sub    esp,0xc
c000ed0b:	68 24 1e 02 c0       	push   0xc0021e24
c000ed10:	e8 f5 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ed15:	e9 b8 00 00 00       	jmp    c000edd2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed1a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed1e:	83 f9 02             	cmp    ecx,0x2
c000ed21:	0f 85 96 00 00 00    	jne    c000edbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed27:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed2c:	75 0e                	jne    c000ed3c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed2e:	85 c0                	test   eax,eax
c000ed30:	75 0a                	jne    c000ed3c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed32:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed35:	83 e8 18             	sub    eax,0x18
c000ed38:	a8 f7                	test   al,0xf7
c000ed3a:	74 0a                	je     c000ed46 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed3c:	83 ec 0c             	sub    esp,0xc
c000ed3f:	68 39 1e 02 c0       	push   0xc0021e39
c000ed44:	eb 7f                	jmp    c000edc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed4e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ed5a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ed5e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed66:	75 0c                	jne    c000ed74 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ed68:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ed6d:	c1 e1 18             	shl    ecx,0x18
c000ed70:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ed74:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ed79:	46                   	inc    esi
c000ed7a:	89 c8                	mov    eax,ecx
c000ed7c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ed81:	c1 e0 10             	shl    eax,0x10
c000ed84:	c1 e1 08             	shl    ecx,0x8
c000ed87:	09 c1                	or     ecx,eax
c000ed89:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ed8d:	09 c1                	or     ecx,eax
c000ed8f:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ed93:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ed97:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ed9b:	c1 f8 03             	sar    eax,0x3
c000ed9e:	01 c2                	add    edx,eax
c000eda0:	89 f0                	mov    eax,esi
c000eda2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eda6:	39 c7                	cmp    edi,eax
c000eda8:	7f b0                	jg     c000ed5a <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000edaa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000edae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edb2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000edb5:	7e 22                	jle    c000edd9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000edb7:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000edbb:	eb 99                	jmp    c000ed56 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000edbd:	50                   	push   eax
c000edbe:	50                   	push   eax
c000edbf:	51                   	push   ecx
c000edc0:	68 47 1e 02 c0       	push   0xc0021e47
c000edc5:	e8 40 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000edca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000edcd:	e8 11 8d ff ff       	call   c0007ae3 <free>
c000edd2:	83 c4 10             	add    esp,0x10
c000edd5:	31 ed                	xor    ebp,ebp
c000edd7:	eb 0f                	jmp    c000ede8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000edd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eddd:	89 38                	mov    DWORD PTR [eax],edi
c000eddf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ede3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ede6:	89 38                	mov    DWORD PTR [eax],edi
c000ede8:	83 c4 1c             	add    esp,0x1c
c000edeb:	89 e8                	mov    eax,ebp
c000eded:	5b                   	pop    ebx
c000edee:	5e                   	pop    esi
c000edef:	5f                   	pop    edi
c000edf0:	5d                   	pop    ebp
c000edf1:	c3                   	ret    

c000edf2 <Video::putTGA(int, int, unsigned char*, int)>:
c000edf2:	55                   	push   ebp
c000edf3:	57                   	push   edi
c000edf4:	56                   	push   esi
c000edf5:	53                   	push   ebx
c000edf6:	83 ec 28             	sub    esp,0x28
c000edf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000edfd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee01:	50                   	push   eax
c000ee02:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee06:	50                   	push   eax
c000ee07:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee0b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee0f:	57                   	push   edi
c000ee10:	e8 75 fe ff ff       	call   c000ec8a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee15:	83 c4 20             	add    esp,0x20
c000ee18:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee1c:	85 c0                	test   eax,eax
c000ee1e:	74 35                	je     c000ee55 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee20:	89 c6                	mov    esi,eax
c000ee22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee26:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee2a:	39 d8                	cmp    eax,ebx
c000ee2c:	7e 27                	jle    c000ee55 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee2e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee32:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ee36:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ee3a:	39 e9                	cmp    ecx,ebp
c000ee3c:	7e 14                	jle    c000ee52 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee3e:	83 c6 04             	add    esi,0x4
c000ee41:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ee43:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ee46:	53                   	push   ebx
c000ee47:	55                   	push   ebp
c000ee48:	45                   	inc    ebp
c000ee49:	57                   	push   edi
c000ee4a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ee4d:	83 c4 10             	add    esp,0x10
c000ee50:	eb e0                	jmp    c000ee32 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee52:	43                   	inc    ebx
c000ee53:	eb cd                	jmp    c000ee22 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee55:	83 c4 1c             	add    esp,0x1c
c000ee58:	5b                   	pop    ebx
c000ee59:	5e                   	pop    esi
c000ee5a:	5f                   	pop    edi
c000ee5b:	5d                   	pop    ebp
c000ee5c:	c3                   	ret    
c000ee5d:	66 90                	xchg   ax,ax
c000ee5f:	90                   	nop

c000ee60 <ACPI::close(int, int, void*)>:
c000ee60:	83 ec 1c             	sub    esp,0x1c
c000ee63:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ee6b:	74 0b                	je     c000ee78 <ACPI::close(int, int, void*)+0x18>
c000ee6d:	b8 00 00 00 00       	mov    eax,0x0
c000ee72:	e9 99 00 00 00       	jmp    c000ef10 <ACPI::close(int, int, void*)+0xb0>
c000ee77:	90                   	nop
c000ee78:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ee7d:	75 29                	jne    c000eea8 <ACPI::close(int, int, void*)+0x48>
c000ee7f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee84:	85 c0                	test   eax,eax
c000ee86:	74 08                	je     c000ee90 <ACPI::close(int, int, void*)+0x30>
c000ee88:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee8d:	ff d0                	call   eax
c000ee8f:	90                   	nop
c000ee90:	83 ec 0c             	sub    esp,0xc
c000ee93:	68 a8 1e 02 c0       	push   0xc0021ea8
c000ee98:	e8 8a 26 00 00       	call   c0011527 <KePanic(char const*)>
c000ee9d:	83 c4 10             	add    esp,0x10
c000eea0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eea5:	eb 69                	jmp    c000ef10 <ACPI::close(int, int, void*)+0xb0>
c000eea7:	90                   	nop
c000eea8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eead:	75 59                	jne    c000ef08 <ACPI::close(int, int, void*)+0xa8>
c000eeaf:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eeb4:	85 c0                	test   eax,eax
c000eeb6:	74 08                	je     c000eec0 <ACPI::close(int, int, void*)+0x60>
c000eeb8:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eebd:	ff d0                	call   eax
c000eebf:	90                   	nop
c000eec0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eec5:	8d 76 00             	lea    esi,[esi+0x0]
c000eec8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eecd:	83 e0 02             	and    eax,0x2
c000eed0:	74 1e                	je     c000eef0 <ACPI::close(int, int, void*)+0x90>
c000eed2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eedd:	89 c2                	mov    edx,eax
c000eedf:	ec                   	in     al,dx
c000eee0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eee4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eee8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eeec:	eb da                	jmp    c000eec8 <ACPI::close(int, int, void*)+0x68>
c000eeee:	66 90                	xchg   ax,ax
c000eef0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eef7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eefc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef04:	ee                   	out    dx,al
c000ef05:	8d 76 00             	lea    esi,[esi+0x0]
c000ef08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef10:	83 c4 1c             	add    esp,0x1c
c000ef13:	c3                   	ret    

c000ef14 <findRSDP()>:
c000ef14:	83 ec 1c             	sub    esp,0x1c
c000ef17:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef1c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef22:	83 e0 04             	and    eax,0x4
c000ef25:	0f b6 c0             	movzx  eax,al
c000ef28:	85 c0                	test   eax,eax
c000ef2a:	75 08                	jne    c000ef34 <findRSDP()+0x20>
c000ef2c:	b8 00 00 00 00       	mov    eax,0x0
c000ef31:	eb 75                	jmp    c000efa8 <findRSDP()+0x94>
c000ef33:	90                   	nop
c000ef34:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef39:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef3e:	7f 1c                	jg     c000ef5c <findRSDP()+0x48>
c000ef40:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef45:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef4b:	83 e2 fb             	and    edx,0xfffffffb
c000ef4e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef54:	b8 00 00 00 00       	mov    eax,0x0
c000ef59:	eb 4d                	jmp    c000efa8 <findRSDP()+0x94>
c000ef5b:	90                   	nop
c000ef5c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ef64:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ef6c:	77 32                	ja     c000efa0 <findRSDP()+0x8c>
c000ef6e:	83 ec 04             	sub    esp,0x4
c000ef71:	6a 08                	push   0x8
c000ef73:	68 43 1f 02 c0       	push   0xc0021f43
c000ef78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef7c:	e8 ff 13 ff ff       	call   c0000380 <memcmp>
c000ef81:	83 c4 10             	add    esp,0x10
c000ef84:	85 c0                	test   eax,eax
c000ef86:	0f 94 c0             	sete   al
c000ef89:	0f b6 c0             	movzx  eax,al
c000ef8c:	85 c0                	test   eax,eax
c000ef8e:	74 08                	je     c000ef98 <findRSDP()+0x84>
c000ef90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef94:	eb 12                	jmp    c000efa8 <findRSDP()+0x94>
c000ef96:	66 90                	xchg   ax,ax
c000ef98:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ef9d:	eb c5                	jmp    c000ef64 <findRSDP()+0x50>
c000ef9f:	90                   	nop
c000efa0:	b8 00 00 00 00       	mov    eax,0x0
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]
c000efa8:	83 c4 1c             	add    esp,0x1c
c000efab:	c3                   	ret    

c000efac <loadACPITables(unsigned char*)>:
c000efac:	57                   	push   edi
c000efad:	56                   	push   esi
c000efae:	53                   	push   ebx
c000efaf:	83 ec 60             	sub    esp,0x60
c000efb2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efb7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efbd:	83 e0 04             	and    eax,0x4
c000efc0:	0f b6 c0             	movzx  eax,al
c000efc3:	85 c0                	test   eax,eax
c000efc5:	0f 84 41 02 00 00    	je     c000f20c <loadACPITables(unsigned char*)+0x260>
c000efcb:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000efd0:	0f b6 c0             	movzx  eax,al
c000efd3:	85 c0                	test   eax,eax
c000efd5:	74 79                	je     c000f050 <loadACPITables(unsigned char*)+0xa4>
c000efd7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efdb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000efdf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000efe3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000efe6:	83 e8 24             	sub    eax,0x24
c000efe9:	c1 e8 03             	shr    eax,0x3
c000efec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eff0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000eff8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000effc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f000:	0f 8d ba 00 00 00    	jge    c000f0c0 <loadACPITables(unsigned char*)+0x114>
c000f006:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f00a:	83 c0 24             	add    eax,0x24
c000f00d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f011:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f015:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f019:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f01d:	c1 e0 03             	shl    eax,0x3
c000f020:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f024:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f028:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f02b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f02d:	89 c1                	mov    ecx,eax
c000f02f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f034:	8d 50 01             	lea    edx,[eax+0x1]
c000f037:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f03d:	89 ca                	mov    edx,ecx
c000f03f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f046:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f04b:	eb ab                	jmp    c000eff8 <loadACPITables(unsigned char*)+0x4c>
c000f04d:	8d 76 00             	lea    esi,[esi+0x0]
c000f050:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f054:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f058:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f05c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f05f:	83 e8 24             	sub    eax,0x24
c000f062:	c1 e8 02             	shr    eax,0x2
c000f065:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f069:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f071:	8d 76 00             	lea    esi,[esi+0x0]
c000f074:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f078:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f07c:	7d 42                	jge    c000f0c0 <loadACPITables(unsigned char*)+0x114>
c000f07e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f082:	83 c0 24             	add    eax,0x24
c000f085:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f089:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f08d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f091:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f095:	c1 e0 02             	shl    eax,0x2
c000f098:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f09c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0a2:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0a7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0aa:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0b0:	89 ca                	mov    edx,ecx
c000f0b2:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0b9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f0be:	eb b4                	jmp    c000f074 <loadACPITables(unsigned char*)+0xc8>
c000f0c0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f0c8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0cd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f0d1:	0f 8d 39 01 00 00    	jge    c000f210 <loadACPITables(unsigned char*)+0x264>
c000f0d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0db:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f0e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f0e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0f2:	25 ff 0f 00 00       	and    eax,0xfff
c000f0f7:	89 c6                	mov    esi,eax
c000f0f9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f0ff:	83 ec 0c             	sub    esp,0xc
c000f102:	6a 01                	push   0x1
c000f104:	e8 ec a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f109:	83 c4 10             	add    esp,0x10
c000f10c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f110:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f116:	83 ec 0c             	sub    esp,0xc
c000f119:	6a 01                	push   0x1
c000f11b:	6a 01                	push   0x1
c000f11d:	50                   	push   eax
c000f11e:	52                   	push   edx
c000f11f:	53                   	push   ebx
c000f120:	e8 e3 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f125:	83 c4 20             	add    esp,0x20
c000f128:	09 f0                	or     eax,esi
c000f12a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f12e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f132:	c1 e0 03             	shl    eax,0x3
c000f135:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f13a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f142:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f146:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f14e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f152:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f156:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f15a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f15e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f162:	89 c6                	mov    esi,eax
c000f164:	89 d7                	mov    edi,edx
c000f166:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f168:	89 c8                	mov    eax,ecx
c000f16a:	89 fa                	mov    edx,edi
c000f16c:	89 f3                	mov    ebx,esi
c000f16e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f172:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f176:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f17a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f17e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f181:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f189:	05 00 10 00 00       	add    eax,0x1000
c000f18e:	c1 e8 0c             	shr    eax,0xc
c000f191:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f195:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f199:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f19d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1a1:	25 ff 0f 00 00       	and    eax,0xfff
c000f1a6:	89 c6                	mov    esi,eax
c000f1a8:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1ae:	83 ec 0c             	sub    esp,0xc
c000f1b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1b5:	e8 3b a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f1ba:	83 c4 10             	add    esp,0x10
c000f1bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1c1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1c7:	83 ec 0c             	sub    esp,0xc
c000f1ca:	6a 01                	push   0x1
c000f1cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f1d0:	50                   	push   eax
c000f1d1:	52                   	push   edx
c000f1d2:	53                   	push   ebx
c000f1d3:	e8 30 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1d8:	83 c4 20             	add    esp,0x20
c000f1db:	09 f0                	or     eax,esi
c000f1dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1e5:	83 ec 0c             	sub    esp,0xc
c000f1e8:	50                   	push   eax
c000f1e9:	e8 1b a7 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f1ee:	83 c4 10             	add    esp,0x10
c000f1f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f1f9:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f200:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f205:	e9 be fe ff ff       	jmp    c000f0c8 <loadACPITables(unsigned char*)+0x11c>
c000f20a:	66 90                	xchg   ax,ax
c000f20c:	90                   	nop
c000f20d:	8d 76 00             	lea    esi,[esi+0x0]
c000f210:	83 c4 60             	add    esp,0x60
c000f213:	5b                   	pop    ebx
c000f214:	5e                   	pop    esi
c000f215:	5f                   	pop    edi
c000f216:	c3                   	ret    
c000f217:	90                   	nop

c000f218 <findRSDT(unsigned char*)>:
c000f218:	57                   	push   edi
c000f219:	56                   	push   esi
c000f21a:	53                   	push   ebx
c000f21b:	83 ec 50             	sub    esp,0x50
c000f21e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f223:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f229:	83 e0 04             	and    eax,0x4
c000f22c:	0f b6 c0             	movzx  eax,al
c000f22f:	85 c0                	test   eax,eax
c000f231:	75 0d                	jne    c000f240 <findRSDT(unsigned char*)+0x28>
c000f233:	b8 00 00 00 00       	mov    eax,0x0
c000f238:	e9 2b 01 00 00       	jmp    c000f368 <findRSDT(unsigned char*)+0x150>
c000f23d:	8d 76 00             	lea    esi,[esi+0x0]
c000f240:	89 e0                	mov    eax,esp
c000f242:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f246:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f24a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f24e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f256:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f25a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f25e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f262:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f266:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f26a:	89 c6                	mov    esi,eax
c000f26c:	89 d7                	mov    edi,edx
c000f26e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f270:	89 c8                	mov    eax,ecx
c000f272:	89 fa                	mov    edx,edi
c000f274:	89 f3                	mov    ebx,esi
c000f276:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f27a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f27e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f282:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f286:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f28a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f296:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f29a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2a6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2aa:	25 ff 0f 00 00       	and    eax,0xfff
c000f2af:	89 c6                	mov    esi,eax
c000f2b1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2b7:	83 ec 0c             	sub    esp,0xc
c000f2ba:	6a 02                	push   0x2
c000f2bc:	e8 34 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f2c1:	83 c4 10             	add    esp,0x10
c000f2c4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f2c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2ce:	83 ec 0c             	sub    esp,0xc
c000f2d1:	6a 01                	push   0x1
c000f2d3:	6a 02                	push   0x2
c000f2d5:	50                   	push   eax
c000f2d6:	52                   	push   edx
c000f2d7:	53                   	push   ebx
c000f2d8:	e8 2b ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2dd:	83 c4 20             	add    esp,0x20
c000f2e0:	09 f0                	or     eax,esi
c000f2e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f2ea:	25 ff 0f 00 00       	and    eax,0xfff
c000f2ef:	89 c6                	mov    esi,eax
c000f2f1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2f7:	83 ec 0c             	sub    esp,0xc
c000f2fa:	6a 02                	push   0x2
c000f2fc:	e8 f4 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f301:	83 c4 10             	add    esp,0x10
c000f304:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f308:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f30e:	83 ec 0c             	sub    esp,0xc
c000f311:	6a 01                	push   0x1
c000f313:	6a 02                	push   0x2
c000f315:	50                   	push   eax
c000f316:	52                   	push   edx
c000f317:	53                   	push   ebx
c000f318:	e8 eb ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f31d:	83 c4 20             	add    esp,0x20
c000f320:	09 f0                	or     eax,esi
c000f322:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f326:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f32b:	85 c0                	test   eax,eax
c000f32d:	75 11                	jne    c000f340 <findRSDT(unsigned char*)+0x128>
c000f32f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f336:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f33a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f33e:	eb 24                	jmp    c000f364 <findRSDT(unsigned char*)+0x14c>
c000f340:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f345:	83 f8 02             	cmp    eax,0x2
c000f348:	75 12                	jne    c000f35c <findRSDT(unsigned char*)+0x144>
c000f34a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f351:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f355:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f359:	eb 09                	jmp    c000f364 <findRSDT(unsigned char*)+0x14c>
c000f35b:	90                   	nop
c000f35c:	b8 00 00 00 00       	mov    eax,0x0
c000f361:	eb 05                	jmp    c000f368 <findRSDT(unsigned char*)+0x150>
c000f363:	90                   	nop
c000f364:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f368:	83 c4 50             	add    esp,0x50
c000f36b:	5b                   	pop    ebx
c000f36c:	5e                   	pop    esi
c000f36d:	5f                   	pop    edi
c000f36e:	c3                   	ret    
c000f36f:	90                   	nop

c000f370 <findDataTable(unsigned char*, char*)>:
c000f370:	83 ec 1c             	sub    esp,0x1c
c000f373:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f378:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f37e:	83 e0 04             	and    eax,0x4
c000f381:	0f b6 c0             	movzx  eax,al
c000f384:	85 c0                	test   eax,eax
c000f386:	75 08                	jne    c000f390 <findDataTable(unsigned char*, char*)+0x20>
c000f388:	b8 00 00 00 00       	mov    eax,0x0
c000f38d:	eb 5d                	jmp    c000f3ec <findDataTable(unsigned char*, char*)+0x7c>
c000f38f:	90                   	nop
c000f390:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f398:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f39d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f3a1:	7d 41                	jge    c000f3e4 <findDataTable(unsigned char*, char*)+0x74>
c000f3a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3a7:	c1 e0 03             	shl    eax,0x3
c000f3aa:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3af:	83 ec 04             	sub    esp,0x4
c000f3b2:	6a 04                	push   0x4
c000f3b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 c2 0f ff ff       	call   c0000380 <memcmp>
c000f3be:	83 c4 10             	add    esp,0x10
c000f3c1:	85 c0                	test   eax,eax
c000f3c3:	0f 94 c0             	sete   al
c000f3c6:	0f b6 c0             	movzx  eax,al
c000f3c9:	85 c0                	test   eax,eax
c000f3cb:	74 0f                	je     c000f3dc <findDataTable(unsigned char*, char*)+0x6c>
c000f3cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3d1:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f3d8:	eb 12                	jmp    c000f3ec <findDataTable(unsigned char*, char*)+0x7c>
c000f3da:	66 90                	xchg   ax,ax
c000f3dc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f3e1:	eb b5                	jmp    c000f398 <findDataTable(unsigned char*, char*)+0x28>
c000f3e3:	90                   	nop
c000f3e4:	b8 00 00 00 00       	mov    eax,0x0
c000f3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3ec:	83 c4 1c             	add    esp,0x1c
c000f3ef:	c3                   	ret    

c000f3f0 <scanMADT()>:
c000f3f0:	53                   	push   ebx
c000f3f1:	83 ec 38             	sub    esp,0x38
c000f3f4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f3f9:	25 00 04 00 00       	and    eax,0x400
c000f3fe:	74 14                	je     c000f414 <scanMADT()+0x24>
c000f400:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f405:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f40b:	83 e2 fb             	and    edx,0xfffffffb
c000f40e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f414:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f419:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f41f:	83 e0 04             	and    eax,0x4
c000f422:	0f b6 c0             	movzx  eax,al
c000f425:	85 c0                	test   eax,eax
c000f427:	0f 84 6b 04 00 00    	je     c000f898 <scanMADT()+0x4a8>
c000f42d:	e8 e2 fa ff ff       	call   c000ef14 <findRSDP()>
c000f432:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f437:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f43c:	85 c0                	test   eax,eax
c000f43e:	75 1c                	jne    c000f45c <scanMADT()+0x6c>
c000f440:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f445:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f44b:	83 e2 fb             	and    edx,0xfffffffb
c000f44e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f454:	e9 47 04 00 00       	jmp    c000f8a0 <scanMADT()+0x4b0>
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f461:	83 ec 0c             	sub    esp,0xc
c000f464:	50                   	push   eax
c000f465:	e8 ae fd ff ff       	call   c000f218 <findRSDT(unsigned char*)>
c000f46a:	83 c4 10             	add    esp,0x10
c000f46d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f472:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f477:	85 c0                	test   eax,eax
c000f479:	75 19                	jne    c000f494 <scanMADT()+0xa4>
c000f47b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f480:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f486:	83 e2 fb             	and    edx,0xfffffffb
c000f489:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f48f:	e9 0c 04 00 00       	jmp    c000f8a0 <scanMADT()+0x4b0>
c000f494:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f499:	83 ec 0c             	sub    esp,0xc
c000f49c:	50                   	push   eax
c000f49d:	e8 0a fb ff ff       	call   c000efac <loadACPITables(unsigned char*)>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	68 4c 1f 02 c0       	push   0xc0021f4c
c000f4b2:	50                   	push   eax
c000f4b3:	e8 b8 fe ff ff       	call   c000f370 <findDataTable(unsigned char*, char*)>
c000f4b8:	83 c4 10             	add    esp,0x10
c000f4bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f4bf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f4c4:	75 1a                	jne    c000f4e0 <scanMADT()+0xf0>
c000f4c6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4cb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4d1:	83 e2 fe             	and    edx,0xfffffffe
c000f4d4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4da:	e9 c1 03 00 00       	jmp    c000f8a0 <scanMADT()+0x4b0>
c000f4df:	90                   	nop
c000f4e0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f4e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4ef:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f4f3:	0f 87 a7 03 00 00    	ja     c000f8a0 <scanMADT()+0x4b0>
c000f4f9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f501:	0f 87 99 03 00 00    	ja     c000f8a0 <scanMADT()+0x4b0>
c000f507:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f50f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f513:	8d 50 01             	lea    edx,[eax+0x1]
c000f516:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f51a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f51e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f522:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f52a:	8d 50 01             	lea    edx,[eax+0x1]
c000f52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f531:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f535:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f539:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f53d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f542:	83 f8 02             	cmp    eax,0x2
c000f545:	0f 86 51 03 00 00    	jbe    c000f89c <scanMADT()+0x4ac>
c000f54b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f550:	85 c0                	test   eax,eax
c000f552:	75 58                	jne    c000f5ac <scanMADT()+0x1bc>
c000f554:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f558:	8d 50 01             	lea    edx,[eax+0x1]
c000f55b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f55f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f565:	0f b6 d2             	movzx  edx,dl
c000f568:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f56c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f570:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f576:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f57a:	8d 50 01             	lea    edx,[eax+0x1]
c000f57d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f581:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f587:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f58a:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f590:	0f b6 d2             	movzx  edx,dl
c000f593:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f597:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f59b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f5a1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5a6:	e9 d9 02 00 00       	jmp    c000f884 <scanMADT()+0x494>
c000f5ab:	90                   	nop
c000f5ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5b1:	83 f8 01             	cmp    eax,0x1
c000f5b4:	0f 85 1a 01 00 00    	jne    c000f6d4 <scanMADT()+0x2e4>
c000f5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5be:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c5:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f5cb:	0f b6 d2             	movzx  edx,dl
c000f5ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5d2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5d6:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f5dc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f5e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e9:	01 d0                	add    eax,edx
c000f5eb:	83 c0 2c             	add    eax,0x2c
c000f5ee:	8a 00                	mov    al,BYTE PTR [eax]
c000f5f0:	0f b6 d0             	movzx  edx,al
c000f5f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f602:	0f b6 c0             	movzx  eax,al
c000f605:	c1 e0 08             	shl    eax,0x8
c000f608:	89 d1                	mov    ecx,edx
c000f60a:	09 c1                	or     ecx,eax
c000f60c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f610:	8d 50 02             	lea    edx,[eax+0x2]
c000f613:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f617:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f61b:	0f b6 c0             	movzx  eax,al
c000f61e:	c1 e0 10             	shl    eax,0x10
c000f621:	09 c1                	or     ecx,eax
c000f623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f627:	8d 50 03             	lea    edx,[eax+0x3]
c000f62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f62e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f632:	0f b6 c0             	movzx  eax,al
c000f635:	c1 e0 18             	shl    eax,0x18
c000f638:	09 c1                	or     ecx,eax
c000f63a:	89 ca                	mov    edx,ecx
c000f63c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f641:	0f b6 c0             	movzx  eax,al
c000f644:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f64b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f650:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f654:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f658:	01 d0                	add    eax,edx
c000f65a:	83 c0 2c             	add    eax,0x2c
c000f65d:	8a 00                	mov    al,BYTE PTR [eax]
c000f65f:	0f b6 d0             	movzx  edx,al
c000f662:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f666:	8d 48 01             	lea    ecx,[eax+0x1]
c000f669:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f66d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f671:	0f b6 c0             	movzx  eax,al
c000f674:	c1 e0 08             	shl    eax,0x8
c000f677:	89 d1                	mov    ecx,edx
c000f679:	09 c1                	or     ecx,eax
c000f67b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f67f:	8d 50 02             	lea    edx,[eax+0x2]
c000f682:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f686:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f68a:	0f b6 c0             	movzx  eax,al
c000f68d:	c1 e0 10             	shl    eax,0x10
c000f690:	09 c1                	or     ecx,eax
c000f692:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f696:	8d 50 03             	lea    edx,[eax+0x3]
c000f699:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f69d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6a1:	0f b6 c0             	movzx  eax,al
c000f6a4:	c1 e0 18             	shl    eax,0x18
c000f6a7:	09 c1                	or     ecx,eax
c000f6a9:	89 ca                	mov    edx,ecx
c000f6ab:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6b0:	0f b6 c0             	movzx  eax,al
c000f6b3:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f6ba:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6bf:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6c4:	83 c0 01             	add    eax,0x1
c000f6c7:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f6cc:	e9 b3 01 00 00       	jmp    c000f884 <scanMADT()+0x494>
c000f6d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6d4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6d9:	83 f8 02             	cmp    eax,0x2
c000f6dc:	0f 85 ea 00 00 00    	jne    c000f7cc <scanMADT()+0x3dc>
c000f6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6e6:	8d 50 01             	lea    edx,[eax+0x1]
c000f6e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6f1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6f5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f6f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6fd:	8d 50 01             	lea    edx,[eax+0x1]
c000f700:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f704:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f708:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f70c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f710:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f714:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f718:	01 d0                	add    eax,edx
c000f71a:	83 c0 2c             	add    eax,0x2c
c000f71d:	8a 00                	mov    al,BYTE PTR [eax]
c000f71f:	0f b6 d0             	movzx  edx,al
c000f722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f726:	8d 48 01             	lea    ecx,[eax+0x1]
c000f729:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f72d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f731:	0f b6 c0             	movzx  eax,al
c000f734:	c1 e0 08             	shl    eax,0x8
c000f737:	89 d1                	mov    ecx,edx
c000f739:	09 c1                	or     ecx,eax
c000f73b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f73f:	8d 50 02             	lea    edx,[eax+0x2]
c000f742:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f746:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f74a:	0f b6 c0             	movzx  eax,al
c000f74d:	c1 e0 10             	shl    eax,0x10
c000f750:	09 c1                	or     ecx,eax
c000f752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f756:	8d 50 03             	lea    edx,[eax+0x3]
c000f759:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f75d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f761:	0f b6 c0             	movzx  eax,al
c000f764:	c1 e0 18             	shl    eax,0x18
c000f767:	09 c8                	or     eax,ecx
c000f769:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f76d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f772:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f776:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77a:	01 d0                	add    eax,edx
c000f77c:	83 c0 2c             	add    eax,0x2c
c000f77f:	8a 00                	mov    al,BYTE PTR [eax]
c000f781:	0f b6 d0             	movzx  edx,al
c000f784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f788:	8d 48 01             	lea    ecx,[eax+0x1]
c000f78b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f78f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f793:	0f b6 c0             	movzx  eax,al
c000f796:	c1 e0 08             	shl    eax,0x8
c000f799:	09 d0                	or     eax,edx
c000f79b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f7a0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7a5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7ae:	88 90 48 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc9b8],dl
c000f7b4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7b9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f7be:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f7c6:	e9 b9 00 00 00       	jmp    c000f884 <scanMADT()+0x494>
c000f7cb:	90                   	nop
c000f7cc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7d1:	83 f8 04             	cmp    eax,0x4
c000f7d4:	0f 85 9a 00 00 00    	jne    c000f874 <scanMADT()+0x484>
c000f7da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7de:	8d 50 01             	lea    edx,[eax+0x1]
c000f7e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7ed:	0f b6 c0             	movzx  eax,al
c000f7f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f7f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7fc:	01 d0                	add    eax,edx
c000f7fe:	83 c0 2c             	add    eax,0x2c
c000f801:	8a 00                	mov    al,BYTE PTR [eax]
c000f803:	0f b6 d0             	movzx  edx,al
c000f806:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f80d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f811:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f815:	0f b6 c0             	movzx  eax,al
c000f818:	c1 e0 08             	shl    eax,0x8
c000f81b:	09 d0                	or     eax,edx
c000f81d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f821:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82a:	8d 50 01             	lea    edx,[eax+0x1]
c000f82d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f831:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f835:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f839:	0f b6 c0             	movzx  eax,al
c000f83c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f844:	c1 e0 08             	shl    eax,0x8
c000f847:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f84b:	89 c1                	mov    ecx,eax
c000f84d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f851:	c1 e0 18             	shl    eax,0x18
c000f854:	89 c3                	mov    ebx,eax
c000f856:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f85b:	8d 50 01             	lea    edx,[eax+0x1]
c000f85e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f864:	09 d9                	or     ecx,ebx
c000f866:	89 ca                	mov    edx,ecx
c000f868:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f86f:	eb 13                	jmp    c000f884 <scanMADT()+0x494>
c000f871:	8d 76 00             	lea    esi,[esi+0x0]
c000f874:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f879:	83 f8 05             	cmp    eax,0x5
c000f87c:	75 06                	jne    c000f884 <scanMADT()+0x494>
c000f87e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f883:	90                   	nop
c000f884:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f889:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f88d:	01 d0                	add    eax,edx
c000f88f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f893:	e9 50 fc ff ff       	jmp    c000f4e8 <scanMADT()+0xf8>
c000f898:	90                   	nop
c000f899:	eb 05                	jmp    c000f8a0 <scanMADT()+0x4b0>
c000f89b:	90                   	nop
c000f89c:	90                   	nop
c000f89d:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a0:	83 c4 38             	add    esp,0x38
c000f8a3:	5b                   	pop    ebx
c000f8a4:	c3                   	ret    
c000f8a5:	90                   	nop
c000f8a6:	66 90                	xchg   ax,ax

c000f8a8 <ACPI::ACPI()>:
c000f8a8:	83 ec 0c             	sub    esp,0xc
c000f8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8af:	83 ec 08             	sub    esp,0x8
c000f8b2:	68 51 1f 02 c0       	push   0xc0021f51
c000f8b7:	50                   	push   eax
c000f8b8:	e8 3b d2 ff ff       	call   c000caf8 <Device::Device(char const*)>
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c000f8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c9:	89 10                	mov    DWORD PTR [eax],edx
c000f8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8cf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8da:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f8f2:	e8 f9 fa ff ff       	call   c000f3f0 <scanMADT()>
c000f8f7:	90                   	nop
c000f8f8:	83 c4 0c             	add    esp,0xc
c000f8fb:	c3                   	ret    

c000f8fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f8fc:	83 ec 2c             	sub    esp,0x2c
c000f8ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f903:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f907:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f90b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f90f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f914:	88 c8                	mov    al,cl
c000f916:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f91a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f91f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f927:	90                   	nop
c000f928:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f92c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f932:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f936:	0f 8d b0 00 00 00    	jge    c000f9ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f93c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f944:	83 c2 2a             	add    edx,0x2a
c000f947:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f94b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f950:	0f b7 c0             	movzx  eax,ax
c000f953:	39 c2                	cmp    edx,eax
c000f955:	0f 85 85 00 00 00    	jne    c000f9e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f95b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f95f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f963:	83 c2 2a             	add    edx,0x2a
c000f966:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f96a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f96f:	0f b6 c0             	movzx  eax,al
c000f972:	39 c2                	cmp    edx,eax
c000f974:	75 6a                	jne    c000f9e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f976:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f97b:	85 c0                	test   eax,eax
c000f97d:	74 3d                	je     c000f9bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f97f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f983:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f987:	83 c2 2a             	add    edx,0x2a
c000f98a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f98e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f995:	39 c2                	cmp    edx,eax
c000f997:	74 13                	je     c000f9ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f999:	83 ec 0c             	sub    esp,0xc
c000f99c:	68 cc 1e 02 c0       	push   0xc0021ecc
c000f9a1:	e8 81 1b 00 00       	call   c0011527 <KePanic(char const*)>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	68 56 1f 02 c0       	push   0xc0021f56
c000f9b4:	e8 6e 1b 00 00       	call   c0011527 <KePanic(char const*)>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9c8:	83 c2 2a             	add    edx,0x2a
c000f9cb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f9cf:	8b 02                	mov    eax,DWORD PTR [edx]
c000f9d1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f9d4:	89 01                	mov    DWORD PTR [ecx],eax
c000f9d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9d9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9de:	66 90                	xchg   ax,ax
c000f9e0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f9e5:	e9 3e ff ff ff       	jmp    c000f928 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f9ea:	66 90                	xchg   ax,ax
c000f9ec:	90                   	nop
c000f9ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9f1:	83 c4 2c             	add    esp,0x2c
c000f9f4:	c2 04 00             	ret    0x4
c000f9f7:	90                   	nop

c000f9f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f9f8:	83 ec 1c             	sub    esp,0x1c
c000f9fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9ff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa07:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa0c:	88 c8                	mov    al,cl
c000fa0e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa12:	88 d0                	mov    al,dl
c000fa14:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa1c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa26:	83 c2 2a             	add    edx,0x2a
c000fa29:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fa2d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fa31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa35:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa3f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa46:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fa4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa4f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa55:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa59:	83 c0 01             	add    eax,0x1
c000fa5c:	88 c1                	mov    cl,al
c000fa5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa62:	83 c2 2a             	add    edx,0x2a
c000fa65:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fa69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa6d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa77:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa7e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fa82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa86:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa8c:	8d 50 01             	lea    edx,[eax+0x1]
c000fa8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa93:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fa99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faa3:	3d 00 02 00 00       	cmp    eax,0x200
c000faa8:	75 12                	jne    c000fabc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000faaa:	83 ec 0c             	sub    esp,0xc
c000faad:	68 65 1f 02 c0       	push   0xc0021f65
c000fab2:	e8 70 1a 00 00       	call   c0011527 <KePanic(char const*)>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	66 90                	xchg   ax,ax
c000fabc:	90                   	nop
c000fabd:	83 c4 1c             	add    esp,0x1c
c000fac0:	c3                   	ret    
c000fac1:	90                   	nop
c000fac2:	66 90                	xchg   ax,ax

c000fac4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fac4:	b8 00 00 00 00       	mov    eax,0x0
c000fac9:	c3                   	ret    
c000faca:	66 90                	xchg   ax,ax

c000facc <ACPI::detectPCI()>:
c000facc:	53                   	push   ebx
c000facd:	83 ec 28             	sub    esp,0x28
c000fad0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fad5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fada:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fadf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fae5:	83 e0 04             	and    eax,0x4
c000fae8:	0f b6 c0             	movzx  eax,al
c000faeb:	85 c0                	test   eax,eax
c000faed:	74 2d                	je     c000fb1c <ACPI::detectPCI()+0x50>
c000faef:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000faf4:	83 ec 08             	sub    esp,0x8
c000faf7:	68 82 1f 02 c0       	push   0xc0021f82
c000fafc:	50                   	push   eax
c000fafd:	e8 6e f8 ff ff       	call   c000f370 <findDataTable(unsigned char*, char*)>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb09:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb0e:	74 0c                	je     c000fb1c <ACPI::detectPCI()+0x50>
c000fb10:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb15:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb1a:	66 90                	xchg   ax,ax
c000fb1c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb28:	8a 00                	mov    al,BYTE PTR [eax]
c000fb2a:	0f b6 c0             	movzx  eax,al
c000fb2d:	83 f8 01             	cmp    eax,0x1
c000fb30:	75 0e                	jne    c000fb40 <ACPI::detectPCI()+0x74>
c000fb32:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb37:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb3c:	eb 2e                	jmp    c000fb6c <ACPI::detectPCI()+0xa0>
c000fb3e:	66 90                	xchg   ax,ax
c000fb40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb44:	8a 00                	mov    al,BYTE PTR [eax]
c000fb46:	0f b6 c0             	movzx  eax,al
c000fb49:	83 f8 02             	cmp    eax,0x2
c000fb4c:	75 1e                	jne    c000fb6c <ACPI::detectPCI()+0xa0>
c000fb4e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb53:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb58:	85 c0                	test   eax,eax
c000fb5a:	74 10                	je     c000fb6c <ACPI::detectPCI()+0xa0>
c000fb5c:	83 ec 0c             	sub    esp,0xc
c000fb5f:	68 fc 1e 02 c0       	push   0xc0021efc
c000fb64:	e8 be 19 00 00       	call   c0011527 <KePanic(char const*)>
c000fb69:	83 c4 10             	add    esp,0x10
c000fb6c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fb70:	83 f0 01             	xor    eax,0x1
c000fb73:	0f b6 c0             	movzx  eax,al
c000fb76:	85 c0                	test   eax,eax
c000fb78:	74 46                	je     c000fbc0 <ACPI::detectPCI()+0xf4>
c000fb7a:	e8 b1 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fb7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb83:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fb88:	75 0e                	jne    c000fb98 <ACPI::detectPCI()+0xcc>
c000fb8a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb8f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb94:	eb 2a                	jmp    c000fbc0 <ACPI::detectPCI()+0xf4>
c000fb96:	66 90                	xchg   ax,ax
c000fb98:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fb9d:	75 21                	jne    c000fbc0 <ACPI::detectPCI()+0xf4>
c000fb9f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fba4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fba9:	85 c0                	test   eax,eax
c000fbab:	74 13                	je     c000fbc0 <ACPI::detectPCI()+0xf4>
c000fbad:	83 ec 0c             	sub    esp,0xc
c000fbb0:	68 fc 1e 02 c0       	push   0xc0021efc
c000fbb5:	e8 6d 19 00 00       	call   c0011527 <KePanic(char const*)>
c000fbba:	83 c4 10             	add    esp,0x10
c000fbbd:	8d 76 00             	lea    esi,[esi+0x0]
c000fbc0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fbc5:	85 c0                	test   eax,eax
c000fbc7:	0f 84 87 00 00 00    	je     c000fc54 <ACPI::detectPCI()+0x188>
c000fbcd:	83 ec 0c             	sub    esp,0xc
c000fbd0:	68 87 1f 02 c0       	push   0xc0021f87
c000fbd5:	e8 4f 12 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fbe5:	83 ec 0c             	sub    esp,0xc
c000fbe8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fbec:	e8 e2 7e ff ff       	call   c0007ad3 <malloc>
c000fbf1:	83 c4 10             	add    esp,0x10
c000fbf4:	89 c3                	mov    ebx,eax
c000fbf6:	83 ec 0c             	sub    esp,0xc
c000fbf9:	53                   	push   ebx
c000fbfa:	e8 ff b4 00 00       	call   c001b0fe <PCI::PCI()>
c000fbff:	83 c4 10             	add    esp,0x10
c000fc02:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc0a:	83 ec 08             	sub    esp,0x8
c000fc0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc11:	50                   	push   eax
c000fc12:	e8 49 cd ff ff       	call   c000c960 <Device::addChild(Device*)>
c000fc17:	83 c4 10             	add    esp,0x10
c000fc1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc20:	83 c0 08             	add    eax,0x8
c000fc23:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc25:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc2a:	85 d2                	test   edx,edx
c000fc2c:	74 0a                	je     c000fc38 <ACPI::detectPCI()+0x16c>
c000fc2e:	ba 01 00 00 00       	mov    edx,0x1
c000fc33:	eb 0b                	jmp    c000fc40 <ACPI::detectPCI()+0x174>
c000fc35:	8d 76 00             	lea    esi,[esi+0x0]
c000fc38:	ba 02 00 00 00       	mov    edx,0x2
c000fc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc40:	6a 00                	push   0x0
c000fc42:	6a 00                	push   0x0
c000fc44:	52                   	push   edx
c000fc45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc49:	ff d0                	call   eax
c000fc4b:	83 c4 10             	add    esp,0x10
c000fc4e:	e9 91 00 00 00       	jmp    c000fce4 <ACPI::detectPCI()+0x218>
c000fc53:	90                   	nop
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	68 9f 1f 02 c0       	push   0xc0021f9f
c000fc5c:	e8 c8 11 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fc6b:	83 ec 0c             	sub    esp,0xc
c000fc6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc72:	e8 5c 7e ff ff       	call   c0007ad3 <malloc>
c000fc77:	83 c4 10             	add    esp,0x10
c000fc7a:	89 c3                	mov    ebx,eax
c000fc7c:	83 ec 0c             	sub    esp,0xc
c000fc7f:	53                   	push   ebx
c000fc80:	e8 21 c0 00 00       	call   c001bca6 <IDE::IDE()>
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fc8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc90:	83 ec 08             	sub    esp,0x8
c000fc93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc97:	50                   	push   eax
c000fc98:	e8 c3 cc ff ff       	call   c000c960 <Device::addChild(Device*)>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fca4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fcae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcb2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fcbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcbf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fcc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fccc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcce:	83 c0 08             	add    eax,0x8
c000fcd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd3:	6a 00                	push   0x0
c000fcd5:	6a 00                	push   0x0
c000fcd7:	6a 00                	push   0x0
c000fcd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcdd:	ff d0                	call   eax
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	66 90                	xchg   ax,ax
c000fce4:	90                   	nop
c000fce5:	83 c4 28             	add    esp,0x28
c000fce8:	5b                   	pop    ebx
c000fce9:	c3                   	ret    
c000fcea:	66 90                	xchg   ax,ax

c000fcec <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fcec:	83 ec 1c             	sub    esp,0x1c
c000fcef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fcf6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcfa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fcff:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd04:	83 ec 08             	sub    esp,0x8
c000fd07:	52                   	push   edx
c000fd08:	50                   	push   eax
c000fd09:	e8 8c 74 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fd0e:	83 c4 10             	add    esp,0x10
c000fd11:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd15:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd1a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd1f:	83 ec 04             	sub    esp,0x4
c000fd22:	6a 01                	push   0x1
c000fd24:	52                   	push   edx
c000fd25:	50                   	push   eax
c000fd26:	e8 87 75 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	90                   	nop
c000fd2f:	83 c4 1c             	add    esp,0x1c
c000fd32:	c3                   	ret    
c000fd33:	90                   	nop

c000fd34 <ACPI::sleep()>:
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd3c:	85 c0                	test   eax,eax
c000fd3e:	74 08                	je     c000fd48 <ACPI::sleep()+0x14>
c000fd40:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd45:	ff d0                	call   eax
c000fd47:	90                   	nop
c000fd48:	90                   	nop
c000fd49:	83 c4 0c             	add    esp,0xc
c000fd4c:	c3                   	ret    
c000fd4d:	90                   	nop
c000fd4e:	66 90                	xchg   ax,ax

c000fd50 <ACPI::open(int, int, void*)>:
c000fd50:	55                   	push   ebp
c000fd51:	89 e5                	mov    ebp,esp
c000fd53:	53                   	push   ebx
c000fd54:	81 ec 74 01 00 00    	sub    esp,0x174
c000fd5a:	83 ec 0c             	sub    esp,0xc
c000fd5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd60:	e8 67 fd ff ff       	call   c000facc <ACPI::detectPCI()>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	68 24 1f 02 c0       	push   0xc0021f24
c000fd70:	e8 b4 10 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	b8 4c 05 00 00       	mov    eax,0x54c
c000fd7d:	8a 00                	mov    al,BYTE PTR [eax]
c000fd7f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fd82:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fd86:	83 f8 01             	cmp    eax,0x1
c000fd89:	75 15                	jne    c000fda0 <ACPI::open(int, int, void*)+0x50>
c000fd8b:	83 ec 0c             	sub    esp,0xc
c000fd8e:	68 6f 18 02 c0       	push   0xc002186f
c000fd93:	e8 8b 4d 00 00       	call   c0014b23 <Thr::loadKernelSymbolTable(char const*)>
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	eb 33                	jmp    c000fdd0 <ACPI::open(int, int, void*)+0x80>
c000fd9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fda0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fda4:	3d bb 00 00 00       	cmp    eax,0xbb
c000fda9:	75 15                	jne    c000fdc0 <ACPI::open(int, int, void*)+0x70>
c000fdab:	83 ec 0c             	sub    esp,0xc
c000fdae:	68 b4 1f 02 c0       	push   0xc0021fb4
c000fdb3:	e8 6b 4d 00 00       	call   c0014b23 <Thr::loadKernelSymbolTable(char const*)>
c000fdb8:	83 c4 10             	add    esp,0x10
c000fdbb:	eb 13                	jmp    c000fdd0 <ACPI::open(int, int, void*)+0x80>
c000fdbd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdc0:	83 ec 0c             	sub    esp,0xc
c000fdc3:	68 d2 1f 02 c0       	push   0xc0021fd2
c000fdc8:	e8 5a 17 00 00       	call   c0011527 <KePanic(char const*)>
c000fdcd:	83 c4 10             	add    esp,0x10
c000fdd0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fdd4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fddb:	83 ec 0c             	sub    esp,0xc
c000fdde:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fde1:	e8 ed 7c ff ff       	call   c0007ad3 <malloc>
c000fde6:	83 c4 10             	add    esp,0x10
c000fde9:	89 c3                	mov    ebx,eax
c000fdeb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fdf0:	83 ec 04             	sub    esp,0x4
c000fdf3:	50                   	push   eax
c000fdf4:	68 ec 1f 02 c0       	push   0xc0021fec
c000fdf9:	53                   	push   ebx
c000fdfa:	e8 e3 bc ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c000fdff:	83 c4 10             	add    esp,0x10
c000fe02:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fe05:	83 ec 08             	sub    esp,0x8
c000fe08:	6a 01                	push   0x1
c000fe0a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe0d:	e8 ee bc ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fe18:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fe1c:	75 12                	jne    c000fe30 <ACPI::open(int, int, void*)+0xe0>
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe24:	e8 35 bd ff ff       	call   c000bb5e <File::close()>
c000fe29:	83 c4 10             	add    esp,0x10
c000fe2c:	eb 06                	jmp    c000fe34 <ACPI::open(int, int, void*)+0xe4>
c000fe2e:	66 90                	xchg   ax,ax
c000fe30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe34:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fe38:	74 16                	je     c000fe50 <ACPI::open(int, int, void*)+0x100>
c000fe3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fe3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3f:	83 c0 08             	add    eax,0x8
c000fe42:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe4a:	ff d0                	call   eax
c000fe4c:	83 c4 10             	add    esp,0x10
c000fe4f:	90                   	nop
c000fe50:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fe53:	83 f0 01             	xor    eax,0x1
c000fe56:	0f b6 c0             	movzx  eax,al
c000fe59:	85 c0                	test   eax,eax
c000fe5b:	74 3b                	je     c000fe98 <ACPI::open(int, int, void*)+0x148>
c000fe5d:	83 ec 0c             	sub    esp,0xc
c000fe60:	68 0a 20 02 c0       	push   0xc002200a
c000fe65:	e8 bf 0f 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c000fe6a:	83 c4 10             	add    esp,0x10
c000fe6d:	83 ec 04             	sub    esp,0x4
c000fe70:	6a 0c                	push   0xc
c000fe72:	68 25 20 02 c0       	push   0xc0022025
c000fe77:	68 36 20 02 c0       	push   0xc0022036
c000fe7c:	e8 21 3f 00 00       	call   c0013da2 <Reg::readIntWithDefault(char*, char*, int)>
c000fe81:	83 c4 10             	add    esp,0x10
c000fe84:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fe87:	83 ec 0c             	sub    esp,0xc
c000fe8a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fe8d:	e8 88 99 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fe92:	83 c4 10             	add    esp,0x10
c000fe95:	8d 76 00             	lea    esi,[esi+0x0]
c000fe98:	83 ec 0c             	sub    esp,0xc
c000fe9b:	68 b5 0a 02 c0       	push   0xc0020ab5
c000fea0:	e8 84 0f 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000feab:	83 ec 08             	sub    esp,0x8
c000feae:	6a 13                	push   0x13
c000feb0:	50                   	push   eax
c000feb1:	e8 c2 cd ff ff       	call   c000cc78 <getDevicesOfType(DeviceType)>
c000feb6:	83 c4 0c             	add    esp,0xc
c000feb9:	8d 76 00             	lea    esi,[esi+0x0]
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fec2:	50                   	push   eax
c000fec3:	e8 e8 ff 00 00       	call   c001feb0 <LinkedList<Device>::isEmpty()>
c000fec8:	83 c4 10             	add    esp,0x10
c000fecb:	83 f0 01             	xor    eax,0x1
c000fece:	0f b6 c0             	movzx  eax,al
c000fed1:	85 c0                	test   eax,eax
c000fed3:	0f 84 1f 01 00 00    	je     c000fff8 <ACPI::open(int, int, void*)+0x2a8>
c000fed9:	83 ec 0c             	sub    esp,0xc
c000fedc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fedf:	50                   	push   eax
c000fee0:	e8 e7 ff 00 00       	call   c001fecc <LinkedList<Device>::getFirstElement()>
c000fee5:	83 c4 10             	add    esp,0x10
c000fee8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000feeb:	83 ec 0c             	sub    esp,0xc
c000feee:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fef1:	50                   	push   eax
c000fef2:	e8 dd ff 00 00       	call   c001fed4 <LinkedList<Device>::removeFirst()>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fefd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ff00:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ff03:	b8 24 00 00 00       	mov    eax,0x24
c000ff08:	83 e0 fc             	and    eax,0xfffffffc
c000ff0b:	89 c3                	mov    ebx,eax
c000ff0d:	b8 00 00 00 00       	mov    eax,0x0
c000ff12:	66 90                	xchg   ax,ax
c000ff14:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ff1b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ff22:	83 c0 04             	add    eax,0x4
c000ff25:	39 d8                	cmp    eax,ebx
c000ff27:	72 eb                	jb     c000ff14 <ACPI::open(int, int, void*)+0x1c4>
c000ff29:	83 ec 08             	sub    esp,0x8
c000ff2c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ff32:	50                   	push   eax
c000ff33:	83 ec 24             	sub    esp,0x24
c000ff36:	89 e1                	mov    ecx,esp
c000ff38:	b8 24 00 00 00       	mov    eax,0x24
c000ff3d:	83 e0 fc             	and    eax,0xfffffffc
c000ff40:	89 c3                	mov    ebx,eax
c000ff42:	b8 00 00 00 00       	mov    eax,0x0
c000ff47:	90                   	nop
c000ff48:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ff4f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ff52:	83 c0 04             	add    eax,0x4
c000ff55:	39 d8                	cmp    eax,ebx
c000ff57:	72 ef                	jb     c000ff48 <ACPI::open(int, int, void*)+0x1f8>
c000ff59:	e8 88 b6 00 00       	call   c001b5e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ff5e:	83 c4 30             	add    esp,0x30
c000ff61:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ff64:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ff68:	0f 84 4e ff ff ff    	je     c000febc <ACPI::open(int, int, void*)+0x16c>
c000ff6e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ff75:	83 ec 0c             	sub    esp,0xc
c000ff78:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ff7b:	e8 53 7b ff ff       	call   c0007ad3 <malloc>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	89 c3                	mov    ebx,eax
c000ff85:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff8a:	83 ec 04             	sub    esp,0x4
c000ff8d:	50                   	push   eax
c000ff8e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ff91:	53                   	push   ebx
c000ff92:	e8 4b bb ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ff9d:	83 ec 0c             	sub    esp,0xc
c000ffa0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ffa3:	e8 1c be ff ff       	call   c000bdc4 <File::exists()>
c000ffa8:	83 c4 10             	add    esp,0x10
c000ffab:	0f b6 c0             	movzx  eax,al
c000ffae:	85 c0                	test   eax,eax
c000ffb0:	74 22                	je     c000ffd4 <ACPI::open(int, int, void*)+0x284>
c000ffb2:	83 ec 08             	sub    esp,0x8
c000ffb5:	6a 01                	push   0x1
c000ffb7:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ffba:	e8 e6 55 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c000ffbf:	83 c4 10             	add    esp,0x10
c000ffc2:	83 ec 08             	sub    esp,0x8
c000ffc5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000ffc8:	50                   	push   eax
c000ffc9:	e8 17 58 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c000ffce:	83 c4 10             	add    esp,0x10
c000ffd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffd4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ffd8:	0f 84 de fe ff ff    	je     c000febc <ACPI::open(int, int, void*)+0x16c>
c000ffde:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000ffe1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffe3:	83 c0 08             	add    eax,0x8
c000ffe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ffee:	ff d0                	call   eax
c000fff0:	83 c4 10             	add    esp,0x10
c000fff3:	e9 c4 fe ff ff       	jmp    c000febc <ACPI::open(int, int, void*)+0x16c>
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fffe:	50                   	push   eax
c000ffff:	e8 a8 fe 00 00       	call   c001feac <LinkedList<Device>::~LinkedList()>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c001000d:	83 ec 08             	sub    esp,0x8
c0010010:	6a 01                	push   0x1
c0010012:	68 3d 20 02 c0       	push   0xc002203d
c0010017:	e8 89 55 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c001001c:	83 c4 10             	add    esp,0x10
c001001f:	83 ec 08             	sub    esp,0x8
c0010022:	53                   	push   ebx
c0010023:	50                   	push   eax
c0010024:	e8 bc 57 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c0010029:	83 c4 10             	add    esp,0x10
c001002c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010031:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010037:	83 e0 04             	and    eax,0x4
c001003a:	0f b6 c0             	movzx  eax,al
c001003d:	85 c0                	test   eax,eax
c001003f:	0f 84 e3 00 00 00    	je     c0010128 <ACPI::open(int, int, void*)+0x3d8>
c0010045:	83 ec 0c             	sub    esp,0xc
c0010048:	68 5a 20 02 c0       	push   0xc002205a
c001004d:	e8 d7 0d 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0010052:	83 c4 10             	add    esp,0x10
c0010055:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001005c:	83 ec 0c             	sub    esp,0xc
c001005f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010062:	e8 6c 7a ff ff       	call   c0007ad3 <malloc>
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	89 c3                	mov    ebx,eax
c001006c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010071:	83 ec 04             	sub    esp,0x4
c0010074:	50                   	push   eax
c0010075:	68 77 20 02 c0       	push   0xc0022077
c001007a:	53                   	push   ebx
c001007b:	e8 62 ba ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0010086:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001008a:	74 1c                	je     c00100a8 <ACPI::open(int, int, void*)+0x358>
c001008c:	83 ec 0c             	sub    esp,0xc
c001008f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010092:	e8 2d bd ff ff       	call   c000bdc4 <File::exists()>
c0010097:	83 c4 10             	add    esp,0x10
c001009a:	0f b6 c0             	movzx  eax,al
c001009d:	85 c0                	test   eax,eax
c001009f:	74 07                	je     c00100a8 <ACPI::open(int, int, void*)+0x358>
c00100a1:	b0 01                	mov    al,0x1
c00100a3:	eb 07                	jmp    c00100ac <ACPI::open(int, int, void*)+0x35c>
c00100a5:	8d 76 00             	lea    esi,[esi+0x0]
c00100a8:	b0 00                	mov    al,0x0
c00100aa:	66 90                	xchg   ax,ax
c00100ac:	0f b6 c0             	movzx  eax,al
c00100af:	85 c0                	test   eax,eax
c00100b1:	74 21                	je     c00100d4 <ACPI::open(int, int, void*)+0x384>
c00100b3:	83 ec 08             	sub    esp,0x8
c00100b6:	6a 01                	push   0x1
c00100b8:	68 77 20 02 c0       	push   0xc0022077
c00100bd:	e8 e3 54 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	83 ec 08             	sub    esp,0x8
c00100c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00100cb:	50                   	push   eax
c00100cc:	e8 14 57 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100d8:	74 1e                	je     c00100f8 <ACPI::open(int, int, void*)+0x3a8>
c00100da:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100de:	74 18                	je     c00100f8 <ACPI::open(int, int, void*)+0x3a8>
c00100e0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00100e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e5:	83 c0 08             	add    eax,0x8
c00100e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ea:	83 ec 0c             	sub    esp,0xc
c00100ed:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00100f0:	ff d0                	call   eax
c00100f2:	83 c4 10             	add    esp,0x10
c00100f5:	8d 76 00             	lea    esi,[esi+0x0]
c00100f8:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00100fd:	83 ec 08             	sub    esp,0x8
c0010100:	68 94 20 02 c0       	push   0xc0022094
c0010105:	50                   	push   eax
c0010106:	e8 65 f2 ff ff       	call   c000f370 <findDataTable(unsigned char*, char*)>
c001010b:	83 c4 10             	add    esp,0x10
c001010e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0010111:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0010115:	74 11                	je     c0010128 <ACPI::open(int, int, void*)+0x3d8>
c0010117:	83 ec 08             	sub    esp,0x8
c001011a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001011d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010120:	e8 c7 fb ff ff       	call   c000fcec <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010125:	83 c4 10             	add    esp,0x10
c0010128:	b8 00 00 00 00       	mov    eax,0x0
c001012d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010130:	c9                   	leave  
c0010131:	c3                   	ret    

c0010132 <CPU::close(int, int, void*)>:
c0010132:	31 c0                	xor    eax,eax
c0010134:	c3                   	ret    
c0010135:	90                   	nop

c0010136 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010136:	60                   	pusha  
c0010137:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001013b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001013f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010143:	9c                   	pushf  
c0010144:	fa                   	cli    
c0010145:	0f 09                	wbinvd 
c0010147:	0f 30                	wrmsr  
c0010149:	9d                   	popf   
c001014a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001014e:	89 02                	mov    DWORD PTR [edx],eax
c0010150:	61                   	popa   
c0010151:	c3                   	ret    

c0010152 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010152:	60                   	pusha  
c0010153:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010157:	9c                   	pushf  
c0010158:	fa                   	cli    
c0010159:	0f 09                	wbinvd 
c001015b:	31 c0                	xor    eax,eax
c001015d:	31 d2                	xor    edx,edx
c001015f:	0f 32                	rdmsr  
c0010161:	9d                   	popf   
c0010162:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010166:	89 02                	mov    DWORD PTR [edx],eax
c0010168:	61                   	popa   
c0010169:	c3                   	ret    

c001016a <CPU::AMD_K6_writeback(int, int, int)>:
c001016a:	56                   	push   esi
c001016b:	53                   	push   ebx
c001016c:	83 ec 10             	sub    esp,0x10
c001016f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010178:	75 5d                	jne    c00101d7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001017a:	83 f8 08             	cmp    eax,0x8
c001017d:	75 09                	jne    c0010188 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001017f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010184:	7e 13                	jle    c0010199 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010186:	eb 30                	jmp    c00101b8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010188:	83 f8 06             	cmp    eax,0x6
c001018b:	7c 4a                	jl     c00101d7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001018d:	83 f8 07             	cmp    eax,0x7
c0010190:	7e 07                	jle    c0010199 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010192:	83 f8 09             	cmp    eax,0x9
c0010195:	74 21                	je     c00101b8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010197:	eb 3e                	jmp    c00101d7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010199:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001019f:	89 e6                	mov    esi,esp
c00101a1:	56                   	push   esi
c00101a2:	68 82 00 00 c0       	push   0xc0000082
c00101a7:	e8 a6 ff ff ff       	call   c0010152 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00101ac:	c1 eb 15             	shr    ebx,0x15
c00101af:	56                   	push   esi
c00101b0:	83 e3 7e             	and    ebx,0x7e
c00101b3:	6a 00                	push   0x0
c00101b5:	53                   	push   ebx
c00101b6:	eb 12                	jmp    c00101ca <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00101b8:	89 e3                	mov    ebx,esp
c00101ba:	53                   	push   ebx
c00101bb:	68 82 00 00 c0       	push   0xc0000082
c00101c0:	e8 8d ff ff ff       	call   c0010152 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00101c5:	53                   	push   ebx
c00101c6:	6a 00                	push   0x0
c00101c8:	6a 00                	push   0x0
c00101ca:	68 82 00 00 c0       	push   0xc0000082
c00101cf:	e8 62 ff ff ff       	call   c0010136 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00101d4:	83 c4 18             	add    esp,0x18
c00101d7:	83 c4 10             	add    esp,0x10
c00101da:	5b                   	pop    ebx
c00101db:	5e                   	pop    esi
c00101dc:	c3                   	ret    
c00101dd:	90                   	nop

c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00101de:	55                   	push   ebp
c00101df:	57                   	push   edi
c00101e0:	56                   	push   esi
c00101e1:	53                   	push   ebx
c00101e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e6:	39 05 58 36 02 c0    	cmp    DWORD PTR ds:0xc0023658,eax
c00101ec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00101f0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00101f4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00101f8:	75 23                	jne    c001021d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00101fa:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00101ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010203:	89 06                	mov    DWORD PTR [esi],eax
c0010205:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001020a:	89 07                	mov    DWORD PTR [edi],eax
c001020c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010211:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010214:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010219:	89 02                	mov    DWORD PTR [edx],eax
c001021b:	eb 3f                	jmp    c001025c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001021d:	31 c9                	xor    ecx,ecx
c001021f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010223:	0f a2                	cpuid  
c0010225:	89 06                	mov    DWORD PTR [esi],eax
c0010227:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001022b:	89 1f                	mov    DWORD PTR [edi],ebx
c001022d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010230:	89 10                	mov    DWORD PTR [eax],edx
c0010232:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010236:	a3 58 36 02 c0       	mov    ds:0xc0023658,eax
c001023b:	8b 06                	mov    eax,DWORD PTR [esi]
c001023d:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010242:	8b 07                	mov    eax,DWORD PTR [edi]
c0010244:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010249:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001024c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010251:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010255:	8b 00                	mov    eax,DWORD PTR [eax]
c0010257:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001025c:	5b                   	pop    ebx
c001025d:	5e                   	pop    esi
c001025e:	5f                   	pop    edi
c001025f:	5d                   	pop    ebp
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <CPU::cpuidCheckEDX(unsigned int)>:
c0010262:	83 ec 10             	sub    esp,0x10
c0010265:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010269:	50                   	push   eax
c001026a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001026e:	50                   	push   eax
c001026f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010273:	50                   	push   eax
c0010274:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010278:	50                   	push   eax
c0010279:	6a 01                	push   0x1
c001027b:	e8 5e ff ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010280:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010284:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010288:	0f 95 c0             	setne  al
c001028b:	83 c4 24             	add    esp,0x24
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <CPU::cpuidCheckECX(unsigned int)>:
c0010290:	83 ec 10             	sub    esp,0x10
c0010293:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010297:	50                   	push   eax
c0010298:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001029c:	50                   	push   eax
c001029d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102a1:	50                   	push   eax
c00102a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102a6:	50                   	push   eax
c00102a7:	6a 01                	push   0x1
c00102a9:	e8 30 ff ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102b2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00102b6:	0f 95 c0             	setne  al
c00102b9:	83 c4 24             	add    esp,0x24
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00102be:	83 ec 10             	sub    esp,0x10
c00102c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102c5:	50                   	push   eax
c00102c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102ca:	50                   	push   eax
c00102cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102cf:	50                   	push   eax
c00102d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102d4:	50                   	push   eax
c00102d5:	6a 07                	push   0x7
c00102d7:	e8 02 ff ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102e0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00102e4:	0f 95 c0             	setne  al
c00102e7:	83 c4 24             	add    esp,0x24
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00102ec:	83 ec 10             	sub    esp,0x10
c00102ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102f3:	50                   	push   eax
c00102f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102f8:	50                   	push   eax
c00102f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102fd:	50                   	push   eax
c00102fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010302:	50                   	push   eax
c0010303:	6a 07                	push   0x7
c0010305:	e8 d4 fe ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001030a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001030e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010312:	0f 95 c0             	setne  al
c0010315:	83 c4 24             	add    esp,0x24
c0010318:	c3                   	ret    
c0010319:	90                   	nop

c001031a <CPU::CPU()>:
c001031a:	83 ec 0c             	sub    esp,0xc
c001031d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010321:	83 ec 08             	sub    esp,0x8
c0010324:	68 b9 21 02 c0       	push   0xc00221b9
c0010329:	50                   	push   eax
c001032a:	e8 c9 c7 ff ff       	call   c000caf8 <Device::Device(char const*)>
c001032f:	83 c4 10             	add    esp,0x10
c0010332:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c0010337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033b:	89 10                	mov    DWORD PTR [eax],edx
c001033d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010341:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001034b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001034f:	05 78 01 00 00       	add    eax,0x178
c0010354:	83 ec 0c             	sub    esp,0xc
c0010357:	50                   	push   eax
c0010358:	e8 1f 70 ff ff       	call   c000737c <GDT::GDT()>
c001035d:	83 c4 10             	add    esp,0x10
c0010360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010364:	05 7c 09 00 00       	add    eax,0x97c
c0010369:	83 ec 0c             	sub    esp,0xc
c001036c:	50                   	push   eax
c001036d:	e8 5a 72 ff ff       	call   c00075cc <IDT::IDT()>
c0010372:	83 c4 10             	add    esp,0x10
c0010375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010379:	05 7c 11 00 00       	add    eax,0x117c
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	50                   	push   eax
c0010382:	e8 a5 8b ff ff       	call   c0008f2c <TSS::TSS()>
c0010387:	83 c4 10             	add    esp,0x10
c001038a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001038e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010399:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00103a3:	90                   	nop
c00103a4:	83 c4 0c             	add    esp,0xc
c00103a7:	c3                   	ret    

c00103a8 <CPU::displayFeatures()>:
c00103a8:	c3                   	ret    
c00103a9:	90                   	nop

c00103aa <CPU::detectFeatures()>:
c00103aa:	55                   	push   ebp
c00103ab:	57                   	push   edi
c00103ac:	56                   	push   esi
c00103ad:	53                   	push   ebx
c00103ae:	83 ec 30             	sub    esp,0x30
c00103b1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00103b5:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00103bf:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00103c5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00103cc:	6a 0d                	push   0xd
c00103ce:	6a 00                	push   0x0
c00103d0:	55                   	push   ebp
c00103d1:	e8 1a 01 ff ff       	call   c00004f0 <memset>
c00103d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00103db:	83 c4 10             	add    esp,0x10
c00103de:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00103e5:	0f 84 db 05 00 00    	je     c00109c6 <CPU::detectFeatures()+0x61c>
c00103eb:	83 ec 0c             	sub    esp,0xc
c00103ee:	89 ef                	mov    edi,ebp
c00103f0:	6a 10                	push   0x10
c00103f2:	e8 6b fe ff ff       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c00103f7:	83 e0 01             	and    eax,0x1
c00103fa:	8d 14 00             	lea    edx,[eax+eax*1]
c00103fd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010403:	83 e0 fd             	and    eax,0xfffffffd
c0010406:	09 d0                	or     eax,edx
c0010408:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001040e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010415:	e8 48 fe ff ff       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c001041a:	83 e0 01             	and    eax,0x1
c001041d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010424:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001042a:	83 e0 fb             	and    eax,0xfffffffb
c001042d:	09 d0                	or     eax,edx
c001042f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010435:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001043c:	e8 21 fe ff ff       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c0010441:	83 e0 01             	and    eax,0x1
c0010444:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001044b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010451:	83 e0 f7             	and    eax,0xfffffff7
c0010454:	09 d0                	or     eax,edx
c0010456:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001045c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010463:	e8 fa fd ff ff       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c0010468:	83 e0 01             	and    eax,0x1
c001046b:	c1 e0 04             	shl    eax,0x4
c001046e:	89 c2                	mov    edx,eax
c0010470:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010476:	83 e0 ef             	and    eax,0xffffffef
c0010479:	09 d0                	or     eax,edx
c001047b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010481:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010488:	e8 d5 fd ff ff       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c001048d:	83 e0 01             	and    eax,0x1
c0010490:	c1 e0 05             	shl    eax,0x5
c0010493:	89 c2                	mov    edx,eax
c0010495:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001049b:	83 e0 df             	and    eax,0xffffffdf
c001049e:	09 d0                	or     eax,edx
c00104a0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104a6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00104ad:	e8 b0 fd ff ff       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c00104b2:	83 e0 01             	and    eax,0x1
c00104b5:	8d 14 00             	lea    edx,[eax+eax*1]
c00104b8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104be:	83 e0 fd             	and    eax,0xfffffffd
c00104c1:	09 d0                	or     eax,edx
c00104c3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104c9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00104d0:	e8 8d fd ff ff       	call   c0010262 <CPU::cpuidCheckEDX(unsigned int)>
c00104d5:	83 e0 01             	and    eax,0x1
c00104d8:	c1 e0 06             	shl    eax,0x6
c00104db:	89 c2                	mov    edx,eax
c00104dd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104e3:	83 e0 bf             	and    eax,0xffffffbf
c00104e6:	09 d0                	or     eax,edx
c00104e8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104ee:	58                   	pop    eax
c00104ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104f3:	50                   	push   eax
c00104f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104f8:	50                   	push   eax
c00104f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00104fd:	56                   	push   esi
c00104fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010502:	50                   	push   eax
c0010503:	6a 00                	push   0x0
c0010505:	e8 d4 fc ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001050a:	b8 04 00 00 00       	mov    eax,0x4
c001050f:	89 c1                	mov    ecx,eax
c0010511:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010513:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010519:	89 c1                	mov    ecx,eax
c001051b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001051f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010521:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010527:	89 c1                	mov    ecx,eax
c0010529:	8d 74 24 38          	lea    esi,[esp+0x38]
c001052d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001052f:	83 c4 18             	add    esp,0x18
c0010532:	68 c8 20 02 c0       	push   0xc00220c8
c0010537:	55                   	push   ebp
c0010538:	e8 43 02 ff ff       	call   c0000780 <strcmp>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	85 c0                	test   eax,eax
c0010542:	75 0f                	jne    c0010553 <CPU::detectFeatures()+0x1a9>
c0010544:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001054e:	e9 22 02 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c0010553:	50                   	push   eax
c0010554:	50                   	push   eax
c0010555:	68 d5 20 02 c0       	push   0xc00220d5
c001055a:	55                   	push   ebp
c001055b:	e8 20 02 ff ff       	call   c0000780 <strcmp>
c0010560:	83 c4 10             	add    esp,0x10
c0010563:	85 c0                	test   eax,eax
c0010565:	74 dd                	je     c0010544 <CPU::detectFeatures()+0x19a>
c0010567:	50                   	push   eax
c0010568:	50                   	push   eax
c0010569:	68 e2 20 02 c0       	push   0xc00220e2
c001056e:	55                   	push   ebp
c001056f:	e8 0c 02 ff ff       	call   c0000780 <strcmp>
c0010574:	83 c4 10             	add    esp,0x10
c0010577:	85 c0                	test   eax,eax
c0010579:	74 2a                	je     c00105a5 <CPU::detectFeatures()+0x1fb>
c001057b:	50                   	push   eax
c001057c:	50                   	push   eax
c001057d:	68 ef 20 02 c0       	push   0xc00220ef
c0010582:	55                   	push   ebp
c0010583:	e8 f8 01 ff ff       	call   c0000780 <strcmp>
c0010588:	83 c4 10             	add    esp,0x10
c001058b:	85 c0                	test   eax,eax
c001058d:	74 16                	je     c00105a5 <CPU::detectFeatures()+0x1fb>
c001058f:	50                   	push   eax
c0010590:	50                   	push   eax
c0010591:	68 fc 20 02 c0       	push   0xc00220fc
c0010596:	55                   	push   ebp
c0010597:	e8 e4 01 ff ff       	call   c0000780 <strcmp>
c001059c:	83 c4 10             	add    esp,0x10
c001059f:	85 c0                	test   eax,eax
c00105a1:	74 48                	je     c00105eb <CPU::detectFeatures()+0x241>
c00105a3:	eb 0f                	jmp    c00105b4 <CPU::detectFeatures()+0x20a>
c00105a5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00105af:	e9 c1 01 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c00105b4:	50                   	push   eax
c00105b5:	50                   	push   eax
c00105b6:	68 09 21 02 c0       	push   0xc0022109
c00105bb:	55                   	push   ebp
c00105bc:	e8 bf 01 ff ff       	call   c0000780 <strcmp>
c00105c1:	83 c4 10             	add    esp,0x10
c00105c4:	85 c0                	test   eax,eax
c00105c6:	74 23                	je     c00105eb <CPU::detectFeatures()+0x241>
c00105c8:	57                   	push   edi
c00105c9:	57                   	push   edi
c00105ca:	68 16 21 02 c0       	push   0xc0022116
c00105cf:	55                   	push   ebp
c00105d0:	e8 ab 01 ff ff       	call   c0000780 <strcmp>
c00105d5:	83 c4 10             	add    esp,0x10
c00105d8:	85 c0                	test   eax,eax
c00105da:	75 1e                	jne    c00105fa <CPU::detectFeatures()+0x250>
c00105dc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00105e6:	e9 8a 01 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c00105eb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00105f5:	e9 7b 01 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c00105fa:	56                   	push   esi
c00105fb:	56                   	push   esi
c00105fc:	68 23 21 02 c0       	push   0xc0022123
c0010601:	55                   	push   ebp
c0010602:	e8 79 01 ff ff       	call   c0000780 <strcmp>
c0010607:	83 c4 10             	add    esp,0x10
c001060a:	85 c0                	test   eax,eax
c001060c:	75 0f                	jne    c001061d <CPU::detectFeatures()+0x273>
c001060e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010618:	e9 58 01 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c001061d:	51                   	push   ecx
c001061e:	51                   	push   ecx
c001061f:	68 e2 20 02 c0       	push   0xc00220e2
c0010624:	55                   	push   ebp
c0010625:	e8 56 01 ff ff       	call   c0000780 <strcmp>
c001062a:	83 c4 10             	add    esp,0x10
c001062d:	85 c0                	test   eax,eax
c001062f:	75 0f                	jne    c0010640 <CPU::detectFeatures()+0x296>
c0010631:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001063b:	e9 35 01 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c0010640:	52                   	push   edx
c0010641:	52                   	push   edx
c0010642:	68 30 21 02 c0       	push   0xc0022130
c0010647:	55                   	push   ebp
c0010648:	e8 33 01 ff ff       	call   c0000780 <strcmp>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	85 c0                	test   eax,eax
c0010652:	75 0f                	jne    c0010663 <CPU::detectFeatures()+0x2b9>
c0010654:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001065e:	e9 12 01 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c0010663:	50                   	push   eax
c0010664:	50                   	push   eax
c0010665:	68 3d 21 02 c0       	push   0xc002213d
c001066a:	55                   	push   ebp
c001066b:	e8 10 01 ff ff       	call   c0000780 <strcmp>
c0010670:	83 c4 10             	add    esp,0x10
c0010673:	85 c0                	test   eax,eax
c0010675:	75 0f                	jne    c0010686 <CPU::detectFeatures()+0x2dc>
c0010677:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010681:	e9 ef 00 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c0010686:	50                   	push   eax
c0010687:	50                   	push   eax
c0010688:	68 4a 21 02 c0       	push   0xc002214a
c001068d:	55                   	push   ebp
c001068e:	e8 ed 00 ff ff       	call   c0000780 <strcmp>
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	85 c0                	test   eax,eax
c0010698:	75 0f                	jne    c00106a9 <CPU::detectFeatures()+0x2ff>
c001069a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00106a4:	e9 cc 00 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c00106a9:	50                   	push   eax
c00106aa:	50                   	push   eax
c00106ab:	68 57 21 02 c0       	push   0xc0022157
c00106b0:	55                   	push   ebp
c00106b1:	e8 ca 00 ff ff       	call   c0000780 <strcmp>
c00106b6:	83 c4 10             	add    esp,0x10
c00106b9:	85 c0                	test   eax,eax
c00106bb:	75 0f                	jne    c00106cc <CPU::detectFeatures()+0x322>
c00106bd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00106c7:	e9 a9 00 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c00106cc:	50                   	push   eax
c00106cd:	50                   	push   eax
c00106ce:	68 64 21 02 c0       	push   0xc0022164
c00106d3:	55                   	push   ebp
c00106d4:	e8 a7 00 ff ff       	call   c0000780 <strcmp>
c00106d9:	83 c4 10             	add    esp,0x10
c00106dc:	85 c0                	test   eax,eax
c00106de:	75 0f                	jne    c00106ef <CPU::detectFeatures()+0x345>
c00106e0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00106ea:	e9 86 00 00 00       	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c00106ef:	50                   	push   eax
c00106f0:	50                   	push   eax
c00106f1:	68 71 21 02 c0       	push   0xc0022171
c00106f6:	55                   	push   ebp
c00106f7:	e8 84 00 ff ff       	call   c0000780 <strcmp>
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	85 c0                	test   eax,eax
c0010701:	75 0c                	jne    c001070f <CPU::detectFeatures()+0x365>
c0010703:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001070d:	eb 66                	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c001070f:	50                   	push   eax
c0010710:	50                   	push   eax
c0010711:	68 7e 21 02 c0       	push   0xc002217e
c0010716:	55                   	push   ebp
c0010717:	e8 64 00 ff ff       	call   c0000780 <strcmp>
c001071c:	83 c4 10             	add    esp,0x10
c001071f:	85 c0                	test   eax,eax
c0010721:	75 0c                	jne    c001072f <CPU::detectFeatures()+0x385>
c0010723:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001072d:	eb 46                	jmp    c0010775 <CPU::detectFeatures()+0x3cb>
c001072f:	57                   	push   edi
c0010730:	57                   	push   edi
c0010731:	68 8b 21 02 c0       	push   0xc002218b
c0010736:	55                   	push   ebp
c0010737:	e8 44 00 ff ff       	call   c0000780 <strcmp>
c001073c:	83 c4 10             	add    esp,0x10
c001073f:	85 c0                	test   eax,eax
c0010741:	74 e0                	je     c0010723 <CPU::detectFeatures()+0x379>
c0010743:	56                   	push   esi
c0010744:	56                   	push   esi
c0010745:	68 98 21 02 c0       	push   0xc0022198
c001074a:	55                   	push   ebp
c001074b:	e8 30 00 ff ff       	call   c0000780 <strcmp>
c0010750:	83 c4 10             	add    esp,0x10
c0010753:	85 c0                	test   eax,eax
c0010755:	74 cc                	je     c0010723 <CPU::detectFeatures()+0x379>
c0010757:	51                   	push   ecx
c0010758:	51                   	push   ecx
c0010759:	68 a5 21 02 c0       	push   0xc00221a5
c001075e:	55                   	push   ebp
c001075f:	e8 1c 00 ff ff       	call   c0000780 <strcmp>
c0010764:	83 c4 10             	add    esp,0x10
c0010767:	85 c0                	test   eax,eax
c0010769:	74 b8                	je     c0010723 <CPU::detectFeatures()+0x379>
c001076b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010775:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001077a:	0f 86 be 00 00 00    	jbe    c001083e <CPU::detectFeatures()+0x494>
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	68 80 00 00 00       	push   0x80
c0010788:	e8 31 fb ff ff       	call   c00102be <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001078d:	83 e0 01             	and    eax,0x1
c0010790:	c1 e0 06             	shl    eax,0x6
c0010793:	89 c2                	mov    edx,eax
c0010795:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001079b:	83 e0 bf             	and    eax,0xffffffbf
c001079e:	09 d0                	or     eax,edx
c00107a0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00107a6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00107ad:	e8 0c fb ff ff       	call   c00102be <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107b2:	83 e0 01             	and    eax,0x1
c00107b5:	c1 e0 04             	shl    eax,0x4
c00107b8:	89 c2                	mov    edx,eax
c00107ba:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107c0:	83 e0 ef             	and    eax,0xffffffef
c00107c3:	09 d0                	or     eax,edx
c00107c5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107cb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00107d2:	e8 e7 fa ff ff       	call   c00102be <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107d7:	89 c2                	mov    edx,eax
c00107d9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00107df:	c1 e2 07             	shl    edx,0x7
c00107e2:	83 e0 7f             	and    eax,0x7f
c00107e5:	09 d0                	or     eax,edx
c00107e7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00107ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00107f4:	e8 f3 fa ff ff       	call   c00102ec <CPU::cpuidCheckExtendedECX(unsigned int)>
c00107f9:	83 e0 01             	and    eax,0x1
c00107fc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010803:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010809:	83 e0 f7             	and    eax,0xfffffff7
c001080c:	09 d0                	or     eax,edx
c001080e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010814:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001081b:	e8 cc fa ff ff       	call   c00102ec <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	83 e0 01             	and    eax,0x1
c0010826:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001082d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010833:	83 e0 fb             	and    eax,0xfffffffb
c0010836:	09 d0                	or     eax,edx
c0010838:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001083e:	83 ec 0c             	sub    esp,0xc
c0010841:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010845:	50                   	push   eax
c0010846:	8d 44 24 28          	lea    eax,[esp+0x28]
c001084a:	50                   	push   eax
c001084b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001084f:	57                   	push   edi
c0010850:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010854:	56                   	push   esi
c0010855:	6a 01                	push   0x1
c0010857:	e8 82 f9 ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001085c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010860:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010866:	89 c1                	mov    ecx,eax
c0010868:	83 e1 0f             	and    ecx,0xf
c001086b:	83 e2 f0             	and    edx,0xfffffff0
c001086e:	09 ca                	or     edx,ecx
c0010870:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010876:	89 c2                	mov    edx,eax
c0010878:	c1 ea 04             	shr    edx,0x4
c001087b:	83 e2 0f             	and    edx,0xf
c001087e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010882:	89 d1                	mov    ecx,edx
c0010884:	83 c4 20             	add    esp,0x20
c0010887:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001088d:	c1 e1 06             	shl    ecx,0x6
c0010890:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010896:	09 ca                	or     edx,ecx
c0010898:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001089f:	89 c2                	mov    edx,eax
c00108a1:	c1 ea 08             	shr    edx,0x8
c00108a4:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00108aa:	83 e2 0f             	and    edx,0xf
c00108ad:	89 d5                	mov    ebp,edx
c00108af:	83 e5 03             	and    ebp,0x3
c00108b2:	c1 e5 06             	shl    ebp,0x6
c00108b5:	83 e1 3f             	and    ecx,0x3f
c00108b8:	09 e9                	or     ecx,ebp
c00108ba:	89 d5                	mov    ebp,edx
c00108bc:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00108c2:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00108c8:	c1 ed 02             	shr    ebp,0x2
c00108cb:	83 e1 c0             	and    ecx,0xffffffc0
c00108ce:	09 e9                	or     ecx,ebp
c00108d0:	89 c5                	mov    ebp,eax
c00108d2:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00108d8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00108de:	c1 ed 08             	shr    ebp,0x8
c00108e1:	83 e5 30             	and    ebp,0x30
c00108e4:	83 e1 cf             	and    ecx,0xffffffcf
c00108e7:	09 e9                	or     ecx,ebp
c00108e9:	83 fa 06             	cmp    edx,0x6
c00108ec:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00108f2:	74 05                	je     c00108f9 <CPU::detectFeatures()+0x54f>
c00108f4:	83 fa 0f             	cmp    edx,0xf
c00108f7:	75 64                	jne    c001095d <CPU::detectFeatures()+0x5b3>
c00108f9:	89 c1                	mov    ecx,eax
c00108fb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010901:	c1 e9 10             	shr    ecx,0x10
c0010904:	c1 e1 04             	shl    ecx,0x4
c0010907:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001090b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010911:	0f b6 c9             	movzx  ecx,cl
c0010914:	c1 e1 06             	shl    ecx,0x6
c0010917:	09 e9                	or     ecx,ebp
c0010919:	83 fa 0f             	cmp    edx,0xf
c001091c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010923:	75 38                	jne    c001095d <CPU::detectFeatures()+0x5b3>
c0010925:	c1 e8 14             	shr    eax,0x14
c0010928:	83 c0 0f             	add    eax,0xf
c001092b:	0f b6 c0             	movzx  eax,al
c001092e:	89 c2                	mov    edx,eax
c0010930:	c1 e8 02             	shr    eax,0x2
c0010933:	83 e2 03             	and    edx,0x3
c0010936:	89 d1                	mov    ecx,edx
c0010938:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001093e:	c1 e1 06             	shl    ecx,0x6
c0010941:	83 e2 3f             	and    edx,0x3f
c0010944:	09 ca                	or     edx,ecx
c0010946:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001094c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010952:	83 e2 c0             	and    edx,0xffffffc0
c0010955:	09 d0                	or     eax,edx
c0010957:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001095d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010963:	83 ec 0c             	sub    esp,0xc
c0010966:	83 c8 07             	or     eax,0x7
c0010969:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001096f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010973:	50                   	push   eax
c0010974:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010978:	55                   	push   ebp
c0010979:	57                   	push   edi
c001097a:	56                   	push   esi
c001097b:	68 00 00 00 80       	push   0x80000000
c0010980:	e8 59 f8 ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010985:	83 c4 20             	add    esp,0x20
c0010988:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010990:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010994:	76 1e                	jbe    c00109b4 <CPU::detectFeatures()+0x60a>
c0010996:	83 ec 0c             	sub    esp,0xc
c0010999:	50                   	push   eax
c001099a:	55                   	push   ebp
c001099b:	57                   	push   edi
c001099c:	56                   	push   esi
c001099d:	68 01 00 00 80       	push   0x80000001
c00109a2:	e8 37 f8 ff ff       	call   c00101de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109a7:	83 c4 20             	add    esp,0x20
c00109aa:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00109b4:	52                   	push   edx
c00109b5:	52                   	push   edx
c00109b6:	68 b1 21 02 c0       	push   0xc00221b1
c00109bb:	53                   	push   ebx
c00109bc:	e8 29 c1 ff ff       	call   c000caea <Device::setName(char const*)>
c00109c1:	83 c4 10             	add    esp,0x10
c00109c4:	eb 69                	jmp    c0010a2f <CPU::detectFeatures()+0x685>
c00109c6:	50                   	push   eax
c00109c7:	50                   	push   eax
c00109c8:	68 16 21 02 c0       	push   0xc0022116
c00109cd:	55                   	push   ebp
c00109ce:	e8 7d fc fe ff       	call   c0000650 <strcpy>
c00109d3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00109dd:	e8 e1 f7 fe ff       	call   c00001c3 <is486>
c00109e2:	83 c4 10             	add    esp,0x10
c00109e5:	85 c0                	test   eax,eax
c00109e7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109ed:	74 1f                	je     c0010a0e <CPU::detectFeatures()+0x664>
c00109ef:	83 c8 07             	or     eax,0x7
c00109f2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109f8:	0f 20 c0             	mov    eax,cr0
c00109fb:	83 e0 14             	and    eax,0x14
c00109fe:	83 f8 04             	cmp    eax,0x4
c0010a01:	75 10                	jne    c0010a13 <CPU::detectFeatures()+0x669>
c0010a03:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a09:	83 e0 fd             	and    eax,0xfffffffd
c0010a0c:	eb 1b                	jmp    c0010a29 <CPU::detectFeatures()+0x67f>
c0010a0e:	83 e0 f8             	and    eax,0xfffffff8
c0010a11:	eb df                	jmp    c00109f2 <CPU::detectFeatures()+0x648>
c0010a13:	e8 86 f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a18:	83 e0 01             	and    eax,0x1
c0010a1b:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a1e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a24:	83 e0 fd             	and    eax,0xfffffffd
c0010a27:	09 d0                	or     eax,edx
c0010a29:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a2f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010a36:	74 17                	je     c0010a4f <CPU::detectFeatures()+0x6a5>
c0010a38:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010a3e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010a44:	83 c8 10             	or     eax,0x10
c0010a47:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010a4d:	eb 20                	jmp    c0010a6f <CPU::detectFeatures()+0x6c5>
c0010a4f:	e8 4a f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a54:	83 e0 01             	and    eax,0x1
c0010a57:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a5a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a60:	83 e0 fd             	and    eax,0xfffffffd
c0010a63:	09 d0                	or     eax,edx
c0010a65:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a6b:	a8 02                	test   al,0x2
c0010a6d:	75 c9                	jne    c0010a38 <CPU::detectFeatures()+0x68e>
c0010a6f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010a76:	83 c4 2c             	add    esp,0x2c
c0010a79:	5b                   	pop    ebx
c0010a7a:	5e                   	pop    esi
c0010a7b:	5f                   	pop    edi
c0010a7c:	5d                   	pop    ebp
c0010a7d:	c3                   	ret    

c0010a7e <CPU::setupSMEP()>:
c0010a7e:	0f 20 e0             	mov    eax,cr4
c0010a81:	0d 00 00 10 00       	or     eax,0x100000
c0010a86:	0f 22 e0             	mov    cr4,eax
c0010a89:	c3                   	ret    

c0010a8a <CPU::setupUMIP()>:
c0010a8a:	0f 20 e0             	mov    eax,cr4
c0010a8d:	80 cc 08             	or     ah,0x8
c0010a90:	0f 22 e0             	mov    cr4,eax
c0010a93:	c3                   	ret    

c0010a94 <CPU::setupTSC()>:
c0010a94:	0f 20 e0             	mov    eax,cr4
c0010a97:	83 c8 04             	or     eax,0x4
c0010a9a:	0f 22 e0             	mov    cr4,eax
c0010a9d:	c3                   	ret    

c0010a9e <CPU::setupLargePages()>:
c0010a9e:	0f 20 e0             	mov    eax,cr4
c0010aa1:	83 c8 10             	or     eax,0x10
c0010aa4:	0f 22 e0             	mov    cr4,eax
c0010aa7:	c3                   	ret    

c0010aa8 <CPU::setupPAT()>:
c0010aa8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010aad:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010ab4:	74 2c                	je     c0010ae2 <CPU::setupPAT()+0x3a>
c0010ab6:	53                   	push   ebx
c0010ab7:	83 ec 10             	sub    esp,0x10
c0010aba:	68 77 02 00 00       	push   0x277
c0010abf:	50                   	push   eax
c0010ac0:	e8 1d 66 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010ac5:	83 e2 f8             	and    edx,0xfffffff8
c0010ac8:	83 ca 01             	or     edx,0x1
c0010acb:	52                   	push   edx
c0010acc:	50                   	push   eax
c0010acd:	68 77 02 00 00       	push   0x277
c0010ad2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010ad8:	e8 31 66 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010add:	83 c4 28             	add    esp,0x28
c0010ae0:	5b                   	pop    ebx
c0010ae1:	c3                   	ret    
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <CPU::setupMTRR()>:
c0010ae4:	c3                   	ret    
c0010ae5:	90                   	nop

c0010ae6 <CPU::setupGlobalPages()>:
c0010ae6:	0f 20 e0             	mov    eax,cr4
c0010ae9:	0c 80                	or     al,0x80
c0010aeb:	0f 22 e0             	mov    cr4,eax
c0010aee:	c3                   	ret    
c0010aef:	90                   	nop

c0010af0 <CPU::allowUsermodeDataAccess()>:
c0010af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010af4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010afb:	74 03                	je     c0010b00 <CPU::allowUsermodeDataAccess()+0x10>
c0010afd:	0f 01 cb             	stac   
c0010b00:	c3                   	ret    
c0010b01:	90                   	nop

c0010b02 <CPU::prohibitUsermodeDataAccess()>:
c0010b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b06:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b0d:	74 03                	je     c0010b12 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010b0f:	0f 01 ca             	clac   
c0010b12:	c3                   	ret    
c0010b13:	90                   	nop

c0010b14 <CPU::setupSMAP()>:
c0010b14:	0f 20 e0             	mov    eax,cr4
c0010b17:	0d 00 00 20 00       	or     eax,0x200000
c0010b1c:	0f 22 e0             	mov    cr4,eax
c0010b1f:	eb e1                	jmp    c0010b02 <CPU::prohibitUsermodeDataAccess()>
c0010b21:	90                   	nop

c0010b22 <CPU::setupFeatures()>:
c0010b22:	53                   	push   ebx
c0010b23:	83 ec 08             	sub    esp,0x8
c0010b26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b2a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010b31:	74 18                	je     c0010b4b <CPU::setupFeatures()+0x29>
c0010b33:	83 ec 0c             	sub    esp,0xc
c0010b36:	68 bd 21 02 c0       	push   0xc00221bd
c0010b3b:	e8 ca 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b43:	e8 42 ff ff ff       	call   c0010a8a <CPU::setupUMIP()>
c0010b48:	83 c4 10             	add    esp,0x10
c0010b4b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010b52:	74 18                	je     c0010b6c <CPU::setupFeatures()+0x4a>
c0010b54:	83 ec 0c             	sub    esp,0xc
c0010b57:	68 c7 21 02 c0       	push   0xc00221c7
c0010b5c:	e8 a9 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b64:	e8 2b ff ff ff       	call   c0010a94 <CPU::setupTSC()>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010b73:	74 18                	je     c0010b8d <CPU::setupFeatures()+0x6b>
c0010b75:	83 ec 0c             	sub    esp,0xc
c0010b78:	68 d0 21 02 c0       	push   0xc00221d0
c0010b7d:	e8 88 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b85:	e8 14 ff ff ff       	call   c0010a9e <CPU::setupLargePages()>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010b94:	74 18                	je     c0010bae <CPU::setupFeatures()+0x8c>
c0010b96:	83 ec 0c             	sub    esp,0xc
c0010b99:	68 d9 21 02 c0       	push   0xc00221d9
c0010b9e:	e8 67 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010ba3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ba6:	e8 3b ff ff ff       	call   c0010ae6 <CPU::setupGlobalPages()>
c0010bab:	83 c4 10             	add    esp,0x10
c0010bae:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010bb5:	74 18                	je     c0010bcf <CPU::setupFeatures()+0xad>
c0010bb7:	83 ec 0c             	sub    esp,0xc
c0010bba:	68 eb 21 02 c0       	push   0xc00221eb
c0010bbf:	e8 46 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bc7:	e8 dc fe ff ff       	call   c0010aa8 <CPU::setupPAT()>
c0010bcc:	83 c4 10             	add    esp,0x10
c0010bcf:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010bd6:	74 11                	je     c0010be9 <CPU::setupFeatures()+0xc7>
c0010bd8:	c7 44 24 10 f4 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc00221f4
c0010be0:	83 c4 08             	add    esp,0x8
c0010be3:	5b                   	pop    ebx
c0010be4:	e9 21 9d ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010be9:	83 c4 08             	add    esp,0x8
c0010bec:	5b                   	pop    ebx
c0010bed:	c3                   	ret    

c0010bee <CPU::open(int, int, void*)>:
c0010bee:	55                   	push   ebp
c0010bef:	57                   	push   edi
c0010bf0:	56                   	push   esi
c0010bf1:	53                   	push   ebx
c0010bf2:	83 ec 18             	sub    esp,0x18
c0010bf5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bf9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010bfd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010c01:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010c07:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010c0d:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010c13:	50                   	push   eax
c0010c14:	e8 c5 67 ff ff       	call   c00073de <GDT::setup()>
c0010c19:	83 c4 0c             	add    esp,0xc
c0010c1c:	6a 00                	push   0x0
c0010c1e:	68 ef be ad de       	push   0xdeadbeef
c0010c23:	55                   	push   ebp
c0010c24:	e8 47 83 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010c29:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010c2c:	e8 1f 83 ff ff       	call   c0008f50 <TSS::flush()>
c0010c31:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c3a:	e8 03 6a ff ff       	call   c0007642 <IDT::setup()>
c0010c3f:	b8 00 04 00 00       	mov    eax,0x400
c0010c44:	0f 23 f8             	mov    db7,eax
c0010c47:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010c51:	e8 8c 71 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010c56:	83 c4 10             	add    esp,0x10
c0010c59:	85 f6                	test   esi,esi
c0010c5b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010c61:	89 38                	mov    DWORD PTR [eax],edi
c0010c63:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010c69:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010c6c:	74 10                	je     c0010c7e <CPU::open(int, int, void*)+0x90>
c0010c6e:	50                   	push   eax
c0010c6f:	50                   	push   eax
c0010c70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010c76:	56                   	push   esi
c0010c77:	e8 10 8c ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010c7c:	eb 0d                	jmp    c0010c8b <CPU::open(int, int, void*)+0x9d>
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	68 fe 21 02 c0       	push   0xc00221fe
c0010c86:	e8 9c 08 00 00       	call   c0011527 <KePanic(char const*)>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	83 ec 0c             	sub    esp,0xc
c0010c91:	68 0c 22 02 c0       	push   0xc002220c
c0010c96:	e8 8e 01 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0010c9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c9e:	e8 07 f7 ff ff       	call   c00103aa <CPU::detectFeatures()>
c0010ca3:	c7 04 24 2f 22 02 c0 	mov    DWORD PTR [esp],0xc002222f
c0010caa:	e8 7a 01 00 00       	call   c0010e29 <KeSetBootMessage(char const*)>
c0010caf:	e8 1b 74 00 00       	call   c00180cf <HalInitialise()>
c0010cb4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010cb9:	83 e0 10             	and    eax,0x10
c0010cbc:	83 f8 01             	cmp    eax,0x1
c0010cbf:	19 c0                	sbb    eax,eax
c0010cc1:	83 e0 46             	and    eax,0x46
c0010cc4:	83 c0 1e             	add    eax,0x1e
c0010cc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cca:	e8 c2 d6 ff ff       	call   c000e391 <setupTimer(int)>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010cd9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010cdf:	74 0c                	je     c0010ced <CPU::open(int, int, void*)+0xff>
c0010ce1:	83 ec 0c             	sub    esp,0xc
c0010ce4:	53                   	push   ebx
c0010ce5:	e8 38 fe ff ff       	call   c0010b22 <CPU::setupFeatures()>
c0010cea:	83 c4 10             	add    esp,0x10
c0010ced:	83 c4 0c             	add    esp,0xc
c0010cf0:	31 c0                	xor    eax,eax
c0010cf2:	5b                   	pop    ebx
c0010cf3:	5e                   	pop    esi
c0010cf4:	5f                   	pop    edi
c0010cf5:	5d                   	pop    ebp
c0010cf6:	c3                   	ret    

c0010cf7 <KeInitialiseAtexit()>:
c0010cf7:	83 ec 10             	sub    esp,0x10
c0010cfa:	6a 60                	push   0x60
c0010cfc:	6a 00                	push   0x0
c0010cfe:	68 20 be 02 c0       	push   0xc002be20
c0010d03:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010d0d:	e8 de f7 fe ff       	call   c00004f0 <memset>
c0010d12:	83 c4 1c             	add    esp,0x1c
c0010d15:	c3                   	ret    

c0010d16 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010d16:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010d1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010d1f:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010d26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d2a:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010d31:	40                   	inc    eax
c0010d32:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010d37:	83 f8 17             	cmp    eax,0x17
c0010d3a:	7e 0d                	jle    c0010d49 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010d3c:	c7 44 24 04 70 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022270
c0010d44:	e9 de 07 00 00       	jmp    c0011527 <KePanic(char const*)>
c0010d49:	c3                   	ret    

c0010d4a <KeExecuteAtexit()>:
c0010d4a:	53                   	push   ebx
c0010d4b:	31 db                	xor    ebx,ebx
c0010d4d:	83 ec 08             	sub    esp,0x8
c0010d50:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010d56:	7e 50                	jle    c0010da8 <KeExecuteAtexit()+0x5e>
c0010d58:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010d5f:	85 c0                	test   eax,eax
c0010d61:	74 42                	je     c0010da5 <KeExecuteAtexit()+0x5b>
c0010d63:	51                   	push   ecx
c0010d64:	50                   	push   eax
c0010d65:	53                   	push   ebx
c0010d66:	68 89 22 02 c0       	push   0xc0022289
c0010d6b:	e8 9a 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d70:	58                   	pop    eax
c0010d71:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010d78:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010d7f:	c7 04 24 ab 22 02 c0 	mov    DWORD PTR [esp],0xc00222ab
c0010d86:	e8 7f 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d8b:	c7 04 24 0b 34 02 c0 	mov    DWORD PTR [esp],0xc002340b
c0010d92:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010d9d:	e8 68 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010da2:	83 c4 10             	add    esp,0x10
c0010da5:	43                   	inc    ebx
c0010da6:	eb a8                	jmp    c0010d50 <KeExecuteAtexit()+0x6>
c0010da8:	83 c4 08             	add    esp,0x8
c0010dab:	5b                   	pop    ebx
c0010dac:	c3                   	ret    

c0010dad <KeDisplaySplashScreen()>:
c0010dad:	55                   	push   ebp
c0010dae:	bd 05 00 00 00       	mov    ebp,0x5
c0010db3:	57                   	push   edi
c0010db4:	bf 0a 00 00 00       	mov    edi,0xa
c0010db9:	56                   	push   esi
c0010dba:	31 f6                	xor    esi,esi
c0010dbc:	53                   	push   ebx
c0010dbd:	31 db                	xor    ebx,ebx
c0010dbf:	83 ec 0c             	sub    esp,0xc
c0010dc2:	0f b6 96 60 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc9a0]
c0010dc9:	85 d2                	test   edx,edx
c0010dcb:	89 d0                	mov    eax,edx
c0010dcd:	74 52                	je     c0010e21 <KeDisplaySplashScreen()+0x74>
c0010dcf:	80 bb 96 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc96a],0xdb
c0010dd6:	75 13                	jne    c0010deb <KeDisplaySplashScreen()+0x3e>
c0010dd8:	0f b6 8b 95 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc96b]
c0010ddf:	83 e1 fe             	and    ecx,0xfffffffe
c0010de2:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010de8:	75 01                	jne    c0010deb <KeDisplaySplashScreen()+0x3e>
c0010dea:	47                   	inc    edi
c0010deb:	83 fa 0d             	cmp    edx,0xd
c0010dee:	74 28                	je     c0010e18 <KeDisplaySplashScreen()+0x6b>
c0010df0:	83 fa 0a             	cmp    edx,0xa
c0010df3:	75 0a                	jne    c0010dff <KeDisplaySplashScreen()+0x52>
c0010df5:	45                   	inc    ebp
c0010df6:	bf 0a 00 00 00       	mov    edi,0xa
c0010dfb:	31 db                	xor    ebx,ebx
c0010dfd:	eb 19                	jmp    c0010e18 <KeDisplaySplashScreen()+0x6b>
c0010dff:	83 ec 0c             	sub    esp,0xc
c0010e02:	0f be c0             	movsx  eax,al
c0010e05:	55                   	push   ebp
c0010e06:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010e09:	43                   	inc    ebx
c0010e0a:	52                   	push   edx
c0010e0b:	6a 00                	push   0x0
c0010e0d:	6a 0e                	push   0xe
c0010e0f:	50                   	push   eax
c0010e10:	e8 37 7f 00 00       	call   c0018d4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010e15:	83 c4 20             	add    esp,0x20
c0010e18:	46                   	inc    esi
c0010e19:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010e1f:	75 a1                	jne    c0010dc2 <KeDisplaySplashScreen()+0x15>
c0010e21:	83 c4 0c             	add    esp,0xc
c0010e24:	5b                   	pop    ebx
c0010e25:	5e                   	pop    esi
c0010e26:	5f                   	pop    edi
c0010e27:	5d                   	pop    ebp
c0010e28:	c3                   	ret    

c0010e29 <KeSetBootMessage(char const*)>:
c0010e29:	57                   	push   edi
c0010e2a:	56                   	push   esi
c0010e2b:	53                   	push   ebx
c0010e2c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010e32:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010e39:	68 9e 00 00 00       	push   0x9e
c0010e3e:	6a 00                	push   0x0
c0010e40:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010e44:	56                   	push   esi
c0010e45:	e8 a6 f6 fe ff       	call   c00004f0 <memset>
c0010e4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e4d:	e8 2e f7 fe ff       	call   c0000580 <strlen>
c0010e52:	ba 50 00 00 00       	mov    edx,0x50
c0010e57:	83 c4 10             	add    esp,0x10
c0010e5a:	31 c9                	xor    ecx,ecx
c0010e5c:	29 c2                	sub    edx,eax
c0010e5e:	83 e2 fe             	and    edx,0xfffffffe
c0010e61:	01 f2                	add    edx,esi
c0010e63:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010e68:	84 c0                	test   al,al
c0010e6a:	74 0a                	je     c0010e76 <KeSetBootMessage(char const*)+0x4d>
c0010e6c:	80 cc 0f             	or     ah,0xf
c0010e6f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010e73:	41                   	inc    ecx
c0010e74:	eb ed                	jmp    c0010e63 <KeSetBootMessage(char const*)+0x3a>
c0010e76:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010e7b:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010e80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e82:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010e88:	5b                   	pop    ebx
c0010e89:	5e                   	pop    esi
c0010e8a:	5f                   	pop    edi
c0010e8b:	c3                   	ret    

c0010e8c <Krnl::handlePowerButton()>:
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	e8 ee 06 00 00       	call   c0011582 <KeHandlePowerButton()>
c0010e94:	90                   	nop
c0010e95:	83 c4 0c             	add    esp,0xc
c0010e98:	c3                   	ret    
c0010e99:	8d 76 00             	lea    esi,[esi+0x0]

c0010e9c <Krnl::handleSleepButton()>:
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	e8 13 07 00 00       	call   c00115b7 <KeHandleSleepButton()>
c0010ea4:	90                   	nop
c0010ea5:	83 c4 0c             	add    esp,0xc
c0010ea8:	c3                   	ret    

c0010ea9 <KeCalculateCRC32(unsigned char*, int)>:
c0010ea9:	53                   	push   ebx
c0010eaa:	83 c8 ff             	or     eax,0xffffffff
c0010ead:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010eb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010eb5:	01 cb                	add    ebx,ecx
c0010eb7:	39 d9                	cmp    ecx,ebx
c0010eb9:	74 15                	je     c0010ed0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010ebb:	41                   	inc    ecx
c0010ebc:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010ebf:	31 c2                	xor    edx,eax
c0010ec1:	c1 e8 08             	shr    eax,0x8
c0010ec4:	0f b6 d2             	movzx  edx,dl
c0010ec7:	33 04 95 c0 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc840]
c0010ece:	eb e7                	jmp    c0010eb7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010ed0:	5b                   	pop    ebx
c0010ed1:	f7 d0                	not    eax
c0010ed3:	c3                   	ret    

c0010ed4 <EnvVarContainer::getEnv(char const*)>:
c0010ed4:	57                   	push   edi
c0010ed5:	56                   	push   esi
c0010ed6:	53                   	push   ebx
c0010ed7:	31 db                	xor    ebx,ebx
c0010ed9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010edd:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010edf:	7e 2b                	jle    c0010f0c <EnvVarContainer::getEnv(char const*)+0x38>
c0010ee1:	50                   	push   eax
c0010ee2:	50                   	push   eax
c0010ee3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ee6:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010eed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010ef0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ef4:	e8 87 f8 fe ff       	call   c0000780 <strcmp>
c0010ef9:	83 c4 10             	add    esp,0x10
c0010efc:	85 c0                	test   eax,eax
c0010efe:	75 09                	jne    c0010f09 <EnvVarContainer::getEnv(char const*)+0x35>
c0010f00:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f03:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010f07:	eb 05                	jmp    c0010f0e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010f09:	43                   	inc    ebx
c0010f0a:	eb d1                	jmp    c0010edd <EnvVarContainer::getEnv(char const*)+0x9>
c0010f0c:	31 c0                	xor    eax,eax
c0010f0e:	5b                   	pop    ebx
c0010f0f:	5e                   	pop    esi
c0010f10:	5f                   	pop    edi
c0010f11:	c3                   	ret    

c0010f12 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010f12:	55                   	push   ebp
c0010f13:	57                   	push   edi
c0010f14:	56                   	push   esi
c0010f15:	53                   	push   ebx
c0010f16:	83 ec 28             	sub    esp,0x28
c0010f19:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f1d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010f21:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f25:	56                   	push   esi
c0010f26:	e8 55 f6 fe ff       	call   c0000580 <strlen>
c0010f2b:	40                   	inc    eax
c0010f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f2f:	e8 9f 6b ff ff       	call   c0007ad3 <malloc>
c0010f34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f3b:	e8 40 f6 fe ff       	call   c0000580 <strlen>
c0010f40:	40                   	inc    eax
c0010f41:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f44:	e8 8a 6b ff ff       	call   c0007ad3 <malloc>
c0010f49:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f50:	e8 2b f6 fe ff       	call   c0000580 <strlen>
c0010f55:	83 c4 0c             	add    esp,0xc
c0010f58:	40                   	inc    eax
c0010f59:	50                   	push   eax
c0010f5a:	6a 00                	push   0x0
c0010f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f60:	e8 8b f5 fe ff       	call   c00004f0 <memset>
c0010f65:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f68:	e8 13 f6 fe ff       	call   c0000580 <strlen>
c0010f6d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010f71:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f79:	89 de                	mov    esi,ebx
c0010f7b:	e8 00 f6 fe ff       	call   c0000580 <strlen>
c0010f80:	83 c4 0c             	add    esp,0xc
c0010f83:	40                   	inc    eax
c0010f84:	50                   	push   eax
c0010f85:	6a 00                	push   0x0
c0010f87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f8b:	e8 60 f5 fe ff       	call   c00004f0 <memset>
c0010f90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f93:	e8 e8 f5 fe ff       	call   c0000580 <strlen>
c0010f98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010f9c:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fa1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010fa4:	40                   	inc    eax
c0010fa5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010fa8:	c1 e0 03             	shl    eax,0x3
c0010fab:	5a                   	pop    edx
c0010fac:	59                   	pop    ecx
c0010fad:	50                   	push   eax
c0010fae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010fb1:	e8 09 6b ff ff       	call   c0007abf <realloc>
c0010fb6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010fb9:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010fbd:	b9 08 00 00 00       	mov    ecx,0x8
c0010fc2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010fc5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fcb:	83 c4 2c             	add    esp,0x2c
c0010fce:	5b                   	pop    ebx
c0010fcf:	5e                   	pop    esi
c0010fd0:	5f                   	pop    edi
c0010fd1:	5d                   	pop    ebp
c0010fd2:	c3                   	ret    
c0010fd3:	90                   	nop

c0010fd4 <EnvVarContainer::deleteEnv(char const*)>:
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010fd6:	55                   	push   ebp
c0010fd7:	57                   	push   edi
c0010fd8:	56                   	push   esi
c0010fd9:	53                   	push   ebx
c0010fda:	81 ec 38 01 00 00    	sub    esp,0x138
c0010fe0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010fe7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010fee:	68 14 01 00 00       	push   0x114
c0010ff3:	e8 db 6a ff ff       	call   c0007ad3 <malloc>
c0010ff8:	83 c4 0c             	add    esp,0xc
c0010ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010ffe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011005:	89 c3                	mov    ebx,eax
c0011007:	50                   	push   eax
c0011008:	e8 d5 aa ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c001100d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011010:	e8 af ad ff ff       	call   c000bdc4 <File::exists()>
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	84 c0                	test   al,al
c001101a:	75 31                	jne    c001104d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001101c:	50                   	push   eax
c001101d:	50                   	push   eax
c001101e:	6a 12                	push   0x12
c0011020:	53                   	push   ebx
c0011021:	e8 da aa ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0011026:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011028:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001102b:	89 34 24             	mov    DWORD PTR [esp],esi
c001102e:	e8 4d f5 fe ff       	call   c0000580 <strlen>
c0011033:	5a                   	pop    edx
c0011034:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011038:	52                   	push   edx
c0011039:	31 d2                	xor    edx,edx
c001103b:	56                   	push   esi
c001103c:	52                   	push   edx
c001103d:	50                   	push   eax
c001103e:	53                   	push   ebx
c001103f:	ff d7                	call   edi
c0011041:	83 c4 14             	add    esp,0x14
c0011044:	53                   	push   ebx
c0011045:	e8 14 ab ff ff       	call   c000bb5e <File::close()>
c001104a:	83 c4 10             	add    esp,0x10
c001104d:	56                   	push   esi
c001104e:	31 f6                	xor    esi,esi
c0011050:	68 00 01 00 00       	push   0x100
c0011055:	6a 00                	push   0x0
c0011057:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001105b:	50                   	push   eax
c001105c:	e8 8f f4 fe ff       	call   c00004f0 <memset>
c0011061:	5f                   	pop    edi
c0011062:	58                   	pop    eax
c0011063:	6a 01                	push   0x1
c0011065:	53                   	push   ebx
c0011066:	e8 95 aa ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c001106b:	83 c4 10             	add    esp,0x10
c001106e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011076:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011085:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011087:	52                   	push   edx
c0011088:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001108c:	51                   	push   ecx
c001108d:	6a 00                	push   0x0
c001108f:	6a 01                	push   0x1
c0011091:	53                   	push   ebx
c0011092:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011095:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001109a:	83 c4 20             	add    esp,0x20
c001109d:	85 c0                	test   eax,eax
c001109f:	89 c1                	mov    ecx,eax
c00110a1:	0f 84 36 01 00 00    	je     c00111dd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00110a7:	83 f8 0d             	cmp    eax,0xd
c00110aa:	0f 84 22 01 00 00    	je     c00111d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00110b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00110b5:	0f 84 f0 00 00 00    	je     c00111ab <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00110bb:	83 f8 0a             	cmp    eax,0xa
c00110be:	74 13                	je     c00110d3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00110c0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110c5:	74 0c                	je     c00110d3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00110c7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00110cd:	0f 8e f6 00 00 00    	jle    c00111c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00110d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110d7:	83 ec 0c             	sub    esp,0xc
c00110da:	8d 78 01             	lea    edi,[eax+0x1]
c00110dd:	57                   	push   edi
c00110de:	e8 f0 69 ff ff       	call   c0007ad3 <malloc>
c00110e3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00110e7:	8d 56 04             	lea    edx,[esi+0x4]
c00110ea:	89 14 24             	mov    DWORD PTR [esp],edx
c00110ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00110f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00110f5:	e8 d9 69 ff ff       	call   c0007ad3 <malloc>
c00110fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00110fe:	83 c4 0c             	add    esp,0xc
c0011101:	57                   	push   edi
c0011102:	6a 00                	push   0x0
c0011104:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011108:	e8 e3 f3 fe ff       	call   c00004f0 <memset>
c001110d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011111:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011115:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001111b:	83 c4 0c             	add    esp,0xc
c001111e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011122:	52                   	push   edx
c0011123:	6a 00                	push   0x0
c0011125:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011129:	e8 c2 f3 fe ff       	call   c00004f0 <memset>
c001112e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011132:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011136:	89 34 24             	mov    DWORD PTR [esp],esi
c0011139:	e8 42 f4 fe ff       	call   c0000580 <strlen>
c001113e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011142:	89 c1                	mov    ecx,eax
c0011144:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011146:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001114f:	40                   	inc    eax
c0011150:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011153:	85 d2                	test   edx,edx
c0011155:	75 0c                	jne    c0011163 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011157:	83 ec 0c             	sub    esp,0xc
c001115a:	6a 08                	push   0x8
c001115c:	e8 72 69 ff ff       	call   c0007ad3 <malloc>
c0011161:	eb 0c                	jmp    c001116f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011163:	51                   	push   ecx
c0011164:	51                   	push   ecx
c0011165:	c1 e0 03             	shl    eax,0x3
c0011168:	50                   	push   eax
c0011169:	52                   	push   edx
c001116a:	e8 50 69 ff ff       	call   c0007abf <realloc>
c001116f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011172:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011175:	83 c4 10             	add    esp,0x10
c0011178:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001117b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001117f:	b9 08 00 00 00       	mov    ecx,0x8
c0011184:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011188:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001118a:	50                   	push   eax
c001118b:	31 f6                	xor    esi,esi
c001118d:	68 00 01 00 00       	push   0x100
c0011192:	6a 00                	push   0x0
c0011194:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011198:	50                   	push   eax
c0011199:	e8 52 f3 fe ff       	call   c00004f0 <memset>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111a9:	eb 27                	jmp    c00111d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111ab:	83 f8 3d             	cmp    eax,0x3d
c00111ae:	74 1e                	je     c00111ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00111b0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111b6:	7f 07                	jg     c00111bf <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00111b8:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00111bc:	46                   	inc    esi
c00111bd:	eb 13                	jmp    c00111d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111bf:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00111c7:	eb 09                	jmp    c00111d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111c9:	83 f8 3d             	cmp    eax,0x3d
c00111cc:	75 ea                	jne    c00111b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00111ce:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00111d2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111d7:	0f 85 99 fe ff ff    	jne    c0011076 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00111dd:	83 ec 0c             	sub    esp,0xc
c00111e0:	53                   	push   ebx
c00111e1:	e8 78 a9 ff ff       	call   c000bb5e <File::close()>
c00111e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111ee:	81 c4 3c 01 00 00    	add    esp,0x13c
c00111f4:	5b                   	pop    ebx
c00111f5:	5e                   	pop    esi
c00111f6:	5f                   	pop    edi
c00111f7:	5d                   	pop    ebp
c00111f8:	c3                   	ret    
c00111f9:	90                   	nop

c00111fa <EnvVarContainer::__loadSystem()>:
c00111fa:	83 ec 10             	sub    esp,0x10
c00111fd:	68 c0 3b 02 c0       	push   0xc0023bc0
c0011202:	68 b0 22 02 c0       	push   0xc00222b0
c0011207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120b:	e8 c6 fd ff ff       	call   c0010fd6 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011210:	83 c4 1c             	add    esp,0x1c
c0011213:	c3                   	ret    

c0011214 <EnvVarContainer::__loadUser()>:
c0011214:	c3                   	ret    
c0011215:	90                   	nop

c0011216 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001121a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011228:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001122b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001122f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011236:	90                   	nop
c0011237:	c3                   	ret    

c0011238 <EnvVarContainer::~EnvVarContainer()>:
c0011238:	83 ec 0c             	sub    esp,0xc
c001123b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011242:	85 c0                	test   eax,eax
c0011244:	74 1d                	je     c0011263 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124a:	8b 00                	mov    eax,DWORD PTR [eax]
c001124c:	85 c0                	test   eax,eax
c001124e:	74 13                	je     c0011263 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011257:	83 ec 0c             	sub    esp,0xc
c001125a:	50                   	push   eax
c001125b:	e8 83 68 ff ff       	call   c0007ae3 <free>
c0011260:	83 c4 10             	add    esp,0x10
c0011263:	90                   	nop
c0011264:	83 c4 0c             	add    esp,0xc
c0011267:	c3                   	ret    

c0011268 <KeGetEnv(Process*, char const*)>:
c0011268:	53                   	push   ebx
c0011269:	83 ec 08             	sub    esp,0x8
c001126c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011270:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011276:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001127a:	74 04                	je     c0011280 <KeGetEnv(Process*, char const*)+0x18>
c001127c:	85 c0                	test   eax,eax
c001127e:	75 0b                	jne    c001128b <KeGetEnv(Process*, char const*)+0x23>
c0011280:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011285:	85 c0                	test   eax,eax
c0011287:	75 19                	jne    c00112a2 <KeGetEnv(Process*, char const*)+0x3a>
c0011289:	eb 27                	jmp    c00112b2 <KeGetEnv(Process*, char const*)+0x4a>
c001128b:	52                   	push   edx
c001128c:	52                   	push   edx
c001128d:	53                   	push   ebx
c001128e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011294:	e8 3b fc ff ff       	call   c0010ed4 <EnvVarContainer::getEnv(char const*)>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	85 c0                	test   eax,eax
c001129e:	75 28                	jne    c00112c8 <KeGetEnv(Process*, char const*)+0x60>
c00112a0:	eb de                	jmp    c0011280 <KeGetEnv(Process*, char const*)+0x18>
c00112a2:	52                   	push   edx
c00112a3:	52                   	push   edx
c00112a4:	53                   	push   ebx
c00112a5:	50                   	push   eax
c00112a6:	e8 29 fc ff ff       	call   c0010ed4 <EnvVarContainer::getEnv(char const*)>
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	85 c0                	test   eax,eax
c00112b0:	75 16                	jne    c00112c8 <KeGetEnv(Process*, char const*)+0x60>
c00112b2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00112b6:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00112bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00112bf:	83 c4 08             	add    esp,0x8
c00112c2:	5b                   	pop    ebx
c00112c3:	e9 0c fc ff ff       	jmp    c0010ed4 <EnvVarContainer::getEnv(char const*)>
c00112c8:	83 c4 08             	add    esp,0x8
c00112cb:	5b                   	pop    ebx
c00112cc:	c3                   	ret    

c00112cd <KeSetEnvSystem(char const*, char const*)>:
c00112cd:	83 ec 10             	sub    esp,0x10
c00112d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112d8:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00112de:	e8 2f fc ff ff       	call   c0010f12 <EnvVarContainer::setEnv(char const*, char const*)>
c00112e3:	83 c4 1c             	add    esp,0x1c
c00112e6:	c3                   	ret    

c00112e7 <KeSetEnvUser(char const*, char const*)>:
c00112e7:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00112ec:	85 c0                	test   eax,eax
c00112ee:	74 15                	je     c0011305 <KeSetEnvUser(char const*, char const*)+0x1e>
c00112f0:	83 ec 10             	sub    esp,0x10
c00112f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112fb:	50                   	push   eax
c00112fc:	e8 11 fc ff ff       	call   c0010f12 <EnvVarContainer::setEnv(char const*, char const*)>
c0011301:	83 c4 1c             	add    esp,0x1c
c0011304:	c3                   	ret    
c0011305:	c3                   	ret    

c0011306 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001130a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011310:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011314:	e9 f9 fb ff ff       	jmp    c0010f12 <EnvVarContainer::setEnv(char const*, char const*)>

c0011319 <KeDeleteEnvSystem(char const*)>:
c0011319:	c3                   	ret    

c001131a <KeDeleteEnvUser(char const*)>:
c001131a:	c3                   	ret    

c001131b <KeDeleteEnvProcess(Process*, char const*)>:
c001131b:	c3                   	ret    

c001131c <KeNewProcessEnv(Process*)>:
c001131c:	83 ec 28             	sub    esp,0x28
c001131f:	6a 0c                	push   0xc
c0011321:	e8 ad 67 ff ff       	call   c0007ad3 <malloc>
c0011326:	5a                   	pop    edx
c0011327:	59                   	pop    ecx
c0011328:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001132c:	50                   	push   eax
c001132d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011331:	e8 e0 fe ff ff       	call   c0011216 <EnvVarContainer::EnvVarContainer(Process*)>
c0011336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001133a:	83 c4 2c             	add    esp,0x2c
c001133d:	c3                   	ret    

c001133e <KeCopyProcessEnv(Process*, Process*)>:
c001133e:	57                   	push   edi
c001133f:	56                   	push   esi
c0011340:	53                   	push   ebx
c0011341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011345:	83 ec 0c             	sub    esp,0xc
c0011348:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001134e:	6a 0c                	push   0xc
c0011350:	e8 7e 67 ff ff       	call   c0007ad3 <malloc>
c0011355:	89 c3                	mov    ebx,eax
c0011357:	58                   	pop    eax
c0011358:	5a                   	pop    edx
c0011359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135d:	53                   	push   ebx
c001135e:	e8 b3 fe ff ff       	call   c0011216 <EnvVarContainer::EnvVarContainer(Process*)>
c0011363:	8b 07                	mov    eax,DWORD PTR [edi]
c0011365:	89 03                	mov    DWORD PTR [ebx],eax
c0011367:	c1 e0 03             	shl    eax,0x3
c001136a:	89 04 24             	mov    DWORD PTR [esp],eax
c001136d:	e8 61 67 ff ff       	call   c0007ad3 <malloc>
c0011372:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011375:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011377:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001137a:	89 c7                	mov    edi,eax
c001137c:	c1 e1 03             	shl    ecx,0x3
c001137f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011381:	83 c4 10             	add    esp,0x10
c0011384:	89 d8                	mov    eax,ebx
c0011386:	5b                   	pop    ebx
c0011387:	5e                   	pop    esi
c0011388:	5f                   	pop    edi
c0011389:	c3                   	ret    

c001138a <KeLoadSystemEnv()>:
c001138a:	53                   	push   ebx
c001138b:	83 ec 14             	sub    esp,0x14
c001138e:	6a 0c                	push   0xc
c0011390:	e8 3e 67 ff ff       	call   c0007ad3 <malloc>
c0011395:	89 c3                	mov    ebx,eax
c0011397:	58                   	pop    eax
c0011398:	5a                   	pop    edx
c0011399:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001139f:	53                   	push   ebx
c00113a0:	e8 71 fe ff ff       	call   c0011216 <EnvVarContainer::EnvVarContainer(Process*)>
c00113a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113a8:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00113ae:	e8 47 fe ff ff       	call   c00111fa <EnvVarContainer::__loadSystem()>
c00113b3:	83 c4 18             	add    esp,0x18
c00113b6:	5b                   	pop    ebx
c00113b7:	c3                   	ret    

c00113b8 <KeLoadUserEnv()>:
c00113b8:	53                   	push   ebx
c00113b9:	83 ec 14             	sub    esp,0x14
c00113bc:	6a 0c                	push   0xc
c00113be:	e8 10 67 ff ff       	call   c0007ad3 <malloc>
c00113c3:	89 c3                	mov    ebx,eax
c00113c5:	58                   	pop    eax
c00113c6:	5a                   	pop    edx
c00113c7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00113cd:	53                   	push   ebx
c00113ce:	e8 43 fe ff ff       	call   c0011216 <EnvVarContainer::EnvVarContainer(Process*)>
c00113d3:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00113d9:	83 c4 18             	add    esp,0x18
c00113dc:	5b                   	pop    ebx
c00113dd:	c3                   	ret    

c00113de <KeFlushEnv()>:
c00113de:	c3                   	ret    

c00113df <KeGetProcessTotalEnvCount(Process*)>:
c00113df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113e3:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00113e9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00113ef:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00113f6:	03 01                	add    eax,DWORD PTR [ecx]
c00113f8:	85 d2                	test   edx,edx
c00113fa:	74 02                	je     c00113fe <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00113fc:	03 02                	add    eax,DWORD PTR [edx]
c00113fe:	c3                   	ret    

c00113ff <KeGetProcessEnvPair(Process*, int)>:
c00113ff:	57                   	push   edi
c0011400:	56                   	push   esi
c0011401:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c0011407:	53                   	push   ebx
c0011408:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001140c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011410:	85 f6                	test   esi,esi
c0011412:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011416:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001141c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001141e:	75 16                	jne    c0011436 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011420:	39 c2                	cmp    edx,eax
c0011422:	7c 16                	jl     c001143a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011424:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001142a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001142c:	01 c6                	add    esi,eax
c001142e:	39 d6                	cmp    esi,edx
c0011430:	7e 3c                	jle    c001146e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011432:	29 c2                	sub    edx,eax
c0011434:	eb 04                	jmp    c001143a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011436:	39 c2                	cmp    edx,eax
c0011438:	7d 05                	jge    c001143f <KeGetProcessEnvPair(Process*, int)+0x40>
c001143a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001143d:	eb 20                	jmp    c001145f <KeGetProcessEnvPair(Process*, int)+0x60>
c001143f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011441:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011444:	39 d1                	cmp    ecx,edx
c0011446:	7e 04                	jle    c001144c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011448:	29 c2                	sub    edx,eax
c001144a:	eb 10                	jmp    c001145c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001144c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011452:	03 0e                	add    ecx,DWORD PTR [esi]
c0011454:	39 d1                	cmp    ecx,edx
c0011456:	7e 16                	jle    c001146e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011458:	29 c2                	sub    edx,eax
c001145a:	29 fa                	sub    edx,edi
c001145c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001145f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011462:	8b 02                	mov    eax,DWORD PTR [edx]
c0011464:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011467:	89 03                	mov    DWORD PTR [ebx],eax
c0011469:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001146c:	eb 1d                	jmp    c001148b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001146e:	83 ec 0c             	sub    esp,0xc
c0011471:	68 d2 22 02 c0       	push   0xc00222d2
c0011476:	e8 ac 00 00 00       	call   c0011527 <KePanic(char const*)>
c001147b:	83 c4 10             	add    esp,0x10
c001147e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011484:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001148b:	89 d8                	mov    eax,ebx
c001148d:	5b                   	pop    ebx
c001148e:	5e                   	pop    esi
c001148f:	5f                   	pop    edi
c0011490:	c2 04 00             	ret    0x4

c0011493 <CPU::current()>:
c0011493:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011498:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001149e:	c3                   	ret    

c001149f <operator new(unsigned long)>:
c001149f:	e9 2f 66 ff ff       	jmp    c0007ad3 <malloc>

c00114a4 <operator delete(void*)>:
c00114a4:	e9 4a 66 ff ff       	jmp    c0007af3 <rfree>

c00114a9 <disableIRQs()>:
c00114a9:	fa                   	cli    
c00114aa:	c3                   	ret    

c00114ab <enableIRQs()>:
c00114ab:	fb                   	sti    
c00114ac:	c3                   	ret    

c00114ad <lockScheduler()>:
c00114ad:	fa                   	cli    
c00114ae:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00114b4:	c3                   	ret    

c00114b5 <unlockScheduler()>:
c00114b5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00114ba:	48                   	dec    eax
c00114bb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00114c0:	75 01                	jne    c00114c3 <unlockScheduler()+0xe>
c00114c2:	fb                   	sti    
c00114c3:	c3                   	ret    

c00114c4 <lockStuff()>:
c00114c4:	fa                   	cli    
c00114c5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00114cb:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00114d1:	c3                   	ret    

c00114d2 <unlockStuff()>:
c00114d2:	83 ec 0c             	sub    esp,0xc
c00114d5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00114da:	48                   	dec    eax
c00114db:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00114e0:	75 18                	jne    c00114fa <unlockStuff()+0x28>
c00114e2:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00114e9:	74 0f                	je     c00114fa <unlockStuff()+0x28>
c00114eb:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00114f5:	e8 16 4b 00 00       	call   c0016010 <schedule()>
c00114fa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00114ff:	48                   	dec    eax
c0011500:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011505:	75 01                	jne    c0011508 <unlockStuff()+0x36>
c0011507:	fb                   	sti    
c0011508:	83 c4 0c             	add    esp,0xc
c001150b:	c3                   	ret    

c001150c <Virt::getAKernelVAS()>:
c001150c:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011511:	c3                   	ret    

c0011512 <__not_memcpy>:
c0011512:	57                   	push   edi
c0011513:	56                   	push   esi
c0011514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011518:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001151c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011520:	89 c7                	mov    edi,eax
c0011522:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011524:	5e                   	pop    esi
c0011525:	5f                   	pop    edi
c0011526:	c3                   	ret    

c0011527 <KePanic(char const*)>:
c0011527:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001152e:	e9 6d 6a 00 00       	jmp    c0017fa0 <HalPanic(char const*)>

c0011533 <KePowerThread(void*)>:
c0011533:	83 ec 0c             	sub    esp,0xc
c0011536:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001153b:	48                   	dec    eax
c001153c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011541:	75 01                	jne    c0011544 <KePowerThread(void*)+0x11>
c0011543:	fb                   	sti    
c0011544:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001154b:	83 ec 0c             	sub    esp,0xc
c001154e:	6a 0a                	push   0xa
c0011550:	e8 eb 4d 00 00       	call   c0016340 <sleep(unsigned int)>
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001155f:	eb e3                	jmp    c0011544 <KePowerThread(void*)+0x11>

c0011561 <KeChangePowerSettings(PowerSettings)>:
c0011561:	57                   	push   edi
c0011562:	b9 09 00 00 00       	mov    ecx,0x9
c0011567:	56                   	push   esi
c0011568:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001156d:	fc                   	cld    
c001156e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011572:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011574:	5e                   	pop    esi
c0011575:	5f                   	pop    edi
c0011576:	c3                   	ret    

c0011577 <KeUserIOReceived()>:
c0011577:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011581:	c3                   	ret    

c0011582 <KeHandlePowerButton()>:
c0011582:	83 ec 0c             	sub    esp,0xc
c0011585:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001158a:	83 f8 02             	cmp    eax,0x2
c001158d:	75 10                	jne    c001159f <KeHandlePowerButton()+0x1d>
c001158f:	83 ec 0c             	sub    esp,0xc
c0011592:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011598:	e8 ad 5b ff ff       	call   c000714a <Computer::shutdown()>
c001159d:	eb 11                	jmp    c00115b0 <KeHandlePowerButton()+0x2e>
c001159f:	48                   	dec    eax
c00115a0:	75 11                	jne    c00115b3 <KeHandlePowerButton()+0x31>
c00115a2:	83 ec 0c             	sub    esp,0xc
c00115a5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115ab:	e8 ca 5b ff ff       	call   c000717a <Computer::sleep()>
c00115b0:	83 c4 10             	add    esp,0x10
c00115b3:	83 c4 0c             	add    esp,0xc
c00115b6:	c3                   	ret    

c00115b7 <KeHandleSleepButton()>:
c00115b7:	83 ec 0c             	sub    esp,0xc
c00115ba:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00115bf:	83 f8 02             	cmp    eax,0x2
c00115c2:	75 10                	jne    c00115d4 <KeHandleSleepButton()+0x1d>
c00115c4:	83 ec 0c             	sub    esp,0xc
c00115c7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115cd:	e8 78 5b ff ff       	call   c000714a <Computer::shutdown()>
c00115d2:	eb 11                	jmp    c00115e5 <KeHandleSleepButton()+0x2e>
c00115d4:	48                   	dec    eax
c00115d5:	75 11                	jne    c00115e8 <KeHandleSleepButton()+0x31>
c00115d7:	83 ec 0c             	sub    esp,0xc
c00115da:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115e0:	e8 95 5b ff ff       	call   c000717a <Computer::sleep()>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	83 c4 0c             	add    esp,0xc
c00115eb:	c3                   	ret    

c00115ec <KeSetupPowerManager()>:
c00115ec:	83 ec 0c             	sub    esp,0xc
c00115ef:	68 f0 00 00 00       	push   0xf0
c00115f4:	6a 00                	push   0x0
c00115f6:	68 33 15 01 c0       	push   0xc0011533
c00115fb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011601:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c001160b:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011612:	e8 ad 47 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0011617:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011621:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001162b:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011635:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001163f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011649:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011653:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001165d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011667:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011671:	83 c4 1c             	add    esp,0x1c
c0011674:	c3                   	ret    

c0011675 <KeRand()>:
c0011675:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001167f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011689:	53                   	push   ebx
c001168a:	01 c1                	add    ecx,eax
c001168c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011691:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011697:	01 ca                	add    edx,ecx
c0011699:	05 ef 04 b5 00       	add    eax,0xb504ef
c001169e:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00116a3:	83 d2 00             	adc    edx,0x0
c00116a6:	0f b7 da             	movzx  ebx,dx
c00116a9:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00116af:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00116b3:	5b                   	pop    ebx
c00116b4:	c3                   	ret    

c00116b5 <KeSeedRand(unsigned int)>:
c00116b5:	53                   	push   ebx
c00116b6:	83 ec 08             	sub    esp,0x8
c00116b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116bd:	e8 fd 6b 00 00       	call   c00182bf <HalGetRand()>
c00116c2:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00116cc:	31 d8                	xor    eax,ebx
c00116ce:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00116d3:	e8 9d ff ff ff       	call   c0011675 <KeRand()>
c00116d8:	83 c4 08             	add    esp,0x8
c00116db:	5b                   	pop    ebx
c00116dc:	eb 97                	jmp    c0011675 <KeRand()>

c00116de <KeInitRand()>:
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	e8 ce 69 00 00       	call   c00180b4 <HalQueryPerformanceCounter()>
c00116e6:	0f 20 da             	mov    edx,cr3
c00116e9:	0f 22 da             	mov    cr3,edx
c00116ec:	0f 20 da             	mov    edx,cr3
c00116ef:	0f 22 da             	mov    cr3,edx
c00116f2:	0f 20 da             	mov    edx,cr3
c00116f5:	0f 22 da             	mov    cr3,edx
c00116f8:	0f 20 da             	mov    edx,cr3
c00116fb:	0f 22 da             	mov    cr3,edx
c00116fe:	83 ec 0c             	sub    esp,0xc
c0011701:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011706:	50                   	push   eax
c0011707:	e8 a9 ff ff ff       	call   c00116b5 <KeSeedRand(unsigned int)>
c001170c:	83 c4 1c             	add    esp,0x1c
c001170f:	c3                   	ret    

c0011710 <KeResolveCompatibilitySymbol(char*)>:
c0011710:	83 ec 0c             	sub    esp,0xc
c0011713:	83 ec 08             	sub    esp,0x8
c0011716:	68 ec 22 02 c0       	push   0xc00222ec
c001171b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001171f:	e8 5c f0 fe ff       	call   c0000780 <strcmp>
c0011724:	83 c4 10             	add    esp,0x10
c0011727:	85 c0                	test   eax,eax
c0011729:	0f 94 c0             	sete   al
c001172c:	0f b6 c0             	movzx  eax,al
c001172f:	85 c0                	test   eax,eax
c0011731:	74 0d                	je     c0011740 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011733:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011738:	e9 8b 01 00 00       	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	83 ec 08             	sub    esp,0x8
c0011743:	68 f5 22 02 c0       	push   0xc00222f5
c0011748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001174c:	e8 2f f0 fe ff       	call   c0000780 <strcmp>
c0011751:	83 c4 10             	add    esp,0x10
c0011754:	85 c0                	test   eax,eax
c0011756:	0f 94 c0             	sete   al
c0011759:	0f b6 c0             	movzx  eax,al
c001175c:	85 c0                	test   eax,eax
c001175e:	74 0c                	je     c001176c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011760:	b8 d0 f6 01 c0       	mov    eax,0xc001f6d0
c0011765:	e9 5e 01 00 00       	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001176a:	66 90                	xchg   ax,ax
c001176c:	83 ec 08             	sub    esp,0x8
c001176f:	68 ff 22 02 c0       	push   0xc00222ff
c0011774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011778:	e8 03 f0 fe ff       	call   c0000780 <strcmp>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	85 c0                	test   eax,eax
c0011782:	0f 94 c0             	sete   al
c0011785:	0f b6 c0             	movzx  eax,al
c0011788:	85 c0                	test   eax,eax
c001178a:	74 0c                	je     c0011798 <KeResolveCompatibilitySymbol(char*)+0x88>
c001178c:	b8 04 f4 01 c0       	mov    eax,0xc001f404
c0011791:	e9 32 01 00 00       	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011796:	66 90                	xchg   ax,ax
c0011798:	83 ec 08             	sub    esp,0x8
c001179b:	68 08 23 02 c0       	push   0xc0022308
c00117a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a4:	e8 d7 ef fe ff       	call   c0000780 <strcmp>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	85 c0                	test   eax,eax
c00117ae:	0f 94 c0             	sete   al
c00117b1:	0f b6 c0             	movzx  eax,al
c00117b4:	85 c0                	test   eax,eax
c00117b6:	74 0c                	je     c00117c4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00117b8:	b8 27 15 01 c0       	mov    eax,0xc0011527
c00117bd:	e9 06 01 00 00       	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117c2:	66 90                	xchg   ax,ax
c00117c4:	83 ec 08             	sub    esp,0x8
c00117c7:	68 1b 23 02 c0       	push   0xc002231b
c00117cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d0:	e8 ab ef fe ff       	call   c0000780 <strcmp>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	85 c0                	test   eax,eax
c00117da:	0f 94 c0             	sete   al
c00117dd:	0f b6 c0             	movzx  eax,al
c00117e0:	85 c0                	test   eax,eax
c00117e2:	74 0c                	je     c00117f0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00117e4:	b8 29 0e 01 c0       	mov    eax,0xc0010e29
c00117e9:	e9 da 00 00 00       	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117ee:	66 90                	xchg   ax,ax
c00117f0:	83 ec 08             	sub    esp,0x8
c00117f3:	68 38 23 02 c0       	push   0xc0022338
c00117f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fc:	e8 7f ef fe ff       	call   c0000780 <strcmp>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	85 c0                	test   eax,eax
c0011806:	0f 94 c0             	sete   al
c0011809:	0f b6 c0             	movzx  eax,al
c001180c:	85 c0                	test   eax,eax
c001180e:	74 0c                	je     c001181c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011810:	b8 d0 f7 01 c0       	mov    eax,0xc001f7d0
c0011815:	e9 ae 00 00 00       	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001181a:	66 90                	xchg   ax,ax
c001181c:	83 ec 08             	sub    esp,0x8
c001181f:	68 42 23 02 c0       	push   0xc0022342
c0011824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011828:	e8 53 ef fe ff       	call   c0000780 <strcmp>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	85 c0                	test   eax,eax
c0011832:	0f 94 c0             	sete   al
c0011835:	0f b6 c0             	movzx  eax,al
c0011838:	85 c0                	test   eax,eax
c001183a:	74 0c                	je     c0011848 <KeResolveCompatibilitySymbol(char*)+0x138>
c001183c:	b8 50 f5 01 c0       	mov    eax,0xc001f550
c0011841:	e9 82 00 00 00       	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011846:	66 90                	xchg   ax,ax
c0011848:	83 ec 08             	sub    esp,0x8
c001184b:	68 4b 23 02 c0       	push   0xc002234b
c0011850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011854:	e8 27 ef fe ff       	call   c0000780 <strcmp>
c0011859:	83 c4 10             	add    esp,0x10
c001185c:	85 c0                	test   eax,eax
c001185e:	0f 94 c0             	sete   al
c0011861:	0f b6 c0             	movzx  eax,al
c0011864:	85 c0                	test   eax,eax
c0011866:	74 08                	je     c0011870 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011868:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001186d:	eb 59                	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001186f:	90                   	nop
c0011870:	83 ec 08             	sub    esp,0x8
c0011873:	68 63 23 02 c0       	push   0xc0022363
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 ff ee fe ff       	call   c0000780 <strcmp>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	85 c0                	test   eax,eax
c0011886:	0f 94 c0             	sete   al
c0011889:	0f b6 c0             	movzx  eax,al
c001188c:	85 c0                	test   eax,eax
c001188e:	74 08                	je     c0011898 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011890:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011895:	eb 31                	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011897:	90                   	nop
c0011898:	83 ec 08             	sub    esp,0x8
c001189b:	68 70 23 02 c0       	push   0xc0022370
c00118a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a4:	e8 d7 ee fe ff       	call   c0000780 <strcmp>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	85 c0                	test   eax,eax
c00118ae:	0f 94 c0             	sete   al
c00118b1:	0f b6 c0             	movzx  eax,al
c00118b4:	85 c0                	test   eax,eax
c00118b6:	74 08                	je     c00118c0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00118b8:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00118bd:	eb 09                	jmp    c00118c8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118bf:	90                   	nop
c00118c0:	b8 00 00 00 00       	mov    eax,0x0
c00118c5:	8d 76 00             	lea    esi,[esi+0x0]
c00118c8:	83 c4 0c             	add    esp,0xc
c00118cb:	c3                   	ret    

c00118cc <KiSigKill(int)>:
c00118cc:	83 ec 0c             	sub    esp,0xc
c00118cf:	6a 00                	push   0x0
c00118d1:	6a 00                	push   0x0
c00118d3:	6a ff                	push   0xffffffff
c00118d5:	6a 01                	push   0x1
c00118d7:	e8 76 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00118dc:	83 c4 1c             	add    esp,0x1c
c00118df:	c3                   	ret    

c00118e0 <KiDefaultSignalHandlerIgnore(int)>:
c00118e0:	c3                   	ret    

c00118e1 <KiDefaultSignalHandlerPause(int)>:
c00118e1:	57                   	push   edi
c00118e2:	b9 07 00 00 00       	mov    ecx,0x7
c00118e7:	56                   	push   esi
c00118e8:	be b9 23 02 c0       	mov    esi,0xc00223b9
c00118ed:	83 ec 24             	sub    esp,0x24
c00118f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00118f4:	fc                   	cld    
c00118f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00118f7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00118fb:	50                   	push   eax
c00118fc:	6a 00                	push   0x0
c00118fe:	6a 00                	push   0x0
c0011900:	6a 27                	push   0x27
c0011902:	e8 4b 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011907:	83 c4 34             	add    esp,0x34
c001190a:	5e                   	pop    esi
c001190b:	5f                   	pop    edi
c001190c:	c3                   	ret    

c001190d <KiDefaultSignalHandlerResume(int)>:
c001190d:	57                   	push   edi
c001190e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011913:	56                   	push   esi
c0011914:	be d5 23 02 c0       	mov    esi,0xc00223d5
c0011919:	83 ec 24             	sub    esp,0x24
c001191c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011920:	fc                   	cld    
c0011921:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011923:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011927:	50                   	push   eax
c0011928:	6a 00                	push   0x0
c001192a:	6a 00                	push   0x0
c001192c:	6a 27                	push   0x27
c001192e:	e8 1f 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011933:	83 c4 34             	add    esp,0x34
c0011936:	5e                   	pop    esi
c0011937:	5f                   	pop    edi
c0011938:	c3                   	ret    

c0011939 <KeDeinitSignals(SigHandlerBlock*)>:
c0011939:	e9 a5 61 ff ff       	jmp    c0007ae3 <free>

c001193e <KeInitSignals()>:
c001193e:	53                   	push   ebx
c001193f:	83 ec 14             	sub    esp,0x14
c0011942:	68 c8 00 00 00       	push   0xc8
c0011947:	e8 87 61 ff ff       	call   c0007ad3 <malloc>
c001194c:	83 c4 0c             	add    esp,0xc
c001194f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011959:	89 c3                	mov    ebx,eax
c001195b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011965:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001196b:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c001196f:	6a 20                	push   0x20
c0011971:	6a 00                	push   0x0
c0011973:	50                   	push   eax
c0011974:	e8 77 eb fe ff       	call   c00004f0 <memset>
c0011979:	83 c4 0c             	add    esp,0xc
c001197c:	6a 44                	push   0x44
c001197e:	6a 00                	push   0x0
c0011980:	53                   	push   ebx
c0011981:	e8 6a eb fe ff       	call   c00004f0 <memset>
c0011986:	83 c4 18             	add    esp,0x18
c0011989:	89 d8                	mov    eax,ebx
c001198b:	5b                   	pop    ebx
c001198c:	c3                   	ret    

c001198d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001198d:	53                   	push   ebx
c001198e:	b8 01 00 00 00       	mov    eax,0x1
c0011993:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011997:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001199b:	83 f9 10             	cmp    ecx,0x10
c001199e:	7f 21                	jg     c00119c1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00119a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00119a7:	89 03                	mov    DWORD PTR [ebx],eax
c00119a9:	b8 01 00 00 00       	mov    eax,0x1
c00119ae:	d3 e0                	shl    eax,cl
c00119b0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00119b4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00119b7:	31 c0                	xor    eax,eax
c00119b9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00119c1:	5b                   	pop    ebx
c00119c2:	c3                   	ret    

c00119c3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00119c3:	55                   	push   ebp
c00119c4:	57                   	push   edi
c00119c5:	bf 08 00 00 00       	mov    edi,0x8
c00119ca:	56                   	push   esi
c00119cb:	53                   	push   ebx
c00119cc:	83 ec 18             	sub    esp,0x18
c00119cf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119d3:	68 f2 23 02 c0       	push   0xc00223f2
c00119d8:	e8 2d 8f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	31 c9                	xor    ecx,ecx
c00119e2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00119e9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00119ef:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00119f3:	99                   	cdq    
c00119f4:	f7 ff                	idiv   edi
c00119f6:	8d 42 24             	lea    eax,[edx+0x24]
c00119f9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00119fd:	85 f6                	test   esi,esi
c00119ff:	75 1a                	jne    c0011a1b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011a01:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a05:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011a09:	50                   	push   eax
c0011a0a:	50                   	push   eax
c0011a0b:	52                   	push   edx
c0011a0c:	68 03 24 02 c0       	push   0xc0022403
c0011a11:	e8 f4 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a16:	83 c4 10             	add    esp,0x10
c0011a19:	eb 1b                	jmp    c0011a36 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011a1b:	41                   	inc    ecx
c0011a1c:	83 f9 08             	cmp    ecx,0x8
c0011a1f:	75 ce                	jne    c00119ef <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011a21:	83 ec 0c             	sub    esp,0xc
c0011a24:	be 01 00 00 00       	mov    esi,0x1
c0011a29:	68 24 24 02 c0       	push   0xc0022424
c0011a2e:	e8 d7 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a33:	83 c4 10             	add    esp,0x10
c0011a36:	83 c4 0c             	add    esp,0xc
c0011a39:	89 f0                	mov    eax,esi
c0011a3b:	5b                   	pop    ebx
c0011a3c:	5e                   	pop    esi
c0011a3d:	5f                   	pop    edi
c0011a3e:	5d                   	pop    ebp
c0011a3f:	c3                   	ret    

c0011a40 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011a40:	55                   	push   ebp
c0011a41:	57                   	push   edi
c0011a42:	56                   	push   esi
c0011a43:	53                   	push   ebx
c0011a44:	51                   	push   ecx
c0011a45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a49:	85 db                	test   ebx,ebx
c0011a4b:	0f 84 bc 00 00 00    	je     c0011b0d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a51:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011a58:	0f 84 af 00 00 00    	je     c0011b0d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a5e:	31 c9                	xor    ecx,ecx
c0011a60:	bf 08 00 00 00       	mov    edi,0x8
c0011a65:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011a6b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011a6e:	99                   	cdq    
c0011a6f:	f7 ff                	idiv   edi
c0011a71:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011a78:	85 ed                	test   ebp,ebp
c0011a7a:	0f 84 9e 00 00 00    	je     c0011b1e <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011a80:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011a86:	89 e9                	mov    ecx,ebp
c0011a88:	bf 01 00 00 00       	mov    edi,0x1
c0011a8d:	d3 e7                	shl    edi,cl
c0011a8f:	31 c9                	xor    ecx,ecx
c0011a91:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a94:	b8 01 00 00 00       	mov    eax,0x1
c0011a99:	d3 e0                	shl    eax,cl
c0011a9b:	85 04 24             	test   DWORD PTR [esp],eax
c0011a9e:	74 06                	je     c0011aa6 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011aa0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011aa4:	75 67                	jne    c0011b0d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011aa6:	41                   	inc    ecx
c0011aa7:	83 f9 11             	cmp    ecx,0x11
c0011aaa:	75 e8                	jne    c0011a94 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011aac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011aaf:	46                   	inc    esi
c0011ab0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011ab6:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011ac1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011ac8:	09 f8                	or     eax,edi
c0011aca:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011ad0:	31 c0                	xor    eax,eax
c0011ad2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011ada:	74 09                	je     c0011ae5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011adc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ae3:	eb 06                	jmp    c0011aeb <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011ae5:	40                   	inc    eax
c0011ae6:	83 f8 08             	cmp    eax,0x8
c0011ae9:	75 e7                	jne    c0011ad2 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011aeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011aef:	83 fd 09             	cmp    ebp,0x9
c0011af2:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011af5:	89 2a                	mov    DWORD PTR [edx],ebp
c0011af7:	75 07                	jne    c0011b00 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011af9:	b8 cc 18 01 c0       	mov    eax,0xc00118cc
c0011afe:	eb 31                	jmp    c0011b31 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b00:	83 f8 01             	cmp    eax,0x1
c0011b03:	75 0c                	jne    c0011b11 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011b05:	f7 d7                	not    edi
c0011b07:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011b0d:	31 c0                	xor    eax,eax
c0011b0f:	eb 20                	jmp    c0011b31 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b11:	85 c0                	test   eax,eax
c0011b13:	75 1c                	jne    c0011b31 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b15:	8b 04 ad 20 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc3e0]
c0011b1c:	eb 13                	jmp    c0011b31 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b1e:	41                   	inc    ecx
c0011b1f:	46                   	inc    esi
c0011b20:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b26:	83 f9 08             	cmp    ecx,0x8
c0011b29:	0f 85 36 ff ff ff    	jne    c0011a65 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011b2f:	eb dc                	jmp    c0011b0d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b31:	5a                   	pop    edx
c0011b32:	5b                   	pop    ebx
c0011b33:	5e                   	pop    esi
c0011b34:	5f                   	pop    edi
c0011b35:	5d                   	pop    ebp
c0011b36:	c3                   	ret    

c0011b37 <KiCheckSignalZ>:
c0011b37:	83 ec 10             	sub    esp,0x10
c0011b3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011b3e:	50                   	push   eax
c0011b3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b47:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b4d:	e8 ee fe ff ff       	call   c0011a40 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011b52:	5a                   	pop    edx
c0011b53:	31 d2                	xor    edx,edx
c0011b55:	59                   	pop    ecx
c0011b56:	85 c0                	test   eax,eax
c0011b58:	74 19                	je     c0011b73 <KiCheckSignalZ+0x3c>
c0011b5a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b60:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011b63:	89 02                	mov    DWORD PTR [edx],eax
c0011b65:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b70:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011b73:	89 d0                	mov    eax,edx
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	c3                   	ret    

c0011b79 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011b79:	56                   	push   esi
c0011b7a:	53                   	push   ebx
c0011b7b:	bb 01 00 00 00       	mov    ebx,0x1
c0011b80:	52                   	push   edx
c0011b81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011b85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b89:	d3 e3                	shl    ebx,cl
c0011b8b:	83 f9 10             	cmp    ecx,0x10
c0011b8e:	7f 08                	jg     c0011b98 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011b90:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011b96:	75 10                	jne    c0011ba8 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011b98:	83 ec 0c             	sub    esp,0xc
c0011b9b:	68 35 24 02 c0       	push   0xc0022435
c0011ba0:	e8 82 f9 ff ff       	call   c0011527 <KePanic(char const*)>
c0011ba5:	83 c4 10             	add    esp,0x10
c0011ba8:	f7 d3                	not    ebx
c0011baa:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011bb0:	58                   	pop    eax
c0011bb1:	5b                   	pop    ebx
c0011bb2:	5e                   	pop    esi
c0011bb3:	c3                   	ret    

c0011bb4 <KiFinishSignalZ>:
c0011bb4:	53                   	push   ebx
c0011bb5:	83 ec 10             	sub    esp,0x10
c0011bb8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bbc:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011bbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bcd:	e8 a7 ff ff ff       	call   c0011b79 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011bd2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011bd8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011bdf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011be6:	83 c4 18             	add    esp,0x18
c0011be9:	5b                   	pop    ebx
c0011bea:	c3                   	ret    

c0011beb <SysSeekDir(regs*)>:
c0011beb:	31 c0                	xor    eax,eax
c0011bed:	31 d2                	xor    edx,edx
c0011bef:	c3                   	ret    

c0011bf0 <SysTellDir(regs*)>:
c0011bf0:	31 c0                	xor    eax,eax
c0011bf2:	31 d2                	xor    edx,edx
c0011bf4:	c3                   	ret    

c0011bf5 <SysVerify(regs*)>:
c0011bf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf9:	31 d2                	xor    edx,edx
c0011bfb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bfe:	c3                   	ret    

c0011bff <SysGetArgc(regs*)>:
c0011bff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c07:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011c0d:	89 c2                	mov    edx,eax
c0011c0f:	c1 fa 1f             	sar    edx,0x1f
c0011c12:	c3                   	ret    

c0011c13 <SysTTYName(regs*)>:
c0011c13:	b8 01 00 00 00       	mov    eax,0x1
c0011c18:	31 d2                	xor    edx,edx
c0011c1a:	c3                   	ret    

c0011c1b <SysFormatDisk(regs*)>:
c0011c1b:	56                   	push   esi
c0011c1c:	53                   	push   ebx
c0011c1d:	83 ec 04             	sub    esp,0x4
c0011c20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c24:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011c2a:	eb 2a                	jmp    c0011c56 <SysFormatDisk(regs*)+0x3b>
c0011c2c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011c2f:	83 ec 0c             	sub    esp,0xc
c0011c32:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c37:	51                   	push   ecx
c0011c38:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011c3b:	51                   	push   ecx
c0011c3c:	50                   	push   eax
c0011c3d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011c44:	50                   	push   eax
c0011c45:	53                   	push   ebx
c0011c46:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011c49:	83 c4 20             	add    esp,0x20
c0011c4c:	83 f8 08             	cmp    eax,0x8
c0011c4f:	89 c1                	mov    ecx,eax
c0011c51:	75 14                	jne    c0011c67 <SysFormatDisk(regs*)+0x4c>
c0011c53:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c56:	85 db                	test   ebx,ebx
c0011c58:	75 d2                	jne    c0011c2c <SysFormatDisk(regs*)+0x11>
c0011c5a:	b8 03 00 00 00       	mov    eax,0x3
c0011c5f:	31 d2                	xor    edx,edx
c0011c61:	83 c4 04             	add    esp,0x4
c0011c64:	5b                   	pop    ebx
c0011c65:	5e                   	pop    esi
c0011c66:	c3                   	ret    
c0011c67:	85 c0                	test   eax,eax
c0011c69:	74 13                	je     c0011c7e <SysFormatDisk(regs*)+0x63>
c0011c6b:	31 d2                	xor    edx,edx
c0011c6d:	83 f9 09             	cmp    ecx,0x9
c0011c70:	b8 01 00 00 00       	mov    eax,0x1
c0011c75:	74 ea                	je     c0011c61 <SysFormatDisk(regs*)+0x46>
c0011c77:	b8 02 00 00 00       	mov    eax,0x2
c0011c7c:	eb e1                	jmp    c0011c5f <SysFormatDisk(regs*)+0x44>
c0011c7e:	31 c0                	xor    eax,eax
c0011c80:	eb dd                	jmp    c0011c5f <SysFormatDisk(regs*)+0x44>

c0011c82 <SysSetDiskVolumeLabel(regs*)>:
c0011c82:	56                   	push   esi
c0011c83:	53                   	push   ebx
c0011c84:	83 ec 04             	sub    esp,0x4
c0011c87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c8b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011c8e:	83 f8 19             	cmp    eax,0x19
c0011c91:	77 33                	ja     c0011cc6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c93:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011c9a:	85 c9                	test   ecx,ecx
c0011c9c:	74 28                	je     c0011cc6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c9e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011ca1:	85 db                	test   ebx,ebx
c0011ca3:	74 21                	je     c0011cc6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ca5:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011cab:	85 d2                	test   edx,edx
c0011cad:	74 17                	je     c0011cc6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011caf:	8b 32                	mov    esi,DWORD PTR [edx]
c0011cb1:	53                   	push   ebx
c0011cb2:	50                   	push   eax
c0011cb3:	51                   	push   ecx
c0011cb4:	52                   	push   edx
c0011cb5:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	83 c4 04             	add    esp,0x4
c0011cbe:	5b                   	pop    ebx
c0011cbf:	5e                   	pop    esi
c0011cc0:	89 c2                	mov    edx,eax
c0011cc2:	c1 fa 1f             	sar    edx,0x1f
c0011cc5:	c3                   	ret    
c0011cc6:	83 c4 04             	add    esp,0x4
c0011cc9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011cce:	5b                   	pop    ebx
c0011ccf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cd4:	5e                   	pop    esi
c0011cd5:	c3                   	ret    

c0011cd6 <SysGetDiskVolumeLabel(regs*)>:
c0011cd6:	57                   	push   edi
c0011cd7:	56                   	push   esi
c0011cd8:	53                   	push   ebx
c0011cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cdd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011ce0:	83 fa 19             	cmp    edx,0x19
c0011ce3:	77 3c                	ja     c0011d21 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ce5:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011cec:	85 c9                	test   ecx,ecx
c0011cee:	74 31                	je     c0011d21 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cf0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011cf3:	85 db                	test   ebx,ebx
c0011cf5:	74 2a                	je     c0011d21 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cf7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011cfa:	85 f6                	test   esi,esi
c0011cfc:	74 23                	je     c0011d21 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cfe:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011d04:	85 c0                	test   eax,eax
c0011d06:	74 19                	je     c0011d21 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d08:	83 ec 0c             	sub    esp,0xc
c0011d0b:	8b 38                	mov    edi,DWORD PTR [eax]
c0011d0d:	56                   	push   esi
c0011d0e:	53                   	push   ebx
c0011d0f:	52                   	push   edx
c0011d10:	51                   	push   ecx
c0011d11:	50                   	push   eax
c0011d12:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011d15:	83 c4 20             	add    esp,0x20
c0011d18:	5b                   	pop    ebx
c0011d19:	5e                   	pop    esi
c0011d1a:	89 c2                	mov    edx,eax
c0011d1c:	c1 fa 1f             	sar    edx,0x1f
c0011d1f:	5f                   	pop    edi
c0011d20:	c3                   	ret    
c0011d21:	5b                   	pop    ebx
c0011d22:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d2c:	5e                   	pop    esi
c0011d2d:	5f                   	pop    edi
c0011d2e:	c3                   	ret    

c0011d2f <SysShutdown(regs*)>:
c0011d2f:	57                   	push   edi
c0011d30:	56                   	push   esi
c0011d31:	83 ec 04             	sub    esp,0x4
c0011d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d38:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d3b:	85 c0                	test   eax,eax
c0011d3d:	74 1e                	je     c0011d5d <SysShutdown(regs*)+0x2e>
c0011d3f:	83 f8 01             	cmp    eax,0x1
c0011d42:	74 5f                	je     c0011da3 <SysShutdown(regs*)+0x74>
c0011d44:	83 f8 02             	cmp    eax,0x2
c0011d47:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d4c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d51:	74 32                	je     c0011d85 <SysShutdown(regs*)+0x56>
c0011d53:	83 c4 04             	add    esp,0x4
c0011d56:	89 f0                	mov    eax,esi
c0011d58:	5e                   	pop    esi
c0011d59:	89 fa                	mov    edx,edi
c0011d5b:	5f                   	pop    edi
c0011d5c:	c3                   	ret    
c0011d5d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011d62:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d67:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d6e:	6a 00                	push   0x0
c0011d70:	6a 00                	push   0x0
c0011d72:	6a 00                	push   0x0
c0011d74:	50                   	push   eax
c0011d75:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	89 f0                	mov    eax,esi
c0011d7d:	83 c4 04             	add    esp,0x4
c0011d80:	89 fa                	mov    edx,edi
c0011d82:	5e                   	pop    esi
c0011d83:	5f                   	pop    edi
c0011d84:	c3                   	ret    
c0011d85:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011d8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d8c:	6a 00                	push   0x0
c0011d8e:	6a 00                	push   0x0
c0011d90:	6a 01                	push   0x1
c0011d92:	50                   	push   eax
c0011d93:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	89 f0                	mov    eax,esi
c0011d9b:	83 c4 04             	add    esp,0x4
c0011d9e:	89 fa                	mov    edx,edi
c0011da0:	5e                   	pop    esi
c0011da1:	5f                   	pop    edi
c0011da2:	c3                   	ret    
c0011da3:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011da8:	85 c0                	test   eax,eax
c0011daa:	74 02                	je     c0011dae <SysShutdown(regs*)+0x7f>
c0011dac:	ff d0                	call   eax
c0011dae:	31 f6                	xor    esi,esi
c0011db0:	83 c4 04             	add    esp,0x4
c0011db3:	89 f0                	mov    eax,esi
c0011db5:	31 ff                	xor    edi,edi
c0011db7:	5e                   	pop    esi
c0011db8:	89 fa                	mov    edx,edi
c0011dba:	5f                   	pop    edi
c0011dbb:	c3                   	ret    

c0011dbc <SysRealpath(regs*)>:
c0011dbc:	53                   	push   ebx
c0011dbd:	83 ec 08             	sub    esp,0x8
c0011dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011dc7:	85 c9                	test   ecx,ecx
c0011dc9:	74 36                	je     c0011e01 <SysRealpath(regs*)+0x45>
c0011dcb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dce:	31 d2                	xor    edx,edx
c0011dd0:	b8 01 00 00 00       	mov    eax,0x1
c0011dd5:	85 db                	test   ebx,ebx
c0011dd7:	75 05                	jne    c0011dde <SysRealpath(regs*)+0x22>
c0011dd9:	83 c4 08             	add    esp,0x8
c0011ddc:	5b                   	pop    ebx
c0011ddd:	c3                   	ret    
c0011dde:	6a 00                	push   0x0
c0011de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011de5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011de8:	05 0c 01 00 00       	add    eax,0x10c
c0011ded:	50                   	push   eax
c0011dee:	51                   	push   ecx
c0011def:	53                   	push   ebx
c0011df0:	e8 e1 99 ff ff       	call   c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	31 c0                	xor    eax,eax
c0011dfa:	31 d2                	xor    edx,edx
c0011dfc:	83 c4 08             	add    esp,0x8
c0011dff:	5b                   	pop    ebx
c0011e00:	c3                   	ret    
c0011e01:	b8 01 00 00 00       	mov    eax,0x1
c0011e06:	31 d2                	xor    edx,edx
c0011e08:	eb f2                	jmp    c0011dfc <SysRealpath(regs*)+0x40>

c0011e0a <SysReadDir(regs*)>:
c0011e0a:	53                   	push   ebx
c0011e0b:	83 ec 18             	sub    esp,0x18
c0011e0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e12:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e15:	83 f8 02             	cmp    eax,0x2
c0011e18:	76 4f                	jbe    c0011e69 <SysReadDir(regs*)+0x5f>
c0011e1a:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011e21:	77 52                	ja     c0011e75 <SysReadDir(regs*)+0x6b>
c0011e23:	83 ec 0c             	sub    esp,0xc
c0011e26:	50                   	push   eax
c0011e27:	e8 6f 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e2c:	83 c4 10             	add    esp,0x10
c0011e2f:	85 c0                	test   eax,eax
c0011e31:	74 42                	je     c0011e75 <SysReadDir(regs*)+0x6b>
c0011e33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e3b:	83 ec 0c             	sub    esp,0xc
c0011e3e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e42:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e44:	51                   	push   ecx
c0011e45:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e48:	51                   	push   ecx
c0011e49:	6a 00                	push   0x0
c0011e4b:	68 10 01 00 00       	push   0x110
c0011e50:	50                   	push   eax
c0011e51:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e54:	83 c4 20             	add    esp,0x20
c0011e57:	85 c0                	test   eax,eax
c0011e59:	89 c1                	mov    ecx,eax
c0011e5b:	74 27                	je     c0011e84 <SysReadDir(regs*)+0x7a>
c0011e5d:	31 d2                	xor    edx,edx
c0011e5f:	83 f9 07             	cmp    ecx,0x7
c0011e62:	b8 02 00 00 00       	mov    eax,0x2
c0011e67:	75 16                	jne    c0011e7f <SysReadDir(regs*)+0x75>
c0011e69:	b8 01 00 00 00       	mov    eax,0x1
c0011e6e:	31 d2                	xor    edx,edx
c0011e70:	83 c4 18             	add    esp,0x18
c0011e73:	5b                   	pop    ebx
c0011e74:	c3                   	ret    
c0011e75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e7f:	83 c4 18             	add    esp,0x18
c0011e82:	5b                   	pop    ebx
c0011e83:	c3                   	ret    
c0011e84:	31 c0                	xor    eax,eax
c0011e86:	31 d2                	xor    edx,edx
c0011e88:	eb e6                	jmp    c0011e70 <SysReadDir(regs*)+0x66>

c0011e8a <SysIsATTY(regs*)>:
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e91:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e94:	83 f8 02             	cmp    eax,0x2
c0011e97:	76 07                	jbe    c0011ea0 <SysIsATTY(regs*)+0x16>
c0011e99:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011e9e:	75 26                	jne    c0011ec6 <SysIsATTY(regs*)+0x3c>
c0011ea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ea5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ea8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011eae:	85 c0                	test   eax,eax
c0011eb0:	74 24                	je     c0011ed6 <SysIsATTY(regs*)+0x4c>
c0011eb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011eb4:	83 ec 0c             	sub    esp,0xc
c0011eb7:	50                   	push   eax
c0011eb8:	ff 12                	call   DWORD PTR [edx]
c0011eba:	83 c4 10             	add    esp,0x10
c0011ebd:	31 d2                	xor    edx,edx
c0011ebf:	83 c4 0c             	add    esp,0xc
c0011ec2:	0f b6 c0             	movzx  eax,al
c0011ec5:	c3                   	ret    
c0011ec6:	83 ec 0c             	sub    esp,0xc
c0011ec9:	50                   	push   eax
c0011eca:	e8 cc 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	85 c0                	test   eax,eax
c0011ed4:	75 dc                	jne    c0011eb2 <SysIsATTY(regs*)+0x28>
c0011ed6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011edb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee0:	83 c4 0c             	add    esp,0xc
c0011ee3:	c3                   	ret    

c0011ee4 <SysSeek(regs*)>:
c0011ee4:	56                   	push   esi
c0011ee5:	53                   	push   ebx
c0011ee6:	83 ec 04             	sub    esp,0x4
c0011ee9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011eed:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ef0:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011ef3:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011ef9:	77 33                	ja     c0011f2e <SysSeek(regs*)+0x4a>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	51                   	push   ecx
c0011eff:	e8 97 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f04:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f07:	83 c4 0c             	add    esp,0xc
c0011f0a:	31 db                	xor    ebx,ebx
c0011f0c:	53                   	push   ebx
c0011f0d:	51                   	push   ecx
c0011f0e:	50                   	push   eax
c0011f0f:	e8 aa 9c ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	85 c0                	test   eax,eax
c0011f19:	0f 95 c0             	setne  al
c0011f1c:	31 d2                	xor    edx,edx
c0011f1e:	0f b6 c0             	movzx  eax,al
c0011f21:	f7 d8                	neg    eax
c0011f23:	83 d2 00             	adc    edx,0x0
c0011f26:	83 c4 04             	add    esp,0x4
c0011f29:	5b                   	pop    ebx
c0011f2a:	f7 da                	neg    edx
c0011f2c:	5e                   	pop    esi
c0011f2d:	c3                   	ret    
c0011f2e:	83 c4 04             	add    esp,0x4
c0011f31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f36:	5b                   	pop    ebx
c0011f37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f3c:	5e                   	pop    esi
c0011f3d:	c3                   	ret    

c0011f3e <SysTell(regs*)>:
c0011f3e:	53                   	push   ebx
c0011f3f:	83 ec 08             	sub    esp,0x8
c0011f42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f46:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f49:	83 f8 02             	cmp    eax,0x2
c0011f4c:	76 4e                	jbe    c0011f9c <SysTell(regs*)+0x5e>
c0011f4e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f53:	76 19                	jbe    c0011f6e <SysTell(regs*)+0x30>
c0011f55:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f58:	31 d2                	xor    edx,edx
c0011f5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f67:	83 c4 08             	add    esp,0x8
c0011f6a:	31 c0                	xor    eax,eax
c0011f6c:	5b                   	pop    ebx
c0011f6d:	c3                   	ret    
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	50                   	push   eax
c0011f72:	e8 24 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f77:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011f7a:	5a                   	pop    edx
c0011f7b:	59                   	pop    ecx
c0011f7c:	53                   	push   ebx
c0011f7d:	50                   	push   eax
c0011f7e:	e8 e7 9c ff ff       	call   c000bc6a <File::tell(unsigned long long*)>
c0011f83:	83 c4 10             	add    esp,0x10
c0011f86:	85 c0                	test   eax,eax
c0011f88:	0f 95 c0             	setne  al
c0011f8b:	31 d2                	xor    edx,edx
c0011f8d:	0f b6 c0             	movzx  eax,al
c0011f90:	f7 d8                	neg    eax
c0011f92:	83 d2 00             	adc    edx,0x0
c0011f95:	83 c4 08             	add    esp,0x8
c0011f98:	5b                   	pop    ebx
c0011f99:	f7 da                	neg    edx
c0011f9b:	c3                   	ret    
c0011f9c:	83 c4 08             	add    esp,0x8
c0011f9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fa4:	5b                   	pop    ebx
c0011fa5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011faa:	c3                   	ret    

c0011fab <SysSize(regs*)>:
c0011fab:	53                   	push   ebx
c0011fac:	83 ec 18             	sub    esp,0x18
c0011faf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fb3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fb6:	83 f8 02             	cmp    eax,0x2
c0011fb9:	76 54                	jbe    c001200f <SysSize(regs*)+0x64>
c0011fbb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fc0:	76 19                	jbe    c0011fdb <SysSize(regs*)+0x30>
c0011fc2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fc5:	31 d2                	xor    edx,edx
c0011fc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fcd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fd4:	83 c4 18             	add    esp,0x18
c0011fd7:	31 c0                	xor    eax,eax
c0011fd9:	5b                   	pop    ebx
c0011fda:	c3                   	ret    
c0011fdb:	83 ec 0c             	sub    esp,0xc
c0011fde:	50                   	push   eax
c0011fdf:	e8 b7 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fe4:	83 c4 0c             	add    esp,0xc
c0011fe7:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011feb:	52                   	push   edx
c0011fec:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011fef:	52                   	push   edx
c0011ff0:	50                   	push   eax
c0011ff1:	e8 0c 9e ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c0011ff6:	83 c4 10             	add    esp,0x10
c0011ff9:	85 c0                	test   eax,eax
c0011ffb:	0f 95 c0             	setne  al
c0011ffe:	31 d2                	xor    edx,edx
c0012000:	0f b6 c0             	movzx  eax,al
c0012003:	f7 d8                	neg    eax
c0012005:	83 d2 00             	adc    edx,0x0
c0012008:	83 c4 18             	add    esp,0x18
c001200b:	5b                   	pop    ebx
c001200c:	f7 da                	neg    edx
c001200e:	c3                   	ret    
c001200f:	83 c4 18             	add    esp,0x18
c0012012:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012017:	5b                   	pop    ebx
c0012018:	ba ff ff ff ff       	mov    edx,0xffffffff
c001201d:	c3                   	ret    

c001201e <SysSizeFromFilename(regs*)>:
c001201e:	55                   	push   ebp
c001201f:	57                   	push   edi
c0012020:	56                   	push   esi
c0012021:	53                   	push   ebx
c0012022:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012028:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001202f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012032:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012035:	85 f6                	test   esi,esi
c0012037:	89 f8                	mov    eax,edi
c0012039:	74 09                	je     c0012044 <SysSizeFromFilename(regs*)+0x26>
c001203b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012041:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012044:	83 f8 02             	cmp    eax,0x2
c0012047:	0f 86 ca 00 00 00    	jbe    c0012117 <SysSizeFromFilename(regs*)+0xf9>
c001204d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012052:	76 1f                	jbe    c0012073 <SysSizeFromFilename(regs*)+0x55>
c0012054:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012057:	31 d2                	xor    edx,edx
c0012059:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001205f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012066:	31 c0                	xor    eax,eax
c0012068:	81 c4 4c 02 00 00    	add    esp,0x24c
c001206e:	5b                   	pop    ebx
c001206f:	5e                   	pop    esi
c0012070:	5f                   	pop    edi
c0012071:	5d                   	pop    ebp
c0012072:	c3                   	ret    
c0012073:	83 ec 0c             	sub    esp,0xc
c0012076:	68 14 01 00 00       	push   0x114
c001207b:	e8 53 5a ff ff       	call   c0007ad3 <malloc>
c0012080:	6a 01                	push   0x1
c0012082:	89 c5                	mov    ebp,eax
c0012084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012089:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001208c:	51                   	push   ecx
c001208d:	57                   	push   edi
c001208e:	55                   	push   ebp
c001208f:	e8 70 99 ff ff       	call   c000ba04 <File::File(char const*, Process*, bool)>
c0012094:	83 c4 1c             	add    esp,0x1c
c0012097:	8d 44 24 13          	lea    eax,[esp+0x13]
c001209b:	50                   	push   eax
c001209c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001209f:	53                   	push   ebx
c00120a0:	55                   	push   ebp
c00120a1:	e8 5c 9d ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c00120a6:	83 c4 10             	add    esp,0x10
c00120a9:	85 ed                	test   ebp,ebp
c00120ab:	89 c3                	mov    ebx,eax
c00120ad:	74 0d                	je     c00120bc <SysSizeFromFilename(regs*)+0x9e>
c00120af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120b2:	83 ec 0c             	sub    esp,0xc
c00120b5:	55                   	push   ebp
c00120b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	85 db                	test   ebx,ebx
c00120be:	75 57                	jne    c0012117 <SysSizeFromFilename(regs*)+0xf9>
c00120c0:	6a 00                	push   0x0
c00120c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120ca:	05 0c 01 00 00       	add    eax,0x10c
c00120cf:	50                   	push   eax
c00120d0:	57                   	push   edi
c00120d1:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00120d8:	53                   	push   ebx
c00120d9:	e8 f8 96 ff ff       	call   c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00120de:	58                   	pop    eax
c00120df:	5a                   	pop    edx
c00120e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00120e4:	50                   	push   eax
c00120e5:	53                   	push   ebx
c00120e6:	e8 02 90 ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c00120eb:	83 c4 10             	add    esp,0x10
c00120ee:	ba 00 00 00 00       	mov    edx,0x0
c00120f3:	83 f8 01             	cmp    eax,0x1
c00120f6:	b8 00 00 00 00       	mov    eax,0x0
c00120fb:	74 2f                	je     c001212c <SysSizeFromFilename(regs*)+0x10e>
c00120fd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012102:	74 3b                	je     c001213f <SysSizeFromFilename(regs*)+0x121>
c0012104:	85 f6                	test   esi,esi
c0012106:	0f 84 5c ff ff ff    	je     c0012068 <SysSizeFromFilename(regs*)+0x4a>
c001210c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012112:	e9 51 ff ff ff       	jmp    c0012068 <SysSizeFromFilename(regs*)+0x4a>
c0012117:	81 c4 4c 02 00 00    	add    esp,0x24c
c001211d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012122:	5b                   	pop    ebx
c0012123:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012128:	5e                   	pop    esi
c0012129:	5f                   	pop    edi
c001212a:	5d                   	pop    ebp
c001212b:	c3                   	ret    
c001212c:	85 f6                	test   esi,esi
c001212e:	0f 84 34 ff ff ff    	je     c0012068 <SysSizeFromFilename(regs*)+0x4a>
c0012134:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001213a:	e9 29 ff ff ff       	jmp    c0012068 <SysSizeFromFilename(regs*)+0x4a>
c001213f:	85 f6                	test   esi,esi
c0012141:	0f 84 21 ff ff ff    	je     c0012068 <SysSizeFromFilename(regs*)+0x4a>
c0012147:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001214d:	e9 16 ff ff ff       	jmp    c0012068 <SysSizeFromFilename(regs*)+0x4a>

c0012152 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012152:	55                   	push   ebp
c0012153:	57                   	push   edi
c0012154:	56                   	push   esi
c0012155:	53                   	push   ebx
c0012156:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001215c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012163:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012166:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012169:	85 f6                	test   esi,esi
c001216b:	89 f8                	mov    eax,edi
c001216d:	74 09                	je     c0012178 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001216f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012175:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012178:	83 f8 02             	cmp    eax,0x2
c001217b:	0f 86 ca 00 00 00    	jbe    c001224b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012181:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012186:	76 1f                	jbe    c00121a7 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0012188:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001218b:	31 d2                	xor    edx,edx
c001218d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012193:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001219a:	31 c0                	xor    eax,eax
c001219c:	81 c4 4c 02 00 00    	add    esp,0x24c
c00121a2:	5b                   	pop    ebx
c00121a3:	5e                   	pop    esi
c00121a4:	5f                   	pop    edi
c00121a5:	5d                   	pop    ebp
c00121a6:	c3                   	ret    
c00121a7:	83 ec 0c             	sub    esp,0xc
c00121aa:	68 14 01 00 00       	push   0x114
c00121af:	e8 1f 59 ff ff       	call   c0007ad3 <malloc>
c00121b4:	6a 00                	push   0x0
c00121b6:	89 c5                	mov    ebp,eax
c00121b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121bd:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121c0:	51                   	push   ecx
c00121c1:	57                   	push   edi
c00121c2:	55                   	push   ebp
c00121c3:	e8 3c 98 ff ff       	call   c000ba04 <File::File(char const*, Process*, bool)>
c00121c8:	83 c4 1c             	add    esp,0x1c
c00121cb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00121cf:	50                   	push   eax
c00121d0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00121d3:	53                   	push   ebx
c00121d4:	55                   	push   ebp
c00121d5:	e8 28 9c ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c00121da:	83 c4 10             	add    esp,0x10
c00121dd:	85 ed                	test   ebp,ebp
c00121df:	89 c3                	mov    ebx,eax
c00121e1:	74 0d                	je     c00121f0 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00121e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121e6:	83 ec 0c             	sub    esp,0xc
c00121e9:	55                   	push   ebp
c00121ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121ed:	83 c4 10             	add    esp,0x10
c00121f0:	85 db                	test   ebx,ebx
c00121f2:	75 57                	jne    c001224b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00121f4:	6a 00                	push   0x0
c00121f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121fe:	05 0c 01 00 00       	add    eax,0x10c
c0012203:	50                   	push   eax
c0012204:	57                   	push   edi
c0012205:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001220c:	53                   	push   ebx
c001220d:	e8 c4 95 ff ff       	call   c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012212:	58                   	pop    eax
c0012213:	5a                   	pop    edx
c0012214:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012218:	50                   	push   eax
c0012219:	53                   	push   ebx
c001221a:	e8 ce 8e ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c001221f:	83 c4 10             	add    esp,0x10
c0012222:	ba 00 00 00 00       	mov    edx,0x0
c0012227:	83 f8 01             	cmp    eax,0x1
c001222a:	b8 00 00 00 00       	mov    eax,0x0
c001222f:	74 2f                	je     c0012260 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012231:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012236:	74 3b                	je     c0012273 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012238:	85 f6                	test   esi,esi
c001223a:	0f 84 5c ff ff ff    	je     c001219c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012240:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012246:	e9 51 ff ff ff       	jmp    c001219c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001224b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012251:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012256:	5b                   	pop    ebx
c0012257:	ba ff ff ff ff       	mov    edx,0xffffffff
c001225c:	5e                   	pop    esi
c001225d:	5f                   	pop    edi
c001225e:	5d                   	pop    ebp
c001225f:	c3                   	ret    
c0012260:	85 f6                	test   esi,esi
c0012262:	0f 84 34 ff ff ff    	je     c001219c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012268:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001226e:	e9 29 ff ff ff       	jmp    c001219c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012273:	85 f6                	test   esi,esi
c0012275:	0f 84 21 ff ff ff    	je     c001219c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001227b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012281:	e9 16 ff ff ff       	jmp    c001219c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0012286 <SysClose(regs*)>:
c0012286:	53                   	push   ebx
c0012287:	83 ec 08             	sub    esp,0x8
c001228a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001228e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012291:	83 f8 02             	cmp    eax,0x2
c0012294:	76 41                	jbe    c00122d7 <SysClose(regs*)+0x51>
c0012296:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001229c:	83 fa 01             	cmp    edx,0x1
c001229f:	76 2d                	jbe    c00122ce <SysClose(regs*)+0x48>
c00122a1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122a6:	77 2f                	ja     c00122d7 <SysClose(regs*)+0x51>
c00122a8:	83 ec 0c             	sub    esp,0xc
c00122ab:	50                   	push   eax
c00122ac:	e8 ea 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00122b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00122b4:	89 c3                	mov    ebx,eax
c00122b6:	e8 a3 98 ff ff       	call   c000bb5e <File::close()>
c00122bb:	83 c4 10             	add    esp,0x10
c00122be:	85 db                	test   ebx,ebx
c00122c0:	74 0c                	je     c00122ce <SysClose(regs*)+0x48>
c00122c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122c4:	83 ec 0c             	sub    esp,0xc
c00122c7:	53                   	push   ebx
c00122c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	83 c4 08             	add    esp,0x8
c00122d1:	31 c0                	xor    eax,eax
c00122d3:	5b                   	pop    ebx
c00122d4:	31 d2                	xor    edx,edx
c00122d6:	c3                   	ret    
c00122d7:	83 c4 08             	add    esp,0x8
c00122da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122df:	5b                   	pop    ebx
c00122e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122e5:	c3                   	ret    

c00122e6 <SysOpenDir(regs*)>:
c00122e6:	56                   	push   esi
c00122e7:	53                   	push   ebx
c00122e8:	83 ec 04             	sub    esp,0x4
c00122eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122ef:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00122f2:	85 c9                	test   ecx,ecx
c00122f4:	74 5d                	je     c0012353 <SysOpenDir(regs*)+0x6d>
c00122f6:	83 ec 0c             	sub    esp,0xc
c00122f9:	68 14 01 00 00       	push   0x114
c00122fe:	e8 d0 57 ff ff       	call   c0007ad3 <malloc>
c0012303:	83 c4 0c             	add    esp,0xc
c0012306:	89 c6                	mov    esi,eax
c0012308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001230d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012310:	50                   	push   eax
c0012311:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012314:	52                   	push   edx
c0012315:	56                   	push   esi
c0012316:	e8 a7 9c ff ff       	call   c000bfc2 <Directory::Directory(char const*, Process*)>
c001231b:	83 c4 10             	add    esp,0x10
c001231e:	85 f6                	test   esi,esi
c0012320:	74 31                	je     c0012353 <SysOpenDir(regs*)+0x6d>
c0012322:	83 ec 0c             	sub    esp,0xc
c0012325:	56                   	push   esi
c0012326:	e8 5f 9d ff ff       	call   c000c08a <Directory::open()>
c001232b:	83 c4 10             	add    esp,0x10
c001232e:	85 c0                	test   eax,eax
c0012330:	75 21                	jne    c0012353 <SysOpenDir(regs*)+0x6d>
c0012332:	83 ec 0c             	sub    esp,0xc
c0012335:	56                   	push   esi
c0012336:	e8 63 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001233b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001233e:	83 c4 10             	add    esp,0x10
c0012341:	89 02                	mov    DWORD PTR [edx],eax
c0012343:	c1 f8 1f             	sar    eax,0x1f
c0012346:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012349:	83 c4 04             	add    esp,0x4
c001234c:	31 c0                	xor    eax,eax
c001234e:	5b                   	pop    ebx
c001234f:	31 d2                	xor    edx,edx
c0012351:	5e                   	pop    esi
c0012352:	c3                   	ret    
c0012353:	83 c4 04             	add    esp,0x4
c0012356:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001235b:	5b                   	pop    ebx
c001235c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012361:	5e                   	pop    esi
c0012362:	c3                   	ret    

c0012363 <SysMakeDir(regs*)>:
c0012363:	56                   	push   esi
c0012364:	53                   	push   ebx
c0012365:	83 ec 10             	sub    esp,0x10
c0012368:	68 14 01 00 00       	push   0x114
c001236d:	e8 61 57 ff ff       	call   c0007ad3 <malloc>
c0012372:	83 c4 0c             	add    esp,0xc
c0012375:	89 c3                	mov    ebx,eax
c0012377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001237c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001237f:	50                   	push   eax
c0012380:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012384:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012387:	52                   	push   edx
c0012388:	53                   	push   ebx
c0012389:	e8 34 9c ff ff       	call   c000bfc2 <Directory::Directory(char const*, Process*)>
c001238e:	83 c4 10             	add    esp,0x10
c0012391:	85 db                	test   ebx,ebx
c0012393:	74 2c                	je     c00123c1 <SysMakeDir(regs*)+0x5e>
c0012395:	83 ec 0c             	sub    esp,0xc
c0012398:	53                   	push   ebx
c0012399:	e8 cc 9e ff ff       	call   c000c26a <Directory::create()>
c001239e:	89 c6                	mov    esi,eax
c00123a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	31 c0                	xor    eax,eax
c00123ad:	85 f6                	test   esi,esi
c00123af:	0f 95 c0             	setne  al
c00123b2:	31 d2                	xor    edx,edx
c00123b4:	f7 d8                	neg    eax
c00123b6:	83 d2 00             	adc    edx,0x0
c00123b9:	83 c4 04             	add    esp,0x4
c00123bc:	5b                   	pop    ebx
c00123bd:	f7 da                	neg    edx
c00123bf:	5e                   	pop    esi
c00123c0:	c3                   	ret    
c00123c1:	83 c4 04             	add    esp,0x4
c00123c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123c9:	5b                   	pop    ebx
c00123ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123cf:	5e                   	pop    esi
c00123d0:	c3                   	ret    

c00123d1 <SysCloseDir(regs*)>:
c00123d1:	53                   	push   ebx
c00123d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123d7:	83 ec 08             	sub    esp,0x8
c00123da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123de:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00123e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123e6:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00123e9:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00123ef:	77 2a                	ja     c001241b <SysCloseDir(regs*)+0x4a>
c00123f1:	83 ec 0c             	sub    esp,0xc
c00123f4:	51                   	push   ecx
c00123f5:	e8 a1 70 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00123fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00123fd:	89 c3                	mov    ebx,eax
c00123ff:	e8 e2 9c ff ff       	call   c000c0e6 <Directory::close()>
c0012404:	83 c4 10             	add    esp,0x10
c0012407:	85 db                	test   ebx,ebx
c0012409:	74 0c                	je     c0012417 <SysCloseDir(regs*)+0x46>
c001240b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001240d:	83 ec 0c             	sub    esp,0xc
c0012410:	53                   	push   ebx
c0012411:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012414:	83 c4 10             	add    esp,0x10
c0012417:	31 c0                	xor    eax,eax
c0012419:	31 d2                	xor    edx,edx
c001241b:	83 c4 08             	add    esp,0x8
c001241e:	5b                   	pop    ebx
c001241f:	c3                   	ret    

c0012420 <SysWait(regs*)>:
c0012420:	83 ec 10             	sub    esp,0x10
c0012423:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012427:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001242a:	52                   	push   edx
c001242b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001242e:	51                   	push   ecx
c001242f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012432:	50                   	push   eax
c0012433:	e8 10 3e 00 00       	call   c0016248 <waitTask(int, int*, int)>
c0012438:	83 c4 1c             	add    esp,0x1c
c001243b:	89 c2                	mov    edx,eax
c001243d:	c1 fa 1f             	sar    edx,0x1f
c0012440:	c3                   	ret    

c0012441 <SysNotImpl(regs*)>:
c0012441:	83 ec 18             	sub    esp,0x18
c0012444:	68 46 24 02 c0       	push   0xc0022446
c0012449:	e8 d9 f0 ff ff       	call   c0011527 <KePanic(char const*)>
c001244e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012453:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012458:	83 c4 1c             	add    esp,0x1c
c001245b:	c3                   	ret    

c001245c <SysPanic(regs*)>:
c001245c:	83 ec 18             	sub    esp,0x18
c001245f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012463:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012466:	50                   	push   eax
c0012467:	e8 bb f0 ff ff       	call   c0011527 <KePanic(char const*)>
c001246c:	b8 01 00 00 00       	mov    eax,0x1
c0012471:	31 d2                	xor    edx,edx
c0012473:	83 c4 1c             	add    esp,0x1c
c0012476:	c3                   	ret    

c0012477 <SysRmdir(regs*)>:
c0012477:	56                   	push   esi
c0012478:	53                   	push   ebx
c0012479:	83 ec 10             	sub    esp,0x10
c001247c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012480:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012483:	68 14 01 00 00       	push   0x114
c0012488:	e8 46 56 ff ff       	call   c0007ad3 <malloc>
c001248d:	6a 00                	push   0x0
c001248f:	89 c3                	mov    ebx,eax
c0012491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012496:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012499:	50                   	push   eax
c001249a:	56                   	push   esi
c001249b:	53                   	push   ebx
c001249c:	e8 63 95 ff ff       	call   c000ba04 <File::File(char const*, Process*, bool)>
c00124a1:	83 c4 14             	add    esp,0x14
c00124a4:	53                   	push   ebx
c00124a5:	e8 24 98 ff ff       	call   c000bcce <File::unlink()>
c00124aa:	83 c4 10             	add    esp,0x10
c00124ad:	85 db                	test   ebx,ebx
c00124af:	89 c6                	mov    esi,eax
c00124b1:	74 0c                	je     c00124bf <SysRmdir(regs*)+0x48>
c00124b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124b5:	83 ec 0c             	sub    esp,0xc
c00124b8:	53                   	push   ebx
c00124b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124bc:	83 c4 10             	add    esp,0x10
c00124bf:	31 c0                	xor    eax,eax
c00124c1:	85 f6                	test   esi,esi
c00124c3:	0f 95 c0             	setne  al
c00124c6:	31 d2                	xor    edx,edx
c00124c8:	f7 d8                	neg    eax
c00124ca:	83 d2 00             	adc    edx,0x0
c00124cd:	83 c4 04             	add    esp,0x4
c00124d0:	5b                   	pop    ebx
c00124d1:	f7 da                	neg    edx
c00124d3:	5e                   	pop    esi
c00124d4:	c3                   	ret    

c00124d5 <SysUnlink(regs*)>:
c00124d5:	56                   	push   esi
c00124d6:	53                   	push   ebx
c00124d7:	83 ec 10             	sub    esp,0x10
c00124da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124de:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00124e1:	68 14 01 00 00       	push   0x114
c00124e6:	e8 e8 55 ff ff       	call   c0007ad3 <malloc>
c00124eb:	6a 00                	push   0x0
c00124ed:	89 c3                	mov    ebx,eax
c00124ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124f7:	50                   	push   eax
c00124f8:	56                   	push   esi
c00124f9:	53                   	push   ebx
c00124fa:	e8 05 95 ff ff       	call   c000ba04 <File::File(char const*, Process*, bool)>
c00124ff:	83 c4 14             	add    esp,0x14
c0012502:	53                   	push   ebx
c0012503:	e8 c6 97 ff ff       	call   c000bcce <File::unlink()>
c0012508:	83 c4 10             	add    esp,0x10
c001250b:	85 db                	test   ebx,ebx
c001250d:	89 c6                	mov    esi,eax
c001250f:	74 0c                	je     c001251d <SysUnlink(regs*)+0x48>
c0012511:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012513:	83 ec 0c             	sub    esp,0xc
c0012516:	53                   	push   ebx
c0012517:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001251a:	83 c4 10             	add    esp,0x10
c001251d:	31 c0                	xor    eax,eax
c001251f:	85 f6                	test   esi,esi
c0012521:	0f 95 c0             	setne  al
c0012524:	31 d2                	xor    edx,edx
c0012526:	f7 d8                	neg    eax
c0012528:	83 d2 00             	adc    edx,0x0
c001252b:	83 c4 04             	add    esp,0x4
c001252e:	5b                   	pop    ebx
c001252f:	f7 da                	neg    edx
c0012531:	5e                   	pop    esi
c0012532:	c3                   	ret    

c0012533 <SysGetArgv(regs*)>:
c0012533:	83 ec 0c             	sub    esp,0xc
c0012536:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001253a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001253d:	85 c0                	test   eax,eax
c001253f:	78 2c                	js     c001256d <SysGetArgv(regs*)+0x3a>
c0012541:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012547:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001254a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012550:	7d 1b                	jge    c001256d <SysGetArgv(regs*)+0x3a>
c0012552:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012559:	85 c0                	test   eax,eax
c001255b:	74 18                	je     c0012575 <SysGetArgv(regs*)+0x42>
c001255d:	83 ec 08             	sub    esp,0x8
c0012560:	50                   	push   eax
c0012561:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012564:	50                   	push   eax
c0012565:	e8 e6 e0 fe ff       	call   c0000650 <strcpy>
c001256a:	83 c4 10             	add    esp,0x10
c001256d:	31 c0                	xor    eax,eax
c001256f:	31 d2                	xor    edx,edx
c0012571:	83 c4 0c             	add    esp,0xc
c0012574:	c3                   	ret    
c0012575:	b8 01 00 00 00       	mov    eax,0x1
c001257a:	31 d2                	xor    edx,edx
c001257c:	83 c4 0c             	add    esp,0xc
c001257f:	c3                   	ret    

c0012580 <SysUSleep(regs*)>:
c0012580:	83 ec 1c             	sub    esp,0x1c
c0012583:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012587:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001258a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001258d:	6a 00                	push   0x0
c001258f:	6a 64                	push   0x64
c0012591:	52                   	push   edx
c0012592:	50                   	push   eax
c0012593:	e8 38 d1 00 00       	call   c001f6d0 <__udivdi3>
c0012598:	83 c4 14             	add    esp,0x14
c001259b:	50                   	push   eax
c001259c:	e8 8b 3d 00 00       	call   c001632c <milliTenthSleep(unsigned int)>
c00125a1:	31 c0                	xor    eax,eax
c00125a3:	31 d2                	xor    edx,edx
c00125a5:	83 c4 1c             	add    esp,0x1c
c00125a8:	c3                   	ret    

c00125a9 <SysSpawn(regs*)>:
c00125a9:	56                   	push   esi
c00125aa:	53                   	push   ebx
c00125ab:	83 ec 04             	sub    esp,0x4
c00125ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125b2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00125b5:	85 f6                	test   esi,esi
c00125b7:	75 0a                	jne    c00125c3 <SysSpawn(regs*)+0x1a>
c00125b9:	83 c4 04             	add    esp,0x4
c00125bc:	31 c0                	xor    eax,eax
c00125be:	5b                   	pop    ebx
c00125bf:	31 d2                	xor    edx,edx
c00125c1:	5e                   	pop    esi
c00125c2:	c3                   	ret    
c00125c3:	83 ec 0c             	sub    esp,0xc
c00125c6:	68 24 07 00 00       	push   0x724
c00125cb:	e8 03 55 ff ff       	call   c0007ad3 <malloc>
c00125d0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00125d9:	89 c6                	mov    esi,eax
c00125db:	31 c0                	xor    eax,eax
c00125dd:	85 c9                	test   ecx,ecx
c00125df:	75 08                	jne    c00125e9 <SysSpawn(regs*)+0x40>
c00125e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125e9:	52                   	push   edx
c00125ea:	50                   	push   eax
c00125eb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125ee:	50                   	push   eax
c00125ef:	56                   	push   esi
c00125f0:	e8 9f 33 00 00       	call   c0015994 <Process::Process(char const*, Process*, char**)>
c00125f5:	83 c4 10             	add    esp,0x10
c00125f8:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00125ff:	75 b8                	jne    c00125b9 <SysSpawn(regs*)+0x10>
c0012601:	83 ec 0c             	sub    esp,0xc
c0012604:	56                   	push   esi
c0012605:	e8 c2 38 00 00       	call   c0015ecc <Process::createUserThread()>
c001260a:	8b 06                	mov    eax,DWORD PTR [esi]
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	83 c4 04             	add    esp,0x4
c0012612:	5b                   	pop    ebx
c0012613:	89 c2                	mov    edx,eax
c0012615:	c1 fa 1f             	sar    edx,0x1f
c0012618:	5e                   	pop    esi
c0012619:	c3                   	ret    

c001261a <SysGetEnv(regs*)>:
c001261a:	57                   	push   edi
c001261b:	56                   	push   esi
c001261c:	53                   	push   ebx
c001261d:	83 ec 1c             	sub    esp,0x1c
c0012620:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012625:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012629:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001262c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001262f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012632:	51                   	push   ecx
c0012633:	e8 a7 ed ff ff       	call   c00113df <KeGetProcessTotalEnvCount(Process*)>
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	39 c7                	cmp    edi,eax
c001263d:	7c 12                	jl     c0012651 <SysGetEnv(regs*)+0x37>
c001263f:	31 c0                	xor    eax,eax
c0012641:	31 d2                	xor    edx,edx
c0012643:	85 f6                	test   esi,esi
c0012645:	74 03                	je     c001264a <SysGetEnv(regs*)+0x30>
c0012647:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	5b                   	pop    ebx
c001264e:	5e                   	pop    esi
c001264f:	5f                   	pop    edi
c0012650:	c3                   	ret    
c0012651:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012655:	83 ec 04             	sub    esp,0x4
c0012658:	57                   	push   edi
c0012659:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001265f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012662:	57                   	push   edi
c0012663:	50                   	push   eax
c0012664:	e8 96 ed ff ff       	call   c00113ff <KeGetProcessEnvPair(Process*, int)>
c0012669:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001266c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012670:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012674:	83 c4 0c             	add    esp,0xc
c0012677:	85 d2                	test   edx,edx
c0012679:	75 23                	jne    c001269e <SysGetEnv(regs*)+0x84>
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	50                   	push   eax
c001267f:	e8 fc de fe ff       	call   c0000580 <strlen>
c0012684:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012687:	89 c3                	mov    ebx,eax
c0012689:	e8 f2 de fe ff       	call   c0000580 <strlen>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	31 d2                	xor    edx,edx
c0012693:	83 c4 10             	add    esp,0x10
c0012696:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001269a:	5b                   	pop    ebx
c001269b:	5e                   	pop    esi
c001269c:	5f                   	pop    edi
c001269d:	c3                   	ret    
c001269e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126a1:	83 ec 08             	sub    esp,0x8
c00126a4:	50                   	push   eax
c00126a5:	56                   	push   esi
c00126a6:	e8 a5 df fe ff       	call   c0000650 <strcpy>
c00126ab:	58                   	pop    eax
c00126ac:	5a                   	pop    edx
c00126ad:	68 60 24 02 c0       	push   0xc0022460
c00126b2:	56                   	push   esi
c00126b3:	e8 b8 e1 fe ff       	call   c0000870 <strcat>
c00126b8:	59                   	pop    ecx
c00126b9:	5b                   	pop    ebx
c00126ba:	57                   	push   edi
c00126bb:	56                   	push   esi
c00126bc:	e8 af e1 fe ff       	call   c0000870 <strcat>
c00126c1:	83 c4 10             	add    esp,0x10
c00126c4:	31 c0                	xor    eax,eax
c00126c6:	83 c4 10             	add    esp,0x10
c00126c9:	31 d2                	xor    edx,edx
c00126cb:	5b                   	pop    ebx
c00126cc:	5e                   	pop    esi
c00126cd:	5f                   	pop    edi
c00126ce:	c3                   	ret    

c00126cf <SysSetFatAttrib(regs*)>:
c00126cf:	57                   	push   edi
c00126d0:	56                   	push   esi
c00126d1:	53                   	push   ebx
c00126d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126d6:	83 ec 0c             	sub    esp,0xc
c00126d9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00126dc:	68 14 01 00 00       	push   0x114
c00126e1:	e8 ed 53 ff ff       	call   c0007ad3 <malloc>
c00126e6:	83 c4 0c             	add    esp,0xc
c00126e9:	89 c3                	mov    ebx,eax
c00126eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126f3:	50                   	push   eax
c00126f4:	57                   	push   edi
c00126f5:	53                   	push   ebx
c00126f6:	e8 e7 93 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c00126fb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00126fe:	83 c4 0c             	add    esp,0xc
c0012701:	0f b6 d4             	movzx  edx,ah
c0012704:	0f b6 c0             	movzx  eax,al
c0012707:	52                   	push   edx
c0012708:	50                   	push   eax
c0012709:	53                   	push   ebx
c001270a:	e8 59 96 ff ff       	call   c000bd68 <File::chfatattr(unsigned char, unsigned char)>
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	85 db                	test   ebx,ebx
c0012714:	89 c6                	mov    esi,eax
c0012716:	74 0c                	je     c0012724 <SysSetFatAttrib(regs*)+0x55>
c0012718:	8b 03                	mov    eax,DWORD PTR [ebx]
c001271a:	83 ec 0c             	sub    esp,0xc
c001271d:	53                   	push   ebx
c001271e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012721:	83 c4 10             	add    esp,0x10
c0012724:	5b                   	pop    ebx
c0012725:	31 c0                	xor    eax,eax
c0012727:	85 f6                	test   esi,esi
c0012729:	0f 95 c0             	setne  al
c001272c:	31 d2                	xor    edx,edx
c001272e:	5e                   	pop    esi
c001272f:	f7 d8                	neg    eax
c0012731:	83 d2 00             	adc    edx,0x0
c0012734:	f7 da                	neg    edx
c0012736:	5f                   	pop    edi
c0012737:	c3                   	ret    

c0012738 <SysPipe(regs*)>:
c0012738:	57                   	push   edi
c0012739:	56                   	push   esi
c001273a:	53                   	push   ebx
c001273b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001273f:	83 ec 0c             	sub    esp,0xc
c0012742:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012745:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012748:	6a 20                	push   0x20
c001274a:	e8 84 53 ff ff       	call   c0007ad3 <malloc>
c001274f:	89 c3                	mov    ebx,eax
c0012751:	58                   	pop    eax
c0012752:	5a                   	pop    edx
c0012753:	68 00 50 00 00       	push   0x5000
c0012758:	53                   	push   ebx
c0012759:	e8 e0 5c ff ff       	call   c000843e <Pipe::Pipe(int)>
c001275e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012761:	e8 38 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012766:	89 07                	mov    DWORD PTR [edi],eax
c0012768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001276b:	e8 2e 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012770:	83 c4 10             	add    esp,0x10
c0012773:	31 d2                	xor    edx,edx
c0012775:	89 06                	mov    DWORD PTR [esi],eax
c0012777:	31 c0                	xor    eax,eax
c0012779:	5b                   	pop    ebx
c001277a:	5e                   	pop    esi
c001277b:	5f                   	pop    edi
c001277c:	c3                   	ret    

c001277d <SysGetUnixTime(regs*)>:
c001277d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012782:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012788:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001278c:	e9 1d 9d ff ff       	jmp    c000c4ae <Clock::timeInSecondsLocal()>

c0012791 <string_ends_with(char const*, char const*)>:
c0012791:	57                   	push   edi
c0012792:	56                   	push   esi
c0012793:	53                   	push   ebx
c0012794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012798:	83 ec 0c             	sub    esp,0xc
c001279b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001279f:	53                   	push   ebx
c00127a0:	e8 db dd fe ff       	call   c0000580 <strlen>
c00127a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127a8:	89 c6                	mov    esi,eax
c00127aa:	e8 d1 dd fe ff       	call   c0000580 <strlen>
c00127af:	83 c4 10             	add    esp,0x10
c00127b2:	31 d2                	xor    edx,edx
c00127b4:	39 c6                	cmp    esi,eax
c00127b6:	7d 06                	jge    c00127be <string_ends_with(char const*, char const*)+0x2d>
c00127b8:	5b                   	pop    ebx
c00127b9:	89 d0                	mov    eax,edx
c00127bb:	5e                   	pop    esi
c00127bc:	5f                   	pop    edi
c00127bd:	c3                   	ret    
c00127be:	83 ec 08             	sub    esp,0x8
c00127c1:	29 c6                	sub    esi,eax
c00127c3:	57                   	push   edi
c00127c4:	01 f3                	add    ebx,esi
c00127c6:	53                   	push   ebx
c00127c7:	e8 b4 df fe ff       	call   c0000780 <strcmp>
c00127cc:	83 c4 10             	add    esp,0x10
c00127cf:	31 d2                	xor    edx,edx
c00127d1:	5b                   	pop    ebx
c00127d2:	5e                   	pop    esi
c00127d3:	85 c0                	test   eax,eax
c00127d5:	5f                   	pop    edi
c00127d6:	0f 94 c2             	sete   dl
c00127d9:	89 d0                	mov    eax,edx
c00127db:	c3                   	ret    

c00127dc <SysOpen(regs*)>:
c00127dc:	56                   	push   esi
c00127dd:	53                   	push   ebx
c00127de:	81 ec 04 01 00 00    	sub    esp,0x104
c00127e4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00127eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00127ee:	85 c0                	test   eax,eax
c00127f0:	0f 84 c4 01 00 00    	je     c00129ba <SysOpen(regs*)+0x1de>
c00127f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127f9:	85 c0                	test   eax,eax
c00127fb:	0f 84 b9 01 00 00    	je     c00129ba <SysOpen(regs*)+0x1de>
c0012801:	6a 00                	push   0x0
c0012803:	68 62 24 02 c0       	push   0xc0022462
c0012808:	50                   	push   eax
c0012809:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001280d:	56                   	push   esi
c001280e:	e8 c3 8f ff ff       	call   c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012813:	89 34 24             	mov    DWORD PTR [esp],esi
c0012816:	e8 65 dd fe ff       	call   c0000580 <strlen>
c001281b:	83 c4 10             	add    esp,0x10
c001281e:	83 e8 01             	sub    eax,0x1
c0012821:	74 29                	je     c001284c <SysOpen(regs*)+0x70>
c0012823:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012827:	83 fa 2e             	cmp    edx,0x2e
c001282a:	74 1c                	je     c0012848 <SysOpen(regs*)+0x6c>
c001282c:	83 fa 3a             	cmp    edx,0x3a
c001282f:	74 17                	je     c0012848 <SysOpen(regs*)+0x6c>
c0012831:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012835:	83 e8 01             	sub    eax,0x1
c0012838:	74 12                	je     c001284c <SysOpen(regs*)+0x70>
c001283a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001283e:	83 fa 3a             	cmp    edx,0x3a
c0012841:	74 05                	je     c0012848 <SysOpen(regs*)+0x6c>
c0012843:	83 fa 2e             	cmp    edx,0x2e
c0012846:	75 e9                	jne    c0012831 <SysOpen(regs*)+0x55>
c0012848:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001284c:	83 ec 08             	sub    esp,0x8
c001284f:	68 66 24 02 c0       	push   0xc0022466
c0012854:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012857:	50                   	push   eax
c0012858:	e8 34 ff ff ff       	call   c0012791 <string_ends_with(char const*, char const*)>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	85 c0                	test   eax,eax
c0012862:	74 1d                	je     c0012881 <SysOpen(regs*)+0xa5>
c0012864:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012867:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001286d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012874:	81 c4 04 01 00 00    	add    esp,0x104
c001287a:	31 c0                	xor    eax,eax
c001287c:	5b                   	pop    ebx
c001287d:	31 d2                	xor    edx,edx
c001287f:	5e                   	pop    esi
c0012880:	c3                   	ret    
c0012881:	83 ec 08             	sub    esp,0x8
c0012884:	68 6b 24 02 c0       	push   0xc002246b
c0012889:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001288c:	50                   	push   eax
c001288d:	e8 ff fe ff ff       	call   c0012791 <string_ends_with(char const*, char const*)>
c0012892:	83 c4 10             	add    esp,0x10
c0012895:	85 c0                	test   eax,eax
c0012897:	75 cb                	jne    c0012864 <SysOpen(regs*)+0x88>
c0012899:	83 ec 08             	sub    esp,0x8
c001289c:	68 67 24 02 c0       	push   0xc0022467
c00128a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128a4:	50                   	push   eax
c00128a5:	e8 d6 de fe ff       	call   c0000780 <strcmp>
c00128aa:	83 c4 10             	add    esp,0x10
c00128ad:	85 c0                	test   eax,eax
c00128af:	74 b3                	je     c0012864 <SysOpen(regs*)+0x88>
c00128b1:	83 ec 08             	sub    esp,0x8
c00128b4:	68 66 24 02 c0       	push   0xc0022466
c00128b9:	56                   	push   esi
c00128ba:	e8 d2 fe ff ff       	call   c0012791 <string_ends_with(char const*, char const*)>
c00128bf:	83 c4 10             	add    esp,0x10
c00128c2:	85 c0                	test   eax,eax
c00128c4:	75 9e                	jne    c0012864 <SysOpen(regs*)+0x88>
c00128c6:	83 ec 08             	sub    esp,0x8
c00128c9:	68 70 24 02 c0       	push   0xc0022470
c00128ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128d1:	50                   	push   eax
c00128d2:	e8 ba fe ff ff       	call   c0012791 <string_ends_with(char const*, char const*)>
c00128d7:	83 c4 10             	add    esp,0x10
c00128da:	85 c0                	test   eax,eax
c00128dc:	0f 85 eb 00 00 00    	jne    c00129cd <SysOpen(regs*)+0x1f1>
c00128e2:	83 ec 08             	sub    esp,0x8
c00128e5:	68 75 24 02 c0       	push   0xc0022475
c00128ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128ed:	50                   	push   eax
c00128ee:	e8 9e fe ff ff       	call   c0012791 <string_ends_with(char const*, char const*)>
c00128f3:	83 c4 10             	add    esp,0x10
c00128f6:	85 c0                	test   eax,eax
c00128f8:	0f 85 cf 00 00 00    	jne    c00129cd <SysOpen(regs*)+0x1f1>
c00128fe:	83 ec 08             	sub    esp,0x8
c0012901:	68 71 24 02 c0       	push   0xc0022471
c0012906:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012909:	51                   	push   ecx
c001290a:	e8 71 de fe ff       	call   c0000780 <strcmp>
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	85 c0                	test   eax,eax
c0012914:	0f 84 b3 00 00 00    	je     c00129cd <SysOpen(regs*)+0x1f1>
c001291a:	83 ec 08             	sub    esp,0x8
c001291d:	68 70 24 02 c0       	push   0xc0022470
c0012922:	56                   	push   esi
c0012923:	e8 69 fe ff ff       	call   c0012791 <string_ends_with(char const*, char const*)>
c0012928:	83 c4 10             	add    esp,0x10
c001292b:	85 c0                	test   eax,eax
c001292d:	0f 85 9a 00 00 00    	jne    c00129cd <SysOpen(regs*)+0x1f1>
c0012933:	83 ec 0c             	sub    esp,0xc
c0012936:	68 14 01 00 00       	push   0x114
c001293b:	e8 93 51 ff ff       	call   c0007ad3 <malloc>
c0012940:	83 c4 0c             	add    esp,0xc
c0012943:	89 c6                	mov    esi,eax
c0012945:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001294a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001294d:	50                   	push   eax
c001294e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012951:	52                   	push   edx
c0012952:	56                   	push   esi
c0012953:	e8 8a 91 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0012958:	83 c4 10             	add    esp,0x10
c001295b:	85 f6                	test   esi,esi
c001295d:	74 5b                	je     c00129ba <SysOpen(regs*)+0x1de>
c001295f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012962:	0f b6 c2             	movzx  eax,dl
c0012965:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012968:	89 d0                	mov    eax,edx
c001296a:	83 e0 01             	and    eax,0x1
c001296d:	f6 c2 02             	test   dl,0x2
c0012970:	74 03                	je     c0012975 <SysOpen(regs*)+0x199>
c0012972:	83 c8 02             	or     eax,0x2
c0012975:	f6 c2 04             	test   dl,0x4
c0012978:	74 03                	je     c001297d <SysOpen(regs*)+0x1a1>
c001297a:	83 c8 04             	or     eax,0x4
c001297d:	f6 c2 08             	test   dl,0x8
c0012980:	74 03                	je     c0012985 <SysOpen(regs*)+0x1a9>
c0012982:	83 c8 0a             	or     eax,0xa
c0012985:	80 e2 10             	and    dl,0x10
c0012988:	74 03                	je     c001298d <SysOpen(regs*)+0x1b1>
c001298a:	83 c8 12             	or     eax,0x12
c001298d:	83 ec 08             	sub    esp,0x8
c0012990:	50                   	push   eax
c0012991:	56                   	push   esi
c0012992:	e8 69 91 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0012997:	83 c4 10             	add    esp,0x10
c001299a:	85 c0                	test   eax,eax
c001299c:	75 1c                	jne    c00129ba <SysOpen(regs*)+0x1de>
c001299e:	83 ec 0c             	sub    esp,0xc
c00129a1:	56                   	push   esi
c00129a2:	e8 f7 67 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00129a7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	89 02                	mov    DWORD PTR [edx],eax
c00129af:	c1 f8 1f             	sar    eax,0x1f
c00129b2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00129b5:	e9 ba fe ff ff       	jmp    c0012874 <SysOpen(regs*)+0x98>
c00129ba:	81 c4 04 01 00 00    	add    esp,0x104
c00129c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00129c5:	5b                   	pop    ebx
c00129c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00129cb:	5e                   	pop    esi
c00129cc:	c3                   	ret    
c00129cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129d0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00129d6:	e9 92 fe ff ff       	jmp    c001286d <SysOpen(regs*)+0x91>

c00129db <KeSystemCall(regs*, void*)>:
c00129db:	53                   	push   ebx
c00129dc:	83 ec 08             	sub    esp,0x8
c00129df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00129e6:	83 f8 3e             	cmp    eax,0x3e
c00129e9:	77 16                	ja     c0012a01 <KeSystemCall(regs*, void*)+0x26>
c00129eb:	8b 14 85 80 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc380]
c00129f2:	85 d2                	test   edx,edx
c00129f4:	74 0b                	je     c0012a01 <KeSystemCall(regs*, void*)+0x26>
c00129f6:	83 ec 0c             	sub    esp,0xc
c00129f9:	53                   	push   ebx
c00129fa:	ff d2                	call   edx
c00129fc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00129ff:	eb 0d                	jmp    c0012a0e <KeSystemCall(regs*, void*)+0x33>
c0012a01:	52                   	push   edx
c0012a02:	52                   	push   edx
c0012a03:	50                   	push   eax
c0012a04:	68 7a 24 02 c0       	push   0xc002247a
c0012a09:	e8 fc 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012a0e:	83 c4 10             	add    esp,0x10
c0012a11:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012a16:	83 c4 08             	add    esp,0x8
c0012a19:	31 d2                	xor    edx,edx
c0012a1b:	5b                   	pop    ebx
c0012a1c:	c3                   	ret    
c0012a1d:	66 90                	xchg   ax,ax
c0012a1f:	90                   	nop

c0012a20 <KeSwitchEndian16(unsigned short)>:
c0012a20:	83 ec 04             	sub    esp,0x4
c0012a23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a27:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012a2b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a2f:	c1 f8 08             	sar    eax,0x8
c0012a32:	89 c2                	mov    edx,eax
c0012a34:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a38:	c1 e0 08             	shl    eax,0x8
c0012a3b:	09 d0                	or     eax,edx
c0012a3d:	83 c4 04             	add    esp,0x4
c0012a40:	c3                   	ret    
c0012a41:	8d 76 00             	lea    esi,[esi+0x0]

c0012a44 <KeSwitchEndian32(unsigned int)>:
c0012a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a48:	c1 e8 18             	shr    eax,0x18
c0012a4b:	89 c2                	mov    edx,eax
c0012a4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a51:	c1 e0 08             	shl    eax,0x8
c0012a54:	25 00 00 ff 00       	and    eax,0xff0000
c0012a59:	09 c2                	or     edx,eax
c0012a5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a5f:	c1 e8 08             	shr    eax,0x8
c0012a62:	25 00 ff 00 00       	and    eax,0xff00
c0012a67:	09 c2                	or     edx,eax
c0012a69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a6d:	c1 e0 18             	shl    eax,0x18
c0012a70:	09 d0                	or     eax,edx
c0012a72:	c3                   	ret    
c0012a73:	90                   	nop

c0012a74 <EthernetCRC32(unsigned char*, int)>:
c0012a74:	83 ec 10             	sub    esp,0x10
c0012a77:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012a7c:	75 0a                	jne    c0012a88 <EthernetCRC32(unsigned char*, int)+0x14>
c0012a7e:	b8 00 00 00 00       	mov    eax,0x0
c0012a83:	e9 8c 00 00 00       	jmp    c0012b14 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012a88:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012a8d:	7f 09                	jg     c0012a98 <EthernetCRC32(unsigned char*, int)+0x24>
c0012a8f:	b8 00 00 00 00       	mov    eax,0x0
c0012a94:	eb 7e                	jmp    c0012b14 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012a96:	66 90                	xchg   ax,ax
c0012a98:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012aa0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012aa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012aac:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012ab0:	7d 5a                	jge    c0012b0c <EthernetCRC32(unsigned char*, int)+0x98>
c0012ab2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ab6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012aba:	01 d0                	add    eax,edx
c0012abc:	8a 00                	mov    al,BYTE PTR [eax]
c0012abe:	0f b6 c0             	movzx  eax,al
c0012ac1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012ac5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012acd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012ad5:	7f 2d                	jg     c0012b04 <EthernetCRC32(unsigned char*, int)+0x90>
c0012ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012adb:	83 e0 01             	and    eax,0x1
c0012ade:	74 10                	je     c0012af0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ae4:	d1 e8                	shr    eax,1
c0012ae6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012aeb:	eb 0b                	jmp    c0012af8 <EthernetCRC32(unsigned char*, int)+0x84>
c0012aed:	8d 76 00             	lea    esi,[esi+0x0]
c0012af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af4:	d1 e8                	shr    eax,1
c0012af6:	66 90                	xchg   ax,ax
c0012af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012afc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012b01:	eb cd                	jmp    c0012ad0 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012b03:	90                   	nop
c0012b04:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012b09:	eb 9d                	jmp    c0012aa8 <EthernetCRC32(unsigned char*, int)+0x34>
c0012b0b:	90                   	nop
c0012b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b10:	f7 d0                	not    eax
c0012b12:	66 90                	xchg   ax,ax
c0012b14:	83 c4 10             	add    esp,0x10
c0012b17:	c3                   	ret    

c0012b18 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012b18:	83 ec 2c             	sub    esp,0x2c
c0012b1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b1f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b33:	0f b7 c0             	movzx  eax,ax
c0012b36:	3d 06 08 00 00       	cmp    eax,0x806
c0012b3b:	75 13                	jne    c0012b50 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012b3d:	83 ec 0c             	sub    esp,0xc
c0012b40:	68 8e 24 02 c0       	push   0xc002248e
c0012b45:	e8 c0 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b4a:	83 c4 10             	add    esp,0x10
c0012b4d:	eb 25                	jmp    c0012b74 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b4f:	90                   	nop
c0012b50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b57:	0f b7 c0             	movzx  eax,ax
c0012b5a:	3d 00 08 00 00       	cmp    eax,0x800
c0012b5f:	75 13                	jne    c0012b74 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b61:	83 ec 0c             	sub    esp,0xc
c0012b64:	68 a4 24 02 c0       	push   0xc00224a4
c0012b69:	e8 9c 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b6e:	83 c4 10             	add    esp,0x10
c0012b71:	8d 76 00             	lea    esi,[esi+0x0]
c0012b74:	90                   	nop
c0012b75:	83 c4 2c             	add    esp,0x2c
c0012b78:	c3                   	ret    

c0012b79 <CmOpen(char const*)>:
c0012b79:	57                   	push   edi
c0012b7a:	56                   	push   esi
c0012b7b:	53                   	push   ebx
c0012b7c:	83 ec 1c             	sub    esp,0x1c
c0012b7f:	6a 30                	push   0x30
c0012b81:	e8 4d 4f ff ff       	call   c0007ad3 <malloc>
c0012b86:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012b8d:	89 c3                	mov    ebx,eax
c0012b8f:	e8 3f 4f ff ff       	call   c0007ad3 <malloc>
c0012b94:	83 c4 0c             	add    esp,0xc
c0012b97:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012b9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012ba1:	89 c6                	mov    esi,eax
c0012ba3:	50                   	push   eax
c0012ba4:	e8 39 8f ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0012ba9:	83 c4 0c             	add    esp,0xc
c0012bac:	89 33                	mov    DWORD PTR [ebx],esi
c0012bae:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012bb2:	50                   	push   eax
c0012bb3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bb7:	50                   	push   eax
c0012bb8:	56                   	push   esi
c0012bb9:	e8 44 92 ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c0012bbe:	5a                   	pop    edx
c0012bbf:	59                   	pop    ecx
c0012bc0:	6a 01                	push   0x1
c0012bc2:	ff 33                	push   DWORD PTR [ebx]
c0012bc4:	e8 37 8f ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0012bc9:	5e                   	pop    esi
c0012bca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bce:	e8 00 4f ff ff       	call   c0007ad3 <malloc>
c0012bd3:	5a                   	pop    edx
c0012bd4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012bd8:	89 c7                	mov    edi,eax
c0012bda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bde:	56                   	push   esi
c0012bdf:	57                   	push   edi
c0012be0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012be4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012be8:	50                   	push   eax
c0012be9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bec:	83 c4 14             	add    esp,0x14
c0012bef:	ff 33                	push   DWORD PTR [ebx]
c0012bf1:	e8 68 8f ff ff       	call   c000bb5e <File::close()>
c0012bf6:	59                   	pop    ecx
c0012bf7:	58                   	pop    eax
c0012bf8:	6a 13                	push   0x13
c0012bfa:	ff 33                	push   DWORD PTR [ebx]
c0012bfc:	e8 ff 8e ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0012c01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c03:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c05:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c08:	57                   	push   edi
c0012c09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c11:	50                   	push   eax
c0012c12:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c15:	83 c4 14             	add    esp,0x14
c0012c18:	57                   	push   edi
c0012c19:	e8 c5 4e ff ff       	call   c0007ae3 <free>
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012c24:	75 10                	jne    c0012c36 <CmOpen(char const*)+0xbd>
c0012c26:	83 ec 0c             	sub    esp,0xc
c0012c29:	68 b9 24 02 c0       	push   0xc00224b9
c0012c2e:	e8 f4 e8 ff ff       	call   c0011527 <KePanic(char const*)>
c0012c33:	83 c4 10             	add    esp,0x10
c0012c36:	50                   	push   eax
c0012c37:	6a 00                	push   0x0
c0012c39:	6a 00                	push   0x0
c0012c3b:	ff 33                	push   DWORD PTR [ebx]
c0012c3d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012c40:	e8 79 8f ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0012c45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c47:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c49:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c4c:	57                   	push   edi
c0012c4d:	6a 00                	push   0x0
c0012c4f:	6a 2b                	push   0x2b
c0012c51:	50                   	push   eax
c0012c52:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c55:	83 c4 1c             	add    esp,0x1c
c0012c58:	6a 00                	push   0x0
c0012c5a:	6a 00                	push   0x0
c0012c5c:	ff 33                	push   DWORD PTR [ebx]
c0012c5e:	e8 5b 8f ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0012c63:	83 c4 0c             	add    esp,0xc
c0012c66:	6a 08                	push   0x8
c0012c68:	68 ca 24 02 c0       	push   0xc00224ca
c0012c6d:	57                   	push   edi
c0012c6e:	e8 0d d7 fe ff       	call   c0000380 <memcmp>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	85 c0                	test   eax,eax
c0012c78:	74 10                	je     c0012c8a <CmOpen(char const*)+0x111>
c0012c7a:	83 ec 0c             	sub    esp,0xc
c0012c7d:	68 d3 24 02 c0       	push   0xc00224d3
c0012c82:	e8 a0 e8 ff ff       	call   c0011527 <KePanic(char const*)>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	89 d8                	mov    eax,ebx
c0012c93:	5b                   	pop    ebx
c0012c94:	5e                   	pop    esi
c0012c95:	5f                   	pop    edi
c0012c96:	c3                   	ret    

c0012c97 <CmClose(Reghive_Tag*)>:
c0012c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c9b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012c9f:	74 0b                	je     c0012cac <CmClose(Reghive_Tag*)+0x15>
c0012ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ca7:	e9 b2 8e ff ff       	jmp    c000bb5e <File::close()>
c0012cac:	c3                   	ret    

c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012cad:	53                   	push   ebx
c0012cae:	83 ec 18             	sub    esp,0x18
c0012cb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cb5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012cb9:	74 29                	je     c0012ce4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012cbb:	50                   	push   eax
c0012cbc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012cc1:	99                   	cdq    
c0012cc2:	52                   	push   edx
c0012cc3:	50                   	push   eax
c0012cc4:	ff 33                	push   DWORD PTR [ebx]
c0012cc6:	e8 f3 8e ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0012ccb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ccd:	5a                   	pop    edx
c0012cce:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012cd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cd4:	51                   	push   ecx
c0012cd5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012cd9:	6a 00                	push   0x0
c0012cdb:	6a 2b                	push   0x2b
c0012cdd:	50                   	push   eax
c0012cde:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ce1:	83 c4 20             	add    esp,0x20
c0012ce4:	83 c4 18             	add    esp,0x18
c0012ce7:	5b                   	pop    ebx
c0012ce8:	c3                   	ret    

c0012ce9 <CmGetString(Reghive_Tag*, int, char*)>:
c0012ce9:	55                   	push   ebp
c0012cea:	57                   	push   edi
c0012ceb:	56                   	push   esi
c0012cec:	53                   	push   ebx
c0012ced:	31 db                	xor    ebx,ebx
c0012cef:	83 ec 70             	sub    esp,0x70
c0012cf2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012cf6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012cfd:	50                   	push   eax
c0012cfe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012d05:	55                   	push   ebp
c0012d06:	e8 a2 ff ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d0b:	83 c4 10             	add    esp,0x10
c0012d0e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012d13:	c1 e0 08             	shl    eax,0x8
c0012d16:	89 c2                	mov    edx,eax
c0012d18:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012d1d:	09 d0                	or     eax,edx
c0012d1f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012d24:	c1 e0 08             	shl    eax,0x8
c0012d27:	09 d0                	or     eax,edx
c0012d29:	74 25                	je     c0012d50 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012d2b:	52                   	push   edx
c0012d2c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012d30:	52                   	push   edx
c0012d31:	6b fb 0d             	imul   edi,ebx,0xd
c0012d34:	50                   	push   eax
c0012d35:	55                   	push   ebp
c0012d36:	e8 72 ff ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d3b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012d3f:	b9 27 00 00 00       	mov    ecx,0x27
c0012d44:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012d4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	83 c3 03             	add    ebx,0x3
c0012d53:	83 fb 15             	cmp    ebx,0x15
c0012d56:	75 b6                	jne    c0012d0e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012d58:	83 c4 6c             	add    esp,0x6c
c0012d5b:	5b                   	pop    ebx
c0012d5c:	5e                   	pop    esi
c0012d5d:	5f                   	pop    edi
c0012d5e:	5d                   	pop    ebp
c0012d5f:	c3                   	ret    

c0012d60 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012d60:	83 ec 40             	sub    esp,0x40
c0012d63:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d67:	50                   	push   eax
c0012d68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d70:	e8 38 ff ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d75:	83 c4 10             	add    esp,0x10
c0012d78:	83 c8 ff             	or     eax,0xffffffff
c0012d7b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012d80:	75 19                	jne    c0012d9b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012d82:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012d87:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012d8c:	c1 e0 08             	shl    eax,0x8
c0012d8f:	09 c2                	or     edx,eax
c0012d91:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012d96:	c1 e0 10             	shl    eax,0x10
c0012d99:	09 d0                	or     eax,edx
c0012d9b:	83 c4 3c             	add    esp,0x3c
c0012d9e:	c3                   	ret    

c0012d9f <CmGetNext(Reghive_Tag*, int)>:
c0012d9f:	83 ec 40             	sub    esp,0x40
c0012da2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012da6:	50                   	push   eax
c0012da7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012daf:	e8 f9 fe ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012db4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012db9:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012dbe:	c1 e0 08             	shl    eax,0x8
c0012dc1:	09 c2                	or     edx,eax
c0012dc3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012dc8:	83 c4 4c             	add    esp,0x4c
c0012dcb:	c1 e0 10             	shl    eax,0x10
c0012dce:	09 d0                	or     eax,edx
c0012dd0:	c3                   	ret    

c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012dd1:	53                   	push   ebx
c0012dd2:	83 ec 18             	sub    esp,0x18
c0012dd5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012dd9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ddd:	74 29                	je     c0012e08 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ddf:	50                   	push   eax
c0012de0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012de5:	99                   	cdq    
c0012de6:	52                   	push   edx
c0012de7:	50                   	push   eax
c0012de8:	ff 33                	push   DWORD PTR [ebx]
c0012dea:	e8 cf 8d ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0012def:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012df1:	5a                   	pop    edx
c0012df2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012df6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012df8:	51                   	push   ecx
c0012df9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012dfd:	6a 00                	push   0x0
c0012dff:	6a 2b                	push   0x2b
c0012e01:	50                   	push   eax
c0012e02:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e05:	83 c4 20             	add    esp,0x20
c0012e08:	83 c4 18             	add    esp,0x18
c0012e0b:	5b                   	pop    ebx
c0012e0c:	c3                   	ret    

c0012e0d <CmFreeExtent(Reghive_Tag*, int)>:
c0012e0d:	53                   	push   ebx
c0012e0e:	83 ec 3c             	sub    esp,0x3c
c0012e11:	6a 2b                	push   0x2b
c0012e13:	6a 00                	push   0x0
c0012e15:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012e19:	53                   	push   ebx
c0012e1a:	e8 d1 d6 fe ff       	call   c00004f0 <memset>
c0012e1f:	83 c4 0c             	add    esp,0xc
c0012e22:	53                   	push   ebx
c0012e23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e2b:	e8 a1 ff ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e30:	83 c4 48             	add    esp,0x48
c0012e33:	5b                   	pop    ebx
c0012e34:	c3                   	ret    

c0012e35 <CmUpdateHeader(Reghive_Tag*)>:
c0012e35:	83 ec 0c             	sub    esp,0xc
c0012e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e3c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e40:	74 10                	je     c0012e52 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012e42:	52                   	push   edx
c0012e43:	8d 50 05             	lea    edx,[eax+0x5]
c0012e46:	52                   	push   edx
c0012e47:	6a 00                	push   0x0
c0012e49:	50                   	push   eax
c0012e4a:	e8 82 ff ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e4f:	83 c4 10             	add    esp,0x10
c0012e52:	83 c4 0c             	add    esp,0xc
c0012e55:	c3                   	ret    

c0012e56 <CmExpand(Reghive_Tag*, int)>:
c0012e56:	55                   	push   ebp
c0012e57:	57                   	push   edi
c0012e58:	83 cf ff             	or     edi,0xffffffff
c0012e5b:	56                   	push   esi
c0012e5c:	53                   	push   ebx
c0012e5d:	83 ec 3c             	sub    esp,0x3c
c0012e60:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e64:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e68:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e6c:	74 59                	je     c0012ec7 <CmExpand(Reghive_Tag*, int)+0x71>
c0012e6e:	50                   	push   eax
c0012e6f:	31 d2                	xor    edx,edx
c0012e71:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012e75:	31 ff                	xor    edi,edi
c0012e77:	52                   	push   edx
c0012e78:	50                   	push   eax
c0012e79:	ff 33                	push   DWORD PTR [ebx]
c0012e7b:	e8 3e 8d ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0012e80:	83 c4 0c             	add    esp,0xc
c0012e83:	6a 2b                	push   0x2b
c0012e85:	6a 00                	push   0x0
c0012e87:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012e8b:	55                   	push   ebp
c0012e8c:	e8 5f d6 fe ff       	call   c00004f0 <memset>
c0012e91:	83 c4 10             	add    esp,0x10
c0012e94:	39 f7                	cmp    edi,esi
c0012e96:	7d 1b                	jge    c0012eb3 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e9a:	83 ec 0c             	sub    esp,0xc
c0012e9d:	47                   	inc    edi
c0012e9e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012ea2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ea4:	51                   	push   ecx
c0012ea5:	55                   	push   ebp
c0012ea6:	6a 00                	push   0x0
c0012ea8:	6a 2b                	push   0x2b
c0012eaa:	50                   	push   eax
c0012eab:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012eae:	83 c4 20             	add    esp,0x20
c0012eb1:	eb e1                	jmp    c0012e94 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012eb3:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012eb6:	83 ec 0c             	sub    esp,0xc
c0012eb9:	01 fe                	add    esi,edi
c0012ebb:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012ebe:	53                   	push   ebx
c0012ebf:	e8 71 ff ff ff       	call   c0012e35 <CmUpdateHeader(Reghive_Tag*)>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	83 c4 3c             	add    esp,0x3c
c0012eca:	89 f8                	mov    eax,edi
c0012ecc:	5b                   	pop    ebx
c0012ecd:	5e                   	pop    esi
c0012ece:	5f                   	pop    edi
c0012ecf:	5d                   	pop    ebp
c0012ed0:	c3                   	ret    

c0012ed1 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012ed1:	55                   	push   ebp
c0012ed2:	57                   	push   edi
c0012ed3:	56                   	push   esi
c0012ed4:	53                   	push   ebx
c0012ed5:	83 cb ff             	or     ebx,0xffffffff
c0012ed8:	83 ec 1c             	sub    esp,0x1c
c0012edb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012edf:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012ee3:	74 68                	je     c0012f4d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ee5:	51                   	push   ecx
c0012ee6:	be 2b 00 00 00       	mov    esi,0x2b
c0012eeb:	6a 00                	push   0x0
c0012eed:	31 ff                	xor    edi,edi
c0012eef:	6a 00                	push   0x0
c0012ef1:	31 db                	xor    ebx,ebx
c0012ef3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012ef6:	e8 c3 8c ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0012efb:	83 c4 10             	add    esp,0x10
c0012efe:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012f01:	76 3b                	jbe    c0012f3e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012f03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f06:	83 ec 0c             	sub    esp,0xc
c0012f09:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f0f:	51                   	push   ecx
c0012f10:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012f14:	51                   	push   ecx
c0012f15:	6a 00                	push   0x0
c0012f17:	6a 01                	push   0x1
c0012f19:	50                   	push   eax
c0012f1a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012f1d:	83 c4 20             	add    esp,0x20
c0012f20:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012f25:	74 26                	je     c0012f4d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f27:	52                   	push   edx
c0012f28:	43                   	inc    ebx
c0012f29:	57                   	push   edi
c0012f2a:	56                   	push   esi
c0012f2b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f2e:	e8 8b 8c ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0012f33:	83 c6 2b             	add    esi,0x2b
c0012f36:	83 d7 00             	adc    edi,0x0
c0012f39:	83 c4 10             	add    esp,0x10
c0012f3c:	eb c0                	jmp    c0012efe <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012f3e:	50                   	push   eax
c0012f3f:	50                   	push   eax
c0012f40:	6a 40                	push   0x40
c0012f42:	55                   	push   ebp
c0012f43:	e8 0e ff ff ff       	call   c0012e56 <CmExpand(Reghive_Tag*, int)>
c0012f48:	83 c4 10             	add    esp,0x10
c0012f4b:	89 c3                	mov    ebx,eax
c0012f4d:	83 c4 1c             	add    esp,0x1c
c0012f50:	89 d8                	mov    eax,ebx
c0012f52:	5b                   	pop    ebx
c0012f53:	5e                   	pop    esi
c0012f54:	5f                   	pop    edi
c0012f55:	5d                   	pop    ebp
c0012f56:	c3                   	ret    

c0012f57 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012f57:	55                   	push   ebp
c0012f58:	57                   	push   edi
c0012f59:	56                   	push   esi
c0012f5a:	53                   	push   ebx
c0012f5b:	81 ec 88 00 00 00    	sub    esp,0x88
c0012f61:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012f68:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f6f:	e8 5d ff ff ff       	call   c0012ed1 <CmFindUnusedExtent(Reghive_Tag*)>
c0012f74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f78:	83 c4 0c             	add    esp,0xc
c0012f7b:	6a 2b                	push   0x2b
c0012f7d:	6a 00                	push   0x0
c0012f7f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012f83:	55                   	push   ebp
c0012f84:	e8 67 d5 fe ff       	call   c00004f0 <memset>
c0012f89:	83 c4 10             	add    esp,0x10
c0012f8c:	85 db                	test   ebx,ebx
c0012f8e:	74 12                	je     c0012fa2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012f90:	51                   	push   ecx
c0012f91:	55                   	push   ebp
c0012f92:	53                   	push   ebx
c0012f93:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f9a:	e8 0e fd ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012fa6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012fad:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012fb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fb4:	85 db                	test   ebx,ebx
c0012fb6:	74 49                	je     c0013001 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012fb8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012fbd:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012fc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012fc6:	c1 e0 08             	shl    eax,0x8
c0012fc9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012fcf:	09 c8                	or     eax,ecx
c0012fd1:	74 11                	je     c0012fe4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012fd3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012fd7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012fdb:	c1 e8 10             	shr    eax,0x10
c0012fde:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012fe2:	eb 0f                	jmp    c0012ff3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012fe4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012fe9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012fee:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012ff3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012ff7:	c1 ea 08             	shr    edx,0x8
c0012ffa:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012fff:	eb 0f                	jmp    c0013010 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013001:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013006:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001300b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013010:	52                   	push   edx
c0013011:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013015:	50                   	push   eax
c0013016:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001301a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013021:	e8 ab fd ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013026:	83 c4 10             	add    esp,0x10
c0013029:	85 db                	test   ebx,ebx
c001302b:	74 12                	je     c001303f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001302d:	50                   	push   eax
c001302e:	55                   	push   ebp
c001302f:	53                   	push   ebx
c0013030:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013037:	e8 95 fd ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001303c:	83 c4 10             	add    esp,0x10
c001303f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013043:	83 c4 7c             	add    esp,0x7c
c0013046:	5b                   	pop    ebx
c0013047:	5e                   	pop    esi
c0013048:	5f                   	pop    edi
c0013049:	5d                   	pop    ebp
c001304a:	c3                   	ret    

c001304b <CmSetString(Reghive_Tag*, int, char const*)>:
c001304b:	55                   	push   ebp
c001304c:	57                   	push   edi
c001304d:	56                   	push   esi
c001304e:	53                   	push   ebx
c001304f:	bb 27 00 00 00       	mov    ebx,0x27
c0013054:	81 ec 88 00 00 00    	sub    esp,0x88
c001305a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013061:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013068:	e8 13 d5 fe ff       	call   c0000580 <strlen>
c001306d:	8d 48 26             	lea    ecx,[eax+0x26]
c0013070:	89 c8                	mov    eax,ecx
c0013072:	99                   	cdq    
c0013073:	f7 fb                	idiv   ebx
c0013075:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013082:	7e 10                	jle    c0013094 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013084:	83 ec 0c             	sub    esp,0xc
c0013087:	68 e4 24 02 c0       	push   0xc00224e4
c001308c:	e8 96 e4 ff ff       	call   c0011527 <KePanic(char const*)>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	53                   	push   ebx
c0013095:	31 ed                	xor    ebp,ebp
c0013097:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001309b:	53                   	push   ebx
c001309c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130a3:	57                   	push   edi
c00130a4:	e8 04 fc ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130a9:	83 c4 10             	add    esp,0x10
c00130ac:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00130b0:	89 f0                	mov    eax,esi
c00130b2:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00130b6:	c1 e0 08             	shl    eax,0x8
c00130b9:	09 c6                	or     esi,eax
c00130bb:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00130bf:	c1 e6 08             	shl    esi,0x8
c00130c2:	09 c6                	or     esi,eax
c00130c4:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00130c8:	7e 72                	jle    c001313c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00130ca:	85 f6                	test   esi,esi
c00130cc:	75 25                	jne    c00130f3 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00130ce:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00130d3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00130d7:	50                   	push   eax
c00130d8:	6a 00                	push   0x0
c00130da:	6a 00                	push   0x0
c00130dc:	57                   	push   edi
c00130dd:	e8 75 fe ff ff       	call   c0012f57 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130e2:	83 c4 10             	add    esp,0x10
c00130e5:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00130e8:	89 c6                	mov    esi,eax
c00130ea:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00130ed:	c1 f8 10             	sar    eax,0x10
c00130f0:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00130f3:	51                   	push   ecx
c00130f4:	8d 54 24 49          	lea    edx,[esp+0x49]
c00130f8:	52                   	push   edx
c00130f9:	56                   	push   esi
c00130fa:	57                   	push   edi
c00130fb:	e8 ad fb ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013100:	83 c4 0c             	add    esp,0xc
c0013103:	6a 27                	push   0x27
c0013105:	6a 00                	push   0x0
c0013107:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001310b:	51                   	push   ecx
c001310c:	e8 df d3 fe ff       	call   c00004f0 <memset>
c0013111:	6b c5 27             	imul   eax,ebp,0x27
c0013114:	83 c4 0c             	add    esp,0xc
c0013117:	6a 27                	push   0x27
c0013119:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013120:	50                   	push   eax
c0013121:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013125:	51                   	push   ecx
c0013126:	e8 65 d5 fe ff       	call   c0000690 <strncpy>
c001312b:	83 c4 0c             	add    esp,0xc
c001312e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013132:	52                   	push   edx
c0013133:	56                   	push   esi
c0013134:	57                   	push   edi
c0013135:	e8 97 fc ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001313a:	eb 19                	jmp    c0013155 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001313c:	85 f6                	test   esi,esi
c001313e:	74 18                	je     c0013158 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013140:	52                   	push   edx
c0013141:	52                   	push   edx
c0013142:	56                   	push   esi
c0013143:	57                   	push   edi
c0013144:	e8 c4 fc ff ff       	call   c0012e0d <CmFreeExtent(Reghive_Tag*, int)>
c0013149:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001314d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013151:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	45                   	inc    ebp
c0013159:	83 c3 03             	add    ebx,0x3
c001315c:	83 fd 07             	cmp    ebp,0x7
c001315f:	0f 85 47 ff ff ff    	jne    c00130ac <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013165:	50                   	push   eax
c0013166:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001316a:	50                   	push   eax
c001316b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013172:	57                   	push   edi
c0013173:	e8 59 fc ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013178:	81 c4 8c 00 00 00    	add    esp,0x8c
c001317e:	5b                   	pop    ebx
c001317f:	5e                   	pop    esi
c0013180:	5f                   	pop    edi
c0013181:	5d                   	pop    ebp
c0013182:	c3                   	ret    

c0013183 <CmGetMatch(char*, char*, bool, bool*)>:
c0013183:	56                   	push   esi
c0013184:	53                   	push   ebx
c0013185:	50                   	push   eax
c0013186:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001318b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001318f:	74 25                	je     c00131b6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013191:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013194:	31 db                	xor    ebx,ebx
c0013196:	50                   	push   eax
c0013197:	50                   	push   eax
c0013198:	8d 04 9d 80 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc280]
c001319f:	50                   	push   eax
c00131a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a4:	e8 d7 d5 fe ff       	call   c0000780 <strcmp>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	85 c0                	test   eax,eax
c00131ae:	74 2e                	je     c00131de <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131b0:	43                   	inc    ebx
c00131b1:	83 fb 3f             	cmp    ebx,0x3f
c00131b4:	75 e0                	jne    c0013196 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00131b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00131b9:	31 db                	xor    ebx,ebx
c00131bb:	51                   	push   ecx
c00131bc:	51                   	push   ecx
c00131bd:	8d 04 9d 80 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc280]
c00131c4:	50                   	push   eax
c00131c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00131c9:	e8 b2 d5 fe ff       	call   c0000780 <strcmp>
c00131ce:	83 c4 10             	add    esp,0x10
c00131d1:	85 c0                	test   eax,eax
c00131d3:	74 09                	je     c00131de <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131d5:	43                   	inc    ebx
c00131d6:	83 fb 3f             	cmp    ebx,0x3f
c00131d9:	75 e0                	jne    c00131bb <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00131db:	83 cb ff             	or     ebx,0xffffffff
c00131de:	5a                   	pop    edx
c00131df:	89 d8                	mov    eax,ebx
c00131e1:	5b                   	pop    ebx
c00131e2:	5e                   	pop    esi
c00131e3:	c3                   	ret    

c00131e4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00131e4:	55                   	push   ebp
c00131e5:	31 c0                	xor    eax,eax
c00131e7:	57                   	push   edi
c00131e8:	56                   	push   esi
c00131e9:	53                   	push   ebx
c00131ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131ee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00131f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00131f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131fa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00131fc:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00131ff:	83 fd 1f             	cmp    ebp,0x1f
c0013202:	7f 0b                	jg     c001320f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013204:	0f b6 c2             	movzx  eax,dl
c0013207:	d3 e0                	shl    eax,cl
c0013209:	09 07                	or     DWORD PTR [edi],eax
c001320b:	b0 01                	mov    al,0x1
c001320d:	01 33                	add    DWORD PTR [ebx],esi
c001320f:	5b                   	pop    ebx
c0013210:	5e                   	pop    esi
c0013211:	5f                   	pop    edi
c0013212:	5d                   	pop    ebp
c0013213:	c3                   	ret    

c0013214 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013214:	57                   	push   edi
c0013215:	56                   	push   esi
c0013216:	53                   	push   ebx
c0013217:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001321b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001321f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013223:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013227:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013229:	7c 17                	jl     c0013242 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001322b:	8b 17                	mov    edx,DWORD PTR [edi]
c001322d:	b8 01 00 00 00       	mov    eax,0x1
c0013232:	d3 e0                	shl    eax,cl
c0013234:	48                   	dec    eax
c0013235:	21 d0                	and    eax,edx
c0013237:	d3 ea                	shr    edx,cl
c0013239:	89 17                	mov    DWORD PTR [edi],edx
c001323b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001323d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013240:	eb 05                	jmp    c0013247 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013242:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013245:	31 c0                	xor    eax,eax
c0013247:	5b                   	pop    ebx
c0013248:	5e                   	pop    esi
c0013249:	5f                   	pop    edi
c001324a:	c3                   	ret    

c001324b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001324b:	83 ec 40             	sub    esp,0x40
c001324e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013252:	50                   	push   eax
c0013253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013257:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001325b:	e8 4d fa ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013260:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013264:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013268:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001326c:	89 10                	mov    DWORD PTR [eax],edx
c001326e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013271:	83 c4 4c             	add    esp,0x4c
c0013274:	c3                   	ret    

c0013275 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013275:	55                   	push   ebp
c0013276:	57                   	push   edi
c0013277:	56                   	push   esi
c0013278:	53                   	push   ebx
c0013279:	83 ec 40             	sub    esp,0x40
c001327c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013280:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013284:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013288:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001328c:	53                   	push   ebx
c001328d:	56                   	push   esi
c001328e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013292:	e8 16 fa ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013297:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001329b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001329f:	83 c4 0c             	add    esp,0xc
c00132a2:	53                   	push   ebx
c00132a3:	56                   	push   esi
c00132a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132a8:	e8 24 fb ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132ad:	83 c4 4c             	add    esp,0x4c
c00132b0:	5b                   	pop    ebx
c00132b1:	5e                   	pop    esi
c00132b2:	5f                   	pop    edi
c00132b3:	5d                   	pop    ebp
c00132b4:	c3                   	ret    

c00132b5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00132b5:	55                   	push   ebp
c00132b6:	57                   	push   edi
c00132b7:	56                   	push   esi
c00132b8:	31 f6                	xor    esi,esi
c00132ba:	53                   	push   ebx
c00132bb:	31 db                	xor    ebx,ebx
c00132bd:	83 ec 40             	sub    esp,0x40
c00132c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00132c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00132d0:	6a 12                	push   0x12
c00132d2:	68 ee 00 00 00       	push   0xee
c00132d7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00132db:	e8 10 d2 fe ff       	call   c00004f0 <memset>
c00132e0:	83 c4 10             	add    esp,0x10
c00132e3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00132e7:	6a 08                	push   0x8
c00132e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00132ed:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00132f1:	50                   	push   eax
c00132f2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00132f6:	55                   	push   ebp
c00132f7:	57                   	push   edi
c00132f8:	e8 e7 fe ff ff       	call   c00131e4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00132fd:	83 c4 10             	add    esp,0x10
c0013300:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013304:	50                   	push   eax
c0013305:	6a 06                	push   0x6
c0013307:	55                   	push   ebp
c0013308:	57                   	push   edi
c0013309:	e8 06 ff ff ff       	call   c0013214 <CmGetShift(unsigned int*, int*, int, bool*)>
c001330e:	83 c4 10             	add    esp,0x10
c0013311:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013316:	74 07                	je     c001331f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013318:	46                   	inc    esi
c0013319:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001331d:	eb e1                	jmp    c0013300 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001331f:	43                   	inc    ebx
c0013320:	83 fb 12             	cmp    ebx,0x12
c0013323:	75 c2                	jne    c00132e7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013325:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013329:	31 f6                	xor    esi,esi
c001332b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001332e:	50                   	push   eax
c001332f:	50                   	push   eax
c0013330:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013335:	46                   	inc    esi
c0013336:	8d 04 85 80 3d 02 c0 	lea    eax,[eax*4-0x3ffdc280]
c001333d:	50                   	push   eax
c001333e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013342:	e8 29 d5 fe ff       	call   c0000870 <strcat>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	83 fe 18             	cmp    esi,0x18
c001334d:	75 df                	jne    c001332e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001334f:	83 c4 3c             	add    esp,0x3c
c0013352:	31 c0                	xor    eax,eax
c0013354:	5b                   	pop    ebx
c0013355:	5e                   	pop    esi
c0013356:	5f                   	pop    edi
c0013357:	5d                   	pop    ebp
c0013358:	c3                   	ret    

c0013359 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013359:	83 ec 40             	sub    esp,0x40
c001335c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013360:	50                   	push   eax
c0013361:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013365:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013369:	e8 3f f9 ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001336e:	58                   	pop    eax
c001336f:	5a                   	pop    edx
c0013370:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013374:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013378:	50                   	push   eax
c0013379:	e8 37 ff ff ff       	call   c00132b5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001337e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013383:	83 c4 4c             	add    esp,0x4c
c0013386:	c3                   	ret    

c0013387 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013387:	55                   	push   ebp
c0013388:	57                   	push   edi
c0013389:	56                   	push   esi
c001338a:	53                   	push   ebx
c001338b:	31 db                	xor    ebx,ebx
c001338d:	83 ec 70             	sub    esp,0x70
c0013390:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013397:	6a 30                	push   0x30
c0013399:	6a 00                	push   0x0
c001339b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001339f:	56                   	push   esi
c00133a0:	e8 4b d1 fe ff       	call   c00004f0 <memset>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	83 ec 0c             	sub    esp,0xc
c00133ab:	57                   	push   edi
c00133ac:	e8 cf d1 fe ff       	call   c0000580 <strlen>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	39 d8                	cmp    eax,ebx
c00133b6:	76 16                	jbe    c00133ce <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00133b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	50                   	push   eax
c00133c0:	e8 9b d5 fe ff       	call   c0000960 <toupper>
c00133c5:	83 c4 10             	add    esp,0x10
c00133c8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00133cb:	43                   	inc    ebx
c00133cc:	eb da                	jmp    c00133a8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00133ce:	52                   	push   edx
c00133cf:	31 db                	xor    ebx,ebx
c00133d1:	6a 18                	push   0x18
c00133d3:	31 ff                	xor    edi,edi
c00133d5:	6a 3f                	push   0x3f
c00133d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00133db:	50                   	push   eax
c00133dc:	e8 0f d1 fe ff       	call   c00004f0 <memset>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00133e8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00133ec:	84 c0                	test   al,al
c00133ee:	0f 84 af 00 00 00    	je     c00134a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00133f4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00133f8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00133fb:	83 ec 0c             	sub    esp,0xc
c00133fe:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0013403:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013407:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001340b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013410:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013414:	56                   	push   esi
c0013415:	e8 66 d1 fe ff       	call   c0000580 <strlen>
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	85 c0                	test   eax,eax
c001341f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013423:	74 0b                	je     c0013430 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013425:	50                   	push   eax
c0013426:	6a 01                	push   0x1
c0013428:	56                   	push   esi
c0013429:	8d 44 24 20          	lea    eax,[esp+0x20]
c001342d:	50                   	push   eax
c001342e:	eb 0a                	jmp    c001343a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013430:	50                   	push   eax
c0013431:	6a 00                	push   0x0
c0013433:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013437:	50                   	push   eax
c0013438:	6a 00                	push   0x0
c001343a:	e8 44 fd ff ff       	call   c0013183 <CmGetMatch(char*, char*, bool, bool*)>
c001343f:	83 c4 10             	add    esp,0x10
c0013442:	83 f8 ff             	cmp    eax,0xffffffff
c0013445:	75 1a                	jne    c0013461 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013447:	83 ec 0c             	sub    esp,0xc
c001344a:	68 f9 24 02 c0       	push   0xc00224f9
c001344f:	e8 d3 e0 ff ff       	call   c0011527 <KePanic(char const*)>
c0013454:	83 c4 10             	add    esp,0x10
c0013457:	b8 02 00 00 00       	mov    eax,0x2
c001345c:	e9 bb 00 00 00       	jmp    c001351c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013461:	83 ff 18             	cmp    edi,0x18
c0013464:	75 1a                	jne    c0013480 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013466:	83 ec 0c             	sub    esp,0xc
c0013469:	68 0e 25 02 c0       	push   0xc002250e
c001346e:	e8 b4 e0 ff ff       	call   c0011527 <KePanic(char const*)>
c0013473:	83 c4 10             	add    esp,0x10
c0013476:	b8 01 00 00 00       	mov    eax,0x1
c001347b:	e9 9c 00 00 00       	jmp    c001351c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013480:	47                   	inc    edi
c0013481:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013486:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001348a:	0f 45 dd             	cmovne ebx,ebp
c001348d:	83 ec 0c             	sub    esp,0xc
c0013490:	56                   	push   esi
c0013491:	e8 ea d0 fe ff       	call   c0000580 <strlen>
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	85 c0                	test   eax,eax
c001349b:	74 06                	je     c00134a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001349d:	43                   	inc    ebx
c001349e:	e9 41 ff ff ff       	jmp    c00133e4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00134a3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00134ab:	31 db                	xor    ebx,ebx
c00134ad:	31 ff                	xor    edi,edi
c00134af:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00134b7:	50                   	push   eax
c00134b8:	6a 12                	push   0x12
c00134ba:	68 ee 00 00 00       	push   0xee
c00134bf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00134c6:	e8 25 d0 fe ff       	call   c00004f0 <memset>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00134d2:	83 fb 17             	cmp    ebx,0x17
c00134d5:	7e 26                	jle    c00134fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00134d7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134db:	50                   	push   eax
c00134dc:	6a 08                	push   0x8
c00134de:	55                   	push   ebp
c00134df:	56                   	push   esi
c00134e0:	e8 2f fd ff ff       	call   c0013214 <CmGetShift(unsigned int*, int*, int, bool*)>
c00134e5:	83 c4 10             	add    esp,0x10
c00134e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134ed:	74 26                	je     c0013515 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00134ef:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00134f6:	4b                   	dec    ebx
c00134f7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00134fa:	47                   	inc    edi
c00134fb:	eb 1c                	jmp    c0013519 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00134fd:	6a 06                	push   0x6
c00134ff:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013504:	50                   	push   eax
c0013505:	55                   	push   ebp
c0013506:	56                   	push   esi
c0013507:	e8 d8 fc ff ff       	call   c00131e4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001350c:	83 c4 10             	add    esp,0x10
c001350f:	84 c0                	test   al,al
c0013511:	75 06                	jne    c0013519 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013513:	eb c2                	jmp    c00134d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013515:	31 c0                	xor    eax,eax
c0013517:	eb 03                	jmp    c001351c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013519:	43                   	inc    ebx
c001351a:	eb b2                	jmp    c00134ce <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001351c:	83 c4 6c             	add    esp,0x6c
c001351f:	5b                   	pop    ebx
c0013520:	5e                   	pop    esi
c0013521:	5f                   	pop    edi
c0013522:	5d                   	pop    ebp
c0013523:	c3                   	ret    

c0013524 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013524:	53                   	push   ebx
c0013525:	83 ec 3c             	sub    esp,0x3c
c0013528:	6a 2b                	push   0x2b
c001352a:	6a 00                	push   0x0
c001352c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013530:	53                   	push   ebx
c0013531:	e8 ba cf fe ff       	call   c00004f0 <memset>
c0013536:	58                   	pop    eax
c0013537:	5a                   	pop    edx
c0013538:	8d 44 24 11          	lea    eax,[esp+0x11]
c001353c:	50                   	push   eax
c001353d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013541:	e8 41 fe ff ff       	call   c0013387 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013546:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001354b:	83 c4 0c             	add    esp,0xc
c001354e:	6a 15                	push   0x15
c0013550:	6a 00                	push   0x0
c0013552:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013556:	50                   	push   eax
c0013557:	e8 94 cf fe ff       	call   c00004f0 <memset>
c001355c:	53                   	push   ebx
c001355d:	6a 00                	push   0x0
c001355f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013563:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013567:	e8 eb f9 ff ff       	call   c0012f57 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001356c:	83 c4 58             	add    esp,0x58
c001356f:	5b                   	pop    ebx
c0013570:	c3                   	ret    

c0013571 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013571:	56                   	push   esi
c0013572:	53                   	push   ebx
c0013573:	83 ec 48             	sub    esp,0x48
c0013576:	6a 12                	push   0x12
c0013578:	68 ff 00 00 00       	push   0xff
c001357d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013581:	56                   	push   esi
c0013582:	e8 69 cf fe ff       	call   c00004f0 <memset>
c0013587:	5a                   	pop    edx
c0013588:	59                   	pop    ecx
c0013589:	56                   	push   esi
c001358a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001358e:	e8 f4 fd ff ff       	call   c0013387 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001359a:	85 db                	test   ebx,ebx
c001359c:	74 42                	je     c00135e0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001359e:	50                   	push   eax
c001359f:	8d 44 24 19          	lea    eax,[esp+0x19]
c00135a3:	50                   	push   eax
c00135a4:	53                   	push   ebx
c00135a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135a9:	e8 ff f6 ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00135ae:	83 c4 0c             	add    esp,0xc
c00135b1:	6a 12                	push   0x12
c00135b3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00135b7:	50                   	push   eax
c00135b8:	56                   	push   esi
c00135b9:	e8 c2 cd fe ff       	call   c0000380 <memcmp>
c00135be:	83 c4 10             	add    esp,0x10
c00135c1:	85 c0                	test   eax,eax
c00135c3:	74 1e                	je     c00135e3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00135c5:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00135ca:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00135cf:	c1 e3 08             	shl    ebx,0x8
c00135d2:	09 d8                	or     eax,ebx
c00135d4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00135d9:	c1 e3 10             	shl    ebx,0x10
c00135dc:	09 c3                	or     ebx,eax
c00135de:	eb ba                	jmp    c001359a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00135e0:	83 cb ff             	or     ebx,0xffffffff
c00135e3:	83 c4 44             	add    esp,0x44
c00135e6:	89 d8                	mov    eax,ebx
c00135e8:	5b                   	pop    ebx
c00135e9:	5e                   	pop    esi
c00135ea:	c3                   	ret    

c00135eb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00135eb:	57                   	push   edi
c00135ec:	56                   	push   esi
c00135ed:	53                   	push   ebx
c00135ee:	83 ec 34             	sub    esp,0x34
c00135f1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00135f5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00135f9:	6a 2b                	push   0x2b
c00135fb:	6a 00                	push   0x0
c00135fd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013601:	53                   	push   ebx
c0013602:	e8 e9 ce fe ff       	call   c00004f0 <memset>
c0013607:	58                   	pop    eax
c0013608:	5a                   	pop    edx
c0013609:	8d 44 24 11          	lea    eax,[esp+0x11]
c001360d:	50                   	push   eax
c001360e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013612:	e8 70 fd ff ff       	call   c0013387 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013617:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001361b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001361f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013623:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013627:	53                   	push   ebx
c0013628:	6a 00                	push   0x0
c001362a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001362e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013632:	e8 20 f9 ff ff       	call   c0012f57 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013637:	83 c4 50             	add    esp,0x50
c001363a:	5b                   	pop    ebx
c001363b:	5e                   	pop    esi
c001363c:	5f                   	pop    edi
c001363d:	c3                   	ret    

c001363e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001363e:	55                   	push   ebp
c001363f:	57                   	push   edi
c0013640:	56                   	push   esi
c0013641:	53                   	push   ebx
c0013642:	83 ec 40             	sub    esp,0x40
c0013645:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013649:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001364d:	6a 2b                	push   0x2b
c001364f:	6a 00                	push   0x0
c0013651:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013655:	56                   	push   esi
c0013656:	e8 95 ce fe ff       	call   c00004f0 <memset>
c001365b:	5f                   	pop    edi
c001365c:	89 ef                	mov    edi,ebp
c001365e:	58                   	pop    eax
c001365f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013663:	50                   	push   eax
c0013664:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013668:	e8 1a fd ff ff       	call   c0013387 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001366d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013672:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013677:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001367c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	85 ed                	test   ebp,ebp
c0013686:	74 14                	je     c001369c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013688:	51                   	push   ecx
c0013689:	51                   	push   ecx
c001368a:	57                   	push   edi
c001368b:	53                   	push   ebx
c001368c:	e8 0e f7 ff ff       	call   c0012d9f <CmGetNext(Reghive_Tag*, int)>
c0013691:	83 c4 10             	add    esp,0x10
c0013694:	85 c0                	test   eax,eax
c0013696:	74 04                	je     c001369c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013698:	89 c7                	mov    edi,eax
c001369a:	eb e8                	jmp    c0013684 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001369c:	56                   	push   esi
c001369d:	6a 00                	push   0x0
c001369f:	57                   	push   edi
c00136a0:	53                   	push   ebx
c00136a1:	e8 b1 f8 ff ff       	call   c0012f57 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136a6:	83 c4 0c             	add    esp,0xc
c00136a9:	56                   	push   esi
c00136aa:	50                   	push   eax
c00136ab:	89 c7                	mov    edi,eax
c00136ad:	53                   	push   ebx
c00136ae:	e8 fa f5 ff ff       	call   c0012cad <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136b3:	58                   	pop    eax
c00136b4:	5a                   	pop    edx
c00136b5:	6a 6c                	push   0x6c
c00136b7:	6a 00                	push   0x0
c00136b9:	6a 00                	push   0x0
c00136bb:	68 1f 25 02 c0       	push   0xc002251f
c00136c0:	57                   	push   edi
c00136c1:	53                   	push   ebx
c00136c2:	e8 24 ff ff ff       	call   c00135eb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00136c7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00136cb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00136cf:	c1 e8 10             	shr    eax,0x10
c00136d2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00136d6:	83 c4 1c             	add    esp,0x1c
c00136d9:	56                   	push   esi
c00136da:	57                   	push   edi
c00136db:	53                   	push   ebx
c00136dc:	e8 f0 f6 ff ff       	call   c0012dd1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00136e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00136e6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00136eb:	c1 e0 08             	shl    eax,0x8
c00136ee:	09 c2                	or     edx,eax
c00136f0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00136f5:	83 c4 4c             	add    esp,0x4c
c00136f8:	5b                   	pop    ebx
c00136f9:	5e                   	pop    esi
c00136fa:	c1 e0 10             	shl    eax,0x10
c00136fd:	09 d0                	or     eax,edx
c00136ff:	5f                   	pop    edi
c0013700:	5d                   	pop    ebp
c0013701:	c3                   	ret    

c0013702 <zStrtok(char*, char const*)>:
c0013702:	55                   	push   ebp
c0013703:	57                   	push   edi
c0013704:	56                   	push   esi
c0013705:	53                   	push   ebx
c0013706:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001370a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001370e:	85 db                	test   ebx,ebx
c0013710:	74 2f                	je     c0013741 <zStrtok(char*, char const*)+0x3f>
c0013712:	85 c0                	test   eax,eax
c0013714:	75 09                	jne    c001371f <zStrtok(char*, char const*)+0x1d>
c0013716:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001371b:	85 c0                	test   eax,eax
c001371d:	74 50                	je     c001376f <zStrtok(char*, char const*)+0x6d>
c001371f:	31 c9                	xor    ecx,ecx
c0013721:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013725:	74 03                	je     c001372a <zStrtok(char*, char const*)+0x28>
c0013727:	41                   	inc    ecx
c0013728:	eb f7                	jmp    c0013721 <zStrtok(char*, char const*)+0x1f>
c001372a:	31 d2                	xor    edx,edx
c001372c:	39 ca                	cmp    edx,ecx
c001372e:	74 15                	je     c0013745 <zStrtok(char*, char const*)+0x43>
c0013730:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013734:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013737:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001373a:	39 ee                	cmp    esi,ebp
c001373c:	74 13                	je     c0013751 <zStrtok(char*, char const*)+0x4f>
c001373e:	42                   	inc    edx
c001373f:	eb eb                	jmp    c001372c <zStrtok(char*, char const*)+0x2a>
c0013741:	31 c0                	xor    eax,eax
c0013743:	eb 2a                	jmp    c001376f <zStrtok(char*, char const*)+0x6d>
c0013745:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001374f:	eb 1e                	jmp    c001376f <zStrtok(char*, char const*)+0x6d>
c0013751:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013754:	39 ce                	cmp    esi,ecx
c0013756:	75 0a                	jne    c0013762 <zStrtok(char*, char const*)+0x60>
c0013758:	40                   	inc    eax
c0013759:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001375e:	89 d8                	mov    eax,ebx
c0013760:	eb 0d                	jmp    c001376f <zStrtok(char*, char const*)+0x6d>
c0013762:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013765:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013769:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001376f:	5b                   	pop    ebx
c0013770:	5e                   	pop    esi
c0013771:	5f                   	pop    edi
c0013772:	5d                   	pop    ebp
c0013773:	c3                   	ret    

c0013774 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013774:	57                   	push   edi
c0013775:	56                   	push   esi
c0013776:	53                   	push   ebx
c0013777:	81 ec 08 01 00 00    	sub    esp,0x108
c001377d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013784:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001378b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001378f:	53                   	push   ebx
c0013790:	e8 bb ce fe ff       	call   c0000650 <strcpy>
c0013795:	59                   	pop    ecx
c0013796:	5e                   	pop    esi
c0013797:	68 83 28 02 c0       	push   0xc0022883
c001379c:	53                   	push   ebx
c001379d:	bb 01 00 00 00       	mov    ebx,0x1
c00137a2:	e8 5b ff ff ff       	call   c0013702 <zStrtok(char*, char const*)>
c00137a7:	83 c4 10             	add    esp,0x10
c00137aa:	85 c0                	test   eax,eax
c00137ac:	74 3b                	je     c00137e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137ae:	52                   	push   edx
c00137af:	50                   	push   eax
c00137b0:	6a 01                	push   0x1
c00137b2:	57                   	push   edi
c00137b3:	e8 b9 fd ff ff       	call   c0013571 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00137b8:	59                   	pop    ecx
c00137b9:	5e                   	pop    esi
c00137ba:	89 c3                	mov    ebx,eax
c00137bc:	68 83 28 02 c0       	push   0xc0022883
c00137c1:	6a 00                	push   0x0
c00137c3:	e8 3a ff ff ff       	call   c0013702 <zStrtok(char*, char const*)>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	85 c0                	test   eax,eax
c00137cd:	89 c6                	mov    esi,eax
c00137cf:	74 18                	je     c00137e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137d1:	52                   	push   edx
c00137d2:	52                   	push   edx
c00137d3:	53                   	push   ebx
c00137d4:	57                   	push   edi
c00137d5:	e8 86 f5 ff ff       	call   c0012d60 <CmEnterDirectory(Reghive_Tag*, int)>
c00137da:	83 c4 10             	add    esp,0x10
c00137dd:	83 f8 ff             	cmp    eax,0xffffffff
c00137e0:	89 c3                	mov    ebx,eax
c00137e2:	74 05                	je     c00137e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137e4:	50                   	push   eax
c00137e5:	56                   	push   esi
c00137e6:	53                   	push   ebx
c00137e7:	eb c9                	jmp    c00137b2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00137e9:	81 c4 00 01 00 00    	add    esp,0x100
c00137ef:	89 d8                	mov    eax,ebx
c00137f1:	5b                   	pop    ebx
c00137f2:	5e                   	pop    esi
c00137f3:	5f                   	pop    edi
c00137f4:	c3                   	ret    

c00137f5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00137f5:	55                   	push   ebp
c00137f6:	57                   	push   edi
c00137f7:	56                   	push   esi
c00137f8:	53                   	push   ebx
c00137f9:	83 ec 5c             	sub    esp,0x5c
c00137fc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013800:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013804:	85 db                	test   ebx,ebx
c0013806:	0f 8e 84 00 00 00    	jle    c0013890 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001380c:	57                   	push   edi
c001380d:	31 ed                	xor    ebp,ebp
c001380f:	6a 32                	push   0x32
c0013811:	6a 00                	push   0x0
c0013813:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013817:	57                   	push   edi
c0013818:	e8 d3 cc fe ff       	call   c00004f0 <memset>
c001381d:	83 c4 0c             	add    esp,0xc
c0013820:	57                   	push   edi
c0013821:	53                   	push   ebx
c0013822:	56                   	push   esi
c0013823:	e8 31 fb ff ff       	call   c0013359 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013828:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013833:	7d 13                	jge    c0013848 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013835:	83 ec 0c             	sub    esp,0xc
c0013838:	45                   	inc    ebp
c0013839:	68 27 2c 02 c0       	push   0xc0022c27
c001383e:	e8 c7 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013843:	83 c4 10             	add    esp,0x10
c0013846:	eb e7                	jmp    c001382f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013848:	51                   	push   ecx
c0013849:	57                   	push   edi
c001384a:	53                   	push   ebx
c001384b:	68 25 25 02 c0       	push   0xc0022525
c0013850:	e8 b5 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013855:	83 c4 10             	add    esp,0x10
c0013858:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001385d:	75 1e                	jne    c001387d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001385f:	52                   	push   edx
c0013860:	52                   	push   edx
c0013861:	53                   	push   ebx
c0013862:	56                   	push   esi
c0013863:	e8 f8 f4 ff ff       	call   c0012d60 <CmEnterDirectory(Reghive_Tag*, int)>
c0013868:	83 c4 0c             	add    esp,0xc
c001386b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001386f:	8d 51 04             	lea    edx,[ecx+0x4]
c0013872:	52                   	push   edx
c0013873:	50                   	push   eax
c0013874:	56                   	push   esi
c0013875:	e8 7b ff ff ff       	call   c00137f5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	50                   	push   eax
c001387e:	50                   	push   eax
c001387f:	53                   	push   ebx
c0013880:	56                   	push   esi
c0013881:	e8 19 f5 ff ff       	call   c0012d9f <CmGetNext(Reghive_Tag*, int)>
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	89 c3                	mov    ebx,eax
c001388b:	e9 74 ff ff ff       	jmp    c0013804 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013890:	83 c4 5c             	add    esp,0x5c
c0013893:	5b                   	pop    ebx
c0013894:	5e                   	pop    esi
c0013895:	5f                   	pop    edi
c0013896:	5d                   	pop    ebp
c0013897:	c3                   	ret    

c0013898 <CmSplitFinalSlashInPlace(char*)>:
c0013898:	53                   	push   ebx
c0013899:	83 ec 14             	sub    esp,0x14
c001389c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138a0:	53                   	push   ebx
c00138a1:	e8 da cc fe ff       	call   c0000580 <strlen>
c00138a6:	83 c4 10             	add    esp,0x10
c00138a9:	48                   	dec    eax
c00138aa:	85 c0                	test   eax,eax
c00138ac:	74 15                	je     c00138c3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00138ae:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00138b2:	8d 14 03             	lea    edx,[ebx+eax*1]
c00138b5:	75 09                	jne    c00138c0 <CmSplitFinalSlashInPlace(char*)+0x28>
c00138b7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00138ba:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00138be:	eb 05                	jmp    c00138c5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00138c0:	48                   	dec    eax
c00138c1:	eb e7                	jmp    c00138aa <CmSplitFinalSlashInPlace(char*)+0x12>
c00138c3:	31 c0                	xor    eax,eax
c00138c5:	83 c4 08             	add    esp,0x8
c00138c8:	5b                   	pop    ebx
c00138c9:	c3                   	ret    

c00138ca <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00138ca:	55                   	push   ebp
c00138cb:	57                   	push   edi
c00138cc:	56                   	push   esi
c00138cd:	53                   	push   ebx
c00138ce:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00138d4:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00138db:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00138de:	8d 43 01             	lea    eax,[ebx+0x1]
c00138e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138e5:	89 f0                	mov    eax,esi
c00138e7:	3c 40                	cmp    al,0x40
c00138e9:	75 1b                	jne    c0013906 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00138eb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00138ee:	85 c0                	test   eax,eax
c00138f0:	74 08                	je     c00138fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00138f2:	83 f8 3a             	cmp    eax,0x3a
c00138f5:	74 03                	je     c00138fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00138f7:	43                   	inc    ebx
c00138f8:	eb f1                	jmp    c00138eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00138fa:	85 c0                	test   eax,eax
c00138fc:	0f 84 45 01 00 00    	je     c0013a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013902:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013905:	43                   	inc    ebx
c0013906:	50                   	push   eax
c0013907:	6a 40                	push   0x40
c0013909:	6a 00                	push   0x0
c001390b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001390f:	50                   	push   eax
c0013910:	e8 db cb fe ff       	call   c00004f0 <memset>
c0013915:	89 f1                	mov    ecx,esi
c0013917:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001391e:	31 c0                	xor    eax,eax
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	0f be f1             	movsx  esi,cl
c0013926:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013929:	85 d2                	test   edx,edx
c001392b:	89 d1                	mov    ecx,edx
c001392d:	0f 84 14 01 00 00    	je     c0013a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013933:	3d c7 00 00 00       	cmp    eax,0xc7
c0013938:	0f 8f 09 01 00 00    	jg     c0013a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001393e:	83 fa 0a             	cmp    edx,0xa
c0013941:	0f 85 f1 00 00 00    	jne    c0013a38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013947:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001394c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013951:	89 c8                	mov    eax,ecx
c0013953:	a8 df                	test   al,0xdf
c0013955:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001395a:	83 f9 23             	cmp    ecx,0x23
c001395d:	0f 94 c2             	sete   dl
c0013960:	89 d5                	mov    ebp,edx
c0013962:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013966:	09 ea                	or     edx,ebp
c0013968:	80 e2 01             	and    dl,0x1
c001396b:	75 47                	jne    c00139b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001396d:	83 e8 09             	sub    eax,0x9
c0013970:	3c 01                	cmp    al,0x1
c0013972:	76 40                	jbe    c00139b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013974:	83 f9 5b             	cmp    ecx,0x5b
c0013977:	75 42                	jne    c00139bb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013979:	83 fe 40             	cmp    esi,0x40
c001397c:	75 36                	jne    c00139b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001397e:	83 ec 0c             	sub    esp,0xc
c0013981:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013985:	55                   	push   ebp
c0013986:	e8 f5 cb fe ff       	call   c0000580 <strlen>
c001398b:	83 c4 10             	add    esp,0x10
c001398e:	83 f8 3f             	cmp    eax,0x3f
c0013991:	0f 87 b0 00 00 00    	ja     c0013a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013997:	50                   	push   eax
c0013998:	50                   	push   eax
c0013999:	55                   	push   ebp
c001399a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001399e:	55                   	push   ebp
c001399f:	e8 ac cc fe ff       	call   c0000650 <strcpy>
c00139a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00139a7:	e8 d4 cb fe ff       	call   c0000580 <strlen>
c00139ac:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	31 d2                	xor    edx,edx
c00139b6:	e9 84 00 00 00       	jmp    c0013a3f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00139bb:	83 fe 40             	cmp    esi,0x40
c00139be:	74 06                	je     c00139c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00139c0:	8d 54 24 58          	lea    edx,[esp+0x58]
c00139c4:	eb 19                	jmp    c00139df <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00139c6:	51                   	push   ecx
c00139c7:	51                   	push   ecx
c00139c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139cc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139d0:	50                   	push   eax
c00139d1:	e8 aa cd fe ff       	call   c0000780 <strcmp>
c00139d6:	83 c4 10             	add    esp,0x10
c00139d9:	85 c0                	test   eax,eax
c00139db:	75 d7                	jne    c00139b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139dd:	eb e1                	jmp    c00139c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00139df:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00139e2:	85 c9                	test   ecx,ecx
c00139e4:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00139e9:	83 f9 3d             	cmp    ecx,0x3d
c00139ec:	0f 94 c0             	sete   al
c00139ef:	89 c5                	mov    ebp,eax
c00139f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139f5:	09 e8                	or     eax,ebp
c00139f7:	a8 01                	test   al,0x1
c00139f9:	89 c5                	mov    ebp,eax
c00139fb:	75 03                	jne    c0013a00 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00139fd:	42                   	inc    edx
c00139fe:	eb df                	jmp    c00139df <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a00:	85 c9                	test   ecx,ecx
c0013a02:	74 43                	je     c0013a47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a08:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a0b:	52                   	push   edx
c0013a0c:	52                   	push   edx
c0013a0d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013a11:	50                   	push   eax
c0013a12:	53                   	push   ebx
c0013a13:	e8 68 cd fe ff       	call   c0000780 <strcmp>
c0013a18:	83 c4 10             	add    esp,0x10
c0013a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a1f:	85 c0                	test   eax,eax
c0013a21:	75 91                	jne    c00139b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a23:	50                   	push   eax
c0013a24:	42                   	inc    edx
c0013a25:	50                   	push   eax
c0013a26:	52                   	push   edx
c0013a27:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013a2e:	e8 1d cc fe ff       	call   c0000650 <strcpy>
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	eb 11                	jmp    c0013a49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013a38:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a3c:	8d 50 01             	lea    edx,[eax+0x1]
c0013a3f:	47                   	inc    edi
c0013a40:	89 d0                	mov    eax,edx
c0013a42:	e9 df fe ff ff       	jmp    c0013926 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013a47:	31 ed                	xor    ebp,ebp
c0013a49:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013a4f:	89 e8                	mov    eax,ebp
c0013a51:	5b                   	pop    ebx
c0013a52:	5e                   	pop    esi
c0013a53:	5f                   	pop    edi
c0013a54:	5d                   	pop    ebp
c0013a55:	c3                   	ret    

c0013a56 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013a56:	57                   	push   edi
c0013a57:	56                   	push   esi
c0013a58:	53                   	push   ebx
c0013a59:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a5f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013a66:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013a6d:	53                   	push   ebx
c0013a6e:	e8 0d cb fe ff       	call   c0000580 <strlen>
c0013a73:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a76:	89 c7                	mov    edi,eax
c0013a78:	e8 03 cb fe ff       	call   c0000580 <strlen>
c0013a7d:	83 c4 10             	add    esp,0x10
c0013a80:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013a84:	3d ff 00 00 00       	cmp    eax,0xff
c0013a89:	0f 87 d3 00 00 00    	ja     c0013b62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013a8f:	57                   	push   edi
c0013a90:	57                   	push   edi
c0013a91:	56                   	push   esi
c0013a92:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a96:	56                   	push   esi
c0013a97:	e8 b4 cb fe ff       	call   c0000650 <strcpy>
c0013a9c:	58                   	pop    eax
c0013a9d:	5a                   	pop    edx
c0013a9e:	68 83 28 02 c0       	push   0xc0022883
c0013aa3:	56                   	push   esi
c0013aa4:	e8 c7 cd fe ff       	call   c0000870 <strcat>
c0013aa9:	59                   	pop    ecx
c0013aaa:	5f                   	pop    edi
c0013aab:	53                   	push   ebx
c0013aac:	56                   	push   esi
c0013aad:	e8 be cd fe ff       	call   c0000870 <strcat>
c0013ab2:	58                   	pop    eax
c0013ab3:	5a                   	pop    edx
c0013ab4:	68 2f 25 02 c0       	push   0xc002252f
c0013ab9:	56                   	push   esi
c0013aba:	e8 b1 cd fe ff       	call   c0000870 <strcat>
c0013abf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013ac6:	e8 08 40 ff ff       	call   c0007ad3 <malloc>
c0013acb:	83 c4 0c             	add    esp,0xc
c0013ace:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013ad4:	56                   	push   esi
c0013ad5:	50                   	push   eax
c0013ad6:	89 c3                	mov    ebx,eax
c0013ad8:	e8 05 80 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0013add:	83 c4 10             	add    esp,0x10
c0013ae0:	85 db                	test   ebx,ebx
c0013ae2:	74 7e                	je     c0013b62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013ae4:	51                   	push   ecx
c0013ae5:	51                   	push   ecx
c0013ae6:	6a 01                	push   0x1
c0013ae8:	53                   	push   ebx
c0013ae9:	e8 12 80 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0013aee:	83 c4 10             	add    esp,0x10
c0013af1:	85 c0                	test   eax,eax
c0013af3:	74 08                	je     c0013afd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013af5:	83 ec 0c             	sub    esp,0xc
c0013af8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013afa:	53                   	push   ebx
c0013afb:	eb 5f                	jmp    c0013b5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013afd:	52                   	push   edx
c0013afe:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b02:	50                   	push   eax
c0013b03:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b07:	50                   	push   eax
c0013b08:	53                   	push   ebx
c0013b09:	e8 f4 82 ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c0013b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b12:	83 c4 10             	add    esp,0x10
c0013b15:	89 c1                	mov    ecx,eax
c0013b17:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013b1b:	74 31                	je     c0013b4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b1d:	83 ec 0c             	sub    esp,0xc
c0013b20:	50                   	push   eax
c0013b21:	e8 ad 3f ff ff       	call   c0007ad3 <malloc>
c0013b26:	89 c6                	mov    esi,eax
c0013b28:	58                   	pop    eax
c0013b29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013b2f:	52                   	push   edx
c0013b30:	56                   	push   esi
c0013b31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b39:	53                   	push   ebx
c0013b3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b3d:	83 c4 20             	add    esp,0x20
c0013b40:	85 c0                	test   eax,eax
c0013b42:	75 0a                	jne    c0013b4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b48:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013b4c:	74 18                	je     c0013b66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013b4e:	83 ec 0c             	sub    esp,0xc
c0013b51:	53                   	push   ebx
c0013b52:	e8 07 80 ff ff       	call   c000bb5e <File::close()>
c0013b57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	31 c0                	xor    eax,eax
c0013b64:	eb 3b                	jmp    c0013ba1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	53                   	push   ebx
c0013b6a:	e8 ef 7f ff ff       	call   c000bb5e <File::close()>
c0013b6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b77:	83 c4 0c             	add    esp,0xc
c0013b7a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b81:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b88:	56                   	push   esi
c0013b89:	e8 3c fd ff ff       	call   c00138ca <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013b8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013b95:	e8 49 3f ff ff       	call   c0007ae3 <free>
c0013b9a:	83 c4 10             	add    esp,0x10
c0013b9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013ba1:	81 c4 20 01 00 00    	add    esp,0x120
c0013ba7:	5b                   	pop    ebx
c0013ba8:	5e                   	pop    esi
c0013ba9:	5f                   	pop    edi
c0013baa:	c3                   	ret    

c0013bab <Reg::getLine(char*, char*, char*)>:
c0013bab:	57                   	push   edi
c0013bac:	56                   	push   esi
c0013bad:	53                   	push   ebx
c0013bae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013bb2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bba:	57                   	push   edi
c0013bbb:	56                   	push   esi
c0013bbc:	53                   	push   ebx
c0013bbd:	68 34 25 02 c0       	push   0xc0022534
c0013bc2:	e8 8f fe ff ff       	call   c0013a56 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013bc7:	83 c4 10             	add    esp,0x10
c0013bca:	84 c0                	test   al,al
c0013bcc:	75 10                	jne    c0013bde <Reg::getLine(char*, char*, char*)+0x33>
c0013bce:	57                   	push   edi
c0013bcf:	56                   	push   esi
c0013bd0:	53                   	push   ebx
c0013bd1:	68 59 25 02 c0       	push   0xc0022559
c0013bd6:	e8 7b fe ff ff       	call   c0013a56 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	5b                   	pop    ebx
c0013bdf:	5e                   	pop    esi
c0013be0:	5f                   	pop    edi
c0013be1:	c3                   	ret    

c0013be2 <Reg::readInt(char*, char*, int*)>:
c0013be2:	55                   	push   ebp
c0013be3:	57                   	push   edi
c0013be4:	56                   	push   esi
c0013be5:	53                   	push   ebx
c0013be6:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013bec:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013bf0:	55                   	push   ebp
c0013bf1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013bf8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013bff:	e8 a7 ff ff ff       	call   c0013bab <Reg::getLine(char*, char*, char*)>
c0013c04:	83 c4 10             	add    esp,0x10
c0013c07:	84 c0                	test   al,al
c0013c09:	0f 84 b6 00 00 00    	je     c0013cc5 <Reg::readInt(char*, char*, int*)+0xe3>
c0013c0f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013c14:	83 fa 2b             	cmp    edx,0x2b
c0013c17:	74 0c                	je     c0013c25 <Reg::readInt(char*, char*, int*)+0x43>
c0013c19:	83 fa 2d             	cmp    edx,0x2d
c0013c1c:	75 0e                	jne    c0013c2c <Reg::readInt(char*, char*, int*)+0x4a>
c0013c1e:	ba 01 00 00 00       	mov    edx,0x1
c0013c23:	eb 0b                	jmp    c0013c30 <Reg::readInt(char*, char*, int*)+0x4e>
c0013c25:	ba 01 00 00 00       	mov    edx,0x1
c0013c2a:	eb 02                	jmp    c0013c2e <Reg::readInt(char*, char*, int*)+0x4c>
c0013c2c:	31 d2                	xor    edx,edx
c0013c2e:	31 c0                	xor    eax,eax
c0013c30:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013c35:	be 0a 00 00 00       	mov    esi,0xa
c0013c3a:	75 21                	jne    c0013c5d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c3c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013c41:	83 f9 78             	cmp    ecx,0x78
c0013c44:	75 0a                	jne    c0013c50 <Reg::readInt(char*, char*, int*)+0x6e>
c0013c46:	83 c2 02             	add    edx,0x2
c0013c49:	be 10 00 00 00       	mov    esi,0x10
c0013c4e:	eb 0d                	jmp    c0013c5d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c50:	83 f9 62             	cmp    ecx,0x62
c0013c53:	75 08                	jne    c0013c5d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c55:	83 c2 02             	add    edx,0x2
c0013c58:	be 02 00 00 00       	mov    esi,0x2
c0013c5d:	01 d5                	add    ebp,edx
c0013c5f:	31 d2                	xor    edx,edx
c0013c61:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013c65:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c69:	85 c9                	test   ecx,ecx
c0013c6b:	0f 94 c3             	sete   bl
c0013c6e:	83 f9 0d             	cmp    ecx,0xd
c0013c71:	89 df                	mov    edi,ebx
c0013c73:	0f 94 c3             	sete   bl
c0013c76:	09 df                	or     edi,ebx
c0013c78:	89 fb                	mov    ebx,edi
c0013c7a:	83 e7 01             	and    edi,0x1
c0013c7d:	75 35                	jne    c0013cb4 <Reg::readInt(char*, char*, int*)+0xd2>
c0013c7f:	0f af d6             	imul   edx,esi
c0013c82:	83 fe 10             	cmp    esi,0x10
c0013c85:	75 26                	jne    c0013cad <Reg::readInt(char*, char*, int*)+0xcb>
c0013c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c8b:	83 ef 41             	sub    edi,0x41
c0013c8e:	89 fb                	mov    ebx,edi
c0013c90:	80 fb 05             	cmp    bl,0x5
c0013c93:	77 06                	ja     c0013c9b <Reg::readInt(char*, char*, int*)+0xb9>
c0013c95:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013c99:	eb 16                	jmp    c0013cb1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013c9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c9f:	83 eb 61             	sub    ebx,0x61
c0013ca2:	80 fb 05             	cmp    bl,0x5
c0013ca5:	77 06                	ja     c0013cad <Reg::readInt(char*, char*, int*)+0xcb>
c0013ca7:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013cab:	eb 04                	jmp    c0013cb1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013cad:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013cb1:	45                   	inc    ebp
c0013cb2:	eb ad                	jmp    c0013c61 <Reg::readInt(char*, char*, int*)+0x7f>
c0013cb4:	84 c0                	test   al,al
c0013cb6:	74 02                	je     c0013cba <Reg::readInt(char*, char*, int*)+0xd8>
c0013cb8:	f7 da                	neg    edx
c0013cba:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013cc1:	89 10                	mov    DWORD PTR [eax],edx
c0013cc3:	88 d8                	mov    al,bl
c0013cc5:	81 c4 ec 00 00 00    	add    esp,0xec
c0013ccb:	5b                   	pop    ebx
c0013ccc:	5e                   	pop    esi
c0013ccd:	5f                   	pop    edi
c0013cce:	5d                   	pop    ebp
c0013ccf:	c3                   	ret    

c0013cd0 <Reg::readString(char*, char*, char*, int)>:
c0013cd0:	57                   	push   edi
c0013cd1:	56                   	push   esi
c0013cd2:	53                   	push   ebx
c0013cd3:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013cd9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013cdd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013ce4:	57                   	push   edi
c0013ce5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013cec:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013cf3:	e8 b3 fe ff ff       	call   c0013bab <Reg::getLine(char*, char*, char*)>
c0013cf8:	83 c4 10             	add    esp,0x10
c0013cfb:	84 c0                	test   al,al
c0013cfd:	89 c6                	mov    esi,eax
c0013cff:	74 44                	je     c0013d45 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d01:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d08:	31 c0                	xor    eax,eax
c0013d0a:	4a                   	dec    edx
c0013d0b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013d0e:	84 c9                	test   cl,cl
c0013d10:	74 0f                	je     c0013d21 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d12:	39 c2                	cmp    edx,eax
c0013d14:	7e 0b                	jle    c0013d21 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d16:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013d19:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013d1e:	40                   	inc    eax
c0013d1f:	eb ea                	jmp    c0013d0b <Reg::readString(char*, char*, char*, int)+0x3b>
c0013d21:	83 ec 0c             	sub    esp,0xc
c0013d24:	53                   	push   ebx
c0013d25:	e8 56 c8 fe ff       	call   c0000580 <strlen>
c0013d2a:	83 c4 10             	add    esp,0x10
c0013d2d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013d32:	75 11                	jne    c0013d45 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d34:	83 ec 0c             	sub    esp,0xc
c0013d37:	53                   	push   ebx
c0013d38:	e8 43 c8 fe ff       	call   c0000580 <strlen>
c0013d3d:	83 c4 10             	add    esp,0x10
c0013d40:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013d45:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013d4b:	89 f0                	mov    eax,esi
c0013d4d:	5b                   	pop    ebx
c0013d4e:	5e                   	pop    esi
c0013d4f:	5f                   	pop    edi
c0013d50:	c3                   	ret    

c0013d51 <Reg::readBool(char*, char*, bool*)>:
c0013d51:	83 ec 20             	sub    esp,0x20
c0013d54:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d58:	50                   	push   eax
c0013d59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d61:	e8 7c fe ff ff       	call   c0013be2 <Reg::readInt(char*, char*, int*)>
c0013d66:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d6a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013d6f:	0f 95 02             	setne  BYTE PTR [edx]
c0013d72:	83 c4 2c             	add    esp,0x2c
c0013d75:	c3                   	ret    

c0013d76 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013d76:	53                   	push   ebx
c0013d77:	83 ec 1c             	sub    esp,0x1c
c0013d7a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013d7e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013d82:	50                   	push   eax
c0013d83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d8b:	e8 c1 ff ff ff       	call   c0013d51 <Reg::readBool(char*, char*, bool*)>
c0013d90:	83 c4 10             	add    esp,0x10
c0013d93:	84 c0                	test   al,al
c0013d95:	74 04                	je     c0013d9b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013d97:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013d9b:	83 c4 18             	add    esp,0x18
c0013d9e:	88 d8                	mov    al,bl
c0013da0:	5b                   	pop    ebx
c0013da1:	c3                   	ret    

c0013da2 <Reg::readIntWithDefault(char*, char*, int)>:
c0013da2:	53                   	push   ebx
c0013da3:	83 ec 1c             	sub    esp,0x1c
c0013da6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013daa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013dae:	50                   	push   eax
c0013daf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013db3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013db7:	e8 26 fe ff ff       	call   c0013be2 <Reg::readInt(char*, char*, int*)>
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	84 c0                	test   al,al
c0013dc1:	74 04                	je     c0013dc7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013dc3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013dc7:	83 c4 18             	add    esp,0x18
c0013dca:	89 d8                	mov    eax,ebx
c0013dcc:	5b                   	pop    ebx
c0013dcd:	c3                   	ret    

c0013dce <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013dce:	57                   	push   edi
c0013dcf:	56                   	push   esi
c0013dd0:	53                   	push   ebx
c0013dd1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013dd5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013dd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ddd:	56                   	push   esi
c0013dde:	57                   	push   edi
c0013ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de7:	e8 e4 fe ff ff       	call   c0013cd0 <Reg::readString(char*, char*, char*, int)>
c0013dec:	83 c4 10             	add    esp,0x10
c0013def:	84 c0                	test   al,al
c0013df1:	75 16                	jne    c0013e09 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013df3:	50                   	push   eax
c0013df4:	56                   	push   esi
c0013df5:	6a 00                	push   0x0
c0013df7:	57                   	push   edi
c0013df8:	e8 f3 c6 fe ff       	call   c00004f0 <memset>
c0013dfd:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e00:	89 de                	mov    esi,ebx
c0013e02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e04:	83 c4 10             	add    esp,0x10
c0013e07:	89 df                	mov    edi,ebx
c0013e09:	5b                   	pop    ebx
c0013e0a:	89 f8                	mov    eax,edi
c0013e0c:	5e                   	pop    esi
c0013e0d:	5f                   	pop    edi
c0013e0e:	c3                   	ret    

c0013e0f <SysEject(regs*)>:
c0013e0f:	83 ec 0c             	sub    esp,0xc
c0013e12:	83 ca ff             	or     edx,0xffffffff
c0013e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e19:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e1c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e21:	83 e9 41             	sub    ecx,0x41
c0013e24:	83 f9 19             	cmp    ecx,0x19
c0013e27:	77 18                	ja     c0013e41 <SysEject(regs*)+0x32>
c0013e29:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013e30:	85 c9                	test   ecx,ecx
c0013e32:	74 0d                	je     c0013e41 <SysEject(regs*)+0x32>
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	51                   	push   ecx
c0013e38:	e8 a3 9e ff ff       	call   c000dce0 <LogicalDisk::eject()>
c0013e3d:	83 c4 10             	add    esp,0x10
c0013e40:	99                   	cdq    
c0013e41:	83 c4 0c             	add    esp,0xc
c0013e44:	c3                   	ret    

c0013e45 <SysExit(regs*)>:
c0013e45:	83 ec 18             	sub    esp,0x18
c0013e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e4c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e4f:	e8 3c 2b 00 00       	call   c0016990 <terminateTask(int)>
c0013e54:	83 c8 ff             	or     eax,0xffffffff
c0013e57:	83 c4 1c             	add    esp,0x1c
c0013e5a:	89 c2                	mov    edx,eax
c0013e5c:	c3                   	ret    

c0013e5d <SysGetCwd(regs*)>:
c0013e5d:	83 ec 10             	sub    esp,0x10
c0013e60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e64:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013e67:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e6f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e72:	e8 0b 79 ff ff       	call   c000b782 <Fs::getcwd(Process*, char*, int)>
c0013e77:	83 c4 1c             	add    esp,0x1c
c0013e7a:	99                   	cdq    
c0013e7b:	c3                   	ret    

c0013e7c <SysGetPID(regs*)>:
c0013e7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e84:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e86:	99                   	cdq    
c0013e87:	c3                   	ret    

c0013e88 <SysGetRAMData(regs*)>:
c0013e88:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013e92:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013e98:	99                   	cdq    
c0013e99:	f7 f9                	idiv   ecx
c0013e9b:	c1 e0 18             	shl    eax,0x18
c0013e9e:	09 c8                	or     eax,ecx
c0013ea0:	99                   	cdq    
c0013ea1:	c3                   	ret    

c0013ea2 <SysGetVGAPtr(regs*)>:
c0013ea2:	55                   	push   ebp
c0013ea3:	57                   	push   edi
c0013ea4:	56                   	push   esi
c0013ea5:	53                   	push   ebx
c0013ea6:	83 ec 18             	sub    esp,0x18
c0013ea9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ead:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013eb0:	e8 a7 25 00 00       	call   c001645c <Thr::processFromPID(int)>
c0013eb5:	83 c4 10             	add    esp,0x10
c0013eb8:	89 c1                	mov    ecx,eax
c0013eba:	b8 01 00 00 00       	mov    eax,0x1
c0013ebf:	85 c9                	test   ecx,ecx
c0013ec1:	74 57                	je     c0013f1a <SysGetVGAPtr(regs*)+0x78>
c0013ec3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013ec7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013ecd:	74 0c                	je     c0013edb <SysGetVGAPtr(regs*)+0x39>
c0013ecf:	83 ec 0c             	sub    esp,0xc
c0013ed2:	55                   	push   ebp
c0013ed3:	e8 97 48 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013ed8:	83 c4 10             	add    esp,0x10
c0013edb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013ede:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013ee3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013ee6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ee8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013eeb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013eee:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013ef4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ef7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013efa:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f00:	50                   	push   eax
c0013f01:	50                   	push   eax
c0013f02:	68 74 25 02 c0       	push   0xc0022574
c0013f07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f0a:	05 a8 0f 00 00       	add    eax,0xfa8
c0013f0f:	50                   	push   eax
c0013f10:	e8 3b c7 fe ff       	call   c0000650 <strcpy>
c0013f15:	83 c4 10             	add    esp,0x10
c0013f18:	31 c0                	xor    eax,eax
c0013f1a:	83 c4 0c             	add    esp,0xc
c0013f1d:	31 d2                	xor    edx,edx
c0013f1f:	5b                   	pop    ebx
c0013f20:	5e                   	pop    esi
c0013f21:	5f                   	pop    edi
c0013f22:	5d                   	pop    ebp
c0013f23:	c3                   	ret    

c0013f24 <SysKill(regs*)>:
c0013f24:	53                   	push   ebx
c0013f25:	83 ec 08             	sub    esp,0x8
c0013f28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f2c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013f30:	75 16                	jne    c0013f48 <SysKill(regs*)+0x24>
c0013f32:	83 ec 0c             	sub    esp,0xc
c0013f35:	68 7e 25 02 c0       	push   0xc002257e
c0013f3a:	e8 e8 d5 ff ff       	call   c0011527 <KePanic(char const*)>
c0013f3f:	83 c4 10             	add    esp,0x10
c0013f42:	e9 89 00 00 00       	jmp    c0013fd0 <SysKill(regs*)+0xac>
c0013f47:	90                   	nop
c0013f48:	83 ec 0c             	sub    esp,0xc
c0013f4b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f50:	e8 67 bd 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f55:	8d 76 00             	lea    esi,[esi+0x0]
c0013f58:	83 c4 10             	add    esp,0x10
c0013f5b:	85 c0                	test   eax,eax
c0013f5d:	74 19                	je     c0013f78 <SysKill(regs*)+0x54>
c0013f5f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f62:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013f65:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013f67:	74 33                	je     c0013f9c <SysKill(regs*)+0x78>
c0013f69:	52                   	push   edx
c0013f6a:	52                   	push   edx
c0013f6b:	50                   	push   eax
c0013f6c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f71:	e8 66 c0 00 00       	call   c001ffdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f76:	eb e0                	jmp    c0013f58 <SysKill(regs*)+0x34>
c0013f78:	83 ec 0c             	sub    esp,0xc
c0013f7b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013f80:	e8 37 bd 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f85:	8d 76 00             	lea    esi,[esi+0x0]
c0013f88:	83 c4 10             	add    esp,0x10
c0013f8b:	85 c0                	test   eax,eax
c0013f8d:	74 41                	je     c0013fd0 <SysKill(regs*)+0xac>
c0013f8f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f92:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013f95:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013f97:	75 27                	jne    c0013fc0 <SysKill(regs*)+0x9c>
c0013f99:	8d 76 00             	lea    esi,[esi+0x0]
c0013f9c:	51                   	push   ecx
c0013f9d:	51                   	push   ecx
c0013f9e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fa6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fa9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013faf:	e8 0f da ff ff       	call   c00119c3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013fb4:	83 c4 10             	add    esp,0x10
c0013fb7:	31 c0                	xor    eax,eax
c0013fb9:	31 d2                	xor    edx,edx
c0013fbb:	eb 1b                	jmp    c0013fd8 <SysKill(regs*)+0xb4>
c0013fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc0:	52                   	push   edx
c0013fc1:	52                   	push   edx
c0013fc2:	50                   	push   eax
c0013fc3:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013fc8:	e8 0f c0 00 00       	call   c001ffdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fcd:	eb b9                	jmp    c0013f88 <SysKill(regs*)+0x64>
c0013fcf:	90                   	nop
c0013fd0:	83 c8 ff             	or     eax,0xffffffff
c0013fd3:	89 c2                	mov    edx,eax
c0013fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd8:	83 c4 08             	add    esp,0x8
c0013fdb:	5b                   	pop    ebx
c0013fdc:	c3                   	ret    

c0013fdd <SysLoadDLL(regs*)>:
c0013fdd:	56                   	push   esi
c0013fde:	31 d2                	xor    edx,edx
c0013fe0:	53                   	push   ebx
c0013fe1:	b8 01 00 00 00       	mov    eax,0x1
c0013fe6:	51                   	push   ecx
c0013fe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013feb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013fef:	0f 84 8c 00 00 00    	je     c0014081 <SysLoadDLL(regs*)+0xa4>
c0013ff5:	83 ec 0c             	sub    esp,0xc
c0013ff8:	68 14 01 00 00       	push   0x114
c0013ffd:	e8 d1 3a ff ff       	call   c0007ad3 <malloc>
c0014002:	83 c4 0c             	add    esp,0xc
c0014005:	89 c3                	mov    ebx,eax
c0014007:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001400c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001400f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014012:	53                   	push   ebx
c0014013:	e8 ca 7a ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0014018:	83 c4 10             	add    esp,0x10
c001401b:	31 d2                	xor    edx,edx
c001401d:	85 db                	test   ebx,ebx
c001401f:	b8 02 00 00 00       	mov    eax,0x2
c0014024:	74 5b                	je     c0014081 <SysLoadDLL(regs*)+0xa4>
c0014026:	83 ec 0c             	sub    esp,0xc
c0014029:	53                   	push   ebx
c001402a:	e8 95 7d ff ff       	call   c000bdc4 <File::exists()>
c001402f:	83 c4 10             	add    esp,0x10
c0014032:	84 c0                	test   al,al
c0014034:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014036:	75 11                	jne    c0014049 <SysLoadDLL(regs*)+0x6c>
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	53                   	push   ebx
c001403c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	b8 03 00 00 00       	mov    eax,0x3
c0014047:	eb 36                	jmp    c001407f <SysLoadDLL(regs*)+0xa2>
c0014049:	83 ec 0c             	sub    esp,0xc
c001404c:	53                   	push   ebx
c001404d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014050:	58                   	pop    eax
c0014051:	5a                   	pop    edx
c0014052:	6a 00                	push   0x0
c0014054:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014057:	e8 49 15 00 00       	call   c00155a5 <Thr::loadDLL(char const*, bool)>
c001405c:	83 c4 10             	add    esp,0x10
c001405f:	31 d2                	xor    edx,edx
c0014061:	89 c1                	mov    ecx,eax
c0014063:	b8 04 00 00 00       	mov    eax,0x4
c0014068:	85 c9                	test   ecx,ecx
c001406a:	74 15                	je     c0014081 <SysLoadDLL(regs*)+0xa4>
c001406c:	53                   	push   ebx
c001406d:	53                   	push   ebx
c001406e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014074:	51                   	push   ecx
c0014075:	e8 6b 17 00 00       	call   c00157e5 <Thr::executeDLL(unsigned long, void*)>
c001407a:	83 c4 10             	add    esp,0x10
c001407d:	31 c0                	xor    eax,eax
c001407f:	31 d2                	xor    edx,edx
c0014081:	59                   	pop    ecx
c0014082:	5b                   	pop    ebx
c0014083:	5e                   	pop    esi
c0014084:	c3                   	ret    

c0014085 <SysRead(regs*)>:
c0014085:	57                   	push   edi
c0014086:	56                   	push   esi
c0014087:	53                   	push   ebx
c0014088:	83 ec 10             	sub    esp,0x10
c001408b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001408f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014092:	83 f8 02             	cmp    eax,0x2
c0014095:	77 10                	ja     c00140a7 <SysRead(regs*)+0x22>
c0014097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001409c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001409f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00140a5:	eb 0e                	jmp    c00140b5 <SysRead(regs*)+0x30>
c00140a7:	83 ec 0c             	sub    esp,0xc
c00140aa:	50                   	push   eax
c00140ab:	e8 eb 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	89 c1                	mov    ecx,eax
c00140b5:	83 c8 ff             	or     eax,0xffffffff
c00140b8:	85 c9                	test   ecx,ecx
c00140ba:	89 c2                	mov    edx,eax
c00140bc:	74 28                	je     c00140e6 <SysRead(regs*)+0x61>
c00140be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140c6:	83 ec 0c             	sub    esp,0xc
c00140c9:	31 ff                	xor    edi,edi
c00140cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00140cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00140d1:	52                   	push   edx
c00140d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140d5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00140d8:	57                   	push   edi
c00140d9:	56                   	push   esi
c00140da:	51                   	push   ecx
c00140db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140e2:	83 c4 20             	add    esp,0x20
c00140e5:	99                   	cdq    
c00140e6:	83 c4 10             	add    esp,0x10
c00140e9:	5b                   	pop    ebx
c00140ea:	5e                   	pop    esi
c00140eb:	5f                   	pop    edi
c00140ec:	c3                   	ret    

c00140ed <SysRegisterSignal(regs*)>:
c00140ed:	83 ec 18             	sub    esp,0x18
c00140f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140f4:	6a 00                	push   0x0
c00140f6:	6a 00                	push   0x0
c00140f8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140fb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00140fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014103:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014106:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001410c:	e8 7c d8 ff ff       	call   c001198d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014111:	83 c4 2c             	add    esp,0x2c
c0014114:	99                   	cdq    
c0014115:	c3                   	ret    

c0014116 <SysRegistryGetTypeFromPath(regs*)>:
c0014116:	57                   	push   edi
c0014117:	56                   	push   esi
c0014118:	53                   	push   ebx
c0014119:	81 ec 38 01 00 00    	sub    esp,0x138
c001411f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014126:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014129:	68 9f 25 02 c0       	push   0xc002259f
c001412e:	e8 d7 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014133:	5a                   	pop    edx
c0014134:	59                   	pop    ecx
c0014135:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014138:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001413b:	e8 34 f6 ff ff       	call   c0013774 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014140:	5f                   	pop    edi
c0014141:	5a                   	pop    edx
c0014142:	89 c6                	mov    esi,eax
c0014144:	50                   	push   eax
c0014145:	68 bf 25 02 c0       	push   0xc00225bf
c001414a:	e8 bb 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	85 f6                	test   esi,esi
c0014154:	74 28                	je     c001417e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014156:	50                   	push   eax
c0014157:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001415b:	57                   	push   edi
c001415c:	56                   	push   esi
c001415d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014160:	e8 f4 f1 ff ff       	call   c0013359 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014165:	83 c4 0c             	add    esp,0xc
c0014168:	57                   	push   edi
c0014169:	50                   	push   eax
c001416a:	89 c3                	mov    ebx,eax
c001416c:	68 c7 25 02 c0       	push   0xc00225c7
c0014171:	e8 94 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014176:	89 d8                	mov    eax,ebx
c0014178:	83 c4 10             	add    esp,0x10
c001417b:	99                   	cdq    
c001417c:	eb 05                	jmp    c0014183 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001417e:	83 c8 ff             	or     eax,0xffffffff
c0014181:	89 c2                	mov    edx,eax
c0014183:	81 c4 30 01 00 00    	add    esp,0x130
c0014189:	5b                   	pop    ebx
c001418a:	5e                   	pop    esi
c001418b:	5f                   	pop    edi
c001418c:	c3                   	ret    

c001418d <SysRegistryReadExtent(regs*)>:
c001418d:	83 ec 1c             	sub    esp,0x1c
c0014190:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014194:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014197:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001419a:	85 c0                	test   eax,eax
c001419c:	79 1f                	jns    c00141bd <SysRegistryReadExtent(regs*)+0x30>
c001419e:	52                   	push   edx
c001419f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00141a4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141a8:	52                   	push   edx
c00141a9:	50                   	push   eax
c00141aa:	51                   	push   ecx
c00141ab:	e8 9b f0 ff ff       	call   c001324b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00141b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	eb 14                	jmp    c00141d1 <SysRegistryReadExtent(regs*)+0x44>
c00141bd:	83 ec 04             	sub    esp,0x4
c00141c0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00141c3:	50                   	push   eax
c00141c4:	51                   	push   ecx
c00141c5:	e8 1f eb ff ff       	call   c0012ce9 <CmGetString(Reghive_Tag*, int, char*)>
c00141ca:	83 c4 10             	add    esp,0x10
c00141cd:	31 c0                	xor    eax,eax
c00141cf:	31 d2                	xor    edx,edx
c00141d1:	83 c4 1c             	add    esp,0x1c
c00141d4:	c3                   	ret    

c00141d5 <SysRegistryPathToExtentLookup(regs*)>:
c00141d5:	53                   	push   ebx
c00141d6:	83 ec 10             	sub    esp,0x10
c00141d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141e0:	68 dd 25 02 c0       	push   0xc00225dd
c00141e5:	e8 20 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141ea:	58                   	pop    eax
c00141eb:	5a                   	pop    edx
c00141ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141ef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141f2:	e8 7d f5 ff ff       	call   c0013774 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141f7:	83 c4 18             	add    esp,0x18
c00141fa:	5b                   	pop    ebx
c00141fb:	99                   	cdq    
c00141fc:	c3                   	ret    

c00141fd <SysRegistryEnterDirectory(regs*)>:
c00141fd:	53                   	push   ebx
c00141fe:	83 ec 10             	sub    esp,0x10
c0014201:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014205:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014208:	68 00 26 02 c0       	push   0xc0022600
c001420d:	e8 f8 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014212:	58                   	pop    eax
c0014213:	5a                   	pop    edx
c0014214:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014217:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001421a:	e8 41 eb ff ff       	call   c0012d60 <CmEnterDirectory(Reghive_Tag*, int)>
c001421f:	83 c4 18             	add    esp,0x18
c0014222:	5b                   	pop    ebx
c0014223:	99                   	cdq    
c0014224:	c3                   	ret    

c0014225 <SysRegistryGetNext(regs*)>:
c0014225:	53                   	push   ebx
c0014226:	83 ec 10             	sub    esp,0x10
c0014229:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001422d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014230:	68 1e 26 02 c0       	push   0xc002261e
c0014235:	e8 d0 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001423a:	58                   	pop    eax
c001423b:	5a                   	pop    edx
c001423c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001423f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014242:	e8 58 eb ff ff       	call   c0012d9f <CmGetNext(Reghive_Tag*, int)>
c0014247:	83 c4 18             	add    esp,0x18
c001424a:	5b                   	pop    ebx
c001424b:	99                   	cdq    
c001424c:	c3                   	ret    

c001424d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001424d:	57                   	push   edi
c001424e:	56                   	push   esi
c001424f:	53                   	push   ebx
c0014250:	81 ec 34 01 00 00    	sub    esp,0x134
c0014256:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001425d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014261:	57                   	push   edi
c0014262:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014265:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014268:	e8 ec f0 ff ff       	call   c0013359 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001426d:	89 c3                	mov    ebx,eax
c001426f:	58                   	pop    eax
c0014270:	5a                   	pop    edx
c0014271:	57                   	push   edi
c0014272:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014275:	e8 d6 c3 fe ff       	call   c0000650 <strcpy>
c001427a:	81 c4 40 01 00 00    	add    esp,0x140
c0014280:	89 d8                	mov    eax,ebx
c0014282:	5b                   	pop    ebx
c0014283:	99                   	cdq    
c0014284:	5e                   	pop    esi
c0014285:	5f                   	pop    edi
c0014286:	c3                   	ret    

c0014287 <SysRegistryOpen(regs*)>:
c0014287:	83 ec 18             	sub    esp,0x18
c001428a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001428e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014291:	e8 e3 e8 ff ff       	call   c0012b79 <CmOpen(char const*)>
c0014296:	83 c4 1c             	add    esp,0x1c
c0014299:	99                   	cdq    
c001429a:	c3                   	ret    

c001429b <SysRegistryClose(regs*)>:
c001429b:	83 ec 18             	sub    esp,0x18
c001429e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142a5:	e8 ed e9 ff ff       	call   c0012c97 <CmClose(Reghive_Tag*)>
c00142aa:	31 c0                	xor    eax,eax
c00142ac:	31 d2                	xor    edx,edx
c00142ae:	83 c4 1c             	add    esp,0x1c
c00142b1:	c3                   	ret    

c00142b2 <SysSbrk(regs*)>:
c00142b2:	56                   	push   esi
c00142b3:	53                   	push   ebx
c00142b4:	50                   	push   eax
c00142b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142c1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00142c4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00142ca:	85 db                	test   ebx,ebx
c00142cc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00142cf:	74 02                	je     c00142d3 <SysSbrk(regs*)+0x21>
c00142d1:	79 06                	jns    c00142d9 <SysSbrk(regs*)+0x27>
c00142d3:	89 f0                	mov    eax,esi
c00142d5:	31 d2                	xor    edx,edx
c00142d7:	eb 2a                	jmp    c0014303 <SysSbrk(regs*)+0x51>
c00142d9:	83 c8 ff             	or     eax,0xffffffff
c00142dc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00142e2:	89 c2                	mov    edx,eax
c00142e4:	77 1d                	ja     c0014303 <SysSbrk(regs*)+0x51>
c00142e6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00142ec:	50                   	push   eax
c00142ed:	68 07 0c 00 00       	push   0xc07
c00142f2:	c1 ea 0c             	shr    edx,0xc
c00142f5:	52                   	push   edx
c00142f6:	51                   	push   ecx
c00142f7:	e8 0a 5b ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00142fc:	89 f0                	mov    eax,esi
c00142fe:	31 d2                	xor    edx,edx
c0014300:	83 c4 10             	add    esp,0x10
c0014303:	59                   	pop    ecx
c0014304:	5b                   	pop    ebx
c0014305:	5e                   	pop    esi
c0014306:	c3                   	ret    

c0014307 <SysSetCwd(regs*)>:
c0014307:	83 ec 14             	sub    esp,0x14
c001430a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001430e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014316:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014319:	e8 45 7b ff ff       	call   c000be63 <Fs::setcwd(Process*, char*)>
c001431e:	83 c4 1c             	add    esp,0x1c
c0014321:	99                   	cdq    
c0014322:	c3                   	ret    

c0014323 <SysSetTime(regs*)>:
c0014323:	55                   	push   ebp
c0014324:	31 c9                	xor    ecx,ecx
c0014326:	57                   	push   edi
c0014327:	bd 0c 00 00 00       	mov    ebp,0xc
c001432c:	56                   	push   esi
c001432d:	53                   	push   ebx
c001432e:	31 db                	xor    ebx,ebx
c0014330:	83 ec 10             	sub    esp,0x10
c0014333:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014337:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001433a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001433d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014340:	89 c2                	mov    edx,eax
c0014342:	c1 e8 05             	shr    eax,0x5
c0014345:	83 e2 1f             	and    edx,0x1f
c0014348:	42                   	inc    edx
c0014349:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001434f:	c1 e7 10             	shl    edi,0x10
c0014352:	88 d1                	mov    cl,dl
c0014354:	31 d2                	xor    edx,edx
c0014356:	f7 f5                	div    ebp
c0014358:	89 dd                	mov    ebp,ebx
c001435a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014360:	88 d5                	mov    ch,dl
c0014362:	31 d2                	xor    edx,edx
c0014364:	0f b7 c1             	movzx  eax,cx
c0014367:	09 f8                	or     eax,edi
c0014369:	bf 3c 00 00 00       	mov    edi,0x3c
c001436e:	89 c1                	mov    ecx,eax
c0014370:	89 f0                	mov    eax,esi
c0014372:	f7 f7                	div    edi
c0014374:	c1 e2 10             	shl    edx,0x10
c0014377:	09 d5                	or     ebp,edx
c0014379:	31 d2                	xor    edx,edx
c001437b:	f7 f7                	div    edi
c001437d:	89 eb                	mov    ebx,ebp
c001437f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014384:	89 f0                	mov    eax,esi
c0014386:	88 d7                	mov    bh,dl
c0014388:	31 d2                	xor    edx,edx
c001438a:	f7 f7                	div    edi
c001438c:	bf 18 00 00 00       	mov    edi,0x18
c0014391:	31 d2                	xor    edx,edx
c0014393:	f7 f7                	div    edi
c0014395:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001439a:	88 d3                	mov    bl,dl
c001439c:	53                   	push   ebx
c001439d:	51                   	push   ecx
c001439e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00143a4:	e8 cb 82 ff ff       	call   c000c674 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00143a9:	83 c4 1c             	add    esp,0x1c
c00143ac:	31 d2                	xor    edx,edx
c00143ae:	5b                   	pop    ebx
c00143af:	5e                   	pop    esi
c00143b0:	83 f0 01             	xor    eax,0x1
c00143b3:	5f                   	pop    edi
c00143b4:	0f b6 c0             	movzx  eax,al
c00143b7:	5d                   	pop    ebp
c00143b8:	c3                   	ret    

c00143b9 <SysSymlink(regs*)>:
c00143b9:	53                   	push   ebx
c00143ba:	83 c8 ff             	or     eax,0xffffffff
c00143bd:	83 ec 08             	sub    esp,0x8
c00143c0:	89 c2                	mov    edx,eax
c00143c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143c6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00143c9:	85 c9                	test   ecx,ecx
c00143cb:	74 14                	je     c00143e1 <SysSymlink(regs*)+0x28>
c00143cd:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00143d0:	85 db                	test   ebx,ebx
c00143d2:	74 0d                	je     c00143e1 <SysSymlink(regs*)+0x28>
c00143d4:	50                   	push   eax
c00143d5:	50                   	push   eax
c00143d6:	53                   	push   ebx
c00143d7:	51                   	push   ecx
c00143d8:	e8 b7 6e ff ff       	call   c000b294 <KeCreateSymlink(char const*, char const*)>
c00143dd:	83 c4 10             	add    esp,0x10
c00143e0:	99                   	cdq    
c00143e1:	83 c4 08             	add    esp,0x8
c00143e4:	5b                   	pop    ebx
c00143e5:	c3                   	ret    

c00143e6 <SysTimezone(regs*)>:
c00143e6:	53                   	push   ebx
c00143e7:	83 ec 08             	sub    esp,0x8
c00143ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143ee:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00143f2:	75 17                	jne    c001440b <SysTimezone(regs*)+0x25>
c00143f4:	83 ec 0c             	sub    esp,0xc
c00143f7:	68 35 26 02 c0       	push   0xc0022635
c00143fc:	e8 09 65 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014401:	83 c8 ff             	or     eax,0xffffffff
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	89 c2                	mov    edx,eax
c0014409:	eb 20                	jmp    c001442b <SysTimezone(regs*)+0x45>
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	68 4a 26 02 c0       	push   0xc002264a
c0014413:	e8 f2 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014418:	58                   	pop    eax
c0014419:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001441c:	e8 b7 7f ff ff       	call   c000c3d8 <User::loadClockSettings(int)>
c0014421:	83 c4 10             	add    esp,0x10
c0014424:	b8 01 00 00 00       	mov    eax,0x1
c0014429:	31 d2                	xor    edx,edx
c001442b:	83 c4 08             	add    esp,0x8
c001442e:	5b                   	pop    ebx
c001442f:	c3                   	ret    

c0014430 <SysTruncate(regs*)>:
c0014430:	55                   	push   ebp
c0014431:	57                   	push   edi
c0014432:	31 ff                	xor    edi,edi
c0014434:	56                   	push   esi
c0014435:	53                   	push   ebx
c0014436:	83 ec 0c             	sub    esp,0xc
c0014439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001443d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014440:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014444:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014447:	89 ce                	mov    esi,ecx
c0014449:	0f 84 9a 00 00 00    	je     c00144e9 <SysTruncate(regs*)+0xb9>
c001444f:	83 ec 0c             	sub    esp,0xc
c0014452:	68 14 01 00 00       	push   0x114
c0014457:	e8 77 36 ff ff       	call   c0007ad3 <malloc>
c001445c:	83 c4 0c             	add    esp,0xc
c001445f:	89 c3                	mov    ebx,eax
c0014461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014466:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014469:	55                   	push   ebp
c001446a:	53                   	push   ebx
c001446b:	e8 72 76 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0014470:	83 c4 10             	add    esp,0x10
c0014473:	31 d2                	xor    edx,edx
c0014475:	85 db                	test   ebx,ebx
c0014477:	b8 03 00 00 00       	mov    eax,0x3
c001447c:	0f 84 a2 00 00 00    	je     c0014524 <SysTruncate(regs*)+0xf4>
c0014482:	51                   	push   ecx
c0014483:	51                   	push   ecx
c0014484:	6a 02                	push   0x2
c0014486:	53                   	push   ebx
c0014487:	e8 74 76 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c001448c:	83 c4 10             	add    esp,0x10
c001448f:	85 c0                	test   eax,eax
c0014491:	74 13                	je     c00144a6 <SysTruncate(regs*)+0x76>
c0014493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014495:	83 ec 0c             	sub    esp,0xc
c0014498:	53                   	push   ebx
c0014499:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	b8 04 00 00 00       	mov    eax,0x4
c00144a4:	eb 7c                	jmp    c0014522 <SysTruncate(regs*)+0xf2>
c00144a6:	52                   	push   edx
c00144a7:	57                   	push   edi
c00144a8:	56                   	push   esi
c00144a9:	53                   	push   ebx
c00144aa:	e8 65 77 ff ff       	call   c000bc14 <File::truncate(unsigned long long)>
c00144af:	83 c4 10             	add    esp,0x10
c00144b2:	85 c0                	test   eax,eax
c00144b4:	74 1b                	je     c00144d1 <SysTruncate(regs*)+0xa1>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	53                   	push   ebx
c00144ba:	e8 9f 76 ff ff       	call   c000bb5e <File::close()>
c00144bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144c7:	83 c4 10             	add    esp,0x10
c00144ca:	b8 05 00 00 00       	mov    eax,0x5
c00144cf:	eb 51                	jmp    c0014522 <SysTruncate(regs*)+0xf2>
c00144d1:	83 ec 0c             	sub    esp,0xc
c00144d4:	53                   	push   ebx
c00144d5:	e8 84 76 ff ff       	call   c000bb5e <File::close()>
c00144da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	31 c0                	xor    eax,eax
c00144e7:	eb 39                	jmp    c0014522 <SysTruncate(regs*)+0xf2>
c00144e9:	31 d2                	xor    edx,edx
c00144eb:	83 fd 02             	cmp    ebp,0x2
c00144ee:	b8 01 00 00 00       	mov    eax,0x1
c00144f3:	7e 2f                	jle    c0014524 <SysTruncate(regs*)+0xf4>
c00144f5:	83 ec 0c             	sub    esp,0xc
c00144f8:	51                   	push   ecx
c00144f9:	e8 9d 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00144fe:	83 c4 10             	add    esp,0x10
c0014501:	31 d2                	xor    edx,edx
c0014503:	89 c1                	mov    ecx,eax
c0014505:	b8 02 00 00 00       	mov    eax,0x2
c001450a:	85 c9                	test   ecx,ecx
c001450c:	74 16                	je     c0014524 <SysTruncate(regs*)+0xf4>
c001450e:	50                   	push   eax
c001450f:	57                   	push   edi
c0014510:	56                   	push   esi
c0014511:	51                   	push   ecx
c0014512:	e8 fd 76 ff ff       	call   c000bc14 <File::truncate(unsigned long long)>
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	85 c0                	test   eax,eax
c001451c:	0f 95 c0             	setne  al
c001451f:	0f b6 c0             	movzx  eax,al
c0014522:	31 d2                	xor    edx,edx
c0014524:	83 c4 0c             	add    esp,0xc
c0014527:	5b                   	pop    ebx
c0014528:	5e                   	pop    esi
c0014529:	5f                   	pop    edi
c001452a:	5d                   	pop    ebp
c001452b:	c3                   	ret    

c001452c <SysWrite(regs*)>:
c001452c:	57                   	push   edi
c001452d:	56                   	push   esi
c001452e:	53                   	push   ebx
c001452f:	83 ec 10             	sub    esp,0x10
c0014532:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014536:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014539:	83 f8 02             	cmp    eax,0x2
c001453c:	77 10                	ja     c001454e <SysWrite(regs*)+0x22>
c001453e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014543:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014546:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001454c:	eb 0e                	jmp    c001455c <SysWrite(regs*)+0x30>
c001454e:	83 ec 0c             	sub    esp,0xc
c0014551:	50                   	push   eax
c0014552:	e8 44 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	89 c1                	mov    ecx,eax
c001455c:	83 c8 ff             	or     eax,0xffffffff
c001455f:	85 c9                	test   ecx,ecx
c0014561:	89 c2                	mov    edx,eax
c0014563:	74 28                	je     c001458d <SysWrite(regs*)+0x61>
c0014565:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001456d:	83 ec 0c             	sub    esp,0xc
c0014570:	31 ff                	xor    edi,edi
c0014572:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014576:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014578:	52                   	push   edx
c0014579:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001457c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001457f:	57                   	push   edi
c0014580:	56                   	push   esi
c0014581:	51                   	push   ecx
c0014582:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014585:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014589:	83 c4 20             	add    esp,0x20
c001458c:	99                   	cdq    
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	5b                   	pop    ebx
c0014591:	5e                   	pop    esi
c0014592:	5f                   	pop    edi
c0014593:	c3                   	ret    

c0014594 <SysWsbe(regs*)>:
c0014594:	57                   	push   edi
c0014595:	b9 0b 00 00 00       	mov    ecx,0xb
c001459a:	56                   	push   esi
c001459b:	be 89 26 02 c0       	mov    esi,0xc0022689
c00145a0:	53                   	push   ebx
c00145a1:	83 ec 30             	sub    esp,0x30
c00145a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00145a8:	fc                   	cld    
c00145a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00145ab:	83 ec 0c             	sub    esp,0xc
c00145ae:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00145b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145ba:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00145c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00145c2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00145c5:	57                   	push   edi
c00145c6:	e8 b5 bf fe ff       	call   c0000580 <strlen>
c00145cb:	5a                   	pop    edx
c00145cc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00145d0:	52                   	push   edx
c00145d1:	31 d2                	xor    edx,edx
c00145d3:	57                   	push   edi
c00145d4:	52                   	push   edx
c00145d5:	50                   	push   eax
c00145d6:	56                   	push   esi
c00145d7:	ff d3                	call   ebx
c00145d9:	83 c4 14             	add    esp,0x14
c00145dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00145e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00145e3:	e8 a8 23 00 00       	call   c0016990 <terminateTask(int)>
c00145e8:	83 c4 40             	add    esp,0x40
c00145eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00145f0:	5b                   	pop    ebx
c00145f1:	31 d2                	xor    edx,edx
c00145f3:	5e                   	pop    esi
c00145f4:	5f                   	pop    edi
c00145f5:	c3                   	ret    

c00145f6 <SysYield(regs*)>:
c00145f6:	83 ec 0c             	sub    esp,0xc
c00145f9:	fa                   	cli    
c00145fa:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014600:	e8 0b 1a 00 00       	call   c0016010 <schedule()>
c0014605:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001460a:	48                   	dec    eax
c001460b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014610:	75 01                	jne    c0014613 <SysYield(regs*)+0x1d>
c0014612:	fb                   	sti    
c0014613:	31 c0                	xor    eax,eax
c0014615:	31 d2                	xor    edx,edx
c0014617:	83 c4 0c             	add    esp,0xc
c001461a:	c3                   	ret    

c001461b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001461b:	55                   	push   ebp
c001461c:	57                   	push   edi
c001461d:	56                   	push   esi
c001461e:	53                   	push   ebx
c001461f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014625:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014630:	74 3b                	je     c001466d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014632:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001463a:	74 31                	je     c001466d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001463c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014644:	75 27                	jne    c001466d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014646:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001464d:	05 00 10 00 00       	add    eax,0x1000
c0014652:	89 c2                	mov    edx,eax
c0014654:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014659:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014660:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014666:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001466d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014674:	83 ec 0c             	sub    esp,0xc
c0014677:	6a 01                	push   0x1
c0014679:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001467f:	e8 71 4f ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014684:	83 c4 10             	add    esp,0x10
c0014687:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001468d:	89 c3                	mov    ebx,eax
c001468f:	0f 86 26 01 00 00    	jbe    c00147bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014695:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001469d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00146a4:	c1 ee 0c             	shr    esi,0xc
c00146a7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00146ab:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00146b2:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00146b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146bd:	29 ef                	sub    edi,ebp
c00146bf:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00146c3:	0f 83 f9 00 00 00    	jae    c00147c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00146c9:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00146cf:	b8 00 10 00 00       	mov    eax,0x1000
c00146d4:	0f 47 f8             	cmova  edi,eax
c00146d7:	83 ec 0c             	sub    esp,0xc
c00146da:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00146e1:	31 d2                	xor    edx,edx
c00146e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00146e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00146e9:	50                   	push   eax
c00146ea:	8d 74 24 30          	lea    esi,[esp+0x30]
c00146ee:	56                   	push   esi
c00146ef:	52                   	push   edx
c00146f0:	57                   	push   edi
c00146f1:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00146f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146fb:	83 c4 20             	add    esp,0x20
c00146fe:	85 c0                	test   eax,eax
c0014700:	75 06                	jne    c0014708 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014702:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014706:	74 13                	je     c001471b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	53                   	push   ebx
c001470c:	e8 f8 51 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	31 c0                	xor    eax,eax
c0014716:	e9 7c 01 00 00       	jmp    c0014897 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001471b:	fa                   	cli    
c001471c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014722:	e8 bb 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014727:	6a 07                	push   0x7
c0014729:	53                   	push   ebx
c001472a:	50                   	push   eax
c001472b:	89 c7                	mov    edi,eax
c001472d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014732:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014735:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001473b:	e8 be 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014740:	83 c4 0c             	add    esp,0xc
c0014743:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001474a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014750:	6a 00                	push   0x0
c0014752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014757:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001475a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014760:	e8 ff 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014765:	58                   	pop    eax
c0014766:	5a                   	pop    edx
c0014767:	68 07 0c 00 00       	push   0xc07
c001476c:	55                   	push   ebp
c001476d:	57                   	push   edi
c001476e:	89 df                	mov    edi,ebx
c0014770:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014777:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001477d:	6a 00                	push   0x0
c001477f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014784:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014787:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001478d:	e8 d0 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014792:	b9 00 10 00 00       	mov    ecx,0x1000
c0014797:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014799:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001479e:	83 c4 20             	add    esp,0x20
c00147a1:	48                   	dec    eax
c00147a2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00147a7:	85 c0                	test   eax,eax
c00147a9:	75 01                	jne    c00147ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00147ab:	fb                   	sti    
c00147ac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147b0:	81 c5 00 10 00 00    	add    ebp,0x1000
c00147b6:	e9 f0 fe ff ff       	jmp    c00146ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00147bb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147c2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147c9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147cf:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147d5:	0f 86 ae 00 00 00    	jbe    c0014889 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00147db:	fa                   	cli    
c00147dc:	51                   	push   ecx
c00147dd:	31 ff                	xor    edi,edi
c00147df:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147e6:	c1 ee 0c             	shr    esi,0xc
c00147e9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147f5:	6a 00                	push   0x0
c00147f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147ff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014805:	e8 5a 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	e8 d0 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014812:	47                   	inc    edi
c0014813:	6a 07                	push   0x7
c0014815:	53                   	push   ebx
c0014816:	50                   	push   eax
c0014817:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001481b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014821:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014824:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001482a:	e8 cf 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001482f:	58                   	pop    eax
c0014830:	5a                   	pop    edx
c0014831:	68 07 0c 00 00       	push   0xc07
c0014836:	55                   	push   ebp
c0014837:	81 c5 00 10 00 00    	add    ebp,0x1000
c001483d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014841:	50                   	push   eax
c0014842:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014849:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001484f:	6a 00                	push   0x0
c0014851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014856:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014859:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001485f:	e8 fe 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014864:	83 c4 1c             	add    esp,0x1c
c0014867:	68 00 10 00 00       	push   0x1000
c001486c:	6a 00                	push   0x0
c001486e:	53                   	push   ebx
c001486f:	e8 7c bc fe ff       	call   c00004f0 <memset>
c0014874:	83 c4 10             	add    esp,0x10
c0014877:	39 fe                	cmp    esi,edi
c0014879:	77 92                	ja     c001480d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001487b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014880:	48                   	dec    eax
c0014881:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014886:	75 01                	jne    c0014889 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014888:	fb                   	sti    
c0014889:	83 ec 0c             	sub    esp,0xc
c001488c:	53                   	push   ebx
c001488d:	e8 77 50 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014892:	83 c4 10             	add    esp,0x10
c0014895:	b0 01                	mov    al,0x1
c0014897:	81 c4 2c 10 00 00    	add    esp,0x102c
c001489d:	5b                   	pop    ebx
c001489e:	5e                   	pop    esi
c001489f:	5f                   	pop    edi
c00148a0:	5d                   	pop    ebp
c00148a1:	c3                   	ret    

c00148a2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00148a2:	55                   	push   ebp
c00148a3:	57                   	push   edi
c00148a4:	56                   	push   esi
c00148a5:	53                   	push   ebx
c00148a6:	83 ec 48             	sub    esp,0x48
c00148a9:	68 14 01 00 00       	push   0x114
c00148ae:	e8 20 32 ff ff       	call   c0007ad3 <malloc>
c00148b3:	83 c4 0c             	add    esp,0xc
c00148b6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00148ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00148be:	89 c7                	mov    edi,eax
c00148c0:	50                   	push   eax
c00148c1:	e8 1c 72 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c00148c6:	58                   	pop    eax
c00148c7:	5a                   	pop    edx
c00148c8:	6a 01                	push   0x1
c00148ca:	57                   	push   edi
c00148cb:	e8 30 72 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c00148d0:	83 c4 10             	add    esp,0x10
c00148d3:	85 c0                	test   eax,eax
c00148d5:	0f 85 4c 01 00 00    	jne    c0014a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148db:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00148e3:	83 ec 0c             	sub    esp,0xc
c00148e6:	6a 34                	push   0x34
c00148e8:	e8 e6 31 ff ff       	call   c0007ad3 <malloc>
c00148ed:	89 c3                	mov    ebx,eax
c00148ef:	58                   	pop    eax
c00148f0:	8b 07                	mov    eax,DWORD PTR [edi]
c00148f2:	8d 74 24 38          	lea    esi,[esp+0x38]
c00148f6:	56                   	push   esi
c00148f7:	53                   	push   ebx
c00148f8:	6a 00                	push   0x0
c00148fa:	6a 34                	push   0x34
c00148fc:	57                   	push   edi
c00148fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014900:	83 c4 20             	add    esp,0x20
c0014903:	85 c0                	test   eax,eax
c0014905:	0f 85 1c 01 00 00    	jne    c0014a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001490b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014911:	0f 85 10 01 00 00    	jne    c0014a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014917:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001491a:	85 c0                	test   eax,eax
c001491c:	0f 84 05 01 00 00    	je     c0014a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014922:	31 d2                	xor    edx,edx
c0014924:	55                   	push   ebp
c0014925:	52                   	push   edx
c0014926:	50                   	push   eax
c0014927:	57                   	push   edi
c0014928:	e8 91 72 ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	85 c0                	test   eax,eax
c0014932:	0f 85 ef 00 00 00    	jne    c0014a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014938:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001493b:	83 ec 0c             	sub    esp,0xc
c001493e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014942:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014946:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001494a:	0f af c2             	imul   eax,edx
c001494d:	50                   	push   eax
c001494e:	e8 80 31 ff ff       	call   c0007ad3 <malloc>
c0014953:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014955:	89 34 24             	mov    DWORD PTR [esp],esi
c0014958:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001495c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014960:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014964:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014968:	0f af c2             	imul   eax,edx
c001496b:	99                   	cdq    
c001496c:	52                   	push   edx
c001496d:	50                   	push   eax
c001496e:	57                   	push   edi
c001496f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014972:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014975:	83 c4 20             	add    esp,0x20
c0014978:	85 c0                	test   eax,eax
c001497a:	0f 84 a7 00 00 00    	je     c0014a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014980:	31 d2                	xor    edx,edx
c0014982:	51                   	push   ecx
c0014983:	52                   	push   edx
c0014984:	50                   	push   eax
c0014985:	57                   	push   edi
c0014986:	e8 33 72 ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c001498b:	83 c4 10             	add    esp,0x10
c001498e:	85 c0                	test   eax,eax
c0014990:	0f 85 91 00 00 00    	jne    c0014a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014996:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149a1:	0f af c2             	imul   eax,edx
c00149a4:	50                   	push   eax
c00149a5:	e8 29 31 ff ff       	call   c0007ad3 <malloc>
c00149aa:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00149ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00149af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149b7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149bb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149bf:	0f af c2             	imul   eax,edx
c00149c2:	99                   	cdq    
c00149c3:	52                   	push   edx
c00149c4:	50                   	push   eax
c00149c5:	57                   	push   edi
c00149c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149c9:	83 c4 20             	add    esp,0x20
c00149cc:	31 c9                	xor    ecx,ecx
c00149ce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00149d6:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00149da:	0f b7 e9             	movzx  ebp,cx
c00149dd:	0f 83 86 00 00 00    	jae    c0014a69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00149e3:	c1 e5 05             	shl    ebp,0x5
c00149e6:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00149ea:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00149ee:	75 73                	jne    c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00149f0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00149f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f7:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00149fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149fe:	52                   	push   edx
c00149ff:	31 d2                	xor    edx,edx
c0014a01:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a04:	52                   	push   edx
c0014a05:	50                   	push   eax
c0014a06:	57                   	push   edi
c0014a07:	e8 b2 71 ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014a0c:	83 c4 10             	add    esp,0x10
c0014a0f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a13:	85 c0                	test   eax,eax
c0014a15:	74 17                	je     c0014a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014a17:	83 ec 0c             	sub    esp,0xc
c0014a1a:	68 b5 26 02 c0       	push   0xc00226b5
c0014a1f:	e8 e6 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014a24:	83 c4 10             	add    esp,0x10
c0014a27:	31 c0                	xor    eax,eax
c0014a29:	e9 8b 00 00 00       	jmp    c0014ab9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014a2e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a32:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014a35:	83 ec 0c             	sub    esp,0xc
c0014a38:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014a3b:	50                   	push   eax
c0014a3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a40:	56                   	push   esi
c0014a41:	57                   	push   edi
c0014a42:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a46:	e8 d0 fb ff ff       	call   c001461b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a4b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014a4f:	83 c4 20             	add    esp,0x20
c0014a52:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014a56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a5a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014a5f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a63:	41                   	inc    ecx
c0014a64:	e9 6d ff ff ff       	jmp    c00149d6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014a69:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a6d:	83 ec 0c             	sub    esp,0xc
c0014a70:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014a74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a78:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014a7e:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014a84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a89:	05 00 10 00 00       	add    eax,0x1000
c0014a8e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014a91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a95:	e8 49 30 ff ff       	call   c0007ae3 <free>
c0014a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a9d:	e8 41 30 ff ff       	call   c0007ae3 <free>
c0014aa2:	58                   	pop    eax
c0014aa3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014aa7:	e8 37 30 ff ff       	call   c0007ae3 <free>
c0014aac:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014aaf:	e8 aa 70 ff ff       	call   c000bb5e <File::close()>
c0014ab4:	83 c4 10             	add    esp,0x10
c0014ab7:	b0 01                	mov    al,0x1
c0014ab9:	83 c4 3c             	add    esp,0x3c
c0014abc:	5b                   	pop    ebx
c0014abd:	5e                   	pop    esi
c0014abe:	5f                   	pop    edi
c0014abf:	5d                   	pop    ebp
c0014ac0:	c3                   	ret    

c0014ac1 <Thr::runtimeReferenceHelper()>:
c0014ac1:	83 ec 18             	sub    esp,0x18
c0014ac4:	68 bd 26 02 c0       	push   0xc00226bd
c0014ac9:	e8 3c 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014ace:	fa                   	cli    
c0014acf:	83 c4 10             	add    esp,0x10
c0014ad2:	eb fe                	jmp    c0014ad2 <Thr::runtimeReferenceHelper()+0x11>

c0014ad4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014ad4:	57                   	push   edi
c0014ad5:	56                   	push   esi
c0014ad6:	53                   	push   ebx
c0014ad7:	31 db                	xor    ebx,ebx
c0014ad9:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014adf:	7e 3c                	jle    c0014b1d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014ae1:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014ae8:	31 ff                	xor    edi,edi
c0014aea:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014af1:	7e 27                	jle    c0014b1a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014af3:	50                   	push   eax
c0014af4:	50                   	push   eax
c0014af5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014af9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014afb:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b02:	50                   	push   eax
c0014b03:	e8 78 bc fe ff       	call   c0000780 <strcmp>
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	85 c0                	test   eax,eax
c0014b0d:	75 05                	jne    c0014b14 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b12:	eb 0b                	jmp    c0014b1f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b14:	83 c6 10             	add    esi,0x10
c0014b17:	47                   	inc    edi
c0014b18:	eb d0                	jmp    c0014aea <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b1a:	43                   	inc    ebx
c0014b1b:	eb bc                	jmp    c0014ad9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b1d:	31 c0                	xor    eax,eax
c0014b1f:	5b                   	pop    ebx
c0014b20:	5e                   	pop    esi
c0014b21:	5f                   	pop    edi
c0014b22:	c3                   	ret    

c0014b23 <Thr::loadKernelSymbolTable(char const*)>:
c0014b23:	55                   	push   ebp
c0014b24:	57                   	push   edi
c0014b25:	56                   	push   esi
c0014b26:	53                   	push   ebx
c0014b27:	83 ec 68             	sub    esp,0x68
c0014b2a:	68 14 01 00 00       	push   0x114
c0014b2f:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014b35:	e8 99 2f ff ff       	call   c0007ad3 <malloc>
c0014b3a:	83 c4 0c             	add    esp,0xc
c0014b3d:	56                   	push   esi
c0014b3e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b42:	89 c3                	mov    ebx,eax
c0014b44:	50                   	push   eax
c0014b45:	e8 98 6f ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0014b4a:	5e                   	pop    esi
c0014b4b:	5f                   	pop    edi
c0014b4c:	6a 01                	push   0x1
c0014b4e:	53                   	push   ebx
c0014b4f:	e8 ac 6f ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	85 c0                	test   eax,eax
c0014b59:	74 0a                	je     c0014b65 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b5b:	83 ec 0c             	sub    esp,0xc
c0014b5e:	68 df 26 02 c0       	push   0xc00226df
c0014b63:	eb 34                	jmp    c0014b99 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014b65:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014b6d:	83 ec 0c             	sub    esp,0xc
c0014b70:	6a 34                	push   0x34
c0014b72:	e8 5c 2f ff ff       	call   c0007ad3 <malloc>
c0014b77:	59                   	pop    ecx
c0014b78:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014b7c:	89 c7                	mov    edi,eax
c0014b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b80:	56                   	push   esi
c0014b81:	57                   	push   edi
c0014b82:	6a 00                	push   0x0
c0014b84:	6a 34                	push   0x34
c0014b86:	53                   	push   ebx
c0014b87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b8a:	83 c4 20             	add    esp,0x20
c0014b8d:	85 c0                	test   eax,eax
c0014b8f:	74 17                	je     c0014ba8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014b91:	83 ec 0c             	sub    esp,0xc
c0014b94:	68 f6 26 02 c0       	push   0xc00226f6
c0014b99:	e8 89 c9 ff ff       	call   c0011527 <KePanic(char const*)>
c0014b9e:	83 c4 10             	add    esp,0x10
c0014ba1:	31 c0                	xor    eax,eax
c0014ba3:	e9 31 02 00 00       	jmp    c0014dd9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014ba8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014bae:	75 e1                	jne    c0014b91 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bb0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014bb3:	85 c0                	test   eax,eax
c0014bb5:	74 da                	je     c0014b91 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bb7:	52                   	push   edx
c0014bb8:	31 d2                	xor    edx,edx
c0014bba:	52                   	push   edx
c0014bbb:	50                   	push   eax
c0014bbc:	53                   	push   ebx
c0014bbd:	e8 fc 6f ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	85 c0                	test   eax,eax
c0014bc7:	75 c8                	jne    c0014b91 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bc9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bcd:	83 ec 0c             	sub    esp,0xc
c0014bd0:	31 ed                	xor    ebp,ebp
c0014bd2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bd6:	0f af c2             	imul   eax,edx
c0014bd9:	50                   	push   eax
c0014bda:	e8 f4 2e ff ff       	call   c0007ad3 <malloc>
c0014bdf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014be1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014be4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014be8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bf0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bf4:	0f af c2             	imul   eax,edx
c0014bf7:	99                   	cdq    
c0014bf8:	52                   	push   edx
c0014bf9:	50                   	push   eax
c0014bfa:	53                   	push   ebx
c0014bfb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bfe:	83 c4 20             	add    esp,0x20
c0014c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c09:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c21:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014c25:	0f b7 f5             	movzx  esi,bp
c0014c28:	0f 83 a7 00 00 00    	jae    c0014cd5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c2e:	6b f6 28             	imul   esi,esi,0x28
c0014c31:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c35:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c3c:	50                   	push   eax
c0014c3d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c45:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c47:	6b c0 28             	imul   eax,eax,0x28
c0014c4a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c4e:	89 d0                	mov    eax,edx
c0014c50:	31 d2                	xor    edx,edx
c0014c52:	52                   	push   edx
c0014c53:	50                   	push   eax
c0014c54:	53                   	push   ebx
c0014c55:	e8 64 6f ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014c5a:	83 c4 0c             	add    esp,0xc
c0014c5d:	6a 20                	push   0x20
c0014c5f:	6a 00                	push   0x0
c0014c61:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c65:	52                   	push   edx
c0014c66:	e8 85 b8 fe ff       	call   c00004f0 <memset>
c0014c6b:	58                   	pop    eax
c0014c6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c6e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014c72:	51                   	push   ecx
c0014c73:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014c77:	52                   	push   edx
c0014c78:	6a 00                	push   0x0
c0014c7a:	6a 1f                	push   0x1f
c0014c7c:	53                   	push   ebx
c0014c7d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c80:	83 c4 18             	add    esp,0x18
c0014c83:	68 0d 27 02 c0       	push   0xc002270d
c0014c88:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c8c:	52                   	push   edx
c0014c8d:	e8 ee ba fe ff       	call   c0000780 <strcmp>
c0014c92:	83 c4 10             	add    esp,0x10
c0014c95:	85 c0                	test   eax,eax
c0014c97:	75 0f                	jne    c0014ca8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014c99:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ca0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ca8:	50                   	push   eax
c0014ca9:	50                   	push   eax
c0014caa:	68 15 27 02 c0       	push   0xc0022715
c0014caf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014cb3:	50                   	push   eax
c0014cb4:	e8 c7 ba fe ff       	call   c0000780 <strcmp>
c0014cb9:	83 c4 10             	add    esp,0x10
c0014cbc:	85 c0                	test   eax,eax
c0014cbe:	75 0f                	jne    c0014ccf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014cc0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ccb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ccf:	45                   	inc    ebp
c0014cd0:	e9 4c ff ff ff       	jmp    c0014c21 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014cd5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014cda:	75 10                	jne    c0014cec <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014cdc:	83 ec 0c             	sub    esp,0xc
c0014cdf:	68 1d 27 02 c0       	push   0xc002271d
c0014ce4:	e8 3e c8 ff ff       	call   c0011527 <KePanic(char const*)>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cf1:	75 10                	jne    c0014d03 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014cf3:	83 ec 0c             	sub    esp,0xc
c0014cf6:	68 1d 27 02 c0       	push   0xc002271d
c0014cfb:	e8 27 c8 ff ff       	call   c0011527 <KePanic(char const*)>
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	50                   	push   eax
c0014d04:	31 d2                	xor    edx,edx
c0014d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d0a:	52                   	push   edx
c0014d0b:	50                   	push   eax
c0014d0c:	53                   	push   ebx
c0014d0d:	e8 ac 6e ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014d12:	5a                   	pop    edx
c0014d13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d17:	e8 b7 2d ff ff       	call   c0007ad3 <malloc>
c0014d1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d20:	31 c9                	xor    ecx,ecx
c0014d22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d28:	5e                   	pop    esi
c0014d29:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d2d:	55                   	push   ebp
c0014d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d32:	51                   	push   ecx
c0014d33:	52                   	push   edx
c0014d34:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d38:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014d3c:	53                   	push   ebx
c0014d3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d40:	83 c4 14             	add    esp,0x14
c0014d43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d47:	e8 87 2d ff ff       	call   c0007ad3 <malloc>
c0014d4c:	89 c6                	mov    esi,eax
c0014d4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d53:	56                   	push   esi
c0014d54:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d58:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d5c:	51                   	push   ecx
c0014d5d:	52                   	push   edx
c0014d5e:	53                   	push   ebx
c0014d5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d66:	83 c4 1c             	add    esp,0x1c
c0014d69:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014d6f:	c1 e8 04             	shr    eax,0x4
c0014d72:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d7d:	31 d2                	xor    edx,edx
c0014d7f:	52                   	push   edx
c0014d80:	50                   	push   eax
c0014d81:	53                   	push   ebx
c0014d82:	e8 37 6e ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014d87:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d89:	31 d2                	xor    edx,edx
c0014d8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d8e:	56                   	push   esi
c0014d8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d93:	52                   	push   edx
c0014d94:	50                   	push   eax
c0014d95:	53                   	push   ebx
c0014d96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d99:	83 c4 14             	add    esp,0x14
c0014d9c:	53                   	push   ebx
c0014d9d:	e8 bc 6d ff ff       	call   c000bb5e <File::close()>
c0014da2:	5d                   	pop    ebp
c0014da3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014da7:	e8 37 2d ff ff       	call   c0007ae3 <free>
c0014dac:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014daf:	e8 2f 2d ff ff       	call   c0007ae3 <free>
c0014db4:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014db9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014dbd:	83 c4 10             	add    esp,0x10
c0014dc0:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dca:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014dd1:	b0 01                	mov    al,0x1
c0014dd3:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014dd9:	83 c4 5c             	add    esp,0x5c
c0014ddc:	5b                   	pop    ebx
c0014ddd:	5e                   	pop    esi
c0014dde:	5f                   	pop    edi
c0014ddf:	5d                   	pop    ebp
c0014de0:	c3                   	ret    

c0014de1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014de1:	55                   	push   ebp
c0014de2:	57                   	push   edi
c0014de3:	56                   	push   esi
c0014de4:	53                   	push   ebx
c0014de5:	81 ec 68 03 00 00    	sub    esp,0x368
c0014deb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014df2:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014df8:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014dfc:	68 14 01 00 00       	push   0x114
c0014e01:	e8 cd 2c ff ff       	call   c0007ad3 <malloc>
c0014e06:	83 c4 0c             	add    esp,0xc
c0014e09:	56                   	push   esi
c0014e0a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e11:	50                   	push   eax
c0014e12:	89 c3                	mov    ebx,eax
c0014e14:	e8 c9 6c ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0014e19:	5f                   	pop    edi
c0014e1a:	5d                   	pop    ebp
c0014e1b:	6a 01                	push   0x1
c0014e1d:	53                   	push   ebx
c0014e1e:	e8 dd 6c ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	85 c0                	test   eax,eax
c0014e28:	0f 85 b3 06 00 00    	jne    c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e2e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e36:	83 ec 0c             	sub    esp,0xc
c0014e39:	6a 34                	push   0x34
c0014e3b:	e8 93 2c ff ff       	call   c0007ad3 <malloc>
c0014e40:	5e                   	pop    esi
c0014e41:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014e45:	89 c5                	mov    ebp,eax
c0014e47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e49:	56                   	push   esi
c0014e4a:	55                   	push   ebp
c0014e4b:	6a 00                	push   0x0
c0014e4d:	6a 34                	push   0x34
c0014e4f:	53                   	push   ebx
c0014e50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e53:	83 c4 20             	add    esp,0x20
c0014e56:	85 c0                	test   eax,eax
c0014e58:	0f 85 83 06 00 00    	jne    c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e5e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014e65:	0f 85 76 06 00 00    	jne    c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e6b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014e6e:	85 c0                	test   eax,eax
c0014e70:	0f 84 6b 06 00 00    	je     c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e76:	31 d2                	xor    edx,edx
c0014e78:	51                   	push   ecx
c0014e79:	52                   	push   edx
c0014e7a:	50                   	push   eax
c0014e7b:	53                   	push   ebx
c0014e7c:	e8 3d 6d ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014e81:	83 c4 10             	add    esp,0x10
c0014e84:	85 c0                	test   eax,eax
c0014e86:	0f 85 55 06 00 00    	jne    c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e8c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014e8f:	83 ec 0c             	sub    esp,0xc
c0014e92:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014e96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e9a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e9e:	0f af c2             	imul   eax,edx
c0014ea1:	50                   	push   eax
c0014ea2:	e8 2c 2c ff ff       	call   c0007ad3 <malloc>
c0014ea7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ea9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014eac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014eb4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014eb8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ebc:	0f af c2             	imul   eax,edx
c0014ebf:	99                   	cdq    
c0014ec0:	52                   	push   edx
c0014ec1:	50                   	push   eax
c0014ec2:	53                   	push   ebx
c0014ec3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ec6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014ec9:	83 c4 20             	add    esp,0x20
c0014ecc:	85 c0                	test   eax,eax
c0014ece:	0f 84 0d 06 00 00    	je     c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ed4:	52                   	push   edx
c0014ed5:	31 d2                	xor    edx,edx
c0014ed7:	52                   	push   edx
c0014ed8:	50                   	push   eax
c0014ed9:	53                   	push   ebx
c0014eda:	e8 df 6c ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014edf:	83 c4 10             	add    esp,0x10
c0014ee2:	85 c0                	test   eax,eax
c0014ee4:	0f 85 f7 05 00 00    	jne    c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014eea:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014eee:	83 ec 0c             	sub    esp,0xc
c0014ef1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ef5:	0f af c2             	imul   eax,edx
c0014ef8:	50                   	push   eax
c0014ef9:	e8 d5 2b ff ff       	call   c0007ad3 <malloc>
c0014efe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f00:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f0b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f0f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f13:	0f af c2             	imul   eax,edx
c0014f16:	99                   	cdq    
c0014f17:	52                   	push   edx
c0014f18:	50                   	push   eax
c0014f19:	53                   	push   ebx
c0014f1a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f1d:	83 c4 20             	add    esp,0x20
c0014f20:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014f26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014f29:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014f2d:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014f31:	73 78                	jae    c0014fab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014f33:	c1 e7 05             	shl    edi,0x5
c0014f36:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014f3a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014f3d:	75 63                	jne    c0014fa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014f3f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014f42:	31 d2                	xor    edx,edx
c0014f44:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014f47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f4b:	50                   	push   eax
c0014f4c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014f4f:	52                   	push   edx
c0014f50:	50                   	push   eax
c0014f51:	53                   	push   ebx
c0014f52:	e8 67 6c ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0014f57:	83 c4 10             	add    esp,0x10
c0014f5a:	85 c0                	test   eax,eax
c0014f5c:	0f 85 7f 05 00 00    	jne    c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f62:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f69:	83 ec 0c             	sub    esp,0xc
c0014f6c:	31 d2                	xor    edx,edx
c0014f6e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014f72:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f74:	01 c6                	add    esi,eax
c0014f76:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f7d:	50                   	push   eax
c0014f7e:	56                   	push   esi
c0014f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f83:	52                   	push   edx
c0014f84:	50                   	push   eax
c0014f85:	53                   	push   ebx
c0014f86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f89:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014f8c:	83 c4 1c             	add    esp,0x1c
c0014f8f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014f92:	50                   	push   eax
c0014f93:	6a 00                	push   0x0
c0014f95:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014f99:	56                   	push   esi
c0014f9a:	e8 51 b5 fe ff       	call   c00004f0 <memset>
c0014f9f:	83 c4 10             	add    esp,0x10
c0014fa2:	66 ff 04 24          	inc    WORD PTR [esp]
c0014fa6:	e9 7b ff ff ff       	jmp    c0014f26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014fab:	50                   	push   eax
c0014fac:	68 00 01 00 00       	push   0x100
c0014fb1:	6a 00                	push   0x0
c0014fb3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014fb7:	50                   	push   eax
c0014fb8:	e8 33 b5 fe ff       	call   c00004f0 <memset>
c0014fbd:	83 c4 0c             	add    esp,0xc
c0014fc0:	68 00 01 00 00       	push   0x100
c0014fc5:	6a 00                	push   0x0
c0014fc7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014fce:	50                   	push   eax
c0014fcf:	e8 1c b5 fe ff       	call   c00004f0 <memset>
c0014fd4:	83 c4 10             	add    esp,0x10
c0014fd7:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014fde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014fe5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014fed:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014ff5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ffd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015005:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015009:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001500d:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015012:	0f 83 16 01 00 00    	jae    c001512e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015018:	6b ff 28             	imul   edi,edi,0x28
c001501b:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001501f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015022:	51                   	push   ecx
c0015023:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015027:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001502b:	8b 07                	mov    eax,DWORD PTR [edi]
c001502d:	6b d2 28             	imul   edx,edx,0x28
c0015030:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015034:	31 d2                	xor    edx,edx
c0015036:	52                   	push   edx
c0015037:	50                   	push   eax
c0015038:	53                   	push   ebx
c0015039:	e8 80 6b ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c001503e:	83 c4 0c             	add    esp,0xc
c0015041:	6a 20                	push   0x20
c0015043:	6a 00                	push   0x0
c0015045:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001504c:	51                   	push   ecx
c001504d:	e8 9e b4 fe ff       	call   c00004f0 <memset>
c0015052:	58                   	pop    eax
c0015053:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015055:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015059:	52                   	push   edx
c001505a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015061:	51                   	push   ecx
c0015062:	6a 00                	push   0x0
c0015064:	6a 1f                	push   0x1f
c0015066:	53                   	push   ebx
c0015067:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001506a:	83 c4 1c             	add    esp,0x1c
c001506d:	6a 09                	push   0x9
c001506f:	68 37 27 02 c0       	push   0xc0022737
c0015074:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001507b:	51                   	push   ecx
c001507c:	e8 ff b2 fe ff       	call   c0000380 <memcmp>
c0015081:	83 c4 10             	add    esp,0x10
c0015084:	85 c0                	test   eax,eax
c0015086:	75 1a                	jne    c00150a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015088:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001508b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001508e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015092:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015095:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001509c:	89 d0                	mov    eax,edx
c001509e:	40                   	inc    eax
c001509f:	89 04 24             	mov    DWORD PTR [esp],eax
c00150a2:	52                   	push   edx
c00150a3:	6a 09                	push   0x9
c00150a5:	68 41 27 02 c0       	push   0xc0022741
c00150aa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150b1:	50                   	push   eax
c00150b2:	e8 c9 b2 fe ff       	call   c0000380 <memcmp>
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	85 c0                	test   eax,eax
c00150bc:	75 1a                	jne    c00150d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00150be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150c1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00150c4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150c8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150cb:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00150d2:	89 c8                	mov    eax,ecx
c00150d4:	40                   	inc    eax
c00150d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00150d8:	50                   	push   eax
c00150d9:	50                   	push   eax
c00150da:	68 0d 27 02 c0       	push   0xc002270d
c00150df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150e6:	50                   	push   eax
c00150e7:	e8 94 b6 fe ff       	call   c0000780 <strcmp>
c00150ec:	83 c4 10             	add    esp,0x10
c00150ef:	85 c0                	test   eax,eax
c00150f1:	75 0b                	jne    c00150fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00150f3:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00150f7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150fe:	50                   	push   eax
c00150ff:	50                   	push   eax
c0015100:	68 15 27 02 c0       	push   0xc0022715
c0015105:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001510c:	50                   	push   eax
c001510d:	e8 6e b6 fe ff       	call   c0000780 <strcmp>
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	85 c0                	test   eax,eax
c0015117:	75 0b                	jne    c0015124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015119:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001511d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015124:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015129:	e9 d7 fe ff ff       	jmp    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001512e:	50                   	push   eax
c001512f:	31 d2                	xor    edx,edx
c0015131:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015135:	52                   	push   edx
c0015136:	50                   	push   eax
c0015137:	53                   	push   ebx
c0015138:	e8 81 6a ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c001513d:	58                   	pop    eax
c001513e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015142:	e8 8c 29 ff ff       	call   c0007ad3 <malloc>
c0015147:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015149:	31 d2                	xor    edx,edx
c001514b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001514f:	58                   	pop    eax
c0015150:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015154:	56                   	push   esi
c0015155:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001515d:	52                   	push   edx
c001515e:	50                   	push   eax
c001515f:	53                   	push   ebx
c0015160:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015163:	83 c4 14             	add    esp,0x14
c0015166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001516a:	e8 64 29 ff ff       	call   c0007ad3 <malloc>
c001516f:	31 d2                	xor    edx,edx
c0015171:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015175:	83 c4 0c             	add    esp,0xc
c0015178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001517c:	52                   	push   edx
c001517d:	50                   	push   eax
c001517e:	53                   	push   ebx
c001517f:	e8 3a 6a ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c0015184:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015186:	31 d2                	xor    edx,edx
c0015188:	89 34 24             	mov    DWORD PTR [esp],esi
c001518b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001518f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015193:	52                   	push   edx
c0015194:	50                   	push   eax
c0015195:	53                   	push   ebx
c0015196:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015199:	83 c4 20             	add    esp,0x20
c001519c:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00151a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00151a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00151ad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00151b1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00151b4:	0f 84 2b 03 00 00    	je     c00154e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00151ba:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00151c1:	31 d2                	xor    edx,edx
c00151c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151c7:	c1 e8 03             	shr    eax,0x3
c00151ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00151ce:	51                   	push   ecx
c00151cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151d3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00151d7:	52                   	push   edx
c00151d8:	50                   	push   eax
c00151d9:	53                   	push   ebx
c00151da:	e8 df 69 ff ff       	call   c000bbbe <File::seek(unsigned long long)>
c00151df:	5e                   	pop    esi
c00151e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151e4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00151eb:	e8 e3 28 ff ff       	call   c0007ad3 <malloc>
c00151f0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151f2:	31 d2                	xor    edx,edx
c00151f4:	89 c7                	mov    edi,eax
c00151f6:	58                   	pop    eax
c00151f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00151fb:	50                   	push   eax
c00151fc:	57                   	push   edi
c00151fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015201:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015208:	52                   	push   edx
c0015209:	50                   	push   eax
c001520a:	53                   	push   ebx
c001520b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001520e:	83 c4 20             	add    esp,0x20
c0015211:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015219:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001521d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015221:	0f 8d a5 02 00 00    	jge    c00154cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015227:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001522c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015230:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015233:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015237:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001523b:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001523f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015243:	c1 e8 08             	shr    eax,0x8
c0015246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001524a:	89 c2                	mov    edx,eax
c001524c:	c1 e2 04             	shl    edx,0x4
c001524f:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015253:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015256:	85 f6                	test   esi,esi
c0015258:	0f 85 cf 00 00 00    	jne    c001532d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001525e:	83 ec 0c             	sub    esp,0xc
c0015261:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015269:	03 02                	add    eax,DWORD PTR [edx]
c001526b:	50                   	push   eax
c001526c:	e8 63 f8 ff ff       	call   c0014ad4 <Thr::getAddressOfKernelSymbol(char const*)>
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015278:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001527d:	85 c0                	test   eax,eax
c001527f:	89 c6                	mov    esi,eax
c0015281:	0f 85 a6 00 00 00    	jne    c001532d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015287:	83 ec 0c             	sub    esp,0xc
c001528a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001528e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015292:	03 02                	add    eax,DWORD PTR [edx]
c0015294:	50                   	push   eax
c0015295:	e8 76 c4 ff ff       	call   c0011710 <KeResolveCompatibilitySymbol(char*)>
c001529a:	83 c4 10             	add    esp,0x10
c001529d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152a1:	85 c0                	test   eax,eax
c00152a3:	89 c6                	mov    esi,eax
c00152a5:	0f 85 82 00 00 00    	jne    c001532d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152ab:	50                   	push   eax
c00152ac:	50                   	push   eax
c00152ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152b1:	03 02                	add    eax,DWORD PTR [edx]
c00152b3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00152b7:	50                   	push   eax
c00152b8:	68 4b 27 02 c0       	push   0xc002274b
c00152bd:	e8 48 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152c2:	58                   	pop    eax
c00152c3:	5a                   	pop    edx
c00152c4:	68 65 27 02 c0       	push   0xc0022765
c00152c9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152d0:	51                   	push   ecx
c00152d1:	e8 7a b3 fe ff       	call   c0000650 <strcpy>
c00152d6:	59                   	pop    ecx
c00152d7:	58                   	pop    eax
c00152d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152e0:	03 02                	add    eax,DWORD PTR [edx]
c00152e2:	50                   	push   eax
c00152e3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152ea:	51                   	push   ecx
c00152eb:	e8 80 b5 fe ff       	call   c0000870 <strcat>
c00152f0:	58                   	pop    eax
c00152f1:	5a                   	pop    edx
c00152f2:	68 fb 27 02 c0       	push   0xc00227fb
c00152f7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152fe:	51                   	push   ecx
c00152ff:	e8 6c b5 fe ff       	call   c0000870 <strcat>
c0015304:	83 c4 10             	add    esp,0x10
c0015307:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001530c:	0f 84 77 01 00 00    	je     c0015489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015312:	83 ec 0c             	sub    esp,0xc
c0015315:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001531c:	51                   	push   ecx
c001531d:	e8 05 c2 ff ff       	call   c0011527 <KePanic(char const*)>
c0015322:	83 c4 10             	add    esp,0x10
c0015325:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015329:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001532d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015332:	83 f8 01             	cmp    eax,0x1
c0015335:	0f 85 9b 00 00 00    	jne    c00153d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001533b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001533f:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015346:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001534a:	01 d0                	add    eax,edx
c001534c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015354:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015358:	0f 94 c0             	sete   al
c001535b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015363:	0f 94 c1             	sete   cl
c0015366:	09 c1                	or     ecx,eax
c0015368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001536c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015371:	0f b6 c9             	movzx  ecx,cl
c0015374:	8b 00                	mov    eax,DWORD PTR [eax]
c0015376:	74 41                	je     c00153b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015378:	8d 14 06             	lea    edx,[esi+eax*1]
c001537b:	85 c9                	test   ecx,ecx
c001537d:	75 15                	jne    c0015394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001537f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015383:	66 83 f8 0c          	cmp    ax,0xc
c0015387:	76 05                	jbe    c001538e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015389:	b8 0c 00 00 00       	mov    eax,0xc
c001538e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015392:	76 37                	jbe    c00153cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015394:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015399:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001539d:	0f 84 e6 00 00 00    	je     c0015489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153a3:	83 ec 0c             	sub    esp,0xc
c00153a6:	68 7c 27 02 c0       	push   0xc002277c
c00153ab:	e8 77 c1 ff ff       	call   c0011527 <KePanic(char const*)>
c00153b0:	83 c4 10             	add    esp,0x10
c00153b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153b7:	eb 12                	jmp    c00153cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153b9:	01 c2                	add    edx,eax
c00153bb:	85 c9                	test   ecx,ecx
c00153bd:	75 0c                	jne    c00153cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153bf:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153c3:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153c7:	77 02                	ja     c00153cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153c9:	01 f2                	add    edx,esi
c00153cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153cf:	89 10                	mov    DWORD PTR [eax],edx
c00153d1:	e9 ed 00 00 00       	jmp    c00154c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00153d6:	83 f8 02             	cmp    eax,0x2
c00153d9:	0f 85 81 00 00 00    	jne    c0015460 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00153df:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00153e6:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00153ea:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00153ee:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00153f6:	74 21                	je     c0015419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00153f8:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015400:	74 17                	je     c0015419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015402:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015406:	ba 0a 00 00 00       	mov    edx,0xa
c001540b:	83 f9 0e             	cmp    ecx,0xe
c001540e:	77 03                	ja     c0015413 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015410:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015413:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015417:	76 1f                	jbe    c0015438 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015419:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001541e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015422:	74 65                	je     c0015489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015424:	83 ec 0c             	sub    esp,0xc
c0015427:	68 98 27 02 c0       	push   0xc0022798
c001542c:	e8 f6 c0 ff ff       	call   c0011527 <KePanic(char const*)>
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015438:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001543d:	8b 10                	mov    edx,DWORD PTR [eax]
c001543f:	74 15                	je     c0015456 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015441:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015445:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001544c:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015450:	01 d1                	add    ecx,edx
c0015452:	01 ce                	add    esi,ecx
c0015454:	eb 06                	jmp    c001545c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015456:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001545a:	01 d6                	add    esi,edx
c001545c:	89 30                	mov    DWORD PTR [eax],esi
c001545e:	eb 63                	jmp    c00154c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015460:	56                   	push   esi
c0015461:	56                   	push   esi
c0015462:	50                   	push   eax
c0015463:	68 b4 27 02 c0       	push   0xc00227b4
c0015468:	e8 9d 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015475:	74 12                	je     c0015489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015477:	83 ec 0c             	sub    esp,0xc
c001547a:	68 bf 27 02 c0       	push   0xc00227bf
c001547f:	e8 a3 c0 ff ff       	call   c0011527 <KePanic(char const*)>
c0015484:	83 c4 10             	add    esp,0x10
c0015487:	eb 3a                	jmp    c00154c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015489:	83 ec 0c             	sub    esp,0xc
c001548c:	53                   	push   ebx
c001548d:	e8 cc 66 ff ff       	call   c000bb5e <File::close()>
c0015492:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015494:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015497:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001549a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001549d:	e8 41 26 ff ff       	call   c0007ae3 <free>
c00154a2:	59                   	pop    ecx
c00154a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154a7:	e8 37 26 ff ff       	call   c0007ae3 <free>
c00154ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154af:	e8 2f 26 ff ff       	call   c0007ae3 <free>
c00154b4:	5b                   	pop    ebx
c00154b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154b9:	e8 25 26 ff ff       	call   c0007ae3 <free>
c00154be:	83 c4 10             	add    esp,0x10
c00154c1:	eb 1e                	jmp    c00154e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00154c3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00154c7:	e9 4d fd ff ff       	jmp    c0015219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00154cc:	83 ec 0c             	sub    esp,0xc
c00154cf:	57                   	push   edi
c00154d0:	e8 0e 26 ff ff       	call   c0007ae3 <free>
c00154d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00154d9:	83 c4 10             	add    esp,0x10
c00154dc:	e9 cc fc ff ff       	jmp    c00151ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00154e1:	31 c0                	xor    eax,eax
c00154e3:	eb 32                	jmp    c0015517 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00154e5:	83 ec 0c             	sub    esp,0xc
c00154e8:	53                   	push   ebx
c00154e9:	e8 70 66 ff ff       	call   c000bb5e <File::close()>
c00154ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154f6:	58                   	pop    eax
c00154f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154fb:	e8 e3 25 ff ff       	call   c0007ae3 <free>
c0015500:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015503:	e8 db 25 ff ff       	call   c0007ae3 <free>
c0015508:	5a                   	pop    edx
c0015509:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001550d:	e8 d1 25 ff ff       	call   c0007ae3 <free>
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	b0 01                	mov    al,0x1
c0015517:	81 c4 5c 03 00 00    	add    esp,0x35c
c001551d:	5b                   	pop    ebx
c001551e:	5e                   	pop    esi
c001551f:	5f                   	pop    edi
c0015520:	5d                   	pop    ebp
c0015521:	c3                   	ret    

c0015522 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015522:	56                   	push   esi
c0015523:	31 d2                	xor    edx,edx
c0015525:	53                   	push   ebx
c0015526:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001552c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015530:	39 d3                	cmp    ebx,edx
c0015532:	7e 1b                	jle    c001554f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015534:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001553b:	39 c8                	cmp    eax,ecx
c001553d:	77 0d                	ja     c001554c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001553f:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015546:	01 c6                	add    esi,eax
c0015548:	39 ce                	cmp    esi,ecx
c001554a:	77 05                	ja     c0015551 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001554c:	42                   	inc    edx
c001554d:	eb e1                	jmp    c0015530 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001554f:	31 c0                	xor    eax,eax
c0015551:	5b                   	pop    ebx
c0015552:	5e                   	pop    esi
c0015553:	c3                   	ret    

c0015554 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015554:	53                   	push   ebx
c0015555:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001555b:	31 c0                	xor    eax,eax
c001555d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015561:	39 c3                	cmp    ebx,eax
c0015563:	7e 22                	jle    c0015587 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015565:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001556c:	39 ca                	cmp    edx,ecx
c001556e:	77 14                	ja     c0015584 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015570:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015577:	39 ca                	cmp    edx,ecx
c0015579:	76 09                	jbe    c0015584 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001557b:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015582:	eb 05                	jmp    c0015589 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015584:	40                   	inc    eax
c0015585:	eb da                	jmp    c0015561 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015587:	31 c0                	xor    eax,eax
c0015589:	5b                   	pop    ebx
c001558a:	c3                   	ret    

c001558b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001558b:	53                   	push   ebx
c001558c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015590:	53                   	push   ebx
c0015591:	e8 8c ff ff ff       	call   c0015522 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015596:	5a                   	pop    edx
c0015597:	31 d2                	xor    edx,edx
c0015599:	85 c0                	test   eax,eax
c001559b:	74 04                	je     c00155a1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001559d:	89 da                	mov    edx,ebx
c001559f:	29 c2                	sub    edx,eax
c00155a1:	5b                   	pop    ebx
c00155a2:	89 d0                	mov    eax,edx
c00155a4:	c3                   	ret    

c00155a5 <Thr::loadDLL(char const*, bool)>:
c00155a5:	55                   	push   ebp
c00155a6:	57                   	push   edi
c00155a7:	56                   	push   esi
c00155a8:	53                   	push   ebx
c00155a9:	81 ec 34 01 00 00    	sub    esp,0x134
c00155af:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00155b6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00155bd:	56                   	push   esi
c00155be:	68 d7 27 02 c0       	push   0xc00227d7
c00155c3:	e8 42 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00155c8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155cf:	e8 ff 24 ff ff       	call   c0007ad3 <malloc>
c00155d4:	83 c4 0c             	add    esp,0xc
c00155d7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00155dd:	56                   	push   esi
c00155de:	50                   	push   eax
c00155df:	89 c3                	mov    ebx,eax
c00155e1:	e8 fc 64 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	85 db                	test   ebx,ebx
c00155eb:	75 3c                	jne    c0015629 <Thr::loadDLL(char const*, bool)+0x84>
c00155ed:	89 e8                	mov    eax,ebp
c00155ef:	84 c0                	test   al,al
c00155f1:	0f 84 e1 01 00 00    	je     c00157d8 <Thr::loadDLL(char const*, bool)+0x233>
c00155f7:	50                   	push   eax
c00155f8:	50                   	push   eax
c00155f9:	68 e8 27 02 c0       	push   0xc00227e8
c00155fe:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015602:	57                   	push   edi
c0015603:	e8 48 b0 fe ff       	call   c0000650 <strcpy>
c0015608:	58                   	pop    eax
c0015609:	5a                   	pop    edx
c001560a:	56                   	push   esi
c001560b:	57                   	push   edi
c001560c:	e8 5f b2 fe ff       	call   c0000870 <strcat>
c0015611:	59                   	pop    ecx
c0015612:	58                   	pop    eax
c0015613:	68 fb 27 02 c0       	push   0xc00227fb
c0015618:	57                   	push   edi
c0015619:	e8 52 b2 fe ff       	call   c0000870 <strcat>
c001561e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015621:	e8 01 bf ff ff       	call   c0011527 <KePanic(char const*)>
c0015626:	83 c4 10             	add    esp,0x10
c0015629:	50                   	push   eax
c001562a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001562e:	50                   	push   eax
c001562f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015633:	50                   	push   eax
c0015634:	53                   	push   ebx
c0015635:	e8 c8 67 ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c001563a:	83 c4 10             	add    esp,0x10
c001563d:	85 db                	test   ebx,ebx
c001563f:	74 0c                	je     c001564d <Thr::loadDLL(char const*, bool)+0xa8>
c0015641:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015643:	83 ec 0c             	sub    esp,0xc
c0015646:	53                   	push   ebx
c0015647:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015652:	75 0a                	jne    c001565e <Thr::loadDLL(char const*, bool)+0xb9>
c0015654:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015658:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001565c:	75 3e                	jne    c001569c <Thr::loadDLL(char const*, bool)+0xf7>
c001565e:	89 e8                	mov    eax,ebp
c0015660:	31 db                	xor    ebx,ebx
c0015662:	84 c0                	test   al,al
c0015664:	0f 84 6e 01 00 00    	je     c00157d8 <Thr::loadDLL(char const*, bool)+0x233>
c001566a:	50                   	push   eax
c001566b:	50                   	push   eax
c001566c:	68 e8 27 02 c0       	push   0xc00227e8
c0015671:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015675:	53                   	push   ebx
c0015676:	e8 d5 af fe ff       	call   c0000650 <strcpy>
c001567b:	58                   	pop    eax
c001567c:	5a                   	pop    edx
c001567d:	56                   	push   esi
c001567e:	53                   	push   ebx
c001567f:	e8 ec b1 fe ff       	call   c0000870 <strcat>
c0015684:	59                   	pop    ecx
c0015685:	5f                   	pop    edi
c0015686:	68 fb 27 02 c0       	push   0xc00227fb
c001568b:	53                   	push   ebx
c001568c:	e8 df b1 fe ff       	call   c0000870 <strcat>
c0015691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015694:	e8 8e be ff ff       	call   c0011527 <KePanic(char const*)>
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	53                   	push   ebx
c001569d:	6a 03                	push   0x3
c001569f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156a7:	05 ff 0f 00 00       	add    eax,0xfff
c00156ac:	83 d2 00             	adc    edx,0x0
c00156af:	0f ac d0 0c          	shrd   eax,edx,0xc
c00156b3:	50                   	push   eax
c00156b4:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00156ba:	e8 47 47 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00156bf:	89 c3                	mov    ebx,eax
c00156c1:	58                   	pop    eax
c00156c2:	5a                   	pop    edx
c00156c3:	53                   	push   ebx
c00156c4:	68 52 0d 02 c0       	push   0xc0020d52
c00156c9:	e8 3c 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00156ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00156d1:	e8 aa ae fe ff       	call   c0000580 <strlen>
c00156d6:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c00156dc:	40                   	inc    eax
c00156dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00156e0:	e8 ee 23 ff ff       	call   c0007ad3 <malloc>
c00156e5:	59                   	pop    ecx
c00156e6:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c00156ed:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00156f2:	5f                   	pop    edi
c00156f3:	56                   	push   esi
c00156f4:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00156fb:	e8 50 af fe ff       	call   c0000650 <strcpy>
c0015700:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015705:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001570c:	8d 50 01             	lea    edx,[eax+0x1]
c001570f:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015715:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015719:	83 c4 0c             	add    esp,0xc
c001571c:	6a 01                	push   0x1
c001571e:	53                   	push   ebx
c001571f:	56                   	push   esi
c0015720:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015727:	e8 b5 f6 ff ff       	call   c0014de1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001572c:	83 c4 10             	add    esp,0x10
c001572f:	89 c7                	mov    edi,eax
c0015731:	89 f8                	mov    eax,edi
c0015733:	83 f0 01             	xor    eax,0x1
c0015736:	84 c0                	test   al,al
c0015738:	74 18                	je     c0015752 <Thr::loadDLL(char const*, bool)+0x1ad>
c001573a:	89 e8                	mov    eax,ebp
c001573c:	84 c0                	test   al,al
c001573e:	74 12                	je     c0015752 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015740:	83 ec 0c             	sub    esp,0xc
c0015743:	68 fd 27 02 c0       	push   0xc00227fd
c0015748:	e8 da bd ff ff       	call   c0011527 <KePanic(char const*)>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	eb 06                	jmp    c0015758 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015752:	89 f8                	mov    eax,edi
c0015754:	84 c0                	test   al,al
c0015756:	75 10                	jne    c0015768 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015758:	83 ec 0c             	sub    esp,0xc
c001575b:	68 1c 28 02 c0       	push   0xc002281c
c0015760:	e8 c2 bd ff ff       	call   c0011527 <KePanic(char const*)>
c0015765:	83 c4 10             	add    esp,0x10
c0015768:	31 f6                	xor    esi,esi
c001576a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001576e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015772:	05 ff 0f 00 00       	add    eax,0xfff
c0015777:	83 d2 00             	adc    edx,0x0
c001577a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001577e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015782:	c1 ea 0c             	shr    edx,0xc
c0015785:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015789:	ba 00 00 00 00       	mov    edx,0x0
c001578e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015792:	89 d0                	mov    eax,edx
c0015794:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015798:	73 32                	jae    c00157cc <Thr::loadDLL(char const*, bool)+0x227>
c001579a:	50                   	push   eax
c001579b:	50                   	push   eax
c001579c:	89 f0                	mov    eax,esi
c001579e:	c1 e0 0c             	shl    eax,0xc
c00157a1:	01 d8                	add    eax,ebx
c00157a3:	50                   	push   eax
c00157a4:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157aa:	e8 3b 41 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b4:	a8 60                	test   al,0x60
c00157b6:	75 11                	jne    c00157c9 <Thr::loadDLL(char const*, bool)+0x224>
c00157b8:	83 ec 0c             	sub    esp,0xc
c00157bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157c0:	50                   	push   eax
c00157c1:	e8 b3 25 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	46                   	inc    esi
c00157ca:	eb 9e                	jmp    c001576a <Thr::loadDLL(char const*, bool)+0x1c5>
c00157cc:	89 f8                	mov    eax,edi
c00157ce:	84 c0                	test   al,al
c00157d0:	b8 00 00 00 00       	mov    eax,0x0
c00157d5:	0f 44 d8             	cmove  ebx,eax
c00157d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00157de:	89 d8                	mov    eax,ebx
c00157e0:	5b                   	pop    ebx
c00157e1:	5e                   	pop    esi
c00157e2:	5f                   	pop    edi
c00157e3:	5d                   	pop    ebp
c00157e4:	c3                   	ret    

c00157e5 <Thr::executeDLL(unsigned long, void*)>:
c00157e5:	56                   	push   esi
c00157e6:	53                   	push   ebx
c00157e7:	52                   	push   edx
c00157e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00157f0:	85 db                	test   ebx,ebx
c00157f2:	75 10                	jne    c0015804 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00157f4:	83 ec 0c             	sub    esp,0xc
c00157f7:	68 38 28 02 c0       	push   0xc0022838
c00157fc:	e8 26 bd ff ff       	call   c0011527 <KePanic(char const*)>
c0015801:	83 c4 10             	add    esp,0x10
c0015804:	50                   	push   eax
c0015805:	50                   	push   eax
c0015806:	53                   	push   ebx
c0015807:	68 62 28 02 c0       	push   0xc0022862
c001580c:	e8 f9 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015811:	89 d8                	mov    eax,ebx
c0015813:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015817:	83 c4 14             	add    esp,0x14
c001581a:	5b                   	pop    ebx
c001581b:	5e                   	pop    esi
c001581c:	ff e0                	jmp    eax
c001581e:	66 90                	xchg   ax,ax

c0015820 <userModeEntryPoint(void*)>:
c0015820:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015825:	83 e8 01             	sub    eax,0x1
c0015828:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001582d:	75 01                	jne    c0015830 <userModeEntryPoint(void*)+0x10>
c001582f:	fb                   	sti    
c0015830:	fb                   	sti    
c0015831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015836:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015839:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001583f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015843:	e9 f7 a9 fe ff       	jmp    c000023f <goToUsermode>

c0015848 <changeTSS>:
c0015848:	83 ec 14             	sub    esp,0x14
c001584b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015850:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015853:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015858:	c1 e2 15             	shl    edx,0x15
c001585b:	29 d0                	sub    eax,edx
c001585d:	50                   	push   eax
c001585e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015863:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015869:	05 7c 11 00 00       	add    eax,0x117c
c001586e:	50                   	push   eax
c001586f:	e8 c8 36 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015874:	83 c4 1c             	add    esp,0x1c
c0015877:	c3                   	ret    

c0015878 <switchToThread(ThreadControlBlock*)>:
c0015878:	57                   	push   edi
c0015879:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001587f:	56                   	push   esi
c0015880:	53                   	push   ebx
c0015881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015885:	85 c9                	test   ecx,ecx
c0015887:	0f 85 8b 00 00 00    	jne    c0015918 <switchToThread(ThreadControlBlock*)+0xa0>
c001588d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015891:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015897:	74 7b                	je     c0015914 <switchToThread(ThreadControlBlock*)+0x9c>
c0015899:	b8 00 04 00 00       	mov    eax,0x400
c001589e:	29 d0                	sub    eax,edx
c00158a0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00158a3:	d1 f8                	sar    eax,1
c00158a5:	01 d0                	add    eax,edx
c00158a7:	90                   	nop
c00158a8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00158ab:	e8 04 28 00 00       	call   c00180b4 <HalQueryPerformanceCounter()>
c00158b0:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00158b5:	89 c6                	mov    esi,eax
c00158b7:	89 d7                	mov    edi,edx
c00158b9:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00158bf:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00158c4:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00158ca:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00158d0:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00158d6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158dc:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00158e2:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00158e8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00158eb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00158ee:	01 c6                	add    esi,eax
c00158f0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00158f3:	11 d7                	adc    edi,edx
c00158f5:	83 ec 0c             	sub    esp,0xc
c00158f8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00158fb:	53                   	push   ebx
c00158fc:	e8 76 a9 fe ff       	call   c0000277 <switchToThreadASM>
c0015901:	0f 20 c0             	mov    eax,cr0
c0015904:	83 c8 08             	or     eax,0x8
c0015907:	0f 22 c0             	mov    cr0,eax
c001590a:	83 c4 10             	add    esp,0x10
c001590d:	5b                   	pop    ebx
c001590e:	5e                   	pop    esi
c001590f:	5f                   	pop    edi
c0015910:	c3                   	ret    
c0015911:	8d 76 00             	lea    esi,[esi+0x0]
c0015914:	31 c0                	xor    eax,eax
c0015916:	eb 90                	jmp    c00158a8 <switchToThread(ThreadControlBlock*)+0x30>
c0015918:	5b                   	pop    ebx
c0015919:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015923:	5e                   	pop    esi
c0015924:	5f                   	pop    edi
c0015925:	c3                   	ret    
c0015926:	66 90                	xchg   ax,ax

c0015928 <Process::addArgs(char**)>:
c0015928:	57                   	push   edi
c0015929:	56                   	push   esi
c001592a:	53                   	push   ebx
c001592b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001592f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015933:	85 f6                	test   esi,esi
c0015935:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001593f:	74 4f                	je     c0015990 <Process::addArgs(char**)+0x68>
c0015941:	8b 06                	mov    eax,DWORD PTR [esi]
c0015943:	85 c0                	test   eax,eax
c0015945:	74 49                	je     c0015990 <Process::addArgs(char**)+0x68>
c0015947:	31 db                	xor    ebx,ebx
c0015949:	8d 76 00             	lea    esi,[esi+0x0]
c001594c:	83 ec 0c             	sub    esp,0xc
c001594f:	50                   	push   eax
c0015950:	e8 2b ac fe ff       	call   c0000580 <strlen>
c0015955:	83 c0 01             	add    eax,0x1
c0015958:	89 04 24             	mov    DWORD PTR [esp],eax
c001595b:	e8 73 21 ff ff       	call   c0007ad3 <malloc>
c0015960:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015967:	5a                   	pop    edx
c0015968:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001596b:	83 c3 01             	add    ebx,0x1
c001596e:	59                   	pop    ecx
c001596f:	52                   	push   edx
c0015970:	50                   	push   eax
c0015971:	e8 da ac fe ff       	call   c0000650 <strcpy>
c0015976:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001597c:	83 c4 10             	add    esp,0x10
c001597f:	83 c1 01             	add    ecx,0x1
c0015982:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015988:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001598b:	85 c0                	test   eax,eax
c001598d:	75 bd                	jne    c001594c <Process::addArgs(char**)+0x24>
c001598f:	90                   	nop
c0015990:	5b                   	pop    ebx
c0015991:	5e                   	pop    esi
c0015992:	5f                   	pop    edi
c0015993:	c3                   	ret    

c0015994 <Process::Process(char const*, Process*, char**)>:
c0015994:	56                   	push   esi
c0015995:	53                   	push   ebx
c0015996:	83 ec 14             	sub    esp,0x14
c0015999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001599d:	05 0c 02 00 00       	add    eax,0x20c
c00159a2:	bb 07 00 00 00       	mov    ebx,0x7
c00159a7:	89 c6                	mov    esi,eax
c00159a9:	8d 76 00             	lea    esi,[esi+0x0]
c00159ac:	85 db                	test   ebx,ebx
c00159ae:	78 14                	js     c00159c4 <Process::Process(char const*, Process*, char**)+0x30>
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	56                   	push   esi
c00159b4:	e8 2f a6 00 00       	call   c001ffe8 <ThreadControlBlock::ThreadControlBlock()>
c00159b9:	83 c4 10             	add    esp,0x10
c00159bc:	83 c6 5f             	add    esi,0x5f
c00159bf:	83 eb 01             	sub    ebx,0x1
c00159c2:	eb e8                	jmp    c00159ac <Process::Process(char const*, Process*, char**)+0x18>
c00159c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159c8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00159cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159d3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00159da:	83 ec 0c             	sub    esp,0xc
c00159dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159e1:	e8 36 b9 ff ff       	call   c001131c <KeNewProcessEnv(Process*)>
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	89 c2                	mov    edx,eax
c00159eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159ef:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00159f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159f9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a02:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0015a07:	8d 50 01             	lea    edx,[eax+0x1]
c0015a0a:	89 15 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,edx
c0015a10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a14:	89 02                	mov    DWORD PTR [edx],eax
c0015a16:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a1e:	83 ec 0c             	sub    esp,0xc
c0015a21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a25:	e8 a9 20 ff ff       	call   c0007ad3 <malloc>
c0015a2a:	83 c4 10             	add    esp,0x10
c0015a2d:	89 c3                	mov    ebx,eax
c0015a2f:	83 ec 08             	sub    esp,0x8
c0015a32:	6a 00                	push   0x0
c0015a34:	53                   	push   ebx
c0015a35:	e8 18 46 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a41:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a4b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a5d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a63:	e8 d6 be ff ff       	call   c001193e <KeInitSignals()>
c0015a68:	89 c2                	mov    edx,eax
c0015a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a6e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015a74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a7e:	85 c0                	test   eax,eax
c0015a80:	74 42                	je     c0015ac4 <Process::Process(char const*, Process*, char**)+0x130>
c0015a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a86:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a8c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a96:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015aa6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab0:	05 0c 01 00 00       	add    eax,0x10c
c0015ab5:	83 ec 08             	sub    esp,0x8
c0015ab8:	52                   	push   edx
c0015ab9:	50                   	push   eax
c0015aba:	e8 91 ab fe ff       	call   c0000650 <strcpy>
c0015abf:	83 c4 10             	add    esp,0x10
c0015ac2:	eb 64                	jmp    c0015b28 <Process::Process(char const*, Process*, char**)+0x194>
c0015ac4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015acc:	83 ec 0c             	sub    esp,0xc
c0015acf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ad3:	e8 fb 1f ff ff       	call   c0007ad3 <malloc>
c0015ad8:	83 c4 10             	add    esp,0x10
c0015adb:	89 c3                	mov    ebx,eax
c0015add:	83 ec 08             	sub    esp,0x8
c0015ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ae4:	53                   	push   ebx
c0015ae5:	e8 82 31 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015afb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b01:	83 ec 0c             	sub    esp,0xc
c0015b04:	50                   	push   eax
c0015b05:	e8 10 2a ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b11:	05 0c 01 00 00       	add    eax,0x10c
c0015b16:	83 ec 08             	sub    esp,0x8
c0015b19:	68 81 28 02 c0       	push   0xc0022881
c0015b1e:	50                   	push   eax
c0015b1f:	e8 2c ab fe ff       	call   c0000650 <strcpy>
c0015b24:	83 c4 10             	add    esp,0x10
c0015b27:	90                   	nop
c0015b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2c:	83 c0 0c             	add    eax,0xc
c0015b2f:	83 ec 08             	sub    esp,0x8
c0015b32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b36:	50                   	push   eax
c0015b37:	e8 14 ab fe ff       	call   c0000650 <strcpy>
c0015b3c:	83 c4 10             	add    esp,0x10
c0015b3f:	83 ec 08             	sub    esp,0x8
c0015b42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b4a:	e8 d9 fd ff ff       	call   c0015928 <Process::addArgs(char**)>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	83 ec 08             	sub    esp,0x8
c0015b55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b5d:	e8 40 ed ff ff       	call   c00148a2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b62:	83 c4 10             	add    esp,0x10
c0015b65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b6d:	83 f0 01             	xor    eax,0x1
c0015b70:	88 c2                	mov    dl,al
c0015b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b76:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015b7c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015b81:	83 ec 04             	sub    esp,0x4
c0015b84:	50                   	push   eax
c0015b85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b89:	68 d8 28 02 c0       	push   0xc00228d8
c0015b8e:	e8 77 4d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	90                   	nop
c0015b97:	83 c4 14             	add    esp,0x14
c0015b9a:	5b                   	pop    ebx
c0015b9b:	5e                   	pop    esi
c0015b9c:	c3                   	ret    
c0015b9d:	90                   	nop
c0015b9e:	66 90                	xchg   ax,ax

c0015ba0 <Process::Process(bool, char const*, Process*, char**)>:
c0015ba0:	56                   	push   esi
c0015ba1:	53                   	push   ebx
c0015ba2:	83 ec 24             	sub    esp,0x24
c0015ba5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ba9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015bad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bb1:	05 0c 02 00 00       	add    eax,0x20c
c0015bb6:	bb 07 00 00 00       	mov    ebx,0x7
c0015bbb:	89 c6                	mov    esi,eax
c0015bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc0:	85 db                	test   ebx,ebx
c0015bc2:	78 14                	js     c0015bd8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	56                   	push   esi
c0015bc8:	e8 1b a4 00 00       	call   c001ffe8 <ThreadControlBlock::ThreadControlBlock()>
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	83 c6 5f             	add    esi,0x5f
c0015bd3:	83 eb 01             	sub    ebx,0x1
c0015bd6:	eb e8                	jmp    c0015bc0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015bd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bdc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015be3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015be7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015bee:	83 ec 0c             	sub    esp,0xc
c0015bf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015bf5:	e8 22 b7 ff ff       	call   c001131c <KeNewProcessEnv(Process*)>
c0015bfa:	83 c4 10             	add    esp,0x10
c0015bfd:	89 c2                	mov    edx,eax
c0015bff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c03:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c0d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c16:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0015c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0015c1e:	89 15 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,edx
c0015c24:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c28:	89 02                	mov    DWORD PTR [edx],eax
c0015c2a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c32:	83 ec 0c             	sub    esp,0xc
c0015c35:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015c39:	e8 95 1e ff ff       	call   c0007ad3 <malloc>
c0015c3e:	83 c4 10             	add    esp,0x10
c0015c41:	89 c3                	mov    ebx,eax
c0015c43:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c48:	83 ec 08             	sub    esp,0x8
c0015c4b:	50                   	push   eax
c0015c4c:	53                   	push   ebx
c0015c4d:	e8 00 44 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015c52:	83 c4 10             	add    esp,0x10
c0015c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c59:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c63:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c71:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c75:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c7b:	e8 be bc ff ff       	call   c001193e <KeInitSignals()>
c0015c80:	89 c2                	mov    edx,eax
c0015c82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c86:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c90:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c96:	85 c0                	test   eax,eax
c0015c98:	74 42                	je     c0015cdc <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015c9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c9e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ca4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015caa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cae:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cbe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015cc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc8:	05 0c 01 00 00       	add    eax,0x10c
c0015ccd:	83 ec 08             	sub    esp,0x8
c0015cd0:	52                   	push   edx
c0015cd1:	50                   	push   eax
c0015cd2:	e8 79 a9 fe ff       	call   c0000650 <strcpy>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	eb 64                	jmp    c0015d40 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015cdc:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ceb:	e8 e3 1d ff ff       	call   c0007ad3 <malloc>
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	89 c3                	mov    ebx,eax
c0015cf5:	83 ec 08             	sub    esp,0x8
c0015cf8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015cfc:	53                   	push   ebx
c0015cfd:	e8 6a 2f ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d09:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d13:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d19:	83 ec 0c             	sub    esp,0xc
c0015d1c:	50                   	push   eax
c0015d1d:	e8 f8 27 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015d22:	83 c4 10             	add    esp,0x10
c0015d25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d29:	05 0c 01 00 00       	add    eax,0x10c
c0015d2e:	83 ec 08             	sub    esp,0x8
c0015d31:	68 81 28 02 c0       	push   0xc0022881
c0015d36:	50                   	push   eax
c0015d37:	e8 14 a9 fe ff       	call   c0000650 <strcpy>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	90                   	nop
c0015d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d44:	83 c0 0c             	add    eax,0xc
c0015d47:	83 ec 08             	sub    esp,0x8
c0015d4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d4e:	50                   	push   eax
c0015d4f:	e8 fc a8 fe ff       	call   c0000650 <strcpy>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	83 ec 08             	sub    esp,0x8
c0015d5a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d62:	e8 c1 fb ff ff       	call   c0015928 <Process::addArgs(char**)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	90                   	nop
c0015d6b:	83 c4 24             	add    esp,0x24
c0015d6e:	5b                   	pop    ebx
c0015d6f:	5e                   	pop    esi
c0015d70:	c3                   	ret    
c0015d71:	8d 76 00             	lea    esi,[esi+0x0]

c0015d74 <taskStartupFunction>:
c0015d74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d79:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015d7c:	c3                   	ret    
c0015d7d:	90                   	nop
c0015d7e:	66 90                	xchg   ax,ax

c0015d80 <Semaphore::Semaphore(int)>:
c0015d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d88:	89 10                	mov    DWORD PTR [eax],edx
c0015d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d8e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015d95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015da4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015dab:	90                   	nop
c0015dac:	c3                   	ret    
c0015dad:	90                   	nop
c0015dae:	66 90                	xchg   ax,ax

c0015db0 <Mutex::Mutex()>:
c0015db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db4:	6a 01                	push   0x1
c0015db6:	50                   	push   eax
c0015db7:	e8 c4 ff ff ff       	call   c0015d80 <Semaphore::Semaphore(int)>
c0015dbc:	83 c4 08             	add    esp,0x8
c0015dbf:	90                   	nop
c0015dc0:	c3                   	ret    
c0015dc1:	90                   	nop
c0015dc2:	66 90                	xchg   ax,ax

c0015dc4 <Process::createThread(void (*)(void*), void*, int)>:
c0015dc4:	57                   	push   edi
c0015dc5:	31 c9                	xor    ecx,ecx
c0015dc7:	56                   	push   esi
c0015dc8:	53                   	push   ebx
c0015dc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015dcd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015dd4:	89 f2                	mov    edx,esi
c0015dd6:	66 90                	xchg   ax,ax
c0015dd8:	0f b7 c2             	movzx  eax,dx
c0015ddb:	80 e2 01             	and    dl,0x1
c0015dde:	74 14                	je     c0015df4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015de0:	d1 f8                	sar    eax,1
c0015de2:	83 c1 01             	add    ecx,0x1
c0015de5:	83 f9 10             	cmp    ecx,0x10
c0015de8:	89 c2                	mov    edx,eax
c0015dea:	75 ec                	jne    c0015dd8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015dec:	31 db                	xor    ebx,ebx
c0015dee:	89 d8                	mov    eax,ebx
c0015df0:	5b                   	pop    ebx
c0015df1:	5e                   	pop    esi
c0015df2:	5f                   	pop    edi
c0015df3:	c3                   	ret    
c0015df4:	b8 01 00 00 00       	mov    eax,0x1
c0015df9:	d3 e0                	shl    eax,cl
c0015dfb:	09 c6                	or     esi,eax
c0015dfd:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e04:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015e07:	c1 e0 05             	shl    eax,0x5
c0015e0a:	29 c8                	sub    eax,ecx
c0015e0c:	01 d8                	add    eax,ebx
c0015e0e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e15:	75 0d                	jne    c0015e24 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e17:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e21:	8d 76 00             	lea    esi,[esi+0x0]
c0015e24:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e2a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015e2d:	83 ec 0c             	sub    esp,0xc
c0015e30:	c1 e6 05             	shl    esi,0x5
c0015e33:	29 ce                	sub    esi,ecx
c0015e35:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015e38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015e3b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015e41:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015e47:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015e4d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015e54:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015e5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e5e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015e64:	89 ca                	mov    edx,ecx
c0015e66:	f7 da                	neg    edx
c0015e68:	c1 e2 15             	shl    edx,0x15
c0015e6b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015e71:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015e77:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015e7b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015e85:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015e8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e8f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015e95:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015e9f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015ea9:	68 00 01 00 00       	push   0x100
c0015eae:	e8 20 1c ff ff       	call   c0007ad3 <malloc>
c0015eb3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015eb6:	58                   	pop    eax
c0015eb7:	5a                   	pop    edx
c0015eb8:	53                   	push   ebx
c0015eb9:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ebe:	e8 bd 9e 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ec3:	83 c4 10             	add    esp,0x10
c0015ec6:	89 d8                	mov    eax,ebx
c0015ec8:	5b                   	pop    ebx
c0015ec9:	5e                   	pop    esi
c0015eca:	5f                   	pop    edi
c0015ecb:	c3                   	ret    

c0015ecc <Process::createUserThread()>:
c0015ecc:	83 ec 0c             	sub    esp,0xc
c0015ecf:	68 80 00 00 00       	push   0x80
c0015ed4:	6a 00                	push   0x0
c0015ed6:	68 20 58 01 c0       	push   0xc0015820
c0015edb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015edf:	50                   	push   eax
c0015ee0:	e8 df fe ff ff       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0015ee5:	83 c4 1c             	add    esp,0x1c
c0015ee8:	c3                   	ret    
c0015ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0015eec <setupMultitasking(void (*)())>:
c0015eec:	56                   	push   esi
c0015eed:	53                   	push   ebx
c0015eee:	83 ec 04             	sub    esp,0x4
c0015ef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ef5:	eb 11                	jmp    c0015f08 <setupMultitasking(void (*)())+0x1c>
c0015ef7:	90                   	nop
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f00:	e8 bf 9d 00 00       	call   c001fcc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f05:	83 c4 10             	add    esp,0x10
c0015f08:	83 ec 0c             	sub    esp,0xc
c0015f0b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f10:	e8 8b 9d 00 00       	call   c001fca0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f15:	83 c4 10             	add    esp,0x10
c0015f18:	84 c0                	test   al,al
c0015f1a:	74 dc                	je     c0015ef8 <setupMultitasking(void (*)())+0xc>
c0015f1c:	83 ec 0c             	sub    esp,0xc
c0015f1f:	68 24 07 00 00       	push   0x724
c0015f24:	e8 aa 1b ff ff       	call   c0007ad3 <malloc>
c0015f29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015f30:	6a 00                	push   0x0
c0015f32:	68 85 28 02 c0       	push   0xc0022885
c0015f37:	6a 01                	push   0x1
c0015f39:	50                   	push   eax
c0015f3a:	89 c3                	mov    ebx,eax
c0015f3c:	e8 5f fc ff ff       	call   c0015ba0 <Process::Process(bool, char const*, Process*, char**)>
c0015f41:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015f47:	83 c4 14             	add    esp,0x14
c0015f4a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015f50:	50                   	push   eax
c0015f51:	e8 19 28 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015f56:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015f5d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015f67:	83 c8 01             	or     eax,0x1
c0015f6a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015f71:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015f7a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015f84:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015f8a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015f94:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015f9a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015fa4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015fae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015fb4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015fba:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015fc4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015fce:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015fd5:	e8 f9 1a ff ff       	call   c0007ad3 <malloc>
c0015fda:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015fe0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015fe6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015fec:	5a                   	pop    edx
c0015fed:	59                   	pop    ecx
c0015fee:	68 81 28 02 c0       	push   0xc0022881
c0015ff3:	50                   	push   eax
c0015ff4:	e8 57 a6 fe ff       	call   c0000650 <strcpy>
c0015ff9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016000:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016004:	83 c4 14             	add    esp,0x14
c0016007:	5b                   	pop    ebx
c0016008:	5e                   	pop    esi
c0016009:	e9 5b a2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001600e:	66 90                	xchg   ax,ax

c0016010 <schedule()>:
c0016010:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016016:	85 d2                	test   edx,edx
c0016018:	74 0e                	je     c0016028 <schedule()+0x18>
c001601a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016024:	c3                   	ret    
c0016025:	8d 76 00             	lea    esi,[esi+0x0]
c0016028:	53                   	push   ebx
c0016029:	83 ec 14             	sub    esp,0x14
c001602c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016031:	e8 6a 9c 00 00       	call   c001fca0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	84 c0                	test   al,al
c001603b:	75 3f                	jne    c001607c <schedule()+0x6c>
c001603d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016042:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016045:	83 fa 01             	cmp    edx,0x1
c0016048:	74 3a                	je     c0016084 <schedule()+0x74>
c001604a:	66 90                	xchg   ax,ax
c001604c:	83 ec 0c             	sub    esp,0xc
c001604f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016054:	e8 63 9c 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016059:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016060:	89 c3                	mov    ebx,eax
c0016062:	e8 5d 9c 00 00       	call   c001fcc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016067:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001606e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016071:	e8 02 f8 ff ff       	call   c0015878 <switchToThread(ThreadControlBlock*)>
c0016076:	83 c4 10             	add    esp,0x10
c0016079:	8d 76 00             	lea    esi,[esi+0x0]
c001607c:	83 c4 08             	add    esp,0x8
c001607f:	5b                   	pop    ebx
c0016080:	c3                   	ret    
c0016081:	8d 76 00             	lea    esi,[esi+0x0]
c0016084:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001608b:	83 ec 08             	sub    esp,0x8
c001608e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016093:	50                   	push   eax
c0016094:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016099:	e8 e2 9c 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	eb a9                	jmp    c001604c <schedule()+0x3c>
c00160a3:	90                   	nop

c00160a4 <Semaphore::tryAcquire()>:
c00160a4:	53                   	push   ebx
c00160a5:	83 ec 08             	sub    esp,0x8
c00160a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160ac:	fa                   	cli    
c00160ad:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00160b3:	8d 42 01             	lea    eax,[edx+0x1]
c00160b6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00160bb:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00160c0:	8d 58 01             	lea    ebx,[eax+0x1]
c00160c3:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00160c9:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00160cc:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00160ce:	7c 2c                	jl     c00160fc <Semaphore::tryAcquire()+0x58>
c00160d0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00160d5:	85 c0                	test   eax,eax
c00160d7:	75 0b                	jne    c00160e4 <Semaphore::tryAcquire()+0x40>
c00160d9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00160de:	85 c0                	test   eax,eax
c00160e0:	75 5a                	jne    c001613c <Semaphore::tryAcquire()+0x98>
c00160e2:	66 90                	xchg   ax,ax
c00160e4:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00160ea:	31 c0                	xor    eax,eax
c00160ec:	85 d2                	test   edx,edx
c00160ee:	75 04                	jne    c00160f4 <Semaphore::tryAcquire()+0x50>
c00160f0:	fb                   	sti    
c00160f1:	8d 76 00             	lea    esi,[esi+0x0]
c00160f4:	83 c4 08             	add    esp,0x8
c00160f7:	5b                   	pop    ebx
c00160f8:	c3                   	ret    
c00160f9:	8d 76 00             	lea    esi,[esi+0x0]
c00160fc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016101:	83 c3 01             	add    ebx,0x1
c0016104:	85 c0                	test   eax,eax
c0016106:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016109:	75 21                	jne    c001612c <Semaphore::tryAcquire()+0x88>
c001610b:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016111:	85 c9                	test   ecx,ecx
c0016113:	74 17                	je     c001612c <Semaphore::tryAcquire()+0x88>
c0016115:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001611f:	e8 ec fe ff ff       	call   c0016010 <schedule()>
c0016124:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016129:	8d 50 ff             	lea    edx,[eax-0x1]
c001612c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016132:	85 d2                	test   edx,edx
c0016134:	b0 01                	mov    al,0x1
c0016136:	75 bc                	jne    c00160f4 <Semaphore::tryAcquire()+0x50>
c0016138:	eb b6                	jmp    c00160f0 <Semaphore::tryAcquire()+0x4c>
c001613a:	66 90                	xchg   ax,ax
c001613c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016146:	e8 c5 fe ff ff       	call   c0016010 <schedule()>
c001614b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016150:	8d 50 ff             	lea    edx,[eax-0x1]
c0016153:	31 c0                	xor    eax,eax
c0016155:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001615b:	85 d2                	test   edx,edx
c001615d:	75 95                	jne    c00160f4 <Semaphore::tryAcquire()+0x50>
c001615f:	eb 8f                	jmp    c00160f0 <Semaphore::tryAcquire()+0x4c>
c0016161:	90                   	nop
c0016162:	66 90                	xchg   ax,ax

c0016164 <Semaphore::assertLocked(char const*)>:
c0016164:	83 ec 0c             	sub    esp,0xc
c0016167:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001616b:	fa                   	cli    
c001616c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016172:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016177:	83 c1 01             	add    ecx,0x1
c001617a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016180:	8d 48 01             	lea    ecx,[eax+0x1]
c0016183:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016189:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001618b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001618e:	7c 28                	jl     c00161b8 <Semaphore::assertLocked(char const*)+0x54>
c0016190:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016195:	85 c0                	test   eax,eax
c0016197:	75 0b                	jne    c00161a4 <Semaphore::assertLocked(char const*)+0x40>
c0016199:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001619e:	85 c0                	test   eax,eax
c00161a0:	75 32                	jne    c00161d4 <Semaphore::assertLocked(char const*)+0x70>
c00161a2:	66 90                	xchg   ax,ax
c00161a4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161a9:	83 e8 01             	sub    eax,0x1
c00161ac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161b1:	75 01                	jne    c00161b4 <Semaphore::assertLocked(char const*)+0x50>
c00161b3:	fb                   	sti    
c00161b4:	83 c4 0c             	add    esp,0xc
c00161b7:	c3                   	ret    
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161bf:	52                   	push   edx
c00161c0:	e8 62 b3 ff ff       	call   c0011527 <KePanic(char const*)>
c00161c5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	83 e8 01             	sub    eax,0x1
c00161d0:	eb be                	jmp    c0016190 <Semaphore::assertLocked(char const*)+0x2c>
c00161d2:	66 90                	xchg   ax,ax
c00161d4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161de:	e8 2d fe ff ff       	call   c0016010 <schedule()>
c00161e3:	eb bf                	jmp    c00161a4 <Semaphore::assertLocked(char const*)+0x40>
c00161e5:	8d 76 00             	lea    esi,[esi+0x0]

c00161e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00161e8:	83 ec 0c             	sub    esp,0xc
c00161eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161f7:	e8 14 fe ff ff       	call   c0016010 <schedule()>
c00161fc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016201:	83 e8 01             	sub    eax,0x1
c0016204:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016209:	75 01                	jne    c001620c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001620b:	fb                   	sti    
c001620c:	83 c4 0c             	add    esp,0xc
c001620f:	c3                   	ret    

c0016210 <blockTask(TaskState)>:
c0016210:	83 ec 0c             	sub    esp,0xc
c0016213:	fa                   	cli    
c0016214:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016219:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001621d:	83 c0 01             	add    eax,0x1
c0016220:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001622d:	e8 de fd ff ff       	call   c0016010 <schedule()>
c0016232:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016237:	83 e8 01             	sub    eax,0x1
c001623a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001623f:	75 03                	jne    c0016244 <blockTask(TaskState)+0x34>
c0016241:	fb                   	sti    
c0016242:	66 90                	xchg   ax,ax
c0016244:	83 c4 0c             	add    esp,0xc
c0016247:	c3                   	ret    

c0016248 <waitTask(int, int*, int)>:
c0016248:	83 ec 18             	sub    esp,0x18
c001624b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016254:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016257:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001625b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016260:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016263:	6a 07                	push   0x7
c0016265:	e8 a6 ff ff ff       	call   c0016210 <blockTask(TaskState)>
c001626a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001626f:	83 c4 10             	add    esp,0x10
c0016272:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016275:	85 d2                	test   edx,edx
c0016277:	74 0b                	je     c0016284 <waitTask(int, int*, int)+0x3c>
c0016279:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001627c:	89 02                	mov    DWORD PTR [edx],eax
c001627e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016283:	90                   	nop
c0016284:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016287:	83 c4 0c             	add    esp,0xc
c001628a:	c3                   	ret    
c001628b:	90                   	nop

c001628c <milliTenthSleepUntil(unsigned int)>:
c001628c:	83 ec 0c             	sub    esp,0xc
c001628f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016293:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016299:	76 05                	jbe    c00162a0 <milliTenthSleepUntil(unsigned int)+0x14>
c001629b:	90                   	nop
c001629c:	83 c4 0c             	add    esp,0xc
c001629f:	c3                   	ret    
c00162a0:	fa                   	cli    
c00162a1:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00162a7:	83 ec 08             	sub    esp,0x8
c00162aa:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00162b0:	83 c2 01             	add    edx,0x1
c00162b3:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162b9:	83 c1 01             	add    ecx,0x1
c00162bc:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162c2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00162c8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00162cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d0:	50                   	push   eax
c00162d1:	68 d8 c6 02 c0       	push   0xc002c6d8
c00162d6:	e8 a5 9a 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162db:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00162e2:	e8 29 ff ff ff       	call   c0016210 <blockTask(TaskState)>
c00162e7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162ec:	83 c4 10             	add    esp,0x10
c00162ef:	83 e8 01             	sub    eax,0x1
c00162f2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162f7:	85 c0                	test   eax,eax
c00162f9:	75 09                	jne    c0016304 <milliTenthSleepUntil(unsigned int)+0x78>
c00162fb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016300:	85 c0                	test   eax,eax
c0016302:	75 14                	jne    c0016318 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016304:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016309:	83 e8 01             	sub    eax,0x1
c001630c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016311:	75 89                	jne    c001629c <milliTenthSleepUntil(unsigned int)+0x10>
c0016313:	fb                   	sti    
c0016314:	83 c4 0c             	add    esp,0xc
c0016317:	c3                   	ret    
c0016318:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016322:	e8 e9 fc ff ff       	call   c0016010 <schedule()>
c0016327:	eb db                	jmp    c0016304 <milliTenthSleepUntil(unsigned int)+0x78>
c0016329:	8d 76 00             	lea    esi,[esi+0x0]

c001632c <milliTenthSleep(unsigned int)>:
c001632c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016330:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016335:	01 c2                	add    edx,eax
c0016337:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001633b:	e9 4c ff ff ff       	jmp    c001628c <milliTenthSleepUntil(unsigned int)>

c0016340 <sleep(unsigned int)>:
c0016340:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016348:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001634c:	eb de                	jmp    c001632c <milliTenthSleep(unsigned int)>
c001634e:	66 90                	xchg   ax,ax

c0016350 <Semaphore::acquire()>:
c0016350:	83 ec 0c             	sub    esp,0xc
c0016353:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016357:	fa                   	cli    
c0016358:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001635d:	83 c0 01             	add    eax,0x1
c0016360:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016365:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001636a:	8d 48 01             	lea    ecx,[eax+0x1]
c001636d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016373:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016376:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016378:	7d 2e                	jge    c00163a8 <Semaphore::acquire()+0x58>
c001637a:	83 c1 01             	add    ecx,0x1
c001637d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016380:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016385:	85 c0                	test   eax,eax
c0016387:	75 0b                	jne    c0016394 <Semaphore::acquire()+0x44>
c0016389:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001638e:	85 c0                	test   eax,eax
c0016390:	75 66                	jne    c00163f8 <Semaphore::acquire()+0xa8>
c0016392:	66 90                	xchg   ax,ax
c0016394:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016399:	83 e8 01             	sub    eax,0x1
c001639c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163a1:	75 01                	jne    c00163a4 <Semaphore::acquire()+0x54>
c00163a3:	fb                   	sti    
c00163a4:	83 c4 0c             	add    esp,0xc
c00163a7:	c3                   	ret    
c00163a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163b4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00163b7:	85 c9                	test   ecx,ecx
c00163b9:	74 51                	je     c001640c <Semaphore::acquire()+0xbc>
c00163bb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00163be:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00163c4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00163c7:	90                   	nop
c00163c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163cd:	83 ec 0c             	sub    esp,0xc
c00163d0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00163d3:	68 04 29 02 c0       	push   0xc0022904
c00163d8:	e8 2d 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00163dd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00163e4:	e8 27 fe ff ff       	call   c0016210 <blockTask(TaskState)>
c00163e9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163ee:	83 c4 10             	add    esp,0x10
c00163f1:	83 e8 01             	sub    eax,0x1
c00163f4:	eb 8a                	jmp    c0016380 <Semaphore::acquire()+0x30>
c00163f6:	66 90                	xchg   ax,ax
c00163f8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016402:	e8 09 fc ff ff       	call   c0016010 <schedule()>
c0016407:	eb 8b                	jmp    c0016394 <Semaphore::acquire()+0x44>
c0016409:	8d 76 00             	lea    esi,[esi+0x0]
c001640c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016411:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016414:	eb b2                	jmp    c00163c8 <Semaphore::acquire()+0x78>
c0016416:	66 90                	xchg   ax,ax

c0016418 <taskReturned>:
c0016418:	83 ec 18             	sub    esp,0x18
c001641b:	68 24 29 02 c0       	push   0xc0022924
c0016420:	e8 02 b1 ff ff       	call   c0011527 <KePanic(char const*)>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	6a 02                	push   0x2
c001642d:	e8 de fd ff ff       	call   c0016210 <blockTask(TaskState)>
c0016432:	fa                   	cli    
c0016433:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016438:	83 c0 01             	add    eax,0x1
c001643b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016440:	e8 cb fb ff ff       	call   c0016010 <schedule()>
c0016445:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001644a:	83 c4 10             	add    esp,0x10
c001644d:	83 e8 01             	sub    eax,0x1
c0016450:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016455:	85 c0                	test   eax,eax
c0016457:	75 cf                	jne    c0016428 <taskReturned+0x10>
c0016459:	fb                   	sti    
c001645a:	eb cc                	jmp    c0016428 <taskReturned+0x10>

c001645c <Thr::processFromPID(int)>:
c001645c:	57                   	push   edi
c001645d:	56                   	push   esi
c001645e:	53                   	push   ebx
c001645f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016463:	fa                   	cli    
c0016464:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016472:	83 c1 01             	add    ecx,0x1
c0016475:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001647b:	e8 3c 98 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016480:	83 c4 10             	add    esp,0x10
c0016483:	89 c7                	mov    edi,eax
c0016485:	eb 15                	jmp    c001649c <Thr::processFromPID(int)+0x40>
c0016487:	90                   	nop
c0016488:	83 ec 0c             	sub    esp,0xc
c001648b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016490:	e8 27 98 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016495:	83 c4 10             	add    esp,0x10
c0016498:	39 f8                	cmp    eax,edi
c001649a:	74 50                	je     c00164ec <Thr::processFromPID(int)+0x90>
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164a4:	e8 13 98 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164a9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00164b0:	89 c3                	mov    ebx,eax
c00164b2:	e8 0d 98 00 00       	call   c001fcc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164b7:	58                   	pop    eax
c00164b8:	5a                   	pop    edx
c00164b9:	53                   	push   ebx
c00164ba:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164bf:	e8 bc 98 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164c7:	83 c4 10             	add    esp,0x10
c00164ca:	39 30                	cmp    DWORD PTR [eax],esi
c00164cc:	75 ba                	jne    c0016488 <Thr::processFromPID(int)+0x2c>
c00164ce:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164d3:	83 e8 01             	sub    eax,0x1
c00164d6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164db:	74 0b                	je     c00164e8 <Thr::processFromPID(int)+0x8c>
c00164dd:	8d 76 00             	lea    esi,[esi+0x0]
c00164e0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164e3:	90                   	nop
c00164e4:	5b                   	pop    ebx
c00164e5:	5e                   	pop    esi
c00164e6:	5f                   	pop    edi
c00164e7:	c3                   	ret    
c00164e8:	fb                   	sti    
c00164e9:	eb f5                	jmp    c00164e0 <Thr::processFromPID(int)+0x84>
c00164eb:	90                   	nop
c00164ec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164f1:	8d 50 ff             	lea    edx,[eax-0x1]
c00164f4:	31 c0                	xor    eax,eax
c00164f6:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00164fc:	85 d2                	test   edx,edx
c00164fe:	75 e4                	jne    c00164e4 <Thr::processFromPID(int)+0x88>
c0016500:	fb                   	sti    
c0016501:	5b                   	pop    ebx
c0016502:	5e                   	pop    esi
c0016503:	5f                   	pop    edi
c0016504:	c3                   	ret    
c0016505:	8d 76 00             	lea    esi,[esi+0x0]

c0016508 <unblockTask(ThreadControlBlock*)>:
c0016508:	53                   	push   ebx
c0016509:	83 ec 08             	sub    esp,0x8
c001650c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016510:	fa                   	cli    
c0016511:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016516:	83 c0 01             	add    eax,0x1
c0016519:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001651e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016521:	85 c0                	test   eax,eax
c0016523:	74 67                	je     c001658c <unblockTask(ThreadControlBlock*)+0x84>
c0016525:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016528:	83 f8 01             	cmp    eax,0x1
c001652b:	74 37                	je     c0016564 <unblockTask(ThreadControlBlock*)+0x5c>
c001652d:	83 ec 0c             	sub    esp,0xc
c0016530:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016535:	e8 82 97 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001653a:	83 c4 10             	add    esp,0x10
c001653d:	85 c0                	test   eax,eax
c001653f:	75 1b                	jne    c001655c <unblockTask(ThreadControlBlock*)+0x54>
c0016541:	eb 5d                	jmp    c00165a0 <unblockTask(ThreadControlBlock*)+0x98>
c0016543:	90                   	nop
c0016544:	83 ec 08             	sub    esp,0x8
c0016547:	50                   	push   eax
c0016548:	68 e4 c6 02 c0       	push   0xc002c6e4
c001654d:	e8 8a 9a 00 00       	call   c001ffdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016552:	83 c4 10             	add    esp,0x10
c0016555:	85 c0                	test   eax,eax
c0016557:	74 47                	je     c00165a0 <unblockTask(ThreadControlBlock*)+0x98>
c0016559:	8d 76 00             	lea    esi,[esi+0x0]
c001655c:	39 c3                	cmp    ebx,eax
c001655e:	75 e4                	jne    c0016544 <unblockTask(ThreadControlBlock*)+0x3c>
c0016560:	eb 12                	jmp    c0016574 <unblockTask(ThreadControlBlock*)+0x6c>
c0016562:	66 90                	xchg   ax,ax
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	68 a3 28 02 c0       	push   0xc00228a3
c001656c:	e8 99 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016571:	83 c4 10             	add    esp,0x10
c0016574:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016579:	83 e8 01             	sub    eax,0x1
c001657c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016581:	75 01                	jne    c0016584 <unblockTask(ThreadControlBlock*)+0x7c>
c0016583:	fb                   	sti    
c0016584:	83 c4 08             	add    esp,0x8
c0016587:	5b                   	pop    ebx
c0016588:	c3                   	ret    
c0016589:	8d 76 00             	lea    esi,[esi+0x0]
c001658c:	83 ec 0c             	sub    esp,0xc
c001658f:	68 8c 28 02 c0       	push   0xc002288c
c0016594:	e8 71 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016599:	83 c4 10             	add    esp,0x10
c001659c:	eb d6                	jmp    c0016574 <unblockTask(ThreadControlBlock*)+0x6c>
c001659e:	66 90                	xchg   ax,ax
c00165a0:	83 ec 08             	sub    esp,0x8
c00165a3:	53                   	push   ebx
c00165a4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165a9:	e8 d2 97 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165ae:	83 c4 10             	add    esp,0x10
c00165b1:	eb c1                	jmp    c0016574 <unblockTask(ThreadControlBlock*)+0x6c>
c00165b3:	90                   	nop

c00165b4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00165b4:	55                   	push   ebp
c00165b5:	57                   	push   edi
c00165b6:	56                   	push   esi
c00165b7:	53                   	push   ebx
c00165b8:	83 ec 1c             	sub    esp,0x1c
c00165bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00165bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165c2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00165c8:	85 ed                	test   ebp,ebp
c00165ca:	7e 28                	jle    c00165f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00165cc:	31 f6                	xor    esi,esi
c00165ce:	66 90                	xchg   ax,ax
c00165d0:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	83 c6 01             	add    esi,0x1
c00165dd:	57                   	push   edi
c00165de:	e8 00 15 ff ff       	call   c0007ae3 <free>
c00165e3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165e6:	83 c4 10             	add    esp,0x10
c00165e9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00165ef:	7f df                	jg     c00165d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]
c00165f4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00165fe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016603:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016606:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016609:	d3 c0                	rol    eax,cl
c001660b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016612:	21 c8                	and    eax,ecx
c0016614:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001661b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001661e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016626:	89 f7                	mov    edi,esi
c0016628:	0f 85 72 01 00 00    	jne    c00167a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001662e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016634:	85 ed                	test   ebp,ebp
c0016636:	74 1c                	je     c0016654 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	55                   	push   ebp
c001663c:	e8 f7 ab ff ff       	call   c0011238 <EnvVarContainer::~EnvVarContainer()>
c0016641:	59                   	pop    ecx
c0016642:	5e                   	pop    esi
c0016643:	6a 0c                	push   0xc
c0016645:	55                   	push   ebp
c0016646:	e8 c1 41 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001664b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	89 f7                	mov    edi,esi
c0016653:	90                   	nop
c0016654:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001665a:	85 c0                	test   eax,eax
c001665c:	0f 84 b2 00 00 00    	je     c0016714 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016662:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016665:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016669:	31 c9                	xor    ecx,ecx
c001666b:	eb 17                	jmp    c0016684 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001666d:	8d 76 00             	lea    esi,[esi+0x0]
c0016670:	83 c1 01             	add    ecx,0x1
c0016673:	83 f9 10             	cmp    ecx,0x10
c0016676:	0f 84 98 00 00 00    	je     c0016714 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001667c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016682:	66 90                	xchg   ax,ax
c0016684:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001668b:	d3 fa                	sar    edx,cl
c001668d:	80 e2 01             	and    dl,0x1
c0016690:	74 de                	je     c0016670 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016692:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016695:	c1 e2 05             	shl    edx,0x5
c0016698:	29 ca                	sub    edx,ecx
c001669a:	01 d0                	add    eax,edx
c001669c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00166a2:	83 fd 07             	cmp    ebp,0x7
c00166a5:	75 c9                	jne    c0016670 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166a7:	05 40 02 00 00       	add    eax,0x240
c00166ac:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00166af:	83 fd ff             	cmp    ebp,0xffffffff
c00166b2:	0f 8c f0 00 00 00    	jl     c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00166b8:	0f 84 ae 01 00 00    	je     c001686c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00166be:	85 ed                	test   ebp,ebp
c00166c0:	0f 84 92 01 00 00    	je     c0016858 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00166c6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00166c8:	75 a6                	jne    c0016670 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00166ce:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166d4:	01 d0                	add    eax,edx
c00166d6:	66 90                	xchg   ax,ax
c00166d8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00166dc:	83 ec 0c             	sub    esp,0xc
c00166df:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00166e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00166ee:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00166f5:	50                   	push   eax
c00166f6:	e8 0d fe ff ff       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c00166fb:	83 c4 10             	add    esp,0x10
c00166fe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016701:	89 f7                	mov    edi,esi
c0016703:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016707:	83 c1 01             	add    ecx,0x1
c001670a:	83 f9 10             	cmp    ecx,0x10
c001670d:	0f 85 69 ff ff ff    	jne    c001667c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016713:	90                   	nop
c0016714:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001671a:	85 c0                	test   eax,eax
c001671c:	74 62                	je     c0016780 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001671e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016724:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001672a:	74 54                	je     c0016780 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016734:	e8 83 95 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016739:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016740:	89 c7                	mov    edi,eax
c0016742:	e8 59 95 00 00       	call   c001fca0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016747:	83 c4 10             	add    esp,0x10
c001674a:	84 c0                	test   al,al
c001674c:	0f 84 ce 00 00 00    	je     c0016820 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016752:	66 90                	xchg   ax,ax
c0016754:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016757:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001675d:	85 d2                	test   edx,edx
c001675f:	74 0f                	je     c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016761:	8b 02                	mov    eax,DWORD PTR [edx]
c0016763:	83 ec 0c             	sub    esp,0xc
c0016766:	52                   	push   edx
c0016767:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001676a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001676d:	83 c4 10             	add    esp,0x10
c0016770:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001677a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001677d:	8d 76 00             	lea    esi,[esi+0x0]
c0016780:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016786:	85 db                	test   ebx,ebx
c0016788:	74 16                	je     c00167a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	53                   	push   ebx
c001678e:	e8 fd 33 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016793:	58                   	pop    eax
c0016794:	5a                   	pop    edx
c0016795:	6a 14                	push   0x14
c0016797:	53                   	push   ebx
c0016798:	e8 6f 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001679d:	83 c4 10             	add    esp,0x10
c00167a0:	83 c4 1c             	add    esp,0x1c
c00167a3:	5b                   	pop    ebx
c00167a4:	5e                   	pop    esi
c00167a5:	5f                   	pop    edi
c00167a6:	5d                   	pop    ebp
c00167a7:	c3                   	ret    
c00167a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167ac:	83 ec 0c             	sub    esp,0xc
c00167af:	68 58 29 02 c0       	push   0xc0022958
c00167b4:	e8 6e ad ff ff       	call   c0011527 <KePanic(char const*)>
c00167b9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167bc:	83 c4 10             	add    esp,0x10
c00167bf:	89 f7                	mov    edi,esi
c00167c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167c5:	e9 a6 fe ff ff       	jmp    c0016670 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167ca:	66 90                	xchg   ax,ax
c00167cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167d2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00167d8:	75 1e                	jne    c00167f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	68 c0 29 02 c0       	push   0xc00229c0
c00167e2:	e8 23 41 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00167e7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00167ee:	e8 1d fa ff ff       	call   c0016210 <blockTask(TaskState)>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	66 90                	xchg   ax,ax
c00167f8:	83 ec 08             	sub    esp,0x8
c00167fb:	56                   	push   esi
c00167fc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016801:	e8 7a 95 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016806:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001680d:	e8 aa 94 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016812:	83 c4 10             	add    esp,0x10
c0016815:	39 f8                	cmp    eax,edi
c0016817:	0f 84 37 ff ff ff    	je     c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001681d:	8d 76 00             	lea    esi,[esi+0x0]
c0016820:	83 ec 0c             	sub    esp,0xc
c0016823:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016828:	e8 8f 94 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001682d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016834:	89 c6                	mov    esi,eax
c0016836:	e8 89 94 00 00       	call   c001fcc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	39 f3                	cmp    ebx,esi
c0016840:	74 b6                	je     c00167f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016842:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016845:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016848:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001684e:	75 a8                	jne    c00167f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016850:	e9 77 ff ff ff       	jmp    c00167cc <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016855:	8d 76 00             	lea    esi,[esi+0x0]
c0016858:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	68 8c 29 02 c0       	push   0xc002298c
c0016864:	e9 4b ff ff ff       	jmp    c00167b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016869:	8d 76 00             	lea    esi,[esi+0x0]
c001686c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016870:	8b 36                	mov    esi,DWORD PTR [esi]
c0016872:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016875:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016878:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001687e:	01 d7                	add    edi,edx
c0016880:	89 f8                	mov    eax,edi
c0016882:	e9 51 fe ff ff       	jmp    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016887:	90                   	nop

c0016888 <cleanerTaskFunction(void*)>:
c0016888:	53                   	push   ebx
c0016889:	83 ec 08             	sub    esp,0x8
c001688c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016891:	83 e8 01             	sub    eax,0x1
c0016894:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016899:	75 01                	jne    c001689c <cleanerTaskFunction(void*)+0x14>
c001689b:	fb                   	sti    
c001689c:	fa                   	cli    
c001689d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168a2:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00168a9:	8d 50 01             	lea    edx,[eax+0x1]
c00168ac:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168b2:	0f 84 c4 00 00 00    	je     c001697c <cleanerTaskFunction(void*)+0xf4>
c00168b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168bd:	85 c0                	test   eax,eax
c00168bf:	75 03                	jne    c00168c4 <cleanerTaskFunction(void*)+0x3c>
c00168c1:	fb                   	sti    
c00168c2:	66 90                	xchg   ax,ax
c00168c4:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00168cb:	fa                   	cli    
c00168cc:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00168d2:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00168d8:	83 c2 01             	add    edx,0x1
c00168db:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168e1:	83 c1 01             	add    ecx,0x1
c00168e4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00168ea:	fa                   	cli    
c00168eb:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00168f1:	83 c3 01             	add    ebx,0x1
c00168f4:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00168fa:	eb 28                	jmp    c0016924 <cleanerTaskFunction(void*)+0x9c>
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	68 cc c6 02 c0       	push   0xc002c6cc
c0016904:	e8 b3 93 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016909:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016910:	89 c3                	mov    ebx,eax
c0016912:	e8 ad 93 00 00       	call   c001fcc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001691a:	e8 95 fc ff ff       	call   c00165b4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	66 90                	xchg   ax,ax
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	68 cc c6 02 c0       	push   0xc002c6cc
c001692c:	e8 6f 93 00 00       	call   c001fca0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	84 c0                	test   al,al
c0016936:	74 c4                	je     c00168fc <cleanerTaskFunction(void*)+0x74>
c0016938:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001693d:	83 e8 01             	sub    eax,0x1
c0016940:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016945:	75 01                	jne    c0016948 <cleanerTaskFunction(void*)+0xc0>
c0016947:	fb                   	sti    
c0016948:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001694d:	83 e8 01             	sub    eax,0x1
c0016950:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016955:	0f 85 31 ff ff ff    	jne    c001688c <cleanerTaskFunction(void*)+0x4>
c001695b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016960:	85 c0                	test   eax,eax
c0016962:	0f 84 24 ff ff ff    	je     c001688c <cleanerTaskFunction(void*)+0x4>
c0016968:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016972:	e8 99 f6 ff ff       	call   c0016010 <schedule()>
c0016977:	e9 10 ff ff ff       	jmp    c001688c <cleanerTaskFunction(void*)+0x4>
c001697c:	83 ec 0c             	sub    esp,0xc
c001697f:	6a 02                	push   0x2
c0016981:	e8 62 f8 ff ff       	call   c00161e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016986:	83 c4 10             	add    esp,0x10
c0016989:	e9 36 ff ff ff       	jmp    c00168c4 <cleanerTaskFunction(void*)+0x3c>
c001698e:	66 90                	xchg   ax,ax

c0016990 <terminateTask(int)>:
c0016990:	83 ec 14             	sub    esp,0x14
c0016993:	fa                   	cli    
c0016994:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001699a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169a0:	83 c2 01             	add    edx,0x1
c00169a3:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169a9:	83 c1 01             	add    ecx,0x1
c00169ac:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169b2:	fa                   	cli    
c00169b3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00169bc:	83 c0 01             	add    eax,0x1
c00169bf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169c9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00169cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169d1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00169d4:	50                   	push   eax
c00169d5:	68 cc c6 02 c0       	push   0xc002c6cc
c00169da:	e8 a1 93 00 00       	call   c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169e4:	83 c4 10             	add    esp,0x10
c00169e7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00169ee:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c00169f3:	85 c0                	test   eax,eax
c00169f5:	74 65                	je     c0016a5c <terminateTask(int)+0xcc>
c00169f7:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c00169fe:	83 ec 0c             	sub    esp,0xc
c0016a01:	50                   	push   eax
c0016a02:	e8 01 fb ff ff       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	66 90                	xchg   ax,ax
c0016a0c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a11:	83 e8 01             	sub    eax,0x1
c0016a14:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a19:	75 01                	jne    c0016a1c <terminateTask(int)+0x8c>
c0016a1b:	fb                   	sti    
c0016a1c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a21:	83 e8 01             	sub    eax,0x1
c0016a24:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a29:	75 09                	jne    c0016a34 <terminateTask(int)+0xa4>
c0016a2b:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016a32:	75 3c                	jne    c0016a70 <terminateTask(int)+0xe0>
c0016a34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a39:	83 e8 01             	sub    eax,0x1
c0016a3c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a41:	75 01                	jne    c0016a44 <terminateTask(int)+0xb4>
c0016a43:	fb                   	sti    
c0016a44:	fa                   	cli    
c0016a45:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a4a:	83 c0 01             	add    eax,0x1
c0016a4d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a52:	66 90                	xchg   ax,ax
c0016a54:	e8 b7 f5 ff ff       	call   c0016010 <schedule()>
c0016a59:	eb d9                	jmp    c0016a34 <terminateTask(int)+0xa4>
c0016a5b:	90                   	nop
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	68 ba 28 02 c0       	push   0xc00228ba
c0016a64:	e8 a1 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016a69:	83 c4 10             	add    esp,0x10
c0016a6c:	eb 9e                	jmp    c0016a0c <terminateTask(int)+0x7c>
c0016a6e:	66 90                	xchg   ax,ax
c0016a70:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a7a:	eb d8                	jmp    c0016a54 <terminateTask(int)+0xc4>

c0016a7c <Thr::terminateFromIRQ(int)>:
c0016a7c:	83 ec 18             	sub    esp,0x18
c0016a7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a83:	50                   	push   eax
c0016a84:	e8 07 ff ff ff       	call   c0016990 <terminateTask(int)>
c0016a89:	90                   	nop
c0016a8a:	66 90                	xchg   ax,ax

c0016a8c <Semaphore::release()>:
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a93:	fa                   	cli    
c0016a94:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a99:	83 c0 01             	add    eax,0x1
c0016a9c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016aa6:	8d 48 01             	lea    ecx,[eax+0x1]
c0016aa9:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016aaf:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016ab2:	85 c9                	test   ecx,ecx
c0016ab4:	74 42                	je     c0016af8 <Semaphore::release()+0x6c>
c0016ab6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016ab9:	83 ec 0c             	sub    esp,0xc
c0016abc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016abf:	51                   	push   ecx
c0016ac0:	e8 43 fa ff ff       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c0016ac5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016aca:	83 c4 10             	add    esp,0x10
c0016acd:	83 e8 01             	sub    eax,0x1
c0016ad0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ad5:	85 c0                	test   eax,eax
c0016ad7:	75 0b                	jne    c0016ae4 <Semaphore::release()+0x58>
c0016ad9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016ade:	85 c0                	test   eax,eax
c0016ae0:	75 22                	jne    c0016b04 <Semaphore::release()+0x78>
c0016ae2:	66 90                	xchg   ax,ax
c0016ae4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ae9:	83 e8 01             	sub    eax,0x1
c0016aec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016af1:	75 01                	jne    c0016af4 <Semaphore::release()+0x68>
c0016af3:	fb                   	sti    
c0016af4:	83 c4 0c             	add    esp,0xc
c0016af7:	c3                   	ret    
c0016af8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016afb:	83 e9 01             	sub    ecx,0x1
c0016afe:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b01:	eb cd                	jmp    c0016ad0 <Semaphore::release()+0x44>
c0016b03:	90                   	nop
c0016b04:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b0e:	e8 fd f4 ff ff       	call   c0016010 <schedule()>
c0016b13:	eb cf                	jmp    c0016ae4 <Semaphore::release()+0x58>
c0016b15:	8d 76 00             	lea    esi,[esi+0x0]

c0016b18 <__static_initialization_and_destruction_0(int, int)>:
c0016b18:	83 ec 0c             	sub    esp,0xc
c0016b1b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b20:	0f 85 8e 00 00 00    	jne    c0016bb4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b26:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b2e:	0f 85 80 00 00 00    	jne    c0016bb4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b3c:	e8 f3 94 00 00       	call   c0020034 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b41:	83 c4 10             	add    esp,0x10
c0016b44:	83 ec 04             	sub    esp,0x4
c0016b47:	68 90 35 02 c0       	push   0xc0023590
c0016b4c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b51:	68 e4 ff 01 c0       	push   0xc001ffe4
c0016b56:	e8 61 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	83 ec 0c             	sub    esp,0xc
c0016b61:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b66:	e8 c9 94 00 00       	call   c0020034 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	83 ec 04             	sub    esp,0x4
c0016b71:	68 90 35 02 c0       	push   0xc0023590
c0016b76:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b7b:	68 e4 ff 01 c0       	push   0xc001ffe4
c0016b80:	e8 37 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b85:	83 c4 10             	add    esp,0x10
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b90:	e8 9f 94 00 00       	call   c0020034 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b95:	83 c4 10             	add    esp,0x10
c0016b98:	83 ec 04             	sub    esp,0x4
c0016b9b:	68 90 35 02 c0       	push   0xc0023590
c0016ba0:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ba5:	68 e4 ff 01 c0       	push   0xc001ffe4
c0016baa:	e8 0d 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	66 90                	xchg   ax,ax
c0016bb4:	90                   	nop
c0016bb5:	83 c4 0c             	add    esp,0xc
c0016bb8:	c3                   	ret    
c0016bb9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bbc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016bbc:	83 ec 0c             	sub    esp,0xc
c0016bbf:	83 ec 08             	sub    esp,0x8
c0016bc2:	68 ff ff 00 00       	push   0xffff
c0016bc7:	6a 01                	push   0x1
c0016bc9:	e8 4a ff ff ff       	call   c0016b18 <__static_initialization_and_destruction_0(int, int)>
c0016bce:	83 c4 10             	add    esp,0x10
c0016bd1:	83 c4 0c             	add    esp,0xc
c0016bd4:	c3                   	ret    

c0016bd5 <Vm::inbv(unsigned short)>:
c0016bd5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016bd9:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016bde:	75 06                	jne    c0016be6 <Vm::inbv(unsigned short)+0x11>
c0016be0:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016be5:	c3                   	ret    
c0016be6:	ec                   	in     al,dx
c0016be7:	c3                   	ret    

c0016be8 <Vm::outbv(unsigned short, unsigned char)>:
c0016be8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016bec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bf0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016bf5:	75 25                	jne    c0016c1c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016bf7:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016bfd:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c03:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c06:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016c0c:	83 fa 20             	cmp    edx,0x20
c0016c0f:	75 0c                	jne    c0016c1d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c11:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016c1b:	c3                   	ret    
c0016c1c:	ee                   	out    dx,al
c0016c1d:	c3                   	ret    

c0016c1e <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c1e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c23:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c28:	c1 e0 04             	shl    eax,0x4
c0016c2b:	01 d0                	add    eax,edx
c0016c2d:	c3                   	ret    

c0016c2e <Vm::getSegment(unsigned int)>:
c0016c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c32:	c1 e8 10             	shr    eax,0x10
c0016c35:	c3                   	ret    

c0016c36 <Vm::getOffset(unsigned int)>:
c0016c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c3a:	c3                   	ret    

c0016c3b <Vm::mainloop2()>:
c0016c3b:	83 ec 18             	sub    esp,0x18
c0016c3e:	fa                   	cli    
c0016c3f:	6a 02                	push   0x2
c0016c41:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c47:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016c4e:	e8 95 f5 ff ff       	call   c00161e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c58:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016c5c:	52                   	push   edx
c0016c5d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016c61:	52                   	push   edx
c0016c62:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016c66:	52                   	push   edx
c0016c67:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016c6b:	50                   	push   eax
c0016c6c:	e8 9e 95 fe ff       	call   c000020f <goToVM86>
c0016c71:	83 c4 2c             	add    esp,0x2c
c0016c74:	c3                   	ret    

c0016c75 <Vm::mainVm8086Loop(void*)>:
c0016c75:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c7a:	48                   	dec    eax
c0016c7b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c80:	75 01                	jne    c0016c83 <Vm::mainVm8086Loop(void*)+0xe>
c0016c82:	fb                   	sti    
c0016c83:	eb b6                	jmp    c0016c3b <Vm::mainloop2()>

c0016c85 <Vm::mainloop3(unsigned long)>:
c0016c85:	83 ec 18             	sub    esp,0x18
c0016c88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c8c:	fa                   	cli    
c0016c8d:	6a 02                	push   0x2
c0016c8f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c95:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016c9c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016ca1:	e8 42 f5 ff ff       	call   c00161e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ca6:	83 c4 1c             	add    esp,0x1c
c0016ca9:	eb 90                	jmp    c0016c3b <Vm::mainloop2()>

c0016cab <Vm::initialise8086()>:
c0016cab:	83 ec 0c             	sub    esp,0xc
c0016cae:	68 80 00 00 00       	push   0x80
c0016cb3:	6a 00                	push   0x0
c0016cb5:	68 75 6c 01 c0       	push   0xc0016c75
c0016cba:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016cc0:	e8 ff f0 ff ff       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0016cc5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016ccc:	68 00 01 00 00       	push   0x100
c0016cd1:	6a 00                	push   0x0
c0016cd3:	6a 00                	push   0x0
c0016cd5:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016cda:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016cdf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ce5:	e8 1e 32 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016cea:	83 c4 2c             	add    esp,0x2c
c0016ced:	c3                   	ret    

c0016cee <Vm::finish8086()>:
c0016cee:	53                   	push   ebx
c0016cef:	83 ec 08             	sub    esp,0x8
c0016cf2:	fa                   	cli    
c0016cf3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016cf9:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d00:	75 15                	jne    c0016d17 <Vm::finish8086()+0x29>
c0016d02:	e8 09 f3 ff ff       	call   c0016010 <schedule()>
c0016d07:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d0c:	48                   	dec    eax
c0016d0d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d12:	75 de                	jne    c0016cf2 <Vm::finish8086()+0x4>
c0016d14:	fb                   	sti    
c0016d15:	eb db                	jmp    c0016cf2 <Vm::finish8086()+0x4>
c0016d17:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016d1e:	83 ec 0c             	sub    esp,0xc
c0016d21:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016d27:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016d2d:	e8 d6 f7 ff ff       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c0016d32:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016d3d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016d43:	85 d2                	test   edx,edx
c0016d45:	75 01                	jne    c0016d48 <Vm::finish8086()+0x5a>
c0016d47:	fb                   	sti    
c0016d48:	83 c4 08             	add    esp,0x8
c0016d4b:	89 d8                	mov    eax,ebx
c0016d4d:	5b                   	pop    ebx
c0016d4e:	c3                   	ret    

c0016d4f <Vm::getOutput8086(unsigned char*)>:
c0016d4f:	57                   	push   edi
c0016d50:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d56:	56                   	push   esi
c0016d57:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016d5c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016d60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d62:	5e                   	pop    esi
c0016d63:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016d68:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016d72:	5f                   	pop    edi
c0016d73:	c3                   	ret    

c0016d74 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d74:	55                   	push   ebp
c0016d75:	57                   	push   edi
c0016d76:	56                   	push   esi
c0016d77:	53                   	push   ebx
c0016d78:	83 ec 0c             	sub    esp,0xc
c0016d7b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016d7f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016d83:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016d8b:	fa                   	cli    
c0016d8c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d92:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016d99:	75 15                	jne    c0016db0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016d9b:	e8 70 f2 ff ff       	call   c0016010 <schedule()>
c0016da0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016da5:	48                   	dec    eax
c0016da6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016dab:	75 de                	jne    c0016d8b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016dad:	fb                   	sti    
c0016dae:	eb db                	jmp    c0016d8b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016db0:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016dba:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016dbf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016dc3:	0f b7 ff             	movzx  edi,di
c0016dc6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016dca:	0f b7 f6             	movzx  esi,si
c0016dcd:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016dd1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016dd5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016dd9:	50                   	push   eax
c0016dda:	6a 20                	push   0x20
c0016ddc:	6a 00                	push   0x0
c0016dde:	68 40 c7 02 c0       	push   0xc002c740
c0016de3:	e8 08 97 fe ff       	call   c00004f0 <memset>
c0016de8:	5a                   	pop    edx
c0016de9:	59                   	pop    ecx
c0016dea:	57                   	push   edi
c0016deb:	56                   	push   esi
c0016dec:	e8 2d fe ff ff       	call   c0016c1e <Vm::realToLinear(unsigned short, unsigned short)>
c0016df1:	83 c4 10             	add    esp,0x10
c0016df4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016df8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016dfc:	89 c7                	mov    edi,eax
c0016dfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e00:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e07:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e0c:	48                   	dec    eax
c0016e0d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e12:	75 01                	jne    c0016e15 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016e14:	fb                   	sti    
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e1e:	e8 e5 f6 ff ff       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c0016e23:	83 c4 1c             	add    esp,0x1c
c0016e26:	b0 01                	mov    al,0x1
c0016e28:	5b                   	pop    ebx
c0016e29:	5e                   	pop    esi
c0016e2a:	5f                   	pop    edi
c0016e2b:	5d                   	pop    ebp
c0016e2c:	c3                   	ret    

c0016e2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e2d:	55                   	push   ebp
c0016e2e:	57                   	push   edi
c0016e2f:	56                   	push   esi
c0016e30:	53                   	push   ebx
c0016e31:	83 ec 34             	sub    esp,0x34
c0016e34:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016e38:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016e3c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016e40:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016e44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e4c:	68 e8 29 02 c0       	push   0xc00229e8
c0016e51:	e8 b4 3a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016e56:	83 c4 10             	add    esp,0x10
c0016e59:	fa                   	cli    
c0016e5a:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016e60:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e66:	84 db                	test   bl,bl
c0016e68:	75 15                	jne    c0016e7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016e6a:	e8 a1 f1 ff ff       	call   c0016010 <schedule()>
c0016e6f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e74:	48                   	dec    eax
c0016e75:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e7a:	75 dd                	jne    c0016e59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e7c:	fb                   	sti    
c0016e7d:	eb da                	jmp    c0016e59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e7f:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e8d:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e92:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016e96:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e9a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e9e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ea2:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ea6:	50                   	push   eax
c0016ea7:	6a 20                	push   0x20
c0016ea9:	6a 00                	push   0x0
c0016eab:	68 40 c7 02 c0       	push   0xc002c740
c0016eb0:	e8 3b 96 fe ff       	call   c00004f0 <memset>
c0016eb5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ebc:	e8 12 0c ff ff       	call   c0007ad3 <malloc>
c0016ec1:	83 c4 0c             	add    esp,0xc
c0016ec4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016eca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ece:	89 c5                	mov    ebp,eax
c0016ed0:	50                   	push   eax
c0016ed1:	e8 0c 4c ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c0016ed6:	83 c4 10             	add    esp,0x10
c0016ed9:	85 ed                	test   ebp,ebp
c0016edb:	75 0a                	jne    c0016ee7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016edd:	83 ec 0c             	sub    esp,0xc
c0016ee0:	68 0a 2a 02 c0       	push   0xc0022a0a
c0016ee5:	eb 2b                	jmp    c0016f12 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016ee7:	50                   	push   eax
c0016ee8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016eec:	50                   	push   eax
c0016eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ef1:	50                   	push   eax
c0016ef2:	55                   	push   ebp
c0016ef3:	e8 0a 4f ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c0016ef8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016efc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f00:	83 c4 10             	add    esp,0x10
c0016f03:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016f08:	74 27                	je     c0016f31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016f0a:	83 ec 0c             	sub    esp,0xc
c0016f0d:	68 1e 2a 02 c0       	push   0xc0022a1e
c0016f12:	e8 10 a6 ff ff       	call   c0011527 <KePanic(char const*)>
c0016f17:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f1c:	83 c4 10             	add    esp,0x10
c0016f1f:	48                   	dec    eax
c0016f20:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f25:	85 c0                	test   eax,eax
c0016f27:	75 01                	jne    c0016f2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f29:	fb                   	sti    
c0016f2a:	31 db                	xor    ebx,ebx
c0016f2c:	e9 90 00 00 00       	jmp    c0016fc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f31:	51                   	push   ecx
c0016f32:	51                   	push   ecx
c0016f33:	6a 01                	push   0x1
c0016f35:	55                   	push   ebp
c0016f36:	e8 c5 4b ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c0016f3b:	83 c4 10             	add    esp,0x10
c0016f3e:	85 c0                	test   eax,eax
c0016f40:	74 26                	je     c0016f68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016f42:	83 ec 0c             	sub    esp,0xc
c0016f45:	68 37 2a 02 c0       	push   0xc0022a37
c0016f4a:	e8 d8 a5 ff ff       	call   c0011527 <KePanic(char const*)>
c0016f4f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f54:	83 c4 10             	add    esp,0x10
c0016f57:	48                   	dec    eax
c0016f58:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f5d:	85 c0                	test   eax,eax
c0016f5f:	75 c9                	jne    c0016f2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f61:	fb                   	sti    
c0016f62:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016f66:	eb 59                	jmp    c0016fc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f68:	50                   	push   eax
c0016f69:	0f b7 ff             	movzx  edi,di
c0016f6c:	50                   	push   eax
c0016f6d:	0f b7 f6             	movzx  esi,si
c0016f70:	57                   	push   edi
c0016f71:	56                   	push   esi
c0016f72:	e8 a7 fc ff ff       	call   c0016c1e <Vm::realToLinear(unsigned short, unsigned short)>
c0016f77:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f7a:	5a                   	pop    edx
c0016f7b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016f7f:	56                   	push   esi
c0016f80:	50                   	push   eax
c0016f81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f89:	55                   	push   ebp
c0016f8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f8d:	83 c4 14             	add    esp,0x14
c0016f90:	55                   	push   ebp
c0016f91:	e8 c8 4b ff ff       	call   c000bb5e <File::close()>
c0016f96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f9b:	83 c4 10             	add    esp,0x10
c0016f9e:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016fa5:	48                   	dec    eax
c0016fa6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fab:	85 c0                	test   eax,eax
c0016fad:	75 01                	jne    c0016fb0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016faf:	fb                   	sti    
c0016fb0:	83 ec 0c             	sub    esp,0xc
c0016fb3:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016fb9:	e8 4a f5 ff ff       	call   c0016508 <unblockTask(ThreadControlBlock*)>
c0016fbe:	83 c4 10             	add    esp,0x10
c0016fc1:	83 c4 2c             	add    esp,0x2c
c0016fc4:	88 d8                	mov    al,bl
c0016fc6:	5b                   	pop    ebx
c0016fc7:	5e                   	pop    esi
c0016fc8:	5f                   	pop    edi
c0016fc9:	5d                   	pop    ebp
c0016fca:	c3                   	ret    

c0016fcb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016fcb:	57                   	push   edi
c0016fcc:	56                   	push   esi
c0016fcd:	53                   	push   ebx
c0016fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016fd6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016fda:	83 e8 06             	sub    eax,0x6
c0016fdd:	0f b7 c0             	movzx  eax,ax
c0016fe0:	50                   	push   eax
c0016fe1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016fe6:	50                   	push   eax
c0016fe7:	e8 32 fc ff ff       	call   c0016c1e <Vm::realToLinear(unsigned short, unsigned short)>
c0016fec:	5a                   	pop    edx
c0016fed:	59                   	pop    ecx
c0016fee:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016ff1:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016ff4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016ff7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ffd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017000:	8d 51 02             	lea    edx,[ecx+0x2]
c0017003:	66 89 10             	mov    WORD PTR [eax],dx
c0017006:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001700a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001700e:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017012:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017015:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017019:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001701f:	89 f1                	mov    ecx,esi
c0017021:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017025:	89 f2                	mov    edx,esi
c0017027:	0f b6 d6             	movzx  edx,dh
c001702a:	0f b6 f1             	movzx  esi,cl
c001702d:	74 0a                	je     c0017039 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001702f:	c1 e2 08             	shl    edx,0x8
c0017032:	09 f2                	or     edx,esi
c0017034:	80 ce 02             	or     dh,0x2
c0017037:	eb 08                	jmp    c0017041 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017039:	c1 e2 08             	shl    edx,0x8
c001703c:	09 f2                	or     edx,esi
c001703e:	80 e6 fd             	and    dh,0xfd
c0017041:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017045:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001704a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001704e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017056:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017059:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017061:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017064:	5b                   	pop    ebx
c0017065:	5e                   	pop    esi
c0017066:	5f                   	pop    edi
c0017067:	c3                   	ret    

c0017068 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017068:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001706d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017072:	c1 e0 04             	shl    eax,0x4
c0017075:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017078:	c3                   	ret    

c0017079 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017079:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001707e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017083:	c1 e0 04             	shl    eax,0x4
c0017086:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001708a:	c3                   	ret    

c001708b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001708b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017090:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017095:	c1 e0 04             	shl    eax,0x4
c0017098:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001709b:	c3                   	ret    

c001709c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001709c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170a6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00170aa:	c1 e0 04             	shl    eax,0x4
c00170ad:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00170b0:	c3                   	ret    

c00170b1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00170b1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170b6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170bf:	c1 e0 04             	shl    eax,0x4
c00170c2:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00170c6:	c3                   	ret    

c00170c7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00170c7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170cc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170d5:	c1 e0 04             	shl    eax,0x4
c00170d8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00170db:	c3                   	ret    

c00170dc <Vm::faultHandler(regs*)>:
c00170dc:	55                   	push   ebp
c00170dd:	57                   	push   edi
c00170de:	56                   	push   esi
c00170df:	53                   	push   ebx
c00170e0:	83 ec 2c             	sub    esp,0x2c
c00170e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00170e7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170ea:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00170ee:	0f b7 f8             	movzx  edi,ax
c00170f1:	0f b7 c0             	movzx  eax,ax
c00170f4:	52                   	push   edx
c00170f5:	50                   	push   eax
c00170f6:	e8 23 fb ff ff       	call   c0016c1e <Vm::realToLinear(unsigned short, unsigned short)>
c00170fb:	5a                   	pop    edx
c00170fc:	59                   	pop    ecx
c00170fd:	89 c1                	mov    ecx,eax
c00170ff:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017102:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017106:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001710b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001710f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017112:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017116:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001711b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001711f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017123:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017127:	e8 f2 fa ff ff       	call   c0016c1e <Vm::realToLinear(unsigned short, unsigned short)>
c001712c:	5e                   	pop    esi
c001712d:	be 06 00 00 00       	mov    esi,0x6
c0017132:	5d                   	pop    ebp
c0017133:	31 ed                	xor    ebp,ebp
c0017135:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001713a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001713d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017143:	0f 84 74 02 00 00    	je     c00173bd <Vm::faultHandler(regs*)+0x2e1>
c0017149:	0f 87 94 00 00 00    	ja     c00171e3 <Vm::faultHandler(regs*)+0x107>
c001714f:	83 fa 66             	cmp    edx,0x66
c0017152:	0f 84 e2 01 00 00    	je     c001733a <Vm::faultHandler(regs*)+0x25e>
c0017158:	77 47                	ja     c00171a1 <Vm::faultHandler(regs*)+0xc5>
c001715a:	83 fa 36             	cmp    edx,0x36
c001715d:	0f 84 ca 01 00 00    	je     c001732d <Vm::faultHandler(regs*)+0x251>
c0017163:	77 1a                	ja     c001717f <Vm::faultHandler(regs*)+0xa3>
c0017165:	83 fa 26             	cmp    edx,0x26
c0017168:	0f 84 98 01 00 00    	je     c0017306 <Vm::faultHandler(regs*)+0x22a>
c001716e:	83 fa 2e             	cmp    edx,0x2e
c0017171:	0f 85 27 06 00 00    	jne    c001779e <Vm::faultHandler(regs*)+0x6c2>
c0017177:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001717a:	31 f6                	xor    esi,esi
c001717c:	41                   	inc    ecx
c001717d:	eb bb                	jmp    c001713a <Vm::faultHandler(regs*)+0x5e>
c001717f:	83 fa 64             	cmp    edx,0x64
c0017182:	0f 84 8b 01 00 00    	je     c0017313 <Vm::faultHandler(regs*)+0x237>
c0017188:	0f 87 92 01 00 00    	ja     c0017320 <Vm::faultHandler(regs*)+0x244>
c001718e:	83 fa 3e             	cmp    edx,0x3e
c0017191:	0f 85 07 06 00 00    	jne    c001779e <Vm::faultHandler(regs*)+0x6c2>
c0017197:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001719a:	be 01 00 00 00       	mov    esi,0x1
c001719f:	eb db                	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c00171a1:	83 fa 6d             	cmp    edx,0x6d
c00171a4:	0f 84 34 03 00 00    	je     c00174de <Vm::faultHandler(regs*)+0x402>
c00171aa:	77 17                	ja     c00171c3 <Vm::faultHandler(regs*)+0xe7>
c00171ac:	83 fa 67             	cmp    edx,0x67
c00171af:	0f 84 92 01 00 00    	je     c0017347 <Vm::faultHandler(regs*)+0x26b>
c00171b5:	83 fa 6c             	cmp    edx,0x6c
c00171b8:	0f 84 b1 02 00 00    	je     c001746f <Vm::faultHandler(regs*)+0x393>
c00171be:	e9 db 05 00 00       	jmp    c001779e <Vm::faultHandler(regs*)+0x6c2>
c00171c3:	83 fa 6f             	cmp    edx,0x6f
c00171c6:	0f 84 40 04 00 00    	je     c001760c <Vm::faultHandler(regs*)+0x530>
c00171cc:	0f 82 a2 03 00 00    	jb     c0017574 <Vm::faultHandler(regs*)+0x498>
c00171d2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00171d8:	0f 84 76 01 00 00    	je     c0017354 <Vm::faultHandler(regs*)+0x278>
c00171de:	e9 bb 05 00 00       	jmp    c001779e <Vm::faultHandler(regs*)+0x6c2>
c00171e3:	81 fa ec 00 00 00    	cmp    edx,0xec
c00171e9:	0f 84 57 05 00 00    	je     c0017746 <Vm::faultHandler(regs*)+0x66a>
c00171ef:	0f 87 a9 00 00 00    	ja     c001729e <Vm::faultHandler(regs*)+0x1c2>
c00171f5:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00171fb:	0f 84 d6 04 00 00    	je     c00176d7 <Vm::faultHandler(regs*)+0x5fb>
c0017201:	77 78                	ja     c001727b <Vm::faultHandler(regs*)+0x19f>
c0017203:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017209:	0f 84 0e 02 00 00    	je     c001741d <Vm::faultHandler(regs*)+0x341>
c001720f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017215:	0f 85 83 05 00 00    	jne    c001779e <Vm::faultHandler(regs*)+0x6c2>
c001721b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001721f:	89 d1                	mov    ecx,edx
c0017221:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017224:	c1 e1 08             	shl    ecx,0x8
c0017227:	09 ca                	or     edx,ecx
c0017229:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001722c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017230:	89 d1                	mov    ecx,edx
c0017232:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017236:	c1 e1 08             	shl    ecx,0x8
c0017239:	09 ca                	or     edx,ecx
c001723b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001723e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017242:	89 d1                	mov    ecx,edx
c0017244:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017248:	c1 e1 08             	shl    ecx,0x8
c001724b:	09 ca                	or     edx,ecx
c001724d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017253:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017256:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001725a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017260:	d1 e8                	shr    eax,1
c0017262:	83 e0 01             	and    eax,0x1
c0017265:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017268:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001726b:	83 c0 06             	add    eax,0x6
c001726e:	25 ff ff 00 00       	and    eax,0xffff
c0017273:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017276:	e9 1f 05 00 00       	jmp    c001779a <Vm::faultHandler(regs*)+0x6be>
c001727b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017281:	0f 84 95 04 00 00    	je     c001771c <Vm::faultHandler(regs*)+0x640>
c0017287:	0f 82 66 04 00 00    	jb     c00176f3 <Vm::faultHandler(regs*)+0x617>
c001728d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017293:	0f 84 9a 04 00 00    	je     c0017733 <Vm::faultHandler(regs*)+0x657>
c0017299:	e9 00 05 00 00       	jmp    c001779e <Vm::faultHandler(regs*)+0x6c2>
c001729e:	81 fa ef 00 00 00    	cmp    edx,0xef
c00172a4:	0f 84 dd 04 00 00    	je     c0017787 <Vm::faultHandler(regs*)+0x6ab>
c00172aa:	77 2e                	ja     c00172da <Vm::faultHandler(regs*)+0x1fe>
c00172ac:	81 fa ed 00 00 00    	cmp    edx,0xed
c00172b2:	0f 84 aa 04 00 00    	je     c0017762 <Vm::faultHandler(regs*)+0x686>
c00172b8:	81 fa ee 00 00 00    	cmp    edx,0xee
c00172be:	0f 85 da 04 00 00    	jne    c001779e <Vm::faultHandler(regs*)+0x6c2>
c00172c4:	50                   	push   eax
c00172c5:	50                   	push   eax
c00172c6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00172ca:	50                   	push   eax
c00172cb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00172cf:	50                   	push   eax
c00172d0:	e8 13 f9 ff ff       	call   c0016be8 <Vm::outbv(unsigned short, unsigned char)>
c00172d5:	e9 a5 04 00 00       	jmp    c001777f <Vm::faultHandler(regs*)+0x6a3>
c00172da:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00172e0:	0f 84 6d 01 00 00    	je     c0017453 <Vm::faultHandler(regs*)+0x377>
c00172e6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00172ec:	0f 84 6f 01 00 00    	je     c0017461 <Vm::faultHandler(regs*)+0x385>
c00172f2:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00172f8:	0f 85 a0 04 00 00    	jne    c001779e <Vm::faultHandler(regs*)+0x6c2>
c00172fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017301:	e9 76 fe ff ff       	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c0017306:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017309:	be 02 00 00 00       	mov    esi,0x2
c001730e:	e9 69 fe ff ff       	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c0017313:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017316:	be 03 00 00 00       	mov    esi,0x3
c001731b:	e9 5c fe ff ff       	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c0017320:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017323:	be 04 00 00 00       	mov    esi,0x4
c0017328:	e9 4f fe ff ff       	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c001732d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017330:	be 05 00 00 00       	mov    esi,0x5
c0017335:	e9 42 fe ff ff       	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c001733a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001733d:	bd 01 00 00 00       	mov    ebp,0x1
c0017342:	e9 35 fe ff ff       	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c0017347:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001734a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001734f:	e9 28 fe ff ff       	jmp    c001717c <Vm::faultHandler(regs*)+0xa0>
c0017354:	83 e5 01             	and    ebp,0x1
c0017357:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001735a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001735e:	74 30                	je     c0017390 <Vm::faultHandler(regs*)+0x2b4>
c0017360:	83 e9 04             	sub    ecx,0x4
c0017363:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017369:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001736f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017372:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017375:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001737b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001737f:	0f 84 12 04 00 00    	je     c0017797 <Vm::faultHandler(regs*)+0x6bb>
c0017385:	80 ce 02             	or     dh,0x2
c0017388:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001738b:	e9 07 04 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c0017390:	83 e9 02             	sub    ecx,0x2
c0017393:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017399:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001739c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173a6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00173aa:	74 05                	je     c00173b1 <Vm::faultHandler(regs*)+0x2d5>
c00173ac:	80 ce 02             	or     dh,0x2
c00173af:	eb 03                	jmp    c00173b4 <Vm::faultHandler(regs*)+0x2d8>
c00173b1:	80 e6 fd             	and    dh,0xfd
c00173b4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173b8:	e9 da 03 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c00173bd:	83 e5 01             	and    ebp,0x1
c00173c0:	74 2a                	je     c00173ec <Vm::faultHandler(regs*)+0x310>
c00173c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00173c4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173ca:	81 ca 00 02 02 00    	or     edx,0x20200
c00173d0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00173d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173db:	c1 e8 09             	shr    eax,0x9
c00173de:	83 e0 01             	and    eax,0x1
c00173e1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173e4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173e7:	83 c0 04             	add    eax,0x4
c00173ea:	eb 24                	jmp    c0017410 <Vm::faultHandler(regs*)+0x334>
c00173ec:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00173ef:	81 ca 00 02 02 00    	or     edx,0x20200
c00173f5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173f8:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00173fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017401:	c1 e8 09             	shr    eax,0x9
c0017404:	83 e0 01             	and    eax,0x1
c0017407:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001740a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001740d:	83 c0 02             	add    eax,0x2
c0017410:	25 ff ff 00 00       	and    eax,0xffff
c0017415:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017418:	e9 7a 03 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c001741d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017421:	3d ee 00 00 00       	cmp    eax,0xee
c0017426:	75 10                	jne    c0017438 <Vm::faultHandler(regs*)+0x35c>
c0017428:	83 ec 0c             	sub    esp,0xc
c001742b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001742e:	e8 52 f8 ff ff       	call   c0016c85 <Vm::mainloop3(unsigned long)>
c0017433:	e9 4a 03 00 00       	jmp    c0017782 <Vm::faultHandler(regs*)+0x6a6>
c0017438:	83 ec 0c             	sub    esp,0xc
c001743b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001743f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017443:	51                   	push   ecx
c0017444:	50                   	push   eax
c0017445:	53                   	push   ebx
c0017446:	e8 80 fb ff ff       	call   c0016fcb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001744b:	83 c4 20             	add    esp,0x20
c001744e:	e9 47 03 00 00       	jmp    c001779a <Vm::faultHandler(regs*)+0x6be>
c0017453:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017458:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001745c:	e9 36 03 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c0017461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017466:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001746a:	e9 28 03 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c001746f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017474:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017477:	74 2b                	je     c00174a4 <Vm::faultHandler(regs*)+0x3c8>
c0017479:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017480:	76 22                	jbe    c00174a4 <Vm::faultHandler(regs*)+0x3c8>
c0017482:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017486:	50                   	push   eax
c0017487:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001748b:	50                   	push   eax
c001748c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017490:	50                   	push   eax
c0017491:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017495:	50                   	push   eax
c0017496:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001749a:	50                   	push   eax
c001749b:	6a 6c                	push   0x6c
c001749d:	6a 6c                	push   0x6c
c001749f:	e9 c0 01 00 00       	jmp    c0017664 <Vm::faultHandler(regs*)+0x588>
c00174a4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174a8:	83 ec 0c             	sub    esp,0xc
c00174ab:	0f b7 f6             	movzx  esi,si
c00174ae:	50                   	push   eax
c00174af:	e8 21 f7 ff ff       	call   c0016bd5 <Vm::inbv(unsigned short)>
c00174b4:	83 c4 0c             	add    esp,0xc
c00174b7:	0f b6 c0             	movzx  eax,al
c00174ba:	50                   	push   eax
c00174bb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00174bf:	50                   	push   eax
c00174c0:	56                   	push   esi
c00174c1:	e8 d6 fb ff ff       	call   c001709c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00174c6:	83 c4 10             	add    esp,0x10
c00174c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174cc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00174d0:	74 03                	je     c00174d5 <Vm::faultHandler(regs*)+0x3f9>
c00174d2:	48                   	dec    eax
c00174d3:	eb 01                	jmp    c00174d6 <Vm::faultHandler(regs*)+0x3fa>
c00174d5:	40                   	inc    eax
c00174d6:	0f b7 c0             	movzx  eax,ax
c00174d9:	e9 8e 00 00 00       	jmp    c001756c <Vm::faultHandler(regs*)+0x490>
c00174de:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00174e3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174e9:	74 29                	je     c0017514 <Vm::faultHandler(regs*)+0x438>
c00174eb:	3d ff ff 00 00       	cmp    eax,0xffff
c00174f0:	76 22                	jbe    c0017514 <Vm::faultHandler(regs*)+0x438>
c00174f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174f6:	50                   	push   eax
c00174f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174fb:	50                   	push   eax
c00174fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017500:	50                   	push   eax
c0017501:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017505:	50                   	push   eax
c0017506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001750a:	50                   	push   eax
c001750b:	6a 6d                	push   0x6d
c001750d:	6a 6d                	push   0x6d
c001750f:	e9 50 01 00 00       	jmp    c0017664 <Vm::faultHandler(regs*)+0x588>
c0017514:	83 e5 01             	and    ebp,0x1
c0017517:	0f b7 c8             	movzx  ecx,ax
c001751a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001751d:	0f b7 f6             	movzx  esi,si
c0017520:	74 1e                	je     c0017540 <Vm::faultHandler(regs*)+0x464>
c0017522:	ed                   	in     eax,dx
c0017523:	55                   	push   ebp
c0017524:	50                   	push   eax
c0017525:	51                   	push   ecx
c0017526:	56                   	push   esi
c0017527:	e8 9b fb ff ff       	call   c00170c7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001752c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	8d 50 04             	lea    edx,[eax+0x4]
c0017535:	83 e8 04             	sub    eax,0x4
c0017538:	81 e2 ff ff 00 00    	and    edx,0xffff
c001753e:	eb 20                	jmp    c0017560 <Vm::faultHandler(regs*)+0x484>
c0017540:	66 ed                	in     ax,dx
c0017542:	57                   	push   edi
c0017543:	0f b7 c0             	movzx  eax,ax
c0017546:	50                   	push   eax
c0017547:	51                   	push   ecx
c0017548:	56                   	push   esi
c0017549:	e8 63 fb ff ff       	call   c00170b1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001754e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	8d 50 02             	lea    edx,[eax+0x2]
c0017557:	83 e8 02             	sub    eax,0x2
c001755a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017560:	25 ff ff 00 00       	and    eax,0xffff
c0017565:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017569:	0f 44 c2             	cmove  eax,edx
c001756c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001756f:	e9 23 02 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c0017574:	8d 46 ff             	lea    eax,[esi-0x1]
c0017577:	0f b6 f0             	movzx  esi,al
c001757a:	83 fe 05             	cmp    esi,0x5
c001757d:	77 23                	ja     c00175a2 <Vm::faultHandler(regs*)+0x4c6>
c001757f:	ff 24 b5 ac 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd554]
c0017586:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001758b:	eb 15                	jmp    c00175a2 <Vm::faultHandler(regs*)+0x4c6>
c001758d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017591:	eb 0f                	jmp    c00175a2 <Vm::faultHandler(regs*)+0x4c6>
c0017593:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017597:	eb 09                	jmp    c00175a2 <Vm::faultHandler(regs*)+0x4c6>
c0017599:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001759d:	eb 03                	jmp    c00175a2 <Vm::faultHandler(regs*)+0x4c6>
c001759f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00175a2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175aa:	74 29                	je     c00175d5 <Vm::faultHandler(regs*)+0x4f9>
c00175ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00175b1:	76 22                	jbe    c00175d5 <Vm::faultHandler(regs*)+0x4f9>
c00175b3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175b7:	50                   	push   eax
c00175b8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175bc:	50                   	push   eax
c00175bd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175c1:	50                   	push   eax
c00175c2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175c6:	50                   	push   eax
c00175c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175cb:	50                   	push   eax
c00175cc:	6a 6e                	push   0x6e
c00175ce:	6a 6e                	push   0x6e
c00175d0:	e9 8f 00 00 00       	jmp    c0017664 <Vm::faultHandler(regs*)+0x588>
c00175d5:	52                   	push   edx
c00175d6:	0f b7 c0             	movzx  eax,ax
c00175d9:	52                   	push   edx
c00175da:	50                   	push   eax
c00175db:	57                   	push   edi
c00175dc:	e8 87 fa ff ff       	call   c0017068 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00175e1:	59                   	pop    ecx
c00175e2:	5e                   	pop    esi
c00175e3:	0f b6 c0             	movzx  eax,al
c00175e6:	50                   	push   eax
c00175e7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175eb:	50                   	push   eax
c00175ec:	e8 f7 f5 ff ff       	call   c0016be8 <Vm::outbv(unsigned short, unsigned char)>
c00175f1:	83 c4 10             	add    esp,0x10
c00175f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175f7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175fb:	74 03                	je     c0017600 <Vm::faultHandler(regs*)+0x524>
c00175fd:	48                   	dec    eax
c00175fe:	eb 01                	jmp    c0017601 <Vm::faultHandler(regs*)+0x525>
c0017600:	40                   	inc    eax
c0017601:	0f b7 c0             	movzx  eax,ax
c0017604:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017607:	e9 8b 01 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c001760c:	8d 46 ff             	lea    eax,[esi-0x1]
c001760f:	0f b6 f0             	movzx  esi,al
c0017612:	83 fe 05             	cmp    esi,0x5
c0017615:	77 1e                	ja     c0017635 <Vm::faultHandler(regs*)+0x559>
c0017617:	ff 24 b5 c4 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd53c]
c001761e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017622:	eb 11                	jmp    c0017635 <Vm::faultHandler(regs*)+0x559>
c0017624:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017627:	eb 0c                	jmp    c0017635 <Vm::faultHandler(regs*)+0x559>
c0017629:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001762c:	eb 07                	jmp    c0017635 <Vm::faultHandler(regs*)+0x559>
c001762e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017631:	eb 02                	jmp    c0017635 <Vm::faultHandler(regs*)+0x559>
c0017633:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017635:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001763a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001763d:	74 37                	je     c0017676 <Vm::faultHandler(regs*)+0x59a>
c001763f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017645:	76 2f                	jbe    c0017676 <Vm::faultHandler(regs*)+0x59a>
c0017647:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001764b:	50                   	push   eax
c001764c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017650:	50                   	push   eax
c0017651:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017655:	50                   	push   eax
c0017656:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001765a:	50                   	push   eax
c001765b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001765f:	50                   	push   eax
c0017660:	6a 6f                	push   0x6f
c0017662:	6a 6f                	push   0x6f
c0017664:	68 50 2a 02 c0       	push   0xc0022a50
c0017669:	e8 9c 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001766e:	83 c4 20             	add    esp,0x20
c0017671:	e9 86 01 00 00       	jmp    c00177fc <Vm::faultHandler(regs*)+0x720>
c0017676:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017679:	0f b7 d7             	movzx  edx,di
c001767c:	0f b7 c6             	movzx  eax,si
c001767f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017682:	81 e1 00 04 00 00    	and    ecx,0x400
c0017688:	83 e5 01             	and    ebp,0x1
c001768b:	74 1c                	je     c00176a9 <Vm::faultHandler(regs*)+0x5cd>
c001768d:	55                   	push   ebp
c001768e:	55                   	push   ebp
c001768f:	50                   	push   eax
c0017690:	52                   	push   edx
c0017691:	e8 f5 f9 ff ff       	call   c001708b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017696:	83 c4 10             	add    esp,0x10
c0017699:	89 fa                	mov    edx,edi
c001769b:	ef                   	out    dx,eax
c001769c:	8d 46 04             	lea    eax,[esi+0x4]
c001769f:	83 ee 04             	sub    esi,0x4
c00176a2:	25 ff ff 00 00       	and    eax,0xffff
c00176a7:	eb 1b                	jmp    c00176c4 <Vm::faultHandler(regs*)+0x5e8>
c00176a9:	55                   	push   ebp
c00176aa:	55                   	push   ebp
c00176ab:	50                   	push   eax
c00176ac:	52                   	push   edx
c00176ad:	e8 c7 f9 ff ff       	call   c0017079 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00176b2:	83 c4 10             	add    esp,0x10
c00176b5:	89 fa                	mov    edx,edi
c00176b7:	66 ef                	out    dx,ax
c00176b9:	8d 46 02             	lea    eax,[esi+0x2]
c00176bc:	83 ee 02             	sub    esi,0x2
c00176bf:	25 ff ff 00 00       	and    eax,0xffff
c00176c4:	81 e6 ff ff 00 00    	and    esi,0xffff
c00176ca:	85 c9                	test   ecx,ecx
c00176cc:	0f 44 f0             	cmove  esi,eax
c00176cf:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00176d2:	e9 c0 00 00 00       	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c00176d7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00176de:	83 ec 0c             	sub    esp,0xc
c00176e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176e5:	50                   	push   eax
c00176e6:	e8 ea f4 ff ff       	call   c0016bd5 <Vm::inbv(unsigned short)>
c00176eb:	0f b6 c0             	movzx  eax,al
c00176ee:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00176f1:	eb 3a                	jmp    c001772d <Vm::faultHandler(regs*)+0x651>
c00176f3:	83 e5 01             	and    ebp,0x1
c00176f6:	74 07                	je     c00176ff <Vm::faultHandler(regs*)+0x623>
c00176f8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176fc:	ed                   	in     eax,dx
c00176fd:	eb 14                	jmp    c0017713 <Vm::faultHandler(regs*)+0x637>
c00176ff:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017702:	66 31 f6             	xor    si,si
c0017705:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017708:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001770c:	66 ed                	in     ax,dx
c001770e:	0f b7 c0             	movzx  eax,ax
c0017711:	09 f0                	or     eax,esi
c0017713:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017716:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001771a:	eb 7e                	jmp    c001779a <Vm::faultHandler(regs*)+0x6be>
c001771c:	52                   	push   edx
c001771d:	52                   	push   edx
c001771e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017722:	50                   	push   eax
c0017723:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017727:	50                   	push   eax
c0017728:	e8 bb f4 ff ff       	call   c0016be8 <Vm::outbv(unsigned short, unsigned char)>
c001772d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017731:	eb 4f                	jmp    c0017782 <Vm::faultHandler(regs*)+0x6a6>
c0017733:	83 e5 01             	and    ebp,0x1
c0017736:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017739:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001773d:	74 03                	je     c0017742 <Vm::faultHandler(regs*)+0x666>
c001773f:	ef                   	out    dx,eax
c0017740:	eb d4                	jmp    c0017716 <Vm::faultHandler(regs*)+0x63a>
c0017742:	66 ef                	out    dx,ax
c0017744:	eb d0                	jmp    c0017716 <Vm::faultHandler(regs*)+0x63a>
c0017746:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001774a:	83 ec 0c             	sub    esp,0xc
c001774d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017754:	50                   	push   eax
c0017755:	e8 7b f4 ff ff       	call   c0016bd5 <Vm::inbv(unsigned short)>
c001775a:	0f b6 c0             	movzx  eax,al
c001775d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017760:	eb 1d                	jmp    c001777f <Vm::faultHandler(regs*)+0x6a3>
c0017762:	83 e5 01             	and    ebp,0x1
c0017765:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017768:	74 03                	je     c001776d <Vm::faultHandler(regs*)+0x691>
c001776a:	ed                   	in     eax,dx
c001776b:	eb 0d                	jmp    c001777a <Vm::faultHandler(regs*)+0x69e>
c001776d:	66 ed                	in     ax,dx
c001776f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017772:	0f b7 c0             	movzx  eax,ax
c0017775:	66 31 d2             	xor    dx,dx
c0017778:	09 d0                	or     eax,edx
c001777a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001777d:	eb 18                	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c001777f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	eb 13                	jmp    c001779a <Vm::faultHandler(regs*)+0x6be>
c0017787:	83 e5 01             	and    ebp,0x1
c001778a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001778d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017790:	74 03                	je     c0017795 <Vm::faultHandler(regs*)+0x6b9>
c0017792:	ef                   	out    dx,eax
c0017793:	eb 02                	jmp    c0017797 <Vm::faultHandler(regs*)+0x6bb>
c0017795:	66 ef                	out    dx,ax
c0017797:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001779a:	b0 01                	mov    al,0x1
c001779c:	eb 60                	jmp    c00177fe <Vm::faultHandler(regs*)+0x722>
c001779e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177a2:	50                   	push   eax
c00177a3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177a7:	50                   	push   eax
c00177a8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177ac:	50                   	push   eax
c00177ad:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177b1:	50                   	push   eax
c00177b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177b6:	50                   	push   eax
c00177b7:	52                   	push   edx
c00177b8:	52                   	push   edx
c00177b9:	68 7d 2a 02 c0       	push   0xc0022a7d
c00177be:	e8 47 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177c3:	83 c4 20             	add    esp,0x20
c00177c6:	83 ec 0c             	sub    esp,0xc
c00177c9:	6a 60                	push   0x60
c00177cb:	e8 05 f4 ff ff       	call   c0016bd5 <Vm::inbv(unsigned short)>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	0f b6 d0             	movzx  edx,al
c00177d6:	83 fa 1c             	cmp    edx,0x1c
c00177d9:	74 05                	je     c00177e0 <Vm::faultHandler(regs*)+0x704>
c00177db:	83 fa 5a             	cmp    edx,0x5a
c00177de:	75 e6                	jne    c00177c6 <Vm::faultHandler(regs*)+0x6ea>
c00177e0:	0f b6 c0             	movzx  eax,al
c00177e3:	83 f8 1c             	cmp    eax,0x1c
c00177e6:	74 05                	je     c00177ed <Vm::faultHandler(regs*)+0x711>
c00177e8:	83 f8 5a             	cmp    eax,0x5a
c00177eb:	75 0f                	jne    c00177fc <Vm::faultHandler(regs*)+0x720>
c00177ed:	83 ec 0c             	sub    esp,0xc
c00177f0:	6a 60                	push   0x60
c00177f2:	e8 de f3 ff ff       	call   c0016bd5 <Vm::inbv(unsigned short)>
c00177f7:	83 c4 10             	add    esp,0x10
c00177fa:	eb e4                	jmp    c00177e0 <Vm::faultHandler(regs*)+0x704>
c00177fc:	31 c0                	xor    eax,eax
c00177fe:	83 c4 2c             	add    esp,0x2c
c0017801:	5b                   	pop    ebx
c0017802:	5e                   	pop    esi
c0017803:	5f                   	pop    edi
c0017804:	5d                   	pop    ebp
c0017805:	c3                   	ret    

c0017806 <noCopro(unsigned long)>:
c0017806:	c3                   	ret    

c0017807 <nmiHandler(regs*, void*)>:
c0017807:	83 ec 0c             	sub    esp,0xc
c001780a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001780f:	83 ec 0c             	sub    esp,0xc
c0017812:	50                   	push   eax
c0017813:	e8 be fa fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017818:	83 c4 10             	add    esp,0x10
c001781b:	90                   	nop
c001781c:	83 c4 0c             	add    esp,0xc
c001781f:	c3                   	ret    

c0017820 <doubleFault(regs*, void*)>:
c0017820:	55                   	push   ebp
c0017821:	89 e5                	mov    ebp,esp
c0017823:	83 ec 08             	sub    esp,0x8
c0017826:	83 ec 0c             	sub    esp,0xc
c0017829:	68 dc 2a 02 c0       	push   0xc0022adc
c001782e:	e8 f4 9c ff ff       	call   c0011527 <KePanic(char const*)>
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	90                   	nop
c0017837:	c9                   	leave  
c0017838:	c3                   	ret    

c0017839 <displayDebugInfo(regs*)>:
c0017839:	83 ec 1c             	sub    esp,0x1c
c001783c:	0f 20 c0             	mov    eax,cr0
c001783f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017843:	0f 20 d0             	mov    eax,cr2
c0017846:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001784a:	0f 20 d8             	mov    eax,cr3
c001784d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017851:	0f 20 e0             	mov    eax,cr4
c0017854:	89 04 24             	mov    DWORD PTR [esp],eax
c0017857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001785b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001785e:	83 ec 08             	sub    esp,0x8
c0017861:	50                   	push   eax
c0017862:	68 f8 2a 02 c0       	push   0xc0022af8
c0017867:	e8 9e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001786c:	83 c4 10             	add    esp,0x10
c001786f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017873:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017876:	83 ec 08             	sub    esp,0x8
c0017879:	50                   	push   eax
c001787a:	68 e9 2a 02 c0       	push   0xc0022ae9
c001787f:	e8 86 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017884:	83 c4 10             	add    esp,0x10
c0017887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001788b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001788e:	83 ec 08             	sub    esp,0x8
c0017891:	50                   	push   eax
c0017892:	68 f4 2a 02 c0       	push   0xc0022af4
c0017897:	e8 6e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178a6:	83 ec 08             	sub    esp,0x8
c00178a9:	50                   	push   eax
c00178aa:	68 03 2b 02 c0       	push   0xc0022b03
c00178af:	e8 56 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178bb:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00178be:	83 ec 08             	sub    esp,0x8
c00178c1:	50                   	push   eax
c00178c2:	68 0e 2b 02 c0       	push   0xc0022b0e
c00178c7:	e8 3e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178cc:	83 c4 10             	add    esp,0x10
c00178cf:	83 ec 08             	sub    esp,0x8
c00178d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00178d6:	68 19 2b 02 c0       	push   0xc0022b19
c00178db:	e8 2a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178e0:	83 c4 10             	add    esp,0x10
c00178e3:	83 ec 08             	sub    esp,0x8
c00178e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178ea:	68 24 2b 02 c0       	push   0xc0022b24
c00178ef:	e8 16 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178f4:	83 c4 10             	add    esp,0x10
c00178f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178fb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00178fe:	c1 e0 05             	shl    eax,0x5
c0017901:	8d 90 a0 3e 02 c0    	lea    edx,[eax-0x3ffdc160]
c0017907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001790e:	83 ec 04             	sub    esp,0x4
c0017911:	52                   	push   edx
c0017912:	50                   	push   eax
c0017913:	68 2f 2b 02 c0       	push   0xc0022b2f
c0017918:	e8 ed 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001791d:	83 c4 10             	add    esp,0x10
c0017920:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017925:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001792b:	83 ec 0c             	sub    esp,0xc
c001792e:	50                   	push   eax
c001792f:	e8 3b 0e ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017934:	83 c4 10             	add    esp,0x10
c0017937:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001793c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017942:	83 ec 08             	sub    esp,0x8
c0017945:	68 3e 2b 02 c0       	push   0xc0022b3e
c001794a:	50                   	push   eax
c001794b:	e8 5c 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017958:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001795e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017962:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017965:	83 ec 08             	sub    esp,0x8
c0017968:	52                   	push   edx
c0017969:	50                   	push   eax
c001796a:	e8 f7 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017977:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001797d:	83 ec 08             	sub    esp,0x8
c0017980:	68 4c 2b 02 c0       	push   0xc0022b4c
c0017985:	50                   	push   eax
c0017986:	e8 21 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001798b:	83 c4 10             	add    esp,0x10
c001798e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017993:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017999:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001799e:	8b 12                	mov    edx,DWORD PTR [edx]
c00179a0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00179a3:	83 c2 0c             	add    edx,0xc
c00179a6:	83 ec 08             	sub    esp,0x8
c00179a9:	52                   	push   edx
c00179aa:	50                   	push   eax
c00179ab:	e8 fc 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179be:	83 ec 08             	sub    esp,0x8
c00179c1:	68 55 2b 02 c0       	push   0xc0022b55
c00179c6:	50                   	push   eax
c00179c7:	e8 e0 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179cc:	83 c4 10             	add    esp,0x10
c00179cf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179de:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00179e1:	83 ec 08             	sub    esp,0x8
c00179e4:	52                   	push   edx
c00179e5:	50                   	push   eax
c00179e6:	e8 7b 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00179eb:	83 c4 10             	add    esp,0x10
c00179ee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179f9:	83 ec 08             	sub    esp,0x8
c00179fc:	68 5d 2b 02 c0       	push   0xc0022b5d
c0017a01:	50                   	push   eax
c0017a02:	e8 a5 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a19:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017a1c:	83 ec 08             	sub    esp,0x8
c0017a1f:	52                   	push   edx
c0017a20:	50                   	push   eax
c0017a21:	e8 40 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a26:	83 c4 10             	add    esp,0x10
c0017a29:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a2e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a34:	83 ec 08             	sub    esp,0x8
c0017a37:	68 65 2b 02 c0       	push   0xc0022b65
c0017a3c:	50                   	push   eax
c0017a3d:	e8 6a 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a42:	83 c4 10             	add    esp,0x10
c0017a45:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a50:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a54:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017a57:	83 ec 08             	sub    esp,0x8
c0017a5a:	52                   	push   edx
c0017a5b:	50                   	push   eax
c0017a5c:	e8 05 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a61:	83 c4 10             	add    esp,0x10
c0017a64:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a6f:	83 ec 08             	sub    esp,0x8
c0017a72:	68 6d 2b 02 c0       	push   0xc0022b6d
c0017a77:	50                   	push   eax
c0017a78:	e8 2f 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a8f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a92:	83 ec 08             	sub    esp,0x8
c0017a95:	52                   	push   edx
c0017a96:	50                   	push   eax
c0017a97:	e8 ca 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a9c:	83 c4 10             	add    esp,0x10
c0017a9f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aaa:	83 ec 08             	sub    esp,0x8
c0017aad:	68 75 2b 02 c0       	push   0xc0022b75
c0017ab2:	50                   	push   eax
c0017ab3:	e8 f4 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ab8:	83 c4 10             	add    esp,0x10
c0017abb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ac0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aca:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017acd:	83 ec 08             	sub    esp,0x8
c0017ad0:	52                   	push   edx
c0017ad1:	50                   	push   eax
c0017ad2:	e8 8f 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017adf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae5:	83 ec 08             	sub    esp,0x8
c0017ae8:	68 7d 2b 02 c0       	push   0xc0022b7d
c0017aed:	50                   	push   eax
c0017aee:	e8 b9 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017af3:	83 c4 10             	add    esp,0x10
c0017af6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017afb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b05:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b08:	83 ec 08             	sub    esp,0x8
c0017b0b:	52                   	push   edx
c0017b0c:	50                   	push   eax
c0017b0d:	e8 54 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b20:	83 ec 08             	sub    esp,0x8
c0017b23:	68 85 2b 02 c0       	push   0xc0022b85
c0017b28:	50                   	push   eax
c0017b29:	e8 7e 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b2e:	83 c4 10             	add    esp,0x10
c0017b31:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b36:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b3c:	83 ec 08             	sub    esp,0x8
c0017b3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b43:	50                   	push   eax
c0017b44:	e8 1d 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b57:	83 ec 08             	sub    esp,0x8
c0017b5a:	68 8e 2b 02 c0       	push   0xc0022b8e
c0017b5f:	50                   	push   eax
c0017b60:	e8 47 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b65:	83 c4 10             	add    esp,0x10
c0017b68:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b73:	83 ec 08             	sub    esp,0x8
c0017b76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b7a:	50                   	push   eax
c0017b7b:	e8 e6 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b8e:	83 ec 08             	sub    esp,0x8
c0017b91:	68 96 2b 02 c0       	push   0xc0022b96
c0017b96:	50                   	push   eax
c0017b97:	e8 10 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b9c:	83 c4 10             	add    esp,0x10
c0017b9f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017baa:	83 ec 08             	sub    esp,0x8
c0017bad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017bb1:	50                   	push   eax
c0017bb2:	e8 af 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bb7:	83 c4 10             	add    esp,0x10
c0017bba:	fa                   	cli    
c0017bbb:	f4                   	hlt    
c0017bbc:	eb fe                	jmp    c0017bbc <displayDebugInfo(regs*)+0x383>

c0017bbe <HalSystemIdle()>:
c0017bbe:	56                   	push   esi
c0017bbf:	53                   	push   ebx
c0017bc0:	83 ec 14             	sub    esp,0x14
c0017bc3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bce:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017bd4:	83 e0 04             	and    eax,0x4
c0017bd7:	0f b6 c0             	movzx  eax,al
c0017bda:	85 c0                	test   eax,eax
c0017bdc:	0f 95 c0             	setne  al
c0017bdf:	0f b6 c0             	movzx  eax,al
c0017be2:	85 c0                	test   eax,eax
c0017be4:	74 4c                	je     c0017c32 <HalSystemIdle()+0x74>
c0017be6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017beb:	83 ec 08             	sub    esp,0x8
c0017bee:	68 e1 00 00 00       	push   0xe1
c0017bf3:	50                   	push   eax
c0017bf4:	e8 e9 f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c04:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c0d:	83 e2 02             	and    edx,0x2
c0017c10:	89 d3                	mov    ebx,edx
c0017c12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c16:	83 e2 00             	and    edx,0x0
c0017c19:	89 d6                	mov    esi,edx
c0017c1b:	56                   	push   esi
c0017c1c:	53                   	push   ebx
c0017c1d:	68 e1 00 00 00       	push   0xe1
c0017c22:	50                   	push   eax
c0017c23:	e8 e6 f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c28:	83 c4 10             	add    esp,0x10
c0017c2b:	e8 64 85 fe ff       	call   c0000194 <doTPAUSE>
c0017c30:	eb 01                	jmp    c0017c33 <HalSystemIdle()+0x75>
c0017c32:	f4                   	hlt    
c0017c33:	90                   	nop
c0017c34:	83 c4 14             	add    esp,0x14
c0017c37:	5b                   	pop    ebx
c0017c38:	5e                   	pop    esi
c0017c39:	c3                   	ret    

c0017c3a <displayProgramFault(char const*)>:
c0017c3a:	83 ec 0c             	sub    esp,0xc
c0017c3d:	83 ec 0c             	sub    esp,0xc
c0017c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c44:	e8 c1 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c51:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c5c:	85 c0                	test   eax,eax
c0017c5e:	74 21                	je     c0017c81 <displayProgramFault(char const*)+0x47>
c0017c60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c70:	6a 04                	push   0x4
c0017c72:	6a 0f                	push   0xf
c0017c74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c78:	50                   	push   eax
c0017c79:	e8 a0 0e ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	90                   	nop
c0017c82:	83 c4 0c             	add    esp,0xc
c0017c85:	c3                   	ret    

c0017c86 <gpFault(regs*, void*)>:
c0017c86:	83 ec 1c             	sub    esp,0x1c
c0017c89:	c7 05 74 c7 02 c0 dc 70 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00170dc
c0017c93:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017c98:	85 c0                	test   eax,eax
c0017c9a:	74 1e                	je     c0017cba <gpFault(regs*, void*)+0x34>
c0017c9c:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017ca1:	83 ec 0c             	sub    esp,0xc
c0017ca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ca8:	ff d0                	call   eax
c0017caa:	83 c4 10             	add    esp,0x10
c0017cad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017cb1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017cb6:	85 c0                	test   eax,eax
c0017cb8:	75 2e                	jne    c0017ce8 <gpFault(regs*, void*)+0x62>
c0017cba:	83 ec 0c             	sub    esp,0xc
c0017cbd:	68 9e 2b 02 c0       	push   0xc0022b9e
c0017cc2:	e8 73 ff ff ff       	call   c0017c3a <displayProgramFault(char const*)>
c0017cc7:	83 c4 10             	add    esp,0x10
c0017cca:	83 ec 0c             	sub    esp,0xc
c0017ccd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cd1:	e8 63 fb ff ff       	call   c0017839 <displayDebugInfo(regs*)>
c0017cd6:	83 c4 10             	add    esp,0x10
c0017cd9:	83 ec 0c             	sub    esp,0xc
c0017cdc:	6a 00                	push   0x0
c0017cde:	e8 99 ed ff ff       	call   c0016a7c <Thr::terminateFromIRQ(int)>
c0017ce3:	83 c4 10             	add    esp,0x10
c0017ce6:	eb 01                	jmp    c0017ce9 <gpFault(regs*, void*)+0x63>
c0017ce8:	90                   	nop
c0017ce9:	83 c4 1c             	add    esp,0x1c
c0017cec:	c3                   	ret    

c0017ced <pgFault(regs*, void*)>:
c0017ced:	83 ec 1c             	sub    esp,0x1c
c0017cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cf4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017cf7:	0f 20 d0             	mov    eax,cr2
c0017cfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d02:	83 ec 04             	sub    esp,0x4
c0017d05:	52                   	push   edx
c0017d06:	50                   	push   eax
c0017d07:	68 7c 2c 02 c0       	push   0xc0022c7c
c0017d0c:	e8 f9 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d11:	83 c4 10             	add    esp,0x10
c0017d14:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d1e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d24:	0f 20 d2             	mov    edx,cr2
c0017d27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d2f:	83 ec 08             	sub    esp,0x8
c0017d32:	52                   	push   edx
c0017d33:	50                   	push   eax
c0017d34:	e8 41 26 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017d39:	83 c4 10             	add    esp,0x10
c0017d3c:	0f b6 c0             	movzx  eax,al
c0017d3f:	85 c0                	test   eax,eax
c0017d41:	75 2e                	jne    c0017d71 <pgFault(regs*, void*)+0x84>
c0017d43:	83 ec 0c             	sub    esp,0xc
c0017d46:	68 b7 2b 02 c0       	push   0xc0022bb7
c0017d4b:	e8 ea fe ff ff       	call   c0017c3a <displayProgramFault(char const*)>
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	83 ec 0c             	sub    esp,0xc
c0017d56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d5a:	e8 da fa ff ff       	call   c0017839 <displayDebugInfo(regs*)>
c0017d5f:	83 c4 10             	add    esp,0x10
c0017d62:	83 ec 0c             	sub    esp,0xc
c0017d65:	6a 00                	push   0x0
c0017d67:	e8 10 ed ff ff       	call   c0016a7c <Thr::terminateFromIRQ(int)>
c0017d6c:	83 c4 10             	add    esp,0x10
c0017d6f:	eb 01                	jmp    c0017d72 <pgFault(regs*, void*)+0x85>
c0017d71:	90                   	nop
c0017d72:	83 c4 1c             	add    esp,0x1c
c0017d75:	c3                   	ret    

c0017d76 <otherISRHandler(regs*, void*)>:
c0017d76:	83 ec 0c             	sub    esp,0xc
c0017d79:	83 ec 0c             	sub    esp,0xc
c0017d7c:	68 a4 2c 02 c0       	push   0xc0022ca4
c0017d81:	e8 b4 fe ff ff       	call   c0017c3a <displayProgramFault(char const*)>
c0017d86:	83 c4 10             	add    esp,0x10
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d90:	e8 a4 fa ff ff       	call   c0017839 <displayDebugInfo(regs*)>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	83 ec 0c             	sub    esp,0xc
c0017d9b:	6a 00                	push   0x0
c0017d9d:	e8 da ec ff ff       	call   c0016a7c <Thr::terminateFromIRQ(int)>
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	90                   	nop
c0017da6:	83 c4 0c             	add    esp,0xc
c0017da9:	c3                   	ret    

c0017daa <opcodeFault(regs*, void*)>:
c0017daa:	55                   	push   ebp
c0017dab:	89 e5                	mov    ebp,esp
c0017dad:	83 ec 08             	sub    esp,0x8
c0017db0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017db3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017db6:	83 ec 08             	sub    esp,0x8
c0017db9:	50                   	push   eax
c0017dba:	68 c2 2b 02 c0       	push   0xc0022bc2
c0017dbf:	e8 46 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017dc4:	83 c4 10             	add    esp,0x10
c0017dc7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017dcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017dd2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017dd8:	0f b6 c0             	movzx  eax,al
c0017ddb:	85 c0                	test   eax,eax
c0017ddd:	74 21                	je     c0017e00 <opcodeFault(regs*, void*)+0x56>
c0017ddf:	83 ec 0c             	sub    esp,0xc
c0017de2:	68 cc 2c 02 c0       	push   0xc0022ccc
c0017de7:	e8 1e 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017dec:	83 c4 10             	add    esp,0x10
c0017def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017df2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017df5:	8d 50 19             	lea    edx,[eax+0x19]
c0017df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dfb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017dfe:	eb 2b                	jmp    c0017e2b <opcodeFault(regs*, void*)+0x81>
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	68 d0 2b 02 c0       	push   0xc0022bd0
c0017e08:	e8 2d fe ff ff       	call   c0017c3a <displayProgramFault(char const*)>
c0017e0d:	83 c4 10             	add    esp,0x10
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017e16:	e8 1e fa ff ff       	call   c0017839 <displayDebugInfo(regs*)>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	83 ec 0c             	sub    esp,0xc
c0017e21:	6a 00                	push   0x0
c0017e23:	e8 54 ec ff ff       	call   c0016a7c <Thr::terminateFromIRQ(int)>
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	c9                   	leave  
c0017e2c:	c3                   	ret    

c0017e2d <i386SaveCoprocessor(void*)>:
c0017e2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e31:	83 c0 3f             	add    eax,0x3f
c0017e34:	83 e0 c0             	and    eax,0xffffffc0
c0017e37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e3b:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017e41 <i386LoadCoprocessor(void*)>:
c0017e41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e45:	83 c0 3f             	add    eax,0x3f
c0017e48:	83 e0 c0             	and    eax,0xffffffc0
c0017e4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e4f:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017e55 <x87EmulHandler(regs*, void*)>:
c0017e55:	53                   	push   ebx
c0017e56:	83 ec 08             	sub    esp,0x8
c0017e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e5e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017e62:	74 10                	je     c0017e74 <x87EmulHandler(regs*, void*)+0x1f>
c0017e64:	83 ec 0c             	sub    esp,0xc
c0017e67:	68 dd 2b 02 c0       	push   0xc0022bdd
c0017e6c:	e8 b6 96 ff ff       	call   c0011527 <KePanic(char const*)>
c0017e71:	83 c4 10             	add    esp,0x10
c0017e74:	0f 20 c0             	mov    eax,cr0
c0017e77:	a8 08                	test   al,0x8
c0017e79:	74 59                	je     c0017ed4 <x87EmulHandler(regs*, void*)+0x7f>
c0017e7b:	0f 06                	clts   
c0017e7d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017e82:	85 c0                	test   eax,eax
c0017e84:	74 0e                	je     c0017e94 <x87EmulHandler(regs*, void*)+0x3f>
c0017e86:	83 ec 0c             	sub    esp,0xc
c0017e89:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017e8c:	e8 9c ff ff ff       	call   c0017e2d <i386SaveCoprocessor(void*)>
c0017e91:	83 c4 10             	add    esp,0x10
c0017e94:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017e9a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017e9e:	75 12                	jne    c0017eb2 <x87EmulHandler(regs*, void*)+0x5d>
c0017ea0:	83 ec 0c             	sub    esp,0xc
c0017ea3:	68 40 02 00 00       	push   0x240
c0017ea8:	e8 26 fc fe ff       	call   c0007ad3 <malloc>
c0017ead:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017eb0:	eb 10                	jmp    c0017ec2 <x87EmulHandler(regs*, void*)+0x6d>
c0017eb2:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017eb7:	83 ec 0c             	sub    esp,0xc
c0017eba:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ebd:	e8 7f ff ff ff       	call   c0017e41 <i386LoadCoprocessor(void*)>
c0017ec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ec7:	83 c4 10             	add    esp,0x10
c0017eca:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017ecf:	83 c4 08             	add    esp,0x8
c0017ed2:	5b                   	pop    ebx
c0017ed3:	c3                   	ret    
c0017ed4:	83 ec 0c             	sub    esp,0xc
c0017ed7:	68 f1 2b 02 c0       	push   0xc0022bf1
c0017edc:	e8 29 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ee1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ee9:	83 c4 18             	add    esp,0x18
c0017eec:	5b                   	pop    ebx
c0017eed:	e9 8a eb ff ff       	jmp    c0016a7c <Thr::terminateFromIRQ(int)>

c0017ef2 <HalInitialiseCoprocessor()>:
c0017ef2:	83 ec 10             	sub    esp,0x10
c0017ef5:	6a 00                	push   0x0
c0017ef7:	68 55 7e 01 c0       	push   0xc0017e55
c0017efc:	6a 07                	push   0x7
c0017efe:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f08:	e8 89 4f ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f0d:	e8 ae 70 00 00       	call   c001efc0 <avxDetect>
c0017f12:	83 c4 10             	add    esp,0x10
c0017f15:	85 c0                	test   eax,eax
c0017f17:	74 1c                	je     c0017f35 <HalInitialiseCoprocessor()+0x43>
c0017f19:	c7 05 70 c7 02 c0 ea ef 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001efea
c0017f23:	c7 05 6c c7 02 c0 fb ef 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001effb
c0017f2d:	83 c4 0c             	add    esp,0xc
c0017f30:	e9 d7 70 00 00       	jmp    c001f00c <avxInit>
c0017f35:	e8 16 74 00 00       	call   c001f350 <absolutelyNoChanceInHell>
c0017f3a:	85 c0                	test   eax,eax
c0017f3c:	74 1c                	je     c0017f5a <HalInitialiseCoprocessor()+0x68>
c0017f3e:	c7 05 70 c7 02 c0 68 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f368
c0017f48:	c7 05 6c c7 02 c0 70 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f370
c0017f52:	83 c4 0c             	add    esp,0xc
c0017f55:	e9 1e 74 00 00       	jmp    c001f378 <sseInit>
c0017f5a:	e8 37 74 00 00       	call   c001f396 <x87Detect>
c0017f5f:	85 c0                	test   eax,eax
c0017f61:	74 1c                	je     c0017f7f <HalInitialiseCoprocessor()+0x8d>
c0017f63:	c7 05 70 c7 02 c0 b1 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3b1
c0017f6d:	c7 05 6c c7 02 c0 b8 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3b8
c0017f77:	83 c4 0c             	add    esp,0xc
c0017f7a:	e9 40 74 00 00       	jmp    c001f3bf <x87Init>
c0017f7f:	c7 05 70 c7 02 c0 06 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017806
c0017f89:	c7 05 6c c7 02 c0 06 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017806
c0017f93:	0f 20 c0             	mov    eax,cr0
c0017f96:	83 c8 04             	or     eax,0x4
c0017f99:	0f 22 c0             	mov    cr0,eax
c0017f9c:	83 c4 0c             	add    esp,0xc
c0017f9f:	c3                   	ret    

c0017fa0 <HalPanic(char const*)>:
c0017fa0:	53                   	push   ebx
c0017fa1:	83 ec 10             	sub    esp,0x10
c0017fa4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017fa8:	fa                   	cli    
c0017fa9:	53                   	push   ebx
c0017faa:	68 07 2c 02 c0       	push   0xc0022c07
c0017faf:	e8 56 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017fb4:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0017fb9:	83 c4 10             	add    esp,0x10
c0017fbc:	85 c0                	test   eax,eax
c0017fbe:	74 09                	je     c0017fc9 <HalPanic(char const*)+0x29>
c0017fc0:	83 ec 0c             	sub    esp,0xc
c0017fc3:	53                   	push   ebx
c0017fc4:	ff d0                	call   eax
c0017fc6:	83 c4 10             	add    esp,0x10
c0017fc9:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0017fce:	85 c0                	test   eax,eax
c0017fd0:	0f 84 dc 00 00 00    	je     c00180b2 <HalPanic(char const*)+0x112>
c0017fd6:	52                   	push   edx
c0017fd7:	6a 01                	push   0x1
c0017fd9:	6a 0f                	push   0xf
c0017fdb:	50                   	push   eax
c0017fdc:	e8 e9 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017fe1:	59                   	pop    ecx
c0017fe2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017fe8:	e8 cd 07 ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017fed:	58                   	pop    eax
c0017fee:	5a                   	pop    edx
c0017fef:	68 04 0e 02 c0       	push   0xc0020e04
c0017ff4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ffa:	e8 03 06 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017fff:	83 c4 0c             	add    esp,0xc
c0018002:	6a 01                	push   0x1
c0018004:	6a 0f                	push   0xf
c0018006:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001800c:	e8 b9 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018011:	59                   	pop    ecx
c0018012:	58                   	pop    eax
c0018013:	68 20 2c 02 c0       	push   0xc0022c20
c0018018:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001801e:	e8 89 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018023:	83 c4 0c             	add    esp,0xc
c0018026:	6a 0f                	push   0xf
c0018028:	6a 01                	push   0x1
c001802a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018030:	e8 95 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018035:	58                   	pop    eax
c0018036:	5a                   	pop    edx
c0018037:	68 29 2c 02 c0       	push   0xc0022c29
c001803c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018042:	e8 65 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018047:	83 c4 0c             	add    esp,0xc
c001804a:	6a 01                	push   0x1
c001804c:	6a 0f                	push   0xf
c001804e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018054:	e8 71 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018059:	59                   	pop    ecx
c001805a:	58                   	pop    eax
c001805b:	68 6d 2c 02 c0       	push   0xc0022c6d
c0018060:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018066:	e8 41 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001806b:	58                   	pop    eax
c001806c:	5a                   	pop    edx
c001806d:	68 36 2c 02 c0       	push   0xc0022c36
c0018072:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018078:	e8 2f 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001807d:	59                   	pop    ecx
c001807e:	58                   	pop    eax
c001807f:	68 70 2c 02 c0       	push   0xc0022c70
c0018084:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001808a:	e8 1d 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001808f:	58                   	pop    eax
c0018090:	5a                   	pop    edx
c0018091:	53                   	push   ebx
c0018092:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018098:	e8 0f 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001809d:	59                   	pop    ecx
c001809e:	5b                   	pop    ebx
c001809f:	68 6d 2c 02 c0       	push   0xc0022c6d
c00180a4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180aa:	e8 fd 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180af:	83 c4 10             	add    esp,0x10
c00180b2:	eb fe                	jmp    c00180b2 <HalPanic(char const*)+0x112>

c00180b4 <HalQueryPerformanceCounter()>:
c00180b4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180b9:	31 d2                	xor    edx,edx
c00180bb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00180c1:	31 c0                	xor    eax,eax
c00180c3:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00180ca:	74 02                	je     c00180ce <HalQueryPerformanceCounter()+0x1a>
c00180cc:	0f 31                	rdtsc  
c00180ce:	c3                   	ret    

c00180cf <HalInitialise()>:
c00180cf:	53                   	push   ebx
c00180d0:	83 ec 08             	sub    esp,0x8
c00180d3:	e8 f5 4f ff ff       	call   c000d0cd <setupINTS()>
c00180d8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180dd:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00180e4:	75 0f                	jne    c00180f5 <HalInitialise()+0x26>
c00180e6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00180ec:	83 e2 fe             	and    edx,0xfffffffe
c00180ef:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00180f5:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00180fc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018102:	83 e2 fe             	and    edx,0xfffffffe
c0018105:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001810b:	e8 a0 02 00 00       	call   c00183b0 <picOpen()>
c0018110:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018117:	74 0a                	je     c0018123 <HalInitialise()+0x54>
c0018119:	e8 e2 01 00 00       	call   c0018300 <picDisable()>
c001811e:	e8 0d 68 00 00       	call   c001e930 <apicOpen()>
c0018123:	50                   	push   eax
c0018124:	bb 0f 00 00 00       	mov    ebx,0xf
c0018129:	6a 00                	push   0x0
c001812b:	68 76 7d 01 c0       	push   0xc0017d76
c0018130:	6a 00                	push   0x0
c0018132:	e8 5f 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018137:	83 c4 0c             	add    esp,0xc
c001813a:	6a 00                	push   0x0
c001813c:	68 76 7d 01 c0       	push   0xc0017d76
c0018141:	6a 01                	push   0x1
c0018143:	e8 4e 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018148:	83 c4 0c             	add    esp,0xc
c001814b:	6a 00                	push   0x0
c001814d:	68 07 78 01 c0       	push   0xc0017807
c0018152:	6a 02                	push   0x2
c0018154:	e8 3d 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018159:	83 c4 0c             	add    esp,0xc
c001815c:	6a 00                	push   0x0
c001815e:	68 76 7d 01 c0       	push   0xc0017d76
c0018163:	6a 03                	push   0x3
c0018165:	e8 2c 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001816a:	83 c4 0c             	add    esp,0xc
c001816d:	6a 00                	push   0x0
c001816f:	68 76 7d 01 c0       	push   0xc0017d76
c0018174:	6a 04                	push   0x4
c0018176:	e8 1b 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001817b:	83 c4 0c             	add    esp,0xc
c001817e:	6a 00                	push   0x0
c0018180:	68 76 7d 01 c0       	push   0xc0017d76
c0018185:	6a 05                	push   0x5
c0018187:	e8 0a 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001818c:	83 c4 0c             	add    esp,0xc
c001818f:	6a 00                	push   0x0
c0018191:	68 aa 7d 01 c0       	push   0xc0017daa
c0018196:	6a 06                	push   0x6
c0018198:	e8 f9 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001819d:	83 c4 0c             	add    esp,0xc
c00181a0:	6a 00                	push   0x0
c00181a2:	68 20 78 01 c0       	push   0xc0017820
c00181a7:	6a 08                	push   0x8
c00181a9:	e8 e8 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181ae:	83 c4 0c             	add    esp,0xc
c00181b1:	6a 00                	push   0x0
c00181b3:	68 76 7d 01 c0       	push   0xc0017d76
c00181b8:	6a 09                	push   0x9
c00181ba:	e8 d7 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181bf:	83 c4 0c             	add    esp,0xc
c00181c2:	6a 00                	push   0x0
c00181c4:	68 76 7d 01 c0       	push   0xc0017d76
c00181c9:	6a 0a                	push   0xa
c00181cb:	e8 c6 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181d0:	83 c4 0c             	add    esp,0xc
c00181d3:	6a 00                	push   0x0
c00181d5:	68 76 7d 01 c0       	push   0xc0017d76
c00181da:	6a 0b                	push   0xb
c00181dc:	e8 b5 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181e1:	83 c4 0c             	add    esp,0xc
c00181e4:	6a 00                	push   0x0
c00181e6:	68 86 7c 01 c0       	push   0xc0017c86
c00181eb:	6a 0d                	push   0xd
c00181ed:	e8 a4 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f2:	83 c4 0c             	add    esp,0xc
c00181f5:	6a 00                	push   0x0
c00181f7:	68 ed 7c 01 c0       	push   0xc0017ced
c00181fc:	6a 0e                	push   0xe
c00181fe:	e8 93 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018203:	83 c4 10             	add    esp,0x10
c0018206:	50                   	push   eax
c0018207:	6a 00                	push   0x0
c0018209:	68 76 7d 01 c0       	push   0xc0017d76
c001820e:	53                   	push   ebx
c001820f:	43                   	inc    ebx
c0018210:	e8 81 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018215:	83 c4 10             	add    esp,0x10
c0018218:	83 fb 1e             	cmp    ebx,0x1e
c001821b:	75 e9                	jne    c0018206 <HalInitialise()+0x137>
c001821d:	50                   	push   eax
c001821e:	6a 00                	push   0x0
c0018220:	68 db 29 01 c0       	push   0xc00129db
c0018225:	6a 60                	push   0x60
c0018227:	e8 6a 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001822c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018231:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001823b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018242:	e8 8c f8 fe ff       	call   c0007ad3 <malloc>
c0018247:	89 04 24             	mov    DWORD PTR [esp],eax
c001824a:	89 c3                	mov    ebx,eax
c001824c:	e8 37 09 00 00       	call   c0018b88 <RTC::RTC()>
c0018251:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001825b:	5a                   	pop    edx
c001825c:	59                   	pop    ecx
c001825d:	53                   	push   ebx
c001825e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018264:	e8 f7 46 ff ff       	call   c000c960 <Device::addChild(Device*)>
c0018269:	8b 03                	mov    eax,DWORD PTR [ebx]
c001826b:	6a 00                	push   0x0
c001826d:	6a 00                	push   0x0
c001826f:	6a 00                	push   0x0
c0018271:	53                   	push   ebx
c0018272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018275:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001827a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018280:	83 c4 28             	add    esp,0x28
c0018283:	5b                   	pop    ebx
c0018284:	c3                   	ret    

c0018285 <HalMakeBeep(int)>:
c0018285:	53                   	push   ebx
c0018286:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001828a:	85 db                	test   ebx,ebx
c001828c:	75 07                	jne    c0018295 <HalMakeBeep(int)+0x10>
c001828e:	e4 61                	in     al,0x61
c0018290:	83 e0 fc             	and    eax,0xfffffffc
c0018293:	eb 26                	jmp    c00182bb <HalMakeBeep(int)+0x36>
c0018295:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001829a:	99                   	cdq    
c001829b:	f7 fb                	idiv   ebx
c001829d:	89 c1                	mov    ecx,eax
c001829f:	b0 b6                	mov    al,0xb6
c00182a1:	e6 43                	out    0x43,al
c00182a3:	88 c8                	mov    al,cl
c00182a5:	e6 42                	out    0x42,al
c00182a7:	89 c8                	mov    eax,ecx
c00182a9:	c1 e8 08             	shr    eax,0x8
c00182ac:	e6 42                	out    0x42,al
c00182ae:	e4 61                	in     al,0x61
c00182b0:	89 c2                	mov    edx,eax
c00182b2:	83 ca 03             	or     edx,0x3
c00182b5:	38 d0                	cmp    al,dl
c00182b7:	74 04                	je     c00182bd <HalMakeBeep(int)+0x38>
c00182b9:	88 d0                	mov    al,dl
c00182bb:	e6 61                	out    0x61,al
c00182bd:	5b                   	pop    ebx
c00182be:	c3                   	ret    

c00182bf <HalGetRand()>:
c00182bf:	31 c0                	xor    eax,eax
c00182c1:	c3                   	ret    

c00182c2 <HalEndOfInterrupt(int)>:
c00182c2:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00182c9:	74 23                	je     c00182ee <HalEndOfInterrupt(int)+0x2c>
c00182cb:	83 ec 14             	sub    esp,0x14
c00182ce:	6a 1b                	push   0x1b
c00182d0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182d6:	e8 07 ee fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00182db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00182e0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00182ea:	83 c4 1c             	add    esp,0x1c
c00182ed:	c3                   	ret    
c00182ee:	e9 41 02 00 00       	jmp    c0018534 <picEOI(int)>

c00182f3 <HalRestart()>:
c00182f3:	c3                   	ret    

c00182f4 <HalShutdown()>:
c00182f4:	c3                   	ret    

c00182f5 <HalSleep()>:
c00182f5:	c3                   	ret    
c00182f6:	66 90                	xchg   ax,ax

c00182f8 <picIoWait()>:
c00182f8:	eb 00                	jmp    c00182fa <picIoWait()+0x2>
c00182fa:	eb 00                	jmp    c00182fc <picIoWait()+0x4>
c00182fc:	90                   	nop
c00182fd:	c3                   	ret    
c00182fe:	66 90                	xchg   ax,ax

c0018300 <picDisable()>:
c0018300:	83 ec 10             	sub    esp,0x10
c0018303:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001830a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001830f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018313:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018318:	ee                   	out    dx,al
c0018319:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018320:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018325:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018329:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001832e:	ee                   	out    dx,al
c001832f:	90                   	nop
c0018330:	83 c4 10             	add    esp,0x10
c0018333:	c3                   	ret    

c0018334 <picGetIRQReg(int)>:
c0018334:	83 ec 10             	sub    esp,0x10
c0018337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001833b:	0f b6 c0             	movzx  eax,al
c001833e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018345:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018349:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001834d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018352:	ee                   	out    dx,al
c0018353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018357:	0f b6 c0             	movzx  eax,al
c001835a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018361:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018365:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018369:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001836e:	ee                   	out    dx,al
c001836f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018376:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001837b:	89 c2                	mov    edx,eax
c001837d:	ec                   	in     al,dx
c001837e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018382:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018386:	0f b6 c0             	movzx  eax,al
c0018389:	c1 e0 08             	shl    eax,0x8
c001838c:	89 c1                	mov    ecx,eax
c001838e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018395:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001839a:	89 c2                	mov    edx,eax
c001839c:	ec                   	in     al,dx
c001839d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00183a1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183a5:	0f b6 c0             	movzx  eax,al
c00183a8:	09 c8                	or     eax,ecx
c00183aa:	83 c4 10             	add    esp,0x10
c00183ad:	c3                   	ret    
c00183ae:	66 90                	xchg   ax,ax

c00183b0 <picOpen()>:
c00183b0:	83 ec 50             	sub    esp,0x50
c00183b3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00183ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00183bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00183c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183c7:	ee                   	out    dx,al
c00183c8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00183cf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00183d4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00183d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183dc:	ee                   	out    dx,al
c00183dd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00183e5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00183ed:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00183f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183f8:	89 c2                	mov    edx,eax
c00183fa:	ec                   	in     al,dx
c00183fb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00183ff:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018403:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018407:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001840e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018412:	89 c2                	mov    edx,eax
c0018414:	ec                   	in     al,dx
c0018415:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018419:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001841d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018421:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018428:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001842d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018431:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018435:	ee                   	out    dx,al
c0018436:	e8 bd fe ff ff       	call   c00182f8 <picIoWait()>
c001843b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018442:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018447:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001844b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001844f:	ee                   	out    dx,al
c0018450:	e8 a3 fe ff ff       	call   c00182f8 <picIoWait()>
c0018455:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018459:	0f b6 c0             	movzx  eax,al
c001845c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018463:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018467:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001846b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001846f:	ee                   	out    dx,al
c0018470:	e8 83 fe ff ff       	call   c00182f8 <picIoWait()>
c0018475:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018479:	0f b6 c0             	movzx  eax,al
c001847c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018483:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018487:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001848b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001848f:	ee                   	out    dx,al
c0018490:	e8 63 fe ff ff       	call   c00182f8 <picIoWait()>
c0018495:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001849c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00184a1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00184a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184a9:	ee                   	out    dx,al
c00184aa:	e8 49 fe ff ff       	call   c00182f8 <picIoWait()>
c00184af:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00184b6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00184bb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00184bf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00184c3:	ee                   	out    dx,al
c00184c4:	e8 2f fe ff ff       	call   c00182f8 <picIoWait()>
c00184c9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00184d0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00184d5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00184d9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00184dd:	ee                   	out    dx,al
c00184de:	e8 15 fe ff ff       	call   c00182f8 <picIoWait()>
c00184e3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00184ea:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00184ef:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00184f3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00184f7:	ee                   	out    dx,al
c00184f8:	e8 fb fd ff ff       	call   c00182f8 <picIoWait()>
c00184fd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018502:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018509:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001850d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018511:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018515:	ee                   	out    dx,al
c0018516:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001851b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018522:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018526:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001852a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001852e:	ee                   	out    dx,al
c001852f:	90                   	nop
c0018530:	83 c4 50             	add    esp,0x50
c0018533:	c3                   	ret    

c0018534 <picEOI(int)>:
c0018534:	83 ec 10             	sub    esp,0x10
c0018537:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001853c:	75 1e                	jne    c001855c <picEOI(int)+0x28>
c001853e:	6a 0b                	push   0xb
c0018540:	e8 ef fd ff ff       	call   c0018334 <picGetIRQReg(int)>
c0018545:	83 c4 04             	add    esp,0x4
c0018548:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001854d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018552:	25 80 00 00 00       	and    eax,0x80
c0018557:	74 73                	je     c00185cc <picEOI(int)+0x98>
c0018559:	8d 76 00             	lea    esi,[esi+0x0]
c001855c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018561:	75 31                	jne    c0018594 <picEOI(int)+0x60>
c0018563:	6a 0b                	push   0xb
c0018565:	e8 ca fd ff ff       	call   c0018334 <picGetIRQReg(int)>
c001856a:	83 c4 04             	add    esp,0x4
c001856d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018576:	98                   	cwde   
c0018577:	85 c0                	test   eax,eax
c0018579:	78 19                	js     c0018594 <picEOI(int)+0x60>
c001857b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018582:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018587:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001858b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018590:	ee                   	out    dx,al
c0018591:	eb 3d                	jmp    c00185d0 <picEOI(int)+0x9c>
c0018593:	90                   	nop
c0018594:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018599:	7e 19                	jle    c00185b4 <picEOI(int)+0x80>
c001859b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00185a2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00185a7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00185ab:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00185b0:	ee                   	out    dx,al
c00185b1:	8d 76 00             	lea    esi,[esi+0x0]
c00185b4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00185bb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00185c0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00185c4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00185c9:	ee                   	out    dx,al
c00185ca:	eb 04                	jmp    c00185d0 <picEOI(int)+0x9c>
c00185cc:	90                   	nop
c00185cd:	8d 76 00             	lea    esi,[esi+0x0]
c00185d0:	83 c4 10             	add    esp,0x10
c00185d3:	c3                   	ret    

c00185d4 <RTC::open(int, int, void*)>:
c00185d4:	31 c0                	xor    eax,eax
c00185d6:	c3                   	ret    
c00185d7:	90                   	nop

c00185d8 <RTC::close(int, int, void*)>:
c00185d8:	31 c0                	xor    eax,eax
c00185da:	c3                   	ret    
c00185db:	90                   	nop

c00185dc <RTC::timeInSecondsUTC()>:
c00185dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185e0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00185e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00185ec:	c3                   	ret    
c00185ed:	90                   	nop

c00185ee <RTC::timeInDatetimeUTC()>:
c00185ee:	53                   	push   ebx
c00185ef:	83 ec 14             	sub    esp,0x14
c00185f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00185fc:	50                   	push   eax
c00185fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018600:	83 c4 0c             	add    esp,0xc
c0018603:	52                   	push   edx
c0018604:	50                   	push   eax
c0018605:	53                   	push   ebx
c0018606:	e8 c9 40 ff ff       	call   c000c6d4 <secondsToDatetime(unsigned long long)>
c001860b:	89 d8                	mov    eax,ebx
c001860d:	83 c4 14             	add    esp,0x14
c0018610:	5b                   	pop    ebx
c0018611:	c2 04 00             	ret    0x4

c0018614 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018614:	56                   	push   esi
c0018615:	53                   	push   ebx
c0018616:	83 ec 14             	sub    esp,0x14
c0018619:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001861d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001861f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018622:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018626:	52                   	push   edx
c0018627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001862b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001862f:	50                   	push   eax
c0018630:	e8 9f 40 ff ff       	call   c000c6d4 <secondsToDatetime(unsigned long long)>
c0018635:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018639:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001863d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018641:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018645:	89 f0                	mov    eax,esi
c0018647:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001864b:	83 c4 20             	add    esp,0x20
c001864e:	5b                   	pop    ebx
c001864f:	5e                   	pop    esi
c0018650:	ff e0                	jmp    eax

c0018652 <RTC::~RTC()>:
c0018652:	83 ec 0c             	sub    esp,0xc
c0018655:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c001865a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001865e:	89 10                	mov    DWORD PTR [eax],edx
c0018660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018664:	83 ec 0c             	sub    esp,0xc
c0018667:	50                   	push   eax
c0018668:	e8 f3 3d ff ff       	call   c000c460 <Clock::~Clock()>
c001866d:	83 c4 10             	add    esp,0x10
c0018670:	90                   	nop
c0018671:	83 c4 0c             	add    esp,0xc
c0018674:	c3                   	ret    
c0018675:	90                   	nop

c0018676 <RTC::~RTC()>:
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	83 ec 0c             	sub    esp,0xc
c001867c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018680:	e8 cd ff ff ff       	call   c0018652 <RTC::~RTC()>
c0018685:	83 c4 10             	add    esp,0x10
c0018688:	83 ec 08             	sub    esp,0x8
c001868b:	68 60 01 00 00       	push   0x160
c0018690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018694:	e8 73 21 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	83 c4 0c             	add    esp,0xc
c001869f:	c3                   	ret    

c00186a0 <RTC::get_update_in_progress_flag()>:
c00186a0:	83 ec 14             	sub    esp,0x14
c00186a3:	6a 0a                	push   0xa
c00186a5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186ab:	e8 ea ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186b0:	83 c4 1c             	add    esp,0x1c
c00186b3:	0f b6 c0             	movzx  eax,al
c00186b6:	c1 e8 07             	shr    eax,0x7
c00186b9:	c3                   	ret    

c00186ba <RTC::completeRTCRefresh()>:
c00186ba:	55                   	push   ebp
c00186bb:	57                   	push   edi
c00186bc:	56                   	push   esi
c00186bd:	53                   	push   ebx
c00186be:	83 ec 3c             	sub    esp,0x3c
c00186c1:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00186ce:	e8 cd ff ff ff       	call   c00186a0 <RTC::get_update_in_progress_flag()>
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	84 c0                	test   al,al
c00186d8:	74 0e                	je     c00186e8 <RTC::completeRTCRefresh()+0x2e>
c00186da:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00186e0:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00186e6:	73 df                	jae    c00186c7 <RTC::completeRTCRefresh()+0xd>
c00186e8:	50                   	push   eax
c00186e9:	50                   	push   eax
c00186ea:	6a 00                	push   0x0
c00186ec:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186f2:	e8 a3 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186f7:	89 c7                	mov    edi,eax
c00186f9:	58                   	pop    eax
c00186fa:	5a                   	pop    edx
c00186fb:	6a 02                	push   0x2
c00186fd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018703:	e8 92 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018708:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001870c:	59                   	pop    ecx
c001870d:	5b                   	pop    ebx
c001870e:	6a 04                	push   0x4
c0018710:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018716:	e8 7f ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001871b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001871f:	5e                   	pop    esi
c0018720:	5d                   	pop    ebp
c0018721:	6a 07                	push   0x7
c0018723:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018729:	e8 6c ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001872e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018732:	58                   	pop    eax
c0018733:	5a                   	pop    edx
c0018734:	6a 08                	push   0x8
c0018736:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001873c:	e8 59 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018741:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018745:	59                   	pop    ecx
c0018746:	5b                   	pop    ebx
c0018747:	6a 09                	push   0x9
c0018749:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001874f:	e8 46 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018754:	0f b6 c0             	movzx  eax,al
c0018757:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018764:	83 ec 0c             	sub    esp,0xc
c0018767:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001876b:	e8 30 ff ff ff       	call   c00186a0 <RTC::get_update_in_progress_flag()>
c0018770:	83 c4 10             	add    esp,0x10
c0018773:	84 c0                	test   al,al
c0018775:	74 0e                	je     c0018785 <RTC::completeRTCRefresh()+0xcb>
c0018777:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001877d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018783:	73 df                	jae    c0018764 <RTC::completeRTCRefresh()+0xaa>
c0018785:	51                   	push   ecx
c0018786:	51                   	push   ecx
c0018787:	6a 00                	push   0x0
c0018789:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001878f:	e8 06 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018794:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018798:	5b                   	pop    ebx
c0018799:	5e                   	pop    esi
c001879a:	6a 02                	push   0x2
c001879c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187a2:	e8 f3 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187a7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00187ab:	5d                   	pop    ebp
c00187ac:	58                   	pop    eax
c00187ad:	6a 04                	push   0x4
c00187af:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187b5:	e8 e0 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ba:	88 c3                	mov    bl,al
c00187bc:	58                   	pop    eax
c00187bd:	5a                   	pop    edx
c00187be:	6a 07                	push   0x7
c00187c0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c6:	e8 cf e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187cb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00187cf:	59                   	pop    ecx
c00187d0:	5e                   	pop    esi
c00187d1:	6a 08                	push   0x8
c00187d3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d9:	e8 bc e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187de:	5d                   	pop    ebp
c00187df:	89 c6                	mov    esi,eax
c00187e1:	58                   	pop    eax
c00187e2:	6a 09                	push   0x9
c00187e4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187ea:	e8 ab e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ef:	89 f9                	mov    ecx,edi
c00187f1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	0f b6 e8             	movzx  ebp,al
c00187fb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018800:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018804:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018808:	74 27                	je     c0018831 <RTC::completeRTCRefresh()+0x177>
c001880a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001880e:	89 f0                	mov    eax,esi
c0018810:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018814:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018818:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001881c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018820:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018824:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018828:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001882c:	e9 2d ff ff ff       	jmp    c001875e <RTC::completeRTCRefresh()+0xa4>
c0018831:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018836:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001883a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001883e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018842:	75 c6                	jne    c001880a <RTC::completeRTCRefresh()+0x150>
c0018844:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018849:	89 f1                	mov    ecx,esi
c001884b:	0f b6 fb             	movzx  edi,bl
c001884e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018852:	0f b6 c9             	movzx  ecx,cl
c0018855:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018859:	89 f1                	mov    ecx,esi
c001885b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001885f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018863:	0f 94 c2             	sete   dl
c0018866:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001886a:	0f 94 c0             	sete   al
c001886d:	21 d0                	and    eax,edx
c001886f:	31 d2                	xor    edx,edx
c0018871:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018875:	0f 94 c2             	sete   dl
c0018878:	85 c2                	test   edx,eax
c001887a:	74 8e                	je     c001880a <RTC::completeRTCRefresh()+0x150>
c001887c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018880:	75 88                	jne    c001880a <RTC::completeRTCRefresh()+0x150>
c0018882:	52                   	push   edx
c0018883:	52                   	push   edx
c0018884:	6a 0b                	push   0xb
c0018886:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001888c:	e8 09 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018891:	83 c4 10             	add    esp,0x10
c0018894:	a8 04                	test   al,0x4
c0018896:	75 7a                	jne    c0018912 <RTC::completeRTCRefresh()+0x258>
c0018898:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001889c:	c1 ef 04             	shr    edi,0x4
c001889f:	83 e6 0f             	and    esi,0xf
c00188a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00188a6:	c1 ed 04             	shr    ebp,0x4
c00188a9:	6b ed 0a             	imul   ebp,ebp,0xa
c00188ac:	c1 ea 04             	shr    edx,0x4
c00188af:	6b d2 0a             	imul   edx,edx,0xa
c00188b2:	83 e1 0f             	and    ecx,0xf
c00188b5:	01 d1                	add    ecx,edx
c00188b7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00188bb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00188bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188c3:	c1 ea 04             	shr    edx,0x4
c00188c6:	6b d2 0a             	imul   edx,edx,0xa
c00188c9:	83 e1 0f             	and    ecx,0xf
c00188cc:	01 d1                	add    ecx,edx
c00188ce:	89 fa                	mov    edx,edi
c00188d0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00188d4:	83 e2 07             	and    edx,0x7
c00188d7:	89 d9                	mov    ecx,ebx
c00188d9:	6b d2 0a             	imul   edx,edx,0xa
c00188dc:	83 e1 0f             	and    ecx,0xf
c00188df:	83 e3 80             	and    ebx,0xffffff80
c00188e2:	01 d1                	add    ecx,edx
c00188e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188e8:	09 cb                	or     ebx,ecx
c00188ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00188ee:	c1 ea 04             	shr    edx,0x4
c00188f1:	6b d2 0a             	imul   edx,edx,0xa
c00188f4:	83 e1 0f             	and    ecx,0xf
c00188f7:	01 d1                	add    ecx,edx
c00188f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188fd:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018901:	c1 ea 04             	shr    edx,0x4
c0018904:	6b d2 0a             	imul   edx,edx,0xa
c0018907:	01 d6                	add    esi,edx
c0018909:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001890d:	83 e2 0f             	and    edx,0xf
c0018910:	01 d5                	add    ebp,edx
c0018912:	a8 02                	test   al,0x2
c0018914:	75 15                	jne    c001892b <RTC::completeRTCRefresh()+0x271>
c0018916:	f6 c3 80             	test   bl,0x80
c0018919:	74 10                	je     c001892b <RTC::completeRTCRefresh()+0x271>
c001891b:	83 e3 7f             	and    ebx,0x7f
c001891e:	b9 18 00 00 00       	mov    ecx,0x18
c0018923:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018926:	99                   	cdq    
c0018927:	f7 f9                	idiv   ecx
c0018929:	88 d3                	mov    bl,dl
c001892b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018931:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018937:	77 06                	ja     c001893f <RTC::completeRTCRefresh()+0x285>
c0018939:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001893f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018944:	31 c9                	xor    ecx,ecx
c0018946:	31 d2                	xor    edx,edx
c0018948:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001894c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018950:	89 cd                	mov    ebp,ecx
c0018952:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018956:	c1 e7 10             	shl    edi,0x10
c0018959:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001895f:	c1 e0 10             	shl    eax,0x10
c0018962:	09 c5                	or     ebp,eax
c0018964:	89 e9                	mov    ecx,ebp
c0018966:	0f b7 c2             	movzx  eax,dx
c0018969:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001896d:	09 f8                	or     eax,edi
c001896f:	89 c2                	mov    edx,eax
c0018971:	50                   	push   eax
c0018972:	50                   	push   eax
c0018973:	88 d9                	mov    cl,bl
c0018975:	51                   	push   ecx
c0018976:	52                   	push   edx
c0018977:	e8 d3 3b ff ff       	call   c000c54f <datetimeToSeconds(datetime_t)>
c001897c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018980:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018986:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001898c:	83 c4 4c             	add    esp,0x4c
c001898f:	5b                   	pop    ebx
c0018990:	5e                   	pop    esi
c0018991:	5f                   	pop    edi
c0018992:	5d                   	pop    ebp
c0018993:	c3                   	ret    

c0018994 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018994:	55                   	push   ebp
c0018995:	57                   	push   edi
c0018996:	56                   	push   esi
c0018997:	53                   	push   ebx
c0018998:	83 ec 30             	sub    esp,0x30
c001899b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001899f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00189a3:	6a 00                	push   0x0
c00189a5:	6a 00                	push   0x0
c00189a7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189ad:	e8 00 e9 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189b2:	83 c4 0c             	add    esp,0xc
c00189b5:	6a 00                	push   0x0
c00189b7:	6a 02                	push   0x2
c00189b9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189bf:	e8 ee e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189c4:	89 f8                	mov    eax,edi
c00189c6:	89 f9                	mov    ecx,edi
c00189c8:	0f b6 c4             	movzx  eax,ah
c00189cb:	31 d2                	xor    edx,edx
c00189cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00189d1:	c1 e9 10             	shr    ecx,0x10
c00189d4:	89 f0                	mov    eax,esi
c00189d6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00189da:	89 f0                	mov    eax,esi
c00189dc:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00189e0:	0f b6 c4             	movzx  eax,ah
c00189e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189e7:	89 f0                	mov    eax,esi
c00189e9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00189ed:	c1 e8 10             	shr    eax,0x10
c00189f0:	b9 64 00 00 00       	mov    ecx,0x64
c00189f5:	f7 f1                	div    ecx
c00189f7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00189fb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00189ff:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a03:	59                   	pop    ecx
c0018a04:	5b                   	pop    ebx
c0018a05:	89 fb                	mov    ebx,edi
c0018a07:	6a 0b                	push   0xb
c0018a09:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a0f:	e8 86 e7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018a14:	83 c4 10             	add    esp,0x10
c0018a17:	a8 04                	test   al,0x4
c0018a19:	89 c5                	mov    ebp,eax
c0018a1b:	75 6e                	jne    c0018a8b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018a1d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a21:	31 d2                	xor    edx,edx
c0018a23:	0f b6 c1             	movzx  eax,cl
c0018a26:	b9 0a 00 00 00       	mov    ecx,0xa
c0018a2b:	f7 f1                	div    ecx
c0018a2d:	c1 e0 04             	shl    eax,0x4
c0018a30:	09 d0                	or     eax,edx
c0018a32:	31 d2                	xor    edx,edx
c0018a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018a3d:	f7 f1                	div    ecx
c0018a3f:	c1 e0 04             	shl    eax,0x4
c0018a42:	09 d0                	or     eax,edx
c0018a44:	31 d2                	xor    edx,edx
c0018a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a4a:	0f b6 c3             	movzx  eax,bl
c0018a4d:	f7 f1                	div    ecx
c0018a4f:	c1 e0 04             	shl    eax,0x4
c0018a52:	09 d0                	or     eax,edx
c0018a54:	31 d2                	xor    edx,edx
c0018a56:	89 c3                	mov    ebx,eax
c0018a58:	89 f0                	mov    eax,esi
c0018a5a:	0f b6 c0             	movzx  eax,al
c0018a5d:	f7 f1                	div    ecx
c0018a5f:	c1 e0 04             	shl    eax,0x4
c0018a62:	09 d0                	or     eax,edx
c0018a64:	31 d2                	xor    edx,edx
c0018a66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a6f:	f7 f1                	div    ecx
c0018a71:	c1 e0 04             	shl    eax,0x4
c0018a74:	09 d0                	or     eax,edx
c0018a76:	31 d2                	xor    edx,edx
c0018a78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a80:	f7 f1                	div    ecx
c0018a82:	c1 e0 04             	shl    eax,0x4
c0018a85:	09 d0                	or     eax,edx
c0018a87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a8b:	83 e5 02             	and    ebp,0x2
c0018a8e:	75 1e                	jne    c0018aae <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018a90:	0f b6 c3             	movzx  eax,bl
c0018a93:	83 f8 0b             	cmp    eax,0xb
c0018a96:	76 10                	jbe    c0018aa8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018a98:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018a9b:	84 d2                	test   dl,dl
c0018a9d:	88 d3                	mov    bl,dl
c0018a9f:	75 02                	jne    c0018aa3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018aa1:	b3 0c                	mov    bl,0xc
c0018aa3:	83 cb 80             	or     ebx,0xffffff80
c0018aa6:	eb 06                	jmp    c0018aae <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018aa8:	85 c0                	test   eax,eax
c0018aaa:	75 02                	jne    c0018aae <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018aac:	b3 0c                	mov    bl,0xc
c0018aae:	50                   	push   eax
c0018aaf:	0f b6 db             	movzx  ebx,bl
c0018ab2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018ab7:	52                   	push   edx
c0018ab8:	6a 00                	push   0x0
c0018aba:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ac0:	e8 ed e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ac5:	83 c4 0c             	add    esp,0xc
c0018ac8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018acd:	50                   	push   eax
c0018ace:	6a 02                	push   0x2
c0018ad0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad6:	e8 d7 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018adb:	83 c4 0c             	add    esp,0xc
c0018ade:	53                   	push   ebx
c0018adf:	6a 04                	push   0x4
c0018ae1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ae7:	e8 c6 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018aec:	83 c4 0c             	add    esp,0xc
c0018aef:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018af4:	52                   	push   edx
c0018af5:	6a 07                	push   0x7
c0018af7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018afd:	e8 b0 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b02:	83 c4 0c             	add    esp,0xc
c0018b05:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b0a:	50                   	push   eax
c0018b0b:	6a 08                	push   0x8
c0018b0d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b13:	e8 9a e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b18:	83 c4 0c             	add    esp,0xc
c0018b1b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018b20:	55                   	push   ebp
c0018b21:	6a 09                	push   0x9
c0018b23:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b29:	e8 84 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b2e:	5a                   	pop    edx
c0018b2f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b33:	e8 82 fb ff ff       	call   c00186ba <RTC::completeRTCRefresh()>
c0018b38:	83 c4 3c             	add    esp,0x3c
c0018b3b:	b0 01                	mov    al,0x1
c0018b3d:	5b                   	pop    ebx
c0018b3e:	5e                   	pop    esi
c0018b3f:	5f                   	pop    edi
c0018b40:	5d                   	pop    ebp
c0018b41:	c3                   	ret    

c0018b42 <rtcIRQHandler(regs*, void*)>:
c0018b42:	53                   	push   ebx
c0018b43:	83 ec 10             	sub    esp,0x10
c0018b46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018b4a:	6a 0c                	push   0xc
c0018b4c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b52:	e8 43 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018b57:	83 c4 10             	add    esp,0x10
c0018b5a:	a8 80                	test   al,0x80
c0018b5c:	74 24                	je     c0018b82 <rtcIRQHandler(regs*, void*)+0x40>
c0018b5e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018b65:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018b6c:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018b73:	75 0d                	jne    c0018b82 <rtcIRQHandler(regs*, void*)+0x40>
c0018b75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b79:	83 c4 08             	add    esp,0x8
c0018b7c:	5b                   	pop    ebx
c0018b7d:	e9 38 fb ff ff       	jmp    c00186ba <RTC::completeRTCRefresh()>
c0018b82:	83 c4 08             	add    esp,0x8
c0018b85:	5b                   	pop    ebx
c0018b86:	c3                   	ret    
c0018b87:	90                   	nop

c0018b88 <RTC::RTC()>:
c0018b88:	83 ec 1c             	sub    esp,0x1c
c0018b8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b8f:	83 ec 08             	sub    esp,0x8
c0018b92:	68 ef 2c 02 c0       	push   0xc0022cef
c0018b97:	50                   	push   eax
c0018b98:	e8 8d 38 ff ff       	call   c000c42a <Clock::Clock(char const*)>
c0018b9d:	83 c4 10             	add    esp,0x10
c0018ba0:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c0018ba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ba9:	89 10                	mov    DWORD PTR [eax],edx
c0018bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018baf:	83 ec 0c             	sub    esp,0xc
c0018bb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018bb6:	6a 01                	push   0x1
c0018bb8:	68 42 8b 01 c0       	push   0xc0018b42
c0018bbd:	6a 08                	push   0x8
c0018bbf:	50                   	push   eax
c0018bc0:	e8 47 3d ff ff       	call   c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018bc5:	83 c4 20             	add    esp,0x20
c0018bc8:	89 c2                	mov    edx,eax
c0018bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bce:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018bd4:	fa                   	cli    
c0018bd5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018bda:	83 c0 01             	add    eax,0x1
c0018bdd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018be2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018be7:	83 ec 08             	sub    esp,0x8
c0018bea:	6a 0b                	push   0xb
c0018bec:	50                   	push   eax
c0018bed:	e8 a8 e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018bf2:	83 c4 10             	add    esp,0x10
c0018bf5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018bf9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018bfe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c02:	83 ca 10             	or     edx,0x10
c0018c05:	0f b6 d2             	movzx  edx,dl
c0018c08:	83 ec 04             	sub    esp,0x4
c0018c0b:	52                   	push   edx
c0018c0c:	6a 0b                	push   0xb
c0018c0e:	50                   	push   eax
c0018c0f:	e8 9e e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c14:	83 c4 10             	add    esp,0x10
c0018c17:	83 ec 0c             	sub    esp,0xc
c0018c1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c1e:	e8 97 fa ff ff       	call   c00186ba <RTC::completeRTCRefresh()>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c2b:	83 e8 01             	sub    eax,0x1
c0018c2e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c33:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c38:	85 c0                	test   eax,eax
c0018c3a:	75 01                	jne    c0018c3d <RTC::RTC()+0xb5>
c0018c3c:	fb                   	sti    
c0018c3d:	90                   	nop
c0018c3e:	83 c4 1c             	add    esp,0x1c
c0018c41:	c3                   	ret    
c0018c42:	66 90                	xchg   ax,ax

c0018c44 <HalConsoleScroll(int, int)>:
c0018c44:	83 ec 10             	sub    esp,0x10
c0018c47:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018c4f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018c57:	90                   	nop
c0018c58:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018c5d:	0f 8f e1 00 00 00    	jg     c0018d44 <HalConsoleScroll(int, int)+0x100>
c0018c63:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018c6b:	90                   	nop
c0018c6c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018c74:	0f 8f be 00 00 00    	jg     c0018d38 <HalConsoleScroll(int, int)+0xf4>
c0018c7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c7e:	89 d0                	mov    eax,edx
c0018c80:	c1 e0 02             	shl    eax,0x2
c0018c83:	01 d0                	add    eax,edx
c0018c85:	c1 e0 05             	shl    eax,0x5
c0018c88:	89 c2                	mov    edx,eax
c0018c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c8e:	01 d0                	add    eax,edx
c0018c90:	89 c2                	mov    edx,eax
c0018c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018c96:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018c99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c9d:	89 d0                	mov    eax,edx
c0018c9f:	c1 e0 02             	shl    eax,0x2
c0018ca2:	01 d0                	add    eax,edx
c0018ca4:	c1 e0 05             	shl    eax,0x5
c0018ca7:	89 c2                	mov    edx,eax
c0018ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cad:	01 d0                	add    eax,edx
c0018caf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018cb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cb9:	01 d0                	add    eax,edx
c0018cbb:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018cbd:	88 10                	mov    BYTE PTR [eax],dl
c0018cbf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018cc4:	75 66                	jne    c0018d2c <HalConsoleScroll(int, int)+0xe8>
c0018cc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cca:	83 e0 01             	and    eax,0x1
c0018ccd:	74 39                	je     c0018d08 <HalConsoleScroll(int, int)+0xc4>
c0018ccf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cd3:	83 e0 0f             	and    eax,0xf
c0018cd6:	88 c2                	mov    dl,al
c0018cd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cdc:	c1 e0 04             	shl    eax,0x4
c0018cdf:	09 d0                	or     eax,edx
c0018ce1:	88 c1                	mov    cl,al
c0018ce3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ce7:	89 d0                	mov    eax,edx
c0018ce9:	c1 e0 02             	shl    eax,0x2
c0018cec:	01 d0                	add    eax,edx
c0018cee:	c1 e0 05             	shl    eax,0x5
c0018cf1:	89 c2                	mov    edx,eax
c0018cf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cf7:	01 d0                	add    eax,edx
c0018cf9:	89 c2                	mov    edx,eax
c0018cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cff:	01 d0                	add    eax,edx
c0018d01:	88 ca                	mov    dl,cl
c0018d03:	88 10                	mov    BYTE PTR [eax],dl
c0018d05:	eb 25                	jmp    c0018d2c <HalConsoleScroll(int, int)+0xe8>
c0018d07:	90                   	nop
c0018d08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d0c:	89 d0                	mov    eax,edx
c0018d0e:	c1 e0 02             	shl    eax,0x2
c0018d11:	01 d0                	add    eax,edx
c0018d13:	c1 e0 05             	shl    eax,0x5
c0018d16:	89 c2                	mov    edx,eax
c0018d18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d1c:	01 d0                	add    eax,edx
c0018d1e:	89 c2                	mov    edx,eax
c0018d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d24:	01 d0                	add    eax,edx
c0018d26:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018d29:	8d 76 00             	lea    esi,[esi+0x0]
c0018d2c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018d31:	e9 36 ff ff ff       	jmp    c0018c6c <HalConsoleScroll(int, int)+0x28>
c0018d36:	66 90                	xchg   ax,ax
c0018d38:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018d3d:	e9 16 ff ff ff       	jmp    c0018c58 <HalConsoleScroll(int, int)+0x14>
c0018d42:	66 90                	xchg   ax,ax
c0018d44:	90                   	nop
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	c3                   	ret    
c0018d49:	8d 76 00             	lea    esi,[esi+0x0]

c0018d4c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018d4c:	83 ec 14             	sub    esp,0x14
c0018d4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d53:	88 04 24             	mov    BYTE PTR [esp],al
c0018d56:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018d59:	0f b6 c0             	movzx  eax,al
c0018d5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d60:	89 d1                	mov    ecx,edx
c0018d62:	83 e1 0f             	and    ecx,0xf
c0018d65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d69:	c1 e2 04             	shl    edx,0x4
c0018d6c:	0f b6 d2             	movzx  edx,dl
c0018d6f:	09 ca                	or     edx,ecx
c0018d71:	c1 e2 08             	shl    edx,0x8
c0018d74:	09 d0                	or     eax,edx
c0018d76:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018d7b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018d83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d87:	89 d0                	mov    eax,edx
c0018d89:	c1 e0 02             	shl    eax,0x2
c0018d8c:	01 d0                	add    eax,edx
c0018d8e:	c1 e0 04             	shl    eax,0x4
c0018d91:	89 c2                	mov    edx,eax
c0018d93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d97:	01 d0                	add    eax,edx
c0018d99:	d1 e0                	shl    eax,1
c0018d9b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018da3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018da8:	66 89 10             	mov    WORD PTR [eax],dx
c0018dab:	90                   	nop
c0018dac:	83 c4 14             	add    esp,0x14
c0018daf:	c3                   	ret    

c0018db0 <HalConsoleCursorUpdate(int, int)>:
c0018db0:	83 ec 20             	sub    esp,0x20
c0018db3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db7:	89 c2                	mov    edx,eax
c0018db9:	c1 e2 02             	shl    edx,0x2
c0018dbc:	01 d0                	add    eax,edx
c0018dbe:	c1 e0 04             	shl    eax,0x4
c0018dc1:	89 c2                	mov    edx,eax
c0018dc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dc7:	01 d0                	add    eax,edx
c0018dc9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018dce:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018dd5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018dda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018dde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018de2:	ee                   	out    dx,al
c0018de3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018de8:	0f b6 c0             	movzx  eax,al
c0018deb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018df2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018df6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018dfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018dfe:	ee                   	out    dx,al
c0018dff:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e06:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e0b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018e0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e13:	ee                   	out    dx,al
c0018e14:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018e19:	c1 e8 08             	shr    eax,0x8
c0018e1c:	0f b6 c0             	movzx  eax,al
c0018e1f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018e26:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018e2a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018e2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e32:	ee                   	out    dx,al
c0018e33:	90                   	nop
c0018e34:	83 c4 20             	add    esp,0x20
c0018e37:	c3                   	ret    

c0018e38 <FAT::getName()>:
c0018e38:	b8 40 2d 02 c0       	mov    eax,0xc0022d40
c0018e3d:	c3                   	ret    
c0018e3e:	66 90                	xchg   ax,ax

c0018e40 <FAT::tell(void*, unsigned long long*)>:
c0018e40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e45:	75 09                	jne    c0018e50 <FAT::tell(void*, unsigned long long*)+0x10>
c0018e47:	b8 04 00 00 00       	mov    eax,0x4
c0018e4c:	c3                   	ret    
c0018e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e55:	75 09                	jne    c0018e60 <FAT::tell(void*, unsigned long long*)+0x20>
c0018e57:	b8 04 00 00 00       	mov    eax,0x4
c0018e5c:	c3                   	ret    
c0018e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e67:	ba 00 00 00 00       	mov    edx,0x0
c0018e6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e70:	89 01                	mov    DWORD PTR [ecx],eax
c0018e72:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e75:	b8 00 00 00 00       	mov    eax,0x0
c0018e7a:	c3                   	ret    
c0018e7b:	90                   	nop

c0018e7c <FAT::stat(void*, unsigned long long*)>:
c0018e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e81:	75 09                	jne    c0018e8c <FAT::stat(void*, unsigned long long*)+0x10>
c0018e83:	b8 04 00 00 00       	mov    eax,0x4
c0018e88:	c3                   	ret    
c0018e89:	8d 76 00             	lea    esi,[esi+0x0]
c0018e8c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e91:	75 09                	jne    c0018e9c <FAT::stat(void*, unsigned long long*)+0x20>
c0018e93:	b8 04 00 00 00       	mov    eax,0x4
c0018e98:	c3                   	ret    
c0018e99:	8d 76 00             	lea    esi,[esi+0x0]
c0018e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ea0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018ea3:	ba 00 00 00 00       	mov    edx,0x0
c0018ea8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018eac:	89 01                	mov    DWORD PTR [ecx],eax
c0018eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018eb1:	b8 00 00 00 00       	mov    eax,0x0
c0018eb6:	c3                   	ret    
c0018eb7:	90                   	nop

c0018eb8 <FAT::~FAT()>:
c0018eb8:	83 ec 0c             	sub    esp,0xc
c0018ebb:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0018ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec4:	89 10                	mov    DWORD PTR [eax],edx
c0018ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eca:	83 ec 0c             	sub    esp,0xc
c0018ecd:	50                   	push   eax
c0018ece:	e8 7d 28 ff ff       	call   c000b750 <Filesystem::~Filesystem()>
c0018ed3:	83 c4 10             	add    esp,0x10
c0018ed6:	90                   	nop
c0018ed7:	83 c4 0c             	add    esp,0xc
c0018eda:	c3                   	ret    
c0018edb:	90                   	nop

c0018edc <FAT::~FAT()>:
c0018edc:	83 ec 0c             	sub    esp,0xc
c0018edf:	83 ec 0c             	sub    esp,0xc
c0018ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ee6:	e8 cd ff ff ff       	call   c0018eb8 <FAT::~FAT()>
c0018eeb:	83 c4 10             	add    esp,0x10
c0018eee:	83 ec 08             	sub    esp,0x8
c0018ef1:	6a 08                	push   0x8
c0018ef3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ef7:	e8 10 19 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018efc:	83 c4 10             	add    esp,0x10
c0018eff:	83 c4 0c             	add    esp,0xc
c0018f02:	c3                   	ret    
c0018f03:	90                   	nop

c0018f04 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f04:	83 ec 1c             	sub    esp,0x1c
c0018f07:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f0e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f17:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0018f21:	75 35                	jne    c0018f58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018f23:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f27:	88 c2                	mov    dl,al
c0018f29:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f2e:	01 d0                	add    eax,edx
c0018f30:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f34:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018f3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f3e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018f45:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f4e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018f55:	eb 19                	jmp    c0018f70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018f57:	90                   	nop
c0018f58:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f5c:	88 c2                	mov    dl,al
c0018f5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f62:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f69:	01 d0                	add    eax,edx
c0018f6b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f6f:	90                   	nop
c0018f70:	83 ec 04             	sub    esp,0x4
c0018f73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f7b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018f7f:	50                   	push   eax
c0018f80:	e8 6e c0 fe ff       	call   c0004ff3 <f_getlabel>
c0018f85:	83 c4 10             	add    esp,0x10
c0018f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f8c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f91:	75 09                	jne    c0018f9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018f93:	b8 00 00 00 00       	mov    eax,0x0
c0018f98:	eb 0a                	jmp    c0018fa4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018f9a:	66 90                	xchg   ax,ax
c0018f9c:	b8 01 00 00 00       	mov    eax,0x1
c0018fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa4:	83 c4 1c             	add    esp,0x1c
c0018fa7:	c3                   	ret    

c0018fa8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018fa8:	53                   	push   ebx
c0018fa9:	83 ec 58             	sub    esp,0x58
c0018fac:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018fb4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018fb8:	b9 00 00 00 00       	mov    ecx,0x0
c0018fbd:	b8 3c 00 00 00       	mov    eax,0x3c
c0018fc2:	83 e0 f8             	and    eax,0xfffffff8
c0018fc5:	89 c3                	mov    ebx,eax
c0018fc7:	b8 00 00 00 00       	mov    eax,0x0
c0018fcc:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018fd0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018fd4:	83 c0 08             	add    eax,0x8
c0018fd7:	39 d8                	cmp    eax,ebx
c0018fd9:	72 f1                	jb     c0018fcc <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018fdb:	01 c2                	add    edx,eax
c0018fdd:	89 0a                	mov    DWORD PTR [edx],ecx
c0018fdf:	83 c2 04             	add    edx,0x4
c0018fe2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018fe6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fed:	83 f8 ff             	cmp    eax,0xffffffff
c0018ff0:	75 36                	jne    c0019028 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018ff2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ff6:	88 c2                	mov    dl,al
c0018ff8:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018ffd:	01 d0                	add    eax,edx
c0018fff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019003:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019009:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001900d:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019014:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019019:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001901d:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019024:	eb 1a                	jmp    c0019040 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019026:	66 90                	xchg   ax,ax
c0019028:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001902c:	88 c2                	mov    dl,al
c001902e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019032:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019039:	01 d0                	add    eax,edx
c001903b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001903f:	90                   	nop
c0019040:	83 ec 08             	sub    esp,0x8
c0019043:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019047:	8d 44 24 18          	lea    eax,[esp+0x18]
c001904b:	50                   	push   eax
c001904c:	e8 1f 78 fe ff       	call   c0000870 <strcat>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	83 ec 0c             	sub    esp,0xc
c0019057:	8d 44 24 18          	lea    eax,[esp+0x18]
c001905b:	50                   	push   eax
c001905c:	e8 e6 c0 fe ff       	call   c0005147 <f_setlabel>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019068:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001906d:	75 09                	jne    c0019078 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001906f:	b8 00 00 00 00       	mov    eax,0x0
c0019074:	eb 0a                	jmp    c0019080 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019076:	66 90                	xchg   ax,ax
c0019078:	b8 01 00 00 00       	mov    eax,0x1
c001907d:	8d 76 00             	lea    esi,[esi+0x0]
c0019080:	83 c4 58             	add    esp,0x58
c0019083:	5b                   	pop    ebx
c0019084:	c3                   	ret    
c0019085:	90                   	nop
c0019086:	66 90                	xchg   ax,ax

c0019088 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019088:	83 ec 2c             	sub    esp,0x2c
c001908b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019093:	83 ec 08             	sub    esp,0x8
c0019096:	68 64 2d 02 c0       	push   0xc0022d64
c001909b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001909f:	e8 dc 76 fe ff       	call   c0000780 <strcmp>
c00190a4:	83 c4 10             	add    esp,0x10
c00190a7:	85 c0                	test   eax,eax
c00190a9:	0f 94 c0             	sete   al
c00190ac:	0f b6 c0             	movzx  eax,al
c00190af:	85 c0                	test   eax,eax
c00190b1:	74 0d                	je     c00190c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00190b3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190bb:	e9 c0 00 00 00       	jmp    c0019180 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190c0:	83 ec 08             	sub    esp,0x8
c00190c3:	68 56 2d 02 c0       	push   0xc0022d56
c00190c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190cc:	e8 af 76 fe ff       	call   c0000780 <strcmp>
c00190d1:	83 c4 10             	add    esp,0x10
c00190d4:	85 c0                	test   eax,eax
c00190d6:	0f 94 c0             	sete   al
c00190d9:	0f b6 c0             	movzx  eax,al
c00190dc:	85 c0                	test   eax,eax
c00190de:	74 10                	je     c00190f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00190e0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190e8:	e9 93 00 00 00       	jmp    c0019180 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190ed:	8d 76 00             	lea    esi,[esi+0x0]
c00190f0:	83 ec 08             	sub    esp,0x8
c00190f3:	68 5c 2d 02 c0       	push   0xc0022d5c
c00190f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190fc:	e8 7f 76 fe ff       	call   c0000780 <strcmp>
c0019101:	83 c4 10             	add    esp,0x10
c0019104:	85 c0                	test   eax,eax
c0019106:	0f 94 c0             	sete   al
c0019109:	0f b6 c0             	movzx  eax,al
c001910c:	85 c0                	test   eax,eax
c001910e:	74 0c                	je     c001911c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019110:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019118:	eb 66                	jmp    c0019180 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001911a:	66 90                	xchg   ax,ax
c001911c:	83 ec 08             	sub    esp,0x8
c001911f:	68 bc 04 02 c0       	push   0xc00204bc
c0019124:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019128:	e8 53 76 fe ff       	call   c0000780 <strcmp>
c001912d:	83 c4 10             	add    esp,0x10
c0019130:	85 c0                	test   eax,eax
c0019132:	0f 94 c0             	sete   al
c0019135:	0f b6 c0             	movzx  eax,al
c0019138:	85 c0                	test   eax,eax
c001913a:	74 0c                	je     c0019148 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001913c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019144:	eb 3a                	jmp    c0019180 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019146:	66 90                	xchg   ax,ax
c0019148:	83 ec 08             	sub    esp,0x8
c001914b:	68 62 2d 02 c0       	push   0xc0022d62
c0019150:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019154:	e8 27 76 fe ff       	call   c0000780 <strcmp>
c0019159:	83 c4 10             	add    esp,0x10
c001915c:	85 c0                	test   eax,eax
c001915e:	0f 94 c0             	sete   al
c0019161:	0f b6 c0             	movzx  eax,al
c0019164:	85 c0                	test   eax,eax
c0019166:	74 0c                	je     c0019174 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019168:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019170:	eb 0e                	jmp    c0019180 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019172:	66 90                	xchg   ax,ax
c0019174:	b8 08 00 00 00       	mov    eax,0x8
c0019179:	e9 ea 00 00 00       	jmp    c0019268 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001917e:	66 90                	xchg   ax,ax
c0019180:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019187:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001918c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019190:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019197:	83 f8 ff             	cmp    eax,0xffffffff
c001919a:	75 34                	jne    c00191d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001919c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191a0:	88 c2                	mov    dl,al
c00191a2:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191a7:	01 d0                	add    eax,edx
c00191a9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191ad:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191b7:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191be:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191c7:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191ce:	eb 18                	jmp    c00191e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00191d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191d4:	88 c2                	mov    dl,al
c00191d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191da:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191e1:	01 d0                	add    eax,edx
c00191e3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191e7:	90                   	nop
c00191e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191ec:	88 04 24             	mov    BYTE PTR [esp],al
c00191ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00191ff:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019204:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001920c:	83 ec 0c             	sub    esp,0xc
c001920f:	68 00 20 00 00       	push   0x2000
c0019214:	e8 ba e8 fe ff       	call   c0007ad3 <malloc>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019220:	68 00 20 00 00       	push   0x2000
c0019225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019229:	8d 44 24 08          	lea    eax,[esp+0x8]
c001922d:	50                   	push   eax
c001922e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019232:	50                   	push   eax
c0019233:	e8 0c c2 fe ff       	call   c0005444 <f_mkfs>
c0019238:	83 c4 10             	add    esp,0x10
c001923b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001923f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019244:	75 0a                	jne    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019246:	b8 00 00 00 00       	mov    eax,0x0
c001924b:	eb 1b                	jmp    c0019268 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001924d:	8d 76 00             	lea    esi,[esi+0x0]
c0019250:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019255:	75 09                	jne    c0019260 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019257:	b8 09 00 00 00       	mov    eax,0x9
c001925c:	eb 0a                	jmp    c0019268 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001925e:	66 90                	xchg   ax,ax
c0019260:	b8 01 00 00 00       	mov    eax,0x1
c0019265:	8d 76 00             	lea    esi,[esi+0x0]
c0019268:	83 c4 2c             	add    esp,0x2c
c001926b:	c3                   	ret    

c001926c <FAT::tryMount(LogicalDisk*, int)>:
c001926c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019272:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019277:	83 f8 14             	cmp    eax,0x14
c001927a:	75 18                	jne    c0019294 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001927c:	83 ec 0c             	sub    esp,0xc
c001927f:	68 68 2d 02 c0       	push   0xc0022d68
c0019284:	e8 9e 82 ff ff       	call   c0011527 <KePanic(char const*)>
c0019289:	83 c4 10             	add    esp,0x10
c001928c:	b0 00                	mov    al,0x0
c001928e:	e9 ed 01 00 00       	jmp    c0019480 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019293:	90                   	nop
c0019294:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001929b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00192a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00192a7:	3d 00 02 00 00       	cmp    eax,0x200
c00192ac:	74 0a                	je     c00192b8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00192ae:	b0 00                	mov    al,0x0
c00192b0:	e9 cb 01 00 00       	jmp    c0019480 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192b5:	8d 76 00             	lea    esi,[esi+0x0]
c00192b8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00192c0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00192c7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192ce:	83 f8 ff             	cmp    eax,0xffffffff
c00192d1:	74 09                	je     c00192dc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00192d3:	b0 01                	mov    al,0x1
c00192d5:	e9 a6 01 00 00       	jmp    c0019480 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192da:	66 90                	xchg   ax,ax
c00192dc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00192e6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00192ee:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00192f5:	88 c2                	mov    dl,al
c00192f7:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192fc:	01 d0                	add    eax,edx
c00192fe:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019305:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001930b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019312:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019319:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001931e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019325:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001932c:	83 ec 0c             	sub    esp,0xc
c001932f:	68 34 02 00 00       	push   0x234
c0019334:	e8 9a e7 fe ff       	call   c0007ad3 <malloc>
c0019339:	83 c4 10             	add    esp,0x10
c001933c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019343:	83 ec 04             	sub    esp,0x4
c0019346:	6a 00                	push   0x0
c0019348:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001934f:	50                   	push   eax
c0019350:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019357:	e8 e2 a8 fe ff       	call   c0003c3e <f_mount>
c001935c:	83 c4 10             	add    esp,0x10
c001935f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019366:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001936e:	74 1c                	je     c001938c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019370:	83 ec 0c             	sub    esp,0xc
c0019373:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001937a:	e8 74 e7 fe ff       	call   c0007af3 <rfree>
c001937f:	83 c4 10             	add    esp,0x10
c0019382:	b0 00                	mov    al,0x0
c0019384:	e9 f7 00 00 00       	jmp    c0019480 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019389:	8d 76 00             	lea    esi,[esi+0x0]
c001938c:	83 ec 04             	sub    esp,0x4
c001938f:	68 00 01 00 00       	push   0x100
c0019394:	6a 00                	push   0x0
c0019396:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001939d:	50                   	push   eax
c001939e:	e8 4d 71 fe ff       	call   c00004f0 <memset>
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	83 ec 08             	sub    esp,0x8
c00193a9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193b0:	50                   	push   eax
c00193b1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193b8:	50                   	push   eax
c00193b9:	e8 b2 74 fe ff       	call   c0000870 <strcat>
c00193be:	83 c4 10             	add    esp,0x10
c00193c1:	83 ec 08             	sub    esp,0x8
c00193c4:	68 76 2d 02 c0       	push   0xc0022d76
c00193c9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193d0:	50                   	push   eax
c00193d1:	e8 9a 74 fe ff       	call   c0000870 <strcat>
c00193d6:	83 c4 10             	add    esp,0x10
c00193d9:	83 ec 04             	sub    esp,0x4
c00193dc:	6a 01                	push   0x1
c00193de:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00193e5:	50                   	push   eax
c00193e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193ea:	50                   	push   eax
c00193eb:	e8 b0 a8 fe ff       	call   c0003ca0 <f_open>
c00193f0:	83 c4 10             	add    esp,0x10
c00193f3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193fa:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019401:	85 c0                	test   eax,eax
c0019403:	74 0b                	je     c0019410 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019405:	78 31                	js     c0019438 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019407:	83 e8 04             	sub    eax,0x4
c001940a:	83 f8 01             	cmp    eax,0x1
c001940d:	77 29                	ja     c0019438 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001940f:	90                   	nop
c0019410:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019418:	83 ec 0c             	sub    esp,0xc
c001941b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001941f:	50                   	push   eax
c0019420:	e8 2b b0 fe ff       	call   c0004450 <f_close>
c0019425:	83 c4 10             	add    esp,0x10
c0019428:	90                   	nop
c0019429:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019431:	85 c0                	test   eax,eax
c0019433:	74 43                	je     c0019478 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019435:	eb 31                	jmp    c0019468 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019437:	90                   	nop
c0019438:	83 ec 0c             	sub    esp,0xc
c001943b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019442:	e8 ac e6 fe ff       	call   c0007af3 <rfree>
c0019447:	83 c4 10             	add    esp,0x10
c001944a:	83 ec 04             	sub    esp,0x4
c001944d:	6a 00                	push   0x0
c001944f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019456:	50                   	push   eax
c0019457:	6a 00                	push   0x0
c0019459:	e8 e0 a7 fe ff       	call   c0003c3e <f_mount>
c001945e:	83 c4 10             	add    esp,0x10
c0019461:	b0 00                	mov    al,0x0
c0019463:	eb 1b                	jmp    c0019480 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019465:	8d 76 00             	lea    esi,[esi+0x0]
c0019468:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001946d:	83 c0 01             	add    eax,0x1
c0019470:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019475:	8d 76 00             	lea    esi,[esi+0x0]
c0019478:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001947f:	90                   	nop
c0019480:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019486:	c3                   	ret    
c0019487:	90                   	nop

c0019488 <FAT::allocateSwapfile(char const*, int)>:
c0019488:	55                   	push   ebp
c0019489:	57                   	push   edi
c001948a:	56                   	push   esi
c001948b:	53                   	push   ebx
c001948c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019492:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001949d:	83 ec 0c             	sub    esp,0xc
c00194a0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00194a7:	e8 27 e6 fe ff       	call   c0007ad3 <malloc>
c00194ac:	83 c4 10             	add    esp,0x10
c00194af:	89 c7                	mov    edi,eax
c00194b1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00194b6:	83 ec 04             	sub    esp,0x4
c00194b9:	50                   	push   eax
c00194ba:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00194c1:	57                   	push   edi
c00194c2:	e8 1b 26 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c00194c7:	83 c4 10             	add    esp,0x10
c00194ca:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00194d1:	83 ec 04             	sub    esp,0x4
c00194d4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00194d8:	50                   	push   eax
c00194d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194dd:	50                   	push   eax
c00194de:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00194e5:	e8 18 29 ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c00194ea:	83 c4 10             	add    esp,0x10
c00194ed:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00194f4:	c1 e0 14             	shl    eax,0x14
c00194f7:	89 c7                	mov    edi,eax
c00194f9:	89 c5                	mov    ebp,eax
c00194fb:	c1 fd 1f             	sar    ebp,0x1f
c00194fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019502:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019506:	89 f9                	mov    ecx,edi
c0019508:	31 c1                	xor    ecx,eax
c001950a:	89 cb                	mov    ebx,ecx
c001950c:	89 e9                	mov    ecx,ebp
c001950e:	31 d1                	xor    ecx,edx
c0019510:	89 ce                	mov    esi,ecx
c0019512:	89 f0                	mov    eax,esi
c0019514:	09 d8                	or     eax,ebx
c0019516:	0f 84 9c 00 00 00    	je     c00195b8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001951c:	83 ec 0c             	sub    esp,0xc
c001951f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019526:	e8 a3 27 ff ff       	call   c000bcce <File::unlink()>
c001952b:	83 c4 10             	add    esp,0x10
c001952e:	83 ec 08             	sub    esp,0x8
c0019531:	6a 12                	push   0x12
c0019533:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001953a:	e8 c1 25 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c001953f:	83 c4 10             	add    esp,0x10
c0019542:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019549:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001954f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019556:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001955d:	c1 e0 14             	shl    eax,0x14
c0019560:	83 ec 04             	sub    esp,0x4
c0019563:	6a 01                	push   0x1
c0019565:	50                   	push   eax
c0019566:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001956d:	e8 65 bd fe ff       	call   c00052d7 <f_expand>
c0019572:	83 c4 10             	add    esp,0x10
c0019575:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001957c:	8b 00                	mov    eax,DWORD PTR [eax]
c001957e:	83 c0 10             	add    eax,0x10
c0019581:	8b 00                	mov    eax,DWORD PTR [eax]
c0019583:	83 ec 0c             	sub    esp,0xc
c0019586:	8d 54 24 24          	lea    edx,[esp+0x24]
c001958a:	52                   	push   edx
c001958b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001958f:	52                   	push   edx
c0019590:	6a 00                	push   0x0
c0019592:	68 00 04 00 00       	push   0x400
c0019597:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001959e:	ff d0                	call   eax
c00195a0:	83 c4 20             	add    esp,0x20
c00195a3:	83 ec 0c             	sub    esp,0xc
c00195a6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195ad:	e8 ac 25 ff ff       	call   c000bb5e <File::close()>
c00195b2:	83 c4 10             	add    esp,0x10
c00195b5:	8d 76 00             	lea    esi,[esi+0x0]
c00195b8:	83 ec 08             	sub    esp,0x8
c00195bb:	6a 01                	push   0x1
c00195bd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195c4:	e8 37 25 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c00195c9:	83 c4 10             	add    esp,0x10
c00195cc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00195d5:	83 c0 0c             	add    eax,0xc
c00195d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00195da:	83 ec 0c             	sub    esp,0xc
c00195dd:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195e1:	52                   	push   edx
c00195e2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00195e6:	52                   	push   edx
c00195e7:	6a 00                	push   0x0
c00195e9:	6a 04                	push   0x4
c00195eb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00195f2:	ff d0                	call   eax
c00195f4:	83 c4 20             	add    esp,0x20
c00195f7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195fe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019604:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001960b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019612:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019615:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019626:	e8 33 25 ff ff       	call   c000bb5e <File::close()>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019635:	ba 00 00 00 00       	mov    edx,0x0
c001963a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019640:	5b                   	pop    ebx
c0019641:	5e                   	pop    esi
c0019642:	5f                   	pop    edi
c0019643:	5d                   	pop    ebp
c0019644:	c3                   	ret    
c0019645:	90                   	nop
c0019646:	66 90                	xchg   ax,ax

c0019648 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019648:	57                   	push   edi
c0019649:	56                   	push   esi
c001964a:	53                   	push   ebx
c001964b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019651:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019659:	74 0d                	je     c0019668 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001965b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019663:	75 0f                	jne    c0019674 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019665:	8d 76 00             	lea    esi,[esi+0x0]
c0019668:	b8 04 00 00 00       	mov    eax,0x4
c001966d:	e9 3a 01 00 00       	jmp    c00197ac <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019672:	66 90                	xchg   ax,ax
c0019674:	83 ec 08             	sub    esp,0x8
c0019677:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001967e:	50                   	push   eax
c001967f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019686:	e8 91 b0 fe ff       	call   c000471c <f_readdir>
c001968b:	83 c4 10             	add    esp,0x10
c001968e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019695:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001969c:	83 ec 0c             	sub    esp,0xc
c001969f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00196a6:	83 c0 16             	add    eax,0x16
c00196a9:	50                   	push   eax
c00196aa:	e8 d1 6e fe ff       	call   c0000580 <strlen>
c00196af:	83 c4 10             	add    esp,0x10
c00196b2:	ba 00 00 00 00       	mov    edx,0x0
c00196b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00196bf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00196c6:	0f b6 c0             	movzx  eax,al
c00196c9:	83 e0 10             	and    eax,0x10
c00196cc:	74 0a                	je     c00196d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00196ce:	b8 02 00 00 00       	mov    eax,0x2
c00196d3:	eb 0b                	jmp    c00196e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00196d5:	8d 76 00             	lea    esi,[esi+0x0]
c00196d8:	b8 01 00 00 00       	mov    eax,0x1
c00196dd:	8d 76 00             	lea    esi,[esi+0x0]
c00196e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196e4:	83 ec 08             	sub    esp,0x8
c00196e7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196ee:	83 c0 16             	add    eax,0x16
c00196f1:	50                   	push   eax
c00196f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196f6:	83 c0 10             	add    eax,0x10
c00196f9:	50                   	push   eax
c00196fa:	e8 51 6f fe ff       	call   c0000650 <strcpy>
c00196ff:	83 c4 10             	add    esp,0x10
c0019702:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019709:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019710:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019714:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001971b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019722:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019729:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019730:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019737:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001973e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019745:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001974c:	89 c6                	mov    esi,eax
c001974e:	89 d7                	mov    edi,edx
c0019750:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019752:	89 c8                	mov    eax,ecx
c0019754:	89 fa                	mov    edx,edi
c0019756:	89 f3                	mov    ebx,esi
c0019758:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001975f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019766:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001976d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019774:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001977a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019781:	0f be c0             	movsx  eax,al
c0019784:	85 c0                	test   eax,eax
c0019786:	75 08                	jne    c0019790 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019788:	b8 07 00 00 00       	mov    eax,0x7
c001978d:	eb 1d                	jmp    c00197ac <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001978f:	90                   	nop
c0019790:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019797:	85 c0                	test   eax,eax
c0019799:	75 09                	jne    c00197a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001979b:	b8 00 00 00 00       	mov    eax,0x0
c00197a0:	eb 0a                	jmp    c00197ac <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197a2:	66 90                	xchg   ax,ax
c00197a4:	b8 01 00 00 00       	mov    eax,0x1
c00197a9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ac:	81 c4 50 02 00 00    	add    esp,0x250
c00197b2:	5b                   	pop    ebx
c00197b3:	5e                   	pop    esi
c00197b4:	5f                   	pop    edi
c00197b5:	c3                   	ret    
c00197b6:	66 90                	xchg   ax,ax

c00197b8 <FAT::read(void*, unsigned long, void*, int*)>:
c00197b8:	83 ec 1c             	sub    esp,0x1c
c00197bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00197c0:	74 0a                	je     c00197cc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00197c2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00197c7:	75 0b                	jne    c00197d4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00197c9:	8d 76 00             	lea    esi,[esi+0x0]
c00197cc:	b8 04 00 00 00       	mov    eax,0x4
c00197d1:	eb 41                	jmp    c0019814 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00197d3:	90                   	nop
c00197d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197d8:	50                   	push   eax
c00197d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197e5:	e8 79 a7 fe ff       	call   c0003f63 <f_read>
c00197ea:	83 c4 10             	add    esp,0x10
c00197ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f5:	89 c2                	mov    edx,eax
c00197f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00197fb:	89 10                	mov    DWORD PTR [eax],edx
c00197fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019801:	85 c0                	test   eax,eax
c0019803:	75 07                	jne    c001980c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019805:	b8 00 00 00 00       	mov    eax,0x0
c001980a:	eb 08                	jmp    c0019814 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001980c:	b8 01 00 00 00       	mov    eax,0x1
c0019811:	8d 76 00             	lea    esi,[esi+0x0]
c0019814:	83 c4 1c             	add    esp,0x1c
c0019817:	c3                   	ret    

c0019818 <FAT::write(void*, unsigned long, void*, int*)>:
c0019818:	83 ec 1c             	sub    esp,0x1c
c001981b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019820:	74 0a                	je     c001982c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019822:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019827:	75 0b                	jne    c0019834 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019829:	8d 76 00             	lea    esi,[esi+0x0]
c001982c:	b8 04 00 00 00       	mov    eax,0x4
c0019831:	eb 41                	jmp    c0019874 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019833:	90                   	nop
c0019834:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019838:	50                   	push   eax
c0019839:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001983d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019841:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019845:	e8 fa a8 fe ff       	call   c0004144 <f_write>
c001984a:	83 c4 10             	add    esp,0x10
c001984d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019855:	89 c2                	mov    edx,eax
c0019857:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001985b:	89 10                	mov    DWORD PTR [eax],edx
c001985d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019861:	85 c0                	test   eax,eax
c0019863:	75 07                	jne    c001986c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019865:	b8 00 00 00 00       	mov    eax,0x0
c001986a:	eb 08                	jmp    c0019874 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001986c:	b8 01 00 00 00       	mov    eax,0x1
c0019871:	8d 76 00             	lea    esi,[esi+0x0]
c0019874:	83 c4 1c             	add    esp,0x1c
c0019877:	c3                   	ret    

c0019878 <FAT::close(void*)>:
c0019878:	83 ec 1c             	sub    esp,0x1c
c001987b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019880:	75 0a                	jne    c001988c <FAT::close(void*)+0x14>
c0019882:	b8 04 00 00 00       	mov    eax,0x4
c0019887:	eb 3f                	jmp    c00198c8 <FAT::close(void*)+0x50>
c0019889:	8d 76 00             	lea    esi,[esi+0x0]
c001988c:	83 ec 0c             	sub    esp,0xc
c001988f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019893:	e8 b8 ab fe ff       	call   c0004450 <f_close>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001989f:	83 ec 0c             	sub    esp,0xc
c00198a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198a6:	e8 38 e2 fe ff       	call   c0007ae3 <free>
c00198ab:	83 c4 10             	add    esp,0x10
c00198ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198b2:	85 c0                	test   eax,eax
c00198b4:	75 0a                	jne    c00198c0 <FAT::close(void*)+0x48>
c00198b6:	b8 00 00 00 00       	mov    eax,0x0
c00198bb:	eb 0b                	jmp    c00198c8 <FAT::close(void*)+0x50>
c00198bd:	8d 76 00             	lea    esi,[esi+0x0]
c00198c0:	b8 01 00 00 00       	mov    eax,0x1
c00198c5:	8d 76 00             	lea    esi,[esi+0x0]
c00198c8:	83 c4 1c             	add    esp,0x1c
c00198cb:	c3                   	ret    

c00198cc <FAT::closeDir(void*)>:
c00198cc:	83 ec 1c             	sub    esp,0x1c
c00198cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198d4:	75 0a                	jne    c00198e0 <FAT::closeDir(void*)+0x14>
c00198d6:	b8 04 00 00 00       	mov    eax,0x4
c00198db:	eb 3f                	jmp    c001991c <FAT::closeDir(void*)+0x50>
c00198dd:	8d 76 00             	lea    esi,[esi+0x0]
c00198e0:	83 ec 0c             	sub    esp,0xc
c00198e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198e7:	e8 0e ae fe ff       	call   c00046fa <f_closedir>
c00198ec:	83 c4 10             	add    esp,0x10
c00198ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198f3:	83 ec 0c             	sub    esp,0xc
c00198f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198fa:	e8 e4 e1 fe ff       	call   c0007ae3 <free>
c00198ff:	83 c4 10             	add    esp,0x10
c0019902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019906:	85 c0                	test   eax,eax
c0019908:	75 0a                	jne    c0019914 <FAT::closeDir(void*)+0x48>
c001990a:	b8 00 00 00 00       	mov    eax,0x0
c001990f:	eb 0b                	jmp    c001991c <FAT::closeDir(void*)+0x50>
c0019911:	8d 76 00             	lea    esi,[esi+0x0]
c0019914:	b8 01 00 00 00       	mov    eax,0x1
c0019919:	8d 76 00             	lea    esi,[esi+0x0]
c001991c:	83 c4 1c             	add    esp,0x1c
c001991f:	c3                   	ret    

c0019920 <FAT::truncate(void*, unsigned long long)>:
c0019920:	83 ec 2c             	sub    esp,0x2c
c0019923:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019927:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001992b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001992f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019933:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019938:	75 0a                	jne    c0019944 <FAT::truncate(void*, unsigned long long)+0x24>
c001993a:	b8 04 00 00 00       	mov    eax,0x4
c001993f:	eb 47                	jmp    c0019988 <FAT::truncate(void*, unsigned long long)+0x68>
c0019941:	8d 76 00             	lea    esi,[esi+0x0]
c0019944:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019948:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001994b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001994f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001995b:	83 ec 08             	sub    esp,0x8
c001995e:	50                   	push   eax
c001995f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019963:	e8 17 ab fe ff       	call   c000447f <f_lseek>
c0019968:	83 c4 10             	add    esp,0x10
c001996b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001996f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019973:	85 c0                	test   eax,eax
c0019975:	75 09                	jne    c0019980 <FAT::truncate(void*, unsigned long long)+0x60>
c0019977:	b8 00 00 00 00       	mov    eax,0x0
c001997c:	eb 0a                	jmp    c0019988 <FAT::truncate(void*, unsigned long long)+0x68>
c001997e:	66 90                	xchg   ax,ax
c0019980:	b8 01 00 00 00       	mov    eax,0x1
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	83 c4 2c             	add    esp,0x2c
c001998b:	c3                   	ret    

c001998c <FAT::seek(void*, unsigned long long)>:
c001998c:	83 ec 2c             	sub    esp,0x2c
c001998f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019993:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019997:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001999b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199a4:	75 0a                	jne    c00199b0 <FAT::seek(void*, unsigned long long)+0x24>
c00199a6:	b8 04 00 00 00       	mov    eax,0x4
c00199ab:	eb 33                	jmp    c00199e0 <FAT::seek(void*, unsigned long long)+0x54>
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199b4:	83 ec 08             	sub    esp,0x8
c00199b7:	50                   	push   eax
c00199b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199bc:	e8 be aa fe ff       	call   c000447f <f_lseek>
c00199c1:	83 c4 10             	add    esp,0x10
c00199c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199cc:	85 c0                	test   eax,eax
c00199ce:	75 08                	jne    c00199d8 <FAT::seek(void*, unsigned long long)+0x4c>
c00199d0:	b8 00 00 00 00       	mov    eax,0x0
c00199d5:	eb 09                	jmp    c00199e0 <FAT::seek(void*, unsigned long long)+0x54>
c00199d7:	90                   	nop
c00199d8:	b8 01 00 00 00       	mov    eax,0x1
c00199dd:	8d 76 00             	lea    esi,[esi+0x0]
c00199e0:	83 c4 2c             	add    esp,0x2c
c00199e3:	c3                   	ret    

c00199e4 <fatWrapperReadDisk>:
c00199e4:	53                   	push   ebx
c00199e5:	83 ec 18             	sub    esp,0x18
c00199e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00199f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199f5:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c00199fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a04:	ba 00 00 00 00       	mov    edx,0x0
c0019a09:	83 ec 0c             	sub    esp,0xc
c0019a0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a10:	53                   	push   ebx
c0019a11:	52                   	push   edx
c0019a12:	50                   	push   eax
c0019a13:	51                   	push   ecx
c0019a14:	e8 31 43 ff ff       	call   c000dd4a <LogicalDisk::read(unsigned long long, int, void*)>
c0019a19:	83 c4 20             	add    esp,0x20
c0019a1c:	83 c4 18             	add    esp,0x18
c0019a1f:	5b                   	pop    ebx
c0019a20:	c3                   	ret    
c0019a21:	8d 76 00             	lea    esi,[esi+0x0]

c0019a24 <fatWrapperWriteDisk>:
c0019a24:	53                   	push   ebx
c0019a25:	83 ec 18             	sub    esp,0x18
c0019a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a35:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a44:	ba 00 00 00 00       	mov    edx,0x0
c0019a49:	83 ec 0c             	sub    esp,0xc
c0019a4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a50:	53                   	push   ebx
c0019a51:	52                   	push   edx
c0019a52:	50                   	push   eax
c0019a53:	51                   	push   ecx
c0019a54:	e8 5d 43 ff ff       	call   c000ddb6 <LogicalDisk::write(unsigned long long, int, void*)>
c0019a59:	83 c4 20             	add    esp,0x20
c0019a5c:	83 c4 18             	add    esp,0x18
c0019a5f:	5b                   	pop    ebx
c0019a60:	c3                   	ret    
c0019a61:	8d 76 00             	lea    esi,[esi+0x0]

c0019a64 <fatWrapperIoctl>:
c0019a64:	53                   	push   ebx
c0019a65:	83 ec 28             	sub    esp,0x28
c0019a68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019a70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a74:	88 d0                	mov    al,dl
c0019a76:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a7f:	83 f8 02             	cmp    eax,0x2
c0019a82:	75 34                	jne    c0019ab8 <fatWrapperIoctl+0x54>
c0019a84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a91:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019a98:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a9e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019aa4:	89 c2                	mov    edx,eax
c0019aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019aaa:	66 89 10             	mov    WORD PTR [eax],dx
c0019aad:	b8 00 00 00 00       	mov    eax,0x0
c0019ab2:	e9 c5 00 00 00       	jmp    c0019b7c <fatWrapperIoctl+0x118>
c0019ab7:	90                   	nop
c0019ab8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019abd:	83 f8 01             	cmp    eax,0x1
c0019ac0:	75 6a                	jne    c0019b2c <fatWrapperIoctl+0xc8>
c0019ac2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ac6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019aca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019acf:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019ad6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019adc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019ae2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019ae8:	89 c8                	mov    eax,ecx
c0019aea:	89 da                	mov    edx,ebx
c0019aec:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019af0:	c1 e0 0a             	shl    eax,0xa
c0019af3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019af8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019aff:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b05:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b0b:	89 cb                	mov    ebx,ecx
c0019b0d:	c1 fb 1f             	sar    ebx,0x1f
c0019b10:	53                   	push   ebx
c0019b11:	51                   	push   ecx
c0019b12:	52                   	push   edx
c0019b13:	50                   	push   eax
c0019b14:	e8 b7 5b 00 00       	call   c001f6d0 <__udivdi3>
c0019b19:	83 c4 10             	add    esp,0x10
c0019b1c:	89 c2                	mov    edx,eax
c0019b1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b22:	89 10                	mov    DWORD PTR [eax],edx
c0019b24:	b8 00 00 00 00       	mov    eax,0x0
c0019b29:	eb 51                	jmp    c0019b7c <fatWrapperIoctl+0x118>
c0019b2b:	90                   	nop
c0019b2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b31:	85 c0                	test   eax,eax
c0019b33:	75 07                	jne    c0019b3c <fatWrapperIoctl+0xd8>
c0019b35:	b8 00 00 00 00       	mov    eax,0x0
c0019b3a:	eb 40                	jmp    c0019b7c <fatWrapperIoctl+0x118>
c0019b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b41:	83 f8 03             	cmp    eax,0x3
c0019b44:	75 1a                	jne    c0019b60 <fatWrapperIoctl+0xfc>
c0019b46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b52:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019b58:	b8 00 00 00 00       	mov    eax,0x0
c0019b5d:	eb 1d                	jmp    c0019b7c <fatWrapperIoctl+0x118>
c0019b5f:	90                   	nop
c0019b60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b65:	83 f8 04             	cmp    eax,0x4
c0019b68:	75 0a                	jne    c0019b74 <fatWrapperIoctl+0x110>
c0019b6a:	b8 00 00 00 00       	mov    eax,0x0
c0019b6f:	eb 0b                	jmp    c0019b7c <fatWrapperIoctl+0x118>
c0019b71:	8d 76 00             	lea    esi,[esi+0x0]
c0019b74:	b8 04 00 00 00       	mov    eax,0x4
c0019b79:	8d 76 00             	lea    esi,[esi+0x0]
c0019b7c:	83 c4 28             	add    esp,0x28
c0019b7f:	5b                   	pop    ebx
c0019b80:	c3                   	ret    
c0019b81:	90                   	nop
c0019b82:	66 90                	xchg   ax,ax

c0019b84 <FAT::FAT()>:
c0019b84:	83 ec 1c             	sub    esp,0x1c
c0019b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b8b:	83 ec 0c             	sub    esp,0xc
c0019b8e:	50                   	push   eax
c0019b8f:	e8 98 1b ff ff       	call   c000b72c <Filesystem::Filesystem()>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0019b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ba0:	89 10                	mov    DWORD PTR [eax],edx
c0019ba2:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019bac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019bb4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019bb9:	7f 19                	jg     c0019bd4 <FAT::FAT()+0x50>
c0019bbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bbf:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019bca:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019bcf:	eb e3                	jmp    c0019bb4 <FAT::FAT()+0x30>
c0019bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bd4:	90                   	nop
c0019bd5:	83 c4 1c             	add    esp,0x1c
c0019bd8:	c3                   	ret    
c0019bd9:	90                   	nop
c0019bda:	66 90                	xchg   ax,ax

c0019bdc <FAT::fixFilepath(char*)>:
c0019bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019be0:	8a 00                	mov    al,BYTE PTR [eax]
c0019be2:	0f be c0             	movsx  eax,al
c0019be5:	83 f8 40             	cmp    eax,0x40
c0019be8:	7e 2e                	jle    c0019c18 <FAT::fixFilepath(char*)+0x3c>
c0019bea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bee:	8a 00                	mov    al,BYTE PTR [eax]
c0019bf0:	83 e8 41             	sub    eax,0x41
c0019bf3:	88 c2                	mov    dl,al
c0019bf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bf9:	88 10                	mov    BYTE PTR [eax],dl
c0019bfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bff:	8a 00                	mov    al,BYTE PTR [eax]
c0019c01:	0f be c0             	movsx  eax,al
c0019c04:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c0b:	83 c0 30             	add    eax,0x30
c0019c0e:	88 c2                	mov    dl,al
c0019c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c14:	88 10                	mov    BYTE PTR [eax],dl
c0019c16:	66 90                	xchg   ax,ax
c0019c18:	90                   	nop
c0019c19:	c3                   	ret    
c0019c1a:	66 90                	xchg   ax,ax

c0019c1c <FAT::open(char const*, void**, FileOpenMode)>:
c0019c1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c2a:	74 0c                	je     c0019c38 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c2c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c34:	75 0e                	jne    c0019c44 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019c36:	66 90                	xchg   ax,ax
c0019c38:	b8 04 00 00 00       	mov    eax,0x4
c0019c3d:	e9 46 01 00 00       	jmp    c0019d88 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019c42:	66 90                	xchg   ax,ax
c0019c44:	83 ec 08             	sub    esp,0x8
c0019c47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c52:	50                   	push   eax
c0019c53:	e8 f8 69 fe ff       	call   c0000650 <strcpy>
c0019c58:	83 c4 10             	add    esp,0x10
c0019c5b:	83 ec 08             	sub    esp,0x8
c0019c5e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c62:	50                   	push   eax
c0019c63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c6a:	e8 6d ff ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c0019c6f:	83 c4 10             	add    esp,0x10
c0019c72:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019c7a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c81:	83 e0 01             	and    eax,0x1
c0019c84:	74 12                	je     c0019c98 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019c86:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c8d:	83 c8 01             	or     eax,0x1
c0019c90:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019c97:	90                   	nop
c0019c98:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c9f:	83 e0 04             	and    eax,0x4
c0019ca2:	74 24                	je     c0019cc8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019ca4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cab:	83 c8 30             	or     eax,0x30
c0019cae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cb5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cbc:	83 c8 02             	or     eax,0x2
c0019cbf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cc6:	66 90                	xchg   ax,ax
c0019cc8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ccf:	83 e0 02             	and    eax,0x2
c0019cd2:	74 14                	je     c0019ce8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019cd4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cdb:	83 c8 02             	or     eax,0x2
c0019cde:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cef:	83 e0 08             	and    eax,0x8
c0019cf2:	74 14                	je     c0019d08 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019cf4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cfb:	83 c8 04             	or     eax,0x4
c0019cfe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d05:	8d 76 00             	lea    esi,[esi+0x0]
c0019d08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d0f:	83 e0 10             	and    eax,0x10
c0019d12:	74 14                	je     c0019d28 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d14:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d1b:	83 c8 08             	or     eax,0x8
c0019d1e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d25:	8d 76 00             	lea    esi,[esi+0x0]
c0019d28:	83 ec 0c             	sub    esp,0xc
c0019d2b:	68 28 02 00 00       	push   0x228
c0019d30:	e8 9e dd fe ff       	call   c0007ad3 <malloc>
c0019d35:	83 c4 10             	add    esp,0x10
c0019d38:	89 c2                	mov    edx,eax
c0019d3a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d41:	89 10                	mov    DWORD PTR [eax],edx
c0019d43:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019d4b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d52:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d54:	83 ec 04             	sub    esp,0x4
c0019d57:	52                   	push   edx
c0019d58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d5c:	52                   	push   edx
c0019d5d:	50                   	push   eax
c0019d5e:	e8 3d 9f fe ff       	call   c0003ca0 <f_open>
c0019d63:	83 c4 10             	add    esp,0x10
c0019d66:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019d6d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019d75:	74 09                	je     c0019d80 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019d77:	b8 01 00 00 00       	mov    eax,0x1
c0019d7c:	eb 0a                	jmp    c0019d88 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d7e:	66 90                	xchg   ax,ax
c0019d80:	b8 00 00 00 00       	mov    eax,0x0
c0019d85:	8d 76 00             	lea    esi,[esi+0x0]
c0019d88:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d8e:	c3                   	ret    
c0019d8f:	90                   	nop

c0019d90 <FAT::openDir(char const*, void**)>:
c0019d90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d96:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d9e:	74 0c                	je     c0019dac <FAT::openDir(char const*, void**)+0x1c>
c0019da0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019da8:	75 0e                	jne    c0019db8 <FAT::openDir(char const*, void**)+0x28>
c0019daa:	66 90                	xchg   ax,ax
c0019dac:	b8 04 00 00 00       	mov    eax,0x4
c0019db1:	e9 82 00 00 00       	jmp    c0019e38 <FAT::openDir(char const*, void**)+0xa8>
c0019db6:	66 90                	xchg   ax,ax
c0019db8:	83 ec 08             	sub    esp,0x8
c0019dbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dc6:	50                   	push   eax
c0019dc7:	e8 84 68 fe ff       	call   c0000650 <strcpy>
c0019dcc:	83 c4 10             	add    esp,0x10
c0019dcf:	83 ec 08             	sub    esp,0x8
c0019dd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dd6:	50                   	push   eax
c0019dd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dde:	e8 f9 fd ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c0019de3:	83 c4 10             	add    esp,0x10
c0019de6:	83 ec 0c             	sub    esp,0xc
c0019de9:	6a 30                	push   0x30
c0019deb:	e8 e3 dc fe ff       	call   c0007ad3 <malloc>
c0019df0:	83 c4 10             	add    esp,0x10
c0019df3:	89 c2                	mov    edx,eax
c0019df5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dfc:	89 10                	mov    DWORD PTR [eax],edx
c0019dfe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e05:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e07:	83 ec 08             	sub    esp,0x8
c0019e0a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e0e:	52                   	push   edx
c0019e0f:	50                   	push   eax
c0019e10:	e8 1a a8 fe ff       	call   c000462f <f_opendir>
c0019e15:	83 c4 10             	add    esp,0x10
c0019e18:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e1f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e27:	74 07                	je     c0019e30 <FAT::openDir(char const*, void**)+0xa0>
c0019e29:	b8 01 00 00 00       	mov    eax,0x1
c0019e2e:	eb 08                	jmp    c0019e38 <FAT::openDir(char const*, void**)+0xa8>
c0019e30:	b8 00 00 00 00       	mov    eax,0x0
c0019e35:	8d 76 00             	lea    esi,[esi+0x0]
c0019e38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e3e:	c3                   	ret    
c0019e3f:	90                   	nop

c0019e40 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019e40:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e46:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019e4e:	75 0c                	jne    c0019e5c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019e50:	b8 04 00 00 00       	mov    eax,0x4
c0019e55:	e9 d6 00 00 00       	jmp    c0019f30 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e5a:	66 90                	xchg   ax,ax
c0019e5c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019e64:	75 0a                	jne    c0019e70 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019e66:	b8 04 00 00 00       	mov    eax,0x4
c0019e6b:	e9 c0 00 00 00       	jmp    c0019f30 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e70:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019e78:	75 0a                	jne    c0019e84 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019e7a:	b8 04 00 00 00       	mov    eax,0x4
c0019e7f:	e9 ac 00 00 00       	jmp    c0019f30 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e84:	83 ec 08             	sub    esp,0x8
c0019e87:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e8e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019e95:	50                   	push   eax
c0019e96:	e8 b5 67 fe ff       	call   c0000650 <strcpy>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	83 ec 08             	sub    esp,0x8
c0019ea1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ea8:	50                   	push   eax
c0019ea9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019eb0:	e8 27 fd ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	83 ec 08             	sub    esp,0x8
c0019ebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ebf:	50                   	push   eax
c0019ec0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ec7:	50                   	push   eax
c0019ec8:	e8 e1 a8 fe ff       	call   c00047ae <f_stat>
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ed7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019ede:	85 c0                	test   eax,eax
c0019ee0:	74 0a                	je     c0019eec <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019ee2:	83 f8 04             	cmp    eax,0x4
c0019ee5:	74 39                	je     c0019f20 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019ee7:	eb 3f                	jmp    c0019f28 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0019eec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ef0:	0f b6 c0             	movzx  eax,al
c0019ef3:	83 e0 10             	and    eax,0x10
c0019ef6:	0f 95 c2             	setne  dl
c0019ef9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f00:	88 10                	mov    BYTE PTR [eax],dl
c0019f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f06:	ba 00 00 00 00       	mov    edx,0x0
c0019f0b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f12:	89 01                	mov    DWORD PTR [ecx],eax
c0019f14:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f17:	b8 00 00 00 00       	mov    eax,0x0
c0019f1c:	eb 12                	jmp    c0019f30 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f1e:	66 90                	xchg   ax,ax
c0019f20:	b8 02 00 00 00       	mov    eax,0x2
c0019f25:	eb 09                	jmp    c0019f30 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f27:	90                   	nop
c0019f28:	b8 01 00 00 00       	mov    eax,0x1
c0019f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f30:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <FAT::unlink(char const*)>:
c0019f38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f46:	75 08                	jne    c0019f50 <FAT::unlink(char const*)+0x18>
c0019f48:	b8 04 00 00 00       	mov    eax,0x4
c0019f4d:	eb 61                	jmp    c0019fb0 <FAT::unlink(char const*)+0x78>
c0019f4f:	90                   	nop
c0019f50:	83 ec 08             	sub    esp,0x8
c0019f53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f5e:	50                   	push   eax
c0019f5f:	e8 ec 66 fe ff       	call   c0000650 <strcpy>
c0019f64:	83 c4 10             	add    esp,0x10
c0019f67:	83 ec 08             	sub    esp,0x8
c0019f6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f6e:	50                   	push   eax
c0019f6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f76:	e8 61 fc ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	83 ec 0c             	sub    esp,0xc
c0019f81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f85:	50                   	push   eax
c0019f86:	e8 95 aa fe ff       	call   c0004a20 <f_unlink>
c0019f8b:	83 c4 10             	add    esp,0x10
c0019f8e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f95:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f9c:	85 c0                	test   eax,eax
c0019f9e:	75 08                	jne    c0019fa8 <FAT::unlink(char const*)+0x70>
c0019fa0:	b8 00 00 00 00       	mov    eax,0x0
c0019fa5:	eb 09                	jmp    c0019fb0 <FAT::unlink(char const*)+0x78>
c0019fa7:	90                   	nop
c0019fa8:	b8 01 00 00 00       	mov    eax,0x1
c0019fad:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fb6:	c3                   	ret    
c0019fb7:	90                   	nop

c0019fb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fb8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fbe:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019fc5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019fcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fd0:	88 d0                	mov    al,dl
c0019fd2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019fd6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019fde:	75 0c                	jne    c0019fec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019fe0:	b8 04 00 00 00       	mov    eax,0x4
c0019fe5:	e9 7e 01 00 00       	jmp    c001a168 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019fea:	66 90                	xchg   ax,ax
c0019fec:	83 ec 08             	sub    esp,0x8
c0019fef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ff6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ffa:	50                   	push   eax
c0019ffb:	e8 50 66 fe ff       	call   c0000650 <strcpy>
c001a000:	83 c4 10             	add    esp,0x10
c001a003:	83 ec 08             	sub    esp,0x8
c001a006:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a00a:	50                   	push   eax
c001a00b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a012:	e8 c5 fb ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c001a017:	83 c4 10             	add    esp,0x10
c001a01a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a022:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a02a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a02f:	83 e0 01             	and    eax,0x1
c001a032:	74 14                	je     c001a048 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a034:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a03b:	83 c8 01             	or     eax,0x1
c001a03e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a045:	8d 76 00             	lea    esi,[esi+0x0]
c001a048:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a04d:	83 e0 02             	and    eax,0x2
c001a050:	74 12                	je     c001a064 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a052:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a059:	83 c8 20             	or     eax,0x20
c001a05c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a063:	90                   	nop
c001a064:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a069:	83 e0 04             	and    eax,0x4
c001a06c:	74 12                	je     c001a080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a06e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a075:	83 c8 04             	or     eax,0x4
c001a078:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a07f:	90                   	nop
c001a080:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a085:	83 e0 08             	and    eax,0x8
c001a088:	74 12                	je     c001a09c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a08a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a091:	83 c8 02             	or     eax,0x2
c001a094:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a09b:	90                   	nop
c001a09c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0a1:	83 e0 01             	and    eax,0x1
c001a0a4:	74 12                	je     c001a0b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a0a6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0ad:	83 c8 01             	or     eax,0x1
c001a0b0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0b7:	90                   	nop
c001a0b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0bd:	83 e0 02             	and    eax,0x2
c001a0c0:	74 12                	je     c001a0d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a0c2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0c9:	83 c8 20             	or     eax,0x20
c001a0cc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0d3:	90                   	nop
c001a0d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0d9:	83 e0 04             	and    eax,0x4
c001a0dc:	74 12                	je     c001a0f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a0de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0e5:	83 c8 04             	or     eax,0x4
c001a0e8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0ef:	90                   	nop
c001a0f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0f5:	83 e0 08             	and    eax,0x8
c001a0f8:	74 12                	je     c001a10c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a0fa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a101:	83 c8 02             	or     eax,0x2
c001a104:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a10b:	90                   	nop
c001a10c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a113:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a11a:	09 d0                	or     eax,edx
c001a11c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a123:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a12b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a133:	83 ec 04             	sub    esp,0x4
c001a136:	52                   	push   edx
c001a137:	50                   	push   eax
c001a138:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a13c:	50                   	push   eax
c001a13d:	e8 51 ad fe ff       	call   c0004e93 <f_chmod>
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a14c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a153:	85 c0                	test   eax,eax
c001a155:	75 09                	jne    c001a160 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a157:	b8 00 00 00 00       	mov    eax,0x0
c001a15c:	eb 0a                	jmp    c001a168 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a15e:	66 90                	xchg   ax,ax
c001a160:	b8 01 00 00 00       	mov    eax,0x1
c001a165:	8d 76 00             	lea    esi,[esi+0x0]
c001a168:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a16e:	c3                   	ret    
c001a16f:	90                   	nop

c001a170 <FAT::rename(char const*, char const*)>:
c001a170:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a176:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a17e:	74 0c                	je     c001a18c <FAT::rename(char const*, char const*)+0x1c>
c001a180:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a188:	75 0e                	jne    c001a198 <FAT::rename(char const*, char const*)+0x28>
c001a18a:	66 90                	xchg   ax,ax
c001a18c:	b8 04 00 00 00       	mov    eax,0x4
c001a191:	e9 9e 00 00 00       	jmp    c001a234 <FAT::rename(char const*, char const*)+0xc4>
c001a196:	66 90                	xchg   ax,ax
c001a198:	83 ec 08             	sub    esp,0x8
c001a19b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1a9:	50                   	push   eax
c001a1aa:	e8 a1 64 fe ff       	call   c0000650 <strcpy>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	83 ec 08             	sub    esp,0x8
c001a1b5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a1bc:	50                   	push   eax
c001a1bd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1c4:	e8 13 fa ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c001a1c9:	83 c4 10             	add    esp,0x10
c001a1cc:	83 ec 08             	sub    esp,0x8
c001a1cf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a1d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a1da:	50                   	push   eax
c001a1db:	e8 70 64 fe ff       	call   c0000650 <strcpy>
c001a1e0:	83 c4 10             	add    esp,0x10
c001a1e3:	83 ec 08             	sub    esp,0x8
c001a1e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1ea:	50                   	push   eax
c001a1eb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1f2:	e8 e5 f9 ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c001a1f7:	83 c4 10             	add    esp,0x10
c001a1fa:	83 ec 08             	sub    esp,0x8
c001a1fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a201:	50                   	push   eax
c001a202:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a209:	50                   	push   eax
c001a20a:	e8 cc aa fe ff       	call   c0004cdb <f_rename>
c001a20f:	83 c4 10             	add    esp,0x10
c001a212:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a219:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a220:	85 c0                	test   eax,eax
c001a222:	75 08                	jne    c001a22c <FAT::rename(char const*, char const*)+0xbc>
c001a224:	b8 00 00 00 00       	mov    eax,0x0
c001a229:	eb 09                	jmp    c001a234 <FAT::rename(char const*, char const*)+0xc4>
c001a22b:	90                   	nop
c001a22c:	b8 01 00 00 00       	mov    eax,0x1
c001a231:	8d 76 00             	lea    esi,[esi+0x0]
c001a234:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a23a:	c3                   	ret    
c001a23b:	90                   	nop

c001a23c <FAT::mkdir(char const*)>:
c001a23c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a242:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a24a:	75 08                	jne    c001a254 <FAT::mkdir(char const*)+0x18>
c001a24c:	b8 04 00 00 00       	mov    eax,0x4
c001a251:	eb 61                	jmp    c001a2b4 <FAT::mkdir(char const*)+0x78>
c001a253:	90                   	nop
c001a254:	83 ec 08             	sub    esp,0x8
c001a257:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a25e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a262:	50                   	push   eax
c001a263:	e8 e8 63 fe ff       	call   c0000650 <strcpy>
c001a268:	83 c4 10             	add    esp,0x10
c001a26b:	83 ec 08             	sub    esp,0x8
c001a26e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a272:	50                   	push   eax
c001a273:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a27a:	e8 5d f9 ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c001a27f:	83 c4 10             	add    esp,0x10
c001a282:	83 ec 0c             	sub    esp,0xc
c001a285:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a289:	50                   	push   eax
c001a28a:	e8 b1 a8 fe ff       	call   c0004b40 <f_mkdir>
c001a28f:	83 c4 10             	add    esp,0x10
c001a292:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a299:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a2a0:	85 c0                	test   eax,eax
c001a2a2:	75 08                	jne    c001a2ac <FAT::mkdir(char const*)+0x70>
c001a2a4:	b8 00 00 00 00       	mov    eax,0x0
c001a2a9:	eb 09                	jmp    c001a2b4 <FAT::mkdir(char const*)+0x78>
c001a2ab:	90                   	nop
c001a2ac:	b8 01 00 00 00       	mov    eax,0x1
c001a2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2ba:	c3                   	ret    
c001a2bb:	90                   	nop

c001a2bc <FAT::exists(char const*)>:
c001a2bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2c2:	83 ec 08             	sub    esp,0x8
c001a2c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2cc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2d0:	50                   	push   eax
c001a2d1:	e8 7a 63 fe ff       	call   c0000650 <strcpy>
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	83 ec 08             	sub    esp,0x8
c001a2dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2e0:	50                   	push   eax
c001a2e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2e8:	e8 ef f8 ff ff       	call   c0019bdc <FAT::fixFilepath(char*)>
c001a2ed:	83 c4 10             	add    esp,0x10
c001a2f0:	83 ec 08             	sub    esp,0x8
c001a2f3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a2fa:	50                   	push   eax
c001a2fb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2ff:	50                   	push   eax
c001a300:	e8 a9 a4 fe ff       	call   c00047ae <f_stat>
c001a305:	83 c4 10             	add    esp,0x10
c001a308:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a30f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a316:	85 c0                	test   eax,eax
c001a318:	75 06                	jne    c001a320 <FAT::exists(char const*)+0x64>
c001a31a:	b0 01                	mov    al,0x1
c001a31c:	eb 06                	jmp    c001a324 <FAT::exists(char const*)+0x68>
c001a31e:	66 90                	xchg   ax,ax
c001a320:	b0 00                	mov    al,0x0
c001a322:	66 90                	xchg   ax,ax
c001a324:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a32a:	c3                   	ret    
c001a32b:	90                   	nop

c001a32c <isoReadDiscSectorHelper>:
c001a32c:	83 ec 2c             	sub    esp,0x2c
c001a32f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a333:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a337:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a33c:	83 e8 41             	sub    eax,0x41
c001a33f:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a346:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a34a:	ba 00 00 00 00       	mov    edx,0x0
c001a34f:	83 ec 0c             	sub    esp,0xc
c001a352:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a356:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a35a:	52                   	push   edx
c001a35b:	50                   	push   eax
c001a35c:	51                   	push   ecx
c001a35d:	e8 e8 39 ff ff       	call   c000dd4a <LogicalDisk::read(unsigned long long, int, void*)>
c001a362:	83 c4 20             	add    esp,0x20
c001a365:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a369:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a36e:	74 0c                	je     c001a37c <isoReadDiscSectorHelper+0x50>
c001a370:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a374:	c1 e0 0b             	shl    eax,0xb
c001a377:	eb 0b                	jmp    c001a384 <isoReadDiscSectorHelper+0x58>
c001a379:	8d 76 00             	lea    esi,[esi+0x0]
c001a37c:	b8 00 00 00 00       	mov    eax,0x0
c001a381:	8d 76 00             	lea    esi,[esi+0x0]
c001a384:	83 c4 2c             	add    esp,0x2c
c001a387:	c3                   	ret    

c001a388 <iso_kprintf>:
c001a388:	83 ec 0c             	sub    esp,0xc
c001a38b:	83 ec 08             	sub    esp,0x8
c001a38e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a392:	68 3a 2b 02 c0       	push   0xc0022b3a
c001a397:	e8 6e 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a39c:	83 c4 10             	add    esp,0x10
c001a39f:	90                   	nop
c001a3a0:	83 c4 0c             	add    esp,0xc
c001a3a3:	c3                   	ret    

c001a3a4 <iso_kprintfd>:
c001a3a4:	83 ec 0c             	sub    esp,0xc
c001a3a7:	83 ec 08             	sub    esp,0x8
c001a3aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ae:	68 9a 12 02 c0       	push   0xc002129a
c001a3b3:	e8 52 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3b8:	83 c4 10             	add    esp,0x10
c001a3bb:	90                   	nop
c001a3bc:	83 c4 0c             	add    esp,0xc
c001a3bf:	c3                   	ret    

c001a3c0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a3c0:	b8 08 00 00 00       	mov    eax,0x8
c001a3c5:	c3                   	ret    

c001a3c6 <ISO9660::truncate(void*, unsigned long long)>:
c001a3c6:	b8 01 00 00 00       	mov    eax,0x1
c001a3cb:	c3                   	ret    

c001a3cc <ISO9660::getName()>:
c001a3cc:	b8 f0 2d 02 c0       	mov    eax,0xc0022df0
c001a3d1:	c3                   	ret    

c001a3d2 <ISO9660::closeDir(void*)>:
c001a3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3d8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a3db:	90                   	nop

c001a3dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a3dc:	b8 01 00 00 00       	mov    eax,0x1
c001a3e1:	c3                   	ret    

c001a3e2 <ISO9660::unlink(char const*)>:
c001a3e2:	b8 01 00 00 00       	mov    eax,0x1
c001a3e7:	c3                   	ret    

c001a3e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a3e8:	b8 03 00 00 00       	mov    eax,0x3
c001a3ed:	c3                   	ret    

c001a3ee <ISO9660::rename(char const*, char const*)>:
c001a3ee:	b8 01 00 00 00       	mov    eax,0x1
c001a3f3:	c3                   	ret    

c001a3f4 <ISO9660::mkdir(char const*)>:
c001a3f4:	b8 01 00 00 00       	mov    eax,0x1
c001a3f9:	c3                   	ret    

c001a3fa <ISO9660::~ISO9660()>:
c001a3fa:	83 ec 0c             	sub    esp,0xc
c001a3fd:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001a402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a406:	89 10                	mov    DWORD PTR [eax],edx
c001a408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40c:	83 ec 0c             	sub    esp,0xc
c001a40f:	50                   	push   eax
c001a410:	e8 3b 13 ff ff       	call   c000b750 <Filesystem::~Filesystem()>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	90                   	nop
c001a419:	83 c4 0c             	add    esp,0xc
c001a41c:	c3                   	ret    
c001a41d:	90                   	nop

c001a41e <ISO9660::~ISO9660()>:
c001a41e:	83 ec 0c             	sub    esp,0xc
c001a421:	83 ec 0c             	sub    esp,0xc
c001a424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a428:	e8 cd ff ff ff       	call   c001a3fa <ISO9660::~ISO9660()>
c001a42d:	83 c4 10             	add    esp,0x10
c001a430:	83 ec 08             	sub    esp,0x8
c001a433:	6a 08                	push   0x8
c001a435:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a439:	e8 ce 03 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a43e:	83 c4 10             	add    esp,0x10
c001a441:	83 c4 0c             	add    esp,0xc
c001a444:	c3                   	ret    
c001a445:	90                   	nop

c001a446 <ISO9660::exists(char const*)>:
c001a446:	83 ec 18             	sub    esp,0x18
c001a449:	68 0b 2e 02 c0       	push   0xc0022e0b
c001a44e:	e8 d4 70 ff ff       	call   c0011527 <KePanic(char const*)>
c001a453:	31 c0                	xor    eax,eax
c001a455:	83 c4 1c             	add    esp,0x1c
c001a458:	c3                   	ret    
c001a459:	90                   	nop

c001a45a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a45a:	56                   	push   esi
c001a45b:	53                   	push   ebx
c001a45c:	53                   	push   ebx
c001a45d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a461:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a465:	85 db                	test   ebx,ebx
c001a467:	0f 84 ca 00 00 00    	je     c001a537 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a46d:	85 f6                	test   esi,esi
c001a46f:	0f 84 c2 00 00 00    	je     c001a537 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a475:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a47a:	b8 03 00 00 00       	mov    eax,0x3
c001a47f:	0f 85 b7 00 00 00    	jne    c001a53c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a485:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a487:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a48d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a494:	74 1b                	je     c001a4b1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a496:	85 c0                	test   eax,eax
c001a498:	74 10                	je     c001a4aa <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a49a:	83 ec 0c             	sub    esp,0xc
c001a49d:	68 29 2e 02 c0       	push   0xc0022e29
c001a4a2:	e8 80 70 ff ff       	call   c0011527 <KePanic(char const*)>
c001a4a7:	83 c4 10             	add    esp,0x10
c001a4aa:	8a 03                	mov    al,BYTE PTR [ebx]
c001a4ac:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a4b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4b4:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4bb:	85 c0                	test   eax,eax
c001a4bd:	74 09                	je     c001a4c8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a4bf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a4c6:	74 48                	je     c001a510 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a4c8:	83 ec 0c             	sub    esp,0xc
c001a4cb:	68 39 2e 02 c0       	push   0xc0022e39
c001a4d0:	e8 35 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4d5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4e2:	85 c0                	test   eax,eax
c001a4e4:	74 17                	je     c001a4fd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a4e6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a4ed:	83 ec 0c             	sub    esp,0xc
c001a4f0:	68 59 2e 02 c0       	push   0xc0022e59
c001a4f5:	e8 10 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4fa:	83 c4 10             	add    esp,0x10
c001a4fd:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	50                   	push   eax
c001a508:	e8 5a c5 fe ff       	call   c0006a67 <init_percd>
c001a50d:	83 c4 10             	add    esp,0x10
c001a510:	51                   	push   ecx
c001a511:	83 c3 03             	add    ebx,0x3
c001a514:	51                   	push   ecx
c001a515:	6a 00                	push   0x0
c001a517:	53                   	push   ebx
c001a518:	e8 0d c0 fe ff       	call   c000652a <iso_open>
c001a51d:	83 c4 10             	add    esp,0x10
c001a520:	89 c2                	mov    edx,eax
c001a522:	b8 01 00 00 00       	mov    eax,0x1
c001a527:	83 fa ff             	cmp    edx,0xffffffff
c001a52a:	74 10                	je     c001a53c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a52c:	83 c2 32             	add    edx,0x32
c001a52f:	31 c0                	xor    eax,eax
c001a531:	01 d2                	add    edx,edx
c001a533:	89 16                	mov    DWORD PTR [esi],edx
c001a535:	eb 05                	jmp    c001a53c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a537:	b8 04 00 00 00       	mov    eax,0x4
c001a53c:	5a                   	pop    edx
c001a53d:	5b                   	pop    ebx
c001a53e:	5e                   	pop    esi
c001a53f:	c3                   	ret    

c001a540 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a540:	53                   	push   ebx
c001a541:	83 ec 08             	sub    esp,0x8
c001a544:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a548:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a54c:	85 c0                	test   eax,eax
c001a54e:	74 2d                	je     c001a57d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a550:	85 db                	test   ebx,ebx
c001a552:	74 29                	je     c001a57d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a554:	52                   	push   edx
c001a555:	b9 02 00 00 00       	mov    ecx,0x2
c001a55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a55e:	99                   	cdq    
c001a55f:	f7 f9                	idiv   ecx
c001a561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a565:	83 e8 32             	sub    eax,0x32
c001a568:	50                   	push   eax
c001a569:	e8 64 c0 fe ff       	call   c00065d2 <iso_read>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	89 03                	mov    DWORD PTR [ebx],eax
c001a573:	09 d0                	or     eax,edx
c001a575:	0f 94 c0             	sete   al
c001a578:	0f b6 c0             	movzx  eax,al
c001a57b:	eb 05                	jmp    c001a582 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a57d:	b8 04 00 00 00       	mov    eax,0x4
c001a582:	83 c4 08             	add    esp,0x8
c001a585:	5b                   	pop    ebx
c001a586:	c3                   	ret    
c001a587:	90                   	nop

c001a588 <ISO9660::seek(void*, unsigned long long)>:
c001a588:	57                   	push   edi
c001a589:	b8 04 00 00 00       	mov    eax,0x4
c001a58e:	56                   	push   esi
c001a58f:	51                   	push   ecx
c001a590:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a598:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a59c:	85 d2                	test   edx,edx
c001a59e:	74 26                	je     c001a5c6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a5a0:	89 d0                	mov    eax,edx
c001a5a2:	b9 02 00 00 00       	mov    ecx,0x2
c001a5a7:	6a 00                	push   0x0
c001a5a9:	99                   	cdq    
c001a5aa:	f7 f9                	idiv   ecx
c001a5ac:	57                   	push   edi
c001a5ad:	56                   	push   esi
c001a5ae:	83 e8 32             	sub    eax,0x32
c001a5b1:	50                   	push   eax
c001a5b2:	e8 31 c1 fe ff       	call   c00066e8 <iso_seek>
c001a5b7:	83 c4 10             	add    esp,0x10
c001a5ba:	31 f0                	xor    eax,esi
c001a5bc:	31 fa                	xor    edx,edi
c001a5be:	09 d0                	or     eax,edx
c001a5c0:	0f 95 c0             	setne  al
c001a5c3:	0f b6 c0             	movzx  eax,al
c001a5c6:	5a                   	pop    edx
c001a5c7:	5e                   	pop    esi
c001a5c8:	5f                   	pop    edi
c001a5c9:	c3                   	ret    

c001a5ca <ISO9660::tell(void*, unsigned long long*)>:
c001a5ca:	53                   	push   ebx
c001a5cb:	83 ec 08             	sub    esp,0x8
c001a5ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5d6:	85 c0                	test   eax,eax
c001a5d8:	74 24                	je     c001a5fe <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a5da:	85 db                	test   ebx,ebx
c001a5dc:	74 20                	je     c001a5fe <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a5de:	b9 02 00 00 00       	mov    ecx,0x2
c001a5e3:	99                   	cdq    
c001a5e4:	f7 f9                	idiv   ecx
c001a5e6:	83 ec 0c             	sub    esp,0xc
c001a5e9:	83 e8 32             	sub    eax,0x32
c001a5ec:	50                   	push   eax
c001a5ed:	e8 7a c1 fe ff       	call   c000676c <iso_tell>
c001a5f2:	83 c4 10             	add    esp,0x10
c001a5f5:	89 03                	mov    DWORD PTR [ebx],eax
c001a5f7:	31 c0                	xor    eax,eax
c001a5f9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a5fc:	eb 05                	jmp    c001a603 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a5fe:	b8 04 00 00 00       	mov    eax,0x4
c001a603:	83 c4 08             	add    esp,0x8
c001a606:	5b                   	pop    ebx
c001a607:	c3                   	ret    

c001a608 <ISO9660::stat(void*, unsigned long long*)>:
c001a608:	56                   	push   esi
c001a609:	53                   	push   ebx
c001a60a:	83 ec 10             	sub    esp,0x10
c001a60d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a611:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a615:	68 7d 2e 02 c0       	push   0xc0022e7d
c001a61a:	e8 eb 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a61f:	83 c4 10             	add    esp,0x10
c001a622:	85 db                	test   ebx,ebx
c001a624:	74 2a                	je     c001a650 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a626:	85 f6                	test   esi,esi
c001a628:	74 26                	je     c001a650 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a62a:	89 d8                	mov    eax,ebx
c001a62c:	b9 02 00 00 00       	mov    ecx,0x2
c001a631:	99                   	cdq    
c001a632:	83 ec 0c             	sub    esp,0xc
c001a635:	f7 f9                	idiv   ecx
c001a637:	83 e8 32             	sub    eax,0x32
c001a63a:	50                   	push   eax
c001a63b:	e8 5d c1 fe ff       	call   c000679d <iso_total>
c001a640:	83 c4 10             	add    esp,0x10
c001a643:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a64a:	89 06                	mov    DWORD PTR [esi],eax
c001a64c:	31 c0                	xor    eax,eax
c001a64e:	eb 05                	jmp    c001a655 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a650:	b8 04 00 00 00       	mov    eax,0x4
c001a655:	5a                   	pop    edx
c001a656:	5b                   	pop    ebx
c001a657:	5e                   	pop    esi
c001a658:	c3                   	ret    
c001a659:	90                   	nop

c001a65a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a65a:	55                   	push   ebp
c001a65b:	57                   	push   edi
c001a65c:	56                   	push   esi
c001a65d:	53                   	push   ebx
c001a65e:	83 ec 18             	sub    esp,0x18
c001a661:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a665:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a669:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a66d:	68 85 2e 02 c0       	push   0xc0022e85
c001a672:	e8 93 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a677:	83 c4 10             	add    esp,0x10
c001a67a:	85 ff                	test   edi,edi
c001a67c:	0f 94 c0             	sete   al
c001a67f:	85 f6                	test   esi,esi
c001a681:	0f 94 c2             	sete   dl
c001a684:	09 d0                	or     eax,edx
c001a686:	a8 01                	test   al,0x1
c001a688:	0f 85 dd 00 00 00    	jne    c001a76b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a68e:	85 db                	test   ebx,ebx
c001a690:	0f 84 d5 00 00 00    	je     c001a76b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a696:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a699:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a69f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a6a6:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6ad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a6af:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a6b5:	74 1b                	je     c001a6d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a6b7:	85 c0                	test   eax,eax
c001a6b9:	74 10                	je     c001a6cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a6bb:	83 ec 0c             	sub    esp,0xc
c001a6be:	68 29 2e 02 c0       	push   0xc0022e29
c001a6c3:	e8 5f 6e ff ff       	call   c0011527 <KePanic(char const*)>
c001a6c8:	83 c4 10             	add    esp,0x10
c001a6cb:	8a 03                	mov    al,BYTE PTR [ebx]
c001a6cd:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a6d2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6d5:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a6dc:	85 c0                	test   eax,eax
c001a6de:	74 09                	je     c001a6e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a6e0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a6e7:	74 51                	je     c001a73a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a6e9:	83 ec 0c             	sub    esp,0xc
c001a6ec:	68 8d 2e 02 c0       	push   0xc0022e8d
c001a6f1:	e8 14 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6f6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a704:	74 21                	je     c001a727 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a706:	83 ec 0c             	sub    esp,0xc
c001a709:	68 ad 2e 02 c0       	push   0xc0022ead
c001a70e:	e8 f7 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a713:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a720:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a727:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a72e:	83 ec 0c             	sub    esp,0xc
c001a731:	50                   	push   eax
c001a732:	e8 30 c3 fe ff       	call   c0006a67 <init_percd>
c001a737:	83 c4 10             	add    esp,0x10
c001a73a:	52                   	push   edx
c001a73b:	83 c3 03             	add    ebx,0x3
c001a73e:	52                   	push   edx
c001a73f:	6a 00                	push   0x0
c001a741:	53                   	push   ebx
c001a742:	e8 e3 bd fe ff       	call   c000652a <iso_open>
c001a747:	83 c4 10             	add    esp,0x10
c001a74a:	83 f8 ff             	cmp    eax,0xffffffff
c001a74d:	89 c5                	mov    ebp,eax
c001a74f:	75 21                	jne    c001a772 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a751:	50                   	push   eax
c001a752:	50                   	push   eax
c001a753:	6a 01                	push   0x1
c001a755:	53                   	push   ebx
c001a756:	e8 cf bd fe ff       	call   c000652a <iso_open>
c001a75b:	83 c4 10             	add    esp,0x10
c001a75e:	ba 02 00 00 00       	mov    edx,0x2
c001a763:	40                   	inc    eax
c001a764:	74 2b                	je     c001a791 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a766:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a769:	eb 24                	jmp    c001a78f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a76b:	ba 04 00 00 00       	mov    edx,0x4
c001a770:	eb 1f                	jmp    c001a791 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a772:	83 ec 0c             	sub    esp,0xc
c001a775:	50                   	push   eax
c001a776:	e8 22 c0 fe ff       	call   c000679d <iso_total>
c001a77b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a782:	89 07                	mov    DWORD PTR [edi],eax
c001a784:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a787:	e8 28 be fe ff       	call   c00065b4 <iso_close>
c001a78c:	83 c4 10             	add    esp,0x10
c001a78f:	31 d2                	xor    edx,edx
c001a791:	83 c4 0c             	add    esp,0xc
c001a794:	89 d0                	mov    eax,edx
c001a796:	5b                   	pop    ebx
c001a797:	5e                   	pop    esi
c001a798:	5f                   	pop    edi
c001a799:	5d                   	pop    ebp
c001a79a:	c3                   	ret    
c001a79b:	90                   	nop

c001a79c <ISO9660::close(void*)>:
c001a79c:	83 ec 0c             	sub    esp,0xc
c001a79f:	b8 04 00 00 00       	mov    eax,0x4
c001a7a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7a8:	85 d2                	test   edx,edx
c001a7aa:	74 1b                	je     c001a7c7 <ISO9660::close(void*)+0x2b>
c001a7ac:	89 d0                	mov    eax,edx
c001a7ae:	b9 02 00 00 00       	mov    ecx,0x2
c001a7b3:	99                   	cdq    
c001a7b4:	83 ec 0c             	sub    esp,0xc
c001a7b7:	f7 f9                	idiv   ecx
c001a7b9:	83 e8 32             	sub    eax,0x32
c001a7bc:	50                   	push   eax
c001a7bd:	e8 f2 bd fe ff       	call   c00065b4 <iso_close>
c001a7c2:	83 c4 10             	add    esp,0x10
c001a7c5:	31 c0                	xor    eax,eax
c001a7c7:	83 c4 0c             	add    esp,0xc
c001a7ca:	c3                   	ret    
c001a7cb:	90                   	nop

c001a7cc <ISO9660::openDir(char const*, void**)>:
c001a7cc:	56                   	push   esi
c001a7cd:	53                   	push   ebx
c001a7ce:	50                   	push   eax
c001a7cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a7d3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a7d7:	85 db                	test   ebx,ebx
c001a7d9:	0f 84 bd 00 00 00    	je     c001a89c <ISO9660::openDir(char const*, void**)+0xd0>
c001a7df:	85 f6                	test   esi,esi
c001a7e1:	0f 84 b5 00 00 00    	je     c001a89c <ISO9660::openDir(char const*, void**)+0xd0>
c001a7e7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a7e9:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a7ef:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7f6:	74 1b                	je     c001a813 <ISO9660::openDir(char const*, void**)+0x47>
c001a7f8:	85 c0                	test   eax,eax
c001a7fa:	74 10                	je     c001a80c <ISO9660::openDir(char const*, void**)+0x40>
c001a7fc:	83 ec 0c             	sub    esp,0xc
c001a7ff:	68 29 2e 02 c0       	push   0xc0022e29
c001a804:	e8 1e 6d ff ff       	call   c0011527 <KePanic(char const*)>
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a80e:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a813:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a816:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a81d:	85 c0                	test   eax,eax
c001a81f:	74 10                	je     c001a831 <ISO9660::openDir(char const*, void**)+0x65>
c001a821:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a828:	74 1a                	je     c001a844 <ISO9660::openDir(char const*, void**)+0x78>
c001a82a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a831:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a838:	83 ec 0c             	sub    esp,0xc
c001a83b:	50                   	push   eax
c001a83c:	e8 26 c2 fe ff       	call   c0006a67 <init_percd>
c001a841:	83 c4 10             	add    esp,0x10
c001a844:	50                   	push   eax
c001a845:	83 c3 03             	add    ebx,0x3
c001a848:	50                   	push   eax
c001a849:	6a 01                	push   0x1
c001a84b:	53                   	push   ebx
c001a84c:	e8 d9 bc fe ff       	call   c000652a <iso_open>
c001a851:	83 c4 10             	add    esp,0x10
c001a854:	83 f8 ff             	cmp    eax,0xffffffff
c001a857:	89 c3                	mov    ebx,eax
c001a859:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a85e:	75 1c                	jne    c001a87c <ISO9660::openDir(char const*, void**)+0xb0>
c001a860:	53                   	push   ebx
c001a861:	53                   	push   ebx
c001a862:	68 d1 2e 02 c0       	push   0xc0022ed1
c001a867:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a86d:	e8 3a e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a872:	83 c4 10             	add    esp,0x10
c001a875:	b8 01 00 00 00       	mov    eax,0x1
c001a87a:	eb 25                	jmp    c001a8a1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a87c:	51                   	push   ecx
c001a87d:	01 db                	add    ebx,ebx
c001a87f:	51                   	push   ecx
c001a880:	83 c3 65             	add    ebx,0x65
c001a883:	68 e4 2e 02 c0       	push   0xc0022ee4
c001a888:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a88e:	e8 19 e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a893:	83 c4 10             	add    esp,0x10
c001a896:	31 c0                	xor    eax,eax
c001a898:	89 1e                	mov    DWORD PTR [esi],ebx
c001a89a:	eb 05                	jmp    c001a8a1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a89c:	b8 04 00 00 00       	mov    eax,0x4
c001a8a1:	5a                   	pop    edx
c001a8a2:	5b                   	pop    ebx
c001a8a3:	5e                   	pop    esi
c001a8a4:	c3                   	ret    
c001a8a5:	90                   	nop

c001a8a6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a8a6:	55                   	push   ebp
c001a8a7:	57                   	push   edi
c001a8a8:	56                   	push   esi
c001a8a9:	53                   	push   ebx
c001a8aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8b0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a8b7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a8be:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a8c5:	85 db                	test   ebx,ebx
c001a8c7:	0f 84 e4 00 00 00    	je     c001a9b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a8cd:	85 ed                	test   ebp,ebp
c001a8cf:	0f 84 dc 00 00 00    	je     c001a9b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a8d5:	83 ec 0c             	sub    esp,0xc
c001a8d8:	68 f7 2e 02 c0       	push   0xc0022ef7
c001a8dd:	e8 28 00 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a8e2:	89 d8                	mov    eax,ebx
c001a8e4:	b9 02 00 00 00       	mov    ecx,0x2
c001a8e9:	99                   	cdq    
c001a8ea:	f7 f9                	idiv   ecx
c001a8ec:	83 e8 32             	sub    eax,0x32
c001a8ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8f2:	e8 f8 be fe ff       	call   c00067ef <iso_readdir>
c001a8f7:	83 c4 10             	add    esp,0x10
c001a8fa:	85 c0                	test   eax,eax
c001a8fc:	89 c3                	mov    ebx,eax
c001a8fe:	75 38                	jne    c001a938 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a900:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a905:	53                   	push   ebx
c001a906:	53                   	push   ebx
c001a907:	68 02 2f 02 c0       	push   0xc0022f02
c001a90c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a912:	e8 95 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a917:	83 c4 0c             	add    esp,0xc
c001a91a:	68 10 01 00 00       	push   0x110
c001a91f:	6a 00                	push   0x0
c001a921:	57                   	push   edi
c001a922:	e8 c9 5b fe ff       	call   c00004f0 <memset>
c001a927:	83 c4 10             	add    esp,0x10
c001a92a:	b8 01 00 00 00       	mov    eax,0x1
c001a92f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a936:	eb 7e                	jmp    c001a9b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a938:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a93e:	8d 70 08             	lea    esi,[eax+0x8]
c001a941:	83 ec 0c             	sub    esp,0xc
c001a944:	56                   	push   esi
c001a945:	e8 36 5c fe ff       	call   c0000580 <strlen>
c001a94a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a952:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a95d:	75 0a                	jne    c001a969 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a95f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a962:	b8 02 00 00 00       	mov    eax,0x2
c001a967:	74 05                	je     c001a96e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a969:	b8 01 00 00 00       	mov    eax,0x1
c001a96e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a972:	50                   	push   eax
c001a973:	50                   	push   eax
c001a974:	56                   	push   esi
c001a975:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a979:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a97d:	50                   	push   eax
c001a97e:	e8 cd 5c fe ff       	call   c0000650 <strcpy>
c001a983:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a98a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a98c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a993:	5a                   	pop    edx
c001a994:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a999:	59                   	pop    ecx
c001a99a:	68 15 2f 02 c0       	push   0xc0022f15
c001a99f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9a5:	e8 02 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a9aa:	83 c4 10             	add    esp,0x10
c001a9ad:	31 c0                	xor    eax,eax
c001a9af:	eb 05                	jmp    c001a9b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a9b1:	b8 04 00 00 00       	mov    eax,0x4
c001a9b6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9bc:	5b                   	pop    ebx
c001a9bd:	5e                   	pop    esi
c001a9be:	5f                   	pop    edi
c001a9bf:	5d                   	pop    ebp
c001a9c0:	c3                   	ret    

c001a9c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a9c1:	57                   	push   edi
c001a9c2:	56                   	push   esi
c001a9c3:	53                   	push   ebx
c001a9c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a9cc:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001a9d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a9d6:	0f be cb             	movsx  ecx,bl
c001a9d9:	75 0b                	jne    c001a9e6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a9db:	0f be 05 40 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024140
c001a9e2:	39 c8                	cmp    eax,ecx
c001a9e4:	74 47                	je     c001aa2d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a9e6:	83 ec 0c             	sub    esp,0xc
c001a9e9:	31 d2                	xor    edx,edx
c001a9eb:	68 a0 c8 02 c0       	push   0xc002c8a0
c001a9f0:	6a 01                	push   0x1
c001a9f2:	52                   	push   edx
c001a9f3:	56                   	push   esi
c001a9f4:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001a9fb:	e8 4a 33 ff ff       	call   c000dd4a <LogicalDisk::read(unsigned long long, int, void*)>
c001aa00:	83 c4 20             	add    esp,0x20
c001aa03:	85 c0                	test   eax,eax
c001aa05:	75 0e                	jne    c001aa15 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa07:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa0d:	88 1d 40 41 02 c0    	mov    BYTE PTR ds:0xc0024140,bl
c001aa13:	eb 18                	jmp    c001aa2d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa15:	50                   	push   eax
c001aa16:	68 00 08 00 00       	push   0x800
c001aa1b:	6a 00                	push   0x0
c001aa1d:	57                   	push   edi
c001aa1e:	e8 cd 5a fe ff       	call   c00004f0 <memset>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	b8 01 00 00 00       	mov    eax,0x1
c001aa2b:	eb 0e                	jmp    c001aa3b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa2d:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aa32:	b9 00 08 00 00       	mov    ecx,0x800
c001aa37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa39:	31 c0                	xor    eax,eax
c001aa3b:	5b                   	pop    ebx
c001aa3c:	5e                   	pop    esi
c001aa3d:	5f                   	pop    edi
c001aa3e:	c3                   	ret    
c001aa3f:	90                   	nop

c001aa40 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aa40:	53                   	push   ebx
c001aa41:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aa47:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aa51:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aa58:	8d 58 41             	lea    ebx,[eax+0x41]
c001aa5b:	0f be db             	movsx  ebx,bl
c001aa5e:	53                   	push   ebx
c001aa5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa63:	50                   	push   eax
c001aa64:	6a 10                	push   0x10
c001aa66:	e8 56 ff ff ff       	call   c001a9c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	31 d2                	xor    edx,edx
c001aa70:	85 c0                	test   eax,eax
c001aa72:	75 33                	jne    c001aaa7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa74:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aa79:	75 2c                	jne    c001aaa7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa7b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aa80:	75 25                	jne    c001aaa7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa82:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aa87:	75 1e                	jne    c001aaa7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa89:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aa8e:	75 17                	jne    c001aaa7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa90:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aa95:	75 10                	jne    c001aaa7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa97:	83 ec 0c             	sub    esp,0xc
c001aa9a:	53                   	push   ebx
c001aa9b:	e8 c7 bf fe ff       	call   c0006a67 <init_percd>
c001aaa0:	83 c4 10             	add    esp,0x10
c001aaa3:	40                   	inc    eax
c001aaa4:	0f 95 c2             	setne  dl
c001aaa7:	81 c4 08 08 00 00    	add    esp,0x808
c001aaad:	88 d0                	mov    al,dl
c001aaaf:	5b                   	pop    ebx
c001aab0:	c3                   	ret    
c001aab1:	90                   	nop

c001aab2 <ISO9660::ISO9660()>:
c001aab2:	83 ec 0c             	sub    esp,0xc
c001aab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aab9:	83 ec 0c             	sub    esp,0xc
c001aabc:	50                   	push   eax
c001aabd:	e8 6a 0c ff ff       	call   c000b72c <Filesystem::Filesystem()>
c001aac2:	83 c4 10             	add    esp,0x10
c001aac5:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001aaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aace:	89 10                	mov    DWORD PTR [eax],edx
c001aad0:	e8 a4 c0 fe ff       	call   c0006b79 <fs_iso9660_init>
c001aad5:	90                   	nop
c001aad6:	83 c4 0c             	add    esp,0xc
c001aad9:	c3                   	ret    

c001aada <SoundCard::beginPlayback()>:
c001aada:	c7 44 24 04 94 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f94
c001aae2:	e9 40 6a ff ff       	jmp    c0011527 <KePanic(char const*)>
c001aae7:	90                   	nop

c001aae8 <SoundCard::stopPlayback()>:
c001aae8:	c7 44 24 04 94 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f94
c001aaf0:	e9 32 6a ff ff       	jmp    c0011527 <KePanic(char const*)>
c001aaf5:	90                   	nop

c001aaf6 <SoundCard::SoundCard(char const*)>:
c001aaf6:	83 ec 1c             	sub    esp,0x1c
c001aaf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aafd:	83 ec 08             	sub    esp,0x8
c001ab00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab04:	50                   	push   eax
c001ab05:	e8 ee 1f ff ff       	call   c000caf8 <Device::Device(char const*)>
c001ab0a:	83 c4 10             	add    esp,0x10
c001ab0d:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001ab12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab16:	89 10                	mov    DWORD PTR [eax],edx
c001ab18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab1c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab27:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab35:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ab3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab43:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ab4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab51:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab5b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab63:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab68:	7f 1a                	jg     c001ab84 <SoundCard::SoundCard(char const*)+0x8e>
c001ab6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab72:	83 c2 54             	add    edx,0x54
c001ab75:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ab7d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ab82:	eb df                	jmp    c001ab63 <SoundCard::SoundCard(char const*)+0x6d>
c001ab84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab88:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab8f:	90                   	nop
c001ab90:	83 c4 1c             	add    esp,0x1c
c001ab93:	c3                   	ret    

c001ab94 <SoundCard::~SoundCard()>:
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba0:	89 10                	mov    DWORD PTR [eax],edx
c001aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba6:	83 ec 0c             	sub    esp,0xc
c001aba9:	50                   	push   eax
c001abaa:	e8 b3 1c ff ff       	call   c000c862 <Device::~Device()>
c001abaf:	83 c4 10             	add    esp,0x10
c001abb2:	90                   	nop
c001abb3:	83 c4 0c             	add    esp,0xc
c001abb6:	c3                   	ret    
c001abb7:	90                   	nop

c001abb8 <SoundCard::~SoundCard()>:
c001abb8:	83 ec 0c             	sub    esp,0xc
c001abbb:	83 ec 0c             	sub    esp,0xc
c001abbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abc2:	e8 cd ff ff ff       	call   c001ab94 <SoundCard::~SoundCard()>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	83 ec 08             	sub    esp,0x8
c001abcd:	68 e8 01 00 00       	push   0x1e8
c001abd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abd6:	e8 31 fc fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001abdb:	83 c4 10             	add    esp,0x10
c001abde:	83 c4 0c             	add    esp,0xc
c001abe1:	c3                   	ret    

c001abe2 <SoundCard::configureRates(int, int, int)>:
c001abe2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abe6:	31 c0                	xor    eax,eax
c001abe8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001abef:	75 20                	jne    c001ac11 <SoundCard::configureRates(int, int, int)+0x2f>
c001abf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abf5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001abfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abff:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac09:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac0f:	b0 01                	mov    al,0x1
c001ac11:	c3                   	ret    

c001ac12 <SoundCard::getSamples16(int, short*)>:
c001ac12:	55                   	push   ebp
c001ac13:	57                   	push   edi
c001ac14:	31 ff                	xor    edi,edi
c001ac16:	56                   	push   esi
c001ac17:	53                   	push   ebx
c001ac18:	31 db                	xor    ebx,ebx
c001ac1a:	83 ec 10             	sub    esp,0x10
c001ac1d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac21:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac25:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac28:	50                   	push   eax
c001ac29:	6a 00                	push   0x0
c001ac2b:	55                   	push   ebp
c001ac2c:	e8 bf 58 fe ff       	call   c00004f0 <memset>
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac38:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ac3f:	85 c0                	test   eax,eax
c001ac41:	74 1a                	je     c001ac5d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac43:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac47:	75 14                	jne    c001ac5d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac4d:	55                   	push   ebp
c001ac4e:	56                   	push   esi
c001ac4f:	50                   	push   eax
c001ac50:	e8 f3 02 00 00       	call   c001af48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	39 c3                	cmp    ebx,eax
c001ac5a:	0f 4c d8             	cmovl  ebx,eax
c001ac5d:	47                   	inc    edi
c001ac5e:	83 ff 20             	cmp    edi,0x20
c001ac61:	75 d1                	jne    c001ac34 <SoundCard::getSamples16(int, short*)+0x22>
c001ac63:	83 c4 0c             	add    esp,0xc
c001ac66:	89 d8                	mov    eax,ebx
c001ac68:	5b                   	pop    ebx
c001ac69:	5e                   	pop    esi
c001ac6a:	5f                   	pop    edi
c001ac6b:	5d                   	pop    ebp
c001ac6c:	c3                   	ret    
c001ac6d:	90                   	nop

c001ac6e <SoundCard::getSamples32(int, int*)>:
c001ac6e:	55                   	push   ebp
c001ac6f:	57                   	push   edi
c001ac70:	31 ff                	xor    edi,edi
c001ac72:	56                   	push   esi
c001ac73:	31 f6                	xor    esi,esi
c001ac75:	53                   	push   ebx
c001ac76:	83 ec 10             	sub    esp,0x10
c001ac79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac7d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac81:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ac85:	c1 e0 02             	shl    eax,0x2
c001ac88:	50                   	push   eax
c001ac89:	6a 00                	push   0x0
c001ac8b:	55                   	push   ebp
c001ac8c:	e8 5f 58 fe ff       	call   c00004f0 <memset>
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ac9b:	85 c0                	test   eax,eax
c001ac9d:	74 1a                	je     c001acb9 <SoundCard::getSamples32(int, int*)+0x4b>
c001ac9f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001aca3:	75 14                	jne    c001acb9 <SoundCard::getSamples32(int, int*)+0x4b>
c001aca5:	53                   	push   ebx
c001aca6:	55                   	push   ebp
c001aca7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acab:	50                   	push   eax
c001acac:	e8 67 03 00 00       	call   c001b018 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	39 c6                	cmp    esi,eax
c001acb6:	0f 4c f0             	cmovl  esi,eax
c001acb9:	47                   	inc    edi
c001acba:	83 ff 20             	cmp    edi,0x20
c001acbd:	75 d5                	jne    c001ac94 <SoundCard::getSamples32(int, int*)+0x26>
c001acbf:	85 f6                	test   esi,esi
c001acc1:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001acc8:	75 0f                	jne    c001acd9 <SoundCard::getSamples32(int, int*)+0x6b>
c001acca:	85 c0                	test   eax,eax
c001accc:	74 1b                	je     c001ace9 <SoundCard::getSamples32(int, int*)+0x7b>
c001acce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acd0:	83 ec 0c             	sub    esp,0xc
c001acd3:	53                   	push   ebx
c001acd4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001acd7:	eb 0d                	jmp    c001ace6 <SoundCard::getSamples32(int, int*)+0x78>
c001acd9:	85 c0                	test   eax,eax
c001acdb:	75 0c                	jne    c001ace9 <SoundCard::getSamples32(int, int*)+0x7b>
c001acdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acdf:	83 ec 0c             	sub    esp,0xc
c001ace2:	53                   	push   ebx
c001ace3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ace6:	83 c4 10             	add    esp,0x10
c001ace9:	83 c4 0c             	add    esp,0xc
c001acec:	89 f0                	mov    eax,esi
c001acee:	5b                   	pop    ebx
c001acef:	5e                   	pop    esi
c001acf0:	5f                   	pop    edi
c001acf1:	5d                   	pop    ebp
c001acf2:	c3                   	ret    
c001acf3:	90                   	nop

c001acf4 <SoundCard::addChannel(SoundPort*)>:
c001acf4:	83 ec 0c             	sub    esp,0xc
c001acf7:	31 c0                	xor    eax,eax
c001acf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acfd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad05:	74 1b                	je     c001ad22 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad07:	40                   	inc    eax
c001ad08:	83 f8 20             	cmp    eax,0x20
c001ad0b:	75 f0                	jne    c001acfd <SoundCard::addChannel(SoundPort*)+0x9>
c001ad0d:	83 ec 0c             	sub    esp,0xc
c001ad10:	68 b9 2f 02 c0       	push   0xc0022fb9
c001ad15:	e8 0d 68 ff ff       	call   c0011527 <KePanic(char const*)>
c001ad1a:	83 c4 10             	add    esp,0x10
c001ad1d:	83 c8 ff             	or     eax,0xffffffff
c001ad20:	eb 0b                	jmp    c001ad2d <SoundCard::addChannel(SoundPort*)+0x39>
c001ad22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad26:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad2d:	83 c4 0c             	add    esp,0xc
c001ad30:	c3                   	ret    
c001ad31:	90                   	nop

c001ad32 <SoundCard::removeChannel(int)>:
c001ad32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad3a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ad45:	c3                   	ret    
c001ad46:	66 90                	xchg   ax,ax

c001ad48 <SoundPort::SoundPort(int, int, int, int)>:
c001ad48:	83 ec 0c             	sub    esp,0xc
c001ad4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ad56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad5a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ad5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad66:	89 10                	mov    DWORD PTR [eax],edx
c001ad68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ad73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ad7e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ad83:	75 13                	jne    c001ad98 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ad85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad89:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad8b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ad90:	d1 e0                	shl    eax,1
c001ad92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad96:	66 90                	xchg   ax,ax
c001ad98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ada0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ada3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001adae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001adb5:	c1 e0 02             	shl    eax,0x2
c001adb8:	83 ec 0c             	sub    esp,0xc
c001adbb:	50                   	push   eax
c001adbc:	e8 12 cd fe ff       	call   c0007ad3 <malloc>
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	89 c2                	mov    edx,eax
c001adc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001adcd:	90                   	nop
c001adce:	83 c4 0c             	add    esp,0xc
c001add1:	c3                   	ret    
c001add2:	66 90                	xchg   ax,ax

c001add4 <SoundPort::~SoundPort()>:
c001add4:	83 ec 0c             	sub    esp,0xc
c001add7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001addb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001adde:	85 c0                	test   eax,eax
c001ade0:	74 1e                	je     c001ae00 <SoundPort::~SoundPort()+0x2c>
c001ade2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ade9:	83 ec 0c             	sub    esp,0xc
c001adec:	50                   	push   eax
c001aded:	e8 f1 cc fe ff       	call   c0007ae3 <free>
c001adf2:	83 c4 10             	add    esp,0x10
c001adf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae00:	90                   	nop
c001ae01:	83 c4 0c             	add    esp,0xc
c001ae04:	c3                   	ret    
c001ae05:	90                   	nop
c001ae06:	66 90                	xchg   ax,ax

c001ae08 <SoundPort::unpause()>:
c001ae08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae0c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae10:	c3                   	ret    
c001ae11:	90                   	nop
c001ae12:	66 90                	xchg   ax,ax

c001ae14 <SoundPort::pause()>:
c001ae14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae18:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae1c:	c3                   	ret    
c001ae1d:	90                   	nop
c001ae1e:	66 90                	xchg   ax,ax

c001ae20 <SoundPort::getBufferUsed()>:
c001ae20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae27:	c3                   	ret    

c001ae28 <SoundPort::getBufferSize()>:
c001ae28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae2f:	c3                   	ret    

c001ae30 <SoundPort::buffer16(short*, int)>:
c001ae30:	55                   	push   ebp
c001ae31:	57                   	push   edi
c001ae32:	56                   	push   esi
c001ae33:	53                   	push   ebx
c001ae34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae38:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ae3c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ae3f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ae42:	74 68                	je     c001aeac <SoundPort::buffer16(short*, int)+0x7c>
c001ae44:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae48:	85 c9                	test   ecx,ecx
c001ae4a:	7e 60                	jle    c001aeac <SoundPort::buffer16(short*, int)+0x7c>
c001ae4c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ae50:	8d 70 01             	lea    esi,[eax+0x1]
c001ae53:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ae56:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ae59:	c1 e1 0f             	shl    ecx,0xf
c001ae5c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ae5f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae62:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae65:	74 4d                	je     c001aeb4 <SoundPort::buffer16(short*, int)+0x84>
c001ae67:	31 f6                	xor    esi,esi
c001ae69:	eb 21                	jmp    c001ae8c <SoundPort::buffer16(short*, int)+0x5c>
c001ae6b:	90                   	nop
c001ae6c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ae71:	8d 79 01             	lea    edi,[ecx+0x1]
c001ae74:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ae77:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ae7a:	c1 e3 0f             	shl    ebx,0xf
c001ae7d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ae80:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae83:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae86:	74 1c                	je     c001aea4 <SoundPort::buffer16(short*, int)+0x74>
c001ae88:	89 c6                	mov    esi,eax
c001ae8a:	66 90                	xchg   ax,ax
c001ae8c:	8d 46 01             	lea    eax,[esi+0x1]
c001ae8f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ae93:	75 d7                	jne    c001ae6c <SoundPort::buffer16(short*, int)+0x3c>
c001ae95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae99:	8d 76 00             	lea    esi,[esi+0x0]
c001ae9c:	5b                   	pop    ebx
c001ae9d:	5e                   	pop    esi
c001ae9e:	5f                   	pop    edi
c001ae9f:	5d                   	pop    ebp
c001aea0:	c3                   	ret    
c001aea1:	8d 76 00             	lea    esi,[esi+0x0]
c001aea4:	5b                   	pop    ebx
c001aea5:	8d 46 02             	lea    eax,[esi+0x2]
c001aea8:	5e                   	pop    esi
c001aea9:	5f                   	pop    edi
c001aeaa:	5d                   	pop    ebp
c001aeab:	c3                   	ret    
c001aeac:	5b                   	pop    ebx
c001aead:	31 c0                	xor    eax,eax
c001aeaf:	5e                   	pop    esi
c001aeb0:	5f                   	pop    edi
c001aeb1:	5d                   	pop    ebp
c001aeb2:	c3                   	ret    
c001aeb3:	90                   	nop
c001aeb4:	b8 01 00 00 00       	mov    eax,0x1
c001aeb9:	eb e1                	jmp    c001ae9c <SoundPort::buffer16(short*, int)+0x6c>
c001aebb:	90                   	nop

c001aebc <SoundPort::buffer32(int*, int)>:
c001aebc:	55                   	push   ebp
c001aebd:	57                   	push   edi
c001aebe:	56                   	push   esi
c001aebf:	53                   	push   ebx
c001aec0:	83 ec 04             	sub    esp,0x4
c001aec3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aecb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aecf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aed2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aed5:	89 04 24             	mov    DWORD PTR [esp],eax
c001aed8:	74 5a                	je     c001af34 <SoundPort::buffer32(int*, int)+0x78>
c001aeda:	85 c0                	test   eax,eax
c001aedc:	7e 56                	jle    c001af34 <SoundPort::buffer32(int*, int)+0x78>
c001aede:	8d 71 01             	lea    esi,[ecx+0x1]
c001aee1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aee4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aee7:	8b 37                	mov    esi,DWORD PTR [edi]
c001aee9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aeec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aeef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aef2:	74 4c                	je     c001af40 <SoundPort::buffer32(int*, int)+0x84>
c001aef4:	31 f6                	xor    esi,esi
c001aef6:	eb 1c                	jmp    c001af14 <SoundPort::buffer32(int*, int)+0x58>
c001aef8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aefb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aefe:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af01:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af04:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af0e:	74 18                	je     c001af28 <SoundPort::buffer32(int*, int)+0x6c>
c001af10:	89 de                	mov    esi,ebx
c001af12:	66 90                	xchg   ax,ax
c001af14:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af17:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af1a:	75 dc                	jne    c001aef8 <SoundPort::buffer32(int*, int)+0x3c>
c001af1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af1f:	90                   	nop
c001af20:	83 c4 04             	add    esp,0x4
c001af23:	5b                   	pop    ebx
c001af24:	5e                   	pop    esi
c001af25:	5f                   	pop    edi
c001af26:	5d                   	pop    ebp
c001af27:	c3                   	ret    
c001af28:	8d 46 02             	lea    eax,[esi+0x2]
c001af2b:	83 c4 04             	add    esp,0x4
c001af2e:	5b                   	pop    ebx
c001af2f:	5e                   	pop    esi
c001af30:	5f                   	pop    edi
c001af31:	5d                   	pop    ebp
c001af32:	c3                   	ret    
c001af33:	90                   	nop
c001af34:	83 c4 04             	add    esp,0x4
c001af37:	31 c0                	xor    eax,eax
c001af39:	5b                   	pop    ebx
c001af3a:	5e                   	pop    esi
c001af3b:	5f                   	pop    edi
c001af3c:	5d                   	pop    ebp
c001af3d:	c3                   	ret    
c001af3e:	66 90                	xchg   ax,ax
c001af40:	b8 01 00 00 00       	mov    eax,0x1
c001af45:	eb d9                	jmp    c001af20 <SoundPort::buffer32(int*, int)+0x64>
c001af47:	90                   	nop

c001af48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001af48:	55                   	push   ebp
c001af49:	57                   	push   edi
c001af4a:	56                   	push   esi
c001af4b:	53                   	push   ebx
c001af4c:	83 ec 0c             	sub    esp,0xc
c001af4f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001af53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af5b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001af5f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001af65:	39 03                	cmp    DWORD PTR [ebx],eax
c001af67:	74 13                	je     c001af7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001af69:	83 ec 0c             	sub    esp,0xc
c001af6c:	68 0c 30 02 c0       	push   0xc002300c
c001af71:	e8 b1 65 ff ff       	call   c0011527 <KePanic(char const*)>
c001af76:	83 c4 10             	add    esp,0x10
c001af79:	8d 76 00             	lea    esi,[esi+0x0]
c001af7c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001af82:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001af85:	74 11                	je     c001af98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001af87:	83 ec 0c             	sub    esp,0xc
c001af8a:	68 4b 30 02 c0       	push   0xc002304b
c001af8f:	e8 93 65 ff ff       	call   c0011527 <KePanic(char const*)>
c001af94:	83 c4 10             	add    esp,0x10
c001af97:	90                   	nop
c001af98:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001af9e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001afa1:	74 11                	je     c001afb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001afa3:	83 ec 0c             	sub    esp,0xc
c001afa6:	68 4b 30 02 c0       	push   0xc002304b
c001afab:	e8 77 65 ff ff       	call   c0011527 <KePanic(char const*)>
c001afb0:	83 c4 10             	add    esp,0x10
c001afb3:	90                   	nop
c001afb4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001afb7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001afbb:	85 f6                	test   esi,esi
c001afbd:	7e 2d                	jle    c001afec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001afbf:	31 c0                	xor    eax,eax
c001afc1:	8d 76 00             	lea    esi,[esi+0x0]
c001afc4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001afc7:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001afca:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001afd0:	85 c9                	test   ecx,ecx
c001afd2:	0f 49 d1             	cmovns edx,ecx
c001afd5:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001afd9:	c1 fa 0f             	sar    edx,0xf
c001afdc:	01 d1                	add    ecx,edx
c001afde:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001afe2:	83 c0 01             	add    eax,0x1
c001afe5:	39 f0                	cmp    eax,esi
c001afe7:	75 db                	jne    c001afc4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001afe9:	8d 76 00             	lea    esi,[esi+0x0]
c001afec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001afef:	83 ec 04             	sub    esp,0x4
c001aff2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aff5:	29 f0                	sub    eax,esi
c001aff7:	c1 e0 02             	shl    eax,0x2
c001affa:	50                   	push   eax
c001affb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001affe:	50                   	push   eax
c001afff:	52                   	push   edx
c001b000:	e8 cb 53 fe ff       	call   c00003d0 <memmove>
c001b005:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b008:	29 f0                	sub    eax,esi
c001b00a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b00d:	83 c4 1c             	add    esp,0x1c
c001b010:	89 f0                	mov    eax,esi
c001b012:	5b                   	pop    ebx
c001b013:	5e                   	pop    esi
c001b014:	5f                   	pop    edi
c001b015:	5d                   	pop    ebp
c001b016:	c3                   	ret    
c001b017:	90                   	nop

c001b018 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b018:	55                   	push   ebp
c001b019:	57                   	push   edi
c001b01a:	56                   	push   esi
c001b01b:	53                   	push   ebx
c001b01c:	83 ec 0c             	sub    esp,0xc
c001b01f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b023:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b027:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b02b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b02f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b035:	39 03                	cmp    DWORD PTR [ebx],eax
c001b037:	74 13                	je     c001b04c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b039:	83 ec 0c             	sub    esp,0xc
c001b03c:	68 2c 30 02 c0       	push   0xc002302c
c001b041:	e8 e1 64 ff ff       	call   c0011527 <KePanic(char const*)>
c001b046:	83 c4 10             	add    esp,0x10
c001b049:	8d 76 00             	lea    esi,[esi+0x0]
c001b04c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b052:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b055:	74 11                	je     c001b068 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b057:	83 ec 0c             	sub    esp,0xc
c001b05a:	68 67 30 02 c0       	push   0xc0023067
c001b05f:	e8 c3 64 ff ff       	call   c0011527 <KePanic(char const*)>
c001b064:	83 c4 10             	add    esp,0x10
c001b067:	90                   	nop
c001b068:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b06e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b071:	74 11                	je     c001b084 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b073:	83 ec 0c             	sub    esp,0xc
c001b076:	68 67 30 02 c0       	push   0xc0023067
c001b07b:	e8 a7 64 ff ff       	call   c0011527 <KePanic(char const*)>
c001b080:	83 c4 10             	add    esp,0x10
c001b083:	90                   	nop
c001b084:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b087:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b08b:	85 ff                	test   edi,edi
c001b08d:	7e 21                	jle    c001b0b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b08f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b096:	31 c0                	xor    eax,eax
c001b098:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b09b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b09e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b0a1:	01 d5                	add    ebp,edx
c001b0a3:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b0a6:	83 c0 04             	add    eax,0x4
c001b0a9:	39 c1                	cmp    ecx,eax
c001b0ab:	75 eb                	jne    c001b098 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b0ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0b3:	83 ec 04             	sub    esp,0x4
c001b0b6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0b9:	29 f8                	sub    eax,edi
c001b0bb:	c1 e0 02             	shl    eax,0x2
c001b0be:	50                   	push   eax
c001b0bf:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b0c2:	50                   	push   eax
c001b0c3:	52                   	push   edx
c001b0c4:	e8 07 53 fe ff       	call   c00003d0 <memmove>
c001b0c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0cc:	29 f8                	sub    eax,edi
c001b0ce:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0d1:	83 c4 1c             	add    esp,0x1c
c001b0d4:	89 f8                	mov    eax,edi
c001b0d6:	5b                   	pop    ebx
c001b0d7:	5e                   	pop    esi
c001b0d8:	5f                   	pop    edi
c001b0d9:	5d                   	pop    ebp
c001b0da:	c3                   	ret    
c001b0db:	90                   	nop

c001b0dc <PCI::open(int, int, void*)>:
c001b0dc:	83 ec 18             	sub    esp,0x18
c001b0df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b0e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b0ed:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0ef:	50                   	push   eax
c001b0f0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b0f3:	31 c0                	xor    eax,eax
c001b0f5:	83 c4 1c             	add    esp,0x1c
c001b0f8:	c3                   	ret    
c001b0f9:	90                   	nop

c001b0fa <PCI::close(int, int, void*)>:
c001b0fa:	31 c0                	xor    eax,eax
c001b0fc:	c3                   	ret    
c001b0fd:	90                   	nop

c001b0fe <PCI::PCI()>:
c001b0fe:	83 ec 0c             	sub    esp,0xc
c001b101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b105:	83 ec 08             	sub    esp,0x8
c001b108:	68 83 30 02 c0       	push   0xc0023083
c001b10d:	50                   	push   eax
c001b10e:	e8 a9 11 ff ff       	call   c000c2bc <Bus::Bus(char const*)>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c001b11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b11f:	89 10                	mov    DWORD PTR [eax],edx
c001b121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b125:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b133:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b142:	0f b6 d0             	movzx  edx,al
c001b145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b149:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b154:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b15a:	0f b6 d0             	movzx  edx,al
c001b15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b161:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b16a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b170:	8d 50 01             	lea    edx,[eax+0x1]
c001b173:	88 d1                	mov    cl,dl
c001b175:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b179:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b17f:	0f b6 d0             	movzx  edx,al
c001b182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b186:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b18a:	83 c9 c0             	or     ecx,0xffffffc0
c001b18d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b191:	90                   	nop
c001b192:	83 c4 0c             	add    esp,0xc
c001b195:	c3                   	ret    

c001b196 <PCI::readBAR8(unsigned int, int)>:
c001b196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b19a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b19e:	f6 c2 01             	test   dl,0x1
c001b1a1:	74 07                	je     c001b1aa <PCI::readBAR8(unsigned int, int)+0x14>
c001b1a3:	83 e2 fc             	and    edx,0xfffffffc
c001b1a6:	01 c2                	add    edx,eax
c001b1a8:	ec                   	in     al,dx
c001b1a9:	c3                   	ret    
c001b1aa:	83 e2 f0             	and    edx,0xfffffff0
c001b1ad:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b1b0:	c3                   	ret    
c001b1b1:	90                   	nop

c001b1b2 <PCI::readBAR16(unsigned int, int)>:
c001b1b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1ba:	f6 c2 01             	test   dl,0x1
c001b1bd:	74 08                	je     c001b1c7 <PCI::readBAR16(unsigned int, int)+0x15>
c001b1bf:	83 e2 fc             	and    edx,0xfffffffc
c001b1c2:	01 c2                	add    edx,eax
c001b1c4:	66 ed                	in     ax,dx
c001b1c6:	c3                   	ret    
c001b1c7:	83 e2 f0             	and    edx,0xfffffff0
c001b1ca:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b1ce:	c3                   	ret    
c001b1cf:	90                   	nop

c001b1d0 <PCI::readBAR32(unsigned int, int)>:
c001b1d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1d8:	f6 c2 01             	test   dl,0x1
c001b1db:	74 07                	je     c001b1e4 <PCI::readBAR32(unsigned int, int)+0x14>
c001b1dd:	83 e2 fc             	and    edx,0xfffffffc
c001b1e0:	01 c2                	add    edx,eax
c001b1e2:	ed                   	in     eax,dx
c001b1e3:	c3                   	ret    
c001b1e4:	83 e2 f0             	and    edx,0xfffffff0
c001b1e7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b1ea:	c3                   	ret    
c001b1eb:	90                   	nop

c001b1ec <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b1ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1f8:	f6 c2 01             	test   dl,0x1
c001b1fb:	74 07                	je     c001b204 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b1fd:	83 e2 fc             	and    edx,0xfffffffc
c001b200:	01 ca                	add    edx,ecx
c001b202:	ee                   	out    dx,al
c001b203:	c3                   	ret    
c001b204:	83 e2 f0             	and    edx,0xfffffff0
c001b207:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b20a:	c3                   	ret    
c001b20b:	90                   	nop

c001b20c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b20c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b214:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b218:	f6 c2 01             	test   dl,0x1
c001b21b:	74 08                	je     c001b225 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b21d:	83 e2 fc             	and    edx,0xfffffffc
c001b220:	01 ca                	add    edx,ecx
c001b222:	66 ef                	out    dx,ax
c001b224:	c3                   	ret    
c001b225:	83 e2 f0             	and    edx,0xfffffff0
c001b228:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b22c:	c3                   	ret    
c001b22d:	90                   	nop

c001b22e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b22e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b236:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b23a:	f6 c2 01             	test   dl,0x1
c001b23d:	74 07                	je     c001b246 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b23f:	83 e2 fc             	and    edx,0xfffffffc
c001b242:	01 ca                	add    edx,ecx
c001b244:	ef                   	out    dx,eax
c001b245:	c3                   	ret    
c001b246:	83 e2 f0             	and    edx,0xfffffff0
c001b249:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b24c:	c3                   	ret    
c001b24d:	90                   	nop

c001b24e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b24e:	55                   	push   ebp
c001b24f:	57                   	push   edi
c001b250:	56                   	push   esi
c001b251:	53                   	push   ebx
c001b252:	83 ec 0c             	sub    esp,0xc
c001b255:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b25a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b25e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b262:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b266:	83 fe 07             	cmp    esi,0x7
c001b269:	76 10                	jbe    c001b27b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b26b:	83 ec 0c             	sub    esp,0xc
c001b26e:	68 8b 30 02 c0       	push   0xc002308b
c001b273:	e8 af 62 ff ff       	call   c0011527 <KePanic(char const*)>
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	0f b6 db             	movzx  ebx,bl
c001b27e:	83 fb 0f             	cmp    ebx,0xf
c001b281:	76 10                	jbe    c001b293 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b283:	83 ec 0c             	sub    esp,0xc
c001b286:	68 bb 30 02 c0       	push   0xc00230bb
c001b28b:	e8 97 62 ff ff       	call   c0011527 <KePanic(char const*)>
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	8d 04 36             	lea    eax,[esi+esi*1]
c001b296:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b29b:	83 c8 f0             	or     eax,0xfffffff0
c001b29e:	ee                   	out    dx,al
c001b29f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b2a4:	89 e8                	mov    eax,ebp
c001b2a6:	ee                   	out    dx,al
c001b2a7:	89 f9                	mov    ecx,edi
c001b2a9:	89 d8                	mov    eax,ebx
c001b2ab:	0f b6 d9             	movzx  ebx,cl
c001b2ae:	83 c4 0c             	add    esp,0xc
c001b2b1:	c1 e0 08             	shl    eax,0x8
c001b2b4:	83 e3 fc             	and    ebx,0xfffffffc
c001b2b7:	09 d8                	or     eax,ebx
c001b2b9:	5b                   	pop    ebx
c001b2ba:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b2bf:	5e                   	pop    esi
c001b2c0:	5f                   	pop    edi
c001b2c1:	5d                   	pop    ebp
c001b2c2:	c3                   	ret    
c001b2c3:	90                   	nop

c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2c4:	57                   	push   edi
c001b2c5:	56                   	push   esi
c001b2c6:	53                   	push   ebx
c001b2c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2d7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b2dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2e1:	83 ff 01             	cmp    edi,0x1
c001b2e4:	75 3f                	jne    c001b325 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b2e6:	89 de                	mov    esi,ebx
c001b2e8:	0f b6 c0             	movzx  eax,al
c001b2eb:	c1 e0 10             	shl    eax,0x10
c001b2ee:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b2f4:	0f b6 c9             	movzx  ecx,cl
c001b2f7:	09 f0                	or     eax,esi
c001b2f9:	c1 e1 08             	shl    ecx,0x8
c001b2fc:	0f b6 d2             	movzx  edx,dl
c001b2ff:	c1 e2 0b             	shl    edx,0xb
c001b302:	09 c8                	or     eax,ecx
c001b304:	09 d0                	or     eax,edx
c001b306:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b30b:	0d 00 00 00 80       	or     eax,0x80000000
c001b310:	ef                   	out    dx,eax
c001b311:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b316:	ed                   	in     eax,dx
c001b317:	83 e3 02             	and    ebx,0x2
c001b31a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b321:	d3 e8                	shr    eax,cl
c001b323:	eb 44                	jmp    c001b369 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b325:	83 ff 02             	cmp    edi,0x2
c001b328:	75 2d                	jne    c001b357 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b32a:	83 ec 0c             	sub    esp,0xc
c001b32d:	0f b6 fb             	movzx  edi,bl
c001b330:	57                   	push   edi
c001b331:	0f b6 c9             	movzx  ecx,cl
c001b334:	51                   	push   ecx
c001b335:	0f b6 d2             	movzx  edx,dl
c001b338:	52                   	push   edx
c001b339:	0f b6 c0             	movzx  eax,al
c001b33c:	50                   	push   eax
c001b33d:	56                   	push   esi
c001b33e:	e8 0b ff ff ff       	call   c001b24e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b343:	89 c2                	mov    edx,eax
c001b345:	ed                   	in     eax,dx
c001b346:	83 e3 02             	and    ebx,0x2
c001b349:	83 c4 20             	add    esp,0x20
c001b34c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b353:	d3 e8                	shr    eax,cl
c001b355:	eb 12                	jmp    c001b369 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b357:	83 ec 0c             	sub    esp,0xc
c001b35a:	68 eb 30 02 c0       	push   0xc00230eb
c001b35f:	e8 c3 61 ff ff       	call   c0011527 <KePanic(char const*)>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	31 c0                	xor    eax,eax
c001b369:	5b                   	pop    ebx
c001b36a:	5e                   	pop    esi
c001b36b:	5f                   	pop    edi
c001b36c:	c3                   	ret    
c001b36d:	90                   	nop

c001b36e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b36e:	83 ec 18             	sub    esp,0x18
c001b371:	6a 00                	push   0x0
c001b373:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b378:	50                   	push   eax
c001b379:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b37e:	50                   	push   eax
c001b37f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b384:	50                   	push   eax
c001b385:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b389:	e8 36 ff ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b38e:	83 c4 2c             	add    esp,0x2c
c001b391:	c3                   	ret    

c001b392 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b392:	83 ec 18             	sub    esp,0x18
c001b395:	6a 0e                	push   0xe
c001b397:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b39c:	50                   	push   eax
c001b39d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3a2:	50                   	push   eax
c001b3a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3a8:	50                   	push   eax
c001b3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3ad:	e8 12 ff ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3b2:	83 c4 2c             	add    esp,0x2c
c001b3b5:	0f b6 c0             	movzx  eax,al
c001b3b8:	c3                   	ret    
c001b3b9:	90                   	nop

c001b3ba <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b3ba:	55                   	push   ebp
c001b3bb:	57                   	push   edi
c001b3bc:	56                   	push   esi
c001b3bd:	53                   	push   ebx
c001b3be:	83 ec 18             	sub    esp,0x18
c001b3c1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b3c6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b3cb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b3d0:	6a 0a                	push   0xa
c001b3d2:	56                   	push   esi
c001b3d3:	55                   	push   ebp
c001b3d4:	57                   	push   edi
c001b3d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3d9:	e8 e6 fe ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3de:	83 c4 14             	add    esp,0x14
c001b3e1:	6a 0a                	push   0xa
c001b3e3:	56                   	push   esi
c001b3e4:	55                   	push   ebp
c001b3e5:	57                   	push   edi
c001b3e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3ea:	89 c3                	mov    ebx,eax
c001b3ec:	0f b6 db             	movzx  ebx,bl
c001b3ef:	e8 d0 fe ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3f4:	83 c4 2c             	add    esp,0x2c
c001b3f7:	25 00 ff 00 00       	and    eax,0xff00
c001b3fc:	09 d8                	or     eax,ebx
c001b3fe:	5b                   	pop    ebx
c001b3ff:	5e                   	pop    esi
c001b400:	5f                   	pop    edi
c001b401:	5d                   	pop    ebp
c001b402:	c3                   	ret    
c001b403:	90                   	nop

c001b404 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b404:	83 ec 18             	sub    esp,0x18
c001b407:	6a 08                	push   0x8
c001b409:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40e:	50                   	push   eax
c001b40f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b414:	50                   	push   eax
c001b415:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b41a:	50                   	push   eax
c001b41b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b41f:	e8 a0 fe ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b424:	83 c4 2c             	add    esp,0x2c
c001b427:	0f b6 c4             	movzx  eax,ah
c001b42a:	c3                   	ret    
c001b42b:	90                   	nop

c001b42c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b42c:	83 ec 18             	sub    esp,0x18
c001b42f:	6a 08                	push   0x8
c001b431:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b436:	50                   	push   eax
c001b437:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b43c:	50                   	push   eax
c001b43d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b442:	50                   	push   eax
c001b443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b447:	e8 78 fe ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b44c:	83 c4 2c             	add    esp,0x2c
c001b44f:	c3                   	ret    

c001b450 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b450:	83 ec 18             	sub    esp,0x18
c001b453:	6a 3c                	push   0x3c
c001b455:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b45a:	50                   	push   eax
c001b45b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b460:	50                   	push   eax
c001b461:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b466:	50                   	push   eax
c001b467:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b46b:	e8 54 fe ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b470:	83 c4 2c             	add    esp,0x2c
c001b473:	c3                   	ret    

c001b474 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b474:	83 ec 18             	sub    esp,0x18
c001b477:	6a 18                	push   0x18
c001b479:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47e:	50                   	push   eax
c001b47f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b484:	50                   	push   eax
c001b485:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b48a:	50                   	push   eax
c001b48b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48f:	e8 30 fe ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b494:	83 c4 2c             	add    esp,0x2c
c001b497:	0f b6 c4             	movzx  eax,ah
c001b49a:	c3                   	ret    
c001b49b:	90                   	nop

c001b49c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b49c:	55                   	push   ebp
c001b49d:	57                   	push   edi
c001b49e:	56                   	push   esi
c001b49f:	53                   	push   ebx
c001b4a0:	83 ec 28             	sub    esp,0x28
c001b4a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b4a7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b4ac:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b4b1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b4b6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b4bd:	8d 43 12             	lea    eax,[ebx+0x12]
c001b4c0:	83 c3 10             	add    ebx,0x10
c001b4c3:	0f b6 c0             	movzx  eax,al
c001b4c6:	0f b6 db             	movzx  ebx,bl
c001b4c9:	50                   	push   eax
c001b4ca:	51                   	push   ecx
c001b4cb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b4cf:	57                   	push   edi
c001b4d0:	55                   	push   ebp
c001b4d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4d5:	e8 ea fd ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4da:	83 c4 14             	add    esp,0x14
c001b4dd:	53                   	push   ebx
c001b4de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b4e2:	51                   	push   ecx
c001b4e3:	89 c6                	mov    esi,eax
c001b4e5:	57                   	push   edi
c001b4e6:	55                   	push   ebp
c001b4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4eb:	c1 e6 10             	shl    esi,0x10
c001b4ee:	e8 d1 fd ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4f3:	83 c4 3c             	add    esp,0x3c
c001b4f6:	5b                   	pop    ebx
c001b4f7:	0f b7 c0             	movzx  eax,ax
c001b4fa:	09 f0                	or     eax,esi
c001b4fc:	5e                   	pop    esi
c001b4fd:	5f                   	pop    edi
c001b4fe:	5d                   	pop    ebp
c001b4ff:	c3                   	ret    

c001b500 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b500:	55                   	push   ebp
c001b501:	57                   	push   edi
c001b502:	56                   	push   esi
c001b503:	53                   	push   ebx
c001b504:	83 ec 0c             	sub    esp,0xc
c001b507:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b50b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b50f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b513:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b517:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b51d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b521:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b525:	83 f9 01             	cmp    ecx,0x1
c001b528:	75 5d                	jne    c001b587 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b52a:	0f b6 c8             	movzx  ecx,al
c001b52d:	89 f0                	mov    eax,esi
c001b52f:	25 fc 00 00 00       	and    eax,0xfc
c001b534:	0f b6 d2             	movzx  edx,dl
c001b537:	c1 e1 10             	shl    ecx,0x10
c001b53a:	c1 e2 0b             	shl    edx,0xb
c001b53d:	09 c1                	or     ecx,eax
c001b53f:	89 f8                	mov    eax,edi
c001b541:	0f b6 f8             	movzx  edi,al
c001b544:	c1 e7 08             	shl    edi,0x8
c001b547:	09 f9                	or     ecx,edi
c001b549:	09 d1                	or     ecx,edx
c001b54b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b550:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b556:	89 c8                	mov    eax,ecx
c001b558:	ef                   	out    dx,eax
c001b559:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b55e:	ed                   	in     eax,dx
c001b55f:	83 e6 02             	and    esi,0x2
c001b562:	0f b7 db             	movzx  ebx,bx
c001b565:	74 0a                	je     c001b571 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b567:	c1 e3 10             	shl    ebx,0x10
c001b56a:	0f b7 d0             	movzx  edx,ax
c001b56d:	09 d3                	or     ebx,edx
c001b56f:	eb 05                	jmp    c001b576 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b571:	66 31 c0             	xor    ax,ax
c001b574:	09 c3                	or     ebx,eax
c001b576:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b57b:	89 c8                	mov    eax,ecx
c001b57d:	ef                   	out    dx,eax
c001b57e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b583:	89 d8                	mov    eax,ebx
c001b585:	eb 41                	jmp    c001b5c8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b587:	83 f9 02             	cmp    ecx,0x2
c001b58a:	75 45                	jne    c001b5d1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b58c:	89 f1                	mov    ecx,esi
c001b58e:	83 ec 0c             	sub    esp,0xc
c001b591:	0f b6 f1             	movzx  esi,cl
c001b594:	89 f9                	mov    ecx,edi
c001b596:	56                   	push   esi
c001b597:	0f b6 f9             	movzx  edi,cl
c001b59a:	57                   	push   edi
c001b59b:	0f b6 d2             	movzx  edx,dl
c001b59e:	52                   	push   edx
c001b59f:	0f b6 c0             	movzx  eax,al
c001b5a2:	50                   	push   eax
c001b5a3:	55                   	push   ebp
c001b5a4:	e8 a5 fc ff ff       	call   c001b24e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a9:	89 c2                	mov    edx,eax
c001b5ab:	ed                   	in     eax,dx
c001b5ac:	83 c4 20             	add    esp,0x20
c001b5af:	f6 c2 02             	test   dl,0x2
c001b5b2:	0f b7 db             	movzx  ebx,bx
c001b5b5:	74 0c                	je     c001b5c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b5b7:	0f b7 c8             	movzx  ecx,ax
c001b5ba:	89 d8                	mov    eax,ebx
c001b5bc:	c1 e0 10             	shl    eax,0x10
c001b5bf:	09 c8                	or     eax,ecx
c001b5c1:	eb 05                	jmp    c001b5c8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b5c3:	66 31 c0             	xor    ax,ax
c001b5c6:	09 d8                	or     eax,ebx
c001b5c8:	ef                   	out    dx,eax
c001b5c9:	83 c4 0c             	add    esp,0xc
c001b5cc:	5b                   	pop    ebx
c001b5cd:	5e                   	pop    esi
c001b5ce:	5f                   	pop    edi
c001b5cf:	5d                   	pop    ebp
c001b5d0:	c3                   	ret    
c001b5d1:	c7 44 24 20 eb 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc00230eb
c001b5d9:	83 c4 0c             	add    esp,0xc
c001b5dc:	5b                   	pop    ebx
c001b5dd:	5e                   	pop    esi
c001b5de:	5f                   	pop    edi
c001b5df:	5d                   	pop    ebp
c001b5e0:	e9 42 5f ff ff       	jmp    c0011527 <KePanic(char const*)>
c001b5e5:	90                   	nop

c001b5e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b5e6:	55                   	push   ebp
c001b5e7:	57                   	push   edi
c001b5e8:	56                   	push   esi
c001b5e9:	53                   	push   ebx
c001b5ea:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b5f0:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b5f7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b5fe:	0f 85 bd 00 00 00    	jne    c001b6c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b604:	83 ec 0c             	sub    esp,0xc
c001b607:	68 14 01 00 00       	push   0x114
c001b60c:	e8 c2 c4 fe ff       	call   c0007ad3 <malloc>
c001b611:	83 c4 0c             	add    esp,0xc
c001b614:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b61a:	68 f1 30 02 c0       	push   0xc00230f1
c001b61f:	50                   	push   eax
c001b620:	89 c3                	mov    ebx,eax
c001b622:	e8 bb 04 ff ff       	call   c000bae2 <File::File(char const*, Process*)>
c001b627:	83 c4 10             	add    esp,0x10
c001b62a:	85 db                	test   ebx,ebx
c001b62c:	0f 84 6b 02 00 00    	je     c001b89d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b632:	57                   	push   edi
c001b633:	57                   	push   edi
c001b634:	6a 01                	push   0x1
c001b636:	53                   	push   ebx
c001b637:	e8 c4 04 ff ff       	call   c000bb00 <File::open(FileOpenMode)>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	85 c0                	test   eax,eax
c001b641:	0f 85 56 02 00 00    	jne    c001b89d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b647:	52                   	push   edx
c001b648:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b64c:	50                   	push   eax
c001b64d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b651:	50                   	push   eax
c001b652:	53                   	push   ebx
c001b653:	e8 aa 07 ff ff       	call   c000be02 <File::stat(unsigned long long*, bool*)>
c001b658:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b65c:	40                   	inc    eax
c001b65d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b660:	e8 6e c4 fe ff       	call   c0007ad3 <malloc>
c001b665:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b669:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b66d:	59                   	pop    ecx
c001b66e:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b673:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b675:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b679:	51                   	push   ecx
c001b67a:	50                   	push   eax
c001b67b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b67f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b683:	53                   	push   ebx
c001b684:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b687:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b68b:	83 c4 20             	add    esp,0x20
c001b68e:	89 c8                	mov    eax,ecx
c001b690:	99                   	cdq    
c001b691:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b695:	0f 85 02 02 00 00    	jne    c001b89d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b69b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b69f:	0f 85 f8 01 00 00    	jne    c001b89d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6a5:	83 ec 0c             	sub    esp,0xc
c001b6a8:	53                   	push   ebx
c001b6a9:	e8 b0 04 ff ff       	call   c000bb5e <File::close()>
c001b6ae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6b2:	83 c4 10             	add    esp,0x10
c001b6b5:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b6bc:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b6c1:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b6c9:	31 c9                	xor    ecx,ecx
c001b6cb:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b6d2:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b6d8:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b6df:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b6e5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b6ea:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b6f2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b6f7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b703:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b70b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b70f:	39 cd                	cmp    ebp,ecx
c001b711:	0f 8e 86 01 00 00    	jle    c001b89d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b717:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b71a:	d4 40                	aam    0x40
c001b71c:	d5 39                	aad    0x39
c001b71e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b722:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b726:	d4 40                	aam    0x40
c001b728:	d5 39                	aad    0x39
c001b72a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b72e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b732:	d4 40                	aam    0x40
c001b734:	d5 39                	aad    0x39
c001b736:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b73a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b73e:	d4 40                	aam    0x40
c001b740:	d5 39                	aad    0x39
c001b742:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b746:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b74a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b74e:	3c 56                	cmp    al,0x56
c001b750:	74 47                	je     c001b799 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b752:	d4 40                	aam    0x40
c001b754:	d5 39                	aad    0x39
c001b756:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b759:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b75d:	0f b6 db             	movzx  ebx,bl
c001b760:	c1 e3 04             	shl    ebx,0x4
c001b763:	d4 40                	aam    0x40
c001b765:	d5 39                	aad    0x39
c001b767:	83 e8 30             	sub    eax,0x30
c001b76a:	0f b6 c0             	movzx  eax,al
c001b76d:	09 c3                	or     ebx,eax
c001b76f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b773:	c1 e3 04             	shl    ebx,0x4
c001b776:	d4 40                	aam    0x40
c001b778:	d5 39                	aad    0x39
c001b77a:	83 e8 30             	sub    eax,0x30
c001b77d:	0f b6 c0             	movzx  eax,al
c001b780:	09 c3                	or     ebx,eax
c001b782:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b786:	c1 e3 04             	shl    ebx,0x4
c001b789:	d4 40                	aam    0x40
c001b78b:	d5 39                	aad    0x39
c001b78d:	83 e8 30             	sub    eax,0x30
c001b790:	0f b6 c0             	movzx  eax,al
c001b793:	09 c3                	or     ebx,eax
c001b795:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b799:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b79d:	80 fb 58             	cmp    bl,0x58
c001b7a0:	74 49                	je     c001b7eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b7a2:	88 d8                	mov    al,bl
c001b7a4:	d4 40                	aam    0x40
c001b7a6:	d5 39                	aad    0x39
c001b7a8:	83 e8 30             	sub    eax,0x30
c001b7ab:	0f b6 f8             	movzx  edi,al
c001b7ae:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b7b2:	c1 e7 04             	shl    edi,0x4
c001b7b5:	d4 40                	aam    0x40
c001b7b7:	d5 39                	aad    0x39
c001b7b9:	83 e8 30             	sub    eax,0x30
c001b7bc:	0f b6 c0             	movzx  eax,al
c001b7bf:	09 c7                	or     edi,eax
c001b7c1:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b7c5:	c1 e7 04             	shl    edi,0x4
c001b7c8:	d4 40                	aam    0x40
c001b7ca:	d5 39                	aad    0x39
c001b7cc:	83 e8 30             	sub    eax,0x30
c001b7cf:	0f b6 c0             	movzx  eax,al
c001b7d2:	09 c7                	or     edi,eax
c001b7d4:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b7d8:	c1 e7 04             	shl    edi,0x4
c001b7db:	d4 40                	aam    0x40
c001b7dd:	d5 39                	aad    0x39
c001b7df:	83 e8 30             	sub    eax,0x30
c001b7e2:	0f b6 c0             	movzx  eax,al
c001b7e5:	09 c7                	or     edi,eax
c001b7e7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b7eb:	8d 41 10             	lea    eax,[ecx+0x10]
c001b7ee:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b7f2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b7f6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b7fa:	83 f9 0a             	cmp    ecx,0xa
c001b7fd:	74 07                	je     c001b806 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b7ff:	47                   	inc    edi
c001b800:	39 c5                	cmp    ebp,eax
c001b802:	75 16                	jne    c001b81a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b804:	89 e8                	mov    eax,ebp
c001b806:	83 f9 0a             	cmp    ecx,0xa
c001b809:	0f 94 c1             	sete   cl
c001b80c:	0f b6 c9             	movzx  ecx,cl
c001b80f:	01 c1                	add    ecx,eax
c001b811:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b816:	75 0f                	jne    c001b827 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b818:	eb 1c                	jmp    c001b836 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b81a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b81d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b821:	40                   	inc    eax
c001b822:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b825:	eb cb                	jmp    c001b7f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b827:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b82b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b830:	0f 85 d9 fe ff ff    	jne    c001b70f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b836:	80 fb 58             	cmp    bl,0x58
c001b839:	74 10                	je     c001b84b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b83b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b840:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b845:	0f 85 c4 fe ff ff    	jne    c001b70f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b84b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b84f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b853:	83 e8 30             	sub    eax,0x30
c001b856:	c1 e0 04             	shl    eax,0x4
c001b859:	83 eb 30             	sub    ebx,0x30
c001b85c:	09 d8                	or     eax,ebx
c001b85e:	0f b6 c0             	movzx  eax,al
c001b861:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b865:	0f 85 a4 fe ff ff    	jne    c001b70f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b86f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b873:	83 e8 30             	sub    eax,0x30
c001b876:	c1 e0 04             	shl    eax,0x4
c001b879:	83 eb 30             	sub    ebx,0x30
c001b87c:	09 d8                	or     eax,ebx
c001b87e:	0f b6 c0             	movzx  eax,al
c001b881:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b885:	0f 85 84 fe ff ff    	jne    c001b70f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b88b:	50                   	push   eax
c001b88c:	50                   	push   eax
c001b88d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b891:	50                   	push   eax
c001b892:	56                   	push   esi
c001b893:	e8 b8 4d fe ff       	call   c0000650 <strcpy>
c001b898:	83 c4 10             	add    esp,0x10
c001b89b:	eb 05                	jmp    c001b8a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b89d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8a0:	31 f6                	xor    esi,esi
c001b8a2:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b8a8:	89 f0                	mov    eax,esi
c001b8aa:	5b                   	pop    ebx
c001b8ab:	5e                   	pop    esi
c001b8ac:	5f                   	pop    edi
c001b8ad:	5d                   	pop    ebp
c001b8ae:	c3                   	ret    
c001b8af:	90                   	nop

c001b8b0 <PCI::checkBus(unsigned char)>:
c001b8b0:	56                   	push   esi
c001b8b1:	53                   	push   ebx
c001b8b2:	31 db                	xor    ebx,ebx
c001b8b4:	51                   	push   ecx
c001b8b5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b8ba:	52                   	push   edx
c001b8bb:	53                   	push   ebx
c001b8bc:	43                   	inc    ebx
c001b8bd:	56                   	push   esi
c001b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8c2:	e8 0f 03 00 00       	call   c001bbd6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	83 fb 20             	cmp    ebx,0x20
c001b8cd:	75 eb                	jne    c001b8ba <PCI::checkBus(unsigned char)+0xa>
c001b8cf:	58                   	pop    eax
c001b8d0:	5b                   	pop    ebx
c001b8d1:	5e                   	pop    esi
c001b8d2:	c3                   	ret    
c001b8d3:	90                   	nop

c001b8d4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b8d4:	55                   	push   ebp
c001b8d5:	57                   	push   edi
c001b8d6:	56                   	push   esi
c001b8d7:	53                   	push   ebx
c001b8d8:	83 ec 1c             	sub    esp,0x1c
c001b8db:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b8e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b8e4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8e9:	0f 84 63 01 00 00    	je     c001ba52 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b8ef:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b8f4:	66 3d 06 04          	cmp    ax,0x406
c001b8f8:	75 2c                	jne    c001b926 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b8fa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b8ff:	50                   	push   eax
c001b900:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b905:	50                   	push   eax
c001b906:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b90b:	50                   	push   eax
c001b90c:	53                   	push   ebx
c001b90d:	e8 62 fb ff ff       	call   c001b474 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b912:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b916:	0f b6 c0             	movzx  eax,al
c001b919:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b91d:	83 c4 2c             	add    esp,0x2c
c001b920:	5b                   	pop    ebx
c001b921:	5e                   	pop    esi
c001b922:	5f                   	pop    edi
c001b923:	5d                   	pop    ebp
c001b924:	eb 8a                	jmp    c001b8b0 <PCI::checkBus(unsigned char)>
c001b926:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b92b:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b931:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b935:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b939:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b93d:	85 d2                	test   edx,edx
c001b93f:	74 34                	je     c001b975 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b941:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b944:	85 c9                	test   ecx,ecx
c001b946:	74 29                	je     c001b971 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b948:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b94e:	31 f5                	xor    ebp,esi
c001b950:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b956:	75 19                	jne    c001b971 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b958:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b95e:	75 11                	jne    c001b971 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b960:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b967:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b96b:	0f 84 e1 00 00 00    	je     c001ba52 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b971:	8b 12                	mov    edx,DWORD PTR [edx]
c001b973:	eb c8                	jmp    c001b93d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b975:	3d 01 06 00 00       	cmp    eax,0x601
c001b97a:	75 19                	jne    c001b995 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b97c:	83 ec 0c             	sub    esp,0xc
c001b97f:	68 64 01 00 00       	push   0x164
c001b984:	e8 4a c1 fe ff       	call   c0007ad3 <malloc>
c001b989:	89 04 24             	mov    DWORD PTR [esp],eax
c001b98c:	89 c5                	mov    ebp,eax
c001b98e:	e8 ab 0e 00 00       	call   c001c83e <SATABus::SATABus()>
c001b993:	eb 1e                	jmp    c001b9b3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b995:	3d 01 01 00 00       	cmp    eax,0x101
c001b99a:	75 62                	jne    c001b9fe <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	68 70 02 00 00       	push   0x270
c001b9a4:	e8 2a c1 fe ff       	call   c0007ad3 <malloc>
c001b9a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9ac:	89 c5                	mov    ebp,eax
c001b9ae:	e8 f3 02 00 00       	call   c001bca6 <IDE::IDE()>
c001b9b3:	58                   	pop    eax
c001b9b4:	5a                   	pop    edx
c001b9b5:	55                   	push   ebp
c001b9b6:	53                   	push   ebx
c001b9b7:	e8 a4 0f ff ff       	call   c000c960 <Device::addChild(Device*)>
c001b9bc:	83 ec 1c             	sub    esp,0x1c
c001b9bf:	b9 09 00 00 00       	mov    ecx,0x9
c001b9c4:	fc                   	cld    
c001b9c5:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b9c9:	89 e7                	mov    edi,esp
c001b9cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b9cd:	55                   	push   ebp
c001b9ce:	e8 d3 0e ff ff       	call   c000c8a6 <Device::preOpenPCI(PCIDeviceInfo)>
c001b9d3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b9d6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b9da:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b9e2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b9ea:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b9f2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b9f5:	83 c4 4c             	add    esp,0x4c
c001b9f8:	5b                   	pop    ebx
c001b9f9:	5e                   	pop    esi
c001b9fa:	5f                   	pop    edi
c001b9fb:	5d                   	pop    ebp
c001b9fc:	ff e0                	jmp    eax
c001b9fe:	83 ec 0c             	sub    esp,0xc
c001ba01:	68 58 01 00 00       	push   0x158
c001ba06:	e8 c8 c0 fe ff       	call   c0007ad3 <malloc>
c001ba0b:	5a                   	pop    edx
c001ba0c:	59                   	pop    ecx
c001ba0d:	68 0a 31 02 c0       	push   0xc002310a
c001ba12:	50                   	push   eax
c001ba13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba17:	e8 e2 11 ff ff       	call   c000cbfe <DriverlessDevice::DriverlessDevice(char const*)>
c001ba1c:	5e                   	pop    esi
c001ba1d:	5f                   	pop    edi
c001ba1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba22:	50                   	push   eax
c001ba23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba27:	53                   	push   ebx
c001ba28:	e8 33 0f ff ff       	call   c000c960 <Device::addChild(Device*)>
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	b9 09 00 00 00       	mov    ecx,0x9
c001ba35:	fc                   	cld    
c001ba36:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba3a:	89 fe                	mov    esi,edi
c001ba3c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba46:	83 c4 1c             	add    esp,0x1c
c001ba49:	5b                   	pop    ebx
c001ba4a:	5e                   	pop    esi
c001ba4b:	5f                   	pop    edi
c001ba4c:	5d                   	pop    ebp
c001ba4d:	e9 54 0e ff ff       	jmp    c000c8a6 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba52:	83 c4 1c             	add    esp,0x1c
c001ba55:	5b                   	pop    ebx
c001ba56:	5e                   	pop    esi
c001ba57:	5f                   	pop    edi
c001ba58:	5d                   	pop    ebp
c001ba59:	c3                   	ret    

c001ba5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ba5a:	55                   	push   ebp
c001ba5b:	57                   	push   edi
c001ba5c:	56                   	push   esi
c001ba5d:	53                   	push   ebx
c001ba5e:	83 ec 68             	sub    esp,0x68
c001ba61:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ba68:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ba6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba70:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ba77:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ba7c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ba80:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ba87:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ba8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba90:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ba95:	6a 0c                	push   0xc
c001ba97:	57                   	push   edi
c001ba98:	53                   	push   ebx
c001ba99:	56                   	push   esi
c001ba9a:	55                   	push   ebp
c001ba9b:	e8 24 f8 ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001baa0:	83 c4 20             	add    esp,0x20
c001baa3:	57                   	push   edi
c001baa4:	53                   	push   ebx
c001baa5:	56                   	push   esi
c001baa6:	55                   	push   ebp
c001baa7:	e8 0e f9 ff ff       	call   c001b3ba <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001baac:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bab1:	57                   	push   edi
c001bab2:	53                   	push   ebx
c001bab3:	56                   	push   esi
c001bab4:	55                   	push   ebp
c001bab5:	e8 96 f9 ff ff       	call   c001b450 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001baba:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001babe:	83 c4 14             	add    esp,0x14
c001bac1:	6a 3c                	push   0x3c
c001bac3:	57                   	push   edi
c001bac4:	53                   	push   ebx
c001bac5:	56                   	push   esi
c001bac6:	55                   	push   ebp
c001bac7:	e8 f8 f7 ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bacc:	0f b6 c4             	movzx  eax,ah
c001bacf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bad3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bad7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001badb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bae0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bae6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001baec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001baf0:	83 c4 20             	add    esp,0x20
c001baf3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001baf8:	74 30                	je     c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bafa:	31 c0                	xor    eax,eax
c001bafc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb00:	7e 28                	jle    c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb02:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb0a:	39 cb                	cmp    ebx,ecx
c001bb0c:	75 19                	jne    c001bb27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb0e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb16:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb1a:	75 0b                	jne    c001bb27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb1c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb23:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb27:	40                   	inc    eax
c001bb28:	eb d2                	jmp    c001bafc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb2a:	31 d2                	xor    edx,edx
c001bb2c:	83 ec 0c             	sub    esp,0xc
c001bb2f:	57                   	push   edi
c001bb30:	53                   	push   ebx
c001bb31:	56                   	push   esi
c001bb32:	52                   	push   edx
c001bb33:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb37:	55                   	push   ebp
c001bb38:	e8 5f f9 ff ff       	call   c001b49c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb41:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb45:	42                   	inc    edx
c001bb46:	83 c4 20             	add    esp,0x20
c001bb49:	83 fa 06             	cmp    edx,0x6
c001bb4c:	75 de                	jne    c001bb2c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bb4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb52:	83 ec 0c             	sub    esp,0xc
c001bb55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb59:	c1 e2 08             	shl    edx,0x8
c001bb5c:	0f b6 c4             	movzx  eax,ah
c001bb5f:	09 d0                	or     eax,edx
c001bb61:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bb66:	6a 02                	push   0x2
c001bb68:	57                   	push   edi
c001bb69:	53                   	push   ebx
c001bb6a:	56                   	push   esi
c001bb6b:	55                   	push   ebp
c001bb6c:	e8 53 f7 ff ff       	call   c001b2c4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb71:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bb76:	83 c4 20             	add    esp,0x20
c001bb79:	57                   	push   edi
c001bb7a:	53                   	push   ebx
c001bb7b:	56                   	push   esi
c001bb7c:	55                   	push   ebp
c001bb7d:	e8 82 f8 ff ff       	call   c001b404 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bb82:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bb86:	57                   	push   edi
c001bb87:	53                   	push   ebx
c001bb88:	56                   	push   esi
c001bb89:	55                   	push   ebp
c001bb8a:	e8 df f7 ff ff       	call   c001b36e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb8f:	b9 09 00 00 00       	mov    ecx,0x9
c001bb94:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bb99:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bb9d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bba1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bba5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bba9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bbad:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bbb1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bbb5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bbb9:	83 ec 0c             	sub    esp,0xc
c001bbbc:	fc                   	cld    
c001bbbd:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bbc1:	89 e7                	mov    edi,esp
c001bbc3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbc5:	55                   	push   ebp
c001bbc6:	e8 09 fd ff ff       	call   c001b8d4 <PCI::foundDevice(PCIDeviceInfo)>
c001bbcb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bbd1:	5b                   	pop    ebx
c001bbd2:	5e                   	pop    esi
c001bbd3:	5f                   	pop    edi
c001bbd4:	5d                   	pop    ebp
c001bbd5:	c3                   	ret    

c001bbd6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bbd6:	55                   	push   ebp
c001bbd7:	57                   	push   edi
c001bbd8:	56                   	push   esi
c001bbd9:	53                   	push   ebx
c001bbda:	83 ec 0c             	sub    esp,0xc
c001bbdd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bbe2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bbe7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bbeb:	6a 00                	push   0x0
c001bbed:	56                   	push   esi
c001bbee:	57                   	push   edi
c001bbef:	55                   	push   ebp
c001bbf0:	e8 79 f7 ff ff       	call   c001b36e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbf5:	6a 00                	push   0x0
c001bbf7:	56                   	push   esi
c001bbf8:	57                   	push   edi
c001bbf9:	55                   	push   ebp
c001bbfa:	e8 5b fe ff ff       	call   c001ba5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bbff:	83 c4 20             	add    esp,0x20
c001bc02:	6a 00                	push   0x0
c001bc04:	56                   	push   esi
c001bc05:	57                   	push   edi
c001bc06:	55                   	push   ebp
c001bc07:	e8 86 f7 ff ff       	call   c001b392 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc0c:	83 c4 10             	add    esp,0x10
c001bc0f:	a8 80                	test   al,0x80
c001bc11:	74 2d                	je     c001bc40 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc13:	bb 01 00 00 00       	mov    ebx,0x1
c001bc18:	53                   	push   ebx
c001bc19:	56                   	push   esi
c001bc1a:	57                   	push   edi
c001bc1b:	55                   	push   ebp
c001bc1c:	e8 4d f7 ff ff       	call   c001b36e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	0f b7 c0             	movzx  eax,ax
c001bc27:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc2c:	74 0c                	je     c001bc3a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc2e:	53                   	push   ebx
c001bc2f:	56                   	push   esi
c001bc30:	57                   	push   edi
c001bc31:	55                   	push   ebp
c001bc32:	e8 23 fe ff ff       	call   c001ba5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc37:	83 c4 10             	add    esp,0x10
c001bc3a:	43                   	inc    ebx
c001bc3b:	83 fb 08             	cmp    ebx,0x8
c001bc3e:	75 d8                	jne    c001bc18 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc40:	83 c4 0c             	add    esp,0xc
c001bc43:	5b                   	pop    ebx
c001bc44:	5e                   	pop    esi
c001bc45:	5f                   	pop    edi
c001bc46:	5d                   	pop    ebp
c001bc47:	c3                   	ret    

c001bc48 <PCI::detect()>:
c001bc48:	56                   	push   esi
c001bc49:	53                   	push   ebx
c001bc4a:	53                   	push   ebx
c001bc4b:	31 db                	xor    ebx,ebx
c001bc4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc51:	6a 00                	push   0x0
c001bc53:	6a 00                	push   0x0
c001bc55:	6a 00                	push   0x0
c001bc57:	56                   	push   esi
c001bc58:	e8 35 f7 ff ff       	call   c001b392 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc5d:	83 c4 10             	add    esp,0x10
c001bc60:	a8 80                	test   al,0x80
c001bc62:	75 21                	jne    c001bc85 <PCI::detect()+0x3d>
c001bc64:	51                   	push   ecx
c001bc65:	51                   	push   ecx
c001bc66:	6a 00                	push   0x0
c001bc68:	56                   	push   esi
c001bc69:	e8 42 fc ff ff       	call   c001b8b0 <PCI::checkBus(unsigned char)>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	eb 2a                	jmp    c001bc9d <PCI::detect()+0x55>
c001bc73:	52                   	push   edx
c001bc74:	52                   	push   edx
c001bc75:	53                   	push   ebx
c001bc76:	43                   	inc    ebx
c001bc77:	56                   	push   esi
c001bc78:	e8 33 fc ff ff       	call   c001b8b0 <PCI::checkBus(unsigned char)>
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	83 fb 08             	cmp    ebx,0x8
c001bc83:	74 18                	je     c001bc9d <PCI::detect()+0x55>
c001bc85:	53                   	push   ebx
c001bc86:	6a 00                	push   0x0
c001bc88:	6a 00                	push   0x0
c001bc8a:	56                   	push   esi
c001bc8b:	e8 de f6 ff ff       	call   c001b36e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	0f b7 c0             	movzx  eax,ax
c001bc96:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc9b:	74 d6                	je     c001bc73 <PCI::detect()+0x2b>
c001bc9d:	58                   	pop    eax
c001bc9e:	5b                   	pop    ebx
c001bc9f:	5e                   	pop    esi
c001bca0:	c3                   	ret    
c001bca1:	90                   	nop

c001bca2 <IDE::close(int, int, void*)>:
c001bca2:	83 c8 ff             	or     eax,0xffffffff
c001bca5:	c3                   	ret    

c001bca6 <IDE::IDE()>:
c001bca6:	83 ec 0c             	sub    esp,0xc
c001bca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcad:	83 ec 08             	sub    esp,0x8
c001bcb0:	68 50 31 02 c0       	push   0xc0023150
c001bcb5:	50                   	push   eax
c001bcb6:	e8 e9 0f ff ff       	call   c000cca4 <HardDiskController::HardDiskController(char const*)>
c001bcbb:	83 c4 10             	add    esp,0x10
c001bcbe:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c001bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc7:	89 10                	mov    DWORD PTR [eax],edx
c001bcc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bccd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bcd4:	90                   	nop
c001bcd5:	83 c4 0c             	add    esp,0xc
c001bcd8:	c3                   	ret    
c001bcd9:	90                   	nop

c001bcda <IDE::prepareInterrupt(unsigned char)>:
c001bcda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bcdf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bce3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bceb:	c3                   	ret    

c001bcec <selectDrive(unsigned char, unsigned char)>:
c001bcec:	c3                   	ret    
c001bced:	90                   	nop

c001bcee <IDE::getBase(unsigned char)>:
c001bcee:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bcf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcf7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bcff:	c3                   	ret    

c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd00:	55                   	push   ebp
c001bd01:	57                   	push   edi
c001bd02:	56                   	push   esi
c001bd03:	53                   	push   ebx
c001bd04:	83 ec 1c             	sub    esp,0x1c
c001bd07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bd0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd17:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd1a:	80 f9 03             	cmp    cl,0x3
c001bd1d:	77 4f                	ja     c001bd6e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd23:	0f b6 f2             	movzx  esi,dl
c001bd26:	0f b6 db             	movzx  ebx,bl
c001bd29:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bd2c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd31:	80 ca 80             	or     dl,0x80
c001bd34:	52                   	push   edx
c001bd35:	6a 0c                	push   0xc
c001bd37:	56                   	push   esi
c001bd38:	57                   	push   edi
c001bd39:	e8 c2 ff ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd3e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bd43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd47:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd4b:	ee                   	out    dx,al
c001bd4c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bd51:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bd55:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bd59:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bd61:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bd65:	83 c4 2c             	add    esp,0x2c
c001bd68:	5b                   	pop    ebx
c001bd69:	5e                   	pop    esi
c001bd6a:	5f                   	pop    edi
c001bd6b:	5d                   	pop    ebp
c001bd6c:	eb 92                	jmp    c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd6e:	0f b6 cb             	movzx  ecx,bl
c001bd71:	83 f9 07             	cmp    ecx,0x7
c001bd74:	77 12                	ja     c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bd76:	0f b6 d2             	movzx  edx,dl
c001bd79:	0f b6 db             	movzx  ebx,bl
c001bd7c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bd84:	01 da                	add    edx,ebx
c001bd86:	eb 2f                	jmp    c001bdb7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bd88:	83 f9 0d             	cmp    ecx,0xd
c001bd8b:	77 13                	ja     c001bda0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bd8d:	0f b6 d2             	movzx  edx,dl
c001bd90:	0f b6 db             	movzx  ebx,bl
c001bd93:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bd9a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bd9e:	eb 17                	jmp    c001bdb7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bda0:	83 f9 15             	cmp    ecx,0x15
c001bda3:	77 13                	ja     c001bdb8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bda5:	0f b6 d2             	movzx  edx,dl
c001bda8:	0f b6 db             	movzx  ebx,bl
c001bdab:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bdb3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bdb7:	ee                   	out    dx,al
c001bdb8:	83 c4 1c             	add    esp,0x1c
c001bdbb:	5b                   	pop    ebx
c001bdbc:	5e                   	pop    esi
c001bdbd:	5f                   	pop    edi
c001bdbe:	5d                   	pop    ebp
c001bdbf:	c3                   	ret    

c001bdc0 <IDE::read(unsigned char, unsigned char)>:
c001bdc0:	57                   	push   edi
c001bdc1:	56                   	push   esi
c001bdc2:	53                   	push   ebx
c001bdc3:	83 ec 10             	sub    esp,0x10
c001bdc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bdca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bdd2:	8d 42 f8             	lea    eax,[edx-0x8]
c001bdd5:	3c 03                	cmp    al,0x3
c001bdd7:	77 48                	ja     c001be21 <IDE::read(unsigned char, unsigned char)+0x61>
c001bdd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bddd:	0f b6 f1             	movzx  esi,cl
c001bde0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bde3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bde8:	0c 80                	or     al,0x80
c001bdea:	50                   	push   eax
c001bdeb:	6a 0c                	push   0xc
c001bded:	56                   	push   esi
c001bdee:	53                   	push   ebx
c001bdef:	e8 0c ff ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdf8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bdfd:	0f b6 d2             	movzx  edx,dl
c001be00:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be04:	ec                   	in     al,dx
c001be05:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001be09:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001be0e:	52                   	push   edx
c001be0f:	6a 0c                	push   0xc
c001be11:	56                   	push   esi
c001be12:	53                   	push   ebx
c001be13:	e8 e8 fe ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be18:	83 c4 20             	add    esp,0x20
c001be1b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001be1f:	eb 4c                	jmp    c001be6d <IDE::read(unsigned char, unsigned char)+0xad>
c001be21:	0f b6 f2             	movzx  esi,dl
c001be24:	83 fe 07             	cmp    esi,0x7
c001be27:	77 12                	ja     c001be3b <IDE::read(unsigned char, unsigned char)+0x7b>
c001be29:	0f b6 c9             	movzx  ecx,cl
c001be2c:	0f b6 d2             	movzx  edx,dl
c001be2f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001be37:	01 c2                	add    edx,eax
c001be39:	eb 31                	jmp    c001be6c <IDE::read(unsigned char, unsigned char)+0xac>
c001be3b:	83 fe 0d             	cmp    esi,0xd
c001be3e:	77 13                	ja     c001be53 <IDE::read(unsigned char, unsigned char)+0x93>
c001be40:	0f b6 c9             	movzx  ecx,cl
c001be43:	0f b6 d2             	movzx  edx,dl
c001be46:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001be4d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be51:	eb 19                	jmp    c001be6c <IDE::read(unsigned char, unsigned char)+0xac>
c001be53:	31 c0                	xor    eax,eax
c001be55:	83 fe 15             	cmp    esi,0x15
c001be58:	77 13                	ja     c001be6d <IDE::read(unsigned char, unsigned char)+0xad>
c001be5a:	0f b6 c9             	movzx  ecx,cl
c001be5d:	0f b6 d2             	movzx  edx,dl
c001be60:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001be68:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001be6c:	ec                   	in     al,dx
c001be6d:	83 c4 10             	add    esp,0x10
c001be70:	5b                   	pop    ebx
c001be71:	5e                   	pop    esi
c001be72:	5f                   	pop    edi
c001be73:	c3                   	ret    

c001be74 <IDE::waitInterrupt(unsigned char)>:
c001be74:	55                   	push   ebp
c001be75:	57                   	push   edi
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	31 db                	xor    ebx,ebx
c001be7a:	83 ec 0c             	sub    esp,0xc
c001be7d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001be81:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001be86:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001be8e:	89 e8                	mov    eax,ebp
c001be90:	84 c0                	test   al,al
c001be92:	75 30                	jne    c001bec4 <IDE::waitInterrupt(unsigned char)+0x50>
c001be94:	50                   	push   eax
c001be95:	6a 0c                	push   0xc
c001be97:	56                   	push   esi
c001be98:	57                   	push   edi
c001be99:	e8 22 ff ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001be9e:	83 c4 10             	add    esp,0x10
c001bea1:	a8 01                	test   al,0x1
c001bea3:	75 27                	jne    c001becc <IDE::waitInterrupt(unsigned char)+0x58>
c001bea5:	f6 c3 04             	test   bl,0x4
c001bea8:	75 12                	jne    c001bebc <IDE::waitInterrupt(unsigned char)+0x48>
c001beaa:	83 fb 32             	cmp    ebx,0x32
c001bead:	7e 0d                	jle    c001bebc <IDE::waitInterrupt(unsigned char)+0x48>
c001beaf:	83 ec 0c             	sub    esp,0xc
c001beb2:	6a 64                	push   0x64
c001beb4:	e8 73 a4 ff ff       	call   c001632c <milliTenthSleep(unsigned int)>
c001beb9:	83 c4 10             	add    esp,0x10
c001bebc:	83 fb 3c             	cmp    ebx,0x3c
c001bebf:	74 0b                	je     c001becc <IDE::waitInterrupt(unsigned char)+0x58>
c001bec1:	43                   	inc    ebx
c001bec2:	eb c2                	jmp    c001be86 <IDE::waitInterrupt(unsigned char)+0x12>
c001bec4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001becc:	83 c4 0c             	add    esp,0xc
c001becf:	89 e8                	mov    eax,ebp
c001bed1:	5b                   	pop    ebx
c001bed2:	5e                   	pop    esi
c001bed3:	5f                   	pop    edi
c001bed4:	5d                   	pop    ebp
c001bed5:	c3                   	ret    

c001bed6 <ideChannel0IRQHandler(regs*, void*)>:
c001bed6:	83 ec 10             	sub    esp,0x10
c001bed9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bedd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bee4:	6a 07                	push   0x7
c001bee6:	6a 00                	push   0x0
c001bee8:	50                   	push   eax
c001bee9:	e8 d2 fe ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001beee:	83 c4 1c             	add    esp,0x1c
c001bef1:	c3                   	ret    

c001bef2 <ideChannel1IRQHandler(regs*, void*)>:
c001bef2:	83 ec 10             	sub    esp,0x10
c001bef5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bef9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf00:	6a 07                	push   0x7
c001bf02:	6a 01                	push   0x1
c001bf04:	50                   	push   eax
c001bf05:	e8 b6 fe ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001bf0a:	83 c4 1c             	add    esp,0x1c
c001bf0d:	c3                   	ret    

c001bf0e <IDE::enableIRQs(unsigned char, bool)>:
c001bf0e:	57                   	push   edi
c001bf0f:	b8 02 00 00 00       	mov    eax,0x2
c001bf14:	56                   	push   esi
c001bf15:	53                   	push   ebx
c001bf16:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf23:	74 02                	je     c001bf27 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf25:	31 c0                	xor    eax,eax
c001bf27:	0f b6 db             	movzx  ebx,bl
c001bf2a:	bf 04 00 00 00       	mov    edi,0x4
c001bf2f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf36:	50                   	push   eax
c001bf37:	6a 0c                	push   0xc
c001bf39:	53                   	push   ebx
c001bf3a:	56                   	push   esi
c001bf3b:	e8 c0 fd ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf40:	83 c4 10             	add    esp,0x10
c001bf43:	50                   	push   eax
c001bf44:	6a 0c                	push   0xc
c001bf46:	53                   	push   ebx
c001bf47:	56                   	push   esi
c001bf48:	e8 73 fe ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	4f                   	dec    edi
c001bf51:	75 f0                	jne    c001bf43 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bf53:	5b                   	pop    ebx
c001bf54:	5e                   	pop    esi
c001bf55:	5f                   	pop    edi
c001bf56:	c3                   	ret    
c001bf57:	90                   	nop

c001bf58 <IDE::open(int, int, void*)>:
c001bf58:	55                   	push   ebp
c001bf59:	57                   	push   edi
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	83 ec 1c             	sub    esp,0x1c
c001bf5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf63:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bf6a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bf73:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bf7c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bf83:	0f 85 da 02 00 00    	jne    c001c263 <IDE::open(int, int, void*)+0x30b>
c001bf89:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bf8f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bf93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf97:	83 e0 7f             	and    eax,0x7f
c001bf9a:	83 f8 05             	cmp    eax,0x5
c001bf9d:	74 05                	je     c001bfa4 <IDE::open(int, int, void*)+0x4c>
c001bf9f:	83 f8 0f             	cmp    eax,0xf
c001bfa2:	75 32                	jne    c001bfd6 <IDE::open(int, int, void*)+0x7e>
c001bfa4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bfaa:	83 e0 fc             	and    eax,0xfffffffc
c001bfad:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bfb4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bfba:	83 e0 fc             	and    eax,0xfffffffc
c001bfbd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bfc4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bfca:	83 e0 fc             	and    eax,0xfffffffc
c001bfcd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bfd4:	eb 14                	jmp    c001bfea <IDE::open(int, int, void*)+0x92>
c001bfd6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bfe0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bfea:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bff1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bff6:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bffd:	89 fa                	mov    edx,edi
c001bfff:	89 f1                	mov    ecx,esi
c001c001:	c1 e1 10             	shl    ecx,0x10
c001c004:	89 e8                	mov    eax,ebp
c001c006:	c1 e0 0b             	shl    eax,0xb
c001c009:	09 c1                	or     ecx,eax
c001c00b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c012:	c1 e0 08             	shl    eax,0x8
c001c015:	09 c1                	or     ecx,eax
c001c017:	89 c8                	mov    eax,ecx
c001c019:	0d 08 00 00 80       	or     eax,0x80000008
c001c01e:	ef                   	out    dx,eax
c001c01f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c024:	ed                   	in     eax,dx
c001c025:	c1 e8 10             	shr    eax,0x10
c001c028:	3d ff ff 00 00       	cmp    eax,0xffff
c001c02d:	0f 84 f9 00 00 00    	je     c001c12c <IDE::open(int, int, void*)+0x1d4>
c001c033:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c039:	89 fa                	mov    edx,edi
c001c03b:	89 c8                	mov    eax,ecx
c001c03d:	ef                   	out    dx,eax
c001c03e:	b0 fe                	mov    al,0xfe
c001c040:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c045:	ee                   	out    dx,al
c001c046:	89 c8                	mov    eax,ecx
c001c048:	89 fa                	mov    edx,edi
c001c04a:	ef                   	out    dx,eax
c001c04b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c050:	ed                   	in     eax,dx
c001c051:	3c fe                	cmp    al,0xfe
c001c053:	0f 85 a4 00 00 00    	jne    c001c0fd <IDE::open(int, int, void*)+0x1a5>
c001c059:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c05f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c066:	74 30                	je     c001c098 <IDE::open(int, int, void*)+0x140>
c001c068:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c06e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c072:	83 ec 0c             	sub    esp,0xc
c001c075:	40                   	inc    eax
c001c076:	0f b6 c0             	movzx  eax,al
c001c079:	50                   	push   eax
c001c07a:	55                   	push   ebp
c001c07b:	56                   	push   esi
c001c07c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c082:	51                   	push   ecx
c001c083:	e8 74 38 ff ff       	call   c000f8fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c088:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c08d:	83 c4 1c             	add    esp,0x1c
c001c090:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c096:	eb 0a                	jmp    c001c0a2 <IDE::open(int, int, void*)+0x14a>
c001c098:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c0a2:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c0a9:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c0ae:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0b5:	89 ea                	mov    edx,ebp
c001c0b7:	c1 e1 10             	shl    ecx,0x10
c001c0ba:	c1 e0 08             	shl    eax,0x8
c001c0bd:	09 c1                	or     ecx,eax
c001c0bf:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c0c6:	c1 e0 0b             	shl    eax,0xb
c001c0c9:	09 c1                	or     ecx,eax
c001c0cb:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c0d1:	89 c8                	mov    eax,ecx
c001c0d3:	ef                   	out    dx,eax
c001c0d4:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c0da:	be fc 0c 00 00       	mov    esi,0xcfc
c001c0df:	89 f2                	mov    edx,esi
c001c0e1:	89 f8                	mov    eax,edi
c001c0e3:	ee                   	out    dx,al
c001c0e4:	89 c8                	mov    eax,ecx
c001c0e6:	89 ea                	mov    edx,ebp
c001c0e8:	ef                   	out    dx,eax
c001c0e9:	89 f2                	mov    edx,esi
c001c0eb:	ed                   	in     eax,dx
c001c0ec:	0f b6 c0             	movzx  eax,al
c001c0ef:	39 f8                	cmp    eax,edi
c001c0f1:	74 49                	je     c001c13c <IDE::open(int, int, void*)+0x1e4>
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	68 68 31 02 c0       	push   0xc0023168
c001c0fb:	eb 37                	jmp    c001c134 <IDE::open(int, int, void*)+0x1dc>
c001c0fd:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c106:	75 1a                	jne    c001c122 <IDE::open(int, int, void*)+0x1ca>
c001c108:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c10d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c112:	74 05                	je     c001c119 <IDE::open(int, int, void*)+0x1c1>
c001c114:	83 c0 80             	add    eax,0xffffff80
c001c117:	75 09                	jne    c001c122 <IDE::open(int, int, void*)+0x1ca>
c001c119:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c120:	eb 1a                	jmp    c001c13c <IDE::open(int, int, void*)+0x1e4>
c001c122:	83 ec 0c             	sub    esp,0xc
c001c125:	68 70 31 02 c0       	push   0xc0023170
c001c12a:	eb 08                	jmp    c001c134 <IDE::open(int, int, void*)+0x1dc>
c001c12c:	83 ec 0c             	sub    esp,0xc
c001c12f:	68 a1 31 02 c0       	push   0xc00231a1
c001c134:	e8 ee 53 ff ff       	call   c0011527 <KePanic(char const*)>
c001c139:	83 c4 10             	add    esp,0x10
c001c13c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c143:	74 1a                	je     c001c15f <IDE::open(int, int, void*)+0x207>
c001c145:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c14b:	83 e0 fc             	and    eax,0xfffffffc
c001c14e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c155:	83 c0 08             	add    eax,0x8
c001c158:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c15f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c165:	89 c2                	mov    edx,eax
c001c167:	83 e2 0f             	and    edx,0xf
c001c16a:	83 fa 08             	cmp    edx,0x8
c001c16d:	75 0a                	jne    c001c179 <IDE::open(int, int, void*)+0x221>
c001c16f:	83 e8 02             	sub    eax,0x2
c001c172:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c179:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c17f:	89 c2                	mov    edx,eax
c001c181:	83 e2 0f             	and    edx,0xf
c001c184:	83 fa 08             	cmp    edx,0x8
c001c187:	75 0a                	jne    c001c193 <IDE::open(int, int, void*)+0x23b>
c001c189:	83 e8 02             	sub    eax,0x2
c001c18c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c193:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c19a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c1a1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1a4:	89 d0                	mov    eax,edx
c001c1a6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1aa:	8d 7a 01             	lea    edi,[edx+0x1]
c001c1ad:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c1b1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1b5:	83 e1 3f             	and    ecx,0x3f
c001c1b8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c1bc:	89 f9                	mov    ecx,edi
c001c1be:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c1c5:	8d 78 02             	lea    edi,[eax+0x2]
c001c1c8:	0f b6 c9             	movzx  ecx,cl
c001c1cb:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c1ce:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c1d2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c1d6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c1da:	83 e2 3f             	and    edx,0x3f
c001c1dd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c1e1:	89 f9                	mov    ecx,edi
c001c1e3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c1e9:	8d 78 03             	lea    edi,[eax+0x3]
c001c1ec:	0f b6 d1             	movzx  edx,cl
c001c1ef:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1f2:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c1f6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1fa:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1fe:	83 e1 3f             	and    ecx,0x3f
c001c201:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c205:	89 f9                	mov    ecx,edi
c001c207:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c20d:	8d 78 04             	lea    edi,[eax+0x4]
c001c210:	0f b6 c9             	movzx  ecx,cl
c001c213:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c216:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c21a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c21e:	89 fa                	mov    edx,edi
c001c220:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c226:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c22a:	83 e2 3f             	and    edx,0x3f
c001c22d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c231:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c238:	66 85 f6             	test   si,si
c001c23b:	74 65                	je     c001c2a2 <IDE::open(int, int, void*)+0x34a>
c001c23d:	89 f9                	mov    ecx,edi
c001c23f:	83 c0 05             	add    eax,0x5
c001c242:	0f b6 d1             	movzx  edx,cl
c001c245:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c248:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c24c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c250:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c256:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c25a:	83 e0 3f             	and    eax,0x3f
c001c25d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c261:	eb 3f                	jmp    c001c2a2 <IDE::open(int, int, void*)+0x34a>
c001c263:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c26a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c270:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c277:	05 06 02 00 00       	add    eax,0x206
c001c27c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c283:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c28a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c291:	05 06 02 00 00       	add    eax,0x206
c001c296:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c29d:	e9 bd fe ff ff       	jmp    c001c15f <IDE::open(int, int, void*)+0x207>
c001c2a2:	50                   	push   eax
c001c2a3:	50                   	push   eax
c001c2a4:	6a 00                	push   0x0
c001c2a6:	53                   	push   ebx
c001c2a7:	e8 2e fa ff ff       	call   c001bcda <IDE::prepareInterrupt(unsigned char)>
c001c2ac:	5a                   	pop    edx
c001c2ad:	59                   	pop    ecx
c001c2ae:	6a 01                	push   0x1
c001c2b0:	53                   	push   ebx
c001c2b1:	e8 24 fa ff ff       	call   c001bcda <IDE::prepareInterrupt(unsigned char)>
c001c2b6:	83 c4 0c             	add    esp,0xc
c001c2b9:	6a 00                	push   0x0
c001c2bb:	6a 00                	push   0x0
c001c2bd:	53                   	push   ebx
c001c2be:	e8 4b fc ff ff       	call   c001bf0e <IDE::enableIRQs(unsigned char, bool)>
c001c2c3:	83 c4 0c             	add    esp,0xc
c001c2c6:	6a 00                	push   0x0
c001c2c8:	6a 01                	push   0x1
c001c2ca:	53                   	push   ebx
c001c2cb:	e8 3e fc ff ff       	call   c001bf0e <IDE::enableIRQs(unsigned char, bool)>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c2da:	74 34                	je     c001c310 <IDE::open(int, int, void*)+0x3b8>
c001c2dc:	83 ec 0c             	sub    esp,0xc
c001c2df:	53                   	push   ebx
c001c2e0:	6a 01                	push   0x1
c001c2e2:	68 d6 be 01 c0       	push   0xc001bed6
c001c2e7:	6a 0e                	push   0xe
c001c2e9:	53                   	push   ebx
c001c2ea:	e8 1d 06 ff ff       	call   c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2ef:	83 c4 14             	add    esp,0x14
c001c2f2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c2f8:	53                   	push   ebx
c001c2f9:	6a 01                	push   0x1
c001c2fb:	68 f2 be 01 c0       	push   0xc001bef2
c001c300:	6a 0f                	push   0xf
c001c302:	53                   	push   ebx
c001c303:	e8 04 06 ff ff       	call   c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c308:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c30e:	eb 38                	jmp    c001c348 <IDE::open(int, int, void*)+0x3f0>
c001c310:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c31a:	83 ec 0c             	sub    esp,0xc
c001c31d:	53                   	push   ebx
c001c31e:	6a 00                	push   0x0
c001c320:	68 d6 be 01 c0       	push   0xc001bed6
c001c325:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c32b:	53                   	push   ebx
c001c32c:	e8 db 05 ff ff       	call   c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c331:	83 c4 14             	add    esp,0x14
c001c334:	53                   	push   ebx
c001c335:	6a 00                	push   0x0
c001c337:	68 f2 be 01 c0       	push   0xc001bef2
c001c33c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c342:	53                   	push   ebx
c001c343:	e8 c4 05 ff ff       	call   c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c348:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c34a:	83 c4 20             	add    esp,0x20
c001c34d:	83 ec 0c             	sub    esp,0xc
c001c350:	53                   	push   ebx
c001c351:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c354:	83 c4 0c             	add    esp,0xc
c001c357:	6a 07                	push   0x7
c001c359:	6a 00                	push   0x0
c001c35b:	53                   	push   ebx
c001c35c:	e8 5f fa ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c361:	83 c4 0c             	add    esp,0xc
c001c364:	6a 07                	push   0x7
c001c366:	6a 01                	push   0x1
c001c368:	53                   	push   ebx
c001c369:	e8 52 fa ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c36e:	83 c4 0c             	add    esp,0xc
c001c371:	6a 01                	push   0x1
c001c373:	6a 00                	push   0x0
c001c375:	53                   	push   ebx
c001c376:	e8 93 fb ff ff       	call   c001bf0e <IDE::enableIRQs(unsigned char, bool)>
c001c37b:	83 c4 0c             	add    esp,0xc
c001c37e:	6a 01                	push   0x1
c001c380:	6a 01                	push   0x1
c001c382:	53                   	push   ebx
c001c383:	e8 86 fb ff ff       	call   c001bf0e <IDE::enableIRQs(unsigned char, bool)>
c001c388:	83 c4 2c             	add    esp,0x2c
c001c38b:	31 c0                	xor    eax,eax
c001c38d:	5b                   	pop    ebx
c001c38e:	5e                   	pop    esi
c001c38f:	5f                   	pop    edi
c001c390:	5d                   	pop    ebp
c001c391:	c3                   	ret    

c001c392 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c392:	55                   	push   ebp
c001c393:	57                   	push   edi
c001c394:	56                   	push   esi
c001c395:	53                   	push   ebx
c001c396:	83 ec 1c             	sub    esp,0x1c
c001c399:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c39d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3a5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c3a9:	8d 42 f8             	lea    eax,[edx-0x8]
c001c3ac:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c3b0:	3c 03                	cmp    al,0x3
c001c3b2:	77 5a                	ja     c001c40e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c3b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c3b8:	0f b6 db             	movzx  ebx,bl
c001c3bb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c3bf:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c3c2:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3c7:	0c 80                	or     al,0x80
c001c3c9:	50                   	push   eax
c001c3ca:	6a 0c                	push   0xc
c001c3cc:	53                   	push   ebx
c001c3cd:	56                   	push   esi
c001c3ce:	e8 2d f9 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c3d7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c3dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3e0:	0f b6 d2             	movzx  edx,dl
c001c3e3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c3e7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c3e9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3ee:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c3f2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c3f6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c3fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c402:	83 c4 2c             	add    esp,0x2c
c001c405:	5b                   	pop    ebx
c001c406:	5e                   	pop    esi
c001c407:	5f                   	pop    edi
c001c408:	5d                   	pop    ebp
c001c409:	e9 f2 f8 ff ff       	jmp    c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c40e:	0f b6 c2             	movzx  eax,dl
c001c411:	83 f8 07             	cmp    eax,0x7
c001c414:	77 12                	ja     c001c428 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c416:	0f b6 db             	movzx  ebx,bl
c001c419:	0f b6 c2             	movzx  eax,dl
c001c41c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c424:	01 c2                	add    edx,eax
c001c426:	eb 2f                	jmp    c001c457 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c428:	83 f8 0d             	cmp    eax,0xd
c001c42b:	77 13                	ja     c001c440 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c42d:	0f b6 db             	movzx  ebx,bl
c001c430:	0f b6 d2             	movzx  edx,dl
c001c433:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c43a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c43e:	eb 17                	jmp    c001c457 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c440:	83 f8 15             	cmp    eax,0x15
c001c443:	77 14                	ja     c001c459 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c445:	0f b6 db             	movzx  ebx,bl
c001c448:	0f b6 d2             	movzx  edx,dl
c001c44b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c453:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c457:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c459:	83 c4 1c             	add    esp,0x1c
c001c45c:	5b                   	pop    ebx
c001c45d:	5e                   	pop    esi
c001c45e:	5f                   	pop    edi
c001c45f:	5d                   	pop    ebp
c001c460:	c3                   	ret    
c001c461:	90                   	nop

c001c462 <IDE::detect()>:
c001c462:	55                   	push   ebp
c001c463:	57                   	push   edi
c001c464:	56                   	push   esi
c001c465:	53                   	push   ebx
c001c466:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c46c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c473:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c47a:	0f 85 9e 02 00 00    	jne    c001c71e <IDE::detect()+0x2bc>
c001c480:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c487:	31 f6                	xor    esi,esi
c001c489:	31 ff                	xor    edi,edi
c001c48b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c493:	89 f8                	mov    eax,edi
c001c495:	c1 e0 06             	shl    eax,0x6
c001c498:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c4a0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ac:	c1 e0 04             	shl    eax,0x4
c001c4af:	83 c8 a0             	or     eax,0xffffffa0
c001c4b2:	0f b6 c0             	movzx  eax,al
c001c4b5:	50                   	push   eax
c001c4b6:	6a 06                	push   0x6
c001c4b8:	56                   	push   esi
c001c4b9:	53                   	push   ebx
c001c4ba:	e8 41 f8 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4bf:	83 c4 0c             	add    esp,0xc
c001c4c2:	6a 0c                	push   0xc
c001c4c4:	56                   	push   esi
c001c4c5:	53                   	push   ebx
c001c4c6:	e8 f5 f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c4cb:	83 c4 0c             	add    esp,0xc
c001c4ce:	6a 0c                	push   0xc
c001c4d0:	56                   	push   esi
c001c4d1:	53                   	push   ebx
c001c4d2:	e8 e9 f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c4d7:	83 c4 0c             	add    esp,0xc
c001c4da:	6a 0c                	push   0xc
c001c4dc:	56                   	push   esi
c001c4dd:	53                   	push   ebx
c001c4de:	e8 dd f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c4e3:	83 c4 0c             	add    esp,0xc
c001c4e6:	6a 0c                	push   0xc
c001c4e8:	56                   	push   esi
c001c4e9:	53                   	push   ebx
c001c4ea:	e8 d1 f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c4ef:	68 ec 00 00 00       	push   0xec
c001c4f4:	6a 07                	push   0x7
c001c4f6:	56                   	push   esi
c001c4f7:	53                   	push   ebx
c001c4f8:	e8 03 f8 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4fd:	83 c4 1c             	add    esp,0x1c
c001c500:	6a 0c                	push   0xc
c001c502:	56                   	push   esi
c001c503:	53                   	push   ebx
c001c504:	e8 b7 f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c509:	83 c4 0c             	add    esp,0xc
c001c50c:	6a 0c                	push   0xc
c001c50e:	56                   	push   esi
c001c50f:	53                   	push   ebx
c001c510:	e8 ab f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c515:	83 c4 0c             	add    esp,0xc
c001c518:	6a 0c                	push   0xc
c001c51a:	56                   	push   esi
c001c51b:	53                   	push   ebx
c001c51c:	e8 9f f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	6a 0c                	push   0xc
c001c526:	56                   	push   esi
c001c527:	53                   	push   ebx
c001c528:	e8 93 f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c52d:	83 c4 0c             	add    esp,0xc
c001c530:	6a 0c                	push   0xc
c001c532:	56                   	push   esi
c001c533:	53                   	push   ebx
c001c534:	e8 87 f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	84 c0                	test   al,al
c001c53e:	0f 84 61 01 00 00    	je     c001c6a5 <IDE::detect()+0x243>
c001c544:	31 ed                	xor    ebp,ebp
c001c546:	50                   	push   eax
c001c547:	6a 0c                	push   0xc
c001c549:	56                   	push   esi
c001c54a:	53                   	push   ebx
c001c54b:	e8 70 f8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c550:	83 c4 10             	add    esp,0x10
c001c553:	a8 01                	test   al,0x1
c001c555:	0f 85 6b 01 00 00    	jne    c001c6c6 <IDE::detect()+0x264>
c001c55b:	a8 80                	test   al,0x80
c001c55d:	75 04                	jne    c001c563 <IDE::detect()+0x101>
c001c55f:	a8 08                	test   al,0x8
c001c561:	75 23                	jne    c001c586 <IDE::detect()+0x124>
c001c563:	45                   	inc    ebp
c001c564:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c56a:	7e da                	jle    c001c546 <IDE::detect()+0xe4>
c001c56c:	83 ec 0c             	sub    esp,0xc
c001c56f:	6a 32                	push   0x32
c001c571:	e8 b6 9d ff ff       	call   c001632c <milliTenthSleep(unsigned int)>
c001c576:	83 c4 10             	add    esp,0x10
c001c579:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c57f:	75 c5                	jne    c001c546 <IDE::detect()+0xe4>
c001c581:	e9 40 01 00 00       	jmp    c001c6c6 <IDE::detect()+0x264>
c001c586:	31 c9                	xor    ecx,ecx
c001c588:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c58c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c590:	83 ec 0c             	sub    esp,0xc
c001c593:	68 80 00 00 00       	push   0x80
c001c598:	55                   	push   ebp
c001c599:	6a 00                	push   0x0
c001c59b:	56                   	push   esi
c001c59c:	53                   	push   ebx
c001c59d:	e8 f0 fd ff ff       	call   c001c392 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c5a2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c5a7:	89 f8                	mov    eax,edi
c001c5a9:	c1 e0 06             	shl    eax,0x6
c001c5ac:	01 d8                	add    eax,ebx
c001c5ae:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c5b5:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c5bc:	89 d1                	mov    ecx,edx
c001c5be:	89 f2                	mov    edx,esi
c001c5c0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c5c6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c5ca:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c5d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5d4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c5db:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c5e3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c5ea:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c5f2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c5f8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c5ff:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c605:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c609:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c60d:	83 c4 20             	add    esp,0x20
c001c610:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c613:	83 c5 02             	add    ebp,0x2
c001c616:	83 c0 02             	add    eax,0x2
c001c619:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c61f:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c622:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c628:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c62c:	75 e2                	jne    c001c610 <IDE::detect()+0x1ae>
c001c62e:	89 f8                	mov    eax,edi
c001c630:	c1 e0 06             	shl    eax,0x6
c001c633:	01 d8                	add    eax,ebx
c001c635:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c63c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c643:	c1 ea 09             	shr    edx,0x9
c001c646:	83 e2 01             	and    edx,0x1
c001c649:	80 e1 01             	and    cl,0x1
c001c64c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c652:	75 22                	jne    c001c676 <IDE::detect()+0x214>
c001c654:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c65b:	74 47                	je     c001c6a4 <IDE::detect()+0x242>
c001c65d:	83 ec 0c             	sub    esp,0xc
c001c660:	68 7c 01 00 00       	push   0x17c
c001c665:	e8 69 b4 fe ff       	call   c0007ad3 <malloc>
c001c66a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c66d:	89 c5                	mov    ebp,eax
c001c66f:	e8 16 05 00 00       	call   c001cb8a <ATA::ATA()>
c001c674:	eb 17                	jmp    c001c68d <IDE::detect()+0x22b>
c001c676:	83 ec 0c             	sub    esp,0xc
c001c679:	68 84 01 00 00       	push   0x184
c001c67e:	e8 50 b4 fe ff       	call   c0007ad3 <malloc>
c001c683:	89 04 24             	mov    DWORD PTR [esp],eax
c001c686:	89 c5                	mov    ebp,eax
c001c688:	e8 6f 0e 00 00       	call   c001d4fc <ATAPI::ATAPI()>
c001c68d:	5a                   	pop    edx
c001c68e:	59                   	pop    ecx
c001c68f:	55                   	push   ebp
c001c690:	53                   	push   ebx
c001c691:	e8 ca 02 ff ff       	call   c000c960 <Device::addChild(Device*)>
c001c696:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c699:	53                   	push   ebx
c001c69a:	57                   	push   edi
c001c69b:	6a 00                	push   0x0
c001c69d:	55                   	push   ebp
c001c69e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6a1:	83 c4 20             	add    esp,0x20
c001c6a4:	47                   	inc    edi
c001c6a5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c6aa:	74 0d                	je     c001c6b9 <IDE::detect()+0x257>
c001c6ac:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c6b4:	e9 da fd ff ff       	jmp    c001c493 <IDE::detect()+0x31>
c001c6b9:	4e                   	dec    esi
c001c6ba:	74 62                	je     c001c71e <IDE::detect()+0x2bc>
c001c6bc:	be 01 00 00 00       	mov    esi,0x1
c001c6c1:	e9 c5 fd ff ff       	jmp    c001c48b <IDE::detect()+0x29>
c001c6c6:	50                   	push   eax
c001c6c7:	6a 04                	push   0x4
c001c6c9:	56                   	push   esi
c001c6ca:	53                   	push   ebx
c001c6cb:	e8 f0 f6 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c6d0:	83 c4 0c             	add    esp,0xc
c001c6d3:	6a 05                	push   0x5
c001c6d5:	56                   	push   esi
c001c6d6:	53                   	push   ebx
c001c6d7:	89 c5                	mov    ebp,eax
c001c6d9:	e8 e2 f6 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c6de:	89 e9                	mov    ecx,ebp
c001c6e0:	83 c4 10             	add    esp,0x10
c001c6e3:	0f b6 e9             	movzx  ebp,cl
c001c6e6:	83 fd 14             	cmp    ebp,0x14
c001c6e9:	74 2d                	je     c001c718 <IDE::detect()+0x2b6>
c001c6eb:	83 fd 69             	cmp    ebp,0x69
c001c6ee:	75 b5                	jne    c001c6a5 <IDE::detect()+0x243>
c001c6f0:	3c 96                	cmp    al,0x96
c001c6f2:	75 b1                	jne    c001c6a5 <IDE::detect()+0x243>
c001c6f4:	68 a1 00 00 00       	push   0xa1
c001c6f9:	6a 07                	push   0x7
c001c6fb:	56                   	push   esi
c001c6fc:	53                   	push   ebx
c001c6fd:	e8 fe f5 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c702:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c709:	e8 1e 9c ff ff       	call   c001632c <milliTenthSleep(unsigned int)>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	b1 01                	mov    cl,0x1
c001c713:	e9 70 fe ff ff       	jmp    c001c588 <IDE::detect()+0x126>
c001c718:	3c eb                	cmp    al,0xeb
c001c71a:	75 cf                	jne    c001c6eb <IDE::detect()+0x289>
c001c71c:	eb d6                	jmp    c001c6f4 <IDE::detect()+0x292>
c001c71e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c724:	5b                   	pop    ebx
c001c725:	5e                   	pop    esi
c001c726:	5f                   	pop    edi
c001c727:	5d                   	pop    ebp
c001c728:	c3                   	ret    
c001c729:	90                   	nop

c001c72a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c72a:	55                   	push   ebp
c001c72b:	57                   	push   edi
c001c72c:	56                   	push   esi
c001c72d:	53                   	push   ebx
c001c72e:	83 ec 1c             	sub    esp,0x1c
c001c731:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c735:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c739:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c73d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c741:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c745:	88 c3                	mov    bl,al
c001c747:	25 ff 00 00 00       	and    eax,0xff
c001c74c:	0f 84 88 00 00 00    	je     c001c7da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c752:	83 ec 0c             	sub    esp,0xc
c001c755:	89 c7                	mov    edi,eax
c001c757:	68 cb 31 02 c0       	push   0xc00231cb
c001c75c:	e8 a9 e1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c761:	83 c4 10             	add    esp,0x10
c001c764:	83 ff 01             	cmp    edi,0x1
c001c767:	74 6b                	je     c001c7d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c769:	83 ff 02             	cmp    edi,0x2
c001c76c:	75 58                	jne    c001c7c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c76e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c773:	50                   	push   eax
c001c774:	6a 01                	push   0x1
c001c776:	01 ff                	add    edi,edi
c001c778:	09 fe                	or     esi,edi
c001c77a:	89 f0                	mov    eax,esi
c001c77c:	0f b6 f0             	movzx  esi,al
c001c77f:	c1 e6 06             	shl    esi,0x6
c001c782:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c78a:	50                   	push   eax
c001c78b:	55                   	push   ebp
c001c78c:	e8 2f f6 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c791:	83 c4 10             	add    esp,0x10
c001c794:	a8 01                	test   al,0x1
c001c796:	74 02                	je     c001c79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c798:	b3 07                	mov    bl,0x7
c001c79a:	a8 02                	test   al,0x2
c001c79c:	74 02                	je     c001c7a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c79e:	b3 03                	mov    bl,0x3
c001c7a0:	a8 04                	test   al,0x4
c001c7a2:	74 02                	je     c001c7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c7a4:	b3 14                	mov    bl,0x14
c001c7a6:	a8 08                	test   al,0x8
c001c7a8:	74 02                	je     c001c7ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c7aa:	b3 03                	mov    bl,0x3
c001c7ac:	a8 10                	test   al,0x10
c001c7ae:	74 02                	je     c001c7b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c7b0:	b3 15                	mov    bl,0x15
c001c7b2:	a8 20                	test   al,0x20
c001c7b4:	74 02                	je     c001c7b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c7b6:	b3 03                	mov    bl,0x3
c001c7b8:	a8 40                	test   al,0x40
c001c7ba:	74 02                	je     c001c7be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c7bc:	b3 16                	mov    bl,0x16
c001c7be:	a8 80                	test   al,0x80
c001c7c0:	74 18                	je     c001c7da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7c2:	b3 0d                	mov    bl,0xd
c001c7c4:	eb 14                	jmp    c001c7da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7c6:	83 ff 03             	cmp    edi,0x3
c001c7c9:	74 0d                	je     c001c7d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c7cb:	83 ff 04             	cmp    edi,0x4
c001c7ce:	75 0a                	jne    c001c7da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7d0:	b3 08                	mov    bl,0x8
c001c7d2:	eb 06                	jmp    c001c7da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7d4:	b3 13                	mov    bl,0x13
c001c7d6:	eb 02                	jmp    c001c7da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7d8:	b3 17                	mov    bl,0x17
c001c7da:	83 c4 1c             	add    esp,0x1c
c001c7dd:	88 d8                	mov    al,bl
c001c7df:	5b                   	pop    ebx
c001c7e0:	5e                   	pop    esi
c001c7e1:	5f                   	pop    edi
c001c7e2:	5d                   	pop    ebp
c001c7e3:	c3                   	ret    

c001c7e4 <IDE::polling(unsigned char, unsigned int)>:
c001c7e4:	57                   	push   edi
c001c7e5:	56                   	push   esi
c001c7e6:	53                   	push   ebx
c001c7e7:	bb 04 00 00 00       	mov    ebx,0x4
c001c7ec:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c7f0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c7f5:	52                   	push   edx
c001c7f6:	6a 0c                	push   0xc
c001c7f8:	56                   	push   esi
c001c7f9:	57                   	push   edi
c001c7fa:	e8 c1 f5 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	4b                   	dec    ebx
c001c803:	75 f0                	jne    c001c7f5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c805:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c80a:	50                   	push   eax
c001c80b:	6a 0c                	push   0xc
c001c80d:	56                   	push   esi
c001c80e:	57                   	push   edi
c001c80f:	e8 ac f5 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	a8 01                	test   al,0x1
c001c819:	75 17                	jne    c001c832 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c81b:	a8 20                	test   al,0x20
c001c81d:	75 0f                	jne    c001c82e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c81f:	4b                   	dec    ebx
c001c820:	74 10                	je     c001c832 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c822:	a8 80                	test   al,0x80
c001c824:	75 e4                	jne    c001c80a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c826:	a8 08                	test   al,0x8
c001c828:	74 e0                	je     c001c80a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c82a:	31 c0                	xor    eax,eax
c001c82c:	eb 06                	jmp    c001c834 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c82e:	b0 01                	mov    al,0x1
c001c830:	eb 02                	jmp    c001c834 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c832:	b0 02                	mov    al,0x2
c001c834:	5b                   	pop    ebx
c001c835:	5e                   	pop    esi
c001c836:	5f                   	pop    edi
c001c837:	c3                   	ret    

c001c838 <SATABus::close(int, int, void*)>:
c001c838:	31 c0                	xor    eax,eax
c001c83a:	c3                   	ret    
c001c83b:	90                   	nop

c001c83c <SATABus::detect()>:
c001c83c:	c3                   	ret    
c001c83d:	90                   	nop

c001c83e <SATABus::SATABus()>:
c001c83e:	83 ec 0c             	sub    esp,0xc
c001c841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c845:	83 ec 08             	sub    esp,0x8
c001c848:	68 04 32 02 c0       	push   0xc0023204
c001c84d:	50                   	push   eax
c001c84e:	e8 51 04 ff ff       	call   c000cca4 <HardDiskController::HardDiskController(char const*)>
c001c853:	83 c4 10             	add    esp,0x10
c001c856:	ba 30 32 02 c0       	mov    edx,0xc0023230
c001c85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85f:	89 10                	mov    DWORD PTR [eax],edx
c001c861:	83 ec 0c             	sub    esp,0xc
c001c864:	6a 50                	push   0x50
c001c866:	e8 46 b6 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	89 c2                	mov    edx,eax
c001c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c874:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c87a:	83 ec 0c             	sub    esp,0xc
c001c87d:	6a 50                	push   0x50
c001c87f:	e8 71 cd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c884:	83 c4 10             	add    esp,0x10
c001c887:	89 c2                	mov    edx,eax
c001c889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c893:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c898:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c89c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c8a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8a6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c8ac:	83 ec 0c             	sub    esp,0xc
c001c8af:	6a 03                	push   0x3
c001c8b1:	6a 50                	push   0x50
c001c8b3:	51                   	push   ecx
c001c8b4:	52                   	push   edx
c001c8b5:	50                   	push   eax
c001c8b6:	e8 4d d6 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c8bb:	83 c4 20             	add    esp,0x20
c001c8be:	90                   	nop
c001c8bf:	83 c4 0c             	add    esp,0xc
c001c8c2:	c3                   	ret    
c001c8c3:	90                   	nop

c001c8c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c8c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8c8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c8cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c8ce:	09 c2                	or     edx,eax
c001c8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c8da:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8dc:	31 c0                	xor    eax,eax
c001c8de:	c1 e9 08             	shr    ecx,0x8
c001c8e1:	83 e1 0f             	and    ecx,0xf
c001c8e4:	39 c8                	cmp    eax,ecx
c001c8e6:	74 0a                	je     c001c8f2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c8e8:	f6 c2 01             	test   dl,0x1
c001c8eb:	74 08                	je     c001c8f5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c8ed:	d1 ea                	shr    edx,1
c001c8ef:	40                   	inc    eax
c001c8f0:	eb f2                	jmp    c001c8e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c8f2:	83 c8 ff             	or     eax,0xffffffff
c001c8f5:	c3                   	ret    

c001c8f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c8f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8fa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c8fd:	89 c2                	mov    edx,eax
c001c8ff:	c1 ea 08             	shr    edx,0x8
c001c902:	83 e2 0f             	and    edx,0xf
c001c905:	4a                   	dec    edx
c001c906:	75 32                	jne    c001c93a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c908:	83 e0 0f             	and    eax,0xf
c001c90b:	83 f8 03             	cmp    eax,0x3
c001c90e:	75 2a                	jne    c001c93a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c910:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c913:	b8 02 00 00 00       	mov    eax,0x2
c001c918:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c91e:	74 1c                	je     c001c93c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c920:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c926:	b8 04 00 00 00       	mov    eax,0x4
c001c92b:	74 0f                	je     c001c93c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c92d:	31 c0                	xor    eax,eax
c001c92f:	83 fa 03             	cmp    edx,0x3
c001c932:	0f 94 c0             	sete   al
c001c935:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c939:	c3                   	ret    
c001c93a:	31 c0                	xor    eax,eax
c001c93c:	c3                   	ret    
c001c93d:	90                   	nop

c001c93e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c93e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c942:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c945:	0f ba e2 0f          	bt     edx,0xf
c001c949:	72 f7                	jb     c001c942 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c94b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c94e:	83 ca 10             	or     edx,0x10
c001c951:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c954:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c957:	83 ca 01             	or     edx,0x1
c001c95a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c95d:	c3                   	ret    

c001c95e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c95e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c962:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c965:	83 e2 fe             	and    edx,0xfffffffe
c001c968:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c96b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c96e:	83 e2 ef             	and    edx,0xffffffef
c001c971:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c974:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c977:	0f ba e2 0e          	bt     edx,0xe
c001c97b:	72 f7                	jb     c001c974 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c97d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c980:	0f ba e2 0f          	bt     edx,0xf
c001c984:	72 ee                	jb     c001c974 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c986:	c3                   	ret    
c001c987:	90                   	nop

c001c988 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c988:	55                   	push   ebp
c001c989:	57                   	push   edi
c001c98a:	56                   	push   esi
c001c98b:	53                   	push   ebx
c001c98c:	83 ec 1c             	sub    esp,0x1c
c001c98f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c993:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c997:	53                   	push   ebx
c001c998:	57                   	push   edi
c001c999:	e8 c0 ff ff ff       	call   c001c95e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c99e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c9a2:	83 ec 0c             	sub    esp,0xc
c001c9a5:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9ab:	c1 e5 0a             	shl    ebp,0xa
c001c9ae:	01 e8                	add    eax,ebp
c001c9b0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9b4:	68 00 04 00 00       	push   0x400
c001c9b9:	6a 00                	push   0x0
c001c9bb:	50                   	push   eax
c001c9bc:	e8 2f 3b fe ff       	call   c00004f0 <memset>
c001c9c1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c9c7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c9cb:	83 c4 1c             	add    esp,0x1c
c001c9ce:	01 e8                	add    eax,ebp
c001c9d0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9d2:	c1 e6 08             	shl    esi,0x8
c001c9d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c9dc:	81 c6 00 80 00 00    	add    esi,0x8000
c001c9e2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9e8:	01 f0                	add    eax,esi
c001c9ea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9f0:	68 00 01 00 00       	push   0x100
c001c9f5:	6a 00                	push   0x0
c001c9f7:	50                   	push   eax
c001c9f8:	e8 f3 3a fe ff       	call   c00004f0 <memset>
c001c9fd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca03:	31 d2                	xor    edx,edx
c001ca05:	01 f0                	add    eax,esi
c001ca07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca0a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca11:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001ca17:	01 ee                	add    esi,ebp
c001ca19:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ca1d:	83 c4 10             	add    esp,0x10
c001ca20:	c1 e5 0d             	shl    ebp,0xd
c001ca23:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001ca29:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001ca2f:	83 c6 20             	add    esi,0x20
c001ca32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca36:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca3c:	01 e8                	add    eax,ebp
c001ca3e:	01 d0                	add    eax,edx
c001ca40:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca43:	52                   	push   edx
c001ca44:	68 00 01 00 00       	push   0x100
c001ca49:	6a 00                	push   0x0
c001ca4b:	50                   	push   eax
c001ca4c:	e8 9f 3a fe ff       	call   c00004f0 <memset>
c001ca51:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca57:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001ca5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca62:	83 c4 10             	add    esp,0x10
c001ca65:	01 e8                	add    eax,ebp
c001ca67:	01 d0                	add    eax,edx
c001ca69:	81 c2 00 01 00 00    	add    edx,0x100
c001ca6f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca72:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001ca78:	75 af                	jne    c001ca29 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001ca7a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca81:	50                   	push   eax
c001ca82:	50                   	push   eax
c001ca83:	53                   	push   ebx
c001ca84:	57                   	push   edi
c001ca85:	e8 b4 fe ff ff       	call   c001c93e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ca8a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca91:	83 c4 2c             	add    esp,0x2c
c001ca94:	5b                   	pop    ebx
c001ca95:	5e                   	pop    esi
c001ca96:	5f                   	pop    edi
c001ca97:	5d                   	pop    ebp
c001ca98:	c3                   	ret    
c001ca99:	90                   	nop

c001ca9a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ca9a:	55                   	push   ebp
c001ca9b:	57                   	push   edi
c001ca9c:	56                   	push   esi
c001ca9d:	53                   	push   ebx
c001ca9e:	31 db                	xor    ebx,ebx
c001caa0:	83 ec 0c             	sub    esp,0xc
c001caa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001caa7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001caab:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001caae:	f7 c7 01 00 00 00    	test   edi,0x1
c001cab4:	74 7a                	je     c001cb30 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cab6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001caba:	89 d8                	mov    eax,ebx
c001cabc:	c1 e0 07             	shl    eax,0x7
c001cabf:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cac6:	55                   	push   ebp
c001cac7:	56                   	push   esi
c001cac8:	e8 29 fe ff ff       	call   c001c8f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cacd:	5a                   	pop    edx
c001cace:	59                   	pop    ecx
c001cacf:	83 f8 01             	cmp    eax,0x1
c001cad2:	75 21                	jne    c001caf5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cad4:	50                   	push   eax
c001cad5:	53                   	push   ebx
c001cad6:	55                   	push   ebp
c001cad7:	56                   	push   esi
c001cad8:	e8 ab fe ff ff       	call   c001c988 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cadd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cae4:	e8 ea af fe ff       	call   c0007ad3 <malloc>
c001cae9:	89 04 24             	mov    DWORD PTR [esp],eax
c001caec:	89 c5                	mov    ebp,eax
c001caee:	e8 c1 10 00 00       	call   c001dbb4 <SATA::SATA()>
c001caf3:	eb 24                	jmp    c001cb19 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001caf5:	83 f8 04             	cmp    eax,0x4
c001caf8:	75 36                	jne    c001cb30 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cafa:	51                   	push   ecx
c001cafb:	53                   	push   ebx
c001cafc:	55                   	push   ebp
c001cafd:	56                   	push   esi
c001cafe:	e8 85 fe ff ff       	call   c001c988 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb03:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb0a:	e8 c4 af fe ff       	call   c0007ad3 <malloc>
c001cb0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb12:	89 c5                	mov    ebp,eax
c001cb14:	e8 f5 17 00 00       	call   c001e30e <SATAPI::SATAPI()>
c001cb19:	58                   	pop    eax
c001cb1a:	5a                   	pop    edx
c001cb1b:	55                   	push   ebp
c001cb1c:	56                   	push   esi
c001cb1d:	e8 3e fe fe ff       	call   c000c960 <Device::addChild(Device*)>
c001cb22:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb25:	56                   	push   esi
c001cb26:	6a 00                	push   0x0
c001cb28:	53                   	push   ebx
c001cb29:	55                   	push   ebp
c001cb2a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb2d:	83 c4 20             	add    esp,0x20
c001cb30:	d1 ef                	shr    edi,1
c001cb32:	43                   	inc    ebx
c001cb33:	83 fb 20             	cmp    ebx,0x20
c001cb36:	0f 85 72 ff ff ff    	jne    c001caae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb3c:	83 c4 0c             	add    esp,0xc
c001cb3f:	5b                   	pop    ebx
c001cb40:	5e                   	pop    esi
c001cb41:	5f                   	pop    edi
c001cb42:	5d                   	pop    ebp
c001cb43:	c3                   	ret    

c001cb44 <SATABus::open(int, int, void*)>:
c001cb44:	83 ec 14             	sub    esp,0x14
c001cb47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb4b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cb51:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cb57:	52                   	push   edx
c001cb58:	50                   	push   eax
c001cb59:	e8 3c ff ff ff       	call   c001ca9a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cb5e:	31 c0                	xor    eax,eax
c001cb60:	83 c4 1c             	add    esp,0x1c
c001cb63:	c3                   	ret    

c001cb64 <ATA::close(int, int, void*)>:
c001cb64:	83 ec 0c             	sub    esp,0xc
c001cb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb71:	85 c0                	test   eax,eax
c001cb73:	74 0c                	je     c001cb81 <ATA::close(int, int, void*)+0x1d>
c001cb75:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb77:	83 ec 0c             	sub    esp,0xc
c001cb7a:	50                   	push   eax
c001cb7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cb7e:	83 c4 10             	add    esp,0x10
c001cb81:	31 c0                	xor    eax,eax
c001cb83:	83 c4 0c             	add    esp,0xc
c001cb86:	c3                   	ret    
c001cb87:	90                   	nop

c001cb88 <ATA::powerSaving(PowerSavingLevel)>:
c001cb88:	c3                   	ret    
c001cb89:	90                   	nop

c001cb8a <ATA::ATA()>:
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb91:	83 ec 04             	sub    esp,0x4
c001cb94:	68 00 02 00 00       	push   0x200
c001cb99:	68 fd 32 02 c0       	push   0xc00232fd
c001cb9e:	50                   	push   eax
c001cb9f:	e8 8a 01 ff ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cba4:	83 c4 10             	add    esp,0x10
c001cba7:	ba 70 32 02 c0       	mov    edx,0xc0023270
c001cbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb0:	89 10                	mov    DWORD PTR [eax],edx
c001cbb2:	90                   	nop
c001cbb3:	83 c4 0c             	add    esp,0xc
c001cbb6:	c3                   	ret    
c001cbb7:	90                   	nop

c001cbb8 <ATA::flush(bool)>:
c001cbb8:	53                   	push   ebx
c001cbb9:	83 ec 08             	sub    esp,0x8
c001cbbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cbc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbc5:	83 f8 01             	cmp    eax,0x1
c001cbc8:	19 c0                	sbb    eax,eax
c001cbca:	83 e0 fd             	and    eax,0xfffffffd
c001cbcd:	05 ea 00 00 00       	add    eax,0xea
c001cbd2:	50                   	push   eax
c001cbd3:	6a 07                	push   0x7
c001cbd5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbdc:	50                   	push   eax
c001cbdd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbe3:	e8 18 f1 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbe8:	83 c4 0c             	add    esp,0xc
c001cbeb:	6a 00                	push   0x0
c001cbed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbf4:	50                   	push   eax
c001cbf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbfb:	e8 e4 fb ff ff       	call   c001c7e4 <IDE::polling(unsigned char, unsigned int)>
c001cc00:	83 c4 18             	add    esp,0x18
c001cc03:	5b                   	pop    ebx
c001cc04:	c3                   	ret    
c001cc05:	90                   	nop

c001cc06 <ATA::readyForCommand()>:
c001cc06:	56                   	push   esi
c001cc07:	53                   	push   ebx
c001cc08:	53                   	push   ebx
c001cc09:	31 db                	xor    ebx,ebx
c001cc0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc0f:	51                   	push   ecx
c001cc10:	6a 0c                	push   0xc
c001cc12:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc19:	50                   	push   eax
c001cc1a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc20:	e8 9b f1 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001cc25:	83 c4 10             	add    esp,0x10
c001cc28:	a8 88                	test   al,0x88
c001cc2a:	74 1f                	je     c001cc4b <ATA::readyForCommand()+0x45>
c001cc2c:	43                   	inc    ebx
c001cc2d:	83 fb 63             	cmp    ebx,0x63
c001cc30:	7e dd                	jle    c001cc0f <ATA::readyForCommand()+0x9>
c001cc32:	83 ec 0c             	sub    esp,0xc
c001cc35:	6a 0a                	push   0xa
c001cc37:	e8 f0 96 ff ff       	call   c001632c <milliTenthSleep(unsigned int)>
c001cc3c:	83 c4 10             	add    esp,0x10
c001cc3f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc45:	75 c8                	jne    c001cc0f <ATA::readyForCommand()+0x9>
c001cc47:	31 c0                	xor    eax,eax
c001cc49:	eb 02                	jmp    c001cc4d <ATA::readyForCommand()+0x47>
c001cc4b:	b0 01                	mov    al,0x1
c001cc4d:	5a                   	pop    edx
c001cc4e:	5b                   	pop    ebx
c001cc4f:	5e                   	pop    esi
c001cc50:	c3                   	ret    
c001cc51:	90                   	nop

c001cc52 <ATA::access(unsigned long long, int, void*, bool)>:
c001cc52:	55                   	push   ebp
c001cc53:	57                   	push   edi
c001cc54:	56                   	push   esi
c001cc55:	53                   	push   ebx
c001cc56:	83 ec 2c             	sub    esp,0x2c
c001cc59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cc5d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cc61:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cc65:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cc69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc6d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cc71:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cc75:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cc7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc7f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc89:	c1 e0 06             	shl    eax,0x6
c001cc8c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cc94:	74 5b                	je     c001ccf1 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cc96:	89 fa                	mov    edx,edi
c001cc98:	89 f0                	mov    eax,esi
c001cc9a:	c1 ea 1c             	shr    edx,0x1c
c001cc9d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cca1:	89 d1                	mov    ecx,edx
c001cca3:	09 c1                	or     ecx,eax
c001cca5:	74 25                	je     c001cccc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cca7:	31 ed                	xor    ebp,ebp
c001cca9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ccb0:	89 fa                	mov    edx,edi
c001ccb2:	89 f0                	mov    eax,esi
c001ccb4:	0f ad d0             	shrd   eax,edx,cl
c001ccb7:	d3 ea                	shr    edx,cl
c001ccb9:	f6 c1 20             	test   cl,0x20
c001ccbc:	74 02                	je     c001ccc0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ccbe:	89 d0                	mov    eax,edx
c001ccc0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ccc4:	45                   	inc    ebp
c001ccc5:	83 fd 06             	cmp    ebp,0x6
c001ccc8:	75 df                	jne    c001cca9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ccca:	eb 71                	jmp    c001cd3d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cccc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ccd1:	89 f0                	mov    eax,esi
c001ccd3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ccda:	0f ac f8 10          	shrd   eax,edi,0x10
c001ccde:	bf 01 00 00 00       	mov    edi,0x1
c001cce3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cce7:	c1 ee 18             	shr    esi,0x18
c001ccea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ccef:	eb 53                	jmp    c001cd44 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ccf1:	6a 00                	push   0x0
c001ccf3:	6a 3f                	push   0x3f
c001ccf5:	57                   	push   edi
c001ccf6:	56                   	push   esi
c001ccf7:	e8 d4 2a 00 00       	call   c001f7d0 <__umoddi3>
c001ccfc:	83 c4 10             	add    esp,0x10
c001ccff:	40                   	inc    eax
c001cd00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd04:	6a 00                	push   0x0
c001cd06:	68 f0 03 00 00       	push   0x3f0
c001cd0b:	57                   	push   edi
c001cd0c:	56                   	push   esi
c001cd0d:	e8 be 29 00 00       	call   c001f6d0 <__udivdi3>
c001cd12:	83 c4 10             	add    esp,0x10
c001cd15:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd1a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd21:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd26:	6a 00                	push   0x0
c001cd28:	6a 3f                	push   0x3f
c001cd2a:	57                   	push   edi
c001cd2b:	31 ff                	xor    edi,edi
c001cd2d:	56                   	push   esi
c001cd2e:	e8 9d 29 00 00       	call   c001f6d0 <__udivdi3>
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	83 e0 0f             	and    eax,0xf
c001cd39:	89 c6                	mov    esi,eax
c001cd3b:	eb 07                	jmp    c001cd44 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd3d:	31 f6                	xor    esi,esi
c001cd3f:	bf 02 00 00 00       	mov    edi,0x2
c001cd44:	50                   	push   eax
c001cd45:	6a 00                	push   0x0
c001cd47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd4e:	50                   	push   eax
c001cd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd53:	e8 b6 f1 ff ff       	call   c001bf0e <IDE::enableIRQs(unsigned char, bool)>
c001cd58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd5b:	e8 a6 fe ff ff       	call   c001cc06 <ATA::readyForCommand()>
c001cd60:	83 c4 10             	add    esp,0x10
c001cd63:	84 c0                	test   al,al
c001cd65:	75 0a                	jne    c001cd71 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cd67:	be 01 00 00 00       	mov    esi,0x1
c001cd6c:	e9 9b 02 00 00       	jmp    c001d00c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cd71:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cd77:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd7d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cd84:	c1 e0 04             	shl    eax,0x4
c001cd87:	09 c6                	or     esi,eax
c001cd89:	f7 c7 03 00 00 00    	test   edi,0x3
c001cd8f:	75 05                	jne    c001cd96 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cd91:	83 ce a0             	or     esi,0xffffffa0
c001cd94:	eb 03                	jmp    c001cd99 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cd96:	83 ce e0             	or     esi,0xffffffe0
c001cd99:	89 f0                	mov    eax,esi
c001cd9b:	0f b6 f0             	movzx  esi,al
c001cd9e:	56                   	push   esi
c001cd9f:	6a 06                	push   0x6
c001cda1:	51                   	push   ecx
c001cda2:	52                   	push   edx
c001cda3:	e8 58 ef ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cda8:	83 c4 10             	add    esp,0x10
c001cdab:	6a 00                	push   0x0
c001cdad:	6a 01                	push   0x1
c001cdaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb6:	50                   	push   eax
c001cdb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdbd:	e8 3e ef ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdc2:	89 f8                	mov    eax,edi
c001cdc4:	83 c4 10             	add    esp,0x10
c001cdc7:	0f b6 f0             	movzx  esi,al
c001cdca:	83 fe 02             	cmp    esi,0x2
c001cdcd:	75 6e                	jne    c001ce3d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cdcf:	6a 00                	push   0x0
c001cdd1:	6a 08                	push   0x8
c001cdd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdda:	50                   	push   eax
c001cddb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cde1:	e8 1a ef ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cde6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cdeb:	50                   	push   eax
c001cdec:	6a 09                	push   0x9
c001cdee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdf5:	50                   	push   eax
c001cdf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdfc:	e8 ff ee ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce01:	83 c4 20             	add    esp,0x20
c001ce04:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce09:	50                   	push   eax
c001ce0a:	6a 0a                	push   0xa
c001ce0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce13:	50                   	push   eax
c001ce14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce1a:	e8 e1 ee ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce1f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce24:	50                   	push   eax
c001ce25:	6a 0b                	push   0xb
c001ce27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce2e:	50                   	push   eax
c001ce2f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce35:	e8 c6 ee ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce3a:	83 c4 20             	add    esp,0x20
c001ce3d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce42:	50                   	push   eax
c001ce43:	6a 02                	push   0x2
c001ce45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce4c:	50                   	push   eax
c001ce4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce53:	e8 a8 ee ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce58:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ce5d:	50                   	push   eax
c001ce5e:	6a 03                	push   0x3
c001ce60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce67:	50                   	push   eax
c001ce68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce6e:	e8 8d ee ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce73:	83 c4 20             	add    esp,0x20
c001ce76:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ce7b:	50                   	push   eax
c001ce7c:	6a 04                	push   0x4
c001ce7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce85:	50                   	push   eax
c001ce86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce8c:	e8 6f ee ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce96:	50                   	push   eax
c001ce97:	6a 05                	push   0x5
c001ce99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cea0:	50                   	push   eax
c001cea1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea7:	e8 54 ee ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceac:	83 c4 20             	add    esp,0x20
c001ceaf:	83 fe 02             	cmp    esi,0x2
c001ceb2:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001ceb7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cebc:	85 c9                	test   ecx,ecx
c001cebe:	74 07                	je     c001cec7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cec0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cec5:	75 47                	jne    c001cf0e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cec7:	89 f8                	mov    eax,edi
c001cec9:	0f b6 f8             	movzx  edi,al
c001cecc:	31 c0                	xor    eax,eax
c001cece:	83 ff 02             	cmp    edi,0x2
c001ced1:	0f 95 c0             	setne  al
c001ced4:	89 c6                	mov    esi,eax
c001ced6:	74 0c                	je     c001cee4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001ced8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cedd:	b8 30 00 00 00       	mov    eax,0x30
c001cee2:	75 2f                	jne    c001cf13 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cee4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cee8:	83 f2 01             	xor    edx,0x1
c001ceeb:	85 c9                	test   ecx,ecx
c001ceed:	74 09                	je     c001cef8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001ceef:	84 d2                	test   dl,dl
c001cef1:	b8 24 00 00 00       	mov    eax,0x24
c001cef6:	75 1b                	jne    c001cf13 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cef8:	85 f6                	test   esi,esi
c001cefa:	0f 84 67 fe ff ff    	je     c001cd67 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf00:	84 d2                	test   dl,dl
c001cf02:	b8 20 00 00 00       	mov    eax,0x20
c001cf07:	75 0a                	jne    c001cf13 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf09:	e9 59 fe ff ff       	jmp    c001cd67 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf0e:	b8 34 00 00 00       	mov    eax,0x34
c001cf13:	50                   	push   eax
c001cf14:	6a 07                	push   0x7
c001cf16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf1d:	50                   	push   eax
c001cf1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf24:	e8 d7 ed ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf29:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf2d:	83 c4 10             	add    esp,0x10
c001cf30:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cf35:	85 f6                	test   esi,esi
c001cf37:	0f 84 b5 00 00 00    	je     c001cff2 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cf3d:	50                   	push   eax
c001cf3e:	6a 01                	push   0x1
c001cf40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf47:	50                   	push   eax
c001cf48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf4e:	e8 91 f8 ff ff       	call   c001c7e4 <IDE::polling(unsigned char, unsigned int)>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf5c:	0f b6 c0             	movzx  eax,al
c001cf5f:	85 c0                	test   eax,eax
c001cf61:	74 1f                	je     c001cf82 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cf63:	50                   	push   eax
c001cf64:	89 c6                	mov    esi,eax
c001cf66:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf6d:	0f b6 d2             	movzx  edx,dl
c001cf70:	50                   	push   eax
c001cf71:	52                   	push   edx
c001cf72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf78:	e8 ad f7 ff ff       	call   c001c72a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf7d:	e9 87 00 00 00       	jmp    c001d009 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cf82:	85 ed                	test   ebp,ebp
c001cf84:	74 3b                	je     c001cfc1 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cf86:	31 ff                	xor    edi,edi
c001cf88:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cf8c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cf90:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cf95:	50                   	push   eax
c001cf96:	50                   	push   eax
c001cf97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf9e:	50                   	push   eax
c001cf9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfa5:	e8 44 ed ff ff       	call   c001bcee <IDE::getBase(unsigned char)>
c001cfaa:	89 c2                	mov    edx,eax
c001cfac:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cfb1:	66 ef                	out    dx,ax
c001cfb3:	47                   	inc    edi
c001cfb4:	83 c4 10             	add    esp,0x10
c001cfb7:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cfbd:	75 c9                	jne    c001cf88 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cfbf:	eb 23                	jmp    c001cfe4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cfc1:	51                   	push   ecx
c001cfc2:	0f b6 d2             	movzx  edx,dl
c001cfc5:	51                   	push   ecx
c001cfc6:	52                   	push   edx
c001cfc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfcd:	e8 1c ed ff ff       	call   c001bcee <IDE::getBase(unsigned char)>
c001cfd2:	b9 00 01 00 00       	mov    ecx,0x100
c001cfd7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cfdb:	89 c2                	mov    edx,eax
c001cfdd:	fc                   	cld    
c001cfde:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cfe1:	83 c4 10             	add    esp,0x10
c001cfe4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cfec:	4e                   	dec    esi
c001cfed:	e9 43 ff ff ff       	jmp    c001cf35 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cff2:	31 f6                	xor    esi,esi
c001cff4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cff9:	74 11                	je     c001d00c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cffb:	50                   	push   eax
c001cffc:	50                   	push   eax
c001cffd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d002:	50                   	push   eax
c001d003:	53                   	push   ebx
c001d004:	e8 af fb ff ff       	call   c001cbb8 <ATA::flush(bool)>
c001d009:	83 c4 10             	add    esp,0x10
c001d00c:	83 c4 2c             	add    esp,0x2c
c001d00f:	89 f0                	mov    eax,esi
c001d011:	5b                   	pop    ebx
c001d012:	5e                   	pop    esi
c001d013:	5f                   	pop    edi
c001d014:	5d                   	pop    ebp
c001d015:	c3                   	ret    

c001d016 <ATA::detectCHS()>:
c001d016:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d01a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d020:	c1 e0 06             	shl    eax,0x6
c001d023:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d029:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d033:	c7 44 24 04 54 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023254
c001d03b:	e9 e7 44 ff ff       	jmp    c0011527 <KePanic(char const*)>

c001d040 <ATA::open(int, int, void*)>:
c001d040:	53                   	push   ebx
c001d041:	83 ec 08             	sub    esp,0x8
c001d044:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d04c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d050:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d056:	c1 e0 06             	shl    eax,0x6
c001d059:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d05f:	01 d0                	add    eax,edx
c001d061:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d068:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d06e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d075:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d07f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d086:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d08c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d093:	75 0c                	jne    c001d0a1 <ATA::open(int, int, void*)+0x61>
c001d095:	83 ec 0c             	sub    esp,0xc
c001d098:	53                   	push   ebx
c001d099:	e8 78 ff ff ff       	call   c001d016 <ATA::detectCHS()>
c001d09e:	83 c4 10             	add    esp,0x10
c001d0a1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d0a7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0ad:	c1 e0 06             	shl    eax,0x6
c001d0b0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d0b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0c1:	d1 e8                	shr    eax,1
c001d0c3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d0c9:	6a 04                	push   0x4
c001d0cb:	6a 0c                	push   0xc
c001d0cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0d4:	50                   	push   eax
c001d0d5:	52                   	push   edx
c001d0d6:	e8 25 ec ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0db:	90                   	nop
c001d0dc:	90                   	nop
c001d0dd:	6a 00                	push   0x0
c001d0df:	6a 0c                	push   0xc
c001d0e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0e8:	50                   	push   eax
c001d0e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0ef:	e8 0c ec ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0f4:	83 c4 14             	add    esp,0x14
c001d0f7:	53                   	push   ebx
c001d0f8:	e8 99 fc fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001d0fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d100:	e8 dd 0e ff ff       	call   c000dfe2 <createPartitionsForDisk(PhysicalDisk*)>
c001d105:	83 c4 18             	add    esp,0x18
c001d108:	31 c0                	xor    eax,eax
c001d10a:	5b                   	pop    ebx
c001d10b:	c3                   	ret    

c001d10c <combineCharAndColour(char, unsigned char)>:
c001d10c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d111:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d117:	c1 e0 08             	shl    eax,0x8
c001d11a:	09 d0                	or     eax,edx
c001d11c:	c3                   	ret    

c001d11d <combineColours(unsigned char, unsigned char)>:
c001d11d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d122:	c1 e0 04             	shl    eax,0x4
c001d125:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d129:	c3                   	ret    

c001d12a <ATA::read(unsigned long long, int, void*)>:
c001d12a:	55                   	push   ebp
c001d12b:	57                   	push   edi
c001d12c:	56                   	push   esi
c001d12d:	be 04 00 00 00       	mov    esi,0x4
c001d132:	53                   	push   ebx
c001d133:	83 ec 0c             	sub    esp,0xc
c001d136:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d13a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d13e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d142:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d146:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d149:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d14f:	0f 87 a1 01 00 00    	ja     c001d2f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d155:	85 c9                	test   ecx,ecx
c001d157:	be 06 00 00 00       	mov    esi,0x6
c001d15c:	0f 84 94 01 00 00    	je     c001d2f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d162:	55                   	push   ebp
c001d163:	55                   	push   ebp
c001d164:	6a 00                	push   0x0
c001d166:	51                   	push   ecx
c001d167:	53                   	push   ebx
c001d168:	52                   	push   edx
c001d169:	50                   	push   eax
c001d16a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d16e:	e8 df fa ff ff       	call   c001cc52 <ATA::access(unsigned long long, int, void*, bool)>
c001d173:	83 c4 20             	add    esp,0x20
c001d176:	85 c0                	test   eax,eax
c001d178:	89 c6                	mov    esi,eax
c001d17a:	0f 85 71 01 00 00    	jne    c001d2f1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d180:	50                   	push   eax
c001d181:	bd 10 27 00 00       	mov    ebp,0x2710
c001d186:	50                   	push   eax
c001d187:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d18d:	6a 0f                	push   0xf
c001d18f:	6a 00                	push   0x0
c001d191:	89 da                	mov    edx,ebx
c001d193:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d199:	e8 7f ff ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001d19e:	59                   	pop    ecx
c001d19f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1a4:	5b                   	pop    ebx
c001d1a5:	0f b6 d8             	movzx  ebx,al
c001d1a8:	89 d0                	mov    eax,edx
c001d1aa:	53                   	push   ebx
c001d1ab:	99                   	cdq    
c001d1ac:	f7 fd                	idiv   ebp
c001d1ae:	99                   	cdq    
c001d1af:	f7 f9                	idiv   ecx
c001d1b1:	83 c2 30             	add    edx,0x30
c001d1b4:	0f b6 d2             	movzx  edx,dl
c001d1b7:	52                   	push   edx
c001d1b8:	e8 4f ff ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d1bd:	5f                   	pop    edi
c001d1be:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1c3:	5a                   	pop    edx
c001d1c4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1ca:	53                   	push   ebx
c001d1cb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1d0:	99                   	cdq    
c001d1d1:	f7 ff                	idiv   edi
c001d1d3:	99                   	cdq    
c001d1d4:	f7 f9                	idiv   ecx
c001d1d6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1d9:	0f b6 c0             	movzx  eax,al
c001d1dc:	50                   	push   eax
c001d1dd:	e8 2a ff ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d1e2:	5f                   	pop    edi
c001d1e3:	bf 64 00 00 00       	mov    edi,0x64
c001d1e8:	5a                   	pop    edx
c001d1e9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1ef:	53                   	push   ebx
c001d1f0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1f5:	99                   	cdq    
c001d1f6:	f7 ff                	idiv   edi
c001d1f8:	99                   	cdq    
c001d1f9:	f7 f9                	idiv   ecx
c001d1fb:	8d 42 30             	lea    eax,[edx+0x30]
c001d1fe:	0f b6 c0             	movzx  eax,al
c001d201:	50                   	push   eax
c001d202:	e8 05 ff ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d207:	5a                   	pop    edx
c001d208:	5a                   	pop    edx
c001d209:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d20f:	53                   	push   ebx
c001d210:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d215:	99                   	cdq    
c001d216:	f7 f9                	idiv   ecx
c001d218:	99                   	cdq    
c001d219:	f7 f9                	idiv   ecx
c001d21b:	8d 42 30             	lea    eax,[edx+0x30]
c001d21e:	0f b6 c0             	movzx  eax,al
c001d221:	50                   	push   eax
c001d222:	e8 e5 fe ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d227:	5a                   	pop    edx
c001d228:	5a                   	pop    edx
c001d229:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d22f:	53                   	push   ebx
c001d230:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d235:	99                   	cdq    
c001d236:	f7 f9                	idiv   ecx
c001d238:	83 c2 30             	add    edx,0x30
c001d23b:	0f b6 d2             	movzx  edx,dl
c001d23e:	52                   	push   edx
c001d23f:	e8 c8 fe ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d244:	5a                   	pop    edx
c001d245:	5a                   	pop    edx
c001d246:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d24c:	53                   	push   ebx
c001d24d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d252:	99                   	cdq    
c001d253:	f7 fd                	idiv   ebp
c001d255:	99                   	cdq    
c001d256:	f7 f9                	idiv   ecx
c001d258:	8d 42 30             	lea    eax,[edx+0x30]
c001d25b:	0f b6 c0             	movzx  eax,al
c001d25e:	50                   	push   eax
c001d25f:	e8 a8 fe ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d264:	5d                   	pop    ebp
c001d265:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d26a:	5a                   	pop    edx
c001d26b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d271:	53                   	push   ebx
c001d272:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d277:	99                   	cdq    
c001d278:	f7 fd                	idiv   ebp
c001d27a:	99                   	cdq    
c001d27b:	f7 f9                	idiv   ecx
c001d27d:	8d 42 30             	lea    eax,[edx+0x30]
c001d280:	0f b6 c0             	movzx  eax,al
c001d283:	50                   	push   eax
c001d284:	e8 83 fe ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d289:	5d                   	pop    ebp
c001d28a:	5a                   	pop    edx
c001d28b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d291:	53                   	push   ebx
c001d292:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d297:	99                   	cdq    
c001d298:	f7 ff                	idiv   edi
c001d29a:	99                   	cdq    
c001d29b:	f7 f9                	idiv   ecx
c001d29d:	8d 42 30             	lea    eax,[edx+0x30]
c001d2a0:	0f b6 c0             	movzx  eax,al
c001d2a3:	50                   	push   eax
c001d2a4:	e8 63 fe ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d2a9:	5f                   	pop    edi
c001d2aa:	5d                   	pop    ebp
c001d2ab:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2b1:	53                   	push   ebx
c001d2b2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2b7:	99                   	cdq    
c001d2b8:	f7 f9                	idiv   ecx
c001d2ba:	99                   	cdq    
c001d2bb:	f7 f9                	idiv   ecx
c001d2bd:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c0:	0f b6 c0             	movzx  eax,al
c001d2c3:	50                   	push   eax
c001d2c4:	e8 43 fe ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d2c9:	5a                   	pop    edx
c001d2ca:	5f                   	pop    edi
c001d2cb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2d1:	53                   	push   ebx
c001d2d2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2d7:	99                   	cdq    
c001d2d8:	f7 f9                	idiv   ecx
c001d2da:	83 c2 30             	add    edx,0x30
c001d2dd:	0f b6 d2             	movzx  edx,dl
c001d2e0:	52                   	push   edx
c001d2e1:	e8 26 fe ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d2ef:	eb 05                	jmp    c001d2f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2f1:	be 01 00 00 00       	mov    esi,0x1
c001d2f6:	83 c4 0c             	add    esp,0xc
c001d2f9:	89 f0                	mov    eax,esi
c001d2fb:	5b                   	pop    ebx
c001d2fc:	5e                   	pop    esi
c001d2fd:	5f                   	pop    edi
c001d2fe:	5d                   	pop    ebp
c001d2ff:	c3                   	ret    

c001d300 <ATA::write(unsigned long long, int, void*)>:
c001d300:	55                   	push   ebp
c001d301:	57                   	push   edi
c001d302:	56                   	push   esi
c001d303:	be 04 00 00 00       	mov    esi,0x4
c001d308:	53                   	push   ebx
c001d309:	83 ec 0c             	sub    esp,0xc
c001d30c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d310:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d314:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d318:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d31c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d31f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d325:	0f 87 9c 01 00 00    	ja     c001d4c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d32b:	85 c9                	test   ecx,ecx
c001d32d:	be 06 00 00 00       	mov    esi,0x6
c001d332:	0f 84 8f 01 00 00    	je     c001d4c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d338:	55                   	push   ebp
c001d339:	55                   	push   ebp
c001d33a:	6a 01                	push   0x1
c001d33c:	51                   	push   ecx
c001d33d:	53                   	push   ebx
c001d33e:	52                   	push   edx
c001d33f:	50                   	push   eax
c001d340:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d344:	e8 09 f9 ff ff       	call   c001cc52 <ATA::access(unsigned long long, int, void*, bool)>
c001d349:	83 c4 20             	add    esp,0x20
c001d34c:	85 c0                	test   eax,eax
c001d34e:	89 c6                	mov    esi,eax
c001d350:	0f 85 6c 01 00 00    	jne    c001d4c2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d356:	50                   	push   eax
c001d357:	bd 10 27 00 00       	mov    ebp,0x2710
c001d35c:	50                   	push   eax
c001d35d:	6a 0f                	push   0xf
c001d35f:	6a 00                	push   0x0
c001d361:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d367:	e8 b1 fd ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001d36c:	5a                   	pop    edx
c001d36d:	59                   	pop    ecx
c001d36e:	b9 0a 00 00 00       	mov    ecx,0xa
c001d373:	0f b6 d8             	movzx  ebx,al
c001d376:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d37b:	53                   	push   ebx
c001d37c:	99                   	cdq    
c001d37d:	f7 fd                	idiv   ebp
c001d37f:	99                   	cdq    
c001d380:	f7 f9                	idiv   ecx
c001d382:	8d 42 30             	lea    eax,[edx+0x30]
c001d385:	0f b6 c0             	movzx  eax,al
c001d388:	50                   	push   eax
c001d389:	e8 7e fd ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d38e:	5f                   	pop    edi
c001d38f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d394:	5a                   	pop    edx
c001d395:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d39b:	53                   	push   ebx
c001d39c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3a1:	99                   	cdq    
c001d3a2:	f7 ff                	idiv   edi
c001d3a4:	99                   	cdq    
c001d3a5:	f7 f9                	idiv   ecx
c001d3a7:	8d 42 30             	lea    eax,[edx+0x30]
c001d3aa:	0f b6 c0             	movzx  eax,al
c001d3ad:	50                   	push   eax
c001d3ae:	e8 59 fd ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d3b3:	5f                   	pop    edi
c001d3b4:	bf 64 00 00 00       	mov    edi,0x64
c001d3b9:	5a                   	pop    edx
c001d3ba:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3c0:	53                   	push   ebx
c001d3c1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3c6:	99                   	cdq    
c001d3c7:	f7 ff                	idiv   edi
c001d3c9:	99                   	cdq    
c001d3ca:	f7 f9                	idiv   ecx
c001d3cc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3cf:	0f b6 c0             	movzx  eax,al
c001d3d2:	50                   	push   eax
c001d3d3:	e8 34 fd ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d3d8:	5a                   	pop    edx
c001d3d9:	5a                   	pop    edx
c001d3da:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d3e0:	53                   	push   ebx
c001d3e1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3e6:	99                   	cdq    
c001d3e7:	f7 f9                	idiv   ecx
c001d3e9:	99                   	cdq    
c001d3ea:	f7 f9                	idiv   ecx
c001d3ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ef:	0f b6 c0             	movzx  eax,al
c001d3f2:	50                   	push   eax
c001d3f3:	e8 14 fd ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d3f8:	5a                   	pop    edx
c001d3f9:	5a                   	pop    edx
c001d3fa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d400:	53                   	push   ebx
c001d401:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d406:	99                   	cdq    
c001d407:	f7 f9                	idiv   ecx
c001d409:	83 c2 30             	add    edx,0x30
c001d40c:	0f b6 d2             	movzx  edx,dl
c001d40f:	52                   	push   edx
c001d410:	e8 f7 fc ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d415:	5a                   	pop    edx
c001d416:	5a                   	pop    edx
c001d417:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d41d:	53                   	push   ebx
c001d41e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d423:	99                   	cdq    
c001d424:	f7 fd                	idiv   ebp
c001d426:	99                   	cdq    
c001d427:	f7 f9                	idiv   ecx
c001d429:	8d 42 30             	lea    eax,[edx+0x30]
c001d42c:	0f b6 c0             	movzx  eax,al
c001d42f:	50                   	push   eax
c001d430:	e8 d7 fc ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d435:	5d                   	pop    ebp
c001d436:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d43b:	5a                   	pop    edx
c001d43c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d442:	53                   	push   ebx
c001d443:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d448:	99                   	cdq    
c001d449:	f7 fd                	idiv   ebp
c001d44b:	99                   	cdq    
c001d44c:	f7 f9                	idiv   ecx
c001d44e:	8d 42 30             	lea    eax,[edx+0x30]
c001d451:	0f b6 c0             	movzx  eax,al
c001d454:	50                   	push   eax
c001d455:	e8 b2 fc ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d45a:	5d                   	pop    ebp
c001d45b:	5a                   	pop    edx
c001d45c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d462:	53                   	push   ebx
c001d463:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d468:	99                   	cdq    
c001d469:	f7 ff                	idiv   edi
c001d46b:	99                   	cdq    
c001d46c:	f7 f9                	idiv   ecx
c001d46e:	8d 42 30             	lea    eax,[edx+0x30]
c001d471:	0f b6 c0             	movzx  eax,al
c001d474:	50                   	push   eax
c001d475:	e8 92 fc ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d47a:	5f                   	pop    edi
c001d47b:	5d                   	pop    ebp
c001d47c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d482:	53                   	push   ebx
c001d483:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d488:	99                   	cdq    
c001d489:	f7 f9                	idiv   ecx
c001d48b:	99                   	cdq    
c001d48c:	f7 f9                	idiv   ecx
c001d48e:	8d 42 30             	lea    eax,[edx+0x30]
c001d491:	0f b6 c0             	movzx  eax,al
c001d494:	50                   	push   eax
c001d495:	e8 72 fc ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d49a:	5a                   	pop    edx
c001d49b:	5f                   	pop    edi
c001d49c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4a2:	53                   	push   ebx
c001d4a3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4a8:	99                   	cdq    
c001d4a9:	f7 f9                	idiv   ecx
c001d4ab:	83 c2 30             	add    edx,0x30
c001d4ae:	0f b6 d2             	movzx  edx,dl
c001d4b1:	52                   	push   edx
c001d4b2:	e8 55 fc ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001d4b7:	83 c4 10             	add    esp,0x10
c001d4ba:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4c0:	eb 05                	jmp    c001d4c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4c2:	be 01 00 00 00       	mov    esi,0x1
c001d4c7:	83 c4 0c             	add    esp,0xc
c001d4ca:	89 f0                	mov    eax,esi
c001d4cc:	5b                   	pop    ebx
c001d4cd:	5e                   	pop    esi
c001d4ce:	5f                   	pop    edi
c001d4cf:	5d                   	pop    ebp
c001d4d0:	c3                   	ret    
c001d4d1:	90                   	nop

c001d4d2 <ATAPI::write(unsigned long long, int, void*)>:
c001d4d2:	b8 03 00 00 00       	mov    eax,0x3
c001d4d7:	c3                   	ret    

c001d4d8 <ATAPI::close(int, int, void*)>:
c001d4d8:	83 ec 0c             	sub    esp,0xc
c001d4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4e5:	85 c0                	test   eax,eax
c001d4e7:	74 0c                	je     c001d4f5 <ATAPI::close(int, int, void*)+0x1d>
c001d4e9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4eb:	83 ec 0c             	sub    esp,0xc
c001d4ee:	50                   	push   eax
c001d4ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d4f2:	83 c4 10             	add    esp,0x10
c001d4f5:	31 c0                	xor    eax,eax
c001d4f7:	83 c4 0c             	add    esp,0xc
c001d4fa:	c3                   	ret    
c001d4fb:	90                   	nop

c001d4fc <ATAPI::ATAPI()>:
c001d4fc:	83 ec 0c             	sub    esp,0xc
c001d4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d503:	83 ec 04             	sub    esp,0x4
c001d506:	68 00 08 00 00       	push   0x800
c001d50b:	68 9d 33 02 c0       	push   0xc002339d
c001d510:	50                   	push   eax
c001d511:	e8 18 f8 fe ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c001d51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d522:	89 10                	mov    DWORD PTR [eax],edx
c001d524:	90                   	nop
c001d525:	83 c4 0c             	add    esp,0xc
c001d528:	c3                   	ret    
c001d529:	90                   	nop

c001d52a <ATAPI::readyForCommand()>:
c001d52a:	56                   	push   esi
c001d52b:	53                   	push   ebx
c001d52c:	53                   	push   ebx
c001d52d:	31 db                	xor    ebx,ebx
c001d52f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d533:	51                   	push   ecx
c001d534:	6a 0c                	push   0xc
c001d536:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d53d:	50                   	push   eax
c001d53e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d544:	e8 77 e8 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001d549:	83 c4 10             	add    esp,0x10
c001d54c:	a8 88                	test   al,0x88
c001d54e:	74 25                	je     c001d575 <ATAPI::readyForCommand()+0x4b>
c001d550:	43                   	inc    ebx
c001d551:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d557:	7e da                	jle    c001d533 <ATAPI::readyForCommand()+0x9>
c001d559:	83 ec 0c             	sub    esp,0xc
c001d55c:	68 5e 01 00 00       	push   0x15e
c001d561:	e8 c6 8d ff ff       	call   c001632c <milliTenthSleep(unsigned int)>
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d56f:	75 c2                	jne    c001d533 <ATAPI::readyForCommand()+0x9>
c001d571:	31 c0                	xor    eax,eax
c001d573:	eb 02                	jmp    c001d577 <ATAPI::readyForCommand()+0x4d>
c001d575:	b0 01                	mov    al,0x1
c001d577:	5a                   	pop    edx
c001d578:	5b                   	pop    ebx
c001d579:	5e                   	pop    esi
c001d57a:	c3                   	ret    
c001d57b:	90                   	nop

c001d57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d57c:	55                   	push   ebp
c001d57d:	57                   	push   edi
c001d57e:	56                   	push   esi
c001d57f:	53                   	push   ebx
c001d580:	83 ec 20             	sub    esp,0x20
c001d583:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d587:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d58b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d58f:	6a 01                	push   0x1
c001d591:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d598:	50                   	push   eax
c001d599:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d59f:	e8 6a e9 ff ff       	call   c001bf0e <IDE::enableIRQs(unsigned char, bool)>
c001d5a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5ab:	59                   	pop    ecx
c001d5ac:	5e                   	pop    esi
c001d5ad:	50                   	push   eax
c001d5ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5b4:	e8 21 e7 ff ff       	call   c001bcda <IDE::prepareInterrupt(unsigned char)>
c001d5b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5bc:	e8 69 ff ff ff       	call   c001d52a <ATAPI::readyForCommand()>
c001d5c1:	83 c4 10             	add    esp,0x10
c001d5c4:	84 c0                	test   al,al
c001d5c6:	75 0a                	jne    c001d5d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d5c8:	bb 01 00 00 00       	mov    ebx,0x1
c001d5cd:	e9 5f 02 00 00       	jmp    c001d831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d5d2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d5d8:	c1 e0 04             	shl    eax,0x4
c001d5db:	0f b6 c0             	movzx  eax,al
c001d5de:	50                   	push   eax
c001d5df:	6a 06                	push   0x6
c001d5e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5e8:	50                   	push   eax
c001d5e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5ef:	e8 0c e7 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5f4:	6a 00                	push   0x0
c001d5f6:	6a 01                	push   0x1
c001d5f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5ff:	50                   	push   eax
c001d600:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d606:	e8 f5 e6 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d60b:	83 c4 20             	add    esp,0x20
c001d60e:	0f b6 c3             	movzx  eax,bl
c001d611:	50                   	push   eax
c001d612:	0f b6 df             	movzx  ebx,bh
c001d615:	6a 04                	push   0x4
c001d617:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d61e:	50                   	push   eax
c001d61f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d625:	e8 d6 e6 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d62a:	53                   	push   ebx
c001d62b:	6a 05                	push   0x5
c001d62d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d634:	50                   	push   eax
c001d635:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d63b:	e8 c0 e6 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d640:	83 c4 20             	add    esp,0x20
c001d643:	68 a0 00 00 00       	push   0xa0
c001d648:	6a 07                	push   0x7
c001d64a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d651:	50                   	push   eax
c001d652:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d658:	e8 a3 e6 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d65d:	83 c4 0c             	add    esp,0xc
c001d660:	6a 01                	push   0x1
c001d662:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d669:	50                   	push   eax
c001d66a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d670:	e8 6f f1 ff ff       	call   c001c7e4 <IDE::polling(unsigned char, unsigned int)>
c001d675:	83 c4 10             	add    esp,0x10
c001d678:	0f b6 d8             	movzx  ebx,al
c001d67b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d681:	85 db                	test   ebx,ebx
c001d683:	74 20                	je     c001d6a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d685:	53                   	push   ebx
c001d686:	0f b6 c0             	movzx  eax,al
c001d689:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d690:	52                   	push   edx
c001d691:	50                   	push   eax
c001d692:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d698:	e8 8d f0 ff ff       	call   c001c72a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d69d:	83 c4 10             	add    esp,0x10
c001d6a0:	e9 8c 01 00 00       	jmp    c001d831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6a5:	52                   	push   edx
c001d6a6:	0f b6 c0             	movzx  eax,al
c001d6a9:	52                   	push   edx
c001d6aa:	50                   	push   eax
c001d6ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6b1:	e8 38 e6 ff ff       	call   c001bcee <IDE::getBase(unsigned char)>
c001d6b6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6ba:	b9 06 00 00 00       	mov    ecx,0x6
c001d6bf:	89 c2                	mov    edx,eax
c001d6c1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6c4:	89 e8                	mov    eax,ebp
c001d6c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d6ca:	83 c4 10             	add    esp,0x10
c001d6cd:	0f b6 c0             	movzx  eax,al
c001d6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6d4:	85 db                	test   ebx,ebx
c001d6d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d6dc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d6e3:	0f 84 eb 00 00 00    	je     c001d7d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d6e9:	55                   	push   ebp
c001d6ea:	55                   	push   ebp
c001d6eb:	52                   	push   edx
c001d6ec:	50                   	push   eax
c001d6ed:	e8 82 e7 ff ff       	call   c001be74 <IDE::waitInterrupt(unsigned char)>
c001d6f2:	83 c4 10             	add    esp,0x10
c001d6f5:	84 c0                	test   al,al
c001d6f7:	0f 84 cb fe ff ff    	je     c001d5c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d6fd:	56                   	push   esi
c001d6fe:	56                   	push   esi
c001d6ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d706:	50                   	push   eax
c001d707:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d70d:	e8 c8 e5 ff ff       	call   c001bcda <IDE::prepareInterrupt(unsigned char)>
c001d712:	83 c4 0c             	add    esp,0xc
c001d715:	6a 04                	push   0x4
c001d717:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d71e:	50                   	push   eax
c001d71f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d725:	e8 96 e6 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001d72a:	83 c4 0c             	add    esp,0xc
c001d72d:	6a 05                	push   0x5
c001d72f:	89 c6                	mov    esi,eax
c001d731:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d738:	50                   	push   eax
c001d739:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d73f:	e8 7c e6 ff ff       	call   c001bdc0 <IDE::read(unsigned char, unsigned char)>
c001d744:	83 c4 10             	add    esp,0x10
c001d747:	0f b6 e8             	movzx  ebp,al
c001d74a:	89 f0                	mov    eax,esi
c001d74c:	c1 e5 08             	shl    ebp,0x8
c001d74f:	0f b6 f0             	movzx  esi,al
c001d752:	09 f5                	or     ebp,esi
c001d754:	31 f6                	xor    esi,esi
c001d756:	d1 fd                	sar    ebp,1
c001d758:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d75d:	74 5c                	je     c001d7bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d75f:	39 ee                	cmp    esi,ebp
c001d761:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d767:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d76e:	75 0d                	jne    c001d77d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d770:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d773:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d777:	4b                   	dec    ebx
c001d778:	e9 57 ff ff ff       	jmp    c001d6d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d77d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d781:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d785:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d78a:	51                   	push   ecx
c001d78b:	51                   	push   ecx
c001d78c:	52                   	push   edx
c001d78d:	50                   	push   eax
c001d78e:	e8 5b e5 ff ff       	call   c001bcee <IDE::getBase(unsigned char)>
c001d793:	89 c2                	mov    edx,eax
c001d795:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d79a:	66 ef                	out    dx,ax
c001d79c:	46                   	inc    esi
c001d79d:	83 c4 10             	add    esp,0x10
c001d7a0:	eb bd                	jmp    c001d75f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d7a2:	51                   	push   ecx
c001d7a3:	51                   	push   ecx
c001d7a4:	52                   	push   edx
c001d7a5:	50                   	push   eax
c001d7a6:	e8 43 e5 ff ff       	call   c001bcee <IDE::getBase(unsigned char)>
c001d7ab:	89 c2                	mov    edx,eax
c001d7ad:	66 ed                	in     ax,dx
c001d7af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d7b3:	83 c4 10             	add    esp,0x10
c001d7b6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d7ba:	46                   	inc    esi
c001d7bb:	39 ee                	cmp    esi,ebp
c001d7bd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7c3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7ca:	75 d6                	jne    c001d7a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d7cc:	01 f6                	add    esi,esi
c001d7ce:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d7d2:	eb a3                	jmp    c001d777 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d7d4:	51                   	push   ecx
c001d7d5:	51                   	push   ecx
c001d7d6:	52                   	push   edx
c001d7d7:	50                   	push   eax
c001d7d8:	e8 97 e6 ff ff       	call   c001be74 <IDE::waitInterrupt(unsigned char)>
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	84 c0                	test   al,al
c001d7e2:	0f 84 e0 fd ff ff    	je     c001d5c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d7e8:	52                   	push   edx
c001d7e9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d7ee:	52                   	push   edx
c001d7ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7f6:	50                   	push   eax
c001d7f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7fd:	e8 d8 e4 ff ff       	call   c001bcda <IDE::prepareInterrupt(unsigned char)>
c001d802:	83 c4 10             	add    esp,0x10
c001d805:	50                   	push   eax
c001d806:	50                   	push   eax
c001d807:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d80e:	50                   	push   eax
c001d80f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d815:	e8 d4 e4 ff ff       	call   c001bcee <IDE::getBase(unsigned char)>
c001d81a:	8d 50 07             	lea    edx,[eax+0x7]
c001d81d:	ec                   	in     al,dx
c001d81e:	83 c4 10             	add    esp,0x10
c001d821:	a8 88                	test   al,0x88
c001d823:	74 0a                	je     c001d82f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d825:	4b                   	dec    ebx
c001d826:	75 dd                	jne    c001d805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d828:	bb 02 00 00 00       	mov    ebx,0x2
c001d82d:	eb 02                	jmp    c001d831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d82f:	31 db                	xor    ebx,ebx
c001d831:	83 c4 1c             	add    esp,0x1c
c001d834:	89 d8                	mov    eax,ebx
c001d836:	5b                   	pop    ebx
c001d837:	5e                   	pop    esi
c001d838:	5f                   	pop    edi
c001d839:	5d                   	pop    ebp
c001d83a:	c3                   	ret    
c001d83b:	90                   	nop

c001d83c <ATAPI::diskRemoved()>:
c001d83c:	53                   	push   ebx
c001d83d:	83 ec 14             	sub    esp,0x14
c001d840:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d844:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d84b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d851:	e8 7a 04 ff ff       	call   c000dcd0 <LogicalDisk::unmount()>
c001d856:	58                   	pop    eax
c001d857:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d85d:	e8 52 0e ff ff       	call   c000e6b4 <VCache::writeWriteBuffer()>
c001d862:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d868:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d86c:	83 c4 18             	add    esp,0x18
c001d86f:	5b                   	pop    ebx
c001d870:	e9 2f 0e ff ff       	jmp    c000e6a4 <VCache::invalidateReadBuffer()>
c001d875:	90                   	nop

c001d876 <ATAPI::eject()>:
c001d876:	57                   	push   edi
c001d877:	b9 03 00 00 00       	mov    ecx,0x3
c001d87c:	53                   	push   ebx
c001d87d:	83 ec 14             	sub    esp,0x14
c001d880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d884:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d888:	fc                   	cld    
c001d889:	31 c0                	xor    eax,eax
c001d88b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d88d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d892:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d897:	50                   	push   eax
c001d898:	50                   	push   eax
c001d899:	6a 00                	push   0x0
c001d89b:	6a 00                	push   0x0
c001d89d:	6a 00                	push   0x0
c001d89f:	6a 02                	push   0x2
c001d8a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d8a5:	50                   	push   eax
c001d8a6:	53                   	push   ebx
c001d8a7:	e8 d0 fc ff ff       	call   c001d57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8ac:	83 c4 14             	add    esp,0x14
c001d8af:	53                   	push   ebx
c001d8b0:	e8 87 ff ff ff       	call   c001d83c <ATAPI::diskRemoved()>
c001d8b5:	83 c4 24             	add    esp,0x24
c001d8b8:	31 c0                	xor    eax,eax
c001d8ba:	5b                   	pop    ebx
c001d8bb:	5f                   	pop    edi
c001d8bc:	c3                   	ret    
c001d8bd:	90                   	nop

c001d8be <ATAPI::diskInserted()>:
c001d8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8c2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d8c9:	c3                   	ret    

c001d8ca <ATAPI::detectMedia()>:
c001d8ca:	56                   	push   esi
c001d8cb:	53                   	push   ebx
c001d8cc:	83 ec 28             	sub    esp,0x28
c001d8cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8d3:	6a 0c                	push   0xc
c001d8d5:	6a 00                	push   0x0
c001d8d7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d8db:	56                   	push   esi
c001d8dc:	e8 0f 2c fe ff       	call   c00004f0 <memset>
c001d8e1:	58                   	pop    eax
c001d8e2:	5a                   	pop    edx
c001d8e3:	6a 00                	push   0x0
c001d8e5:	6a 00                	push   0x0
c001d8e7:	6a 00                	push   0x0
c001d8e9:	6a 00                	push   0x0
c001d8eb:	56                   	push   esi
c001d8ec:	53                   	push   ebx
c001d8ed:	e8 8a fc ff ff       	call   c001d57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8f2:	83 c4 1c             	add    esp,0x1c
c001d8f5:	6a 0c                	push   0xc
c001d8f7:	6a 00                	push   0x0
c001d8f9:	56                   	push   esi
c001d8fa:	e8 f1 2b fe ff       	call   c00004f0 <memset>
c001d8ff:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d904:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d909:	59                   	pop    ecx
c001d90a:	58                   	pop    eax
c001d90b:	6a 01                	push   0x1
c001d90d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d911:	50                   	push   eax
c001d912:	6a 00                	push   0x0
c001d914:	6a 12                	push   0x12
c001d916:	56                   	push   esi
c001d917:	53                   	push   ebx
c001d918:	e8 5f fc ff ff       	call   c001d57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d91d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d921:	83 c4 20             	add    esp,0x20
c001d924:	83 e0 7f             	and    eax,0x7f
c001d927:	83 f8 70             	cmp    eax,0x70
c001d92a:	74 15                	je     c001d941 <ATAPI::detectMedia()+0x77>
c001d92c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d933:	75 0c                	jne    c001d941 <ATAPI::detectMedia()+0x77>
c001d935:	83 ec 0c             	sub    esp,0xc
c001d938:	53                   	push   ebx
c001d939:	e8 80 ff ff ff       	call   c001d8be <ATAPI::diskInserted()>
c001d93e:	83 c4 10             	add    esp,0x10
c001d941:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d945:	83 e0 0f             	and    eax,0xf
c001d948:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d94d:	0f b6 c0             	movzx  eax,al
c001d950:	75 19                	jne    c001d96b <ATAPI::detectMedia()+0xa1>
c001d952:	83 f8 02             	cmp    eax,0x2
c001d955:	75 14                	jne    c001d96b <ATAPI::detectMedia()+0xa1>
c001d957:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d95e:	74 24                	je     c001d984 <ATAPI::detectMedia()+0xba>
c001d960:	83 ec 0c             	sub    esp,0xc
c001d963:	53                   	push   ebx
c001d964:	e8 d3 fe ff ff       	call   c001d83c <ATAPI::diskRemoved()>
c001d969:	eb 16                	jmp    c001d981 <ATAPI::detectMedia()+0xb7>
c001d96b:	85 c0                	test   eax,eax
c001d96d:	75 15                	jne    c001d984 <ATAPI::detectMedia()+0xba>
c001d96f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d976:	75 0c                	jne    c001d984 <ATAPI::detectMedia()+0xba>
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	53                   	push   ebx
c001d97c:	e8 3d ff ff ff       	call   c001d8be <ATAPI::diskInserted()>
c001d981:	83 c4 10             	add    esp,0x10
c001d984:	83 c4 24             	add    esp,0x24
c001d987:	5b                   	pop    ebx
c001d988:	5e                   	pop    esi
c001d989:	c3                   	ret    

c001d98a <ATAPI::open(int, int, void*)>:
c001d98a:	56                   	push   esi
c001d98b:	53                   	push   ebx
c001d98c:	50                   	push   eax
c001d98d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d991:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d995:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d999:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d99f:	c1 e0 06             	shl    eax,0x6
c001d9a2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d9a8:	01 d0                	add    eax,edx
c001d9aa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9b1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9b7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9be:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9c8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9cf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9d5:	6a 04                	push   0x4
c001d9d7:	6a 0c                	push   0xc
c001d9d9:	51                   	push   ecx
c001d9da:	52                   	push   edx
c001d9db:	e8 20 e3 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9e0:	90                   	nop
c001d9e1:	90                   	nop
c001d9e2:	6a 00                	push   0x0
c001d9e4:	6a 0c                	push   0xc
c001d9e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9ed:	50                   	push   eax
c001d9ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9f4:	e8 07 e3 ff ff       	call   c001bd00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9f9:	83 c4 14             	add    esp,0x14
c001d9fc:	68 78 01 00 00       	push   0x178
c001da01:	e8 cd a0 fe ff       	call   c0007ad3 <malloc>
c001da06:	83 c4 0c             	add    esp,0xc
c001da09:	6a 00                	push   0x0
c001da0b:	68 ff ff ff 7f       	push   0x7fffffff
c001da10:	6a 00                	push   0x0
c001da12:	6a 00                	push   0x0
c001da14:	53                   	push   ebx
c001da15:	68 4f 34 02 c0       	push   0xc002344f
c001da1a:	89 c6                	mov    esi,eax
c001da1c:	50                   	push   eax
c001da1d:	e8 ec 00 ff ff       	call   c000db0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da22:	83 c4 14             	add    esp,0x14
c001da25:	56                   	push   esi
c001da26:	e8 a3 01 ff ff       	call   c000dbce <LogicalDisk::assignDriveLetter()>
c001da2b:	5a                   	pop    edx
c001da2c:	59                   	pop    ecx
c001da2d:	0f be c0             	movsx  eax,al
c001da30:	50                   	push   eax
c001da31:	68 a0 32 02 c0       	push   0xc00232a0
c001da36:	e8 cf ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001da3b:	58                   	pop    eax
c001da3c:	5a                   	pop    edx
c001da3d:	56                   	push   esi
c001da3e:	53                   	push   ebx
c001da3f:	e8 1c ef fe ff       	call   c000c960 <Device::addChild(Device*)>
c001da44:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da4d:	e8 44 f3 fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001da52:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da5c:	e8 69 fe ff ff       	call   c001d8ca <ATAPI::detectMedia()>
c001da61:	83 c4 14             	add    esp,0x14
c001da64:	31 c0                	xor    eax,eax
c001da66:	5b                   	pop    ebx
c001da67:	5e                   	pop    esi
c001da68:	c3                   	ret    
c001da69:	90                   	nop

c001da6a <ATAPI::read(unsigned long long, int, void*)>:
c001da6a:	55                   	push   ebp
c001da6b:	57                   	push   edi
c001da6c:	56                   	push   esi
c001da6d:	53                   	push   ebx
c001da6e:	83 ec 1c             	sub    esp,0x1c
c001da71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001da75:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001da79:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da7d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da84:	74 3c                	je     c001dac2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001da86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da8a:	b9 03 00 00 00       	mov    ecx,0x3
c001da8f:	fc                   	cld    
c001da90:	31 c0                	xor    eax,eax
c001da92:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da94:	89 e8                	mov    eax,ebp
c001da96:	0f ce                	bswap  esi
c001da98:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001da9c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001daa1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001daa5:	50                   	push   eax
c001daa6:	50                   	push   eax
c001daa7:	55                   	push   ebp
c001daa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001daac:	c1 e5 0b             	shl    ebp,0xb
c001daaf:	6a 00                	push   0x0
c001dab1:	55                   	push   ebp
c001dab2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dab6:	50                   	push   eax
c001dab7:	53                   	push   ebx
c001dab8:	e8 bf fa ff ff       	call   c001d57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dabd:	83 c4 20             	add    esp,0x20
c001dac0:	eb 1a                	jmp    c001dadc <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	53                   	push   ebx
c001dac6:	e8 ff fd ff ff       	call   c001d8ca <ATAPI::detectMedia()>
c001dacb:	83 c4 10             	add    esp,0x10
c001dace:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dad5:	75 af                	jne    c001da86 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dad7:	b8 02 00 00 00       	mov    eax,0x2
c001dadc:	83 c4 1c             	add    esp,0x1c
c001dadf:	5b                   	pop    ebx
c001dae0:	5e                   	pop    esi
c001dae1:	5f                   	pop    edi
c001dae2:	5d                   	pop    ebp
c001dae3:	c3                   	ret    

c001dae4 <SATA::close(int, int, void*)>:
c001dae4:	83 ec 0c             	sub    esp,0xc
c001dae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daeb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001daf1:	85 c0                	test   eax,eax
c001daf3:	74 0c                	je     c001db01 <SATA::close(int, int, void*)+0x1d>
c001daf5:	8b 10                	mov    edx,DWORD PTR [eax]
c001daf7:	83 ec 0c             	sub    esp,0xc
c001dafa:	50                   	push   eax
c001dafb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dafe:	83 c4 10             	add    esp,0x10
c001db01:	31 c0                	xor    eax,eax
c001db03:	83 c4 0c             	add    esp,0xc
c001db06:	c3                   	ret    
c001db07:	90                   	nop

c001db08 <SATA::powerSaving(PowerSavingLevel)>:
c001db08:	c3                   	ret    
c001db09:	90                   	nop

c001db0a <SATA::open(int, int, void*)>:
c001db0a:	56                   	push   esi
c001db0b:	53                   	push   ebx
c001db0c:	50                   	push   eax
c001db0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db15:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db1f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db29:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db33:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db3d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db44:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db4a:	e8 93 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db4f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db55:	89 c6                	mov    esi,eax
c001db57:	e8 86 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db5c:	81 c6 00 10 00 00    	add    esi,0x1000
c001db62:	39 c6                	cmp    esi,eax
c001db64:	74 10                	je     c001db76 <SATA::open(int, int, void*)+0x6c>
c001db66:	83 ec 0c             	sub    esp,0xc
c001db69:	68 e8 32 02 c0       	push   0xc00232e8
c001db6e:	e8 b4 39 ff ff       	call   c0011527 <KePanic(char const*)>
c001db73:	83 c4 10             	add    esp,0x10
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	6a 02                	push   0x2
c001db7b:	e8 75 ba fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001db80:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db86:	6a 03                	push   0x3
c001db88:	50                   	push   eax
c001db89:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001db8f:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001db95:	e8 64 c1 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001db9a:	83 c4 14             	add    esp,0x14
c001db9d:	53                   	push   ebx
c001db9e:	e8 f3 f1 fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001dba3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dba6:	e8 37 04 ff ff       	call   c000dfe2 <createPartitionsForDisk(PhysicalDisk*)>
c001dbab:	83 c4 14             	add    esp,0x14
c001dbae:	31 c0                	xor    eax,eax
c001dbb0:	5b                   	pop    ebx
c001dbb1:	5e                   	pop    esi
c001dbb2:	c3                   	ret    
c001dbb3:	90                   	nop

c001dbb4 <SATA::SATA()>:
c001dbb4:	83 ec 0c             	sub    esp,0xc
c001dbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbb:	83 ec 04             	sub    esp,0x4
c001dbbe:	68 00 02 00 00       	push   0x200
c001dbc3:	68 fc 32 02 c0       	push   0xc00232fc
c001dbc8:	50                   	push   eax
c001dbc9:	e8 60 f1 fe ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dbce:	83 c4 10             	add    esp,0x10
c001dbd1:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c001dbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbda:	89 10                	mov    DWORD PTR [eax],edx
c001dbdc:	90                   	nop
c001dbdd:	83 c4 0c             	add    esp,0xc
c001dbe0:	c3                   	ret    
c001dbe1:	90                   	nop

c001dbe2 <SATA::access(unsigned long long, int, void*, bool)>:
c001dbe2:	55                   	push   ebp
c001dbe3:	57                   	push   edi
c001dbe4:	56                   	push   esi
c001dbe5:	53                   	push   ebx
c001dbe6:	83 ec 2c             	sub    esp,0x2c
c001dbe9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dbed:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dbf2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dbf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dbfa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dbfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc02:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc0a:	7e 10                	jle    c001dc1c <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	68 0c 33 02 c0       	push   0xc002330c
c001dc14:	e8 0e 39 ff ff       	call   c0011527 <KePanic(char const*)>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc22:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dc28:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dc2e:	89 e8                	mov    eax,ebp
c001dc30:	c1 e0 07             	shl    eax,0x7
c001dc33:	01 d0                	add    eax,edx
c001dc35:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc3f:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc42:	51                   	push   ecx
c001dc43:	c1 e0 07             	shl    eax,0x7
c001dc46:	51                   	push   ecx
c001dc47:	01 d0                	add    eax,edx
c001dc49:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dc4d:	50                   	push   eax
c001dc4e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc54:	e8 6b ec ff ff       	call   c001c8c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc5d:	83 c4 10             	add    esp,0x10
c001dc60:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dc65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc69:	0f 84 5b 01 00 00    	je     c001ddca <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dc6f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dc73:	c1 e0 09             	shl    eax,0x9
c001dc76:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dc7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc7f:	74 0e                	je     c001dc8f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dc81:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dc87:	89 c1                	mov    ecx,eax
c001dc89:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dc8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dc8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc93:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dc99:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc9c:	c1 e0 07             	shl    eax,0x7
c001dc9f:	01 d0                	add    eax,edx
c001dca1:	8b 00                	mov    eax,DWORD PTR [eax]
c001dca3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dca9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dcaf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcb3:	c1 e1 05             	shl    ecx,0x5
c001dcb6:	01 c8                	add    eax,ecx
c001dcb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcbc:	83 e1 01             	and    ecx,0x1
c001dcbf:	89 ce                	mov    esi,ecx
c001dcc1:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcc3:	c1 e6 06             	shl    esi,0x6
c001dcc6:	83 e1 bf             	and    ecx,0xffffffbf
c001dcc9:	09 f1                	or     ecx,esi
c001dccb:	88 08                	mov    BYTE PTR [eax],cl
c001dccd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dccf:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dcd5:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dcdb:	89 08                	mov    DWORD PTR [eax],ecx
c001dcdd:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dce3:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dce9:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dcef:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dcf2:	50                   	push   eax
c001dcf3:	68 90 00 00 00       	push   0x90
c001dcf8:	6a 00                	push   0x0
c001dcfa:	56                   	push   esi
c001dcfb:	e8 f0 27 fe ff       	call   c00004f0 <memset>
c001dd00:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd06:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd10:	83 c4 10             	add    esp,0x10
c001dd13:	48                   	dec    eax
c001dd14:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd19:	89 c1                	mov    ecx,eax
c001dd1b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd21:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd26:	09 c8                	or     eax,ecx
c001dd28:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd2e:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd34:	83 c8 80             	or     eax,0xffffff80
c001dd37:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd3d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd44:	25 00 7f 00 00       	and    eax,0x7f00
c001dd49:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd4e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd53:	66 89 06             	mov    WORD PTR [esi],ax
c001dd56:	b0 35                	mov    al,0x35
c001dd58:	75 02                	jne    c001dd5c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001dd5a:	b0 25                	mov    al,0x25
c001dd5c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd63:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dd67:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dd6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd6f:	c1 e8 10             	shr    eax,0x10
c001dd72:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dd75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd79:	c1 e8 18             	shr    eax,0x18
c001dd7c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dd7f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dd83:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dd86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd8a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dd8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd91:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dd95:	89 ee                	mov    esi,ebp
c001dd97:	31 c0                	xor    eax,eax
c001dd99:	c1 e6 07             	shl    esi,0x7
c001dd9c:	01 d6                	add    esi,edx
c001dd9e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dda4:	80 e1 88             	and    cl,0x88
c001dda7:	74 0a                	je     c001ddb3 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dda9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddae:	74 0a                	je     c001ddba <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ddb0:	40                   	inc    eax
c001ddb1:	eb eb                	jmp    c001dd9e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ddb3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddb8:	75 17                	jne    c001ddd1 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ddba:	83 ec 0c             	sub    esp,0xc
c001ddbd:	68 45 33 02 c0       	push   0xc0023345
c001ddc2:	e8 43 cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001ddc7:	83 c4 10             	add    esp,0x10
c001ddca:	b8 01 00 00 00       	mov    eax,0x1
c001ddcf:	eb 5b                	jmp    c001de2c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001ddd1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ddd5:	c1 e5 07             	shl    ebp,0x7
c001ddd8:	b8 01 00 00 00       	mov    eax,0x1
c001dddd:	01 ea                	add    edx,ebp
c001dddf:	d3 e0                	shl    eax,cl
c001dde1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dde7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dded:	85 c8                	test   eax,ecx
c001ddef:	74 16                	je     c001de07 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001ddf1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ddf7:	0f ba e1 1e          	bt     ecx,0x1e
c001ddfb:	73 ea                	jae    c001dde7 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001ddfd:	83 ec 0c             	sub    esp,0xc
c001de00:	68 53 33 02 c0       	push   0xc0023353
c001de05:	eb bb                	jmp    c001ddc2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de07:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de0d:	0f ba e0 1e          	bt     eax,0x1e
c001de11:	72 b7                	jb     c001ddca <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de13:	31 c0                	xor    eax,eax
c001de15:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de1a:	75 10                	jne    c001de2c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de1c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de22:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de2c:	83 c4 2c             	add    esp,0x2c
c001de2f:	5b                   	pop    ebx
c001de30:	5e                   	pop    esi
c001de31:	5f                   	pop    edi
c001de32:	5d                   	pop    ebp
c001de33:	c3                   	ret    

c001de34 <SATA::read(unsigned long long, int, void*)>:
c001de34:	55                   	push   ebp
c001de35:	57                   	push   edi
c001de36:	56                   	push   esi
c001de37:	be 04 00 00 00       	mov    esi,0x4
c001de3c:	53                   	push   ebx
c001de3d:	83 ec 0c             	sub    esp,0xc
c001de40:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de4c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de50:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de53:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de59:	0f 87 1a 02 00 00    	ja     c001e079 <SATA::read(unsigned long long, int, void*)+0x245>
c001de5f:	85 c9                	test   ecx,ecx
c001de61:	be 06 00 00 00       	mov    esi,0x6
c001de66:	0f 84 0d 02 00 00    	je     c001e079 <SATA::read(unsigned long long, int, void*)+0x245>
c001de6c:	56                   	push   esi
c001de6d:	56                   	push   esi
c001de6e:	6a 00                	push   0x0
c001de70:	51                   	push   ecx
c001de71:	53                   	push   ebx
c001de72:	52                   	push   edx
c001de73:	50                   	push   eax
c001de74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de78:	e8 65 fd ff ff       	call   c001dbe2 <SATA::access(unsigned long long, int, void*, bool)>
c001de7d:	83 c4 20             	add    esp,0x20
c001de80:	85 c0                	test   eax,eax
c001de82:	89 c6                	mov    esi,eax
c001de84:	0f 85 ea 01 00 00    	jne    c001e074 <SATA::read(unsigned long long, int, void*)+0x240>
c001de8a:	50                   	push   eax
c001de8b:	50                   	push   eax
c001de8c:	6a 0f                	push   0xf
c001de8e:	6a 00                	push   0x0
c001de90:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001de96:	bb 0a 00 00 00       	mov    ebx,0xa
c001de9b:	e8 7d f2 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001dea0:	5a                   	pop    edx
c001dea1:	59                   	pop    ecx
c001dea2:	b9 10 27 00 00       	mov    ecx,0x2710
c001dea7:	0f b6 c0             	movzx  eax,al
c001deaa:	50                   	push   eax
c001deab:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001deb0:	99                   	cdq    
c001deb1:	f7 f9                	idiv   ecx
c001deb3:	99                   	cdq    
c001deb4:	f7 fb                	idiv   ebx
c001deb6:	8d 42 30             	lea    eax,[edx+0x30]
c001deb9:	0f b6 c0             	movzx  eax,al
c001debc:	50                   	push   eax
c001debd:	e8 4a f2 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001dec2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dec8:	5f                   	pop    edi
c001dec9:	5d                   	pop    ebp
c001deca:	bd e8 03 00 00       	mov    ebp,0x3e8
c001decf:	6a 0f                	push   0xf
c001ded1:	6a 00                	push   0x0
c001ded3:	e8 45 f2 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001ded8:	5a                   	pop    edx
c001ded9:	59                   	pop    ecx
c001deda:	0f b6 c0             	movzx  eax,al
c001dedd:	50                   	push   eax
c001dede:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dee3:	99                   	cdq    
c001dee4:	f7 fd                	idiv   ebp
c001dee6:	99                   	cdq    
c001dee7:	f7 fb                	idiv   ebx
c001dee9:	8d 42 30             	lea    eax,[edx+0x30]
c001deec:	0f b6 c0             	movzx  eax,al
c001deef:	50                   	push   eax
c001def0:	e8 17 f2 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001def5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001defb:	5f                   	pop    edi
c001defc:	bf 64 00 00 00       	mov    edi,0x64
c001df01:	58                   	pop    eax
c001df02:	6a 0f                	push   0xf
c001df04:	6a 00                	push   0x0
c001df06:	e8 12 f2 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001df0b:	5a                   	pop    edx
c001df0c:	59                   	pop    ecx
c001df0d:	0f b6 c0             	movzx  eax,al
c001df10:	50                   	push   eax
c001df11:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df16:	99                   	cdq    
c001df17:	f7 ff                	idiv   edi
c001df19:	99                   	cdq    
c001df1a:	f7 fb                	idiv   ebx
c001df1c:	8d 42 30             	lea    eax,[edx+0x30]
c001df1f:	0f b6 c0             	movzx  eax,al
c001df22:	50                   	push   eax
c001df23:	e8 e4 f1 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001df28:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df2e:	58                   	pop    eax
c001df2f:	5a                   	pop    edx
c001df30:	6a 0f                	push   0xf
c001df32:	6a 00                	push   0x0
c001df34:	e8 e4 f1 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001df39:	59                   	pop    ecx
c001df3a:	5a                   	pop    edx
c001df3b:	0f b6 c0             	movzx  eax,al
c001df3e:	50                   	push   eax
c001df3f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df44:	99                   	cdq    
c001df45:	f7 fb                	idiv   ebx
c001df47:	99                   	cdq    
c001df48:	f7 fb                	idiv   ebx
c001df4a:	8d 42 30             	lea    eax,[edx+0x30]
c001df4d:	0f b6 c0             	movzx  eax,al
c001df50:	50                   	push   eax
c001df51:	e8 b6 f1 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001df56:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df5c:	59                   	pop    ecx
c001df5d:	58                   	pop    eax
c001df5e:	6a 0f                	push   0xf
c001df60:	6a 00                	push   0x0
c001df62:	e8 b6 f1 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001df67:	5a                   	pop    edx
c001df68:	59                   	pop    ecx
c001df69:	0f b6 c0             	movzx  eax,al
c001df6c:	50                   	push   eax
c001df6d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df72:	99                   	cdq    
c001df73:	f7 fb                	idiv   ebx
c001df75:	83 c2 30             	add    edx,0x30
c001df78:	0f b6 d2             	movzx  edx,dl
c001df7b:	52                   	push   edx
c001df7c:	e8 8b f1 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001df81:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001df87:	58                   	pop    eax
c001df88:	5a                   	pop    edx
c001df89:	6a 0f                	push   0xf
c001df8b:	6a 00                	push   0x0
c001df8d:	e8 8b f1 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001df92:	59                   	pop    ecx
c001df93:	b9 10 27 00 00       	mov    ecx,0x2710
c001df98:	5a                   	pop    edx
c001df99:	0f b6 c0             	movzx  eax,al
c001df9c:	50                   	push   eax
c001df9d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfa2:	99                   	cdq    
c001dfa3:	f7 f9                	idiv   ecx
c001dfa5:	99                   	cdq    
c001dfa6:	f7 fb                	idiv   ebx
c001dfa8:	8d 42 30             	lea    eax,[edx+0x30]
c001dfab:	0f b6 c0             	movzx  eax,al
c001dfae:	50                   	push   eax
c001dfaf:	e8 58 f1 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001dfb4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dfba:	59                   	pop    ecx
c001dfbb:	58                   	pop    eax
c001dfbc:	6a 0f                	push   0xf
c001dfbe:	6a 00                	push   0x0
c001dfc0:	e8 58 f1 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001dfc5:	5a                   	pop    edx
c001dfc6:	59                   	pop    ecx
c001dfc7:	0f b6 c0             	movzx  eax,al
c001dfca:	50                   	push   eax
c001dfcb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfd0:	99                   	cdq    
c001dfd1:	f7 fd                	idiv   ebp
c001dfd3:	99                   	cdq    
c001dfd4:	f7 fb                	idiv   ebx
c001dfd6:	8d 42 30             	lea    eax,[edx+0x30]
c001dfd9:	0f b6 c0             	movzx  eax,al
c001dfdc:	50                   	push   eax
c001dfdd:	e8 2a f1 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001dfe2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dfe8:	5d                   	pop    ebp
c001dfe9:	58                   	pop    eax
c001dfea:	6a 0f                	push   0xf
c001dfec:	6a 00                	push   0x0
c001dfee:	e8 2a f1 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001dff3:	5a                   	pop    edx
c001dff4:	59                   	pop    ecx
c001dff5:	0f b6 c0             	movzx  eax,al
c001dff8:	50                   	push   eax
c001dff9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dffe:	99                   	cdq    
c001dfff:	f7 ff                	idiv   edi
c001e001:	99                   	cdq    
c001e002:	f7 fb                	idiv   ebx
c001e004:	8d 42 30             	lea    eax,[edx+0x30]
c001e007:	0f b6 c0             	movzx  eax,al
c001e00a:	50                   	push   eax
c001e00b:	e8 fc f0 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e010:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e016:	5f                   	pop    edi
c001e017:	5d                   	pop    ebp
c001e018:	6a 0f                	push   0xf
c001e01a:	6a 00                	push   0x0
c001e01c:	e8 fc f0 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e021:	5a                   	pop    edx
c001e022:	59                   	pop    ecx
c001e023:	0f b6 c0             	movzx  eax,al
c001e026:	50                   	push   eax
c001e027:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e02c:	99                   	cdq    
c001e02d:	f7 fb                	idiv   ebx
c001e02f:	99                   	cdq    
c001e030:	f7 fb                	idiv   ebx
c001e032:	8d 42 30             	lea    eax,[edx+0x30]
c001e035:	0f b6 c0             	movzx  eax,al
c001e038:	50                   	push   eax
c001e039:	e8 ce f0 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e03e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e044:	5f                   	pop    edi
c001e045:	5d                   	pop    ebp
c001e046:	6a 0f                	push   0xf
c001e048:	6a 00                	push   0x0
c001e04a:	e8 ce f0 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e04f:	5a                   	pop    edx
c001e050:	59                   	pop    ecx
c001e051:	0f b6 c0             	movzx  eax,al
c001e054:	50                   	push   eax
c001e055:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e05a:	99                   	cdq    
c001e05b:	f7 fb                	idiv   ebx
c001e05d:	83 c2 30             	add    edx,0x30
c001e060:	0f b6 d2             	movzx  edx,dl
c001e063:	52                   	push   edx
c001e064:	e8 a3 f0 ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e069:	83 c4 10             	add    esp,0x10
c001e06c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e072:	eb 05                	jmp    c001e079 <SATA::read(unsigned long long, int, void*)+0x245>
c001e074:	be 01 00 00 00       	mov    esi,0x1
c001e079:	83 c4 0c             	add    esp,0xc
c001e07c:	89 f0                	mov    eax,esi
c001e07e:	5b                   	pop    ebx
c001e07f:	5e                   	pop    esi
c001e080:	5f                   	pop    edi
c001e081:	5d                   	pop    ebp
c001e082:	c3                   	ret    
c001e083:	90                   	nop

c001e084 <SATA::write(unsigned long long, int, void*)>:
c001e084:	55                   	push   ebp
c001e085:	57                   	push   edi
c001e086:	56                   	push   esi
c001e087:	53                   	push   ebx
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e08f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e093:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e097:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e09b:	8d 70 ff             	lea    esi,[eax-0x1]
c001e09e:	b8 04 00 00 00       	mov    eax,0x4
c001e0a3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e0a9:	0f 87 2c 02 00 00    	ja     c001e2db <SATA::write(unsigned long long, int, void*)+0x257>
c001e0af:	85 db                	test   ebx,ebx
c001e0b1:	b8 06 00 00 00       	mov    eax,0x6
c001e0b6:	0f 84 1f 02 00 00    	je     c001e2db <SATA::write(unsigned long long, int, void*)+0x257>
c001e0bc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e0c0:	c1 e6 09             	shl    esi,0x9
c001e0c3:	01 de                	add    esi,ebx
c001e0c5:	50                   	push   eax
c001e0c6:	89 d7                	mov    edi,edx
c001e0c8:	50                   	push   eax
c001e0c9:	83 c7 01             	add    edi,0x1
c001e0cc:	6a 01                	push   0x1
c001e0ce:	89 cd                	mov    ebp,ecx
c001e0d0:	53                   	push   ebx
c001e0d1:	83 d5 00             	adc    ebp,0x0
c001e0d4:	6a 01                	push   0x1
c001e0d6:	81 c3 00 02 00 00    	add    ebx,0x200
c001e0dc:	51                   	push   ecx
c001e0dd:	52                   	push   edx
c001e0de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0e2:	e8 fb fa ff ff       	call   c001dbe2 <SATA::access(unsigned long long, int, void*, bool)>
c001e0e7:	83 c4 20             	add    esp,0x20
c001e0ea:	39 f3                	cmp    ebx,esi
c001e0ec:	89 fa                	mov    edx,edi
c001e0ee:	89 e9                	mov    ecx,ebp
c001e0f0:	75 d3                	jne    c001e0c5 <SATA::write(unsigned long long, int, void*)+0x41>
c001e0f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0f6:	bd 10 27 00 00       	mov    ebp,0x2710
c001e0fb:	bb 0a 00 00 00       	mov    ebx,0xa
c001e100:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e106:	50                   	push   eax
c001e107:	50                   	push   eax
c001e108:	6a 0f                	push   0xf
c001e10a:	6a 00                	push   0x0
c001e10c:	e8 0c f0 ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e111:	5a                   	pop    edx
c001e112:	59                   	pop    ecx
c001e113:	0f b6 c0             	movzx  eax,al
c001e116:	50                   	push   eax
c001e117:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e11c:	99                   	cdq    
c001e11d:	f7 fd                	idiv   ebp
c001e11f:	99                   	cdq    
c001e120:	f7 fb                	idiv   ebx
c001e122:	8d 42 30             	lea    eax,[edx+0x30]
c001e125:	0f b6 c0             	movzx  eax,al
c001e128:	50                   	push   eax
c001e129:	e8 de ef ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e12e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e134:	5e                   	pop    esi
c001e135:	5f                   	pop    edi
c001e136:	bf e8 03 00 00       	mov    edi,0x3e8
c001e13b:	6a 0f                	push   0xf
c001e13d:	6a 00                	push   0x0
c001e13f:	e8 d9 ef ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e144:	5a                   	pop    edx
c001e145:	59                   	pop    ecx
c001e146:	0f b6 c0             	movzx  eax,al
c001e149:	50                   	push   eax
c001e14a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e14f:	99                   	cdq    
c001e150:	f7 ff                	idiv   edi
c001e152:	99                   	cdq    
c001e153:	f7 fb                	idiv   ebx
c001e155:	8d 42 30             	lea    eax,[edx+0x30]
c001e158:	0f b6 c0             	movzx  eax,al
c001e15b:	50                   	push   eax
c001e15c:	e8 ab ef ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e161:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e167:	5e                   	pop    esi
c001e168:	be 64 00 00 00       	mov    esi,0x64
c001e16d:	58                   	pop    eax
c001e16e:	6a 0f                	push   0xf
c001e170:	6a 00                	push   0x0
c001e172:	e8 a6 ef ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e177:	5a                   	pop    edx
c001e178:	59                   	pop    ecx
c001e179:	0f b6 c0             	movzx  eax,al
c001e17c:	50                   	push   eax
c001e17d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e182:	99                   	cdq    
c001e183:	f7 fe                	idiv   esi
c001e185:	99                   	cdq    
c001e186:	f7 fb                	idiv   ebx
c001e188:	8d 42 30             	lea    eax,[edx+0x30]
c001e18b:	0f b6 c0             	movzx  eax,al
c001e18e:	50                   	push   eax
c001e18f:	e8 78 ef ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e194:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e19a:	58                   	pop    eax
c001e19b:	5a                   	pop    edx
c001e19c:	6a 0f                	push   0xf
c001e19e:	6a 00                	push   0x0
c001e1a0:	e8 78 ef ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e1a5:	59                   	pop    ecx
c001e1a6:	5a                   	pop    edx
c001e1a7:	0f b6 c0             	movzx  eax,al
c001e1aa:	50                   	push   eax
c001e1ab:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1b0:	99                   	cdq    
c001e1b1:	f7 fb                	idiv   ebx
c001e1b3:	99                   	cdq    
c001e1b4:	f7 fb                	idiv   ebx
c001e1b6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1b9:	0f b6 c0             	movzx  eax,al
c001e1bc:	50                   	push   eax
c001e1bd:	e8 4a ef ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e1c2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e1c8:	59                   	pop    ecx
c001e1c9:	58                   	pop    eax
c001e1ca:	6a 0f                	push   0xf
c001e1cc:	6a 00                	push   0x0
c001e1ce:	e8 4a ef ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e1d3:	5a                   	pop    edx
c001e1d4:	59                   	pop    ecx
c001e1d5:	0f b6 c0             	movzx  eax,al
c001e1d8:	50                   	push   eax
c001e1d9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1de:	99                   	cdq    
c001e1df:	f7 fb                	idiv   ebx
c001e1e1:	83 c2 30             	add    edx,0x30
c001e1e4:	0f b6 d2             	movzx  edx,dl
c001e1e7:	52                   	push   edx
c001e1e8:	e8 1f ef ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e1ed:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e1f3:	58                   	pop    eax
c001e1f4:	5a                   	pop    edx
c001e1f5:	6a 0f                	push   0xf
c001e1f7:	6a 00                	push   0x0
c001e1f9:	e8 1f ef ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e1fe:	59                   	pop    ecx
c001e1ff:	5a                   	pop    edx
c001e200:	0f b6 c0             	movzx  eax,al
c001e203:	50                   	push   eax
c001e204:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e209:	99                   	cdq    
c001e20a:	f7 fd                	idiv   ebp
c001e20c:	99                   	cdq    
c001e20d:	f7 fb                	idiv   ebx
c001e20f:	8d 42 30             	lea    eax,[edx+0x30]
c001e212:	0f b6 c0             	movzx  eax,al
c001e215:	50                   	push   eax
c001e216:	e8 f1 ee ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e21b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e221:	59                   	pop    ecx
c001e222:	5d                   	pop    ebp
c001e223:	6a 0f                	push   0xf
c001e225:	6a 00                	push   0x0
c001e227:	e8 f1 ee ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e22c:	5a                   	pop    edx
c001e22d:	59                   	pop    ecx
c001e22e:	0f b6 c0             	movzx  eax,al
c001e231:	50                   	push   eax
c001e232:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e237:	99                   	cdq    
c001e238:	f7 ff                	idiv   edi
c001e23a:	99                   	cdq    
c001e23b:	f7 fb                	idiv   ebx
c001e23d:	8d 42 30             	lea    eax,[edx+0x30]
c001e240:	0f b6 c0             	movzx  eax,al
c001e243:	50                   	push   eax
c001e244:	e8 c3 ee ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e249:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e24f:	5f                   	pop    edi
c001e250:	5d                   	pop    ebp
c001e251:	6a 0f                	push   0xf
c001e253:	6a 00                	push   0x0
c001e255:	e8 c3 ee ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e25a:	5a                   	pop    edx
c001e25b:	59                   	pop    ecx
c001e25c:	0f b6 c0             	movzx  eax,al
c001e25f:	50                   	push   eax
c001e260:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e265:	99                   	cdq    
c001e266:	f7 fe                	idiv   esi
c001e268:	99                   	cdq    
c001e269:	f7 fb                	idiv   ebx
c001e26b:	8d 42 30             	lea    eax,[edx+0x30]
c001e26e:	0f b6 c0             	movzx  eax,al
c001e271:	50                   	push   eax
c001e272:	e8 95 ee ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e277:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e27d:	5e                   	pop    esi
c001e27e:	5f                   	pop    edi
c001e27f:	6a 0f                	push   0xf
c001e281:	6a 00                	push   0x0
c001e283:	e8 95 ee ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e288:	5d                   	pop    ebp
c001e289:	5a                   	pop    edx
c001e28a:	0f b6 c0             	movzx  eax,al
c001e28d:	50                   	push   eax
c001e28e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e293:	99                   	cdq    
c001e294:	f7 fb                	idiv   ebx
c001e296:	99                   	cdq    
c001e297:	f7 fb                	idiv   ebx
c001e299:	8d 42 30             	lea    eax,[edx+0x30]
c001e29c:	0f b6 c0             	movzx  eax,al
c001e29f:	50                   	push   eax
c001e2a0:	e8 67 ee ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e2a5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e2ab:	59                   	pop    ecx
c001e2ac:	5e                   	pop    esi
c001e2ad:	6a 0f                	push   0xf
c001e2af:	6a 00                	push   0x0
c001e2b1:	e8 67 ee ff ff       	call   c001d11d <combineColours(unsigned char, unsigned char)>
c001e2b6:	5f                   	pop    edi
c001e2b7:	5d                   	pop    ebp
c001e2b8:	0f b6 c0             	movzx  eax,al
c001e2bb:	50                   	push   eax
c001e2bc:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2c1:	99                   	cdq    
c001e2c2:	f7 fb                	idiv   ebx
c001e2c4:	83 c2 30             	add    edx,0x30
c001e2c7:	0f b6 d2             	movzx  edx,dl
c001e2ca:	52                   	push   edx
c001e2cb:	e8 3c ee ff ff       	call   c001d10c <combineCharAndColour(char, unsigned char)>
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e2d9:	31 c0                	xor    eax,eax
c001e2db:	83 c4 0c             	add    esp,0xc
c001e2de:	5b                   	pop    ebx
c001e2df:	5e                   	pop    esi
c001e2e0:	5f                   	pop    edi
c001e2e1:	5d                   	pop    ebp
c001e2e2:	c3                   	ret    
c001e2e3:	90                   	nop

c001e2e4 <SATAPI::write(unsigned long long, int, void*)>:
c001e2e4:	b8 03 00 00 00       	mov    eax,0x3
c001e2e9:	c3                   	ret    

c001e2ea <SATAPI::close(int, int, void*)>:
c001e2ea:	83 ec 0c             	sub    esp,0xc
c001e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2f7:	85 c0                	test   eax,eax
c001e2f9:	74 0c                	je     c001e307 <SATAPI::close(int, int, void*)+0x1d>
c001e2fb:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2fd:	83 ec 0c             	sub    esp,0xc
c001e300:	50                   	push   eax
c001e301:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e304:	83 c4 10             	add    esp,0x10
c001e307:	31 c0                	xor    eax,eax
c001e309:	83 c4 0c             	add    esp,0xc
c001e30c:	c3                   	ret    
c001e30d:	90                   	nop

c001e30e <SATAPI::SATAPI()>:
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e315:	83 ec 04             	sub    esp,0x4
c001e318:	68 00 08 00 00       	push   0x800
c001e31d:	68 9c 33 02 c0       	push   0xc002339c
c001e322:	50                   	push   eax
c001e323:	e8 06 ea fe ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e328:	83 c4 10             	add    esp,0x10
c001e32b:	ba 90 34 02 c0       	mov    edx,0xc0023490
c001e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e334:	89 10                	mov    DWORD PTR [eax],edx
c001e336:	90                   	nop
c001e337:	83 c4 0c             	add    esp,0xc
c001e33a:	c3                   	ret    
c001e33b:	90                   	nop

c001e33c <SATAPI::diskRemoved()>:
c001e33c:	c3                   	ret    
c001e33d:	90                   	nop

c001e33e <SATAPI::diskInserted()>:
c001e33e:	83 ec 18             	sub    esp,0x18
c001e341:	68 a8 33 02 c0       	push   0xc00233a8
c001e346:	e8 bf c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e34f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e356:	83 c4 1c             	add    esp,0x1c
c001e359:	c3                   	ret    

c001e35a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e35a:	55                   	push   ebp
c001e35b:	57                   	push   edi
c001e35c:	56                   	push   esi
c001e35d:	53                   	push   ebx
c001e35e:	83 ec 34             	sub    esp,0x34
c001e361:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e365:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e36d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e371:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e375:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e37b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e381:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e385:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e38b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e38f:	83 c0 02             	add    eax,0x2
c001e392:	c1 e0 07             	shl    eax,0x7
c001e395:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e399:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e39d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3a1:	c1 e0 07             	shl    eax,0x7
c001e3a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3ac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3ba:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3c0:	e8 ff e4 ff ff       	call   c001c8c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	89 c2                	mov    edx,eax
c001e3ca:	b8 01 00 00 00       	mov    eax,0x1
c001e3cf:	83 fa ff             	cmp    edx,0xffffffff
c001e3d2:	0f 84 5f 02 00 00    	je     c001e637 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e3d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e3dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3e0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e3e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3e8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e3ee:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e3f4:	89 d1                	mov    ecx,edx
c001e3f6:	c1 e1 05             	shl    ecx,0x5
c001e3f9:	01 c8                	add    eax,ecx
c001e3fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e3fd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e403:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e409:	89 08                	mov    DWORD PTR [eax],ecx
c001e40b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e411:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e417:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e41d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e420:	50                   	push   eax
c001e421:	68 90 00 00 00       	push   0x90
c001e426:	6a 00                	push   0x0
c001e428:	53                   	push   ebx
c001e429:	e8 c2 20 fe ff       	call   c00004f0 <memset>
c001e42e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e431:	b9 0c 00 00 00       	mov    ecx,0xc
c001e436:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e43a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e43c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e442:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e446:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e44a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e450:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e454:	48                   	dec    eax
c001e455:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e45a:	89 c1                	mov    ecx,eax
c001e45c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e462:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e467:	09 c8                	or     eax,ecx
c001e469:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e46f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e475:	83 c8 80             	or     eax,0xffffff80
c001e478:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e47e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e481:	25 00 7f 00 00       	and    eax,0x7f00
c001e486:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e48b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e492:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e49a:	c1 e8 10             	shr    eax,0x10
c001e49d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e4a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4a4:	c1 e8 18             	shr    eax,0x18
c001e4a7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e4aa:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e4ae:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e4b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4b5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4b8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4bc:	83 c4 10             	add    esp,0x10
c001e4bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4c3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e4c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e4cb:	31 c0                	xor    eax,eax
c001e4cd:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e4d3:	80 e1 88             	and    cl,0x88
c001e4d6:	74 0a                	je     c001e4e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e4d8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4dd:	74 0a                	je     c001e4e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e4df:	40                   	inc    eax
c001e4e0:	eb eb                	jmp    c001e4cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e4e2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4e7:	75 43                	jne    c001e52c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e4e9:	83 ec 0c             	sub    esp,0xc
c001e4ec:	68 c0 33 02 c0       	push   0xc00233c0
c001e4f1:	e8 14 c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e4f6:	58                   	pop    eax
c001e4f7:	5a                   	pop    edx
c001e4f8:	68 d5 33 02 c0       	push   0xc00233d5
c001e4fd:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e503:	e8 a4 a5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e508:	59                   	pop    ecx
c001e509:	5b                   	pop    ebx
c001e50a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e50e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e514:	e8 45 e4 ff ff       	call   c001c95e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e519:	5e                   	pop    esi
c001e51a:	5f                   	pop    edi
c001e51b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e51f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e525:	e8 14 e4 ff ff       	call   c001c93e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e52a:	eb 48                	jmp    c001e574 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e52c:	b8 01 00 00 00       	mov    eax,0x1
c001e531:	88 d1                	mov    cl,dl
c001e533:	d3 e0                	shl    eax,cl
c001e535:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e53a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e540:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e544:	89 c7                	mov    edi,eax
c001e546:	c1 e3 07             	shl    ebx,0x7
c001e549:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e54d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e553:	85 c7                	test   edi,eax
c001e555:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e55b:	0f 84 a3 00 00 00    	je     c001e604 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e561:	0f ba e0 1e          	bt     eax,0x1e
c001e565:	73 1a                	jae    c001e581 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e567:	83 ec 0c             	sub    esp,0xc
c001e56a:	68 e7 33 02 c0       	push   0xc00233e7
c001e56f:	e8 96 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e574:	83 c4 10             	add    esp,0x10
c001e577:	b8 01 00 00 00       	mov    eax,0x1
c001e57c:	e9 b6 00 00 00       	jmp    c001e637 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e581:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e587:	83 f8 0d             	cmp    eax,0xd
c001e58a:	77 0a                	ja     c001e596 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	68 c8 00 00 00       	push   0xc8
c001e594:	eb 28                	jmp    c001e5be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e596:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e59c:	83 f8 0d             	cmp    eax,0xd
c001e59f:	77 0a                	ja     c001e5ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e5a1:	83 ec 0c             	sub    esp,0xc
c001e5a4:	68 58 02 00 00       	push   0x258
c001e5a9:	eb 13                	jmp    c001e5be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5ab:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e5b1:	83 f8 06             	cmp    eax,0x6
c001e5b4:	77 10                	ja     c001e5c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e5b6:	83 ec 0c             	sub    esp,0xc
c001e5b9:	68 dc 05 00 00       	push   0x5dc
c001e5be:	e8 69 7d ff ff       	call   c001632c <milliTenthSleep(unsigned int)>
c001e5c3:	83 c4 10             	add    esp,0x10
c001e5c6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e5ca:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e5cd:	75 06                	jne    c001e5d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e5cf:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e5d3:	74 15                	je     c001e5ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e5d5:	83 fe 06             	cmp    esi,0x6
c001e5d8:	77 10                	ja     c001e5ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e5da:	83 ec 0c             	sub    esp,0xc
c001e5dd:	68 c4 09 00 00       	push   0x9c4
c001e5e2:	e8 45 7d ff ff       	call   c001632c <milliTenthSleep(unsigned int)>
c001e5e7:	83 c4 10             	add    esp,0x10
c001e5ea:	46                   	inc    esi
c001e5eb:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e5f1:	0f 85 56 ff ff ff    	jne    c001e54d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e5f7:	83 ec 0c             	sub    esp,0xc
c001e5fa:	68 fa 33 02 c0       	push   0xc00233fa
c001e5ff:	e9 6b ff ff ff       	jmp    c001e56f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e604:	0f ba e0 1e          	bt     eax,0x1e
c001e608:	73 0d                	jae    c001e617 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e60a:	83 ec 0c             	sub    esp,0xc
c001e60d:	68 0e 34 02 c0       	push   0xc002340e
c001e612:	e9 58 ff ff ff       	jmp    c001e56f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e617:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e61c:	74 17                	je     c001e635 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e61e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e623:	74 10                	je     c001e635 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e625:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e62b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e62f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e635:	31 c0                	xor    eax,eax
c001e637:	83 c4 2c             	add    esp,0x2c
c001e63a:	5b                   	pop    ebx
c001e63b:	5e                   	pop    esi
c001e63c:	5f                   	pop    edi
c001e63d:	5d                   	pop    ebp
c001e63e:	c3                   	ret    
c001e63f:	90                   	nop

c001e640 <SATAPI::eject()>:
c001e640:	57                   	push   edi
c001e641:	b9 03 00 00 00       	mov    ecx,0x3
c001e646:	83 ec 18             	sub    esp,0x18
c001e649:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e64d:	fc                   	cld    
c001e64e:	31 c0                	xor    eax,eax
c001e650:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e652:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e657:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e65c:	50                   	push   eax
c001e65d:	6a 00                	push   0x0
c001e65f:	6a 00                	push   0x0
c001e661:	6a 00                	push   0x0
c001e663:	6a 00                	push   0x0
c001e665:	6a 02                	push   0x2
c001e667:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e66b:	50                   	push   eax
c001e66c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e670:	e8 e5 fc ff ff       	call   c001e35a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e675:	83 c4 38             	add    esp,0x38
c001e678:	31 c0                	xor    eax,eax
c001e67a:	5f                   	pop    edi
c001e67b:	c3                   	ret    

c001e67c <SATAPI::detectMedia()>:
c001e67c:	53                   	push   ebx
c001e67d:	83 ec 14             	sub    esp,0x14
c001e680:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e684:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e68a:	e8 25 00 ff ff       	call   c000e6b4 <VCache::writeWriteBuffer()>
c001e68f:	59                   	pop    ecx
c001e690:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e696:	e8 09 00 ff ff       	call   c000e6a4 <VCache::invalidateReadBuffer()>
c001e69b:	c7 04 24 23 34 02 c0 	mov    DWORD PTR [esp],0xc0023423
c001e6a2:	e8 63 c2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e6a7:	83 c4 10             	add    esp,0x10
c001e6aa:	31 c0                	xor    eax,eax
c001e6ac:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e6b3:	85 d2                	test   edx,edx
c001e6b5:	74 0f                	je     c001e6c6 <SATAPI::detectMedia()+0x4a>
c001e6b7:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6bd:	75 07                	jne    c001e6c6 <SATAPI::detectMedia()+0x4a>
c001e6bf:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e6c6:	40                   	inc    eax
c001e6c7:	83 f8 1a             	cmp    eax,0x1a
c001e6ca:	75 e0                	jne    c001e6ac <SATAPI::detectMedia()+0x30>
c001e6cc:	83 c4 08             	add    esp,0x8
c001e6cf:	5b                   	pop    ebx
c001e6d0:	c3                   	ret    
c001e6d1:	90                   	nop

c001e6d2 <SATAPI::open(int, int, void*)>:
c001e6d2:	56                   	push   esi
c001e6d3:	53                   	push   ebx
c001e6d4:	51                   	push   ecx
c001e6d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6dd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e6e7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e6ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6f1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e6fb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e705:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e70c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e712:	e8 cb 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e717:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e71d:	89 c6                	mov    esi,eax
c001e71f:	e8 be 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e724:	81 c6 00 10 00 00    	add    esi,0x1000
c001e72a:	39 c6                	cmp    esi,eax
c001e72c:	74 10                	je     c001e73e <SATAPI::open(int, int, void*)+0x6c>
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	68 38 34 02 c0       	push   0xc0023438
c001e736:	e8 ec 2d ff ff       	call   c0011527 <KePanic(char const*)>
c001e73b:	83 c4 10             	add    esp,0x10
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	6a 02                	push   0x2
c001e743:	e8 ad ae fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e748:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e74e:	6a 03                	push   0x3
c001e750:	50                   	push   eax
c001e751:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e757:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e75d:	e8 9c b5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e762:	83 c4 14             	add    esp,0x14
c001e765:	68 78 01 00 00       	push   0x178
c001e76a:	e8 64 93 fe ff       	call   c0007ad3 <malloc>
c001e76f:	83 c4 0c             	add    esp,0xc
c001e772:	6a 00                	push   0x0
c001e774:	68 ff ff ff 7f       	push   0x7fffffff
c001e779:	6a 00                	push   0x0
c001e77b:	6a 00                	push   0x0
c001e77d:	53                   	push   ebx
c001e77e:	68 4e 34 02 c0       	push   0xc002344e
c001e783:	89 c6                	mov    esi,eax
c001e785:	50                   	push   eax
c001e786:	e8 83 f3 fe ff       	call   c000db0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e78b:	83 c4 14             	add    esp,0x14
c001e78e:	56                   	push   esi
c001e78f:	e8 3a f4 fe ff       	call   c000dbce <LogicalDisk::assignDriveLetter()>
c001e794:	5a                   	pop    edx
c001e795:	59                   	pop    ecx
c001e796:	0f be c0             	movsx  eax,al
c001e799:	50                   	push   eax
c001e79a:	68 a0 32 02 c0       	push   0xc00232a0
c001e79f:	e8 66 c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e7a4:	58                   	pop    eax
c001e7a5:	5a                   	pop    edx
c001e7a6:	56                   	push   esi
c001e7a7:	53                   	push   ebx
c001e7a8:	e8 b3 e1 fe ff       	call   c000c960 <Device::addChild(Device*)>
c001e7ad:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e7b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7b6:	e8 db e5 fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001e7bb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7c5:	e8 b2 fe ff ff       	call   c001e67c <SATAPI::detectMedia()>
c001e7ca:	83 c4 14             	add    esp,0x14
c001e7cd:	31 c0                	xor    eax,eax
c001e7cf:	5b                   	pop    ebx
c001e7d0:	5e                   	pop    esi
c001e7d1:	c3                   	ret    

c001e7d2 <SATAPI::read(unsigned long long, int, void*)>:
c001e7d2:	55                   	push   ebp
c001e7d3:	57                   	push   edi
c001e7d4:	56                   	push   esi
c001e7d5:	53                   	push   ebx
c001e7d6:	83 ec 3c             	sub    esp,0x3c
c001e7d9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e7dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e7e1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e7e5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e7e9:	83 fd 04             	cmp    ebp,0x4
c001e7ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7f4:	7e 10                	jle    c001e806 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e7f6:	83 ec 0c             	sub    esp,0xc
c001e7f9:	68 5c 34 02 c0       	push   0xc002345c
c001e7fe:	e8 24 2d ff ff       	call   c0011527 <KePanic(char const*)>
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e80c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e812:	51                   	push   ecx
c001e813:	50                   	push   eax
c001e814:	83 c0 02             	add    eax,0x2
c001e817:	c1 e0 07             	shl    eax,0x7
c001e81a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e820:	50                   	push   eax
c001e821:	52                   	push   edx
c001e822:	e8 61 e1 ff ff       	call   c001c988 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e827:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e82b:	b9 03 00 00 00       	mov    ecx,0x3
c001e830:	fc                   	cld    
c001e831:	31 c0                	xor    eax,eax
c001e833:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e835:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e83a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e83f:	83 c4 0c             	add    esp,0xc
c001e842:	6a 00                	push   0x0
c001e844:	6a 00                	push   0x0
c001e846:	6a 00                	push   0x0
c001e848:	6a 00                	push   0x0
c001e84a:	6a 02                	push   0x2
c001e84c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e850:	50                   	push   eax
c001e851:	53                   	push   ebx
c001e852:	e8 03 fb ff ff       	call   c001e35a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e857:	83 c4 20             	add    esp,0x20
c001e85a:	85 c0                	test   eax,eax
c001e85c:	89 c6                	mov    esi,eax
c001e85e:	75 46                	jne    c001e8a6 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e860:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e864:	b9 03 00 00 00       	mov    ecx,0x3
c001e869:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e86b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e86f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e874:	0f c8                	bswap  eax
c001e876:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e87a:	89 e8                	mov    eax,ebp
c001e87c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e880:	50                   	push   eax
c001e881:	55                   	push   ebp
c001e882:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e886:	c1 e5 0b             	shl    ebp,0xb
c001e889:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e88d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e891:	55                   	push   ebp
c001e892:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e896:	50                   	push   eax
c001e897:	53                   	push   ebx
c001e898:	e8 bd fa ff ff       	call   c001e35a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e89d:	83 c4 20             	add    esp,0x20
c001e8a0:	85 c0                	test   eax,eax
c001e8a2:	89 c6                	mov    esi,eax
c001e8a4:	74 0c                	je     c001e8b2 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e8a6:	83 ec 0c             	sub    esp,0xc
c001e8a9:	53                   	push   ebx
c001e8aa:	e8 cd fd ff ff       	call   c001e67c <SATAPI::detectMedia()>
c001e8af:	83 c4 10             	add    esp,0x10
c001e8b2:	83 c4 3c             	add    esp,0x3c
c001e8b5:	89 f0                	mov    eax,esi
c001e8b7:	5b                   	pop    ebx
c001e8b8:	5e                   	pop    esi
c001e8b9:	5f                   	pop    edi
c001e8ba:	5d                   	pop    ebp
c001e8bb:	c3                   	ret    

c001e8bc <IOAPIC::close(int, int, void*)>:
c001e8bc:	b8 00 00 00 00       	mov    eax,0x0
c001e8c1:	c3                   	ret    

c001e8c2 <apicGetBase()>:
c001e8c2:	55                   	push   ebp
c001e8c3:	89 e5                	mov    ebp,esp
c001e8c5:	83 ec 18             	sub    esp,0x18
c001e8c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8cd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e8d3:	83 e0 08             	and    eax,0x8
c001e8d6:	0f b6 c0             	movzx  eax,al
c001e8d9:	85 c0                	test   eax,eax
c001e8db:	75 07                	jne    c001e8e4 <apicGetBase()+0x22>
c001e8dd:	b8 00 00 00 00       	mov    eax,0x0
c001e8e2:	eb 21                	jmp    c001e905 <apicGetBase()+0x43>
c001e8e4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8e9:	83 ec 08             	sub    esp,0x8
c001e8ec:	6a 1b                	push   0x1b
c001e8ee:	50                   	push   eax
c001e8ef:	e8 ee 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e8f4:	83 c4 10             	add    esp,0x10
c001e8f7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e8fa:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e8fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e900:	25 00 00 ff ff       	and    eax,0xffff0000
c001e905:	c9                   	leave  
c001e906:	c3                   	ret    
c001e907:	90                   	nop

c001e908 <IOAPIC::IOAPIC()>:
c001e908:	83 ec 0c             	sub    esp,0xc
c001e90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90f:	83 ec 08             	sub    esp,0x8
c001e912:	68 c0 34 02 c0       	push   0xc00234c0
c001e917:	50                   	push   eax
c001e918:	e8 db e1 fe ff       	call   c000caf8 <Device::Device(char const*)>
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	89 10                	mov    DWORD PTR [eax],edx
c001e92b:	90                   	nop
c001e92c:	83 c4 0c             	add    esp,0xc
c001e92f:	c3                   	ret    

c001e930 <apicOpen()>:
c001e930:	55                   	push   ebp
c001e931:	89 e5                	mov    ebp,esp
c001e933:	53                   	push   ebx
c001e934:	83 ec 34             	sub    esp,0x34
c001e937:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e93c:	83 f0 01             	xor    eax,0x1
c001e93f:	0f b6 c0             	movzx  eax,al
c001e942:	85 c0                	test   eax,eax
c001e944:	0f 84 a3 00 00 00    	je     c001e9ed <apicOpen()+0xbd>
c001e94a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e94e:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e953:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e957:	0f b6 c0             	movzx  eax,al
c001e95a:	39 c2                	cmp    edx,eax
c001e95c:	0f 83 84 00 00 00    	jae    c001e9e6 <apicOpen()+0xb6>
c001e962:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e969:	83 ec 0c             	sub    esp,0xc
c001e96c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e96f:	e8 5f 91 fe ff       	call   c0007ad3 <malloc>
c001e974:	83 c4 10             	add    esp,0x10
c001e977:	89 c3                	mov    ebx,eax
c001e979:	83 ec 0c             	sub    esp,0xc
c001e97c:	53                   	push   ebx
c001e97d:	e8 86 ff ff ff       	call   c001e908 <IOAPIC::IOAPIC()>
c001e982:	83 c4 10             	add    esp,0x10
c001e985:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e988:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e98c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e98f:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e996:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e99b:	83 c0 01             	add    eax,0x1
c001e99e:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e9a3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9a8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e9ae:	83 ec 08             	sub    esp,0x8
c001e9b1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9b4:	50                   	push   eax
c001e9b5:	e8 a6 df fe ff       	call   c000c960 <Device::addChild(Device*)>
c001e9ba:	83 c4 10             	add    esp,0x10
c001e9bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9c2:	83 c0 08             	add    eax,0x8
c001e9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9c7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9cb:	6a 00                	push   0x0
c001e9cd:	6a 00                	push   0x0
c001e9cf:	52                   	push   edx
c001e9d0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9d3:	ff d0                	call   eax
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e9db:	83 c0 01             	add    eax,0x1
c001e9de:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e9e1:	e9 68 ff ff ff       	jmp    c001e94e <apicOpen()+0x1e>
c001e9e6:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001e9ed:	e8 d0 fe ff ff       	call   c001e8c2 <apicGetBase()>
c001e9f2:	05 f0 00 00 00       	add    eax,0xf0
c001e9f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e9fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e9fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ff:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea02:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea09:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea10:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea13:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea16:	89 10                	mov    DWORD PTR [eax],edx
c001ea18:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea1f:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea24:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea27:	7d 7c                	jge    c001eaa5 <apicOpen()+0x175>
c001ea29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea2c:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea33:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea39:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea40:	c1 e8 08             	shr    eax,0x8
c001ea43:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea47:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea4a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea51:	c1 e8 18             	shr    eax,0x18
c001ea54:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea57:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea5b:	3d ff 00 00 00       	cmp    eax,0xff
c001ea60:	75 3a                	jne    c001ea9c <apicOpen()+0x16c>
c001ea62:	e8 5b fe ff ff       	call   c001e8c2 <apicGetBase()>
c001ea67:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ea6b:	83 fa 01             	cmp    edx,0x1
c001ea6e:	75 07                	jne    c001ea77 <apicOpen()+0x147>
c001ea70:	ba 60 03 00 00       	mov    edx,0x360
c001ea75:	eb 05                	jmp    c001ea7c <apicOpen()+0x14c>
c001ea77:	ba 50 03 00 00       	mov    edx,0x350
c001ea7c:	01 d0                	add    eax,edx
c001ea7e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ea81:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea86:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ea89:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ea90:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ea94:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea97:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ea9a:	89 10                	mov    DWORD PTR [eax],edx
c001ea9c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eaa0:	e9 7a ff ff ff       	jmp    c001ea1f <apicOpen()+0xef>
c001eaa5:	90                   	nop
c001eaa6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eaa9:	c9                   	leave  
c001eaaa:	c3                   	ret    
c001eaab:	90                   	nop

c001eaac <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eaac:	55                   	push   ebp
c001eaad:	89 e5                	mov    ebp,esp
c001eaaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eab2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eab8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eabb:	72 1d                	jb     c001eada <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eabd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eac0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eac9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eacf:	01 d0                	add    eax,edx
c001ead1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ead4:	73 04                	jae    c001eada <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ead6:	b0 01                	mov    al,0x1
c001ead8:	eb 02                	jmp    c001eadc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eada:	b0 00                	mov    al,0x0
c001eadc:	5d                   	pop    ebp
c001eadd:	c3                   	ret    

c001eade <IOAPIC::read(int)>:
c001eade:	55                   	push   ebp
c001eadf:	89 e5                	mov    ebp,esp
c001eae1:	83 ec 10             	sub    esp,0x10
c001eae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eae7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eaed:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eaf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eaf3:	0f b6 d0             	movzx  edx,al
c001eaf6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eaf9:	89 10                	mov    DWORD PTR [eax],edx
c001eafb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eafe:	83 c0 10             	add    eax,0x10
c001eb01:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb03:	c9                   	leave  
c001eb04:	c3                   	ret    
c001eb05:	90                   	nop

c001eb06 <IOAPIC::open(int, int, void*)>:
c001eb06:	55                   	push   ebp
c001eb07:	89 e5                	mov    ebp,esp
c001eb09:	57                   	push   edi
c001eb0a:	56                   	push   esi
c001eb0b:	53                   	push   ebx
c001eb0c:	83 ec 04             	sub    esp,0x4
c001eb0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb15:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb24:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb2e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb3d:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb47:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb59:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb5f:	0f b6 f0             	movzx  esi,al
c001eb62:	89 d0                	mov    eax,edx
c001eb64:	ba 00 00 00 00       	mov    edx,0x0
c001eb69:	89 c7                	mov    edi,eax
c001eb6b:	83 e7 ff             	and    edi,0xffffffff
c001eb6e:	89 f9                	mov    ecx,edi
c001eb70:	0f b6 da             	movzx  ebx,dl
c001eb73:	89 c8                	mov    eax,ecx
c001eb75:	89 da                	mov    edx,ebx
c001eb77:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eb7a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eb7d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eb81:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eb85:	83 e0 00             	and    eax,0x0
c001eb88:	09 d0                	or     eax,edx
c001eb8a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001eb8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb91:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb97:	8d 50 01             	lea    edx,[eax+0x1]
c001eb9a:	88 d1                	mov    cl,dl
c001eb9c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eb9f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001eba5:	0f b6 d0             	movzx  edx,al
c001eba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebab:	83 c2 08             	add    edx,0x8
c001ebae:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ebb2:	0f b6 c9             	movzx  ecx,cl
c001ebb5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ebbb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebbf:	6a 01                	push   0x1
c001ebc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebc4:	e8 15 ff ff ff       	call   c001eade <IOAPIC::read(int)>
c001ebc9:	83 c4 08             	add    esp,0x8
c001ebcc:	c1 f8 10             	sar    eax,0x10
c001ebcf:	0f b6 c0             	movzx  eax,al
c001ebd2:	8d 50 01             	lea    edx,[eax+0x1]
c001ebd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebd8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ebde:	b8 00 00 00 00       	mov    eax,0x0
c001ebe3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ebe6:	5b                   	pop    ebx
c001ebe7:	5e                   	pop    esi
c001ebe8:	5f                   	pop    edi
c001ebe9:	5d                   	pop    ebp
c001ebea:	c3                   	ret    
c001ebeb:	90                   	nop

c001ebec <IOAPIC::write(int, int)>:
c001ebec:	55                   	push   ebp
c001ebed:	89 e5                	mov    ebp,esp
c001ebef:	83 ec 10             	sub    esp,0x10
c001ebf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebf5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebfb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec01:	0f b6 d0             	movzx  edx,al
c001ec04:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec07:	89 10                	mov    DWORD PTR [eax],edx
c001ec09:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec0c:	8d 50 10             	lea    edx,[eax+0x10]
c001ec0f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec12:	89 02                	mov    DWORD PTR [edx],eax
c001ec14:	90                   	nop
c001ec15:	c9                   	leave  
c001ec16:	c3                   	ret    
c001ec17:	90                   	nop

c001ec18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec18:	55                   	push   ebp
c001ec19:	89 e5                	mov    ebp,esp
c001ec1b:	53                   	push   ebx
c001ec1c:	83 ec 2c             	sub    esp,0x2c
c001ec1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec22:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec25:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec28:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec31:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec34:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec3a:	88 d8                	mov    al,bl
c001ec3c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec3f:	88 c8                	mov    al,cl
c001ec41:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec44:	88 d0                	mov    al,dl
c001ec46:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec49:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec4d:	83 c0 08             	add    eax,0x8
c001ec50:	d1 e0                	shl    eax,1
c001ec52:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec55:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec59:	83 c0 08             	add    eax,0x8
c001ec5c:	d1 e0                	shl    eax,1
c001ec5e:	83 c0 01             	add    eax,0x1
c001ec61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec64:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec67:	50                   	push   eax
c001ec68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec6b:	e8 6e fe ff ff       	call   c001eade <IOAPIC::read(int)>
c001ec70:	83 c4 08             	add    esp,0x8
c001ec73:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ec76:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ec7d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec80:	c1 e0 18             	shl    eax,0x18
c001ec83:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ec86:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ec89:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec8c:	52                   	push   edx
c001ec8d:	50                   	push   eax
c001ec8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec91:	e8 56 ff ff ff       	call   c001ebec <IOAPIC::write(int, int)>
c001ec96:	83 c4 0c             	add    esp,0xc
c001ec99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec9c:	50                   	push   eax
c001ec9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca0:	e8 39 fe ff ff       	call   c001eade <IOAPIC::read(int)>
c001eca5:	83 c4 08             	add    esp,0x8
c001eca8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ecab:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ecb2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ecb9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ecc0:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ecc4:	85 c0                	test   eax,eax
c001ecc6:	74 09                	je     c001ecd1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ecc8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001eccf:	eb 07                	jmp    c001ecd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ecd1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ecd8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ecdc:	85 c0                	test   eax,eax
c001ecde:	74 09                	je     c001ece9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ece0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ece7:	eb 07                	jmp    c001ecf0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ece9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ecf0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ecf7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ecfb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ecfe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed04:	52                   	push   edx
c001ed05:	50                   	push   eax
c001ed06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed09:	e8 de fe ff ff       	call   c001ebec <IOAPIC::write(int, int)>
c001ed0e:	83 c4 0c             	add    esp,0xc
c001ed11:	90                   	nop
c001ed12:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed15:	c9                   	leave  
c001ed16:	c3                   	ret    
c001ed17:	90                   	nop

c001ed18 <APICTimer::close(int, int, void*)>:
c001ed18:	b8 00 00 00 00       	mov    eax,0x0
c001ed1d:	c3                   	ret    
c001ed1e:	66 90                	xchg   ax,ax

c001ed20 <apicTimerHandler(regs*, void*)>:
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed27:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed29:	b8 10 27 00 00       	mov    eax,0x2710
c001ed2e:	ba 00 00 00 00       	mov    edx,0x0
c001ed33:	f7 f1                	div    ecx
c001ed35:	83 ec 0c             	sub    esp,0xc
c001ed38:	50                   	push   eax
c001ed39:	e8 8e f6 fe ff       	call   c000e3cc <timerHandler(unsigned int)>
c001ed3e:	83 c4 10             	add    esp,0x10
c001ed41:	90                   	nop
c001ed42:	83 c4 0c             	add    esp,0xc
c001ed45:	c3                   	ret    
c001ed46:	66 90                	xchg   ax,ax

c001ed48 <APICTimer::open(int, int, void*)>:
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed51:	83 c0 24             	add    eax,0x24
c001ed54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed56:	83 ec 08             	sub    esp,0x8
c001ed59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed61:	ff d0                	call   eax
c001ed63:	83 c4 10             	add    esp,0x10
c001ed66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed6e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed7c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ed82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed86:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	51                   	push   ecx
c001ed90:	6a 01                	push   0x1
c001ed92:	68 20 ed 01 c0       	push   0xc001ed20
c001ed97:	52                   	push   edx
c001ed98:	50                   	push   eax
c001ed99:	e8 6e db fe ff       	call   c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed9e:	83 c4 20             	add    esp,0x20
c001eda1:	89 c2                	mov    edx,eax
c001eda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001edad:	b8 00 00 00 00       	mov    eax,0x0
c001edb2:	83 c4 0c             	add    esp,0xc
c001edb5:	c3                   	ret    
c001edb6:	66 90                	xchg   ax,ax

c001edb8 <APICTimer::write(int)>:
c001edb8:	83 ec 0c             	sub    esp,0xc
c001edbb:	83 ec 0c             	sub    esp,0xc
c001edbe:	68 f4 34 02 c0       	push   0xc00234f4
c001edc3:	e8 5f 27 ff ff       	call   c0011527 <KePanic(char const*)>
c001edc8:	83 c4 10             	add    esp,0x10
c001edcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001edd9:	90                   	nop
c001edda:	83 c4 0c             	add    esp,0xc
c001eddd:	c3                   	ret    
c001edde:	66 90                	xchg   ax,ax

c001ede0 <APICTimer::APICTimer()>:
c001ede0:	83 ec 0c             	sub    esp,0xc
c001ede3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede7:	83 ec 08             	sub    esp,0x8
c001edea:	68 04 35 02 c0       	push   0xc0023504
c001edef:	50                   	push   eax
c001edf0:	e8 0b f5 fe ff       	call   c000e300 <Timer::Timer(char const*)>
c001edf5:	83 c4 10             	add    esp,0x10
c001edf8:	ba 18 35 02 c0       	mov    edx,0xc0023518
c001edfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee01:	89 10                	mov    DWORD PTR [eax],edx
c001ee03:	90                   	nop
c001ee04:	83 c4 0c             	add    esp,0xc
c001ee07:	c3                   	ret    

c001ee08 <PIT::write(int)>:
c001ee08:	83 ec 10             	sub    esp,0x10
c001ee0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee1d:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee22:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee27:	89 c2                	mov    edx,eax
c001ee29:	c1 fa 1f             	sar    edx,0x1f
c001ee2c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee34:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee3b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee40:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee44:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee49:	ee                   	out    dx,al
c001ee4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee4e:	0f b6 c0             	movzx  eax,al
c001ee51:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee58:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee5c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee60:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee65:	ee                   	out    dx,al
c001ee66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee6a:	c1 f8 08             	sar    eax,0x8
c001ee6d:	0f b6 c0             	movzx  eax,al
c001ee70:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ee77:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ee7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ee7f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ee84:	ee                   	out    dx,al
c001ee85:	90                   	nop
c001ee86:	83 c4 10             	add    esp,0x10
c001ee89:	c3                   	ret    
c001ee8a:	66 90                	xchg   ax,ax

c001ee8c <pitHandler(regs*, void*)>:
c001ee8c:	83 ec 0c             	sub    esp,0xc
c001ee8f:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ee95:	b8 10 27 00 00       	mov    eax,0x2710
c001ee9a:	89 c2                	mov    edx,eax
c001ee9c:	c1 fa 1f             	sar    edx,0x1f
c001ee9f:	f7 f9                	idiv   ecx
c001eea1:	83 ec 0c             	sub    esp,0xc
c001eea4:	50                   	push   eax
c001eea5:	e8 22 f5 fe ff       	call   c000e3cc <timerHandler(unsigned int)>
c001eeaa:	83 c4 10             	add    esp,0x10
c001eead:	90                   	nop
c001eeae:	83 c4 0c             	add    esp,0xc
c001eeb1:	c3                   	ret    
c001eeb2:	66 90                	xchg   ax,ax

c001eeb4 <PIT::open(int, int, void*)>:
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eebd:	83 c0 24             	add    eax,0x24
c001eec0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec2:	83 ec 08             	sub    esp,0x8
c001eec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eecd:	ff d0                	call   eax
c001eecf:	83 c4 10             	add    esp,0x10
c001eed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	6a 00                	push   0x0
c001eedb:	6a 01                	push   0x1
c001eedd:	68 8c ee 01 c0       	push   0xc001ee8c
c001eee2:	6a 00                	push   0x0
c001eee4:	50                   	push   eax
c001eee5:	e8 22 da fe ff       	call   c000c90c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eeea:	83 c4 20             	add    esp,0x20
c001eeed:	89 c2                	mov    edx,eax
c001eeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eef9:	b8 00 00 00 00       	mov    eax,0x0
c001eefe:	83 c4 0c             	add    esp,0xc
c001ef01:	c3                   	ret    
c001ef02:	66 90                	xchg   ax,ax

c001ef04 <PIT::close(int, int, void*)>:
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef19:	6a 01                	push   0x1
c001ef1b:	68 8c ee 01 c0       	push   0xc001ee8c
c001ef20:	6a 00                	push   0x0
c001ef22:	50                   	push   eax
c001ef23:	e8 1a da fe ff       	call   c000c942 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef28:	83 c4 10             	add    esp,0x10
c001ef2b:	b8 00 00 00 00       	mov    eax,0x0
c001ef30:	83 c4 0c             	add    esp,0xc
c001ef33:	c3                   	ret    

c001ef34 <PIT::PIT()>:
c001ef34:	83 ec 0c             	sub    esp,0xc
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	83 ec 08             	sub    esp,0x8
c001ef3e:	68 40 35 02 c0       	push   0xc0023540
c001ef43:	50                   	push   eax
c001ef44:	e8 b7 f3 fe ff       	call   c000e300 <Timer::Timer(char const*)>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	ba 68 35 02 c0       	mov    edx,0xc0023568
c001ef51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef55:	89 10                	mov    DWORD PTR [eax],edx
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef61:	0f b6 d0             	movzx  edx,al
c001ef64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef68:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ef6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef79:	0f b6 d0             	movzx  edx,al
c001ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef80:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ef85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef8f:	8d 50 01             	lea    edx,[eax+0x1]
c001ef92:	88 d1                	mov    cl,dl
c001ef94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef98:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ef9e:	0f b6 d0             	movzx  edx,al
c001efa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001efa9:	83 e1 3f             	and    ecx,0x3f
c001efac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efb0:	90                   	nop
c001efb1:	83 c4 0c             	add    esp,0xc
c001efb4:	c3                   	ret    
c001efb5:	66 90                	xchg   ax,ax
c001efb7:	66 90                	xchg   ax,ax
c001efb9:	66 90                	xchg   ax,ax
c001efbb:	66 90                	xchg   ax,ax
c001efbd:	66 90                	xchg   ax,ax
c001efbf:	90                   	nop

c001efc0 <avxDetect>:
c001efc0:	b8 01 00 00 00       	mov    eax,0x1
c001efc5:	0f a2                	cpuid  
c001efc7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001efcd:	74 15                	je     c001efe4 <avxDetect.noAVX>
c001efcf:	b8 01 00 00 00       	mov    eax,0x1
c001efd4:	0f a2                	cpuid  
c001efd6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001efdc:	74 06                	je     c001efe4 <avxDetect.noAVX>
c001efde:	b8 01 00 00 00       	mov    eax,0x1
c001efe3:	c3                   	ret    

c001efe4 <avxDetect.noAVX>:
c001efe4:	b8 00 00 00 00       	mov    eax,0x0
c001efe9:	c3                   	ret    

c001efea <avxSave>:
c001efea:	53                   	push   ebx
c001efeb:	52                   	push   edx
c001efec:	31 c0                	xor    eax,eax
c001efee:	48                   	dec    eax
c001efef:	89 c2                	mov    edx,eax
c001eff1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eff5:	0f ae 23             	xsave  [ebx]
c001eff8:	5a                   	pop    edx
c001eff9:	5b                   	pop    ebx
c001effa:	c3                   	ret    

c001effb <avxLoad>:
c001effb:	53                   	push   ebx
c001effc:	52                   	push   edx
c001effd:	31 c0                	xor    eax,eax
c001efff:	48                   	dec    eax
c001f000:	89 c2                	mov    edx,eax
c001f002:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f006:	0f ae 2b             	xrstor [ebx]
c001f009:	5a                   	pop    edx
c001f00a:	5b                   	pop    ebx
c001f00b:	c3                   	ret    

c001f00c <avxInit>:
c001f00c:	e8 67 03 00 00       	call   c001f378 <sseInit>
c001f011:	50                   	push   eax
c001f012:	51                   	push   ecx
c001f013:	0f 20 e0             	mov    eax,cr4
c001f016:	0d 00 00 04 00       	or     eax,0x40000
c001f01b:	0f 22 e0             	mov    cr4,eax
c001f01e:	31 c9                	xor    ecx,ecx
c001f020:	0f 01 d0             	xgetbv 
c001f023:	0d 07 00 00 00       	or     eax,0x7
c001f028:	0f 01 d1             	xsetbv 
c001f02b:	59                   	pop    ecx
c001f02c:	58                   	pop    eax
c001f02d:	c3                   	ret    

c001f02e <avxClose>:
c001f02e:	c3                   	ret    

c001f02f <wouldSheSayYes>:
c001f02f:	c3                   	ret    
c001f030:	49                   	dec    ecx
c001f031:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f035:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f039:	75 20                	jne    c001f05b <isr0+0xb>
c001f03b:	4e                   	dec    esi
c001f03c:	79 61                	jns    c001f09f <isr7+0x3>
c001f03e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f043:	66 90                	xchg   ax,ax
c001f045:	66 90                	xchg   ax,ax
c001f047:	66 90                	xchg   ax,ax
c001f049:	66 90                	xchg   ax,ax
c001f04b:	66 90                	xchg   ax,ax
c001f04d:	66 90                	xchg   ax,ax
c001f04f:	90                   	nop

c001f050 <isr0>:
c001f050:	fa                   	cli    
c001f051:	68 00 00 00 00       	push   0x0
c001f056:	68 00 00 00 00       	push   0x0
c001f05b:	e9 56 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f060 <isr1>:
c001f060:	fa                   	cli    
c001f061:	6a 00                	push   0x0
c001f063:	6a 01                	push   0x1
c001f065:	e9 4c 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f06a <isr2>:
c001f06a:	fa                   	cli    
c001f06b:	6a 00                	push   0x0
c001f06d:	6a 02                	push   0x2
c001f06f:	e9 42 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f074 <isr3>:
c001f074:	fa                   	cli    
c001f075:	6a 00                	push   0x0
c001f077:	6a 03                	push   0x3
c001f079:	e9 38 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f07e <isr4>:
c001f07e:	fa                   	cli    
c001f07f:	6a 00                	push   0x0
c001f081:	6a 04                	push   0x4
c001f083:	e9 2e 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f088 <isr5>:
c001f088:	fa                   	cli    
c001f089:	6a 00                	push   0x0
c001f08b:	6a 05                	push   0x5
c001f08d:	e9 24 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f092 <isr6>:
c001f092:	fa                   	cli    
c001f093:	6a 00                	push   0x0
c001f095:	6a 06                	push   0x6
c001f097:	e9 1a 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f09c <isr7>:
c001f09c:	fa                   	cli    
c001f09d:	6a 00                	push   0x0
c001f09f:	6a 07                	push   0x7
c001f0a1:	e9 10 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0a6 <isr8>:
c001f0a6:	fa                   	cli    
c001f0a7:	6a 08                	push   0x8
c001f0a9:	e9 08 01 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0ae <isr9>:
c001f0ae:	fa                   	cli    
c001f0af:	6a 00                	push   0x0
c001f0b1:	6a 09                	push   0x9
c001f0b3:	e9 fe 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0b8 <isr10>:
c001f0b8:	fa                   	cli    
c001f0b9:	6a 0a                	push   0xa
c001f0bb:	e9 f6 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0c0 <isr11>:
c001f0c0:	fa                   	cli    
c001f0c1:	6a 0b                	push   0xb
c001f0c3:	e9 ee 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0c8 <isr12>:
c001f0c8:	fa                   	cli    
c001f0c9:	6a 0c                	push   0xc
c001f0cb:	e9 e6 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0d0 <isr13>:
c001f0d0:	fa                   	cli    
c001f0d1:	6a 0d                	push   0xd
c001f0d3:	53                   	push   ebx
c001f0d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0d8:	81 fb a6 f2 01 c0    	cmp    ebx,0xc001f2a6
c001f0de:	5b                   	pop    ebx
c001f0df:	0f 84 c3 01 00 00    	je     c001f2a8 <finishSignal2>
c001f0e5:	e9 cc 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0ea <isr14>:
c001f0ea:	fa                   	cli    
c001f0eb:	6a 0e                	push   0xe
c001f0ed:	e9 c4 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0f2 <isr15>:
c001f0f2:	fa                   	cli    
c001f0f3:	6a 00                	push   0x0
c001f0f5:	6a 0f                	push   0xf
c001f0f7:	e9 ba 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f0fc <isr16>:
c001f0fc:	fa                   	cli    
c001f0fd:	6a 00                	push   0x0
c001f0ff:	6a 10                	push   0x10
c001f101:	e9 b0 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f106 <isr17>:
c001f106:	fa                   	cli    
c001f107:	6a 00                	push   0x0
c001f109:	6a 11                	push   0x11
c001f10b:	e9 a6 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f110 <isr18>:
c001f110:	fa                   	cli    
c001f111:	6a 00                	push   0x0
c001f113:	6a 12                	push   0x12
c001f115:	e9 9c 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f11a <irq3>:
c001f11a:	fa                   	cli    
c001f11b:	6a 00                	push   0x0
c001f11d:	6a 23                	push   0x23
c001f11f:	e9 92 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f124 <irq4>:
c001f124:	fa                   	cli    
c001f125:	6a 00                	push   0x0
c001f127:	6a 24                	push   0x24
c001f129:	e9 88 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f12e <irq5>:
c001f12e:	fa                   	cli    
c001f12f:	6a 00                	push   0x0
c001f131:	6a 25                	push   0x25
c001f133:	e9 7e 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f138 <irq6>:
c001f138:	fa                   	cli    
c001f139:	6a 00                	push   0x0
c001f13b:	6a 26                	push   0x26
c001f13d:	e9 74 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f142 <irq7>:
c001f142:	fa                   	cli    
c001f143:	6a 00                	push   0x0
c001f145:	6a 27                	push   0x27
c001f147:	e9 6a 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f14c <irq8>:
c001f14c:	fa                   	cli    
c001f14d:	6a 00                	push   0x0
c001f14f:	6a 28                	push   0x28
c001f151:	e9 60 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f156 <irq9>:
c001f156:	fa                   	cli    
c001f157:	6a 00                	push   0x0
c001f159:	6a 29                	push   0x29
c001f15b:	e9 56 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f160 <irq10>:
c001f160:	fa                   	cli    
c001f161:	6a 00                	push   0x0
c001f163:	6a 2a                	push   0x2a
c001f165:	e9 4c 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f16a <irq11>:
c001f16a:	fa                   	cli    
c001f16b:	6a 00                	push   0x0
c001f16d:	6a 2b                	push   0x2b
c001f16f:	e9 42 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f174 <irq12>:
c001f174:	fa                   	cli    
c001f175:	6a 00                	push   0x0
c001f177:	6a 2c                	push   0x2c
c001f179:	e9 38 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f17e <irq13>:
c001f17e:	fa                   	cli    
c001f17f:	6a 00                	push   0x0
c001f181:	6a 2d                	push   0x2d
c001f183:	e9 2e 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f188 <irq14>:
c001f188:	fa                   	cli    
c001f189:	6a 00                	push   0x0
c001f18b:	6a 2e                	push   0x2e
c001f18d:	e9 24 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f192 <irq15>:
c001f192:	fa                   	cli    
c001f193:	6a 00                	push   0x0
c001f195:	6a 2f                	push   0x2f
c001f197:	e9 1a 00 00 00       	jmp    c001f1b6 <int_common_stub>

c001f19c <irq1>:
c001f19c:	fa                   	cli    
c001f19d:	6a 00                	push   0x0
c001f19f:	6a 21                	push   0x21
c001f1a1:	eb 13                	jmp    c001f1b6 <int_common_stub>

c001f1a3 <irq2>:
c001f1a3:	fa                   	cli    
c001f1a4:	6a 00                	push   0x0
c001f1a6:	6a 22                	push   0x22
c001f1a8:	eb 0c                	jmp    c001f1b6 <int_common_stub>

c001f1aa <isr96>:
c001f1aa:	6a 00                	push   0x0
c001f1ac:	6a 60                	push   0x60
c001f1ae:	fb                   	sti    
c001f1af:	eb 37                	jmp    c001f1e8 <syscall_common_stub>

c001f1b1 <irq0>:
c001f1b1:	fa                   	cli    
c001f1b2:	6a 00                	push   0x0
c001f1b4:	6a 20                	push   0x20

c001f1b6 <int_common_stub>:
c001f1b6:	60                   	pusha  
c001f1b7:	1e                   	push   ds
c001f1b8:	06                   	push   es
c001f1b9:	0f a0                	push   fs
c001f1bb:	0f a8                	push   gs
c001f1bd:	66 b8 10 00          	mov    ax,0x10
c001f1c1:	66 8e d8             	mov    ds,ax
c001f1c4:	66 8e c0             	mov    es,ax
c001f1c7:	66 8e e0             	mov    fs,ax
c001f1ca:	66 8e e8             	mov    gs,ax
c001f1cd:	54                   	push   esp
c001f1ce:	fc                   	cld    
c001f1cf:	e8 38 dc fe ff       	call   c000ce0c <int_handler>
c001f1d4:	81 c4 04 00 00 00    	add    esp,0x4
c001f1da:	0f a9                	pop    gs
c001f1dc:	0f a1                	pop    fs
c001f1de:	07                   	pop    es
c001f1df:	1f                   	pop    ds
c001f1e0:	61                   	popa   
c001f1e1:	81 c4 08 00 00 00    	add    esp,0x8
c001f1e7:	cf                   	iret   

c001f1e8 <syscall_common_stub>:
c001f1e8:	60                   	pusha  
c001f1e9:	1e                   	push   ds
c001f1ea:	06                   	push   es
c001f1eb:	0f a0                	push   fs
c001f1ed:	0f a8                	push   gs
c001f1ef:	66 b8 10 00          	mov    ax,0x10
c001f1f3:	66 8e d8             	mov    ds,ax
c001f1f6:	66 8e c0             	mov    es,ax
c001f1f9:	66 8e e0             	mov    fs,ax
c001f1fc:	66 8e e8             	mov    gs,ax
c001f1ff:	54                   	push   esp
c001f200:	fc                   	cld    
c001f201:	e8 06 dc fe ff       	call   c000ce0c <int_handler>
c001f206:	81 c4 04 00 00 00    	add    esp,0x4
c001f20c:	0f a9                	pop    gs
c001f20e:	0f a1                	pop    fs
c001f210:	07                   	pop    es
c001f211:	1f                   	pop    ds
c001f212:	e8 20 29 ff ff       	call   c0011b37 <KiCheckSignalZ>
c001f217:	3d 00 00 00 00       	cmp    eax,0x0
c001f21c:	0f 84 c0 00 00 00    	je     c001f2e2 <skipSignals>
c001f222:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f227:	61                   	popa   
c001f228:	53                   	push   ebx
c001f229:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f22f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f232:	5b                   	pop    ebx
c001f233:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f238:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f23b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f23e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f241:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f244:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f247:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f24a:	81 c4 08 00 00 00    	add    esp,0x8
c001f250:	5e                   	pop    esi
c001f251:	5b                   	pop    ebx
c001f252:	59                   	pop    ecx
c001f253:	5a                   	pop    edx
c001f254:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f257:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f25a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f25d:	52                   	push   edx
c001f25e:	51                   	push   ecx
c001f25f:	53                   	push   ebx
c001f260:	56                   	push   esi
c001f261:	81 ec 08 00 00 00    	sub    esp,0x8
c001f267:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f26a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f26d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f270:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f273:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f276:	60                   	pusha  
c001f277:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f27d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f280:	89 e3                	mov    ebx,esp
c001f282:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f285:	52                   	push   edx
c001f286:	68 a6 f2 01 c0       	push   0xc001f2a6
c001f28b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f28e:	89 dc                	mov    esp,ebx
c001f290:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f293:	68 23 00 00 00       	push   0x23
c001f298:	51                   	push   ecx
c001f299:	68 02 02 00 00       	push   0x202
c001f29e:	68 1b 00 00 00       	push   0x1b
c001f2a3:	ff 36                	push   DWORD PTR [esi]
c001f2a5:	cf                   	iret   

c001f2a6 <finishSignal>:
c001f2a6:	cd 0f                	int    0xf

c001f2a8 <finishSignal2>:
c001f2a8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f2ae:	e8 01 29 ff ff       	call   c0011bb4 <KiFinishSignalZ>
c001f2b3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f2b9:	68 23 00 00 00       	push   0x23
c001f2be:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f2c1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f2c4:	68 1b 00 00 00       	push   0x1b
c001f2c9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f2cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f2d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f2d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f2d8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f2db:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f2de:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f2e1:	cf                   	iret   

c001f2e2 <skipSignals>:
c001f2e2:	61                   	popa   
c001f2e3:	81 c4 08 00 00 00    	add    esp,0x8
c001f2e9:	cf                   	iret   
c001f2ea:	90                   	nop
c001f2eb:	90                   	nop

c001f2ec <irq16>:
c001f2ec:	fa                   	cli    
c001f2ed:	6a 00                	push   0x0
c001f2ef:	6a 30                	push   0x30
c001f2f1:	e9 c0 fe ff ff       	jmp    c001f1b6 <int_common_stub>

c001f2f6 <irq17>:
c001f2f6:	fa                   	cli    
c001f2f7:	6a 00                	push   0x0
c001f2f9:	6a 31                	push   0x31
c001f2fb:	e9 b6 fe ff ff       	jmp    c001f1b6 <int_common_stub>

c001f300 <irq18>:
c001f300:	fa                   	cli    
c001f301:	6a 00                	push   0x0
c001f303:	6a 32                	push   0x32
c001f305:	e9 ac fe ff ff       	jmp    c001f1b6 <int_common_stub>

c001f30a <irq19>:
c001f30a:	fa                   	cli    
c001f30b:	6a 00                	push   0x0
c001f30d:	6a 33                	push   0x33
c001f30f:	e9 a2 fe ff ff       	jmp    c001f1b6 <int_common_stub>

c001f314 <irq20>:
c001f314:	fa                   	cli    
c001f315:	6a 00                	push   0x0
c001f317:	6a 34                	push   0x34
c001f319:	e9 98 fe ff ff       	jmp    c001f1b6 <int_common_stub>

c001f31e <irq21>:
c001f31e:	fa                   	cli    
c001f31f:	6a 00                	push   0x0
c001f321:	6a 35                	push   0x35
c001f323:	e9 8e fe ff ff       	jmp    c001f1b6 <int_common_stub>

c001f328 <irq22>:
c001f328:	fa                   	cli    
c001f329:	6a 00                	push   0x0
c001f32b:	6a 36                	push   0x36
c001f32d:	e9 84 fe ff ff       	jmp    c001f1b6 <int_common_stub>

c001f332 <irq23>:
c001f332:	fa                   	cli    
c001f333:	6a 00                	push   0x0
c001f335:	6a 37                	push   0x37
c001f337:	e9 7a fe ff ff       	jmp    c001f1b6 <int_common_stub>
c001f33c:	66 90                	xchg   ax,ax
c001f33e:	66 90                	xchg   ax,ax

c001f340 <i386GetRDRAND>:
c001f340:	b9 64 00 00 00       	mov    ecx,0x64

c001f345 <retry>:
c001f345:	0f c7 f0             	rdrand eax
c001f348:	72 05                	jb     c001f34f <retry.done>
c001f34a:	e2 f9                	loop   c001f345 <retry>

c001f34c <retry.fail>:
c001f34c:	31 c0                	xor    eax,eax
c001f34e:	c3                   	ret    

c001f34f <retry.done>:
c001f34f:	c3                   	ret    

c001f350 <absolutelyNoChanceInHell>:
c001f350:	b8 01 00 00 00       	mov    eax,0x1
c001f355:	0f a2                	cpuid  
c001f357:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f35d:	74 06                	je     c001f365 <sseDetect.noSSE>
c001f35f:	b8 01 00 00 00       	mov    eax,0x1
c001f364:	c3                   	ret    

c001f365 <sseDetect.noSSE>:
c001f365:	31 c0                	xor    eax,eax
c001f367:	c3                   	ret    

c001f368 <sseSave>:
c001f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f36c:	0f ae 00             	fxsave [eax]
c001f36f:	c3                   	ret    

c001f370 <sseLoad>:
c001f370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f374:	0f ae 08             	fxrstor [eax]
c001f377:	c3                   	ret    

c001f378 <sseInit>:
c001f378:	e8 42 00 00 00       	call   c001f3bf <x87Init>
c001f37d:	0f 20 e0             	mov    eax,cr4
c001f380:	66 0d 00 06          	or     ax,0x600
c001f384:	0f 22 e0             	mov    cr4,eax
c001f387:	c3                   	ret    

c001f388 <sseClose>:
c001f388:	c3                   	ret    
c001f389:	66 90                	xchg   ax,ax
c001f38b:	66 90                	xchg   ax,ax
c001f38d:	66 90                	xchg   ax,ax
c001f38f:	90                   	nop

c001f390 <value_37F>:
c001f390:	7f 03                	jg     c001f395 <value_37A+0x1>

c001f392 <value_37E>:
c001f392:	7e 03                	jle    c001f397 <x87Detect+0x1>

c001f394 <value_37A>:
c001f394:	7a 03                	jp     c001f399 <x87Detect+0x3>

c001f396 <x87Detect>:
c001f396:	b8 01 00 00 00       	mov    eax,0x1
c001f39b:	0f a2                	cpuid  
c001f39d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f3a3:	74 06                	je     c001f3ab <x87Detect.nox87>
c001f3a5:	b8 01 00 00 00       	mov    eax,0x1
c001f3aa:	c3                   	ret    

c001f3ab <x87Detect.nox87>:
c001f3ab:	b8 00 00 00 00       	mov    eax,0x0
c001f3b0:	c3                   	ret    

c001f3b1 <x87Save>:
c001f3b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3b5:	dd 30                	fnsave [eax]
c001f3b7:	c3                   	ret    

c001f3b8 <x87Load>:
c001f3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3bc:	dd 20                	frstor [eax]
c001f3be:	c3                   	ret    

c001f3bf <x87Init>:
c001f3bf:	0f 20 c0             	mov    eax,cr0
c001f3c2:	66 25 fb ff          	and    ax,0xfffb
c001f3c6:	66 0d 22 00          	or     ax,0x22
c001f3ca:	0f 22 c0             	mov    cr0,eax
c001f3cd:	db e3                	fninit 
c001f3cf:	0f 06                	clts   
c001f3d1:	d9 2d 94 f3 01 c0    	fldcw  WORD PTR ds:0xc001f394
c001f3d7:	c3                   	ret    

c001f3d8 <x87Close>:
c001f3d8:	c3                   	ret    
c001f3d9:	66 90                	xchg   ax,ax
c001f3db:	90                   	nop

c001f3dc <__do_global_ctors_aux>:
c001f3dc:	a1 90 03 02 c0       	mov    eax,ds:0xc0020390
c001f3e1:	83 f8 ff             	cmp    eax,0xffffffff
c001f3e4:	74 1a                	je     c001f400 <__do_global_ctors_aux+0x24>
c001f3e6:	55                   	push   ebp
c001f3e7:	89 e5                	mov    ebp,esp
c001f3e9:	53                   	push   ebx
c001f3ea:	52                   	push   edx
c001f3eb:	bb 90 03 02 c0       	mov    ebx,0xc0020390
c001f3f0:	ff d0                	call   eax
c001f3f2:	83 eb 04             	sub    ebx,0x4
c001f3f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3f7:	83 f8 ff             	cmp    eax,0xffffffff
c001f3fa:	75 f4                	jne    c001f3f0 <__do_global_ctors_aux+0x14>
c001f3fc:	58                   	pop    eax
c001f3fd:	5b                   	pop    ebx
c001f3fe:	5d                   	pop    ebp
c001f3ff:	c3                   	ret    
c001f400:	c3                   	ret    
c001f401:	66 90                	xchg   ax,ax
c001f403:	90                   	nop

c001f404 <__divdi3>:
c001f404:	55                   	push   ebp
c001f405:	57                   	push   edi
c001f406:	56                   	push   esi
c001f407:	53                   	push   ebx
c001f408:	83 ec 1c             	sub    esp,0x1c
c001f40b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f40f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f413:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f416:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f41a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f41e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f422:	85 db                	test   ebx,ebx
c001f424:	0f 88 8e 00 00 00    	js     c001f4b8 <__divdi3+0xb4>
c001f42a:	89 dd                	mov    ebp,ebx
c001f42c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f434:	89 d3                	mov    ebx,edx
c001f436:	85 d2                	test   edx,edx
c001f438:	79 0d                	jns    c001f447 <__divdi3+0x43>
c001f43a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f43e:	f7 d8                	neg    eax
c001f440:	83 d2 00             	adc    edx,0x0
c001f443:	f7 da                	neg    edx
c001f445:	89 d3                	mov    ebx,edx
c001f447:	89 c7                	mov    edi,eax
c001f449:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f44c:	85 db                	test   ebx,ebx
c001f44e:	75 48                	jne    c001f498 <__divdi3+0x94>
c001f450:	39 ef                	cmp    edi,ebp
c001f452:	76 24                	jbe    c001f478 <__divdi3+0x74>
c001f454:	89 ea                	mov    edx,ebp
c001f456:	f7 f7                	div    edi
c001f458:	89 c1                	mov    ecx,eax
c001f45a:	31 f6                	xor    esi,esi
c001f45c:	89 c8                	mov    eax,ecx
c001f45e:	89 f2                	mov    edx,esi
c001f460:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f464:	85 c9                	test   ecx,ecx
c001f466:	74 07                	je     c001f46f <__divdi3+0x6b>
c001f468:	f7 d8                	neg    eax
c001f46a:	83 d2 00             	adc    edx,0x0
c001f46d:	f7 da                	neg    edx
c001f46f:	83 c4 1c             	add    esp,0x1c
c001f472:	5b                   	pop    ebx
c001f473:	5e                   	pop    esi
c001f474:	5f                   	pop    edi
c001f475:	5d                   	pop    ebp
c001f476:	c3                   	ret    
c001f477:	90                   	nop
c001f478:	85 ff                	test   edi,edi
c001f47a:	75 0b                	jne    c001f487 <__divdi3+0x83>
c001f47c:	b8 01 00 00 00       	mov    eax,0x1
c001f481:	31 d2                	xor    edx,edx
c001f483:	f7 f3                	div    ebx
c001f485:	89 c7                	mov    edi,eax
c001f487:	31 d2                	xor    edx,edx
c001f489:	89 e8                	mov    eax,ebp
c001f48b:	f7 f7                	div    edi
c001f48d:	89 c6                	mov    esi,eax
c001f48f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f492:	f7 f7                	div    edi
c001f494:	89 c1                	mov    ecx,eax
c001f496:	eb c4                	jmp    c001f45c <__divdi3+0x58>
c001f498:	39 eb                	cmp    ebx,ebp
c001f49a:	77 3c                	ja     c001f4d8 <__divdi3+0xd4>
c001f49c:	0f bd f3             	bsr    esi,ebx
c001f49f:	83 f6 1f             	xor    esi,0x1f
c001f4a2:	75 40                	jne    c001f4e4 <__divdi3+0xe0>
c001f4a4:	39 eb                	cmp    ebx,ebp
c001f4a6:	72 09                	jb     c001f4b1 <__divdi3+0xad>
c001f4a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f4ab:	0f 87 97 00 00 00    	ja     c001f548 <__divdi3+0x144>
c001f4b1:	b9 01 00 00 00       	mov    ecx,0x1
c001f4b6:	eb a4                	jmp    c001f45c <__divdi3+0x58>
c001f4b8:	f7 d9                	neg    ecx
c001f4ba:	83 d3 00             	adc    ebx,0x0
c001f4bd:	f7 db                	neg    ebx
c001f4bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4c6:	89 dd                	mov    ebp,ebx
c001f4c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f4d0:	e9 5f ff ff ff       	jmp    c001f434 <__divdi3+0x30>
c001f4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4d8:	31 f6                	xor    esi,esi
c001f4da:	31 c9                	xor    ecx,ecx
c001f4dc:	e9 7b ff ff ff       	jmp    c001f45c <__divdi3+0x58>
c001f4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4e4:	b8 20 00 00 00       	mov    eax,0x20
c001f4e9:	29 f0                	sub    eax,esi
c001f4eb:	89 f1                	mov    ecx,esi
c001f4ed:	d3 e3                	shl    ebx,cl
c001f4ef:	89 fa                	mov    edx,edi
c001f4f1:	88 c1                	mov    cl,al
c001f4f3:	d3 ea                	shr    edx,cl
c001f4f5:	09 da                	or     edx,ebx
c001f4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f4fb:	89 f1                	mov    ecx,esi
c001f4fd:	d3 e7                	shl    edi,cl
c001f4ff:	89 eb                	mov    ebx,ebp
c001f501:	88 c1                	mov    cl,al
c001f503:	d3 eb                	shr    ebx,cl
c001f505:	89 f1                	mov    ecx,esi
c001f507:	d3 e5                	shl    ebp,cl
c001f509:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f50c:	88 c1                	mov    cl,al
c001f50e:	d3 ea                	shr    edx,cl
c001f510:	09 d5                	or     ebp,edx
c001f512:	89 e8                	mov    eax,ebp
c001f514:	89 da                	mov    edx,ebx
c001f516:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f51a:	89 d3                	mov    ebx,edx
c001f51c:	89 c5                	mov    ebp,eax
c001f51e:	f7 e7                	mul    edi
c001f520:	39 d3                	cmp    ebx,edx
c001f522:	72 18                	jb     c001f53c <__divdi3+0x138>
c001f524:	74 0a                	je     c001f530 <__divdi3+0x12c>
c001f526:	89 e9                	mov    ecx,ebp
c001f528:	31 f6                	xor    esi,esi
c001f52a:	e9 2d ff ff ff       	jmp    c001f45c <__divdi3+0x58>
c001f52f:	90                   	nop
c001f530:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f533:	89 f1                	mov    ecx,esi
c001f535:	d3 e7                	shl    edi,cl
c001f537:	39 c7                	cmp    edi,eax
c001f539:	73 eb                	jae    c001f526 <__divdi3+0x122>
c001f53b:	90                   	nop
c001f53c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f53f:	31 f6                	xor    esi,esi
c001f541:	e9 16 ff ff ff       	jmp    c001f45c <__divdi3+0x58>
c001f546:	66 90                	xchg   ax,ax
c001f548:	31 c9                	xor    ecx,ecx
c001f54a:	e9 0d ff ff ff       	jmp    c001f45c <__divdi3+0x58>
c001f54f:	90                   	nop

c001f550 <__moddi3>:
c001f550:	55                   	push   ebp
c001f551:	57                   	push   edi
c001f552:	56                   	push   esi
c001f553:	53                   	push   ebx
c001f554:	83 ec 2c             	sub    esp,0x2c
c001f557:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f55b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f55f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f563:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f567:	85 db                	test   ebx,ebx
c001f569:	0f 88 85 00 00 00    	js     c001f5f4 <__moddi3+0xa4>
c001f56f:	89 de                	mov    esi,ebx
c001f571:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f579:	89 d7                	mov    edi,edx
c001f57b:	85 d2                	test   edx,edx
c001f57d:	79 09                	jns    c001f588 <__moddi3+0x38>
c001f57f:	f7 d8                	neg    eax
c001f581:	83 d2 00             	adc    edx,0x0
c001f584:	f7 da                	neg    edx
c001f586:	89 d7                	mov    edi,edx
c001f588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f58c:	89 cd                	mov    ebp,ecx
c001f58e:	85 ff                	test   edi,edi
c001f590:	75 52                	jne    c001f5e4 <__moddi3+0x94>
c001f592:	89 c3                	mov    ebx,eax
c001f594:	39 f0                	cmp    eax,esi
c001f596:	76 24                	jbe    c001f5bc <__moddi3+0x6c>
c001f598:	89 c8                	mov    eax,ecx
c001f59a:	89 f2                	mov    edx,esi
c001f59c:	f7 f3                	div    ebx
c001f59e:	89 d6                	mov    esi,edx
c001f5a0:	89 f0                	mov    eax,esi
c001f5a2:	31 d2                	xor    edx,edx
c001f5a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5a8:	85 c9                	test   ecx,ecx
c001f5aa:	74 07                	je     c001f5b3 <__moddi3+0x63>
c001f5ac:	f7 d8                	neg    eax
c001f5ae:	83 d2 00             	adc    edx,0x0
c001f5b1:	f7 da                	neg    edx
c001f5b3:	83 c4 2c             	add    esp,0x2c
c001f5b6:	5b                   	pop    ebx
c001f5b7:	5e                   	pop    esi
c001f5b8:	5f                   	pop    edi
c001f5b9:	5d                   	pop    ebp
c001f5ba:	c3                   	ret    
c001f5bb:	90                   	nop
c001f5bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f5c0:	85 db                	test   ebx,ebx
c001f5c2:	75 0d                	jne    c001f5d1 <__moddi3+0x81>
c001f5c4:	b8 01 00 00 00       	mov    eax,0x1
c001f5c9:	31 d2                	xor    edx,edx
c001f5cb:	f7 f7                	div    edi
c001f5cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5d1:	89 f0                	mov    eax,esi
c001f5d3:	31 d2                	xor    edx,edx
c001f5d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f5d9:	f7 f7                	div    edi
c001f5db:	89 e8                	mov    eax,ebp
c001f5dd:	f7 f7                	div    edi
c001f5df:	89 d6                	mov    esi,edx
c001f5e1:	eb bd                	jmp    c001f5a0 <__moddi3+0x50>
c001f5e3:	90                   	nop
c001f5e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f5e8:	39 f7                	cmp    edi,esi
c001f5ea:	76 20                	jbe    c001f60c <__moddi3+0xbc>
c001f5ec:	89 c8                	mov    eax,ecx
c001f5ee:	89 f2                	mov    edx,esi
c001f5f0:	eb b2                	jmp    c001f5a4 <__moddi3+0x54>
c001f5f2:	66 90                	xchg   ax,ax
c001f5f4:	f7 d9                	neg    ecx
c001f5f6:	83 d3 00             	adc    ebx,0x0
c001f5f9:	f7 db                	neg    ebx
c001f5fb:	89 de                	mov    esi,ebx
c001f5fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f605:	e9 6f ff ff ff       	jmp    c001f579 <__moddi3+0x29>
c001f60a:	66 90                	xchg   ax,ax
c001f60c:	0f bd c7             	bsr    eax,edi
c001f60f:	83 f0 1f             	xor    eax,0x1f
c001f612:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f616:	75 24                	jne    c001f63c <__moddi3+0xec>
c001f618:	39 f7                	cmp    edi,esi
c001f61a:	72 06                	jb     c001f622 <__moddi3+0xd2>
c001f61c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f620:	77 0c                	ja     c001f62e <__moddi3+0xde>
c001f622:	89 e9                	mov    ecx,ebp
c001f624:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f628:	19 fe                	sbb    esi,edi
c001f62a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f62e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f632:	89 f2                	mov    edx,esi
c001f634:	e9 6b ff ff ff       	jmp    c001f5a4 <__moddi3+0x54>
c001f639:	8d 76 00             	lea    esi,[esi+0x0]
c001f63c:	b8 20 00 00 00       	mov    eax,0x20
c001f641:	89 c2                	mov    edx,eax
c001f643:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f647:	29 da                	sub    edx,ebx
c001f649:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f64d:	88 d9                	mov    cl,bl
c001f64f:	d3 e7                	shl    edi,cl
c001f651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f655:	88 d1                	mov    cl,dl
c001f657:	d3 e8                	shr    eax,cl
c001f659:	09 c7                	or     edi,eax
c001f65b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f65f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f663:	89 d8                	mov    eax,ebx
c001f665:	88 d9                	mov    cl,bl
c001f667:	d3 e7                	shl    edi,cl
c001f669:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f66d:	89 f3                	mov    ebx,esi
c001f66f:	88 d1                	mov    cl,dl
c001f671:	d3 eb                	shr    ebx,cl
c001f673:	89 c7                	mov    edi,eax
c001f675:	88 c1                	mov    cl,al
c001f677:	d3 e6                	shl    esi,cl
c001f679:	89 e8                	mov    eax,ebp
c001f67b:	88 d1                	mov    cl,dl
c001f67d:	d3 e8                	shr    eax,cl
c001f67f:	09 f0                	or     eax,esi
c001f681:	89 f9                	mov    ecx,edi
c001f683:	d3 e5                	shl    ebp,cl
c001f685:	89 da                	mov    edx,ebx
c001f687:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f68b:	89 d3                	mov    ebx,edx
c001f68d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f691:	89 c6                	mov    esi,eax
c001f693:	89 d1                	mov    ecx,edx
c001f695:	39 d3                	cmp    ebx,edx
c001f697:	72 27                	jb     c001f6c0 <__moddi3+0x170>
c001f699:	74 21                	je     c001f6bc <__moddi3+0x16c>
c001f69b:	29 f5                	sub    ebp,esi
c001f69d:	19 cb                	sbb    ebx,ecx
c001f69f:	89 de                	mov    esi,ebx
c001f6a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f6a5:	d3 e6                	shl    esi,cl
c001f6a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f6ab:	89 f9                	mov    ecx,edi
c001f6ad:	d3 ed                	shr    ebp,cl
c001f6af:	09 ee                	or     esi,ebp
c001f6b1:	89 f0                	mov    eax,esi
c001f6b3:	d3 eb                	shr    ebx,cl
c001f6b5:	89 da                	mov    edx,ebx
c001f6b7:	e9 e8 fe ff ff       	jmp    c001f5a4 <__moddi3+0x54>
c001f6bc:	39 c5                	cmp    ebp,eax
c001f6be:	73 db                	jae    c001f69b <__moddi3+0x14b>
c001f6c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f6c8:	89 d1                	mov    ecx,edx
c001f6ca:	89 c6                	mov    esi,eax
c001f6cc:	eb cd                	jmp    c001f69b <__moddi3+0x14b>
c001f6ce:	66 90                	xchg   ax,ax

c001f6d0 <__udivdi3>:
c001f6d0:	55                   	push   ebp
c001f6d1:	57                   	push   edi
c001f6d2:	56                   	push   esi
c001f6d3:	53                   	push   ebx
c001f6d4:	83 ec 1c             	sub    esp,0x1c
c001f6d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f6db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f6df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f6e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f6e7:	85 d2                	test   edx,edx
c001f6e9:	75 41                	jne    c001f72c <__udivdi3+0x5c>
c001f6eb:	39 f7                	cmp    edi,esi
c001f6ed:	76 15                	jbe    c001f704 <__udivdi3+0x34>
c001f6ef:	89 e8                	mov    eax,ebp
c001f6f1:	89 f2                	mov    edx,esi
c001f6f3:	f7 f7                	div    edi
c001f6f5:	31 db                	xor    ebx,ebx
c001f6f7:	89 da                	mov    edx,ebx
c001f6f9:	83 c4 1c             	add    esp,0x1c
c001f6fc:	5b                   	pop    ebx
c001f6fd:	5e                   	pop    esi
c001f6fe:	5f                   	pop    edi
c001f6ff:	5d                   	pop    ebp
c001f700:	c3                   	ret    
c001f701:	8d 76 00             	lea    esi,[esi+0x0]
c001f704:	89 f9                	mov    ecx,edi
c001f706:	85 ff                	test   edi,edi
c001f708:	75 0b                	jne    c001f715 <__udivdi3+0x45>
c001f70a:	b8 01 00 00 00       	mov    eax,0x1
c001f70f:	31 d2                	xor    edx,edx
c001f711:	f7 f7                	div    edi
c001f713:	89 c1                	mov    ecx,eax
c001f715:	31 d2                	xor    edx,edx
c001f717:	89 f0                	mov    eax,esi
c001f719:	f7 f1                	div    ecx
c001f71b:	89 c3                	mov    ebx,eax
c001f71d:	89 e8                	mov    eax,ebp
c001f71f:	f7 f1                	div    ecx
c001f721:	89 da                	mov    edx,ebx
c001f723:	83 c4 1c             	add    esp,0x1c
c001f726:	5b                   	pop    ebx
c001f727:	5e                   	pop    esi
c001f728:	5f                   	pop    edi
c001f729:	5d                   	pop    ebp
c001f72a:	c3                   	ret    
c001f72b:	90                   	nop
c001f72c:	39 f2                	cmp    edx,esi
c001f72e:	77 1c                	ja     c001f74c <__udivdi3+0x7c>
c001f730:	0f bd da             	bsr    ebx,edx
c001f733:	83 f3 1f             	xor    ebx,0x1f
c001f736:	75 24                	jne    c001f75c <__udivdi3+0x8c>
c001f738:	39 f2                	cmp    edx,esi
c001f73a:	72 08                	jb     c001f744 <__udivdi3+0x74>
c001f73c:	39 ef                	cmp    edi,ebp
c001f73e:	0f 87 84 00 00 00    	ja     c001f7c8 <__udivdi3+0xf8>
c001f744:	b8 01 00 00 00       	mov    eax,0x1
c001f749:	eb ac                	jmp    c001f6f7 <__udivdi3+0x27>
c001f74b:	90                   	nop
c001f74c:	31 db                	xor    ebx,ebx
c001f74e:	31 c0                	xor    eax,eax
c001f750:	89 da                	mov    edx,ebx
c001f752:	83 c4 1c             	add    esp,0x1c
c001f755:	5b                   	pop    ebx
c001f756:	5e                   	pop    esi
c001f757:	5f                   	pop    edi
c001f758:	5d                   	pop    ebp
c001f759:	c3                   	ret    
c001f75a:	66 90                	xchg   ax,ax
c001f75c:	b8 20 00 00 00       	mov    eax,0x20
c001f761:	29 d8                	sub    eax,ebx
c001f763:	88 d9                	mov    cl,bl
c001f765:	d3 e2                	shl    edx,cl
c001f767:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f76b:	89 fa                	mov    edx,edi
c001f76d:	88 c1                	mov    cl,al
c001f76f:	d3 ea                	shr    edx,cl
c001f771:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f775:	09 d1                	or     ecx,edx
c001f777:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f77b:	88 d9                	mov    cl,bl
c001f77d:	d3 e7                	shl    edi,cl
c001f77f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f783:	89 f7                	mov    edi,esi
c001f785:	88 c1                	mov    cl,al
c001f787:	d3 ef                	shr    edi,cl
c001f789:	88 d9                	mov    cl,bl
c001f78b:	d3 e6                	shl    esi,cl
c001f78d:	89 ea                	mov    edx,ebp
c001f78f:	88 c1                	mov    cl,al
c001f791:	d3 ea                	shr    edx,cl
c001f793:	09 d6                	or     esi,edx
c001f795:	89 f0                	mov    eax,esi
c001f797:	89 fa                	mov    edx,edi
c001f799:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f79d:	89 d7                	mov    edi,edx
c001f79f:	89 c6                	mov    esi,eax
c001f7a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7a5:	39 d7                	cmp    edi,edx
c001f7a7:	72 13                	jb     c001f7bc <__udivdi3+0xec>
c001f7a9:	74 09                	je     c001f7b4 <__udivdi3+0xe4>
c001f7ab:	89 f0                	mov    eax,esi
c001f7ad:	31 db                	xor    ebx,ebx
c001f7af:	e9 43 ff ff ff       	jmp    c001f6f7 <__udivdi3+0x27>
c001f7b4:	88 d9                	mov    cl,bl
c001f7b6:	d3 e5                	shl    ebp,cl
c001f7b8:	39 c5                	cmp    ebp,eax
c001f7ba:	73 ef                	jae    c001f7ab <__udivdi3+0xdb>
c001f7bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f7bf:	31 db                	xor    ebx,ebx
c001f7c1:	e9 31 ff ff ff       	jmp    c001f6f7 <__udivdi3+0x27>
c001f7c6:	66 90                	xchg   ax,ax
c001f7c8:	31 c0                	xor    eax,eax
c001f7ca:	e9 28 ff ff ff       	jmp    c001f6f7 <__udivdi3+0x27>
c001f7cf:	90                   	nop

c001f7d0 <__umoddi3>:
c001f7d0:	55                   	push   ebp
c001f7d1:	57                   	push   edi
c001f7d2:	56                   	push   esi
c001f7d3:	53                   	push   ebx
c001f7d4:	83 ec 1c             	sub    esp,0x1c
c001f7d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7e7:	89 da                	mov    edx,ebx
c001f7e9:	85 c0                	test   eax,eax
c001f7eb:	75 37                	jne    c001f824 <__umoddi3+0x54>
c001f7ed:	39 df                	cmp    edi,ebx
c001f7ef:	76 13                	jbe    c001f804 <__umoddi3+0x34>
c001f7f1:	89 f0                	mov    eax,esi
c001f7f3:	f7 f7                	div    edi
c001f7f5:	89 d0                	mov    eax,edx
c001f7f7:	31 d2                	xor    edx,edx
c001f7f9:	83 c4 1c             	add    esp,0x1c
c001f7fc:	5b                   	pop    ebx
c001f7fd:	5e                   	pop    esi
c001f7fe:	5f                   	pop    edi
c001f7ff:	5d                   	pop    ebp
c001f800:	c3                   	ret    
c001f801:	8d 76 00             	lea    esi,[esi+0x0]
c001f804:	89 fd                	mov    ebp,edi
c001f806:	85 ff                	test   edi,edi
c001f808:	75 0b                	jne    c001f815 <__umoddi3+0x45>
c001f80a:	b8 01 00 00 00       	mov    eax,0x1
c001f80f:	31 d2                	xor    edx,edx
c001f811:	f7 f7                	div    edi
c001f813:	89 c5                	mov    ebp,eax
c001f815:	89 d8                	mov    eax,ebx
c001f817:	31 d2                	xor    edx,edx
c001f819:	f7 f5                	div    ebp
c001f81b:	89 f0                	mov    eax,esi
c001f81d:	f7 f5                	div    ebp
c001f81f:	89 d0                	mov    eax,edx
c001f821:	eb d4                	jmp    c001f7f7 <__umoddi3+0x27>
c001f823:	90                   	nop
c001f824:	89 f1                	mov    ecx,esi
c001f826:	39 d8                	cmp    eax,ebx
c001f828:	76 0a                	jbe    c001f834 <__umoddi3+0x64>
c001f82a:	89 f0                	mov    eax,esi
c001f82c:	83 c4 1c             	add    esp,0x1c
c001f82f:	5b                   	pop    ebx
c001f830:	5e                   	pop    esi
c001f831:	5f                   	pop    edi
c001f832:	5d                   	pop    ebp
c001f833:	c3                   	ret    
c001f834:	0f bd e8             	bsr    ebp,eax
c001f837:	83 f5 1f             	xor    ebp,0x1f
c001f83a:	75 1c                	jne    c001f858 <__umoddi3+0x88>
c001f83c:	39 d8                	cmp    eax,ebx
c001f83e:	72 04                	jb     c001f844 <__umoddi3+0x74>
c001f840:	39 f7                	cmp    edi,esi
c001f842:	77 08                	ja     c001f84c <__umoddi3+0x7c>
c001f844:	89 da                	mov    edx,ebx
c001f846:	29 fe                	sub    esi,edi
c001f848:	19 c2                	sbb    edx,eax
c001f84a:	89 f1                	mov    ecx,esi
c001f84c:	89 c8                	mov    eax,ecx
c001f84e:	83 c4 1c             	add    esp,0x1c
c001f851:	5b                   	pop    ebx
c001f852:	5e                   	pop    esi
c001f853:	5f                   	pop    edi
c001f854:	5d                   	pop    ebp
c001f855:	c3                   	ret    
c001f856:	66 90                	xchg   ax,ax
c001f858:	ba 20 00 00 00       	mov    edx,0x20
c001f85d:	29 ea                	sub    edx,ebp
c001f85f:	89 e9                	mov    ecx,ebp
c001f861:	d3 e0                	shl    eax,cl
c001f863:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f867:	89 f8                	mov    eax,edi
c001f869:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f86d:	88 d1                	mov    cl,dl
c001f86f:	d3 e8                	shr    eax,cl
c001f871:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f875:	09 c1                	or     ecx,eax
c001f877:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f87b:	89 e9                	mov    ecx,ebp
c001f87d:	d3 e7                	shl    edi,cl
c001f87f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f883:	89 d8                	mov    eax,ebx
c001f885:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f889:	88 d1                	mov    cl,dl
c001f88b:	d3 e8                	shr    eax,cl
c001f88d:	89 c7                	mov    edi,eax
c001f88f:	89 e9                	mov    ecx,ebp
c001f891:	d3 e3                	shl    ebx,cl
c001f893:	89 f0                	mov    eax,esi
c001f895:	88 d1                	mov    cl,dl
c001f897:	d3 e8                	shr    eax,cl
c001f899:	09 d8                	or     eax,ebx
c001f89b:	89 e9                	mov    ecx,ebp
c001f89d:	d3 e6                	shl    esi,cl
c001f89f:	89 f3                	mov    ebx,esi
c001f8a1:	89 fa                	mov    edx,edi
c001f8a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8a7:	89 d1                	mov    ecx,edx
c001f8a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8ad:	89 c6                	mov    esi,eax
c001f8af:	89 d7                	mov    edi,edx
c001f8b1:	39 d1                	cmp    ecx,edx
c001f8b3:	72 27                	jb     c001f8dc <__umoddi3+0x10c>
c001f8b5:	74 21                	je     c001f8d8 <__umoddi3+0x108>
c001f8b7:	89 ca                	mov    edx,ecx
c001f8b9:	29 f3                	sub    ebx,esi
c001f8bb:	19 fa                	sbb    edx,edi
c001f8bd:	89 d0                	mov    eax,edx
c001f8bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f8c3:	d3 e0                	shl    eax,cl
c001f8c5:	89 e9                	mov    ecx,ebp
c001f8c7:	d3 eb                	shr    ebx,cl
c001f8c9:	09 d8                	or     eax,ebx
c001f8cb:	d3 ea                	shr    edx,cl
c001f8cd:	83 c4 1c             	add    esp,0x1c
c001f8d0:	5b                   	pop    ebx
c001f8d1:	5e                   	pop    esi
c001f8d2:	5f                   	pop    edi
c001f8d3:	5d                   	pop    ebp
c001f8d4:	c3                   	ret    
c001f8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8d8:	39 c3                	cmp    ebx,eax
c001f8da:	73 db                	jae    c001f8b7 <__umoddi3+0xe7>
c001f8dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f8e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f8e4:	89 d7                	mov    edi,edx
c001f8e6:	89 c6                	mov    esi,eax
c001f8e8:	eb cd                	jmp    c001f8b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f8ea <_init>:
c001f8ea:	55                   	push   ebp
c001f8eb:	89 e5                	mov    ebp,esp
c001f8ed:	e8 02 08 fe ff       	call   c00000f4 <frame_dummy>
c001f8f2:	e8 e5 fa ff ff       	call   c001f3dc <__do_global_ctors_aux>
c001f8f7:	5d                   	pop    ebp
c001f8f8:	c3                   	ret    

Disassembly of section .fini:

c001f8f9 <_fini>:
c001f8f9:	55                   	push   ebp
c001f8fa:	89 e5                	mov    ebp,esp
c001f8fc:	e8 83 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f901:	5d                   	pop    ebp
c001f902:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f904 <Computer::~Computer()>:
c001f904:	83 ec 0c             	sub    esp,0xc
c001f907:	ba 14 0c 02 c0       	mov    edx,0xc0020c14
c001f90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f910:	89 10                	mov    DWORD PTR [eax],edx
c001f912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f916:	83 ec 0c             	sub    esp,0xc
c001f919:	50                   	push   eax
c001f91a:	e8 43 cf fe ff       	call   c000c862 <Device::~Device()>
c001f91f:	83 c4 10             	add    esp,0x10
c001f922:	90                   	nop
c001f923:	83 c4 0c             	add    esp,0xc
c001f926:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f928 <Computer::~Computer()>:
c001f928:	83 ec 0c             	sub    esp,0xc
c001f92b:	83 ec 0c             	sub    esp,0xc
c001f92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f932:	e8 cd ff ff ff       	call   c001f904 <Computer::~Computer()>
c001f937:	83 c4 10             	add    esp,0x10
c001f93a:	83 ec 08             	sub    esp,0x8
c001f93d:	68 70 01 00 00       	push   0x170
c001f942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f946:	e8 c1 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f94b:	83 c4 10             	add    esp,0x10
c001f94e:	83 c4 0c             	add    esp,0xc
c001f951:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f952 <idleCommon()>:
c001f952:	83 ec 0c             	sub    esp,0xc
c001f955:	fa                   	cli    
c001f956:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f95c:	e8 af 66 ff ff       	call   c0016010 <schedule()>
c001f961:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f966:	48                   	dec    eax
c001f967:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f96c:	75 01                	jne    c001f96f <idleCommon()+0x1d>
c001f96e:	fb                   	sti    
c001f96f:	83 c4 0c             	add    esp,0xc
c001f972:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f974 <LinkedList<UnixFile>::~LinkedList()>:
c001f974:	90                   	nop
c001f975:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f976 <LinkedList<UnixFile>::LinkedList()>:
c001f976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f98b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f99a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9b6:	90                   	nop
c001f9b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f9b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f9b8:	83 ec 0c             	sub    esp,0xc
c001f9bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9c0:	75 10                	jne    c001f9d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f9c2:	83 ec 0c             	sub    esp,0xc
c001f9c5:	68 28 0e 02 c0       	push   0xc0020e28
c001f9ca:	e8 58 1b ff ff       	call   c0011527 <KePanic(char const*)>
c001f9cf:	83 c4 10             	add    esp,0x10
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9d8:	85 c0                	test   eax,eax
c001f9da:	74 34                	je     c001fa10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9e3:	85 c0                	test   eax,eax
c001f9e5:	74 29                	je     c001fa10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa0e:	eb 65                	jmp    c001fa75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa16:	85 c0                	test   eax,eax
c001fa18:	75 4b                	jne    c001fa65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa21:	85 c0                	test   eax,eax
c001fa23:	75 40                	jne    c001fa65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa2d:	89 10                	mov    DWORD PTR [eax],edx
c001fa2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa4f:	85 c0                	test   eax,eax
c001fa51:	74 22                	je     c001fa75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa53:	83 ec 0c             	sub    esp,0xc
c001fa56:	68 4a 0e 02 c0       	push   0xc0020e4a
c001fa5b:	e8 c7 1a ff ff       	call   c0011527 <KePanic(char const*)>
c001fa60:	83 c4 10             	add    esp,0x10
c001fa63:	eb 10                	jmp    c001fa75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa65:	83 ec 0c             	sub    esp,0xc
c001fa68:	68 54 0e 02 c0       	push   0xc0020e54
c001fa6d:	e8 b5 1a ff ff       	call   c0011527 <KePanic(char const*)>
c001fa72:	83 c4 10             	add    esp,0x10
c001fa75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa7c:	8d 50 01             	lea    edx,[eax+0x1]
c001fa7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa83:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa86:	90                   	nop
c001fa87:	83 c4 0c             	add    esp,0xc
c001fa8a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fa8c <LinkedList<UnixFile>::getFirstElement()>:
c001fa8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fa94 <LinkedList<UnixFile>::removeFirst()>:
c001fa94:	83 ec 0c             	sub    esp,0xc
c001fa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa9d:	85 c0                	test   eax,eax
c001fa9f:	75 12                	jne    c001fab3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001faa1:	83 ec 0c             	sub    esp,0xc
c001faa4:	68 60 0e 02 c0       	push   0xc0020e60
c001faa9:	e8 79 1a ff ff       	call   c0011527 <KePanic(char const*)>
c001faae:	83 c4 10             	add    esp,0x10
c001fab1:	eb 7e                	jmp    c001fb31 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fabd:	85 c0                	test   eax,eax
c001fabf:	74 10                	je     c001fad1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fac1:	83 ec 0c             	sub    esp,0xc
c001fac4:	68 ab 0e 02 c0       	push   0xc0020eab
c001fac9:	e8 59 1a ff ff       	call   c0011527 <KePanic(char const*)>
c001face:	83 c4 10             	add    esp,0x10
c001fad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fada:	85 c0                	test   eax,eax
c001fadc:	75 33                	jne    c001fb11 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafa:	83 f8 01             	cmp    eax,0x1
c001fafd:	74 21                	je     c001fb20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	68 84 0e 02 c0       	push   0xc0020e84
c001fb07:	e8 1b 1a ff ff       	call   c0011527 <KePanic(char const*)>
c001fb0c:	83 c4 10             	add    esp,0x10
c001fb0f:	eb 0f                	jmp    c001fb20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb15:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb17:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	89 10                	mov    DWORD PTR [eax],edx
c001fb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb27:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb31:	83 c4 0c             	add    esp,0xc
c001fb34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb36 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb3d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb3e <DriverlessDevice::~DriverlessDevice()>:
c001fb3e:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c001fb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb47:	89 10                	mov    DWORD PTR [eax],edx
c001fb49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4d:	50                   	push   eax
c001fb4e:	e8 0f cd fe ff       	call   c000c862 <Device::~Device()>
c001fb53:	83 c4 04             	add    esp,0x4
c001fb56:	90                   	nop
c001fb57:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb58 <DriverlessDevice::~DriverlessDevice()>:
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	83 ec 0c             	sub    esp,0xc
c001fb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb62:	e8 d7 ff ff ff       	call   c001fb3e <DriverlessDevice::~DriverlessDevice()>
c001fb67:	83 c4 10             	add    esp,0x10
c001fb6a:	83 ec 08             	sub    esp,0x8
c001fb6d:	68 58 01 00 00       	push   0x158
c001fb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb76:	e8 91 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb7b:	83 c4 10             	add    esp,0x10
c001fb7e:	83 c4 0c             	add    esp,0xc
c001fb81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fb82 <LinkedList<Device>::addElement(Device*)>:
c001fb82:	83 ec 0c             	sub    esp,0xc
c001fb85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb8a:	75 10                	jne    c001fb9c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fb8c:	83 ec 0c             	sub    esp,0xc
c001fb8f:	68 28 0e 02 c0       	push   0xc0020e28
c001fb94:	e8 8e 19 ff ff       	call   c0011527 <KePanic(char const*)>
c001fb99:	83 c4 10             	add    esp,0x10
c001fb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fba2:	85 c0                	test   eax,eax
c001fba4:	74 3a                	je     c001fbe0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbad:	85 c0                	test   eax,eax
c001fbaf:	74 2f                	je     c001fbe0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbbc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fbc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbd4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fbde:	eb 68                	jmp    c001fc48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe6:	85 c0                	test   eax,eax
c001fbe8:	75 4e                	jne    c001fc38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf1:	85 c0                	test   eax,eax
c001fbf3:	75 43                	jne    c001fc38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbfd:	89 10                	mov    DWORD PTR [eax],edx
c001fbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc11:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc22:	85 c0                	test   eax,eax
c001fc24:	74 22                	je     c001fc48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	68 4a 0e 02 c0       	push   0xc0020e4a
c001fc2e:	e8 f4 18 ff ff       	call   c0011527 <KePanic(char const*)>
c001fc33:	83 c4 10             	add    esp,0x10
c001fc36:	eb 10                	jmp    c001fc48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc38:	83 ec 0c             	sub    esp,0xc
c001fc3b:	68 54 0e 02 c0       	push   0xc0020e54
c001fc40:	e8 e2 18 ff ff       	call   c0011527 <KePanic(char const*)>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc4f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc59:	90                   	nop
c001fc5a:	83 c4 0c             	add    esp,0xc
c001fc5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc5e <LinkedList<Device>::LinkedList()>:
c001fc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc9e:	90                   	nop
c001fc9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fca0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca6:	85 c0                	test   eax,eax
c001fca8:	75 0e                	jne    c001fcb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcb1:	85 c0                	test   eax,eax
c001fcb3:	75 03                	jne    c001fcb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcb5:	b0 01                	mov    al,0x1
c001fcb7:	c3                   	ret    
c001fcb8:	b0 00                	mov    al,0x0
c001fcba:	90                   	nop
c001fcbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fcbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fcbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fcc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fccb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fccd:	85 c0                	test   eax,eax
c001fccf:	75 17                	jne    c001fce8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fcd1:	83 ec 0c             	sub    esp,0xc
c001fcd4:	68 60 0e 02 c0       	push   0xc0020e60
c001fcd9:	e8 49 18 ff ff       	call   c0011527 <KePanic(char const*)>
c001fcde:	83 c4 10             	add    esp,0x10
c001fce1:	e9 96 00 00 00       	jmp    c001fd7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fce6:	66 90                	xchg   ax,ax
c001fce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fcf2:	85 c0                	test   eax,eax
c001fcf4:	0f 95 c0             	setne  al
c001fcf7:	0f b6 c0             	movzx  eax,al
c001fcfa:	85 c0                	test   eax,eax
c001fcfc:	74 12                	je     c001fd10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fcfe:	83 ec 0c             	sub    esp,0xc
c001fd01:	68 ab 0e 02 c0       	push   0xc0020eab
c001fd06:	e8 1c 18 ff ff       	call   c0011527 <KePanic(char const*)>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	66 90                	xchg   ax,ax
c001fd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd19:	85 c0                	test   eax,eax
c001fd1b:	0f 94 c0             	sete   al
c001fd1e:	0f b6 c0             	movzx  eax,al
c001fd21:	85 c0                	test   eax,eax
c001fd23:	74 33                	je     c001fd58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd41:	83 f8 01             	cmp    eax,0x1
c001fd44:	74 22                	je     c001fd68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd46:	83 ec 0c             	sub    esp,0xc
c001fd49:	68 84 0e 02 c0       	push   0xc0020e84
c001fd4e:	e8 d4 17 ff ff       	call   c0011527 <KePanic(char const*)>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	eb 10                	jmp    c001fd68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd65:	89 10                	mov    DWORD PTR [eax],edx
c001fd67:	90                   	nop
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd6f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd79:	8d 76 00             	lea    esi,[esi+0x0]
c001fd7c:	83 c4 0c             	add    esp,0xc
c001fd7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fd80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fd80:	83 ec 0c             	sub    esp,0xc
c001fd83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd88:	75 12                	jne    c001fd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	68 28 0e 02 c0       	push   0xc0020e28
c001fd92:	e8 90 17 ff ff       	call   c0011527 <KePanic(char const*)>
c001fd97:	83 c4 10             	add    esp,0x10
c001fd9a:	66 90                	xchg   ax,ax
c001fd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda2:	85 c0                	test   eax,eax
c001fda4:	74 36                	je     c001fddc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdad:	85 c0                	test   eax,eax
c001fdaf:	74 2b                	je     c001fddc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdbc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fdbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdd1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fdd8:	eb 6a                	jmp    c001fe44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fdda:	66 90                	xchg   ax,ax
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde2:	85 c0                	test   eax,eax
c001fde4:	75 4e                	jne    c001fe34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fded:	85 c0                	test   eax,eax
c001fdef:	75 43                	jne    c001fe34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdf9:	89 10                	mov    DWORD PTR [eax],edx
c001fdfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe1b:	85 c0                	test   eax,eax
c001fe1d:	74 25                	je     c001fe44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe1f:	83 ec 0c             	sub    esp,0xc
c001fe22:	68 4a 0e 02 c0       	push   0xc0020e4a
c001fe27:	e8 fb 16 ff ff       	call   c0011527 <KePanic(char const*)>
c001fe2c:	83 c4 10             	add    esp,0x10
c001fe2f:	eb 13                	jmp    c001fe44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe31:	8d 76 00             	lea    esi,[esi+0x0]
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	68 54 0e 02 c0       	push   0xc0020e54
c001fe3c:	e8 e6 16 ff ff       	call   c0011527 <KePanic(char const*)>
c001fe41:	83 c4 10             	add    esp,0x10
c001fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe4b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe55:	90                   	nop
c001fe56:	83 c4 0c             	add    esp,0xc
c001fe59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe5c <ACPI::~ACPI()>:
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c001fe64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe68:	89 10                	mov    DWORD PTR [eax],edx
c001fe6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6e:	83 ec 0c             	sub    esp,0xc
c001fe71:	50                   	push   eax
c001fe72:	e8 eb c9 fe ff       	call   c000c862 <Device::~Device()>
c001fe77:	83 c4 10             	add    esp,0x10
c001fe7a:	90                   	nop
c001fe7b:	83 c4 0c             	add    esp,0xc
c001fe7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fe80 <ACPI::~ACPI()>:
c001fe80:	83 ec 0c             	sub    esp,0xc
c001fe83:	83 ec 0c             	sub    esp,0xc
c001fe86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe8a:	e8 cd ff ff ff       	call   c001fe5c <ACPI::~ACPI()>
c001fe8f:	83 c4 10             	add    esp,0x10
c001fe92:	83 ec 08             	sub    esp,0x8
c001fe95:	68 64 12 00 00       	push   0x1264
c001fe9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe9e:	e8 69 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	83 c4 0c             	add    esp,0xc
c001fea9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001feac <LinkedList<Device>::~LinkedList()>:
c001feac:	90                   	nop
c001fead:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001feb0 <LinkedList<Device>::isEmpty()>:
c001feb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb6:	85 c0                	test   eax,eax
c001feb8:	75 0e                	jne    c001fec8 <LinkedList<Device>::isEmpty()+0x18>
c001feba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001febe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fec1:	85 c0                	test   eax,eax
c001fec3:	75 03                	jne    c001fec8 <LinkedList<Device>::isEmpty()+0x18>
c001fec5:	b0 01                	mov    al,0x1
c001fec7:	c3                   	ret    
c001fec8:	b0 00                	mov    al,0x0
c001feca:	90                   	nop
c001fecb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fecc <LinkedList<Device>::getFirstElement()>:
c001fecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fed0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fed2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fed4 <LinkedList<Device>::removeFirst()>:
c001fed4:	83 ec 0c             	sub    esp,0xc
c001fed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fedd:	85 c0                	test   eax,eax
c001fedf:	75 17                	jne    c001fef8 <LinkedList<Device>::removeFirst()+0x24>
c001fee1:	83 ec 0c             	sub    esp,0xc
c001fee4:	68 60 0e 02 c0       	push   0xc0020e60
c001fee9:	e8 39 16 ff ff       	call   c0011527 <KePanic(char const*)>
c001feee:	83 c4 10             	add    esp,0x10
c001fef1:	e9 92 00 00 00       	jmp    c001ff88 <LinkedList<Device>::removeFirst()+0xb4>
c001fef6:	66 90                	xchg   ax,ax
c001fef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff05:	85 c0                	test   eax,eax
c001ff07:	74 13                	je     c001ff1c <LinkedList<Device>::removeFirst()+0x48>
c001ff09:	83 ec 0c             	sub    esp,0xc
c001ff0c:	68 ab 0e 02 c0       	push   0xc0020eab
c001ff11:	e8 11 16 ff ff       	call   c0011527 <KePanic(char const*)>
c001ff16:	83 c4 10             	add    esp,0x10
c001ff19:	8d 76 00             	lea    esi,[esi+0x0]
c001ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff22:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff28:	85 c0                	test   eax,eax
c001ff2a:	75 34                	jne    c001ff60 <LinkedList<Device>::removeFirst()+0x8c>
c001ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff48:	83 f8 01             	cmp    eax,0x1
c001ff4b:	74 27                	je     c001ff74 <LinkedList<Device>::removeFirst()+0xa0>
c001ff4d:	83 ec 0c             	sub    esp,0xc
c001ff50:	68 84 0e 02 c0       	push   0xc0020e84
c001ff55:	e8 cd 15 ff ff       	call   c0011527 <KePanic(char const*)>
c001ff5a:	83 c4 10             	add    esp,0x10
c001ff5d:	eb 15                	jmp    c001ff74 <LinkedList<Device>::removeFirst()+0xa0>
c001ff5f:	90                   	nop
c001ff60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff66:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff70:	89 10                	mov    DWORD PTR [eax],edx
c001ff72:	66 90                	xchg   ax,ax
c001ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff85:	8d 76 00             	lea    esi,[esi+0x0]
c001ff88:	83 c4 0c             	add    esp,0xc
c001ff8b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ff8c <CPU::~CPU()>:
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	89 10                	mov    DWORD PTR [eax],edx
c001ff9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	50                   	push   eax
c001ffa2:	e8 bb c8 fe ff       	call   c000c862 <Device::~Device()>
c001ffa7:	83 c4 10             	add    esp,0x10
c001ffaa:	90                   	nop
c001ffab:	83 c4 0c             	add    esp,0xc
c001ffae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ffb0 <CPU::~CPU()>:
c001ffb0:	83 ec 0c             	sub    esp,0xc
c001ffb3:	83 ec 0c             	sub    esp,0xc
c001ffb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffba:	e8 cd ff ff ff       	call   c001ff8c <CPU::~CPU()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	83 ec 08             	sub    esp,0x8
c001ffc5:	68 94 11 00 00       	push   0x1194
c001ffca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffce:	e8 39 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	83 c4 0c             	add    esp,0xc
c001ffd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ffdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ffdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffe0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ffe3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ffe4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ffe4:	90                   	nop
c001ffe5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ffe8 <ThreadControlBlock::ThreadControlBlock()>:
c001ffe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020002:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002000d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020018:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002001f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020023:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002002f:	90                   	nop
c0020030:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020034 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020038:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002003e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020042:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020058:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002005e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020074:	90                   	nop
c0020075:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020076 <PCI::~PCI()>:
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c002007e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020082:	89 10                	mov    DWORD PTR [eax],edx
c0020084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020088:	83 ec 0c             	sub    esp,0xc
c002008b:	50                   	push   eax
c002008c:	e8 63 c2 fe ff       	call   c000c2f4 <Bus::~Bus()>
c0020091:	83 c4 10             	add    esp,0x10
c0020094:	90                   	nop
c0020095:	83 c4 0c             	add    esp,0xc
c0020098:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002009a <PCI::~PCI()>:
c002009a:	83 ec 0c             	sub    esp,0xc
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200a4:	e8 cd ff ff ff       	call   c0020076 <PCI::~PCI()>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	83 ec 08             	sub    esp,0x8
c00200af:	68 5c 01 00 00       	push   0x15c
c00200b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b8:	e8 4f a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200bd:	83 c4 10             	add    esp,0x10
c00200c0:	83 c4 0c             	add    esp,0xc
c00200c3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00200c4 <IDE::~IDE()>:
c00200c4:	83 ec 0c             	sub    esp,0xc
c00200c7:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c00200cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d0:	89 10                	mov    DWORD PTR [eax],edx
c00200d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	50                   	push   eax
c00200da:	e8 fd cb fe ff       	call   c000ccdc <HardDiskController::~HardDiskController()>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	90                   	nop
c00200e3:	83 c4 0c             	add    esp,0xc
c00200e6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00200e8 <IDE::~IDE()>:
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	83 ec 0c             	sub    esp,0xc
c00200ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f2:	e8 cd ff ff ff       	call   c00200c4 <IDE::~IDE()>
c00200f7:	83 c4 10             	add    esp,0x10
c00200fa:	83 ec 08             	sub    esp,0x8
c00200fd:	68 70 02 00 00       	push   0x270
c0020102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020106:	e8 01 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002010b:	83 c4 10             	add    esp,0x10
c002010e:	83 c4 0c             	add    esp,0xc
c0020111:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020112 <SATABus::~SATABus()>:
c0020112:	83 ec 0c             	sub    esp,0xc
c0020115:	ba 30 32 02 c0       	mov    edx,0xc0023230
c002011a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011e:	89 10                	mov    DWORD PTR [eax],edx
c0020120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020124:	83 ec 0c             	sub    esp,0xc
c0020127:	50                   	push   eax
c0020128:	e8 af cb fe ff       	call   c000ccdc <HardDiskController::~HardDiskController()>
c002012d:	83 c4 10             	add    esp,0x10
c0020130:	90                   	nop
c0020131:	83 c4 0c             	add    esp,0xc
c0020134:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020136 <SATABus::~SATABus()>:
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	83 ec 0c             	sub    esp,0xc
c002013c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020140:	e8 cd ff ff ff       	call   c0020112 <SATABus::~SATABus()>
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	83 ec 08             	sub    esp,0x8
c002014b:	68 64 01 00 00       	push   0x164
c0020150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020154:	e8 b3 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020159:	83 c4 10             	add    esp,0x10
c002015c:	83 c4 0c             	add    esp,0xc
c002015f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020160 <ATA::~ATA()>:
c0020160:	83 ec 0c             	sub    esp,0xc
c0020163:	ba 70 32 02 c0       	mov    edx,0xc0023270
c0020168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016c:	89 10                	mov    DWORD PTR [eax],edx
c002016e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	50                   	push   eax
c0020176:	e8 43 cc fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	90                   	nop
c002017f:	83 c4 0c             	add    esp,0xc
c0020182:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020184 <ATA::~ATA()>:
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	83 ec 0c             	sub    esp,0xc
c002018a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002018e:	e8 cd ff ff ff       	call   c0020160 <ATA::~ATA()>
c0020193:	83 c4 10             	add    esp,0x10
c0020196:	83 ec 08             	sub    esp,0x8
c0020199:	68 7c 01 00 00       	push   0x17c
c002019e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a2:	e8 65 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201a7:	83 c4 10             	add    esp,0x10
c00201aa:	83 c4 0c             	add    esp,0xc
c00201ad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00201ae <ATAPI::~ATAPI()>:
c00201ae:	83 ec 0c             	sub    esp,0xc
c00201b1:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c00201b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ba:	89 10                	mov    DWORD PTR [eax],edx
c00201bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c0:	83 ec 0c             	sub    esp,0xc
c00201c3:	50                   	push   eax
c00201c4:	e8 f5 cb fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c00201c9:	83 c4 10             	add    esp,0x10
c00201cc:	90                   	nop
c00201cd:	83 c4 0c             	add    esp,0xc
c00201d0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00201d2 <ATAPI::~ATAPI()>:
c00201d2:	83 ec 0c             	sub    esp,0xc
c00201d5:	83 ec 0c             	sub    esp,0xc
c00201d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201dc:	e8 cd ff ff ff       	call   c00201ae <ATAPI::~ATAPI()>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	83 ec 08             	sub    esp,0x8
c00201e7:	68 84 01 00 00       	push   0x184
c00201ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f0:	e8 17 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201f5:	83 c4 10             	add    esp,0x10
c00201f8:	83 c4 0c             	add    esp,0xc
c00201fb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00201fc <SATA::~SATA()>:
c00201fc:	83 ec 0c             	sub    esp,0xc
c00201ff:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c0020204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020208:	89 10                	mov    DWORD PTR [eax],edx
c002020a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	50                   	push   eax
c0020212:	e8 a7 cb fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	90                   	nop
c002021b:	83 c4 0c             	add    esp,0xc
c002021e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020220 <SATA::~SATA()>:
c0020220:	83 ec 0c             	sub    esp,0xc
c0020223:	83 ec 0c             	sub    esp,0xc
c0020226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002022a:	e8 cd ff ff ff       	call   c00201fc <SATA::~SATA()>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	83 ec 08             	sub    esp,0x8
c0020235:	68 7c 01 00 00       	push   0x17c
c002023a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023e:	e8 c9 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020243:	83 c4 10             	add    esp,0x10
c0020246:	83 c4 0c             	add    esp,0xc
c0020249:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002024a <SATAPI::~SATAPI()>:
c002024a:	83 ec 0c             	sub    esp,0xc
c002024d:	ba 90 34 02 c0       	mov    edx,0xc0023490
c0020252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020256:	89 10                	mov    DWORD PTR [eax],edx
c0020258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	50                   	push   eax
c0020260:	e8 59 cb fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c0020265:	83 c4 10             	add    esp,0x10
c0020268:	90                   	nop
c0020269:	83 c4 0c             	add    esp,0xc
c002026c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002026e <SATAPI::~SATAPI()>:
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	83 ec 0c             	sub    esp,0xc
c0020274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020278:	e8 cd ff ff ff       	call   c002024a <SATAPI::~SATAPI()>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	83 ec 08             	sub    esp,0x8
c0020283:	68 84 01 00 00       	push   0x184
c0020288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028c:	e8 7b a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020291:	83 c4 10             	add    esp,0x10
c0020294:	83 c4 0c             	add    esp,0xc
c0020297:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020298 <IOAPIC::~IOAPIC()>:
c0020298:	83 ec 0c             	sub    esp,0xc
c002029b:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c00202a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a4:	89 10                	mov    DWORD PTR [eax],edx
c00202a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202aa:	83 ec 0c             	sub    esp,0xc
c00202ad:	50                   	push   eax
c00202ae:	e8 af c5 fe ff       	call   c000c862 <Device::~Device()>
c00202b3:	83 c4 10             	add    esp,0x10
c00202b6:	90                   	nop
c00202b7:	83 c4 0c             	add    esp,0xc
c00202ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00202bc <IOAPIC::~IOAPIC()>:
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	83 ec 0c             	sub    esp,0xc
c00202c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c6:	e8 cd ff ff ff       	call   c0020298 <IOAPIC::~IOAPIC()>
c00202cb:	83 c4 10             	add    esp,0x10
c00202ce:	83 ec 08             	sub    esp,0x8
c00202d1:	68 68 01 00 00       	push   0x168
c00202d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202da:	e8 2d a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202df:	83 c4 10             	add    esp,0x10
c00202e2:	83 c4 0c             	add    esp,0xc
c00202e5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00202e8 <APICTimer::~APICTimer()>:
c00202e8:	83 ec 0c             	sub    esp,0xc
c00202eb:	ba 18 35 02 c0       	mov    edx,0xc0023518
c00202f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f4:	89 10                	mov    DWORD PTR [eax],edx
c00202f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202fa:	83 ec 0c             	sub    esp,0xc
c00202fd:	50                   	push   eax
c00202fe:	e8 35 e0 fe ff       	call   c000e338 <Timer::~Timer()>
c0020303:	83 c4 10             	add    esp,0x10
c0020306:	90                   	nop
c0020307:	83 c4 0c             	add    esp,0xc
c002030a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002030c <APICTimer::~APICTimer()>:
c002030c:	83 ec 0c             	sub    esp,0xc
c002030f:	83 ec 0c             	sub    esp,0xc
c0020312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020316:	e8 cd ff ff ff       	call   c00202e8 <APICTimer::~APICTimer()>
c002031b:	83 c4 10             	add    esp,0x10
c002031e:	83 ec 08             	sub    esp,0x8
c0020321:	68 60 01 00 00       	push   0x160
c0020326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032a:	e8 dd a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002032f:	83 c4 10             	add    esp,0x10
c0020332:	83 c4 0c             	add    esp,0xc
c0020335:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020338 <PIT::~PIT()>:
c0020338:	83 ec 0c             	sub    esp,0xc
c002033b:	ba 68 35 02 c0       	mov    edx,0xc0023568
c0020340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020344:	89 10                	mov    DWORD PTR [eax],edx
c0020346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034a:	83 ec 0c             	sub    esp,0xc
c002034d:	50                   	push   eax
c002034e:	e8 e5 df fe ff       	call   c000e338 <Timer::~Timer()>
c0020353:	83 c4 10             	add    esp,0x10
c0020356:	90                   	nop
c0020357:	83 c4 0c             	add    esp,0xc
c002035a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002035c <PIT::~PIT()>:
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	83 ec 0c             	sub    esp,0xc
c0020362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020366:	e8 cd ff ff ff       	call   c0020338 <PIT::~PIT()>
c002036b:	83 c4 10             	add    esp,0x10
c002036e:	83 ec 08             	sub    esp,0x8
c0020371:	68 5c 01 00 00       	push   0x15c
c0020376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002037a:	e8 8d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002037f:	83 c4 10             	add    esp,0x10
c0020382:	83 c4 0c             	add    esp,0xc
c0020385:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 7d 23 02 c0       	mov    esi,0xc002237d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 99 23 02 c0       	mov    esi,0xc0022399
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
