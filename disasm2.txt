
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 23 02 c0       	mov    eax,0xc00223e8
c0000025:	3d e8 23 02 c0       	cmp    eax,0xc00223e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 23 02 c0       	push   0xc00223e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 23 02 c0       	mov    eax,0xc00223e8
c0000051:	2d e8 23 02 c0       	sub    eax,0xc00223e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 23 02 c0       	push   0xc00223e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc f2 01 c0       	mov    ebx,0xc001f2fc
c0000097:	81 eb f8 f2 01 c0    	sub    ebx,0xc001f2f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 f2 01 c0       	mov    esi,0xc001f2f8
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 23 02 c0       	push   0xc00223e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 e8 23 02 c0       	push   0xc00223e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ef 45 01 00       	call   c001489c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 90 a4 00 00       	call   c000a755 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 cd 45 01 00       	call   c001489c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 da 4a 01 00       	call   c0014dc8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 75 51 01 00       	call   c001546c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 d5 04 01 00       	jmp    c0010854 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d00],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d00],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d00],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d00],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 f3 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0d00],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d00],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0bfc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 7a 6b 01 00       	jmp    c0018954 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 a4 6b 01 00       	jmp    c0018994 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 c5 6b 01 00       	jmp    c00189d4 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0aa0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0aa0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c f4 01 c0       	mov    edx,0xc001f41c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 f4 01 c0       	mov    eax,0xc001f422
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b20]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b f4 01 c0       	mov    eax,0xc001f42b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 f5 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0aa0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 f4 01 c0       	mov    ebx,0xc001f4a0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 f4 01 c0       	mov    eax,0xc001f480
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 f4 01 c0       	mov    eax,0xc001f490
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 f4 01 c0       	mov    edx,0xc001f432
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e f4 01 c0       	mov    edx,0xc001f43e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 f4 01 c0       	mov    edx,0xc001f452
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f880
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f880
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 f5 01 c0       	mov    eax,0xc001f5c0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a80]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 f9 01 c0       	push   0xc001f980
c0006147:	e8 ac 31 01 00       	call   c00192f8 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e f9 01 c0       	push   0xc001f98e
c000617f:	e8 74 31 01 00       	call   c00192f8 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 dd 30 01 00       	call   c001929c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d f9 01 c0       	push   0xc001f99d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 f9 01 c0       	push   0xc001f9a0
c000682f:	e8 c4 2a 01 00       	call   c00192f8 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 d2 2a 01 00       	call   c0019314 <iso_kprintfd>
c0006842:	c7 04 24 a5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a5
c0006849:	e8 aa 2a 01 00       	call   c00192f8 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 ba 2a 01 00       	call   c0019314 <iso_kprintfd>
c000685a:	c7 04 24 ab f9 01 c0 	mov    DWORD PTR [esp],0xc001f9ab
c0006861:	e8 92 2a 01 00       	call   c00192f8 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 a2 2a 01 00       	call   c0019314 <iso_kprintfd>
c0006872:	c7 04 24 b1 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9b1
c0006879:	e8 7a 2a 01 00       	call   c00192f8 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 8a 2a 01 00       	call   c0019314 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d f9 01 c0       	push   0xc001f99d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba f9 01 c0       	push   0xc001f9ba
c0006a52:	e8 a1 28 01 00       	call   c00192f8 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 f9 01 c0       	push   0xc001f9c5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc f9 01 c0       	push   0xc001f9cc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 f9 01 c0       	push   0xc001f9d3
c0006b69:	e8 8a 27 01 00       	call   c00192f8 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de f9 01 c0       	push   0xc001f9de
c0006b84:	e8 6f 27 01 00       	call   c00192f8 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 80 52 00 00       	call   c000bf1e <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 ef f9 01 c0       	push   0xc001f9ef
c0006ccf:	e8 18 95 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 08 fa 01 c0       	push   0xc001fa08
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 f8 de 00 00       	call   c0014bf4 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 07 e1 00 00       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 dc 58 01 c0       	push   0xc00158dc
c0006d20:	52                   	push   edx
c0006d21:	e8 f2 e0 00 00       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 e6 9c 00 00       	call   c0010a20 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 04 fb 01 c0       	push   0xc001fb04
c0006d42:	e8 a5 94 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0006d47:	e8 b3 ef 00 00       	call   c0015cff <Vm::initialise8086()>
c0006d4c:	e8 ef 3f 00 00       	call   c000ad40 <Fs::initVFS()>
c0006d51:	c7 04 24 15 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa15
c0006d58:	e8 8f 94 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 04 fb 01 c0       	push   0xc001fb04
c0006d7c:	e8 6b 94 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0006d81:	e8 46 99 00 00       	call   c00106cc <Krnl::loadSystemEnv()>
c0006d86:	e8 a3 9b 00 00       	call   c001092e <Krnl::setupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 2f fa 01 c0       	push   0xc001fa2f
c0006d95:	68 38 fa 01 c0       	push   0xc001fa38
c0006d9a:	e8 7f c1 00 00       	call   c0012f1e <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 d1 4a 00 00       	call   c000b878 <User::loadClockSettings(int)>
c0006da7:	c7 04 24 28 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb28
c0006dae:	e8 39 94 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 57 51 00 00       	call   c000bf1c <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 40 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa40
c0006dcc:	e8 1b 94 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 51 fa 01 c0       	push   0xc001fa51
c0006de0:	e8 13 d8 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 4a da 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 69 e4 00 00       	call   c0015264 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 6d fa 01 c0       	push   0xc001fa6d
c0006e0f:	50                   	push   eax
c0006e10:	e8 83 51 00 00       	call   c000bf98 <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 e7 73 01 00       	call   c001e2f6 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 b5 87 00 00       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 8e 87 00 00       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 6c 87 00 00       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 4a 87 00 00       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 57 86 00 00       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 32 86 00 00       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 46 72 01 00       	call   c001e2b0 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 94 6e 01 00       	call   c001df20 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 48 86 00 00       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 76 fa 01 c0       	push   0xc001fa76
c00070fc:	e8 68 97 00 00       	call   c0010869 <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 7c fa 01 c0       	push   0xc001fa7c
c0007138:	e8 2c 97 00 00       	call   c0010869 <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 4f 80 00 00       	jmp    c000f1d4 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 82 fa 01 c0       	push   0xc001fa82
c00071db:	0f 94 05 20 1f 02 c0 	sete   BYTE PTR ds:0xc0021f20
c00071e2:	e8 05 90 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 4b 7b 00 00       	call   c000ed48 <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 f4 4b 00 00       	call   c000be00 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 9a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa9a
c0007225:	e8 c2 8f 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 7a 85 00 00       	call   c000f7ba <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 b1 4b 00 00       	call   c000be00 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 48 fb 01 c0       	push   0xc001fb48
c000726c:	e8 7b 8f 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0007271:	e8 62 fc 00 00       	call   c0016ed8 <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 b4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fab4
c000727d:	e8 6a 8f 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 b2 dc 00 00       	call   c0014f40 <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 cf fa 01 c0       	push   0xc001facf
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 b9 36 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 e0 fa 01 c0       	push   0xc001fae0
c0007305:	e8 5f 95 00 00       	call   c0010869 <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 ed fa 01 c0       	push   0xc001faed
c000731a:	e8 4a 95 00 00       	call   c0010869 <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 f7 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001faf7
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 30 95 00 00       	jmp    c0010869 <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 79 f6 00 00       	call   c0016ba4 <HalSystemIdle()>
c000752b:	e8 82 73 01 00       	call   c001e8b2 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 b0 df 01 c0       	push   0xc001dfb0
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 c0 df 01 c0       	push   0xc001dfc0
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 ca df 01 c0       	push   0xc001dfca
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 d4 df 01 c0       	push   0xc001dfd4
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 de df 01 c0       	push   0xc001dfde
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 e8 df 01 c0       	push   0xc001dfe8
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 f2 df 01 c0       	push   0xc001dff2
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 fc df 01 c0       	push   0xc001dffc
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 06 e0 01 c0       	push   0xc001e006
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 0e e0 01 c0       	push   0xc001e00e
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 18 e0 01 c0       	push   0xc001e018
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 20 e0 01 c0       	push   0xc001e020
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 28 e0 01 c0       	push   0xc001e028
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 30 e0 01 c0       	push   0xc001e030
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 4a e0 01 c0       	push   0xc001e04a
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 52 e0 01 c0       	push   0xc001e052
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 5c e0 01 c0       	push   0xc001e05c
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 66 e0 01 c0       	push   0xc001e066
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 70 e0 01 c0       	push   0xc001e070
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 0a e1 01 c0       	push   0xc001e10a
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 11 e1 01 c0       	push   0xc001e111
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 fc e0 01 c0       	push   0xc001e0fc
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 03 e1 01 c0       	push   0xc001e103
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 7a e0 01 c0       	push   0xc001e07a
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 84 e0 01 c0       	push   0xc001e084
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 8e e0 01 c0       	push   0xc001e08e
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 98 e0 01 c0       	push   0xc001e098
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 a2 e0 01 c0       	push   0xc001e0a2
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 ac e0 01 c0       	push   0xc001e0ac
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 b6 e0 01 c0       	push   0xc001e0b6
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 c0 e0 01 c0       	push   0xc001e0c0
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 ca e0 01 c0       	push   0xc001e0ca
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 d4 e0 01 c0       	push   0xc001e0d4
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 de e0 01 c0       	push   0xc001e0de
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 e8 e0 01 c0       	push   0xc001e0e8
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 f2 e0 01 c0       	push   0xc001e0f2
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 4c e2 01 c0       	push   0xc001e24c
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 56 e2 01 c0       	push   0xc001e256
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 60 e2 01 c0       	push   0xc001e260
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 6a e2 01 c0       	push   0xc001e26a
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 74 e2 01 c0       	push   0xc001e274
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 7e e2 01 c0       	push   0xc001e27e
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 88 e2 01 c0       	push   0xc001e288
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 92 e2 01 c0       	push   0xc001e292
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 c7 24 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 f5 15 00 00       	call   c0008f3c <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 06 e0 01 c0       	push   0xc001e006
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 2a 16 00 00       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 08 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f08
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d 08 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021f08
c00079dd:	e8 f4 03 00 00       	call   c0007dd6 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 f5 22 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 08 1f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021f08,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 08 1f 02 c0       	mov    eax,ds:0xc0021f08
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 98 fb 01 c0       	push   0xc001fb98
c0007a25:	e8 74 2f 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 c8 fb 01 c0       	push   0xc001fbc8
c0007a3c:	e8 28 8e 00 00       	call   c0010869 <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 cd fb 01 c0       	push   0xc001fbcd
c0007a52:	e8 12 8e 00 00       	call   c0010869 <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 58 23 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 7c 1f 00 00       	call   c0009a2a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 d4 fb 01 c0       	push   0xc001fbd4
c0007b74:	e8 25 2e 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 f9 85 00 00       	call   c0010177 <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 af 03 00 00       	call   c0007f44 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 3f 1c 00 00       	call   c00097d9 <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 07 1f 00 00       	call   c0009aac <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 9a 6c 01 00       	call   c001e84a <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	6a 00                	push   0x0
c0007bc8:	6a 00                	push   0x0
c0007bca:	6a 00                	push   0x0
c0007bcc:	56                   	push   esi
c0007bcd:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd3:	e8 ee f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd8:	83 c4 14             	add    esp,0x14
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 95 1f 00 00       	call   c0009b76 <VAS::~VAS()>
c0007be1:	83 c4 30             	add    esp,0x30
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	5f                   	pop    edi
c0007be7:	c3                   	ret    

c0007be8 <Phys::allocateDMA(unsigned long)>:
c0007be8:	55                   	push   ebp
c0007be9:	31 ed                	xor    ebp,ebp
c0007beb:	57                   	push   edi
c0007bec:	56                   	push   esi
c0007bed:	31 f6                	xor    esi,esi
c0007bef:	53                   	push   ebx
c0007bf0:	31 db                	xor    ebx,ebx
c0007bf2:	83 ec 1c             	sub    esp,0x1c
c0007bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf9:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfe:	c1 e8 0c             	shr    eax,0xc
c0007c01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c05:	31 c0                	xor    eax,eax
c0007c07:	eb 1b                	jmp    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c09:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0c:	85 c0                	test   eax,eax
c0007c0e:	0f 44 eb             	cmove  ebp,ebx
c0007c11:	0f 44 f3             	cmove  esi,ebx
c0007c14:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c18:	74 37                	je     c0007c51 <Phys::allocateDMA(unsigned long)+0x69>
c0007c1a:	89 f8                	mov    eax,edi
c0007c1c:	83 c3 01             	add    ebx,0x1
c0007c1f:	83 fb 0f             	cmp    ebx,0xf
c0007c22:	7f 13                	jg     c0007c37 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c24:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2b:	74 dc                	je     c0007c09 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c3 01             	add    ebx,0x1
c0007c32:	83 fb 0f             	cmp    ebx,0xf
c0007c35:	7e ed                	jle    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c37:	83 ec 0c             	sub    esp,0xc
c0007c3a:	68 ec fb 01 c0       	push   0xc001fbec
c0007c3f:	e8 25 8c 00 00       	call   c0010869 <KePanic(char const*)>
c0007c44:	83 c4 10             	add    esp,0x10
c0007c47:	31 c0                	xor    eax,eax
c0007c49:	83 c4 1c             	add    esp,0x1c
c0007c4c:	5b                   	pop    ebx
c0007c4d:	5e                   	pop    esi
c0007c4e:	5f                   	pop    edi
c0007c4f:	5d                   	pop    ebp
c0007c50:	c3                   	ret    
c0007c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c55:	89 f2                	mov    edx,esi
c0007c57:	c1 fa 04             	sar    edx,0x4
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	01 f1                	add    ecx,esi
c0007c60:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c63:	83 e9 01             	sub    ecx,0x1
c0007c66:	0f 48 ca             	cmovs  ecx,edx
c0007c69:	c1 f9 04             	sar    ecx,0x4
c0007c6c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c70:	74 06                	je     c0007c78 <Phys::allocateDMA(unsigned long)+0x90>
c0007c72:	89 eb                	mov    ebx,ebp
c0007c74:	31 c0                	xor    eax,eax
c0007c76:	eb b7                	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x47>
c0007c78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7c:	85 d2                	test   edx,edx
c0007c7e:	74 17                	je     c0007c97 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c80:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c86:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c90:	83 c2 01             	add    edx,0x1
c0007c93:	39 d0                	cmp    eax,edx
c0007c95:	75 f6                	jne    c0007c8d <Phys::allocateDMA(unsigned long)+0xa5>
c0007c97:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca5:	01 c2                	add    edx,eax
c0007ca7:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cad:	85 c9                	test   ecx,ecx
c0007caf:	74 17                	je     c0007cc8 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	68 ec fb 01 c0       	push   0xc001fbec
c0007cb9:	e8 ab 8b 00 00       	call   c0010869 <KePanic(char const*)>
c0007cbe:	83 c4 10             	add    esp,0x10
c0007cc1:	89 f8                	mov    eax,edi
c0007cc3:	e9 54 ff ff ff       	jmp    c0007c1c <Phys::allocateDMA(unsigned long)+0x34>
c0007cc8:	c1 e6 0c             	shl    esi,0xc
c0007ccb:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd1:	e9 73 ff ff ff       	jmp    c0007c49 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cda:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ce0:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce5:	c1 ea 0c             	shr    edx,0xc
c0007ce8:	29 d0                	sub    eax,edx
c0007cea:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf8:	c1 e8 0c             	shr    eax,0xc
c0007cfb:	85 d2                	test   edx,edx
c0007cfd:	74 11                	je     c0007d10 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cff:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d04:	01 c2                	add    edx,eax
c0007d06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d09:	83 c0 01             	add    eax,0x1
c0007d0c:	39 d0                	cmp    eax,edx
c0007d0e:	75 f6                	jne    c0007d06 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d10:	c3                   	ret    

c0007d11 <Phys::setPageState(unsigned long, bool)>:
c0007d11:	57                   	push   edi
c0007d12:	56                   	push   esi
c0007d13:	8b 35 0c 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f0c
c0007d19:	53                   	push   ebx
c0007d1a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d27:	89 ca                	mov    edx,ecx
c0007d29:	83 e1 07             	and    ecx,0x7
c0007d2c:	c1 ea 03             	shr    edx,0x3
c0007d2f:	0f b6 c0             	movzx  eax,al
c0007d32:	d3 c3                	rol    ebx,cl
c0007d34:	01 d6                	add    esi,edx
c0007d36:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d39:	d3 e0                	shl    eax,cl
c0007d3b:	21 fb                	and    ebx,edi
c0007d3d:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3f:	8b 1d 0c 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f0c
c0007d45:	01 da                	add    edx,ebx
c0007d47:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d49:	09 c8                	or     eax,ecx
c0007d4b:	88 02                	mov    BYTE PTR [edx],al
c0007d4d:	5b                   	pop    ebx
c0007d4e:	5e                   	pop    esi
c0007d4f:	5f                   	pop    edi
c0007d50:	c3                   	ret    

c0007d51 <Phys::getPageState(unsigned long)>:
c0007d51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d55:	8b 15 0c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f0c
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	83 e1 07             	and    ecx,0x7
c0007d60:	c1 e8 03             	shr    eax,0x3
c0007d63:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d67:	d3 f8                	sar    eax,cl
c0007d69:	83 e0 01             	and    eax,0x1
c0007d6c:	c3                   	ret    

c0007d6d <Phys::freePage(unsigned long)>:
c0007d6d:	53                   	push   ebx
c0007d6e:	83 ec 08             	sub    esp,0x8
c0007d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d75:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d81:	76 41                	jbe    c0007dc4 <Phys::freePage(unsigned long)+0x57>
c0007d83:	c1 e8 0c             	shr    eax,0xc
c0007d86:	50                   	push   eax
c0007d87:	89 c3                	mov    ebx,eax
c0007d89:	e8 c3 ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007d8e:	5a                   	pop    edx
c0007d8f:	84 c0                	test   al,al
c0007d91:	74 20                	je     c0007db3 <Phys::freePage(unsigned long)+0x46>
c0007d93:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d98:	83 ec 08             	sub    esp,0x8
c0007d9b:	6a 00                	push   0x0
c0007d9d:	53                   	push   ebx
c0007d9e:	83 e8 01             	sub    eax,0x1
c0007da1:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da6:	e8 66 ff ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    
c0007db3:	c7 44 24 10 91 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc91
c0007dbb:	83 c4 08             	add    esp,0x8
c0007dbe:	5b                   	pop    ebx
c0007dbf:	e9 a5 8a 00 00       	jmp    c0010869 <KePanic(char const*)>
c0007dc4:	68 00 10 00 00       	push   0x1000
c0007dc9:	50                   	push   eax
c0007dca:	e8 07 ff ff ff       	call   c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dcf:	59                   	pop    ecx
c0007dd0:	5b                   	pop    ebx
c0007dd1:	83 c4 08             	add    esp,0x8
c0007dd4:	5b                   	pop    ebx
c0007dd5:	c3                   	ret    

c0007dd6 <Phys::allocatePage()>:
c0007dd6:	56                   	push   esi
c0007dd7:	53                   	push   ebx
c0007dd8:	83 ec 14             	sub    esp,0x14
c0007ddb:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de1:	89 f3                	mov    ebx,esi
c0007de3:	eb 0a                	jmp    c0007def <Phys::allocatePage()+0x19>
c0007de5:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007deb:	39 de                	cmp    esi,ebx
c0007ded:	74 26                	je     c0007e15 <Phys::allocatePage()+0x3f>
c0007def:	53                   	push   ebx
c0007df0:	e8 5c ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007df5:	5a                   	pop    edx
c0007df6:	84 c0                	test   al,al
c0007df8:	74 67                	je     c0007e61 <Phys::allocatePage()+0x8b>
c0007dfa:	83 c3 01             	add    ebx,0x1
c0007dfd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e03:	75 e0                	jne    c0007de5 <Phys::allocatePage()+0xf>
c0007e05:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0f:	31 db                	xor    ebx,ebx
c0007e11:	39 de                	cmp    esi,ebx
c0007e13:	75 da                	jne    c0007def <Phys::allocatePage()+0x19>
c0007e15:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e1a:	83 ec 0c             	sub    esp,0xc
c0007e1d:	83 f0 01             	xor    eax,0x1
c0007e20:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e33:	50                   	push   eax
c0007e34:	e8 19 28 00 00       	call   c000a652 <VAS::scanForEviction()>
c0007e39:	83 c4 10             	add    esp,0x10
c0007e3c:	85 c0                	test   eax,eax
c0007e3e:	75 48                	jne    c0007e88 <Phys::allocatePage()+0xb2>
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	68 14 fc 01 c0       	push   0xc001fc14
c0007e48:	e8 1c 8a 00 00       	call   c0010869 <KePanic(char const*)>
c0007e4d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e53:	83 c4 10             	add    esp,0x10
c0007e56:	53                   	push   ebx
c0007e57:	e8 f5 fe ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007e5c:	5a                   	pop    edx
c0007e5d:	84 c0                	test   al,al
c0007e5f:	75 99                	jne    c0007dfa <Phys::allocatePage()+0x24>
c0007e61:	6a 01                	push   0x1
c0007e63:	53                   	push   ebx
c0007e64:	e8 a8 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e69:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6f:	59                   	pop    ecx
c0007e70:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e75:	5b                   	pop    ebx
c0007e76:	83 c2 01             	add    edx,0x1
c0007e79:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7f:	c1 e0 0c             	shl    eax,0xc
c0007e82:	83 c4 14             	add    esp,0x14
c0007e85:	5b                   	pop    ebx
c0007e86:	5e                   	pop    esi
c0007e87:	c3                   	ret    
c0007e88:	83 ec 08             	sub    esp,0x8
c0007e8b:	89 c2                	mov    edx,eax
c0007e8d:	6a 01                	push   0x1
c0007e8f:	c1 ea 0c             	shr    edx,0xc
c0007e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e96:	52                   	push   edx
c0007e97:	e8 75 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e9c:	83 c4 10             	add    esp,0x10
c0007e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea3:	eb dd                	jmp    c0007e82 <Phys::allocatePage()+0xac>

c0007ea5 <Phys::allocateContiguousPages(int)>:
c0007ea5:	57                   	push   edi
c0007ea6:	56                   	push   esi
c0007ea7:	53                   	push   ebx
c0007ea8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eac:	fa                   	cli    
c0007ead:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb2:	31 db                	xor    ebx,ebx
c0007eb4:	83 c0 01             	add    eax,0x1
c0007eb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebc:	85 db                	test   ebx,ebx
c0007ebe:	75 11                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007ec0:	e8 11 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	89 c7                	mov    edi,eax
c0007eca:	74 21                	je     c0007eed <Phys::allocateContiguousPages(int)+0x48>
c0007ecc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed1:	e8 00 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ed6:	89 da                	mov    edx,ebx
c0007ed8:	c1 e2 0c             	shl    edx,0xc
c0007edb:	01 fa                	add    edx,edi
c0007edd:	39 c2                	cmp    edx,eax
c0007edf:	74 22                	je     c0007f03 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee1:	83 fe 01             	cmp    esi,0x1
c0007ee4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee9:	89 c7                	mov    edi,eax
c0007eeb:	75 e4                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007eed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef2:	83 e8 01             	sub    eax,0x1
c0007ef5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007efa:	75 01                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x58>
c0007efc:	fb                   	sti    
c0007efd:	5b                   	pop    ebx
c0007efe:	89 f8                	mov    eax,edi
c0007f00:	5e                   	pop    esi
c0007f01:	5f                   	pop    edi
c0007f02:	c3                   	ret    
c0007f03:	83 c3 01             	add    ebx,0x1
c0007f06:	39 f3                	cmp    ebx,esi
c0007f08:	75 b2                	jne    c0007ebc <Phys::allocateContiguousPages(int)+0x17>
c0007f0a:	eb e1                	jmp    c0007eed <Phys::allocateContiguousPages(int)+0x48>

c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0c:	56                   	push   esi
c0007f0d:	53                   	push   ebx
c0007f0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f12:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f18:	73 06                	jae    c0007f20 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f1a:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f24:	c1 eb 0c             	shr    ebx,0xc
c0007f27:	c1 e8 0c             	shr    eax,0xc
c0007f2a:	39 d8                	cmp    eax,ebx
c0007f2c:	73 13                	jae    c0007f41 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2e:	6a 00                	push   0x0
c0007f30:	50                   	push   eax
c0007f31:	8d 70 01             	lea    esi,[eax+0x1]
c0007f34:	e8 d8 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 f0                	mov    eax,esi
c0007f3d:	5a                   	pop    edx
c0007f3e:	59                   	pop    ecx
c0007f3f:	75 ed                	jne    c0007f2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f41:	5b                   	pop    ebx
c0007f42:	5e                   	pop    esi
c0007f43:	c3                   	ret    

c0007f44 <Phys::physicalMemorySetup(unsigned int)>:
c0007f44:	55                   	push   ebp
c0007f45:	57                   	push   edi
c0007f46:	56                   	push   esi
c0007f47:	53                   	push   ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	83 ec 40             	sub    esp,0x40
c0007f4d:	6a 10                	push   0x10
c0007f4f:	6a 00                	push   0x0
c0007f51:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f56:	e8 95 85 ff ff       	call   c00004f0 <memset>
c0007f5b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f64:	05 00 10 00 00       	add    eax,0x1000
c0007f69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6d:	5a                   	pop    edx
c0007f6e:	59                   	pop    ecx
c0007f6f:	50                   	push   eax
c0007f70:	68 a7 fc 01 c0       	push   0xc001fca7
c0007f75:	e8 24 2a 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0007f7a:	83 c4 10             	add    esp,0x10
c0007f7d:	83 ec 08             	sub    esp,0x8
c0007f80:	6a 01                	push   0x1
c0007f82:	53                   	push   ebx
c0007f83:	83 c3 01             	add    ebx,0x1
c0007f86:	e8 86 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f8b:	83 c4 10             	add    esp,0x10
c0007f8e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f94:	75 e7                	jne    c0007f7d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f96:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa1:	85 c0                	test   eax,eax
c0007fa3:	0f 84 43 01 00 00    	je     c00080ec <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007fa9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fb1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fb6:	e9 82 00 00 00       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007fbb:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc0:	89 c1                	mov    ecx,eax
c0007fc2:	39 f2                	cmp    edx,esi
c0007fc4:	19 f9                	sbb    ecx,edi
c0007fc6:	0f 82 c0 00 00 00    	jb     c000808c <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd0:	89 c5                	mov    ebp,eax
c0007fd2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fda:	19 cd                	sbb    ebp,ecx
c0007fdc:	0f 83 af 00 00 00    	jae    c0008091 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007fe2:	89 d6                	mov    esi,edx
c0007fe4:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fe9:	39 f2                	cmp    edx,esi
c0007feb:	89 cf                	mov    edi,ecx
c0007fed:	19 c8                	sbb    eax,ecx
c0007fef:	73 07                	jae    c0007ff8 <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007ff1:	be 00 00 0a 00       	mov    esi,0xa0000
c0007ff6:	31 ff                	xor    edi,edi
c0007ff8:	89 f2                	mov    edx,esi
c0007ffa:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fff:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008005:	89 f9                	mov    ecx,edi
c0008007:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000800b:	83 d1 ff             	adc    ecx,0xffffffff
c000800e:	39 d0                	cmp    eax,edx
c0008010:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	19 c8                	sbb    eax,ecx
c000801b:	0f 82 9d 01 00 00    	jb     c00081be <Phys::physicalMemorySetup(unsigned int)+0x27a>
c0008021:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008025:	83 c3 18             	add    ebx,0x18
c0008028:	83 c6 01             	add    esi,0x1
c000802b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000802f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008033:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008037:	0f 84 bf 00 00 00    	je     c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c000803d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000803f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008042:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008045:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008048:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000804c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000804f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008053:	01 f0                	add    eax,esi
c0008055:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008059:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000805d:	55                   	push   ebp
c000805e:	11 fa                	adc    edx,edi
c0008060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008064:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000806c:	50                   	push   eax
c000806d:	56                   	push   esi
c000806e:	68 44 fc 01 c0       	push   0xc001fc44
c0008073:	e8 26 29 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0008078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	09 f8                	or     eax,edi
c0008081:	75 79                	jne    c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0008083:	83 fd 01             	cmp    ebp,0x1
c0008086:	0f 84 2f ff ff ff    	je     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x77>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	75 90                	jne    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008091:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008095:	31 d2                	xor    edx,edx
c0008097:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000809b:	89 c8                	mov    eax,ecx
c000809d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080a1:	19 d1                	sbb    ecx,edx
c00080a3:	0f 82 78 ff ff ff    	jb     c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080a9:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080ae:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080b2:	b9 00 00 00 00       	mov    ecx,0x0
c00080b7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080bb:	0f 83 60 ff ff ff    	jae    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080c1:	39 c6                	cmp    esi,eax
c00080c3:	19 d7                	sbb    edi,edx
c00080c5:	0f 83 ff 00 00 00    	jae    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080d3:	29 c7                	sub    edi,eax
c00080d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080dd:	19 d5                	sbb    ebp,edx
c00080df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080e7:	e9 de 00 00 00       	jmp    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080ec:	83 ec 0c             	sub    esp,0xc
c00080ef:	68 bf fc 01 c0       	push   0xc001fcbf
c00080f4:	e8 70 87 00 00       	call   c0010869 <KePanic(char const*)>
c00080f9:	83 c4 10             	add    esp,0x10
c00080fc:	83 ec 08             	sub    esp,0x8
c00080ff:	bb 60 00 00 00       	mov    ebx,0x60
c0008104:	6a 00                	push   0x0
c0008106:	6a 06                	push   0x6
c0008108:	e8 04 fc ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000810d:	58                   	pop    eax
c000810e:	5a                   	pop    edx
c000810f:	6a 00                	push   0x0
c0008111:	6a 07                	push   0x7
c0008113:	e8 f9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008118:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000811e:	83 c4 10             	add    esp,0x10
c0008121:	83 c1 02             	add    ecx,0x2
c0008124:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	6a 00                	push   0x0
c000812f:	53                   	push   ebx
c0008130:	83 c3 01             	add    ebx,0x1
c0008133:	e8 d9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008141:	75 e7                	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c0008143:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008148:	bb 40 01 00 00       	mov    ebx,0x140
c000814d:	83 c0 20             	add    eax,0x20
c0008150:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008155:	eb 26                	jmp    c000817d <Phys::physicalMemorySetup(unsigned int)+0x239>
c0008157:	83 ec 08             	sub    esp,0x8
c000815a:	6a 00                	push   0x0
c000815c:	53                   	push   ebx
c000815d:	83 c3 01             	add    ebx,0x1
c0008160:	e8 ac fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008165:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	83 c0 01             	add    eax,0x1
c0008170:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008176:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000817b:	74 07                	je     c0008184 <Phys::physicalMemorySetup(unsigned int)+0x240>
c000817d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008182:	7e d3                	jle    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x213>
c0008184:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008189:	3d ff 07 00 00       	cmp    eax,0x7ff
c000818e:	7f 26                	jg     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0008190:	83 ec 08             	sub    esp,0x8
c0008193:	6a 00                	push   0x0
c0008195:	53                   	push   ebx
c0008196:	83 c3 01             	add    ebx,0x1
c0008199:	e8 73 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000819e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	83 c0 01             	add    eax,0x1
c00081a9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081af:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081b4:	75 d3                	jne    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081b6:	83 c4 3c             	add    esp,0x3c
c00081b9:	5b                   	pop    ebx
c00081ba:	5e                   	pop    esi
c00081bb:	5f                   	pop    edi
c00081bc:	5d                   	pop    ebp
c00081bd:	c3                   	ret    
c00081be:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081c2:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081ca:	83 ec 04             	sub    esp,0x4
c00081cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081d1:	56                   	push   esi
c00081d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081d6:	57                   	push   edi
c00081d7:	68 68 fc 01 c0       	push   0xc001fc68
c00081dc:	e8 bd 27 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00081e1:	5d                   	pop    ebp
c00081e2:	58                   	pop    eax
c00081e3:	56                   	push   esi
c00081e4:	57                   	push   edi
c00081e5:	e8 22 fd ff ff       	call   c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081f2:	83 c4 0c             	add    esp,0xc
c00081f5:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081ff:	01 f0                	add    eax,esi
c0008201:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008206:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000820d:	52                   	push   edx
c000820e:	50                   	push   eax
c000820f:	68 cd fc 01 c0       	push   0xc001fccd
c0008214:	e8 85 27 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	e9 00 fe ff ff       	jmp    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008221:	90                   	nop

c0008222 <Pipe::isAtty()>:
c0008222:	31 c0                	xor    eax,eax
c0008224:	c3                   	ret    
c0008225:	90                   	nop

c0008226 <Pipe::~Pipe()>:
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	ba 2c fd 01 c0       	mov    edx,0xc001fd2c
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	89 10                	mov    DWORD PTR [eax],edx
c0008234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	50                   	push   eax
c000823c:	e8 5b 11 00 00       	call   c000939c <UnixFile::~UnixFile()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	90                   	nop
c0008245:	83 c4 0c             	add    esp,0xc
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <Pipe::~Pipe()>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 cd ff ff ff       	call   c0008226 <Pipe::~Pipe()>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	83 ec 08             	sub    esp,0x8
c000825f:	6a 20                	push   0x20
c0008261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008265:	e8 36 26 00 00       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000826a:	83 c4 10             	add    esp,0x10
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    
c0008271:	90                   	nop

c0008272 <Pipe::write(unsigned long long, void*, int*)>:
c0008272:	55                   	push   ebp
c0008273:	57                   	push   edi
c0008274:	56                   	push   esi
c0008275:	53                   	push   ebx
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000827d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008285:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000828c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008292:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008296:	89 d8                	mov    eax,ebx
c0008298:	89 d6                	mov    esi,edx
c000829a:	89 d7                	mov    edi,edx
c000829c:	c1 ff 1f             	sar    edi,0x1f
c000829f:	03 34 24             	add    esi,DWORD PTR [esp]
c00082a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a6:	c1 f8 1f             	sar    eax,0x1f
c00082a9:	39 f3                	cmp    ebx,esi
c00082ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b3:	19 f8                	sbb    eax,edi
c00082b5:	b8 01 00 00 00       	mov    eax,0x1
c00082ba:	72 72                	jb     c000832e <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	99                   	cdq    
c00082c6:	f7 fb                	idiv   ebx
c00082c8:	89 d8                	mov    eax,ebx
c00082ca:	29 d0                	sub    eax,edx
c00082cc:	89 d6                	mov    esi,edx
c00082ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d1:	89 c3                	mov    ebx,eax
c00082d3:	c1 fb 1f             	sar    ebx,0x1f
c00082d6:	39 c2                	cmp    edx,eax
c00082d8:	19 df                	sbb    edi,ebx
c00082da:	bb 00 00 00 00       	mov    ebx,0x0
c00082df:	72 04                	jb     c00082e5 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e1:	89 d3                	mov    ebx,edx
c00082e3:	29 c3                	sub    ebx,eax
c00082e5:	89 d0                	mov    eax,edx
c00082e7:	29 d8                	sub    eax,ebx
c00082e9:	74 0d                	je     c00082f8 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082eb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082ee:	89 c1                	mov    ecx,eax
c00082f0:	01 f7                	add    edi,esi
c00082f2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	74 0d                	je     c0008309 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00082fc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008300:	89 d9                	mov    ecx,ebx
c0008302:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008305:	89 c6                	mov    esi,eax
c0008307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008309:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000830c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008311:	75 10                	jne    c0008323 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008313:	83 ec 0c             	sub    esp,0xc
c0008316:	68 e9 fc 01 c0       	push   0xc001fce9
c000831b:	e8 49 85 00 00       	call   c0010869 <KePanic(char const*)>
c0008320:	83 c4 10             	add    esp,0x10
c0008323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000832a:	89 08                	mov    DWORD PTR [eax],ecx
c000832c:	31 c0                	xor    eax,eax
c000832e:	83 c4 1c             	add    esp,0x1c
c0008331:	5b                   	pop    ebx
c0008332:	5e                   	pop    esi
c0008333:	5f                   	pop    edi
c0008334:	5d                   	pop    ebp
c0008335:	c3                   	ret    

c0008336 <Pipe::read(unsigned long long, void*, int*)>:
c0008336:	55                   	push   ebp
c0008337:	57                   	push   edi
c0008338:	56                   	push   esi
c0008339:	53                   	push   ebx
c000833a:	83 ec 1c             	sub    esp,0x1c
c000833d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008341:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008345:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008349:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000834c:	89 c8                	mov    eax,ecx
c000834e:	99                   	cdq    
c000834f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008353:	74 24                	je     c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008355:	39 f9                	cmp    ecx,edi
c0008357:	89 d1                	mov    ecx,edx
c0008359:	19 f1                	sbb    ecx,esi
c000835b:	73 1c                	jae    c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	fa                   	cli    
c000835e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008364:	e8 fb cc 00 00       	call   c0015064 <schedule()>
c0008369:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000836e:	48                   	dec    eax
c000836f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008374:	75 d3                	jne    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008376:	fb                   	sti    
c0008377:	eb d0                	jmp    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008379:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000837d:	39 f8                	cmp    eax,edi
c000837f:	89 d1                	mov    ecx,edx
c0008381:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 08                	jae    c0008391 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000838d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008391:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008394:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008397:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000839b:	29 f7                	sub    edi,esi
c000839d:	89 f8                	mov    eax,edi
c000839f:	99                   	cdq    
c00083a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083a4:	89 d0                	mov    eax,edx
c00083a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083aa:	19 c2                	sbb    edx,eax
c00083ac:	89 f8                	mov    eax,edi
c00083ae:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083b3:	89 ea                	mov    edx,ebp
c00083b5:	29 c2                	sub    edx,eax
c00083b7:	85 c0                	test   eax,eax
c00083b9:	74 0b                	je     c00083c6 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083bb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083be:	89 c1                	mov    ecx,eax
c00083c0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c6:	85 d2                	test   edx,edx
c00083c8:	74 0d                	je     c00083d7 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ce:	89 d1                	mov    ecx,edx
c00083d0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083d3:	89 c7                	mov    edi,eax
c00083d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083dd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e0:	99                   	cdq    
c00083e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083e5:	89 f7                	mov    edi,esi
c00083e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 39 63 01 00       	call   c001e730 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 06 fd 01 c0       	push   0xc001fd06
c000840c:	e8 58 84 00 00       	call   c0010869 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	83 c4 1c             	add    esp,0x1c
c0008421:	31 c0                	xor    eax,eax
c0008423:	5b                   	pop    ebx
c0008424:	5e                   	pop    esi
c0008425:	5f                   	pop    edi
c0008426:	5d                   	pop    ebp
c0008427:	c3                   	ret    

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 7c 0d 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 2c fd 01 c0       	mov    edx,0xc001fd2c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 55 f6 ff ff       	call   c0007acb <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 74 fd 01 c0       	mov    edx,0xc001fd74
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 ed 0e 00 00       	call   c000939c <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 c5 23 00 00       	call   c000a8a0 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 ec 47 00 00       	call   c000cce2 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 70 f8 00 00       	call   c0017d8c <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000853f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 40 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0c0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 40 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0c0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 f8 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde208]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 d0 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde230]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 a2 f5 00 00       	call   c0017c20 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	59                   	pop    ecx
c00086d2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086d7:	0f b6 c0             	movzx  eax,al
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f0:	01 f2                	add    edx,esi
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 ff f5 00 00       	jmp    c0017d28 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 40 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd40
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 f3 80 00 00       	jmp    c0010869 <KePanic(char const*)>
c0008776:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	50                   	push   eax
c000878c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000878f:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008842:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008853:	83 ec 0c             	sub    esp,0xc
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 4c 2f 00 00       	jmp    c000b81f <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088fe:	83 ec 0c             	sub    esp,0xc
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000896f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008973:	0f be c2             	movsx  eax,dl
c0008976:	83 f8 5b             	cmp    eax,0x5b
c0008979:	75 18                	jne    c0008993 <VgaText::putchar(char)+0x2b>
c000897b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000897f:	74 20                	je     c00089a1 <VgaText::putchar(char)+0x39>
c0008981:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008987:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000898e:	e9 b8 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008993:	83 f8 1b             	cmp    eax,0x1b
c0008996:	75 09                	jne    c00089a1 <VgaText::putchar(char)+0x39>
c0008998:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000899c:	e9 aa 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c00089a1:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089a5:	89 f9                	mov    ecx,edi
c00089a7:	84 c9                	test   cl,cl
c00089a9:	0f 84 8c 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xd3>
c00089af:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089b2:	80 f9 3e             	cmp    cl,0x3e
c00089b5:	77 70                	ja     c0008a27 <VgaText::putchar(char)+0xbf>
c00089b7:	83 f8 6d             	cmp    eax,0x6d
c00089ba:	75 3f                	jne    c00089fb <VgaText::putchar(char)+0x93>
c00089bc:	31 f6                	xor    esi,esi
c00089be:	31 d2                	xor    edx,edx
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c5:	7e 25                	jle    c00089ec <VgaText::putchar(char)+0x84>
c00089c7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089cc:	83 fa 3b             	cmp    edx,0x3b
c00089cf:	75 0f                	jne    c00089e0 <VgaText::putchar(char)+0x78>
c00089d1:	50                   	push   eax
c00089d2:	53                   	push   ebx
c00089d3:	e8 48 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089d8:	31 d2                	xor    edx,edx
c00089da:	59                   	pop    ecx
c00089db:	58                   	pop    eax
c00089dc:	31 c0                	xor    eax,eax
c00089de:	eb 09                	jmp    c00089e9 <VgaText::putchar(char)+0x81>
c00089e0:	6b c0 0a             	imul   eax,eax,0xa
c00089e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e7:	89 fa                	mov    edx,edi
c00089e9:	46                   	inc    esi
c00089ea:	eb d6                	jmp    c00089c2 <VgaText::putchar(char)+0x5a>
c00089ec:	84 d2                	test   dl,dl
c00089ee:	74 2f                	je     c0008a1f <VgaText::putchar(char)+0xb7>
c00089f0:	50                   	push   eax
c00089f1:	53                   	push   ebx
c00089f2:	e8 29 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089f7:	58                   	pop    eax
c00089f8:	5a                   	pop    edx
c00089f9:	eb 24                	jmp    c0008a1f <VgaText::putchar(char)+0xb7>
c00089fb:	83 f8 4a             	cmp    eax,0x4a
c00089fe:	75 1f                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a00:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a04:	75 19                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a06:	83 ec 0c             	sub    esp,0xc
c0008a09:	53                   	push   ebx
c0008a0a:	e8 95 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a0f:	83 c4 0c             	add    esp,0xc
c0008a12:	6a 00                	push   0x0
c0008a14:	6a 00                	push   0x0
c0008a16:	53                   	push   ebx
c0008a17:	e8 26 fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a25:	eb 24                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a27:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a2a:	83 f8 0e             	cmp    eax,0xe
c0008a2d:	7f 1c                	jg     c0008a4b <VgaText::putchar(char)+0xe3>
c0008a2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a32:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a35:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 50 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	5f                   	pop    edi
c0008a4e:	c3                   	ret    
c0008a4f:	90                   	nop

c0008a50 <VgaText::putx(unsigned int)>:
c0008a50:	57                   	push   edi
c0008a51:	b9 11 00 00 00       	mov    ecx,0x11
c0008a56:	56                   	push   esi
c0008a57:	be 4e fd 01 c0       	mov    esi,0xc001fd4e
c0008a5c:	53                   	push   ebx
c0008a5d:	83 ec 20             	sub    esp,0x20
c0008a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a64:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a68:	fc                   	cld    
c0008a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6b:	be 08 00 00 00       	mov    esi,0x8
c0008a70:	50                   	push   eax
c0008a71:	50                   	push   eax
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	c1 e8 1c             	shr    eax,0x1c
c0008a77:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a7c:	c1 e3 04             	shl    ebx,0x4
c0008a7f:	50                   	push   eax
c0008a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a84:	e8 df fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	4e                   	dec    esi
c0008a8d:	75 e1                	jne    c0008a70 <VgaText::putx(unsigned int)+0x20>
c0008a8f:	83 c4 20             	add    esp,0x20
c0008a92:	5b                   	pop    ebx
c0008a93:	5e                   	pop    esi
c0008a94:	5f                   	pop    edi
c0008a95:	c3                   	ret    

c0008a96 <VgaText::puts(char const*)>:
c0008a96:	53                   	push   ebx
c0008a97:	83 ec 08             	sub    esp,0x8
c0008a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa1:	85 c0                	test   eax,eax
c0008aa3:	74 12                	je     c0008ab7 <VgaText::puts(char const*)+0x21>
c0008aa5:	51                   	push   ecx
c0008aa6:	43                   	inc    ebx
c0008aa7:	51                   	push   ecx
c0008aa8:	50                   	push   eax
c0008aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aad:	e8 b6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	eb e7                	jmp    c0008a9e <VgaText::puts(char const*)+0x8>
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	c3                   	ret    

c0008abc <VgaText::write(unsigned long long, void*, int*)>:
c0008abc:	55                   	push   ebp
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	53                   	push   ebx
c0008ac0:	83 ec 0c             	sub    esp,0xc
c0008ac3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008acf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad9:	39 eb                	cmp    ebx,ebp
c0008adb:	74 13                	je     c0008af0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008add:	50                   	push   eax
c0008ade:	43                   	inc    ebx
c0008adf:	50                   	push   eax
c0008ae0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae4:	50                   	push   eax
c0008ae5:	56                   	push   esi
c0008ae6:	e8 7d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	eb e9                	jmp    c0008ad9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afb:	89 38                	mov    DWORD PTR [eax],edi
c0008afd:	83 c4 0c             	add    esp,0xc
c0008b00:	31 c0                	xor    eax,eax
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	5f                   	pop    edi
c0008b05:	5d                   	pop    ebp
c0008b06:	c3                   	ret    
c0008b07:	90                   	nop

c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b08:	55                   	push   ebp
c0008b09:	57                   	push   edi
c0008b0a:	56                   	push   esi
c0008b0b:	53                   	push   ebx
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b18:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b1f:	50                   	push   eax
c0008b20:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b25:	50                   	push   eax
c0008b26:	e8 c3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b2f:	5a                   	pop    edx
c0008b30:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b33:	59                   	pop    ecx
c0008b34:	0f b6 f8             	movzx  edi,al
c0008b37:	0f b7 db             	movzx  ebx,bx
c0008b3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b3e:	01 db                	add    ebx,ebx
c0008b40:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b43:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b46:	85 c0                	test   eax,eax
c0008b48:	0f 84 ef 00 00 00    	je     c0008c3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b4e:	83 f8 0d             	cmp    eax,0xd
c0008b51:	75 0c                	jne    c0008b5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b53:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b5a:	e9 d8 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b5f:	83 f8 0a             	cmp    eax,0xa
c0008b62:	75 44                	jne    c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b64:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b6b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b71:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b74:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b77:	75 0f                	jne    c0008b88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b79:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	55                   	push   ebp
c0008b80:	e8 7b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	83 ec 0c             	sub    esp,0xc
c0008b8b:	55                   	push   ebp
c0008b8c:	e8 79 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b98:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b9b:	0f b7 db             	movzx  ebx,bx
c0008b9e:	01 db                	add    ebx,ebx
c0008ba0:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008ba3:	e9 8f 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba8:	83 f8 08             	cmp    eax,0x8
c0008bab:	75 34                	jne    c0008be1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bad:	51                   	push   ecx
c0008bae:	51                   	push   ecx
c0008baf:	6a 01                	push   0x1
c0008bb1:	55                   	push   ebp
c0008bb2:	e8 bf fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bb7:	5b                   	pop    ebx
c0008bb8:	58                   	pop    eax
c0008bb9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bbc:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bbf:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bc2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bc5:	6a 20                	push   0x20
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 d5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcd:	83 c4 20             	add    esp,0x20
c0008bd0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bd4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bd7:	0f b7 db             	movzx  ebx,bx
c0008bda:	01 db                	add    ebx,ebx
c0008bdc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bdf:	eb 56                	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be1:	52                   	push   edx
c0008be2:	52                   	push   edx
c0008be3:	57                   	push   edi
c0008be4:	50                   	push   eax
c0008be5:	e8 a8 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf0:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bf6:	75 1d                	jne    c0008c15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bfe:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c0c:	50                   	push   eax
c0008c0d:	e8 16 f1 00 00       	call   c0017d28 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c12:	83 c4 20             	add    esp,0x20
c0008c15:	50                   	push   eax
c0008c16:	83 c3 02             	add    ebx,0x2
c0008c19:	50                   	push   eax
c0008c1a:	6a 00                	push   0x0
c0008c1c:	55                   	push   ebp
c0008c1d:	e8 00 fc ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c29:	75 0c                	jne    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c2f:	0f b7 db             	movzx  ebx,bx
c0008c32:	01 db                	add    ebx,ebx
c0008c34:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c37:	46                   	inc    esi
c0008c38:	e9 06 ff ff ff       	jmp    c0008b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	55                   	push   ebp
c0008c41:	e8 c4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c46:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c4d:	83 c4 1c             	add    esp,0x1c
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	5d                   	pop    ebp
c0008c54:	c3                   	ret    
c0008c55:	90                   	nop

c0008c56 <VgaText::VgaText(char const*)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	83 ec 04             	sub    esp,0x4
c0008c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5f:	83 ec 08             	sub    esp,0x8
c0008c62:	6a 00                	push   0x0
c0008c64:	50                   	push   eax
c0008c65:	e8 4c 05 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	ba 74 fd 01 c0       	mov    edx,0xc001fd74
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	89 10                	mov    DWORD PTR [eax],edx
c0008c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c87:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	6a 01                	push   0x1
c0008cda:	e8 26 09 00 00       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0008cdf:	83 c4 10             	add    esp,0x10
c0008ce2:	89 c2                	mov    edx,eax
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ceb:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf8:	89 c6                	mov    esi,eax
c0008cfa:	e8 d7 f0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0008cff:	68 05 0c 00 00       	push   0xc05
c0008d04:	56                   	push   esi
c0008d05:	50                   	push   eax
c0008d06:	53                   	push   ebx
c0008d07:	e8 d8 0f 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d16:	83 ec 04             	sub    esp,0x4
c0008d19:	68 a0 0f 00 00       	push   0xfa0
c0008d1e:	6a 00                	push   0x0
c0008d20:	50                   	push   eax
c0008d21:	e8 ca 77 ff ff       	call   c00004f0 <memset>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	83 ec 04             	sub    esp,0x4
c0008d2c:	6a 00                	push   0x0
c0008d2e:	6a 07                	push   0x7
c0008d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d34:	e8 7b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d39:	83 c4 10             	add    esp,0x10
c0008d3c:	83 ec 04             	sub    esp,0x4
c0008d3f:	6a 00                	push   0x0
c0008d41:	6a 00                	push   0x0
c0008d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d47:	e8 f6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	83 ec 0c             	sub    esp,0xc
c0008d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d56:	e8 49 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d62:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	05 82 00 00 00       	add    eax,0x82
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	68 80 00 00 00       	push   0x80
c0008d77:	6a 00                	push   0x0
c0008d79:	50                   	push   eax
c0008d7a:	e8 71 77 ff ff       	call   c00004f0 <memset>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d86:	05 02 01 00 00       	add    eax,0x102
c0008d8b:	83 ec 04             	sub    esp,0x4
c0008d8e:	68 80 00 00 00       	push   0x80
c0008d93:	6a 00                	push   0x0
c0008d95:	50                   	push   eax
c0008d96:	e8 55 77 ff ff       	call   c00004f0 <memset>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	90                   	nop
c0008d9f:	83 c4 04             	add    esp,0x4
c0008da2:	5b                   	pop    ebx
c0008da3:	5e                   	pop    esi
c0008da4:	c3                   	ret    
c0008da5:	90                   	nop

c0008da6 <VgaText::receiveKey(unsigned char)>:
c0008da6:	55                   	push   ebp
c0008da7:	57                   	push   edi
c0008da8:	56                   	push   esi
c0008da9:	53                   	push   ebx
c0008daa:	83 ec 2c             	sub    esp,0x2c
c0008dad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db5:	89 fd                	mov    ebp,edi
c0008db7:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dbd:	0f 84 48 01 00 00    	je     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008dc3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc9:	83 fd 08             	cmp    ebp,0x8
c0008dcc:	75 6a                	jne    c0008e38 <VgaText::receiveKey(unsigned char)+0x92>
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	56                   	push   esi
c0008dd2:	e8 a9 77 ff ff       	call   c0000580 <strlen>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	85 c0                	test   eax,eax
c0008ddc:	0f 84 ef 00 00 00    	je     c0008ed1 <VgaText::receiveKey(unsigned char)+0x12b>
c0008de2:	50                   	push   eax
c0008de3:	50                   	push   eax
c0008de4:	6a 08                	push   0x8
c0008de6:	53                   	push   ebx
c0008de7:	e8 7c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dec:	89 34 24             	mov    DWORD PTR [esp],esi
c0008def:	e8 8c 77 ff ff       	call   c0000580 <strlen>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008dff:	83 fa 1f             	cmp    edx,0x1f
c0008e02:	89 d0                	mov    eax,edx
c0008e04:	7f 1c                	jg     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e06:	83 e8 08             	sub    eax,0x8
c0008e09:	3c 02                	cmp    al,0x2
c0008e0b:	76 15                	jbe    c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0d:	83 fa 0d             	cmp    edx,0xd
c0008e10:	74 10                	je     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e12:	57                   	push   edi
c0008e13:	57                   	push   edi
c0008e14:	68 5f fd 01 c0       	push   0xc001fd5f
c0008e19:	53                   	push   ebx
c0008e1a:	e8 77 fc ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	56                   	push   esi
c0008e26:	e8 55 77 ff ff       	call   c0000580 <strlen>
c0008e2b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e33:	e9 96 00 00 00       	jmp    c0008ece <VgaText::receiveKey(unsigned char)+0x128>
c0008e38:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	50                   	push   eax
c0008e42:	e8 39 77 ff ff       	call   c0000580 <strlen>
c0008e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e4e:	e8 2d 77 ff ff       	call   c0000580 <strlen>
c0008e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e57:	83 c4 10             	add    esp,0x10
c0008e5a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e5e:	3d 80 00 00 00       	cmp    eax,0x80
c0008e63:	0f 87 a2 00 00 00    	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008e69:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e6c:	3c 1e                	cmp    al,0x1e
c0008e6e:	77 35                	ja     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e70:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e73:	3c 01                	cmp    al,0x1
c0008e75:	76 2e                	jbe    c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e77:	83 fd 0d             	cmp    ebp,0xd
c0008e7a:	74 29                	je     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e82:	68 65 fd 01 c0       	push   0xc001fd65
c0008e87:	53                   	push   ebx
c0008e88:	e8 7b fc ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e8d:	8d 47 40             	lea    eax,[edi+0x40]
c0008e90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e93:	0f b6 c0             	movzx  eax,al
c0008e96:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e99:	50                   	push   eax
c0008e9a:	53                   	push   ebx
c0008e9b:	e8 f8 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea0:	83 c4 20             	add    esp,0x20
c0008ea3:	eb 11                	jmp    c0008eb6 <VgaText::receiveKey(unsigned char)+0x110>
c0008ea5:	51                   	push   ecx
c0008ea6:	89 f8                	mov    eax,edi
c0008ea8:	51                   	push   ecx
c0008ea9:	0f be c0             	movsx  eax,al
c0008eac:	50                   	push   eax
c0008ead:	53                   	push   ebx
c0008eae:	e8 b5 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ebb:	89 f8                	mov    eax,edi
c0008ebd:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec1:	52                   	push   edx
c0008ec2:	52                   	push   edx
c0008ec3:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ec7:	50                   	push   eax
c0008ec8:	56                   	push   esi
c0008ec9:	e8 a2 79 ff ff       	call   c0000870 <strcat>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ed8:	75 0f                	jne    c0008ee9 <VgaText::receiveKey(unsigned char)+0x143>
c0008eda:	83 fd 1c             	cmp    ebp,0x1c
c0008edd:	77 2c                	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008edf:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ee4:	0f a3 e8             	bt     eax,ebp
c0008ee7:	73 22                	jae    c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008ee9:	50                   	push   eax
c0008eea:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef0:	50                   	push   eax
c0008ef1:	56                   	push   esi
c0008ef2:	53                   	push   ebx
c0008ef3:	e8 78 79 ff ff       	call   c0000870 <strcat>
c0008ef8:	83 c4 0c             	add    esp,0xc
c0008efb:	68 80 00 00 00       	push   0x80
c0008f00:	6a 00                	push   0x0
c0008f02:	56                   	push   esi
c0008f03:	e8 e8 75 ff ff       	call   c00004f0 <memset>
c0008f08:	83 c4 10             	add    esp,0x10
c0008f0b:	83 c4 2c             	add    esp,0x2c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	90                   	nop

c0008f14 <VgaText::doUpdate()>:
c0008f14:	c3                   	ret    

c0008f15 <newTerminal(char*)>:
c0008f15:	83 ec 28             	sub    esp,0x28
c0008f18:	68 84 01 00 00       	push   0x184
c0008f1d:	e8 a9 eb ff ff       	call   c0007acb <malloc>
c0008f22:	5a                   	pop    edx
c0008f23:	59                   	pop    ecx
c0008f24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f28:	50                   	push   eax
c0008f29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f2d:	e8 24 fd ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0008f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f36:	83 c4 2c             	add    esp,0x2c
c0008f39:	c3                   	ret    
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::TSS()>:
c0008f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f47:	90                   	nop
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::setESP(unsigned long)>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f5b:	90                   	nop
c0008f5c:	5d                   	pop    ebp
c0008f5d:	c3                   	ret    
c0008f5e:	66 90                	xchg   ax,ax

c0008f60 <TSS::flush()>:
c0008f60:	55                   	push   ebp
c0008f61:	89 e5                	mov    ebp,esp
c0008f63:	83 ec 10             	sub    esp,0x10
c0008f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f6b:	83 c8 03             	or     eax,0x3
c0008f6e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f72:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f76:	66 89 d0             	mov    ax,dx
c0008f79:	0f 00 d8             	ltr    ax
c0008f7c:	90                   	nop
c0008f7d:	c9                   	leave  
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <TSS::setup(unsigned long, unsigned long)>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 18             	sub    esp,0x18
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	6a 68                	push   0x68
c0008f8b:	e8 3b eb ff ff       	call   c0007acb <malloc>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	89 c2                	mov    edx,eax
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa1:	83 ec 04             	sub    esp,0x4
c0008fa4:	6a 68                	push   0x68
c0008fa6:	6a 00                	push   0x0
c0008fa8:	50                   	push   eax
c0008fa9:	e8 42 75 ff ff       	call   c00004f0 <memset>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009026:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009032:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009048:	0f 20 da             	mov    edx,cr3
c000904b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009051:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	50                   	push   eax
c000905e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009061:	50                   	push   eax
c0009062:	e8 d3 e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0009067:	83 c4 10             	add    esp,0x10
c000906a:	83 ec 08             	sub    esp,0x8
c000906d:	6a 68                	push   0x68
c000906f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009072:	50                   	push   eax
c0009073:	e8 de e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0009078:	83 c4 10             	add    esp,0x10
c000907b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009082:	83 e0 0f             	and    eax,0xf
c0009085:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009088:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908b:	83 c8 40             	or     eax,0x40
c000908e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009091:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009096:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000909c:	05 78 01 00 00       	add    eax,0x178
c00090a1:	83 ec 04             	sub    esp,0x4
c00090a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 da e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	89 c2                	mov    edx,eax
c00090b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b8:	89 10                	mov    DWORD PTR [eax],edx
c00090ba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c5:	05 78 01 00 00       	add    eax,0x178
c00090ca:	83 ec 0c             	sub    esp,0xc
c00090cd:	50                   	push   eax
c00090ce:	e8 e1 e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090db:	c9                   	leave  
c00090dc:	c3                   	ret    
c00090dd:	90                   	nop

c00090de <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ee:	75 08                	jne    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f6:	eb 38                	jmp    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090fd:	75 17                	jne    c0009116 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009104:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009107:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000910d:	8b 10                	mov    edx,DWORD PTR [eax]
c000910f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009113:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009116:	89 c1                	mov    ecx,eax
c0009118:	83 e1 fd             	and    ecx,0xfffffffd
c000911b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009121:	74 cd                	je     c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009123:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009128:	83 e0 ef             	and    eax,0xffffffef
c000912b:	83 f8 08             	cmp    eax,0x8
c000912e:	76 c0                	jbe    c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009130:	31 c0                	xor    eax,eax
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::isAtty()>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000913b:	31 c0                	xor    eax,eax
c000913d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009143:	74 09                	je     c000914e <ReservedFilename::isAtty()+0x1a>
c0009145:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000914b:	0f 94 c0             	sete   al
c000914e:	c3                   	ret    
c000914f:	90                   	nop

c0009150 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000915f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009164:	75 08                	jne    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009166:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000916c:	eb 3d                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009173:	75 17                	jne    c000918c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000917a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000917d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009183:	8b 10                	mov    edx,DWORD PTR [eax]
c0009185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009189:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000918c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009191:	75 04                	jne    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009193:	89 0a                	mov    DWORD PTR [edx],ecx
c0009195:	eb 14                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009197:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000919c:	74 c8                	je     c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091a3:	83 e0 ef             	and    eax,0xffffffef
c00091a6:	83 f8 08             	cmp    eax,0x8
c00091a9:	76 bb                	jbe    c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ab:	31 c0                	xor    eax,eax
c00091ad:	c3                   	ret    

c00091ae <UnixFile::getFileDescriptor()>:
c00091ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::UnixFile(int)>:
c00091b6:	53                   	push   ebx
c00091b7:	83 ec 28             	sub    esp,0x28
c00091ba:	ba 3c fe 01 c0       	mov    edx,0xc001fe3c
c00091bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c3:	89 10                	mov    DWORD PTR [eax],edx
c00091c5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091cd:	0f 8f 90 01 00 00    	jg     c0009363 <UnixFile::UnixFile(int)+0x1ad>
c00091d3:	a1 80 1f 02 c0       	mov    eax,ds:0xc0021f80
c00091d8:	8d 50 01             	lea    edx,[eax+0x1]
c00091db:	89 15 80 1f 02 c0    	mov    DWORD PTR ds:0xc0021f80,edx
c00091e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091ef:	68 98 4f 02 c0       	push   0xc0024f98
c00091f4:	e8 1f 57 01 00       	call   c001e918 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009201:	83 f0 01             	xor    eax,0x1
c0009204:	0f b6 c0             	movzx  eax,al
c0009207:	85 c0                	test   eax,eax
c0009209:	0f 84 55 01 00 00    	je     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c000920f:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009216:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921e:	83 ec 0c             	sub    esp,0xc
c0009221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009225:	e8 a1 e8 ff ff       	call   c0007acb <malloc>
c000922a:	83 c4 10             	add    esp,0x10
c000922d:	89 c3                	mov    ebx,eax
c000922f:	83 ec 08             	sub    esp,0x8
c0009232:	68 03 ff ff 0f       	push   0xfffff03
c0009237:	53                   	push   ebx
c0009238:	e8 2d 01 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000923d:	83 c4 10             	add    esp,0x10
c0009240:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009246:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924e:	83 ec 0c             	sub    esp,0xc
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 71 e8 ff ff       	call   c0007acb <malloc>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	89 c3                	mov    ebx,eax
c000925f:	83 ec 08             	sub    esp,0x8
c0009262:	68 01 ff ff 0f       	push   0xfffff01
c0009267:	53                   	push   ebx
c0009268:	e8 fd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009276:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009285:	e8 41 e8 ff ff       	call   c0007acb <malloc>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 c3                	mov    ebx,eax
c000928f:	83 ec 08             	sub    esp,0x8
c0009292:	68 00 ff ff 0f       	push   0xfffff00
c0009297:	53                   	push   ebx
c0009298:	e8 cd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092a6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ae:	83 ec 0c             	sub    esp,0xc
c00092b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b5:	e8 11 e8 ff ff       	call   c0007acb <malloc>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 c3                	mov    ebx,eax
c00092bf:	83 ec 08             	sub    esp,0x8
c00092c2:	68 02 ff ff 0f       	push   0xfffff02
c00092c7:	53                   	push   ebx
c00092c8:	e8 9d 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092de:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092e3:	7f 7f                	jg     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c00092e5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092ed:	83 ec 0c             	sub    esp,0xc
c00092f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f4:	e8 d2 e7 ff ff       	call   c0007acb <malloc>
c00092f9:	83 c4 10             	add    esp,0x10
c00092fc:	89 c3                	mov    ebx,eax
c00092fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009302:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009307:	83 ec 08             	sub    esp,0x8
c000930a:	50                   	push   eax
c000930b:	53                   	push   ebx
c000930c:	e8 59 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009318:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000931f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009327:	83 ec 0c             	sub    esp,0xc
c000932a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932e:	e8 98 e7 ff ff       	call   c0007acb <malloc>
c0009333:	83 c4 10             	add    esp,0x10
c0009336:	89 c3                	mov    ebx,eax
c0009338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009341:	83 ec 08             	sub    esp,0x8
c0009344:	50                   	push   eax
c0009345:	53                   	push   ebx
c0009346:	e8 1f 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009352:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009359:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935e:	e9 7b ff ff ff       	jmp    c00092de <UnixFile::UnixFile(int)+0x128>
c0009363:	90                   	nop
c0009364:	83 c4 28             	add    esp,0x28
c0009367:	5b                   	pop    ebx
c0009368:	c3                   	ret    
c0009369:	90                   	nop

c000936a <ReservedFilename::ReservedFilename(int)>:
c000936a:	83 ec 0c             	sub    esp,0xc
c000936d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009371:	83 ec 08             	sub    esp,0x8
c0009374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009378:	50                   	push   eax
c0009379:	e8 38 fe ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c0009386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938a:	89 10                	mov    DWORD PTR [eax],edx
c000938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009394:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009397:	90                   	nop
c0009398:	83 c4 0c             	add    esp,0xc
c000939b:	c3                   	ret    

c000939c <UnixFile::~UnixFile()>:
c000939c:	83 ec 1c             	sub    esp,0x1c
c000939f:	ba 3c fe 01 c0       	mov    edx,0xc001fe3c
c00093a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a8:	89 10                	mov    DWORD PTR [eax],edx
c00093aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b6:	7f 76                	jg     c000942e <UnixFile::~UnixFile()+0x92>
c00093b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 1f 56 01 00       	call   c001e9ec <LinkedList<UnixFile>::getFirstElement()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	68 98 4f 02 c0       	push   0xc0024f98
c00093dc:	e8 13 56 01 00       	call   c001e9f4 <LinkedList<UnixFile>::removeFirst()>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093ec:	74 43                	je     c0009431 <UnixFile::~UnixFile()+0x95>
c00093ee:	83 ec 08             	sub    esp,0x8
c00093f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f5:	68 98 4f 02 c0       	push   0xc0024f98
c00093fa:	e8 19 55 01 00       	call   c001e918 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009406:	8d 50 01             	lea    edx,[eax+0x1]
c0009409:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000940d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009412:	0f 94 c0             	sete   al
c0009415:	0f b6 c0             	movzx  eax,al
c0009418:	85 c0                	test   eax,eax
c000941a:	74 a4                	je     c00093c0 <UnixFile::~UnixFile()+0x24>
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	68 14 fe 01 c0       	push   0xc001fe14
c0009424:	e8 40 74 00 00       	call   c0010869 <KePanic(char const*)>
c0009429:	83 c4 10             	add    esp,0x10
c000942c:	eb 92                	jmp    c00093c0 <UnixFile::~UnixFile()+0x24>
c000942e:	90                   	nop
c000942f:	eb 01                	jmp    c0009432 <UnixFile::~UnixFile()+0x96>
c0009431:	90                   	nop
c0009432:	90                   	nop
c0009433:	83 c4 1c             	add    esp,0x1c
c0009436:	c3                   	ret    
c0009437:	90                   	nop

c0009438 <UnixFile::~UnixFile()>:
c0009438:	83 ec 0c             	sub    esp,0xc
c000943b:	83 ec 0c             	sub    esp,0xc
c000943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009442:	e8 55 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c0009447:	83 c4 10             	add    esp,0x10
c000944a:	83 ec 08             	sub    esp,0x8
c000944d:	6a 0c                	push   0xc
c000944f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009453:	e8 48 14 00 00       	call   c000a8a0 <operator delete(void*, unsigned long)>
c0009458:	83 c4 10             	add    esp,0x10
c000945b:	83 c4 0c             	add    esp,0xc
c000945e:	c3                   	ret    
c000945f:	90                   	nop

c0009460 <ReservedFilename::~ReservedFilename()>:
c0009460:	83 ec 0c             	sub    esp,0xc
c0009463:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	89 10                	mov    DWORD PTR [eax],edx
c000946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009472:	83 ec 0c             	sub    esp,0xc
c0009475:	50                   	push   eax
c0009476:	e8 21 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	90                   	nop
c000947f:	83 c4 0c             	add    esp,0xc
c0009482:	c3                   	ret    
c0009483:	90                   	nop

c0009484 <ReservedFilename::~ReservedFilename()>:
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	83 ec 0c             	sub    esp,0xc
c000948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948e:	e8 cd ff ff ff       	call   c0009460 <ReservedFilename::~ReservedFilename()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	6a 0c                	push   0xc
c000949b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949f:	e8 fc 13 00 00       	call   c000a8a0 <operator delete(void*, unsigned long)>
c00094a4:	83 c4 10             	add    esp,0x10
c00094a7:	83 c4 0c             	add    esp,0xc
c00094aa:	c3                   	ret    

c00094ab <getFromFileDescriptor(int)>:
c00094ab:	53                   	push   ebx
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bf:	7f 2c                	jg     c00094ed <getFromFileDescriptor(int)+0x42>
c00094c1:	83 ec 0c             	sub    esp,0xc
c00094c4:	68 98 4f 02 c0       	push   0xc0024f98
c00094c9:	e8 1e 55 01 00       	call   c001e9ec <LinkedList<UnixFile>::getFirstElement()>
c00094ce:	83 c4 10             	add    esp,0x10
c00094d1:	85 c0                	test   eax,eax
c00094d3:	75 04                	jne    c00094d9 <getFromFileDescriptor(int)+0x2e>
c00094d5:	31 c0                	xor    eax,eax
c00094d7:	eb 6e                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c00094d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094dc:	74 69                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094de:	52                   	push   edx
c00094df:	52                   	push   edx
c00094e0:	50                   	push   eax
c00094e1:	68 98 4f 02 c0       	push   0xc0024f98
c00094e6:	e8 ab 55 01 00       	call   c001ea96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094eb:	eb e1                	jmp    c00094ce <getFromFileDescriptor(int)+0x23>
c00094ed:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f3:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094f8:	74 4d                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094fa:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009500:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009505:	74 40                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009507:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950d:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009512:	74 33                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009514:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951a:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000951f:	74 26                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009521:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009527:	83 f8 08             	cmp    eax,0x8
c000952a:	77 09                	ja     c0009535 <getFromFileDescriptor(int)+0x8a>
c000952c:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009533:	eb 12                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c0009535:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953b:	83 fb 08             	cmp    ebx,0x8
c000953e:	77 95                	ja     c00094d5 <getFromFileDescriptor(int)+0x2a>
c0009540:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009547:	83 c4 08             	add    esp,0x8
c000954a:	5b                   	pop    ebx
c000954b:	c3                   	ret    

c000954c <__static_initialization_and_destruction_0(int, int)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009554:	75 34                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009556:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955e:	75 2a                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	68 98 4f 02 c0       	push   0xc0024f98
c0009568:	e8 69 53 01 00       	call   c001e8d6 <LinkedList<UnixFile>::LinkedList()>
c000956d:	83 c4 10             	add    esp,0x10
c0009570:	83 ec 04             	sub    esp,0x4
c0009573:	68 04 1f 02 c0       	push   0xc0021f04
c0009578:	68 98 4f 02 c0       	push   0xc0024f98
c000957d:	68 d4 e8 01 c0       	push   0xc001e8d4
c0009582:	e8 c9 12 00 00       	call   c000a850 <__cxa_atexit>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	90                   	nop
c000958b:	83 c4 0c             	add    esp,0xc
c000958e:	c3                   	ret    

c000958f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958f:	83 ec 0c             	sub    esp,0xc
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	68 ff ff 00 00       	push   0xffff
c000959a:	6a 01                	push   0x1
c000959c:	e8 ab ff ff ff       	call   c000954c <__static_initialization_and_destruction_0(int, int)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	c3                   	ret    

c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a8:	53                   	push   ebx
c00095a9:	8b 15 88 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f88
c00095af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095bd:	89 d8                	mov    eax,ebx
c00095bf:	d1 e8                	shr    eax,1
c00095c1:	01 d0                	add    eax,edx
c00095c3:	80 e3 01             	and    bl,0x1
c00095c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c8:	75 09                	jne    c00095d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ca:	83 e2 f0             	and    edx,0xfffffff0
c00095cd:	09 ca                	or     edx,ecx
c00095cf:	88 10                	mov    BYTE PTR [eax],dl
c00095d1:	5b                   	pop    ebx
c00095d2:	c3                   	ret    
c00095d3:	0f b6 c9             	movzx  ecx,cl
c00095d6:	83 e2 0f             	and    edx,0xf
c00095d9:	c1 e1 04             	shl    ecx,0x4
c00095dc:	09 ca                	or     edx,ecx
c00095de:	88 10                	mov    BYTE PTR [eax],dl
c00095e0:	5b                   	pop    ebx
c00095e1:	c3                   	ret    

c00095e2 <Virt::getPageState(unsigned long)>:
c00095e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e6:	8b 0d 88 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f88
c00095ec:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f2:	89 d0                	mov    eax,edx
c00095f4:	d1 e8                	shr    eax,1
c00095f6:	80 e2 01             	and    dl,0x1
c00095f9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095fc:	74 03                	je     c0009601 <Virt::getPageState(unsigned long)+0x1f>
c00095fe:	c1 e8 04             	shr    eax,0x4
c0009601:	83 e0 0f             	and    eax,0xf
c0009604:	c3                   	ret    

c0009605 <Virt::allocateKernelVirtualPages(int)>:
c0009605:	55                   	push   ebp
c0009606:	57                   	push   edi
c0009607:	56                   	push   esi
c0009608:	31 f6                	xor    esi,esi
c000960a:	53                   	push   ebx
c000960b:	31 db                	xor    ebx,ebx
c000960d:	83 ec 1c             	sub    esp,0x1c
c0009610:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009619:	8b 2d 84 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f84
c000961f:	55                   	push   ebp
c0009620:	e8 bd ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009625:	5a                   	pop    edx
c0009626:	84 c0                	test   al,al
c0009628:	75 3d                	jne    c0009667 <Virt::allocateKernelVirtualPages(int)+0x62>
c000962a:	85 db                	test   ebx,ebx
c000962c:	0f 44 f5             	cmove  esi,ebp
c000962f:	83 c3 01             	add    ebx,0x1
c0009632:	39 fb                	cmp    ebx,edi
c0009634:	74 5e                	je     c0009694 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009636:	83 c5 01             	add    ebp,0x1
c0009639:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000963f:	76 33                	jbe    c0009674 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009641:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009646:	c7 05 84 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021f84,0xc8000
c0009650:	75 2a                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009652:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009657:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000965c:	55                   	push   ebp
c000965d:	e8 80 ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009662:	5a                   	pop    edx
c0009663:	84 c0                	test   al,al
c0009665:	74 c3                	je     c000962a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009667:	83 c5 01             	add    ebp,0x1
c000966a:	31 db                	xor    ebx,ebx
c000966c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009672:	77 cd                	ja     c0009641 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009674:	89 2d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebp
c000967a:	eb a3                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000967c:	83 ec 0c             	sub    esp,0xc
c000967f:	68 6c fe 01 c0       	push   0xc001fe6c
c0009684:	e8 e0 71 00 00       	call   c0010869 <KePanic(char const*)>
c0009689:	8b 2d 84 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f84
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	eb 8b                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009694:	89 35 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,esi
c000969a:	83 fb 01             	cmp    ebx,0x1
c000969d:	74 63                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000969f:	85 ff                	test   edi,edi
c00096a1:	74 41                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a3:	89 f0                	mov    eax,esi
c00096a5:	31 db                	xor    ebx,ebx
c00096a7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096aa:	eb 16                	jmp    c00096c2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096ac:	6a 01                	push   0x1
c00096ae:	83 c3 01             	add    ebx,0x1
c00096b1:	50                   	push   eax
c00096b2:	e8 f1 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b7:	39 fb                	cmp    ebx,edi
c00096b9:	58                   	pop    eax
c00096ba:	5a                   	pop    edx
c00096bb:	74 27                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096bd:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c00096c2:	8d 50 01             	lea    edx,[eax+0x1]
c00096c5:	85 db                	test   ebx,ebx
c00096c7:	89 15 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,edx
c00096cd:	74 22                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096cf:	39 dd                	cmp    ebp,ebx
c00096d1:	75 d9                	jne    c00096ac <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096d3:	6a 03                	push   0x3
c00096d5:	83 c3 01             	add    ebx,0x1
c00096d8:	50                   	push   eax
c00096d9:	e8 ca fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096de:	39 fb                	cmp    ebx,edi
c00096e0:	59                   	pop    ecx
c00096e1:	58                   	pop    eax
c00096e2:	75 d9                	jne    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e4:	83 c4 1c             	add    esp,0x1c
c00096e7:	89 f0                	mov    eax,esi
c00096e9:	5b                   	pop    ebx
c00096ea:	c1 e0 0c             	shl    eax,0xc
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	5d                   	pop    ebp
c00096f0:	c3                   	ret    
c00096f1:	6a 02                	push   0x2
c00096f3:	bb 01 00 00 00       	mov    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 aa fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	58                   	pop    eax
c00096ff:	5a                   	pop    edx
c0009700:	eb bb                	jmp    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009702:	6a 04                	push   0x4
c0009704:	56                   	push   esi
c0009705:	8d 46 01             	lea    eax,[esi+0x1]
c0009708:	a3 84 1f 02 c0       	mov    ds:0xc0021f84,eax
c000970d:	e8 96 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009712:	89 f0                	mov    eax,esi
c0009714:	59                   	pop    ecx
c0009715:	c1 e0 0c             	shl    eax,0xc
c0009718:	5b                   	pop    ebx
c0009719:	83 c4 1c             	add    esp,0x1c
c000971c:	5b                   	pop    ebx
c000971d:	5e                   	pop    esi
c000971e:	5f                   	pop    edi
c000971f:	5d                   	pop    ebp
c0009720:	c3                   	ret    

c0009721 <Virt::freeSwapfilePage(unsigned long)>:
c0009721:	53                   	push   ebx
c0009722:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009728:	b8 01 00 00 00       	mov    eax,0x1
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	d3 e0                	shl    eax,cl
c0009733:	89 cb                	mov    ebx,ecx
c0009735:	c1 eb 05             	shr    ebx,0x5
c0009738:	f7 d0                	not    eax
c000973a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000973d:	21 c1                	and    ecx,eax
c000973f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009742:	5b                   	pop    ebx
c0009743:	c3                   	ret    

c0009744 <Virt::swapIDToSector(unsigned long)>:
c0009744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009748:	8b 15 8c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f8c
c000974e:	8b 0d 94 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f94
c0009754:	0f af c2             	imul   eax,edx
c0009757:	01 c8                	add    eax,ecx
c0009759:	c3                   	ret    

c000975a <Virt::allocateSwapfilePage()>:
c000975a:	55                   	push   ebp
c000975b:	31 d2                	xor    edx,edx
c000975d:	57                   	push   edi
c000975e:	56                   	push   esi
c000975f:	53                   	push   ebx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	8b 1d 90 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f90
c0009769:	8b 0d 8c 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f8c
c000976f:	89 d8                	mov    eax,ebx
c0009771:	f7 f1                	div    ecx
c0009773:	39 cb                	cmp    ebx,ecx
c0009775:	72 2f                	jb     c00097a6 <Virt::allocateSwapfilePage()+0x4c>
c0009777:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000977d:	8b 16                	mov    edx,DWORD PTR [esi]
c000977f:	f6 c2 01             	test   dl,0x1
c0009782:	74 3e                	je     c00097c2 <Virt::allocateSwapfilePage()+0x68>
c0009784:	31 c9                	xor    ecx,ecx
c0009786:	bf 01 00 00 00       	mov    edi,0x1
c000978b:	eb 12                	jmp    c000979f <Virt::allocateSwapfilePage()+0x45>
c000978d:	89 ca                	mov    edx,ecx
c000978f:	89 fd                	mov    ebp,edi
c0009791:	c1 ea 05             	shr    edx,0x5
c0009794:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009799:	d3 e5                	shl    ebp,cl
c000979b:	85 ea                	test   edx,ebp
c000979d:	74 2c                	je     c00097cb <Virt::allocateSwapfilePage()+0x71>
c000979f:	83 c1 01             	add    ecx,0x1
c00097a2:	39 c8                	cmp    eax,ecx
c00097a4:	77 e7                	ja     c000978d <Virt::allocateSwapfilePage()+0x33>
c00097a6:	83 ec 0c             	sub    esp,0xc
c00097a9:	68 04 00 02 c0       	push   0xc0020004
c00097ae:	e8 b6 70 00 00       	call   c0010869 <KePanic(char const*)>
c00097b3:	83 c4 10             	add    esp,0x10
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	83 c4 0c             	add    esp,0xc
c00097bb:	89 c8                	mov    eax,ecx
c00097bd:	5b                   	pop    ebx
c00097be:	5e                   	pop    esi
c00097bf:	5f                   	pop    edi
c00097c0:	5d                   	pop    ebp
c00097c1:	c3                   	ret    
c00097c2:	89 f3                	mov    ebx,esi
c00097c4:	bd 01 00 00 00       	mov    ebp,0x1
c00097c9:	31 c9                	xor    ecx,ecx
c00097cb:	09 ea                	or     edx,ebp
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	89 13                	mov    DWORD PTR [ebx],edx
c00097d1:	83 c4 0c             	add    esp,0xc
c00097d4:	5b                   	pop    ebx
c00097d5:	5e                   	pop    esi
c00097d6:	5f                   	pop    edi
c00097d7:	5d                   	pop    ebp
c00097d8:	c3                   	ret    

c00097d9 <Virt::virtualMemorySetup()>:
c00097d9:	53                   	push   ebx
c00097da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097df:	6a 0f                	push   0xf
c00097e1:	53                   	push   ebx
c00097e2:	83 c3 01             	add    ebx,0x1
c00097e5:	e8 be fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f0:	58                   	pop    eax
c00097f1:	5a                   	pop    edx
c00097f2:	75 eb                	jne    c00097df <Virt::virtualMemorySetup()+0x6>
c00097f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f9:	6a 00                	push   0x0
c00097fb:	53                   	push   ebx
c00097fc:	83 c3 01             	add    ebx,0x1
c00097ff:	e8 a4 fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000980a:	59                   	pop    ecx
c000980b:	58                   	pop    eax
c000980c:	75 eb                	jne    c00097f9 <Virt::virtualMemorySetup()+0x20>
c000980e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009813:	6a 0f                	push   0xf
c0009815:	53                   	push   ebx
c0009816:	83 c3 01             	add    ebx,0x1
c0009819:	e8 8a fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009824:	58                   	pop    eax
c0009825:	5a                   	pop    edx
c0009826:	75 eb                	jne    c0009813 <Virt::virtualMemorySetup()+0x3a>
c0009828:	5b                   	pop    ebx
c0009829:	c3                   	ret    

c000982a <Virt::setupPageSwapping(int)>:
c000982a:	53                   	push   ebx
c000982b:	83 ec 0c             	sub    esp,0xc
c000982e:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009837:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000983d:	8b 10                	mov    edx,DWORD PTR [eax]
c000983f:	53                   	push   ebx
c0009840:	68 1b 00 02 c0       	push   0xc002001b
c0009845:	50                   	push   eax
c0009846:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009849:	c1 e3 0b             	shl    ebx,0xb
c000984c:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0009852:	c1 eb 08             	shr    ebx,0x8
c0009855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009858:	c6 05 98 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021f98,0x43
c000985f:	c7 05 8c 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021f8c,0x8
c0009869:	a3 94 1f 02 c0       	mov    ds:0xc0021f94,eax
c000986e:	e8 58 e2 ff ff       	call   c0007acb <malloc>
c0009873:	31 d2                	xor    edx,edx
c0009875:	83 c4 0c             	add    esp,0xc
c0009878:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000987d:	89 c1                	mov    ecx,eax
c000987f:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009884:	f7 35 8c 1f 02 c0    	div    DWORD PTR ds:0xc0021f8c
c000988a:	c1 e8 05             	shr    eax,0x5
c000988d:	50                   	push   eax
c000988e:	6a 00                	push   0x0
c0009890:	51                   	push   ecx
c0009891:	e8 5a 6c ff ff       	call   c00004f0 <memset>
c0009896:	83 c4 18             	add    esp,0x18
c0009899:	5b                   	pop    ebx
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::VAS(VAS*)>:
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098b5:	83 ec 0c             	sub    esp,0xc
c00098b8:	68 8c fe 01 c0       	push   0xc001fe8c
c00098bd:	e8 a7 6f 00 00       	call   c0010869 <KePanic(char const*)>
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	90                   	nop
c00098c6:	83 c4 0c             	add    esp,0xc
c00098c9:	c3                   	ret    

c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ce:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098d3:	89 c2                	mov    edx,eax
c00098d5:	c1 ea 16             	shr    edx,0x16
c00098d8:	c1 e8 0a             	shr    eax,0xa
c00098db:	83 f9 01             	cmp    ecx,0x1
c00098de:	19 c9                	sbb    ecx,ecx
c00098e0:	25 fc 0f 00 00       	and    eax,0xffc
c00098e5:	c1 e2 0c             	shl    edx,0xc
c00098e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ee:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098f5:	01 d0                	add    eax,edx
c00098f7:	c3                   	ret    

c00098f8 <VAS::getPageTableEntry(unsigned long)>:
c00098f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098fc:	89 ca                	mov    edx,ecx
c00098fe:	c1 ea 16             	shr    edx,0x16
c0009901:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009907:	c1 e9 0a             	shr    ecx,0xa
c000990a:	c1 e0 0c             	shl    eax,0xc
c000990d:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009913:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009916:	c3                   	ret    

c0009917 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009917:	55                   	push   ebp
c0009918:	57                   	push   edi
c0009919:	bf 01 00 00 00       	mov    edi,0x1
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009927:	c1 ee 0c             	shr    esi,0xc
c000992a:	eb 3a                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000992c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009931:	83 ec 08             	sub    esp,0x8
c0009934:	55                   	push   ebp
c0009935:	50                   	push   eax
c0009936:	e8 bd ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009940:	f6 c4 04             	test   ah,0x4
c0009943:	75 5a                	jne    c000999f <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009945:	83 fb 04             	cmp    ebx,0x4
c0009948:	74 6b                	je     c00099b5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994a:	83 fb 02             	cmp    ebx,0x2
c000994d:	74 7f                	je     c00099ce <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 a3 00 00 00    	je     c00099fb <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 87 00 00 00    	je     c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 74 fc ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 b3                	jne    c000992c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 32 00 02 c0       	push   0xc0020032
c0009981:	e8 e3 6e 00 00       	call   c0010869 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000998f:	55                   	push   ebp
c0009990:	e8 63 ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 00                	mov    eax,DWORD PTR [eax]
c000999a:	f6 c4 04             	test   ah,0x4
c000999d:	74 c2                	je     c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000999f:	83 ec 0c             	sub    esp,0xc
c00099a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a7:	50                   	push   eax
c00099a8:	e8 c0 e3 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	83 fb 04             	cmp    ebx,0x4
c00099b3:	75 95                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099b5:	83 e7 01             	and    edi,0x1
c00099b8:	75 46                	jne    c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099ba:	c7 44 24 20 b0 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001feb0
c00099c2:	83 c4 0c             	add    esp,0xc
c00099c5:	5b                   	pop    ebx
c00099c6:	5e                   	pop    esi
c00099c7:	5f                   	pop    edi
c00099c8:	5d                   	pop    ebp
c00099c9:	e9 9b 6e 00 00       	jmp    c0010869 <KePanic(char const*)>
c00099ce:	83 e7 01             	and    edi,0x1
c00099d1:	75 15                	jne    c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	68 4e 00 02 c0       	push   0xc002004e
c00099db:	e8 89 6e 00 00       	call   c0010869 <KePanic(char const*)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	e9 79 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e8:	83 ec 08             	sub    esp,0x8
c00099eb:	6a 00                	push   0x0
c00099ed:	56                   	push   esi
c00099ee:	e8 b5 fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	e9 66 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099fb:	83 e7 01             	and    edi,0x1
c00099fe:	75 16                	jne    c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a00:	83 ec 08             	sub    esp,0x8
c0009a03:	6a 00                	push   0x0
c0009a05:	56                   	push   esi
c0009a06:	e8 9d fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0b:	83 c4 10             	add    esp,0x10
c0009a0e:	83 c4 0c             	add    esp,0xc
c0009a11:	5b                   	pop    ebx
c0009a12:	5e                   	pop    esi
c0009a13:	5f                   	pop    edi
c0009a14:	5d                   	pop    ebp
c0009a15:	c3                   	ret    
c0009a16:	c7 44 24 20 6a 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc002006a
c0009a1e:	83 c4 0c             	add    esp,0xc
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	5f                   	pop    edi
c0009a24:	5d                   	pop    ebp
c0009a25:	e9 3f 6e 00 00       	jmp    c0010869 <KePanic(char const*)>

c0009a2a <VAS::freeAllocatedPages(unsigned long)>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a32:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a36:	74 09                	je     c0009a41 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a3c:	e9 d6 fe ff ff       	jmp    c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a41:	c7 44 24 04 d4 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fed4
c0009a49:	e9 50 0f 00 00       	jmp    c000a99e <Dbg::kprintf(char const*, ...)>

c0009a4e <VAS::virtualToPhysical(unsigned long)>:
c0009a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a52:	50                   	push   eax
c0009a53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a57:	52                   	push   edx
c0009a58:	e8 9b fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a5d:	59                   	pop    ecx
c0009a5e:	5a                   	pop    edx
c0009a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a66:	c3                   	ret    
c0009a67:	90                   	nop

c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a68:	55                   	push   ebp
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a74:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a7c:	89 c3                	mov    ebx,eax
c0009a7e:	c1 e3 0c             	shl    ebx,0xc
c0009a81:	01 f3                	add    ebx,esi
c0009a83:	85 c0                	test   eax,eax
c0009a85:	7e 1f                	jle    c0009aa6 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a87:	56                   	push   esi
c0009a88:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a8e:	55                   	push   ebp
c0009a8f:	e8 64 fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a94:	5a                   	pop    edx
c0009a95:	59                   	pop    ecx
c0009a96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a9c:	21 f9                	and    ecx,edi
c0009a9e:	09 d1                	or     ecx,edx
c0009aa0:	39 f3                	cmp    ebx,esi
c0009aa2:	89 08                	mov    DWORD PTR [eax],ecx
c0009aa4:	75 e1                	jne    c0009a87 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009aa6:	5b                   	pop    ebx
c0009aa7:	5e                   	pop    esi
c0009aa8:	5f                   	pop    edi
c0009aa9:	5d                   	pop    ebp
c0009aaa:	c3                   	ret    
c0009aab:	90                   	nop

c0009aac <VAS::VAS()>:
c0009aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ae5:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009aea:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aef:	29 c2                	sub    edx,eax
c0009af1:	89 d0                	mov    eax,edx
c0009af3:	05 ff 0f 00 00       	add    eax,0xfff
c0009af8:	c1 e8 0c             	shr    eax,0xc
c0009afb:	89 c2                	mov    edx,eax
c0009afd:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b02:	6a 04                	push   0x4
c0009b04:	6a ff                	push   0xffffffff
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0c:	e8 57 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b11:	83 c4 14             	add    esp,0x14
c0009b14:	90                   	nop
c0009b15:	c3                   	ret    

c0009b16 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b21:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b28:	75 01                	jne    c0009b2b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b2a:	c3                   	ret    
c0009b2b:	68 80 00 00 00       	push   0x80
c0009b30:	6a ff                	push   0xffffffff
c0009b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b36:	50                   	push   eax
c0009b37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b3b:	52                   	push   edx
c0009b3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b40:	51                   	push   ecx
c0009b41:	e8 22 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b46:	83 c4 14             	add    esp,0x14
c0009b49:	c3                   	ret    

c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b55:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b5d:	83 f8 01             	cmp    eax,0x1
c0009b60:	19 c0                	sbb    eax,eax
c0009b62:	83 ca 03             	or     edx,0x3
c0009b65:	83 e0 fc             	and    eax,0xfffffffc
c0009b68:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b6f:	0f 20 d8             	mov    eax,cr3
c0009b72:	0f 22 d8             	mov    cr3,eax
c0009b75:	c3                   	ret    

c0009b76 <VAS::~VAS()>:
c0009b76:	83 ec 2c             	sub    esp,0x2c
c0009b79:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b81:	fa                   	cli    
c0009b82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b87:	83 c0 01             	add    eax,0x1
c0009b8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ba3:	6a 01                	push   0x1
c0009ba5:	50                   	push   eax
c0009ba6:	e8 9f ff ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bab:	83 c4 0c             	add    esp,0xc
c0009bae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bbe:	0f 8f d8 00 00 00    	jg     c0009c9c <VAS::~VAS()+0x126>
c0009bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bcf:	c1 e2 02             	shl    edx,0x2
c0009bd2:	01 d0                	add    eax,edx
c0009bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bde:	83 e0 01             	and    eax,0x1
c0009be1:	0f 84 ab 00 00 00    	je     c0009c92 <VAS::~VAS()+0x11c>
c0009be7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009bf7:	7f 74                	jg     c0009c6d <VAS::~VAS()+0xf7>
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	c1 e0 0a             	shl    eax,0xa
c0009c00:	89 c2                	mov    edx,eax
c0009c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c06:	01 d0                	add    eax,edx
c0009c08:	c1 e0 0c             	shl    eax,0xc
c0009c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c23:	6a 01                	push   0x1
c0009c25:	50                   	push   eax
c0009c26:	e8 9f fc ff ff       	call   c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c2b:	83 c4 0c             	add    esp,0xc
c0009c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c40:	25 01 04 00 00       	and    eax,0x401
c0009c45:	3d 01 04 00 00       	cmp    eax,0x401
c0009c4a:	75 1a                	jne    c0009c66 <VAS::~VAS()+0xf0>
c0009c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c55:	83 ec 0c             	sub    esp,0xc
c0009c58:	50                   	push   eax
c0009c59:	e8 0f e1 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c5e:	83 c4 10             	add    esp,0x10
c0009c61:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c66:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c6b:	eb 82                	jmp    c0009bef <VAS::~VAS()+0x79>
c0009c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c71:	25 00 04 00 00       	and    eax,0x400
c0009c76:	74 1a                	je     c0009c92 <VAS::~VAS()+0x11c>
c0009c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c81:	83 ec 0c             	sub    esp,0xc
c0009c84:	50                   	push   eax
c0009c85:	e8 e3 e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c92:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c97:	e9 1a ff ff ff       	jmp    c0009bb6 <VAS::~VAS()+0x40>
c0009c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ca3:	83 ec 0c             	sub    esp,0xc
c0009ca6:	50                   	push   eax
c0009ca7:	e8 6b fc ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 ae e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ccc:	83 e8 01             	sub    eax,0x1
c0009ccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd9:	85 c0                	test   eax,eax
c0009cdb:	75 01                	jne    c0009cde <VAS::~VAS()+0x168>
c0009cdd:	fb                   	sti    
c0009cde:	90                   	nop
c0009cdf:	83 c4 2c             	add    esp,0x2c
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009ce4:	55                   	push   ebp
c0009ce5:	57                   	push   edi
c0009ce6:	56                   	push   esi
c0009ce7:	53                   	push   ebx
c0009ce8:	83 ec 1c             	sub    esp,0x1c
c0009ceb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009cf7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cfd:	77 0b                	ja     c0009d0a <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009cff:	0f 20 d8             	mov    eax,cr3
c0009d02:	0f 20 d8             	mov    eax,cr3
c0009d05:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d08:	75 43                	jne    c0009d4d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009d0a:	89 d8                	mov    eax,ebx
c0009d0c:	09 f8                	or     eax,edi
c0009d0e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d13:	75 53                	jne    c0009d68 <VAS::mapPage(unsigned long, unsigned long, int)+0x84>
c0009d15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d18:	89 de                	mov    esi,ebx
c0009d1a:	c1 ee 16             	shr    esi,0x16
c0009d1d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d24:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d28:	74 50                	je     c0009d7a <VAS::mapPage(unsigned long, unsigned long, int)+0x96>
c0009d2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d2e:	c1 eb 0a             	shr    ebx,0xa
c0009d31:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d37:	c1 e6 0c             	shl    esi,0xc
c0009d3a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d40:	09 c7                	or     edi,eax
c0009d42:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d45:	83 c4 1c             	add    esp,0x1c
c0009d48:	5b                   	pop    ebx
c0009d49:	5e                   	pop    esi
c0009d4a:	5f                   	pop    edi
c0009d4b:	5d                   	pop    ebp
c0009d4c:	c3                   	ret    
c0009d4d:	83 ec 0c             	sub    esp,0xc
c0009d50:	68 f8 fe 01 c0       	push   0xc001fef8
c0009d55:	e8 44 0c 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0009d5a:	89 d8                	mov    eax,ebx
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	09 f8                	or     eax,edi
c0009d61:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d66:	74 ad                	je     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	68 60 ff 01 c0       	push   0xc001ff60
c0009d70:	e8 f4 6a 00 00       	call   c0010869 <KePanic(char const*)>
c0009d75:	83 c4 10             	add    esp,0x10
c0009d78:	eb 9b                	jmp    c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7e:	e8 53 e0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009d83:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d94:	6a 01                	push   0x1
c0009d96:	e8 6a f8 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009da2:	6a 01                	push   0x1
c0009da4:	50                   	push   eax
c0009da5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009da9:	52                   	push   edx
c0009daa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dae:	51                   	push   ecx
c0009daf:	e8 4a 02 00 00       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	68 00 10 00 00       	push   0x1000
c0009dbc:	6a 00                	push   0x0
c0009dbe:	50                   	push   eax
c0009dbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc3:	e8 28 67 ff ff       	call   c00004f0 <memset>
c0009dc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dcc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcf:	e8 43 fb ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ddc:	83 c4 10             	add    esp,0x10
c0009ddf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009de2:	0d 07 04 00 00       	or     eax,0x407
c0009de7:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dea:	e9 3b ff ff ff       	jmp    c0009d2a <VAS::mapPage(unsigned long, unsigned long, int)+0x46>
c0009def:	90                   	nop

c0009df0 <VAS::allocatePages(int, int)>:
c0009df0:	55                   	push   ebp
c0009df1:	57                   	push   edi
c0009df2:	56                   	push   esi
c0009df3:	53                   	push   ebx
c0009df4:	83 ec 1c             	sub    esp,0x1c
c0009df7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009dfc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e0c:	83 e0 01             	and    eax,0x1
c0009e0f:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e13:	89 c7                	mov    edi,eax
c0009e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e19:	0f 85 d6 00 00 00    	jne    c0009ef5 <VAS::allocatePages(int, int)+0x105>
c0009e1f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e26:	85 c0                	test   eax,eax
c0009e28:	0f 84 ab 00 00 00    	je     c0009ed9 <VAS::allocatePages(int, int)+0xe9>
c0009e2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e32:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e3a:	c1 e6 0c             	shl    esi,0xc
c0009e3d:	01 de                	add    esi,ebx
c0009e3f:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e42:	85 c0                	test   eax,eax
c0009e44:	7e 3a                	jle    c0009e80 <VAS::allocatePages(int, int)+0x90>
c0009e46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e4e:	80 cc 04             	or     ah,0x4
c0009e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e55:	89 f8                	mov    eax,edi
c0009e57:	0f b6 f8             	movzx  edi,al
c0009e5a:	e8 77 df ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009e5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e63:	52                   	push   edx
c0009e64:	53                   	push   ebx
c0009e65:	50                   	push   eax
c0009e66:	55                   	push   ebp
c0009e67:	e8 78 fe ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	85 ff                	test   edi,edi
c0009e71:	74 03                	je     c0009e76 <VAS::allocatePages(int, int)+0x86>
c0009e73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7c:	39 de                	cmp    esi,ebx
c0009e7e:	75 da                	jne    c0009e5a <VAS::allocatePages(int, int)+0x6a>
c0009e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e84:	85 c9                	test   ecx,ecx
c0009e86:	75 12                	jne    c0009e9a <VAS::allocatePages(int, int)+0xaa>
c0009e88:	0f 20 d8             	mov    eax,cr3
c0009e8b:	0f 22 d8             	mov    cr3,eax
c0009e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e92:	83 c4 1c             	add    esp,0x1c
c0009e95:	5b                   	pop    ebx
c0009e96:	5e                   	pop    esi
c0009e97:	5f                   	pop    edi
c0009e98:	5d                   	pop    ebp
c0009e99:	c3                   	ret    
c0009e9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9e:	c1 ee 0a             	shr    esi,0xa
c0009ea1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ea7:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ead:	c1 eb 0a             	shr    ebx,0xa
c0009eb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009eb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ebc:	39 c3                	cmp    ebx,eax
c0009ebe:	77 ce                	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec9:	39 d8                	cmp    eax,ebx
c0009ecb:	73 f3                	jae    c0009ec0 <VAS::allocatePages(int, int)+0xd0>
c0009ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ed1:	83 c4 1c             	add    esp,0x1c
c0009ed4:	5b                   	pop    ebx
c0009ed5:	5e                   	pop    esi
c0009ed6:	5f                   	pop    edi
c0009ed7:	5d                   	pop    ebp
c0009ed8:	c3                   	ret    
c0009ed9:	83 ec 0c             	sub    esp,0xc
c0009edc:	68 84 ff 01 c0       	push   0xc001ff84
c0009ee1:	e8 83 69 00 00       	call   c0010869 <KePanic(char const*)>
c0009ee6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eed:	83 c4 10             	add    esp,0x10
c0009ef0:	e9 39 ff ff ff       	jmp    c0009e2e <VAS::allocatePages(int, int)+0x3e>
c0009ef5:	83 ec 0c             	sub    esp,0xc
c0009ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009efc:	50                   	push   eax
c0009efd:	e8 03 f7 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f0e:	0f 87 a4 00 00 00    	ja     c0009fb8 <VAS::allocatePages(int, int)+0x1c8>
c0009f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f18:	85 c0                	test   eax,eax
c0009f1a:	7e 44                	jle    c0009f60 <VAS::allocatePages(int, int)+0x170>
c0009f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f28:	c1 e0 0c             	shl    eax,0xc
c0009f2b:	01 d8                	add    eax,ebx
c0009f2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f31:	89 f8                	mov    eax,edi
c0009f33:	81 ce 00 04 00 00    	or     esi,0x400
c0009f39:	0f b6 f8             	movzx  edi,al
c0009f3c:	e8 95 de ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009f41:	56                   	push   esi
c0009f42:	53                   	push   ebx
c0009f43:	50                   	push   eax
c0009f44:	55                   	push   ebp
c0009f45:	e8 9a fd ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	85 ff                	test   edi,edi
c0009f4f:	74 03                	je     c0009f54 <VAS::allocatePages(int, int)+0x164>
c0009f51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f54:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f5a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f5e:	75 dc                	jne    c0009f3c <VAS::allocatePages(int, int)+0x14c>
c0009f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f64:	85 c0                	test   eax,eax
c0009f66:	0f 84 1c ff ff ff    	je     c0009e88 <VAS::allocatePages(int, int)+0x98>
c0009f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f74:	c1 e0 0c             	shl    eax,0xc
c0009f77:	01 d0                	add    eax,edx
c0009f79:	89 d3                	mov    ebx,edx
c0009f7b:	c1 eb 0a             	shr    ebx,0xa
c0009f7e:	c1 e8 0a             	shr    eax,0xa
c0009f81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f87:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f92:	2d 00 00 40 00       	sub    eax,0x400000
c0009f97:	39 c3                	cmp    ebx,eax
c0009f99:	0f 87 ef fe ff ff    	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009f9f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fa8:	39 d8                	cmp    eax,ebx
c0009faa:	73 f3                	jae    c0009f9f <VAS::allocatePages(int, int)+0x1af>
c0009fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fb0:	83 c4 1c             	add    esp,0x1c
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	5f                   	pop    edi
c0009fb6:	5d                   	pop    ebp
c0009fb7:	c3                   	ret    
c0009fb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc3:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fca:	0f 84 44 ff ff ff    	je     c0009f14 <VAS::allocatePages(int, int)+0x124>
c0009fd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fd4:	80 cc 01             	or     ah,0x1
c0009fd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fdb:	e9 34 ff ff ff       	jmp    c0009f14 <VAS::allocatePages(int, int)+0x124>

c0009fe0 <VAS::setCPUSpecific(unsigned long)>:
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	6a 05                	push   0x5
c0009fe5:	68 00 00 40 c2       	push   0xc2400000
c0009fea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fee:	50                   	push   eax
c0009fef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ff3:	52                   	push   edx
c0009ff4:	e8 eb fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	c3                   	ret    
c0009ffd:	90                   	nop

c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009ffe:	55                   	push   ebp
c0009fff:	57                   	push   edi
c000a000:	56                   	push   esi
c000a001:	53                   	push   ebx
c000a002:	83 ec 1c             	sub    esp,0x1c
c000a005:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a00a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a00e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a012:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a022:	83 e0 01             	and    eax,0x1
c000a025:	85 c9                	test   ecx,ecx
c000a027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02b:	7e 3e                	jle    c000a06b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6d>
c000a02d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a031:	89 f3                	mov    ebx,esi
c000a033:	0f b6 f8             	movzx  edi,al
c000a036:	c1 e2 0c             	shl    edx,0xc
c000a039:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000a03c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a040:	55                   	push   ebp
c000a041:	53                   	push   ebx
c000a042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a046:	29 f0                	sub    eax,esi
c000a048:	01 d8                	add    eax,ebx
c000a04a:	50                   	push   eax
c000a04b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04f:	52                   	push   edx
c000a050:	e8 8f fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	85 ff                	test   edi,edi
c000a05a:	74 03                	je     c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x61>
c000a05c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a05f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a065:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a069:	75 d5                	jne    c000a040 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a06f:	85 c0                	test   eax,eax
c000a071:	75 10                	jne    c000a083 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x85>
c000a073:	0f 20 d8             	mov    eax,cr3
c000a076:	0f 22 d8             	mov    cr3,eax
c000a079:	83 c4 1c             	add    esp,0x1c
c000a07c:	89 f0                	mov    eax,esi
c000a07e:	5b                   	pop    ebx
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	5d                   	pop    ebp
c000a082:	c3                   	ret    
c000a083:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a087:	89 f3                	mov    ebx,esi
c000a089:	c1 eb 0a             	shr    ebx,0xa
c000a08c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a092:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a098:	c1 e0 0c             	shl    eax,0xc
c000a09b:	01 f0                	add    eax,esi
c000a09d:	c1 e8 0a             	shr    eax,0xa
c000a0a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0a5:	2d 00 00 40 00       	sub    eax,0x400000
c000a0aa:	39 c3                	cmp    ebx,eax
c000a0ac:	77 cb                	ja     c000a079 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7b>
c000a0ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b7:	39 d8                	cmp    eax,ebx
c000a0b9:	73 f3                	jae    c000a0ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb0>
c000a0bb:	83 c4 1c             	add    esp,0x1c
c000a0be:	89 f0                	mov    eax,esi
c000a0c0:	5b                   	pop    ebx
c000a0c1:	5e                   	pop    esi
c000a0c2:	5f                   	pop    edi
c000a0c3:	5d                   	pop    ebp
c000a0c4:	c3                   	ret    
c000a0c5:	90                   	nop

c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c6:	55                   	push   ebp
c000a0c7:	57                   	push   edi
c000a0c8:	56                   	push   esi
c000a0c9:	53                   	push   ebx
c000a0ca:	83 ec 1c             	sub    esp,0x1c
c000a0cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a0d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0e1:	09 d8                	or     eax,ebx
c000a0e3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0e8:	75 4b                	jne    c000a135 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0ed:	89 de                	mov    esi,ebx
c000a0ef:	c1 ee 16             	shr    esi,0x16
c000a0f2:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c000a0f9:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c000a0fd:	74 48                	je     c000a147 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c000a0ff:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a104:	c1 eb 0a             	shr    ebx,0xa
c000a107:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a10b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a10f:	83 ff 01             	cmp    edi,0x1
c000a112:	19 c0                	sbb    eax,eax
c000a114:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a11a:	c1 e6 0c             	shl    esi,0xc
c000a11d:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a122:	01 f3                	add    ebx,esi
c000a124:	09 ca                	or     edx,ecx
c000a126:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a12d:	83 c4 1c             	add    esp,0x1c
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	5d                   	pop    ebp
c000a134:	c3                   	ret    
c000a135:	83 ec 0c             	sub    esp,0xc
c000a138:	68 b0 ff 01 c0       	push   0xc001ffb0
c000a13d:	e8 27 67 00 00       	call   c0010869 <KePanic(char const*)>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	eb a3                	jmp    c000a0ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a147:	e8 8a dc ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a14c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a159:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a15d:	6a 01                	push   0x1
c000a15f:	e8 a1 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a164:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a16b:	6a 01                	push   0x1
c000a16d:	50                   	push   eax
c000a16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a172:	50                   	push   eax
c000a173:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a177:	51                   	push   ecx
c000a178:	e8 81 fe ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17d:	83 c4 1c             	add    esp,0x1c
c000a180:	68 00 10 00 00       	push   0x1000
c000a185:	6a 00                	push   0x0
c000a187:	50                   	push   eax
c000a188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a18c:	e8 5f 63 ff ff       	call   c00004f0 <memset>
c000a191:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a195:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a198:	e8 7a f7 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000a19d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a1a7:	81 ca 07 04 00 00    	or     edx,0x407
c000a1ad:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a1b0:	e9 4a ff ff ff       	jmp    c000a0ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a1b5:	90                   	nop

c000a1b6 <VAS::VAS(bool)>:
c000a1b6:	53                   	push   ebx
c000a1b7:	83 ec 28             	sub    esp,0x28
c000a1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1e3:	e8 ee db ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a1e8:	89 c2                	mov    edx,eax
c000a1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1f7:	83 ec 0c             	sub    esp,0xc
c000a1fa:	6a 01                	push   0x1
c000a1fc:	e8 04 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	89 c2                	mov    edx,eax
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a20d:	83 ec 0c             	sub    esp,0xc
c000a210:	6a 03                	push   0x3
c000a212:	6a 01                	push   0x1
c000a214:	52                   	push   edx
c000a215:	50                   	push   eax
c000a216:	53                   	push   ebx
c000a217:	e8 e2 fd ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a21c:	83 c4 20             	add    esp,0x20
c000a21f:	89 c2                	mov    edx,eax
c000a221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a225:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a228:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a230:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a238:	7f 1d                	jg     c000a257 <VAS::VAS(bool)+0xa1>
c000a23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a23e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a241:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a245:	c1 e2 02             	shl    edx,0x2
c000a248:	01 d0                	add    eax,edx
c000a24a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a250:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a255:	eb d9                	jmp    c000a230 <VAS::VAS(bool)+0x7a>
c000a257:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a25f:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a267:	7f 7e                	jg     c000a2e7 <VAS::VAS(bool)+0x131>
c000a269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a26d:	2d 00 02 00 00       	sub    eax,0x200
c000a272:	c1 e0 0c             	shl    eax,0xc
c000a275:	83 c8 05             	or     eax,0x5
c000a278:	89 c2                	mov    edx,eax
c000a27a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a27f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a285:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a28b:	83 e0 10             	and    eax,0x10
c000a28e:	0f b6 c0             	movzx  eax,al
c000a291:	85 c0                	test   eax,eax
c000a293:	74 07                	je     c000a29c <VAS::VAS(bool)+0xe6>
c000a295:	b8 00 01 00 00       	mov    eax,0x100
c000a29a:	eb 05                	jmp    c000a2a1 <VAS::VAS(bool)+0xeb>
c000a29c:	b8 00 00 00 00       	mov    eax,0x0
c000a2a1:	09 d0                	or     eax,edx
c000a2a3:	89 c1                	mov    ecx,eax
c000a2a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2b0:	c1 e2 02             	shl    edx,0x2
c000a2b3:	01 d0                	add    eax,edx
c000a2b5:	89 ca                	mov    edx,ecx
c000a2b7:	89 10                	mov    DWORD PTR [eax],edx
c000a2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2bd:	2d 40 03 00 00       	sub    eax,0x340
c000a2c2:	83 f8 7f             	cmp    eax,0x7f
c000a2c5:	77 16                	ja     c000a2dd <VAS::VAS(bool)+0x127>
c000a2c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2d2:	c1 e2 02             	shl    edx,0x2
c000a2d5:	01 d0                	add    eax,edx
c000a2d7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2dd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2e2:	e9 78 ff ff ff       	jmp    c000a25f <VAS::VAS(bool)+0xa9>
c000a2e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f2:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f8:	83 e0 10             	and    eax,0x10
c000a2fb:	0f b6 c0             	movzx  eax,al
c000a2fe:	85 c0                	test   eax,eax
c000a300:	74 07                	je     c000a309 <VAS::VAS(bool)+0x153>
c000a302:	b8 03 41 00 00       	mov    eax,0x4103
c000a307:	eb 05                	jmp    c000a30e <VAS::VAS(bool)+0x158>
c000a309:	b8 03 40 00 00       	mov    eax,0x4003
c000a30e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a312:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a315:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a31b:	89 02                	mov    DWORD PTR [edx],eax
c000a31d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a328:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a32e:	83 ec 08             	sub    esp,0x8
c000a331:	50                   	push   eax
c000a332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a336:	e8 a5 fc ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c000a33b:	83 c4 10             	add    esp,0x10
c000a33e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a342:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a345:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a350:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a356:	83 e0 10             	and    eax,0x10
c000a359:	0f b6 c0             	movzx  eax,al
c000a35c:	85 c0                	test   eax,eax
c000a35e:	74 07                	je     c000a367 <VAS::VAS(bool)+0x1b1>
c000a360:	b8 00 01 00 00       	mov    eax,0x100
c000a365:	eb 05                	jmp    c000a36c <VAS::VAS(bool)+0x1b6>
c000a367:	b8 00 00 00 00       	mov    eax,0x0
c000a36c:	09 c2                	or     edx,eax
c000a36e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a372:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a375:	05 fc 0f 00 00       	add    eax,0xffc
c000a37a:	83 ca 03             	or     edx,0x3
c000a37d:	89 10                	mov    DWORD PTR [eax],edx
c000a37f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	50                   	push   eax
c000a38e:	e8 01 1d 00 00       	call   c000c094 <Device::getName()>
c000a393:	83 c4 10             	add    esp,0x10
c000a396:	83 ec 08             	sub    esp,0x8
c000a399:	68 84 00 02 c0       	push   0xc0020084
c000a39e:	50                   	push   eax
c000a39f:	e8 dc 63 ff ff       	call   c0000780 <strcmp>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	0f 94 c0             	sete   al
c000a3ac:	0f b6 c0             	movzx  eax,al
c000a3af:	85 c0                	test   eax,eax
c000a3b1:	0f 84 8b 00 00 00    	je     c000a442 <VAS::VAS(bool)+0x28c>
c000a3b7:	fa                   	cli    
c000a3b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3bd:	83 c0 01             	add    eax,0x1
c000a3c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3c5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d0:	05 7c 09 00 00       	add    eax,0x97c
c000a3d5:	83 ec 0c             	sub    esp,0xc
c000a3d8:	50                   	push   eax
c000a3d9:	e8 e8 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e6:	89 c3                	mov    ebx,eax
c000a3e8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f3:	05 7c 09 00 00       	add    eax,0x97c
c000a3f8:	83 ec 0c             	sub    esp,0xc
c000a3fb:	50                   	push   eax
c000a3fc:	e8 c5 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 ec 08             	sub    esp,0x8
c000a407:	50                   	push   eax
c000a408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a40c:	e8 e7 f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	8b 00                	mov    eax,DWORD PTR [eax]
c000a416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a41b:	6a 11                	push   0x11
c000a41d:	53                   	push   ebx
c000a41e:	50                   	push   eax
c000a41f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a423:	e8 bc f8 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a430:	83 e8 01             	sub    eax,0x1
c000a433:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a438:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a43d:	85 c0                	test   eax,eax
c000a43f:	75 01                	jne    c000a442 <VAS::VAS(bool)+0x28c>
c000a441:	fb                   	sti    
c000a442:	90                   	nop
c000a443:	83 c4 28             	add    esp,0x28
c000a446:	5b                   	pop    ebx
c000a447:	c3                   	ret    

c000a448 <VAS::evict(unsigned long)>:
c000a448:	55                   	push   ebp
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 1c             	sub    esp,0x1c
c000a44f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a45b:	e8 fa f2 ff ff       	call   c000975a <Virt::allocateSwapfilePage()>
c000a460:	89 c7                	mov    edi,eax
c000a462:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c000a467:	85 c0                	test   eax,eax
c000a469:	7e 40                	jle    c000a4ab <VAS::evict(unsigned long)+0x63>
c000a46b:	89 ee                	mov    esi,ebp
c000a46d:	31 db                	xor    ebx,ebx
c000a46f:	83 ec 0c             	sub    esp,0xc
c000a472:	57                   	push   edi
c000a473:	e8 cc f2 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a478:	31 d2                	xor    edx,edx
c000a47a:	89 34 24             	mov    DWORD PTR [esp],esi
c000a47d:	81 c6 00 02 00 00    	add    esi,0x200
c000a483:	6a 01                	push   0x1
c000a485:	52                   	push   edx
c000a486:	01 d8                	add    eax,ebx
c000a488:	83 c3 01             	add    ebx,0x1
c000a48b:	50                   	push   eax
c000a48c:	0f be 05 98 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f98
c000a493:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a49a:	50                   	push   eax
c000a49b:	e8 b6 2d 00 00       	call   c000d256 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4a0:	83 c4 20             	add    esp,0x20
c000a4a3:	39 1d 8c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f8c,ebx
c000a4a9:	7f c4                	jg     c000a46f <VAS::evict(unsigned long)+0x27>
c000a4ab:	c1 e7 0b             	shl    edi,0xb
c000a4ae:	83 ec 08             	sub    esp,0x8
c000a4b1:	55                   	push   ebp
c000a4b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4b6:	50                   	push   eax
c000a4b7:	e8 3c f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4be:	89 d3                	mov    ebx,edx
c000a4c0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a4c6:	09 d7                	or     edi,edx
c000a4c8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a4ce:	89 38                	mov    DWORD PTR [eax],edi
c000a4d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a4d3:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a4d9:	83 c2 01             	add    edx,0x1
c000a4dc:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a4e2:	e8 86 d8 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c000a4e7:	0f 20 d8             	mov    eax,cr3
c000a4ea:	0f 22 d8             	mov    cr3,eax
c000a4ed:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4f3:	51                   	push   ecx
c000a4f4:	55                   	push   ebp
c000a4f5:	53                   	push   ebx
c000a4f6:	68 d4 ff 01 c0       	push   0xc001ffd4
c000a4fb:	e8 9e 04 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a500:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a505:	c7 44 24 50 92 00 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020092
c000a50d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a511:	8d 50 01             	lea    edx,[eax+0x1]
c000a514:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a51a:	83 c4 3c             	add    esp,0x3c
c000a51d:	5b                   	pop    ebx
c000a51e:	5e                   	pop    esi
c000a51f:	5f                   	pop    edi
c000a520:	5d                   	pop    ebp
c000a521:	e9 78 04 00 00       	jmp    c000a99e <Dbg::kprintf(char const*, ...)>

c000a526 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a526:	55                   	push   ebp
c000a527:	57                   	push   edi
c000a528:	56                   	push   esi
c000a529:	53                   	push   ebx
c000a52a:	83 ec 1c             	sub    esp,0x1c
c000a52d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a531:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a537:	77 54                	ja     c000a58d <VAS::tryLoadBackOffDisk(unsigned long)+0x67>
c000a539:	83 ec 08             	sub    esp,0x8
c000a53c:	53                   	push   ebx
c000a53d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a543:	68 b5 00 02 c0       	push   0xc00200b5
c000a548:	e8 51 04 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a54d:	58                   	pop    eax
c000a54e:	5a                   	pop    edx
c000a54f:	53                   	push   ebx
c000a550:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a554:	51                   	push   ecx
c000a555:	e8 9e f3 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a55a:	83 c4 10             	add    esp,0x10
c000a55d:	85 c0                	test   eax,eax
c000a55f:	89 c6                	mov    esi,eax
c000a561:	0f 95 c0             	setne  al
c000a564:	85 db                	test   ebx,ebx
c000a566:	0f 95 c2             	setne  dl
c000a569:	21 d0                	and    eax,edx
c000a56b:	a8 01                	test   al,0x1
c000a56d:	89 c5                	mov    ebp,eax
c000a56f:	75 0a                	jne    c000a57b <VAS::tryLoadBackOffDisk(unsigned long)+0x55>
c000a571:	83 c4 1c             	add    esp,0x1c
c000a574:	89 e8                	mov    eax,ebp
c000a576:	5b                   	pop    ebx
c000a577:	5e                   	pop    esi
c000a578:	5f                   	pop    edi
c000a579:	5d                   	pop    ebp
c000a57a:	c3                   	ret    
c000a57b:	8b 06                	mov    eax,DWORD PTR [esi]
c000a57d:	a8 01                	test   al,0x1
c000a57f:	74 1e                	je     c000a59f <VAS::tryLoadBackOffDisk(unsigned long)+0x79>
c000a581:	83 c4 1c             	add    esp,0x1c
c000a584:	31 ed                	xor    ebp,ebp
c000a586:	5b                   	pop    ebx
c000a587:	89 e8                	mov    eax,ebp
c000a589:	5e                   	pop    esi
c000a58a:	5f                   	pop    edi
c000a58b:	5d                   	pop    ebp
c000a58c:	c3                   	ret    
c000a58d:	83 ec 0c             	sub    esp,0xc
c000a590:	68 a3 00 02 c0       	push   0xc00200a3
c000a595:	e8 cf 62 00 00       	call   c0010869 <KePanic(char const*)>
c000a59a:	83 c4 10             	add    esp,0x10
c000a59d:	eb 9a                	jmp    c000a539 <VAS::tryLoadBackOffDisk(unsigned long)+0x13>
c000a59f:	c1 e8 0b             	shr    eax,0xb
c000a5a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5a6:	e8 2b d8 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a5ab:	8b 16                	mov    edx,DWORD PTR [esi]
c000a5ad:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5b3:	09 c2                	or     edx,eax
c000a5b5:	81 ca 01 08 00 00    	or     edx,0x801
c000a5bb:	89 16                	mov    DWORD PTR [esi],edx
c000a5bd:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c000a5c2:	85 c0                	test   eax,eax
c000a5c4:	7e 44                	jle    c000a60a <VAS::tryLoadBackOffDisk(unsigned long)+0xe4>
c000a5c6:	89 df                	mov    edi,ebx
c000a5c8:	31 f6                	xor    esi,esi
c000a5ca:	83 ec 0c             	sub    esp,0xc
c000a5cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a5d1:	51                   	push   ecx
c000a5d2:	e8 6d f1 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a5d7:	31 d2                	xor    edx,edx
c000a5d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5dc:	81 c7 00 02 00 00    	add    edi,0x200
c000a5e2:	6a 01                	push   0x1
c000a5e4:	52                   	push   edx
c000a5e5:	01 f0                	add    eax,esi
c000a5e7:	83 c6 01             	add    esi,0x1
c000a5ea:	50                   	push   eax
c000a5eb:	0f be 05 98 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f98
c000a5f2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5f9:	50                   	push   eax
c000a5fa:	e8 eb 2b 00 00       	call   c000d1ea <LogicalDisk::read(unsigned long long, int, void*)>
c000a5ff:	83 c4 20             	add    esp,0x20
c000a602:	39 35 8c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f8c,esi
c000a608:	7f c0                	jg     c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)+0xa4>
c000a60a:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a60f:	83 ec 04             	sub    esp,0x4
c000a612:	83 e8 01             	sub    eax,0x1
c000a615:	50                   	push   eax
c000a616:	53                   	push   ebx
c000a617:	68 c8 00 02 c0       	push   0xc00200c8
c000a61c:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a621:	e8 78 03 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a626:	58                   	pop    eax
c000a627:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a62b:	52                   	push   edx
c000a62c:	e8 f0 f0 ff ff       	call   c0009721 <Virt::freeSwapfilePage(unsigned long)>
c000a631:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a636:	83 c4 10             	add    esp,0x10
c000a639:	83 e8 01             	sub    eax,0x1
c000a63c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a641:	85 c0                	test   eax,eax
c000a643:	75 01                	jne    c000a646 <VAS::tryLoadBackOffDisk(unsigned long)+0x120>
c000a645:	fb                   	sti    
c000a646:	0f 20 d8             	mov    eax,cr3
c000a649:	0f 22 d8             	mov    cr3,eax
c000a64c:	e9 20 ff ff ff       	jmp    c000a571 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c000a651:	90                   	nop

c000a652 <VAS::scanForEviction()>:
c000a652:	57                   	push   edi
c000a653:	56                   	push   esi
c000a654:	31 f6                	xor    esi,esi
c000a656:	53                   	push   ebx
c000a657:	83 ec 10             	sub    esp,0x10
c000a65a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a65e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a661:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a667:	75 0e                	jne    c000a677 <VAS::scanForEviction()+0x25>
c000a669:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a66c:	89 da                	mov    edx,ebx
c000a66e:	c1 ea 16             	shr    edx,0x16
c000a671:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a675:	74 57                	je     c000a6ce <VAS::scanForEviction()+0x7c>
c000a677:	53                   	push   ebx
c000a678:	57                   	push   edi
c000a679:	e8 7a f2 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a67e:	5a                   	pop    edx
c000a67f:	59                   	pop    ecx
c000a680:	8b 10                	mov    edx,DWORD PTR [eax]
c000a682:	89 d1                	mov    ecx,edx
c000a684:	c1 e9 0c             	shr    ecx,0xc
c000a687:	74 10                	je     c000a699 <VAS::scanForEviction()+0x47>
c000a689:	89 d1                	mov    ecx,edx
c000a68b:	81 e1 01 08 00 00    	and    ecx,0x801
c000a691:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a697:	74 40                	je     c000a6d9 <VAS::scanForEviction()+0x87>
c000a699:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a69f:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6a5:	76 2d                	jbe    c000a6d4 <VAS::scanForEviction()+0x82>
c000a6a7:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a6ae:	83 c6 01             	add    esi,0x1
c000a6b1:	83 fe 03             	cmp    esi,0x3
c000a6b4:	74 32                	je     c000a6e8 <VAS::scanForEviction()+0x96>
c000a6b6:	31 db                	xor    ebx,ebx
c000a6b8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6be:	75 b7                	jne    c000a677 <VAS::scanForEviction()+0x25>
c000a6c0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a6c3:	89 da                	mov    edx,ebx
c000a6c5:	c1 ea 16             	shr    edx,0x16
c000a6c8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6cc:	75 a9                	jne    c000a677 <VAS::scanForEviction()+0x25>
c000a6ce:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6d4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a6d7:	eb 88                	jmp    c000a661 <VAS::scanForEviction()+0xf>
c000a6d9:	f6 c2 20             	test   dl,0x20
c000a6dc:	74 13                	je     c000a6f1 <VAS::scanForEviction()+0x9f>
c000a6de:	83 e2 df             	and    edx,0xffffffdf
c000a6e1:	89 10                	mov    DWORD PTR [eax],edx
c000a6e3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a6e6:	eb b1                	jmp    c000a699 <VAS::scanForEviction()+0x47>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	31 c0                	xor    eax,eax
c000a6ed:	5b                   	pop    ebx
c000a6ee:	5e                   	pop    esi
c000a6ef:	5f                   	pop    edi
c000a6f0:	c3                   	ret    
c000a6f1:	89 d0                	mov    eax,edx
c000a6f3:	83 ec 08             	sub    esp,0x8
c000a6f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6ff:	53                   	push   ebx
c000a700:	68 dd 00 02 c0       	push   0xc00200dd
c000a705:	e8 94 02 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a70a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a70d:	58                   	pop    eax
c000a70e:	5a                   	pop    edx
c000a70f:	51                   	push   ecx
c000a710:	57                   	push   edi
c000a711:	e8 32 fd ff ff       	call   c000a448 <VAS::evict(unsigned long)>
c000a716:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a719:	5b                   	pop    ebx
c000a71a:	5e                   	pop    esi
c000a71b:	50                   	push   eax
c000a71c:	68 f1 00 02 c0       	push   0xc00200f1
c000a721:	e8 78 02 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a726:	58                   	pop    eax
c000a727:	5a                   	pop    edx
c000a728:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a72c:	50                   	push   eax
c000a72d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a731:	68 04 01 02 c0       	push   0xc0020104
c000a736:	e8 63 02 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a73b:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a73e:	83 c4 10             	add    esp,0x10
c000a741:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a747:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a74a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a74e:	83 c4 10             	add    esp,0x10
c000a751:	5b                   	pop    ebx
c000a752:	5e                   	pop    esi
c000a753:	5f                   	pop    edi
c000a754:	c3                   	ret    

c000a755 <mapVASFirstTime>:
c000a755:	55                   	push   ebp
c000a756:	57                   	push   edi
c000a757:	56                   	push   esi
c000a758:	53                   	push   ebx
c000a759:	83 ec 0c             	sub    esp,0xc
c000a75c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a761:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a764:	83 fa 01             	cmp    edx,0x1
c000a767:	0f 84 cb 00 00 00    	je     c000a838 <mapVASFirstTime+0xe3>
c000a76d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a770:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a775:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a77a:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a77d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a783:	c1 e5 15             	shl    ebp,0x15
c000a786:	29 eb                	sub    ebx,ebp
c000a788:	29 ef                	sub    edi,ebp
c000a78a:	e8 47 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a78f:	83 ec 0c             	sub    esp,0xc
c000a792:	68 03 04 00 00       	push   0x403
c000a797:	6a 01                	push   0x1
c000a799:	53                   	push   ebx
c000a79a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7a0:	50                   	push   eax
c000a7a1:	56                   	push   esi
c000a7a2:	e8 57 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7a7:	83 c4 20             	add    esp,0x20
c000a7aa:	39 fb                	cmp    ebx,edi
c000a7ac:	75 dc                	jne    c000a78a <mapVASFirstTime+0x35>
c000a7ae:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7b3:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7b8:	29 eb                	sub    ebx,ebp
c000a7ba:	29 ef                	sub    edi,ebp
c000a7bc:	e8 15 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a7c1:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a7c5:	83 fa 01             	cmp    edx,0x1
c000a7c8:	19 d2                	sbb    edx,edx
c000a7ca:	83 ec 0c             	sub    esp,0xc
c000a7cd:	83 e2 04             	and    edx,0x4
c000a7d0:	81 c2 03 04 00 00    	add    edx,0x403
c000a7d6:	52                   	push   edx
c000a7d7:	6a 01                	push   0x1
c000a7d9:	53                   	push   ebx
c000a7da:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7e0:	50                   	push   eax
c000a7e1:	56                   	push   esi
c000a7e2:	e8 17 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7e7:	83 c4 20             	add    esp,0x20
c000a7ea:	39 df                	cmp    edi,ebx
c000a7ec:	75 ce                	jne    c000a7bc <mapVASFirstTime+0x67>
c000a7ee:	83 ec 0c             	sub    esp,0xc
c000a7f1:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7f6:	6a 04                	push   0x4
c000a7f8:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7fe:	6a ff                	push   0xffffffff
c000a800:	c1 eb 0c             	shr    ebx,0xc
c000a803:	53                   	push   ebx
c000a804:	68 00 30 02 c0       	push   0xc0023000
c000a809:	56                   	push   esi
c000a80a:	e8 59 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a80f:	83 c4 14             	add    esp,0x14
c000a812:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a817:	6a 04                	push   0x4
c000a819:	6a ff                	push   0xffffffff
c000a81b:	53                   	push   ebx
c000a81c:	68 00 30 02 c0       	push   0xc0023000
c000a821:	50                   	push   eax
c000a822:	e8 41 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a827:	0f 20 d8             	mov    eax,cr3
c000a82a:	0f 22 d8             	mov    cr3,eax
c000a82d:	83 c4 20             	add    esp,0x20
c000a830:	83 c4 0c             	add    esp,0xc
c000a833:	5b                   	pop    ebx
c000a834:	5e                   	pop    esi
c000a835:	5f                   	pop    edi
c000a836:	5d                   	pop    ebp
c000a837:	c3                   	ret    
c000a838:	83 ec 0c             	sub    esp,0xc
c000a83b:	68 11 01 02 c0       	push   0xc0020111
c000a840:	e8 59 01 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	83 c4 0c             	add    esp,0xc
c000a84b:	5b                   	pop    ebx
c000a84c:	5e                   	pop    esi
c000a84d:	5f                   	pop    edi
c000a84e:	5d                   	pop    ebp
c000a84f:	c3                   	ret    

c000a850 <__cxa_atexit>:
c000a850:	31 c0                	xor    eax,eax
c000a852:	c3                   	ret    

c000a853 <__cxa_finalize>:
c000a853:	c3                   	ret    

c000a854 <__stack_chk_fail>:
c000a854:	55                   	push   ebp
c000a855:	89 e5                	mov    ebp,esp
c000a857:	83 ec 10             	sub    esp,0x10
c000a85a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a85d:	68 2a 01 02 c0       	push   0xc002012a
c000a862:	e8 37 01 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a867:	58                   	pop    eax
c000a868:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a86b:	5a                   	pop    edx
c000a86c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a86f:	68 2a 01 02 c0       	push   0xc002012a
c000a874:	e8 25 01 00 00       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000a879:	c7 04 24 32 01 02 c0 	mov    DWORD PTR [esp],0xc0020132
c000a880:	e8 e4 5f 00 00       	call   c0010869 <KePanic(char const*)>
c000a885:	83 c4 10             	add    esp,0x10
c000a888:	c9                   	leave  
c000a889:	c3                   	ret    

c000a88a <__cxa_pure_virtual>:
c000a88a:	83 ec 18             	sub    esp,0x18
c000a88d:	68 4a 01 02 c0       	push   0xc002014a
c000a892:	e8 d2 5f 00 00       	call   c0010869 <KePanic(char const*)>
c000a897:	83 c4 1c             	add    esp,0x1c
c000a89a:	c3                   	ret    

c000a89b <operator new[](unsigned long)>:
c000a89b:	e9 2b d2 ff ff       	jmp    c0007acb <malloc>

c000a8a0 <operator delete(void*, unsigned long)>:
c000a8a0:	e9 46 d2 ff ff       	jmp    c0007aeb <rfree>

c000a8a5 <operator delete[](void*)>:
c000a8a5:	e9 41 d2 ff ff       	jmp    c0007aeb <rfree>

c000a8aa <operator delete[](void*, unsigned long)>:
c000a8aa:	e9 3c d2 ff ff       	jmp    c0007aeb <rfree>

c000a8af <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8af:	55                   	push   ebp
c000a8b0:	57                   	push   edi
c000a8b1:	56                   	push   esi
c000a8b2:	53                   	push   ebx
c000a8b3:	83 ec 20             	sub    esp,0x20
c000a8b6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a8ba:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a8c2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a8c6:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a8ce:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a8d2:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a8da:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a8e2:	89 f7                	mov    edi,esi
c000a8e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a8e9:	89 eb                	mov    ebx,ebp
c000a8eb:	eb 02                	jmp    c000a8ef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a8ed:	89 c7                	mov    edi,eax
c000a8ef:	31 d2                	xor    edx,edx
c000a8f1:	89 f8                	mov    eax,edi
c000a8f3:	f7 f1                	div    ecx
c000a8f5:	83 c3 01             	add    ebx,0x1
c000a8f8:	39 cf                	cmp    edi,ecx
c000a8fa:	73 f1                	jae    c000a8ed <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a8fc:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8ff:	eb 02                	jmp    c000a903 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a901:	89 c6                	mov    esi,eax
c000a903:	31 d2                	xor    edx,edx
c000a905:	89 f0                	mov    eax,esi
c000a907:	f7 f1                	div    ecx
c000a909:	83 eb 01             	sub    ebx,0x1
c000a90c:	39 ce                	cmp    esi,ecx
c000a90e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a912:	88 13                	mov    BYTE PTR [ebx],dl
c000a914:	73 eb                	jae    c000a901 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a916:	83 c4 20             	add    esp,0x20
c000a919:	89 e8                	mov    eax,ebp
c000a91b:	5b                   	pop    ebx
c000a91c:	5e                   	pop    esi
c000a91d:	5f                   	pop    edi
c000a91e:	5d                   	pop    ebp
c000a91f:	c3                   	ret    

c000a920 <Dbg::logc(char)>:
c000a920:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a927:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a92b:	75 12                	jne    c000a93f <Dbg::logc(char)+0x1f>
c000a92d:	ba fd 03 00 00       	mov    edx,0x3fd
c000a932:	ec                   	in     al,dx
c000a933:	a8 20                	test   al,0x20
c000a935:	74 fb                	je     c000a932 <Dbg::logc(char)+0x12>
c000a937:	ba f8 03 00 00       	mov    edx,0x3f8
c000a93c:	88 c8                	mov    al,cl
c000a93e:	ee                   	out    dx,al
c000a93f:	c3                   	ret    

c000a940 <Dbg::logs(char*)>:
c000a940:	53                   	push   ebx
c000a941:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a945:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a948:	85 c0                	test   eax,eax
c000a94a:	74 11                	je     c000a95d <Dbg::logs(char*)+0x1d>
c000a94c:	50                   	push   eax
c000a94d:	83 c3 01             	add    ebx,0x1
c000a950:	e8 cb ff ff ff       	call   c000a920 <Dbg::logc(char)>
c000a955:	58                   	pop    eax
c000a956:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a959:	85 c0                	test   eax,eax
c000a95b:	75 ef                	jne    c000a94c <Dbg::logs(char*)+0xc>
c000a95d:	5b                   	pop    ebx
c000a95e:	c3                   	ret    

c000a95f <Dbg::logWriteInt(unsigned int)>:
c000a95f:	83 ec 10             	sub    esp,0x10
c000a962:	6a 0a                	push   0xa
c000a964:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a968:	50                   	push   eax
c000a969:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96d:	50                   	push   eax
c000a96e:	e8 3c ff ff ff       	call   c000a8af <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a973:	50                   	push   eax
c000a974:	e8 c7 ff ff ff       	call   c000a940 <Dbg::logs(char*)>
c000a979:	83 c4 20             	add    esp,0x20
c000a97c:	c3                   	ret    

c000a97d <Dbg::logWriteIntBase(unsigned int, int)>:
c000a97d:	83 ec 10             	sub    esp,0x10
c000a980:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a984:	50                   	push   eax
c000a985:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a989:	50                   	push   eax
c000a98a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a98e:	52                   	push   edx
c000a98f:	e8 1b ff ff ff       	call   c000a8af <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a994:	50                   	push   eax
c000a995:	e8 a6 ff ff ff       	call   c000a940 <Dbg::logs(char*)>
c000a99a:	83 c4 20             	add    esp,0x20
c000a99d:	c3                   	ret    

c000a99e <Dbg::kprintf(char const*, ...)>:
c000a99e:	55                   	push   ebp
c000a99f:	57                   	push   edi
c000a9a0:	56                   	push   esi
c000a9a1:	53                   	push   ebx
c000a9a2:	83 ec 0c             	sub    esp,0xc
c000a9a5:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9b0:	74 08                	je     c000a9ba <Dbg::kprintf(char const*, ...)+0x1c>
c000a9b2:	83 c4 0c             	add    esp,0xc
c000a9b5:	5b                   	pop    ebx
c000a9b6:	5e                   	pop    esi
c000a9b7:	5f                   	pop    edi
c000a9b8:	5d                   	pop    ebp
c000a9b9:	c3                   	ret    
c000a9ba:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a9be:	31 ff                	xor    edi,edi
c000a9c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9c4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9c7:	85 c0                	test   eax,eax
c000a9c9:	74 e7                	je     c000a9b2 <Dbg::kprintf(char const*, ...)+0x14>
c000a9cb:	8d 77 01             	lea    esi,[edi+0x1]
c000a9ce:	83 f8 25             	cmp    eax,0x25
c000a9d1:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9d4:	75 47                	jne    c000aa1d <Dbg::kprintf(char const*, ...)+0x7f>
c000a9d6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9d9:	83 c7 02             	add    edi,0x2
c000a9dc:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9df:	83 e8 25             	sub    eax,0x25
c000a9e2:	0f b6 c0             	movzx  eax,al
c000a9e5:	83 f8 53             	cmp    eax,0x53
c000a9e8:	0f 87 ce 00 00 00    	ja     c000aabc <Dbg::kprintf(char const*, ...)+0x11e>
c000a9ee:	ff 24 85 60 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfea0]
c000a9f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9f9:	89 c8                	mov    eax,ecx
c000a9fb:	83 c1 04             	add    ecx,0x4
c000a9fe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa02:	8b 28                	mov    ebp,DWORD PTR [eax]
c000aa04:	55                   	push   ebp
c000aa05:	e8 55 ff ff ff       	call   c000a95f <Dbg::logWriteInt(unsigned int)>
c000aa0a:	58                   	pop    eax
c000aa0b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa0e:	85 c0                	test   eax,eax
c000aa10:	74 a0                	je     c000a9b2 <Dbg::kprintf(char const*, ...)+0x14>
c000aa12:	8d 77 01             	lea    esi,[edi+0x1]
c000aa15:	83 f8 25             	cmp    eax,0x25
c000aa18:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa1b:	74 b9                	je     c000a9d6 <Dbg::kprintf(char const*, ...)+0x38>
c000aa1d:	50                   	push   eax
c000aa1e:	89 f7                	mov    edi,esi
c000aa20:	e8 fb fe ff ff       	call   c000a920 <Dbg::logc(char)>
c000aa25:	89 ee                	mov    esi,ebp
c000aa27:	58                   	pop    eax
c000aa28:	eb e1                	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa2e:	89 c8                	mov    eax,ecx
c000aa30:	83 c1 04             	add    ecx,0x4
c000aa33:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa37:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa39:	50                   	push   eax
c000aa3a:	e8 01 ff ff ff       	call   c000a940 <Dbg::logs(char*)>
c000aa3f:	58                   	pop    eax
c000aa40:	eb c9                	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa46:	89 d0                	mov    eax,edx
c000aa48:	83 c2 04             	add    edx,0x4
c000aa4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa4f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa51:	50                   	push   eax
c000aa52:	e8 08 ff ff ff       	call   c000a95f <Dbg::logWriteInt(unsigned int)>
c000aa57:	58                   	pop    eax
c000aa58:	eb b1                	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa5a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa5e:	89 d0                	mov    eax,edx
c000aa60:	83 c2 04             	add    edx,0x4
c000aa63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa67:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa6a:	50                   	push   eax
c000aa6b:	e8 b0 fe ff ff       	call   c000a920 <Dbg::logc(char)>
c000aa70:	58                   	pop    eax
c000aa71:	eb 98                	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa77:	89 c8                	mov    eax,ecx
c000aa79:	83 c1 04             	add    ecx,0x4
c000aa7c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa80:	6a 10                	push   0x10
c000aa82:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa84:	51                   	push   ecx
c000aa85:	e8 f3 fe ff ff       	call   c000a97d <Dbg::logWriteIntBase(unsigned int, int)>
c000aa8a:	5d                   	pop    ebp
c000aa8b:	58                   	pop    eax
c000aa8c:	e9 7a ff ff ff       	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa95:	89 d0                	mov    eax,edx
c000aa97:	83 c2 08             	add    edx,0x8
c000aa9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa9e:	6a 10                	push   0x10
c000aaa0:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa2:	50                   	push   eax
c000aaa3:	e8 d5 fe ff ff       	call   c000a97d <Dbg::logWriteIntBase(unsigned int, int)>
c000aaa8:	58                   	pop    eax
c000aaa9:	5a                   	pop    edx
c000aaaa:	e9 5c ff ff ff       	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>
c000aaaf:	6a 25                	push   0x25
c000aab1:	e8 6a fe ff ff       	call   c000a920 <Dbg::logc(char)>
c000aab6:	5a                   	pop    edx
c000aab7:	e9 4f ff ff ff       	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>
c000aabc:	6a 25                	push   0x25
c000aabe:	e8 5d fe ff ff       	call   c000a920 <Dbg::logc(char)>
c000aac3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aac7:	50                   	push   eax
c000aac8:	e8 53 fe ff ff       	call   c000a920 <Dbg::logc(char)>
c000aacd:	5a                   	pop    edx
c000aace:	59                   	pop    ecx
c000aacf:	e9 37 ff ff ff       	jmp    c000aa0b <Dbg::kprintf(char const*, ...)+0x6d>

c000aad4 <File::read(unsigned long long, void*, int*)>:
c000aad4:	53                   	push   ebx
c000aad5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aad9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aadd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aae4:	83 f8 19             	cmp    eax,0x19
c000aae7:	77 35                	ja     c000ab1e <File::read(unsigned long long, void*, int*)+0x4a>
c000aae9:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aaf0:	85 c0                	test   eax,eax
c000aaf2:	74 2a                	je     c000ab1e <File::read(unsigned long long, void*, int*)+0x4a>
c000aaf4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aafa:	85 c0                	test   eax,eax
c000aafc:	74 20                	je     c000ab1e <File::read(unsigned long long, void*, int*)+0x4a>
c000aafe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab02:	74 21                	je     c000ab25 <File::read(unsigned long long, void*, int*)+0x51>
c000ab04:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab06:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab0a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab18:	5b                   	pop    ebx
c000ab19:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab1c:	ff e0                	jmp    eax
c000ab1e:	b8 0b 00 00 00       	mov    eax,0xb
c000ab23:	eb 05                	jmp    c000ab2a <File::read(unsigned long long, void*, int*)+0x56>
c000ab25:	b8 05 00 00 00       	mov    eax,0x5
c000ab2a:	5b                   	pop    ebx
c000ab2b:	c3                   	ret    

c000ab2c <File::write(unsigned long long, void*, int*)>:
c000ab2c:	53                   	push   ebx
c000ab2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab35:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab3c:	83 f8 19             	cmp    eax,0x19
c000ab3f:	77 35                	ja     c000ab76 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab41:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab48:	85 c0                	test   eax,eax
c000ab4a:	74 2a                	je     c000ab76 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab4c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab52:	85 c0                	test   eax,eax
c000ab54:	74 20                	je     c000ab76 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab5a:	74 21                	je     c000ab7d <File::write(unsigned long long, void*, int*)+0x51>
c000ab5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab70:	5b                   	pop    ebx
c000ab71:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab74:	ff e0                	jmp    eax
c000ab76:	b8 0b 00 00 00       	mov    eax,0xb
c000ab7b:	eb 05                	jmp    c000ab82 <File::write(unsigned long long, void*, int*)+0x56>
c000ab7d:	b8 05 00 00 00       	mov    eax,0x5
c000ab82:	5b                   	pop    ebx
c000ab83:	c3                   	ret    

c000ab84 <Directory::read(unsigned long long, void*, int*)>:
c000ab84:	53                   	push   ebx
c000ab85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab94:	83 f8 19             	cmp    eax,0x19
c000ab97:	77 35                	ja     c000abce <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab99:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aba0:	85 c0                	test   eax,eax
c000aba2:	74 2a                	je     c000abce <Directory::read(unsigned long long, void*, int*)+0x4a>
c000aba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abaa:	85 c0                	test   eax,eax
c000abac:	74 20                	je     c000abce <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abb2:	74 21                	je     c000abd5 <Directory::read(unsigned long long, void*, int*)+0x51>
c000abb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc8:	5b                   	pop    ebx
c000abc9:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000abcc:	ff e0                	jmp    eax
c000abce:	b8 0b 00 00 00       	mov    eax,0xb
c000abd3:	eb 05                	jmp    c000abda <Directory::read(unsigned long long, void*, int*)+0x56>
c000abd5:	b8 05 00 00 00       	mov    eax,0x5
c000abda:	5b                   	pop    ebx
c000abdb:	c3                   	ret    

c000abdc <Directory::write(unsigned long long, void*, int*)>:
c000abdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000abe7:	b8 0b 00 00 00       	mov    eax,0xb
c000abec:	83 fa 19             	cmp    edx,0x19
c000abef:	77 18                	ja     c000ac09 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abf1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abf8:	85 d2                	test   edx,edx
c000abfa:	74 0d                	je     c000ac09 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abfc:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac03:	19 c0                	sbb    eax,eax
c000ac05:	83 e0 0a             	and    eax,0xa
c000ac08:	40                   	inc    eax
c000ac09:	c3                   	ret    

c000ac0a <File::isAtty()>:
c000ac0a:	31 c0                	xor    eax,eax
c000ac0c:	c3                   	ret    
c000ac0d:	90                   	nop

c000ac0e <Directory::isAtty()>:
c000ac0e:	31 c0                	xor    eax,eax
c000ac10:	c3                   	ret    
c000ac11:	90                   	nop

c000ac12 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac12:	b8 0a 00 00 00       	mov    eax,0xa
c000ac17:	c3                   	ret    

c000ac18 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac18:	b8 0a 00 00 00       	mov    eax,0xa
c000ac1d:	c3                   	ret    

c000ac1e <Filesystem::allocateSwapfile(char const*, int)>:
c000ac1e:	31 c0                	xor    eax,eax
c000ac20:	31 d2                	xor    edx,edx
c000ac22:	c3                   	ret    
c000ac23:	90                   	nop

c000ac24 <File::~File()>:
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	ba 20 03 02 c0       	mov    edx,0xc0020320
c000ac2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac30:	89 10                	mov    DWORD PTR [eax],edx
c000ac32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac36:	83 ec 0c             	sub    esp,0xc
c000ac39:	50                   	push   eax
c000ac3a:	e8 5d e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac3f:	83 c4 10             	add    esp,0x10
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <File::~File()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 0c             	sub    esp,0xc
c000ac4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac52:	e8 cd ff ff ff       	call   c000ac24 <File::~File()>
c000ac57:	83 c4 10             	add    esp,0x10
c000ac5a:	83 ec 08             	sub    esp,0x8
c000ac5d:	68 14 01 00 00       	push   0x114
c000ac62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac66:	e8 35 fc ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000ac6b:	83 c4 10             	add    esp,0x10
c000ac6e:	83 c4 0c             	add    esp,0xc
c000ac71:	c3                   	ret    

c000ac72 <Directory::~Directory()>:
c000ac72:	83 ec 0c             	sub    esp,0xc
c000ac75:	ba 3c 03 02 c0       	mov    edx,0xc002033c
c000ac7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac7e:	89 10                	mov    DWORD PTR [eax],edx
c000ac80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac84:	83 ec 0c             	sub    esp,0xc
c000ac87:	50                   	push   eax
c000ac88:	e8 0f e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac8d:	83 c4 10             	add    esp,0x10
c000ac90:	90                   	nop
c000ac91:	83 c4 0c             	add    esp,0xc
c000ac94:	c3                   	ret    
c000ac95:	90                   	nop

c000ac96 <Directory::~Directory()>:
c000ac96:	83 ec 0c             	sub    esp,0xc
c000ac99:	83 ec 0c             	sub    esp,0xc
c000ac9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca0:	e8 cd ff ff ff       	call   c000ac72 <Directory::~Directory()>
c000aca5:	83 c4 10             	add    esp,0x10
c000aca8:	83 ec 08             	sub    esp,0x8
c000acab:	68 14 01 00 00       	push   0x114
c000acb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acb4:	e8 e7 fb ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <Filesystem::Filesystem()>:
c000acc0:	ba b8 02 02 c0       	mov    edx,0xc00202b8
c000acc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc9:	89 10                	mov    DWORD PTR [eax],edx
c000accb:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000acd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000acd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acdc:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ace1:	90                   	nop
c000ace2:	c3                   	ret    
c000ace3:	90                   	nop

c000ace4 <Filesystem::~Filesystem()>:
c000ace4:	ba b8 02 02 c0       	mov    edx,0xc00202b8
c000ace9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aced:	89 10                	mov    DWORD PTR [eax],edx
c000acef:	90                   	nop
c000acf0:	c3                   	ret    
c000acf1:	90                   	nop

c000acf2 <Filesystem::~Filesystem()>:
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acf9:	e8 e6 ff ff ff       	call   c000ace4 <Filesystem::~Filesystem()>
c000acfe:	83 c4 04             	add    esp,0x4
c000ad01:	83 ec 08             	sub    esp,0x8
c000ad04:	6a 08                	push   0x8
c000ad06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad0a:	e8 91 fb ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000ad0f:	83 c4 10             	add    esp,0x10
c000ad12:	83 c4 0c             	add    esp,0xc
c000ad15:	c3                   	ret    

c000ad16 <Fs::getcwd(Process*, char*, int)>:
c000ad16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad1a:	31 c0                	xor    eax,eax
c000ad1c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad20:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad23:	7d 15                	jge    c000ad3a <Fs::getcwd(Process*, char*, int)+0x24>
c000ad25:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad29:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad30:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad33:	84 c9                	test   cl,cl
c000ad35:	74 06                	je     c000ad3d <Fs::getcwd(Process*, char*, int)+0x27>
c000ad37:	40                   	inc    eax
c000ad38:	eb e2                	jmp    c000ad1c <Fs::getcwd(Process*, char*, int)+0x6>
c000ad3a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad3d:	31 c0                	xor    eax,eax
c000ad3f:	c3                   	ret    

c000ad40 <Fs::initVFS()>:
c000ad40:	83 ec 18             	sub    esp,0x18
c000ad43:	6a 08                	push   0x8
c000ad45:	e8 81 cd ff ff       	call   c0007acb <malloc>
c000ad4a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad4d:	e8 a2 dd 00 00       	call   c0018af4 <FAT::FAT()>
c000ad52:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad59:	e8 6d cd ff ff       	call   c0007acb <malloc>
c000ad5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad61:	e8 b6 ec 00 00       	call   c0019a1c <ISO9660::ISO9660()>
c000ad66:	83 c4 1c             	add    esp,0x1c
c000ad69:	c3                   	ret    

c000ad6a <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad6a:	55                   	push   ebp
c000ad6b:	57                   	push   edi
c000ad6c:	56                   	push   esi
c000ad6d:	53                   	push   ebx
c000ad6e:	81 ec 20 04 00 00    	sub    esp,0x420
c000ad74:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ad7b:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ad82:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ad89:	68 00 04 00 00       	push   0x400
c000ad8e:	6a 00                	push   0x0
c000ad90:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ad94:	56                   	push   esi
c000ad95:	e8 56 57 ff ff       	call   c00004f0 <memset>
c000ad9a:	83 c4 10             	add    esp,0x10
c000ad9d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ada1:	75 0b                	jne    c000adae <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ada3:	50                   	push   eax
c000ada4:	50                   	push   eax
c000ada5:	57                   	push   edi
c000ada6:	56                   	push   esi
c000ada7:	e8 a4 58 ff ff       	call   c0000650 <strcpy>
c000adac:	eb 45                	jmp    c000adf3 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000adae:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000adb1:	83 f8 2f             	cmp    eax,0x2f
c000adb4:	74 05                	je     c000adbb <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000adb6:	83 f8 5c             	cmp    eax,0x5c
c000adb9:	75 19                	jne    c000add4 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000adbb:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000adbe:	3c 60                	cmp    al,0x60
c000adc0:	7e 03                	jle    c000adc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000adc2:	83 e8 20             	sub    eax,0x20
c000adc5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000adc9:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000add0:	50                   	push   eax
c000add1:	50                   	push   eax
c000add2:	eb 18                	jmp    c000adec <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000add4:	50                   	push   eax
c000add5:	50                   	push   eax
c000add6:	55                   	push   ebp
c000add7:	56                   	push   esi
c000add8:	e8 73 58 ff ff       	call   c0000650 <strcpy>
c000addd:	5a                   	pop    edx
c000adde:	59                   	pop    ecx
c000addf:	68 33 12 02 c0       	push   0xc0021233
c000ade4:	56                   	push   esi
c000ade5:	e8 86 5a ff ff       	call   c0000870 <strcat>
c000adea:	5d                   	pop    ebp
c000adeb:	58                   	pop    eax
c000adec:	57                   	push   edi
c000aded:	56                   	push   esi
c000adee:	e8 7d 5a ff ff       	call   c0000870 <strcat>
c000adf3:	83 c4 10             	add    esp,0x10
c000adf6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000adfa:	3c 60                	cmp    al,0x60
c000adfc:	7e 03                	jle    c000ae01 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000adfe:	83 e8 20             	sub    eax,0x20
c000ae01:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ae05:	88 03                	mov    BYTE PTR [ebx],al
c000ae07:	b8 03 00 00 00       	mov    eax,0x3
c000ae0c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ae13:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae19:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae1d:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000ae25:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ae29:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000ae2e:	89 fa                	mov    edx,edi
c000ae30:	0f be ea             	movsx  ebp,dl
c000ae33:	85 ed                	test   ebp,ebp
c000ae35:	0f 84 af 00 00 00    	je     c000aeea <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000ae3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae3f:	42                   	inc    edx
c000ae40:	83 fd 2f             	cmp    ebp,0x2f
c000ae43:	74 05                	je     c000ae4a <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000ae45:	83 fd 5c             	cmp    ebp,0x5c
c000ae48:	75 14                	jne    c000ae5e <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae4a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae4f:	89 c5                	mov    ebp,eax
c000ae51:	74 0b                	je     c000ae5e <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae53:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae57:	40                   	inc    eax
c000ae58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae5c:	eb c7                	jmp    c000ae25 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000ae5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae62:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ae67:	89 f9                	mov    ecx,edi
c000ae69:	0f be e9             	movsx  ebp,cl
c000ae6c:	75 63                	jne    c000aed1 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae6e:	83 fd 2e             	cmp    ebp,0x2e
c000ae71:	75 5e                	jne    c000aed1 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae77:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ae7c:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ae81:	74 18                	je     c000ae9b <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ae83:	83 fd 2e             	cmp    ebp,0x2e
c000ae86:	74 57                	je     c000aedf <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae88:	89 ca                	mov    edx,ecx
c000ae8a:	42                   	inc    edx
c000ae8b:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae8f:	83 f9 2f             	cmp    ecx,0x2f
c000ae92:	74 f6                	je     c000ae8a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae94:	83 f9 5c             	cmp    ecx,0x5c
c000ae97:	74 f1                	je     c000ae8a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae99:	eb bd                	jmp    c000ae58 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae9b:	83 fd 2e             	cmp    ebp,0x2e
c000ae9e:	74 3f                	je     c000aedf <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000aea0:	83 f8 03             	cmp    eax,0x3
c000aea3:	74 b3                	je     c000ae58 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aea5:	42                   	inc    edx
c000aea6:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000aeaa:	83 f9 2f             	cmp    ecx,0x2f
c000aead:	74 f6                	je     c000aea5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aeaf:	83 f9 5c             	cmp    ecx,0x5c
c000aeb2:	74 f1                	je     c000aea5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aeb4:	48                   	dec    eax
c000aeb5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aeb9:	75 06                	jne    c000aec1 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000aebb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aebf:	eb f3                	jmp    c000aeb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aec1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aec5:	74 07                	je     c000aece <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000aec7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aecb:	48                   	dec    eax
c000aecc:	eb f3                	jmp    c000aec1 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000aece:	40                   	inc    eax
c000aecf:	eb 87                	jmp    c000ae58 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aed1:	83 fd 2f             	cmp    ebp,0x2f
c000aed4:	74 82                	je     c000ae58 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aed6:	83 fd 5c             	cmp    ebp,0x5c
c000aed9:	0f 84 79 ff ff ff    	je     c000ae58 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aedf:	89 f9                	mov    ecx,edi
c000aee1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000aee4:	40                   	inc    eax
c000aee5:	e9 6e ff ff ff       	jmp    c000ae58 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aeea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aeee:	83 ec 0c             	sub    esp,0xc
c000aef1:	53                   	push   ebx
c000aef2:	e8 89 56 ff ff       	call   c0000580 <strlen>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aeff:	75 26                	jne    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000af01:	83 ec 0c             	sub    esp,0xc
c000af04:	53                   	push   ebx
c000af05:	e8 76 56 ff ff       	call   c0000580 <strlen>
c000af0a:	83 c4 10             	add    esp,0x10
c000af0d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af12:	74 26                	je     c000af3a <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	53                   	push   ebx
c000af18:	e8 63 56 ff ff       	call   c0000580 <strlen>
c000af1d:	83 c4 10             	add    esp,0x10
c000af20:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af25:	eb c7                	jmp    c000aeee <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000af27:	83 ec 0c             	sub    esp,0xc
c000af2a:	53                   	push   ebx
c000af2b:	e8 50 56 ff ff       	call   c0000580 <strlen>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af38:	74 c7                	je     c000af01 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000af3a:	81 c4 1c 04 00 00    	add    esp,0x41c
c000af40:	5b                   	pop    ebx
c000af41:	5e                   	pop    esi
c000af42:	5f                   	pop    edi
c000af43:	5d                   	pop    ebp
c000af44:	c3                   	ret    
c000af45:	90                   	nop

c000af46 <File::File(char const*, Process*)>:
c000af46:	83 ec 0c             	sub    esp,0xc
c000af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4d:	83 ec 08             	sub    esp,0x8
c000af50:	6a 00                	push   0x0
c000af52:	50                   	push   eax
c000af53:	e8 5e e2 ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	ba 20 03 02 c0       	mov    edx,0xc0020320
c000af60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af64:	89 10                	mov    DWORD PTR [eax],edx
c000af66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af6a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af74:	83 c0 0d             	add    eax,0xd
c000af77:	83 ec 04             	sub    esp,0x4
c000af7a:	52                   	push   edx
c000af7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7f:	50                   	push   eax
c000af80:	e8 e5 fd ff ff       	call   c000ad6a <Fs::standardiseFiles(char*, char const*, char const*)>
c000af85:	83 c4 10             	add    esp,0x10
c000af88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af8f:	83 e8 41             	sub    eax,0x41
c000af92:	88 c2                	mov    dl,al
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afaa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afb0:	0f b6 c0             	movzx  eax,al
c000afb3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afba:	85 c0                	test   eax,eax
c000afbc:	74 3e                	je     c000affc <File::File(char const*, Process*)+0xb6>
c000afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afc8:	0f b6 c0             	movzx  eax,al
c000afcb:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afd2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000afd8:	85 c0                	test   eax,eax
c000afda:	75 20                	jne    c000affc <File::File(char const*, Process*)+0xb6>
c000afdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe6:	0f b6 c0             	movzx  eax,al
c000afe9:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aff0:	83 ec 0c             	sub    esp,0xc
c000aff3:	50                   	push   eax
c000aff4:	e8 2f 21 00 00       	call   c000d128 <LogicalDisk::mount()>
c000aff9:	83 c4 10             	add    esp,0x10
c000affc:	90                   	nop
c000affd:	83 c4 0c             	add    esp,0xc
c000b000:	c3                   	ret    
c000b001:	90                   	nop

c000b002 <File::open(FileOpenMode)>:
c000b002:	53                   	push   ebx
c000b003:	b8 0b 00 00 00       	mov    eax,0xb
c000b008:	83 ec 08             	sub    esp,0x8
c000b00b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b00f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b016:	83 fa 19             	cmp    edx,0x19
c000b019:	77 40                	ja     c000b05b <File::open(FileOpenMode)+0x59>
c000b01b:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b022:	85 d2                	test   edx,edx
c000b024:	74 35                	je     c000b05b <File::open(FileOpenMode)+0x59>
c000b026:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b02c:	85 d2                	test   edx,edx
c000b02e:	74 2b                	je     c000b05b <File::open(FileOpenMode)+0x59>
c000b030:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b034:	b8 06 00 00 00       	mov    eax,0x6
c000b039:	75 20                	jne    c000b05b <File::open(FileOpenMode)+0x59>
c000b03b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b03d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b043:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b047:	51                   	push   ecx
c000b048:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b04b:	51                   	push   ecx
c000b04c:	52                   	push   edx
c000b04d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b050:	83 c4 10             	add    esp,0x10
c000b053:	85 c0                	test   eax,eax
c000b055:	75 04                	jne    c000b05b <File::open(FileOpenMode)+0x59>
c000b057:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b05b:	83 c4 08             	add    esp,0x8
c000b05e:	5b                   	pop    ebx
c000b05f:	c3                   	ret    

c000b060 <File::close()>:
c000b060:	53                   	push   ebx
c000b061:	b8 0b 00 00 00       	mov    eax,0xb
c000b066:	83 ec 08             	sub    esp,0x8
c000b069:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b06d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b074:	83 f9 19             	cmp    ecx,0x19
c000b077:	77 41                	ja     c000b0ba <File::close()+0x5a>
c000b079:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b080:	85 db                	test   ebx,ebx
c000b082:	74 36                	je     c000b0ba <File::close()+0x5a>
c000b084:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b08b:	74 2d                	je     c000b0ba <File::close()+0x5a>
c000b08d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b091:	b8 05 00 00 00       	mov    eax,0x5
c000b096:	74 22                	je     c000b0ba <File::close()+0x5a>
c000b098:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b09c:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0a3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0a9:	53                   	push   ebx
c000b0aa:	53                   	push   ebx
c000b0ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b0ad:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b0b3:	50                   	push   eax
c000b0b4:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b0b7:	83 c4 10             	add    esp,0x10
c000b0ba:	83 c4 08             	add    esp,0x8
c000b0bd:	5b                   	pop    ebx
c000b0be:	c3                   	ret    
c000b0bf:	90                   	nop

c000b0c0 <File::seek(unsigned long long)>:
c000b0c0:	56                   	push   esi
c000b0c1:	b8 0b 00 00 00       	mov    eax,0xb
c000b0c6:	53                   	push   ebx
c000b0c7:	51                   	push   ecx
c000b0c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0d4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0db:	83 fa 19             	cmp    edx,0x19
c000b0de:	77 31                	ja     c000b111 <File::seek(unsigned long long)+0x51>
c000b0e0:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0e7:	85 d2                	test   edx,edx
c000b0e9:	74 26                	je     c000b111 <File::seek(unsigned long long)+0x51>
c000b0eb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0f1:	85 d2                	test   edx,edx
c000b0f3:	74 1c                	je     c000b111 <File::seek(unsigned long long)+0x51>
c000b0f5:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0f9:	b8 05 00 00 00       	mov    eax,0x5
c000b0fe:	74 11                	je     c000b111 <File::seek(unsigned long long)+0x51>
c000b100:	8b 02                	mov    eax,DWORD PTR [edx]
c000b102:	53                   	push   ebx
c000b103:	51                   	push   ecx
c000b104:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b10a:	52                   	push   edx
c000b10b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b10e:	83 c4 10             	add    esp,0x10
c000b111:	5a                   	pop    edx
c000b112:	5b                   	pop    ebx
c000b113:	5e                   	pop    esi
c000b114:	c3                   	ret    
c000b115:	90                   	nop

c000b116 <File::tell(unsigned long long*)>:
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	b8 0b 00 00 00       	mov    eax,0xb
c000b11e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b122:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b129:	83 fa 19             	cmp    edx,0x19
c000b12c:	77 34                	ja     c000b162 <File::tell(unsigned long long*)+0x4c>
c000b12e:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b135:	85 d2                	test   edx,edx
c000b137:	74 29                	je     c000b162 <File::tell(unsigned long long*)+0x4c>
c000b139:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b13f:	85 d2                	test   edx,edx
c000b141:	74 1f                	je     c000b162 <File::tell(unsigned long long*)+0x4c>
c000b143:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b147:	b8 05 00 00 00       	mov    eax,0x5
c000b14c:	74 14                	je     c000b162 <File::tell(unsigned long long*)+0x4c>
c000b14e:	50                   	push   eax
c000b14f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b151:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b155:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b15b:	52                   	push   edx
c000b15c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b15f:	83 c4 10             	add    esp,0x10
c000b162:	83 c4 0c             	add    esp,0xc
c000b165:	c3                   	ret    

c000b166 <File::rewind()>:
c000b166:	83 ec 10             	sub    esp,0x10
c000b169:	6a 00                	push   0x0
c000b16b:	6a 00                	push   0x0
c000b16d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b171:	e8 4a ff ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c000b176:	83 c4 1c             	add    esp,0x1c
c000b179:	c3                   	ret    

c000b17a <File::unlink()>:
c000b17a:	83 ec 0c             	sub    esp,0xc
c000b17d:	b8 0b 00 00 00       	mov    eax,0xb
c000b182:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b186:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b18d:	83 f9 19             	cmp    ecx,0x19
c000b190:	77 2f                	ja     c000b1c1 <File::unlink()+0x47>
c000b192:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b199:	85 c9                	test   ecx,ecx
c000b19b:	74 24                	je     c000b1c1 <File::unlink()+0x47>
c000b19d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1a3:	85 c9                	test   ecx,ecx
c000b1a5:	74 1a                	je     c000b1c1 <File::unlink()+0x47>
c000b1a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ab:	b8 06 00 00 00       	mov    eax,0x6
c000b1b0:	75 0f                	jne    c000b1c1 <File::unlink()+0x47>
c000b1b2:	50                   	push   eax
c000b1b3:	83 c2 0d             	add    edx,0xd
c000b1b6:	50                   	push   eax
c000b1b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1b9:	52                   	push   edx
c000b1ba:	51                   	push   ecx
c000b1bb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1be:	83 c4 10             	add    esp,0x10
c000b1c1:	83 c4 0c             	add    esp,0xc
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <File::rename(char const*)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1d9:	83 f9 19             	cmp    ecx,0x19
c000b1dc:	77 32                	ja     c000b210 <File::rename(char const*)+0x4a>
c000b1de:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1e5:	85 c9                	test   ecx,ecx
c000b1e7:	74 27                	je     c000b210 <File::rename(char const*)+0x4a>
c000b1e9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1ef:	85 c9                	test   ecx,ecx
c000b1f1:	74 1d                	je     c000b210 <File::rename(char const*)+0x4a>
c000b1f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1f7:	b8 06 00 00 00       	mov    eax,0x6
c000b1fc:	75 12                	jne    c000b210 <File::rename(char const*)+0x4a>
c000b1fe:	50                   	push   eax
c000b1ff:	83 c2 0d             	add    edx,0xd
c000b202:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b204:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b208:	52                   	push   edx
c000b209:	51                   	push   ecx
c000b20a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	83 c4 0c             	add    esp,0xc
c000b213:	c3                   	ret    

c000b214 <File::chfatattr(unsigned char, unsigned char)>:
c000b214:	57                   	push   edi
c000b215:	b8 0b 00 00 00       	mov    eax,0xb
c000b21a:	56                   	push   esi
c000b21b:	53                   	push   ebx
c000b21c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b220:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b224:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b228:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b22f:	83 f9 19             	cmp    ecx,0x19
c000b232:	77 37                	ja     c000b26b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b234:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b23b:	85 c9                	test   ecx,ecx
c000b23d:	74 2c                	je     c000b26b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b23f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b245:	85 c9                	test   ecx,ecx
c000b247:	74 22                	je     c000b26b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b249:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24d:	b8 06 00 00 00       	mov    eax,0x6
c000b252:	75 17                	jne    c000b26b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b254:	89 f0                	mov    eax,esi
c000b256:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b258:	0f b6 db             	movzx  ebx,bl
c000b25b:	0f b6 f0             	movzx  esi,al
c000b25e:	83 c2 0d             	add    edx,0xd
c000b261:	56                   	push   esi
c000b262:	53                   	push   ebx
c000b263:	52                   	push   edx
c000b264:	51                   	push   ecx
c000b265:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b268:	83 c4 10             	add    esp,0x10
c000b26b:	5b                   	pop    ebx
c000b26c:	5e                   	pop    esi
c000b26d:	5f                   	pop    edi
c000b26e:	c3                   	ret    
c000b26f:	90                   	nop

c000b270 <File::exists()>:
c000b270:	83 ec 0c             	sub    esp,0xc
c000b273:	31 c0                	xor    eax,eax
c000b275:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b279:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b280:	83 f9 19             	cmp    ecx,0x19
c000b283:	77 24                	ja     c000b2a9 <File::exists()+0x39>
c000b285:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b28c:	85 c9                	test   ecx,ecx
c000b28e:	74 19                	je     c000b2a9 <File::exists()+0x39>
c000b290:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b296:	85 c9                	test   ecx,ecx
c000b298:	74 0f                	je     c000b2a9 <File::exists()+0x39>
c000b29a:	50                   	push   eax
c000b29b:	83 c2 0d             	add    edx,0xd
c000b29e:	50                   	push   eax
c000b29f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a1:	52                   	push   edx
c000b2a2:	51                   	push   ecx
c000b2a3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	83 c4 0c             	add    esp,0xc
c000b2ac:	c3                   	ret    
c000b2ad:	90                   	nop

c000b2ae <File::stat(unsigned long long*, bool*)>:
c000b2ae:	56                   	push   esi
c000b2af:	53                   	push   ebx
c000b2b0:	50                   	push   eax
c000b2b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b2b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2c9:	83 f9 19             	cmp    ecx,0x19
c000b2cc:	77 3d                	ja     c000b30b <File::stat(unsigned long long*, bool*)+0x5d>
c000b2ce:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2d5:	85 c9                	test   ecx,ecx
c000b2d7:	74 32                	je     c000b30b <File::stat(unsigned long long*, bool*)+0x5d>
c000b2d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2df:	85 c9                	test   ecx,ecx
c000b2e1:	74 28                	je     c000b30b <File::stat(unsigned long long*, bool*)+0x5d>
c000b2e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2e9:	74 13                	je     c000b2fe <File::stat(unsigned long long*, bool*)+0x50>
c000b2eb:	83 ec 04             	sub    esp,0x4
c000b2ee:	56                   	push   esi
c000b2ef:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2f5:	51                   	push   ecx
c000b2f6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2fc:	eb 0a                	jmp    c000b308 <File::stat(unsigned long long*, bool*)+0x5a>
c000b2fe:	53                   	push   ebx
c000b2ff:	83 c2 0d             	add    edx,0xd
c000b302:	56                   	push   esi
c000b303:	52                   	push   edx
c000b304:	51                   	push   ecx
c000b305:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b308:	83 c4 10             	add    esp,0x10
c000b30b:	5a                   	pop    edx
c000b30c:	5b                   	pop    ebx
c000b30d:	5e                   	pop    esi
c000b30e:	c3                   	ret    

c000b30f <Fs::setcwd(Process*, char*)>:
c000b30f:	55                   	push   ebp
c000b310:	57                   	push   edi
c000b311:	56                   	push   esi
c000b312:	53                   	push   ebx
c000b313:	81 ec 20 02 00 00    	sub    esp,0x220
c000b319:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b320:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b326:	57                   	push   edi
c000b327:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b32e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b332:	56                   	push   esi
c000b333:	e8 32 fa ff ff       	call   c000ad6a <Fs::standardiseFiles(char*, char const*, char const*)>
c000b338:	89 34 24             	mov    DWORD PTR [esp],esi
c000b33b:	e8 40 52 ff ff       	call   c0000580 <strlen>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	83 f8 02             	cmp    eax,0x2
c000b346:	77 15                	ja     c000b35d <Fs::setcwd(Process*, char*)+0x4e>
c000b348:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b34d:	83 eb 41             	sub    ebx,0x41
c000b350:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b357:	85 c0                	test   eax,eax
c000b359:	75 1c                	jne    c000b377 <Fs::setcwd(Process*, char*)+0x68>
c000b35b:	eb 2f                	jmp    c000b38c <Fs::setcwd(Process*, char*)+0x7d>
c000b35d:	83 ec 0c             	sub    esp,0xc
c000b360:	56                   	push   esi
c000b361:	e8 1a 52 ff ff       	call   c0000580 <strlen>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	83 f8 03             	cmp    eax,0x3
c000b36c:	75 57                	jne    c000b3c5 <Fs::setcwd(Process*, char*)+0xb6>
c000b36e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b373:	75 50                	jne    c000b3c5 <Fs::setcwd(Process*, char*)+0xb6>
c000b375:	eb d1                	jmp    c000b348 <Fs::setcwd(Process*, char*)+0x39>
c000b377:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b37e:	75 0c                	jne    c000b38c <Fs::setcwd(Process*, char*)+0x7d>
c000b380:	83 ec 0c             	sub    esp,0xc
c000b383:	50                   	push   eax
c000b384:	e8 9f 1d 00 00       	call   c000d128 <LogicalDisk::mount()>
c000b389:	83 c4 10             	add    esp,0x10
c000b38c:	83 fb 19             	cmp    ebx,0x19
c000b38f:	b8 03 00 00 00       	mov    eax,0x3
c000b394:	0f 87 c6 00 00 00    	ja     c000b460 <Fs::setcwd(Process*, char*)+0x151>
c000b39a:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3a1:	b8 05 00 00 00       	mov    eax,0x5
c000b3a6:	85 d2                	test   edx,edx
c000b3a8:	0f 84 b2 00 00 00    	je     c000b460 <Fs::setcwd(Process*, char*)+0x151>
c000b3ae:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3b5:	b8 06 00 00 00       	mov    eax,0x6
c000b3ba:	0f 85 92 00 00 00    	jne    c000b452 <Fs::setcwd(Process*, char*)+0x143>
c000b3c0:	e9 9b 00 00 00       	jmp    c000b460 <Fs::setcwd(Process*, char*)+0x151>
c000b3c5:	83 ec 0c             	sub    esp,0xc
c000b3c8:	68 14 01 00 00       	push   0x114
c000b3cd:	e8 f9 c6 ff ff       	call   c0007acb <malloc>
c000b3d2:	83 c4 0c             	add    esp,0xc
c000b3d5:	55                   	push   ebp
c000b3d6:	56                   	push   esi
c000b3d7:	50                   	push   eax
c000b3d8:	89 c3                	mov    ebx,eax
c000b3da:	e8 67 fb ff ff       	call   c000af46 <File::File(char const*, Process*)>
c000b3df:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3e4:	83 c4 0c             	add    esp,0xc
c000b3e7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3eb:	50                   	push   eax
c000b3ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3f0:	50                   	push   eax
c000b3f1:	53                   	push   ebx
c000b3f2:	e8 b7 fe ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	83 f8 02             	cmp    eax,0x2
c000b3fd:	74 27                	je     c000b426 <Fs::setcwd(Process*, char*)+0x117>
c000b3ff:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b404:	75 1c                	jne    c000b422 <Fs::setcwd(Process*, char*)+0x113>
c000b406:	85 db                	test   ebx,ebx
c000b408:	b8 02 00 00 00       	mov    eax,0x2
c000b40d:	74 51                	je     c000b460 <Fs::setcwd(Process*, char*)+0x151>
c000b40f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b411:	83 ec 0c             	sub    esp,0xc
c000b414:	53                   	push   ebx
c000b415:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	b8 02 00 00 00       	mov    eax,0x2
c000b420:	eb 3e                	jmp    c000b460 <Fs::setcwd(Process*, char*)+0x151>
c000b422:	85 c0                	test   eax,eax
c000b424:	74 1c                	je     c000b442 <Fs::setcwd(Process*, char*)+0x133>
c000b426:	85 db                	test   ebx,ebx
c000b428:	b8 01 00 00 00       	mov    eax,0x1
c000b42d:	74 31                	je     c000b460 <Fs::setcwd(Process*, char*)+0x151>
c000b42f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b431:	83 ec 0c             	sub    esp,0xc
c000b434:	53                   	push   ebx
c000b435:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b438:	83 c4 10             	add    esp,0x10
c000b43b:	b8 01 00 00 00       	mov    eax,0x1
c000b440:	eb 1e                	jmp    c000b460 <Fs::setcwd(Process*, char*)+0x151>
c000b442:	85 db                	test   ebx,ebx
c000b444:	74 0c                	je     c000b452 <Fs::setcwd(Process*, char*)+0x143>
c000b446:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b448:	83 ec 0c             	sub    esp,0xc
c000b44b:	53                   	push   ebx
c000b44c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	50                   	push   eax
c000b453:	50                   	push   eax
c000b454:	56                   	push   esi
c000b455:	57                   	push   edi
c000b456:	e8 f5 51 ff ff       	call   c0000650 <strcpy>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	31 c0                	xor    eax,eax
c000b460:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b466:	5b                   	pop    ebx
c000b467:	5e                   	pop    esi
c000b468:	5f                   	pop    edi
c000b469:	5d                   	pop    ebp
c000b46a:	c3                   	ret    
c000b46b:	90                   	nop

c000b46c <Directory::Directory(char const*, Process*)>:
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b473:	83 ec 08             	sub    esp,0x8
c000b476:	6a 00                	push   0x0
c000b478:	50                   	push   eax
c000b479:	e8 38 dd ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000b47e:	83 c4 10             	add    esp,0x10
c000b481:	ba 3c 03 02 c0       	mov    edx,0xc002033c
c000b486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b48a:	89 10                	mov    DWORD PTR [eax],edx
c000b48c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b490:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49a:	83 c0 0d             	add    eax,0xd
c000b49d:	83 ec 04             	sub    esp,0x4
c000b4a0:	52                   	push   edx
c000b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a5:	50                   	push   eax
c000b4a6:	e8 bf f8 ff ff       	call   c000ad6a <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b4b5:	83 e8 41             	sub    eax,0x41
c000b4b8:	88 c2                	mov    dl,al
c000b4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4be:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4d6:	0f b6 c0             	movzx  eax,al
c000b4d9:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4e0:	85 c0                	test   eax,eax
c000b4e2:	74 3e                	je     c000b522 <Directory::Directory(char const*, Process*)+0xb6>
c000b4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4ee:	0f b6 c0             	movzx  eax,al
c000b4f1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4f8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4fe:	85 c0                	test   eax,eax
c000b500:	75 20                	jne    c000b522 <Directory::Directory(char const*, Process*)+0xb6>
c000b502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b506:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b50c:	0f b6 c0             	movzx  eax,al
c000b50f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	50                   	push   eax
c000b51a:	e8 09 1c 00 00       	call   c000d128 <LogicalDisk::mount()>
c000b51f:	83 c4 10             	add    esp,0x10
c000b522:	90                   	nop
c000b523:	83 c4 0c             	add    esp,0xc
c000b526:	c3                   	ret    
c000b527:	90                   	nop

c000b528 <Directory::open()>:
c000b528:	53                   	push   ebx
c000b529:	b8 0b 00 00 00       	mov    eax,0xb
c000b52e:	83 ec 08             	sub    esp,0x8
c000b531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b535:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b53c:	83 fa 19             	cmp    edx,0x19
c000b53f:	77 3d                	ja     c000b57e <Directory::open()+0x56>
c000b541:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b548:	85 d2                	test   edx,edx
c000b54a:	74 32                	je     c000b57e <Directory::open()+0x56>
c000b54c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b552:	85 d2                	test   edx,edx
c000b554:	74 28                	je     c000b57e <Directory::open()+0x56>
c000b556:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b55a:	b8 06 00 00 00       	mov    eax,0x6
c000b55f:	75 1d                	jne    c000b57e <Directory::open()+0x56>
c000b561:	50                   	push   eax
c000b562:	8b 02                	mov    eax,DWORD PTR [edx]
c000b564:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b56a:	51                   	push   ecx
c000b56b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b56e:	51                   	push   ecx
c000b56f:	52                   	push   edx
c000b570:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b573:	83 c4 10             	add    esp,0x10
c000b576:	85 c0                	test   eax,eax
c000b578:	75 04                	jne    c000b57e <Directory::open()+0x56>
c000b57a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b57e:	83 c4 08             	add    esp,0x8
c000b581:	5b                   	pop    ebx
c000b582:	c3                   	ret    
c000b583:	90                   	nop

c000b584 <Directory::close()>:
c000b584:	53                   	push   ebx
c000b585:	b8 0b 00 00 00       	mov    eax,0xb
c000b58a:	83 ec 08             	sub    esp,0x8
c000b58d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b591:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b598:	83 f9 19             	cmp    ecx,0x19
c000b59b:	77 41                	ja     c000b5de <Directory::close()+0x5a>
c000b59d:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5a4:	85 db                	test   ebx,ebx
c000b5a6:	74 36                	je     c000b5de <Directory::close()+0x5a>
c000b5a8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5af:	74 2d                	je     c000b5de <Directory::close()+0x5a>
c000b5b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5b5:	b8 05 00 00 00       	mov    eax,0x5
c000b5ba:	74 22                	je     c000b5de <Directory::close()+0x5a>
c000b5bc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b5c0:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5c7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5cd:	53                   	push   ebx
c000b5ce:	53                   	push   ebx
c000b5cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5d1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b5d7:	50                   	push   eax
c000b5d8:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b5db:	83 c4 10             	add    esp,0x10
c000b5de:	83 c4 08             	add    esp,0x8
c000b5e1:	5b                   	pop    ebx
c000b5e2:	c3                   	ret    
c000b5e3:	90                   	nop

c000b5e4 <Directory::unlink()>:
c000b5e4:	83 ec 0c             	sub    esp,0xc
c000b5e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5f7:	83 f9 19             	cmp    ecx,0x19
c000b5fa:	77 2f                	ja     c000b62b <Directory::unlink()+0x47>
c000b5fc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b603:	85 c9                	test   ecx,ecx
c000b605:	74 24                	je     c000b62b <Directory::unlink()+0x47>
c000b607:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b60d:	85 c9                	test   ecx,ecx
c000b60f:	74 1a                	je     c000b62b <Directory::unlink()+0x47>
c000b611:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b615:	b8 06 00 00 00       	mov    eax,0x6
c000b61a:	75 0f                	jne    c000b62b <Directory::unlink()+0x47>
c000b61c:	50                   	push   eax
c000b61d:	83 c2 0d             	add    edx,0xd
c000b620:	50                   	push   eax
c000b621:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b623:	52                   	push   edx
c000b624:	51                   	push   ecx
c000b625:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b628:	83 c4 10             	add    esp,0x10
c000b62b:	83 c4 0c             	add    esp,0xc
c000b62e:	c3                   	ret    
c000b62f:	90                   	nop

c000b630 <Directory::rename(char const*)>:
c000b630:	83 ec 0c             	sub    esp,0xc
c000b633:	b8 0b 00 00 00       	mov    eax,0xb
c000b638:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b63c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b643:	83 f9 19             	cmp    ecx,0x19
c000b646:	77 32                	ja     c000b67a <Directory::rename(char const*)+0x4a>
c000b648:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b64f:	85 c9                	test   ecx,ecx
c000b651:	74 27                	je     c000b67a <Directory::rename(char const*)+0x4a>
c000b653:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b659:	85 c9                	test   ecx,ecx
c000b65b:	74 1d                	je     c000b67a <Directory::rename(char const*)+0x4a>
c000b65d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b661:	b8 06 00 00 00       	mov    eax,0x6
c000b666:	75 12                	jne    c000b67a <Directory::rename(char const*)+0x4a>
c000b668:	50                   	push   eax
c000b669:	83 c2 0d             	add    edx,0xd
c000b66c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b66e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b672:	52                   	push   edx
c000b673:	51                   	push   ecx
c000b674:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b677:	83 c4 10             	add    esp,0x10
c000b67a:	83 c4 0c             	add    esp,0xc
c000b67d:	c3                   	ret    

c000b67e <Directory::exists()>:
c000b67e:	83 ec 0c             	sub    esp,0xc
c000b681:	31 c0                	xor    eax,eax
c000b683:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b687:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b68e:	83 f9 19             	cmp    ecx,0x19
c000b691:	77 24                	ja     c000b6b7 <Directory::exists()+0x39>
c000b693:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b69a:	85 c9                	test   ecx,ecx
c000b69c:	74 19                	je     c000b6b7 <Directory::exists()+0x39>
c000b69e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6a4:	85 c9                	test   ecx,ecx
c000b6a6:	74 0f                	je     c000b6b7 <Directory::exists()+0x39>
c000b6a8:	50                   	push   eax
c000b6a9:	83 c2 0d             	add    edx,0xd
c000b6ac:	50                   	push   eax
c000b6ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6af:	52                   	push   edx
c000b6b0:	51                   	push   ecx
c000b6b1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6b4:	83 c4 10             	add    esp,0x10
c000b6b7:	83 c4 0c             	add    esp,0xc
c000b6ba:	c3                   	ret    
c000b6bb:	90                   	nop

c000b6bc <Directory::read(dirent*)>:
c000b6bc:	83 ec 1c             	sub    esp,0x1c
c000b6bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b6c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6cf:	83 f9 19             	cmp    ecx,0x19
c000b6d2:	77 30                	ja     c000b704 <Directory::read(dirent*)+0x48>
c000b6d4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6db:	85 c9                	test   ecx,ecx
c000b6dd:	74 25                	je     c000b704 <Directory::read(dirent*)+0x48>
c000b6df:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b6e6:	74 1c                	je     c000b704 <Directory::read(dirent*)+0x48>
c000b6e8:	83 ec 0c             	sub    esp,0xc
c000b6eb:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6ed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6f1:	51                   	push   ecx
c000b6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6f6:	6a 00                	push   0x0
c000b6f8:	68 10 01 00 00       	push   0x110
c000b6fd:	52                   	push   edx
c000b6fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b701:	83 c4 20             	add    esp,0x20
c000b704:	83 c4 1c             	add    esp,0x1c
c000b707:	c3                   	ret    

c000b708 <Directory::create()>:
c000b708:	83 ec 0c             	sub    esp,0xc
c000b70b:	b8 0b 00 00 00       	mov    eax,0xb
c000b710:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b714:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b71b:	83 f9 19             	cmp    ecx,0x19
c000b71e:	77 2f                	ja     c000b74f <Directory::create()+0x47>
c000b720:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b727:	85 c9                	test   ecx,ecx
c000b729:	74 24                	je     c000b74f <Directory::create()+0x47>
c000b72b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b731:	85 c9                	test   ecx,ecx
c000b733:	74 1a                	je     c000b74f <Directory::create()+0x47>
c000b735:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b739:	b8 06 00 00 00       	mov    eax,0x6
c000b73e:	75 0f                	jne    c000b74f <Directory::create()+0x47>
c000b740:	50                   	push   eax
c000b741:	83 c2 0d             	add    edx,0xd
c000b744:	50                   	push   eax
c000b745:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b747:	52                   	push   edx
c000b748:	51                   	push   ecx
c000b749:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b74c:	83 c4 10             	add    esp,0x10
c000b74f:	83 c4 0c             	add    esp,0xc
c000b752:	c3                   	ret    
c000b753:	90                   	nop

c000b754 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b754:	b8 0a 00 00 00       	mov    eax,0xa
c000b759:	c3                   	ret    
c000b75a:	66 90                	xchg   ax,ax

c000b75c <Bus::Bus(char const*)>:
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b763:	83 ec 08             	sub    esp,0x8
c000b766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76a:	50                   	push   eax
c000b76b:	e8 28 08 00 00       	call   c000bf98 <Device::Device(char const*)>
c000b770:	83 c4 10             	add    esp,0x10
c000b773:	ba 58 03 02 c0       	mov    edx,0xc0020358
c000b778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77c:	89 10                	mov    DWORD PTR [eax],edx
c000b77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b782:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b78c:	90                   	nop
c000b78d:	83 c4 0c             	add    esp,0xc
c000b790:	c3                   	ret    
c000b791:	90                   	nop
c000b792:	66 90                	xchg   ax,ax

c000b794 <Bus::~Bus()>:
c000b794:	83 ec 0c             	sub    esp,0xc
c000b797:	ba 58 03 02 c0       	mov    edx,0xc0020358
c000b79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a0:	89 10                	mov    DWORD PTR [eax],edx
c000b7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a6:	83 ec 0c             	sub    esp,0xc
c000b7a9:	50                   	push   eax
c000b7aa:	e8 53 05 00 00       	call   c000bd02 <Device::~Device()>
c000b7af:	83 c4 10             	add    esp,0x10
c000b7b2:	90                   	nop
c000b7b3:	83 c4 0c             	add    esp,0xc
c000b7b6:	c3                   	ret    
c000b7b7:	90                   	nop

c000b7b8 <Bus::~Bus()>:
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	83 ec 0c             	sub    esp,0xc
c000b7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7c2:	e8 cd ff ff ff       	call   c000b794 <Bus::~Bus()>
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	83 ec 08             	sub    esp,0x8
c000b7cd:	68 58 01 00 00       	push   0x158
c000b7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d6:	e8 c5 f0 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	83 c4 0c             	add    esp,0xc
c000b7e1:	c3                   	ret    

c000b7e2 <beepThread(void*)>:
c000b7e2:	83 ec 0c             	sub    esp,0xc
c000b7e5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7ee:	48                   	dec    eax
c000b7ef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7f4:	75 01                	jne    c000b7f7 <beepThread(void*)+0x15>
c000b7f6:	fb                   	sti    
c000b7f7:	6b c2 0a             	imul   eax,edx,0xa
c000b7fa:	83 ec 0c             	sub    esp,0xc
c000b7fd:	50                   	push   eax
c000b7fe:	e8 7d 9b 00 00       	call   c0015380 <milliTenthSleep(unsigned int)>
c000b803:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b80a:	e8 54 ba 00 00       	call   c0017263 <HalMakeBeep(int)>
c000b80f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b817:	83 c4 1c             	add    esp,0x1c
c000b81a:	e9 45 9a 00 00       	jmp    c0015264 <blockTask(TaskState)>

c000b81f <Krnl::beep(int, int, bool)>:
c000b81f:	56                   	push   esi
c000b820:	53                   	push   ebx
c000b821:	83 ec 10             	sub    esp,0x10
c000b824:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b828:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	e8 2e ba 00 00       	call   c0017263 <HalMakeBeep(int)>
c000b835:	89 f0                	mov    eax,esi
c000b837:	83 c4 10             	add    esp,0x10
c000b83a:	84 c0                	test   al,al
c000b83c:	74 1e                	je     c000b85c <Krnl::beep(int, int, bool)+0x3d>
c000b83e:	6b db 0a             	imul   ebx,ebx,0xa
c000b841:	83 ec 0c             	sub    esp,0xc
c000b844:	53                   	push   ebx
c000b845:	e8 36 9b 00 00       	call   c0015380 <milliTenthSleep(unsigned int)>
c000b84a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b852:	83 c4 14             	add    esp,0x14
c000b855:	5b                   	pop    ebx
c000b856:	5e                   	pop    esi
c000b857:	e9 07 ba 00 00       	jmp    c0017263 <HalMakeBeep(int)>
c000b85c:	68 e6 00 00 00       	push   0xe6
c000b861:	53                   	push   ebx
c000b862:	68 e2 b7 00 c0       	push   0xc000b7e2
c000b867:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b86d:	e8 a6 95 00 00       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c000b872:	83 c4 14             	add    esp,0x14
c000b875:	5b                   	pop    ebx
c000b876:	5e                   	pop    esi
c000b877:	c3                   	ret    

c000b878 <User::loadClockSettings(int)>:
c000b878:	53                   	push   ebx
c000b879:	83 ec 14             	sub    esp,0x14
c000b87c:	68 14 01 00 00       	push   0x114
c000b881:	e8 45 c2 ff ff       	call   c0007acb <malloc>
c000b886:	83 c4 0c             	add    esp,0xc
c000b889:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b88f:	68 7c 03 02 c0       	push   0xc002037c
c000b894:	50                   	push   eax
c000b895:	89 c3                	mov    ebx,eax
c000b897:	e8 aa f6 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c000b89c:	58                   	pop    eax
c000b89d:	5a                   	pop    edx
c000b89e:	6a 01                	push   0x1
c000b8a0:	53                   	push   ebx
c000b8a1:	e8 5c f7 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c000b8a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8a9:	e8 b2 f7 ff ff       	call   c000b060 <File::close()>
c000b8ae:	83 c4 10             	add    esp,0x10
c000b8b1:	85 db                	test   ebx,ebx
c000b8b3:	74 0f                	je     c000b8c4 <User::loadClockSettings(int)+0x4c>
c000b8b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8be:	83 c4 08             	add    esp,0x8
c000b8c1:	5b                   	pop    ebx
c000b8c2:	ff e0                	jmp    eax
c000b8c4:	83 c4 08             	add    esp,0x8
c000b8c7:	5b                   	pop    ebx
c000b8c8:	c3                   	ret    
c000b8c9:	90                   	nop

c000b8ca <Clock::Clock(char const*)>:
c000b8ca:	83 ec 0c             	sub    esp,0xc
c000b8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d1:	83 ec 08             	sub    esp,0x8
c000b8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d8:	50                   	push   eax
c000b8d9:	e8 ba 06 00 00       	call   c000bf98 <Device::Device(char const*)>
c000b8de:	83 c4 10             	add    esp,0x10
c000b8e1:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c000b8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ea:	89 10                	mov    DWORD PTR [eax],edx
c000b8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8fa:	90                   	nop
c000b8fb:	83 c4 0c             	add    esp,0xc
c000b8fe:	c3                   	ret    
c000b8ff:	90                   	nop

c000b900 <Clock::~Clock()>:
c000b900:	83 ec 0c             	sub    esp,0xc
c000b903:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c000b908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b90c:	89 10                	mov    DWORD PTR [eax],edx
c000b90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b912:	83 ec 0c             	sub    esp,0xc
c000b915:	50                   	push   eax
c000b916:	e8 e7 03 00 00       	call   c000bd02 <Device::~Device()>
c000b91b:	83 c4 10             	add    esp,0x10
c000b91e:	90                   	nop
c000b91f:	83 c4 0c             	add    esp,0xc
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <Clock::~Clock()>:
c000b924:	83 ec 0c             	sub    esp,0xc
c000b927:	83 ec 0c             	sub    esp,0xc
c000b92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b92e:	e8 cd ff ff ff       	call   c000b900 <Clock::~Clock()>
c000b933:	83 c4 10             	add    esp,0x10
c000b936:	83 ec 08             	sub    esp,0x8
c000b939:	68 58 01 00 00       	push   0x158
c000b93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b942:	e8 59 ef ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	83 c4 0c             	add    esp,0xc
c000b94d:	c3                   	ret    

c000b94e <Clock::timeInSecondsLocal()>:
c000b94e:	53                   	push   ebx
c000b94f:	83 ec 14             	sub    esp,0x14
c000b952:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b956:	8b 10                	mov    edx,DWORD PTR [eax]
c000b958:	50                   	push   eax
c000b959:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b95c:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b963:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b969:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b96f:	89 cb                	mov    ebx,ecx
c000b971:	c1 fb 1f             	sar    ebx,0x1f
c000b974:	01 c8                	add    eax,ecx
c000b976:	11 da                	adc    edx,ebx
c000b978:	83 c4 10             	add    esp,0x10
c000b97b:	31 c9                	xor    ecx,ecx
c000b97d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b984:	74 05                	je     c000b98b <Clock::timeInSecondsLocal()+0x3d>
c000b986:	b9 08 07 00 00       	mov    ecx,0x708
c000b98b:	31 db                	xor    ebx,ebx
c000b98d:	01 c8                	add    eax,ecx
c000b98f:	11 da                	adc    edx,ebx
c000b991:	83 c4 08             	add    esp,0x8
c000b994:	5b                   	pop    ebx
c000b995:	c3                   	ret    

c000b996 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b996:	57                   	push   edi
c000b997:	56                   	push   esi
c000b998:	53                   	push   ebx
c000b999:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b99d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9a7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9aa:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9b1:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9b7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9bd:	99                   	cdq    
c000b9be:	29 c6                	sub    esi,eax
c000b9c0:	19 d7                	sbb    edi,edx
c000b9c2:	89 f0                	mov    eax,esi
c000b9c4:	31 f6                	xor    esi,esi
c000b9c6:	89 fa                	mov    edx,edi
c000b9c8:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9cf:	74 05                	je     c000b9d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9d1:	be 08 07 00 00       	mov    esi,0x708
c000b9d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9da:	31 ff                	xor    edi,edi
c000b9dc:	29 f0                	sub    eax,esi
c000b9de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9e2:	19 fa                	sbb    edx,edi
c000b9e4:	89 d8                	mov    eax,ebx
c000b9e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ea:	5b                   	pop    ebx
c000b9eb:	5e                   	pop    esi
c000b9ec:	5f                   	pop    edi
c000b9ed:	ff e0                	jmp    eax

c000b9ef <datetimeToSeconds(datetime_t)>:
c000b9ef:	55                   	push   ebp
c000b9f0:	57                   	push   edi
c000b9f1:	56                   	push   esi
c000b9f2:	53                   	push   ebx
c000b9f3:	83 ec 0c             	sub    esp,0xc
c000b9f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b9fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9fe:	89 f7                	mov    edi,esi
c000ba00:	89 f0                	mov    eax,esi
c000ba02:	0f b6 cf             	movzx  ecx,bh
c000ba05:	0f b6 c4             	movzx  eax,ah
c000ba08:	c1 ef 10             	shr    edi,0x10
c000ba0b:	89 da                	mov    edx,ebx
c000ba0d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000ba10:	89 f9                	mov    ecx,edi
c000ba12:	0f b6 f9             	movzx  edi,cl
c000ba15:	89 f1                	mov    ecx,esi
c000ba17:	6b c0 3c             	imul   eax,eax,0x3c
c000ba1a:	0f b6 f1             	movzx  esi,cl
c000ba1d:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000ba23:	0f b6 db             	movzx  ebx,bl
c000ba26:	c1 ea 10             	shr    edx,0x10
c000ba29:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000ba2f:	01 f8                	add    eax,edi
c000ba31:	01 f0                	add    eax,esi
c000ba33:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba36:	c1 f8 1f             	sar    eax,0x1f
c000ba39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba3d:	89 e8                	mov    eax,ebp
c000ba3f:	0f b6 c0             	movzx  eax,al
c000ba42:	8b 0c 85 e0 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfc20]
c000ba49:	83 f8 01             	cmp    eax,0x1
c000ba4c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000ba50:	0f b7 da             	movzx  ebx,dx
c000ba53:	76 27                	jbe    c000ba7c <datetimeToSeconds(datetime_t)+0x8d>
c000ba55:	80 e2 03             	and    dl,0x3
c000ba58:	75 22                	jne    c000ba7c <datetimeToSeconds(datetime_t)+0x8d>
c000ba5a:	31 d2                	xor    edx,edx
c000ba5c:	be 64 00 00 00       	mov    esi,0x64
c000ba61:	89 d8                	mov    eax,ebx
c000ba63:	f7 f6                	div    esi
c000ba65:	85 d2                	test   edx,edx
c000ba67:	75 12                	jne    c000ba7b <datetimeToSeconds(datetime_t)+0x8c>
c000ba69:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba6f:	be 90 01 00 00       	mov    esi,0x190
c000ba74:	99                   	cdq    
c000ba75:	f7 fe                	idiv   esi
c000ba77:	85 d2                	test   edx,edx
c000ba79:	75 01                	jne    c000ba7c <datetimeToSeconds(datetime_t)+0x8d>
c000ba7b:	41                   	inc    ecx
c000ba7c:	83 fb 46             	cmp    ebx,0x46
c000ba7f:	76 48                	jbe    c000bac9 <datetimeToSeconds(datetime_t)+0xda>
c000ba81:	be 46 00 00 00       	mov    esi,0x46
c000ba86:	bf 64 00 00 00       	mov    edi,0x64
c000ba8b:	bd 90 01 00 00       	mov    ebp,0x190
c000ba90:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba96:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba9b:	75 23                	jne    c000bac0 <datetimeToSeconds(datetime_t)+0xd1>
c000ba9d:	89 f0                	mov    eax,esi
c000ba9f:	99                   	cdq    
c000baa0:	f7 ff                	idiv   edi
c000baa2:	b8 6e 01 00 00       	mov    eax,0x16e
c000baa7:	85 d2                	test   edx,edx
c000baa9:	75 15                	jne    c000bac0 <datetimeToSeconds(datetime_t)+0xd1>
c000baab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bab1:	99                   	cdq    
c000bab2:	f7 fd                	idiv   ebp
c000bab4:	83 fa 01             	cmp    edx,0x1
c000bab7:	19 c0                	sbb    eax,eax
c000bab9:	f7 d0                	not    eax
c000babb:	05 6e 01 00 00       	add    eax,0x16e
c000bac0:	46                   	inc    esi
c000bac1:	01 c1                	add    ecx,eax
c000bac3:	39 de                	cmp    esi,ebx
c000bac5:	7c c9                	jl     c000ba90 <datetimeToSeconds(datetime_t)+0xa1>
c000bac7:	eb 34                	jmp    c000bafd <datetimeToSeconds(datetime_t)+0x10e>
c000bac9:	74 32                	je     c000bafd <datetimeToSeconds(datetime_t)+0x10e>
c000bacb:	b8 45 00 00 00       	mov    eax,0x45
c000bad0:	89 c2                	mov    edx,eax
c000bad2:	83 e2 03             	and    edx,0x3
c000bad5:	39 d8                	cmp    eax,ebx
c000bad7:	7e 0f                	jle    c000bae8 <datetimeToSeconds(datetime_t)+0xf9>
c000bad9:	83 fa 01             	cmp    edx,0x1
c000badc:	19 d2                	sbb    edx,edx
c000bade:	48                   	dec    eax
c000badf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bae6:	eb e8                	jmp    c000bad0 <datetimeToSeconds(datetime_t)+0xe1>
c000bae8:	85 d2                	test   edx,edx
c000baea:	b8 6d 01 00 00       	mov    eax,0x16d
c000baef:	75 0a                	jne    c000bafb <datetimeToSeconds(datetime_t)+0x10c>
c000baf1:	83 fb 01             	cmp    ebx,0x1
c000baf4:	19 c0                	sbb    eax,eax
c000baf6:	05 6e 01 00 00       	add    eax,0x16e
c000bafb:	29 c1                	sub    ecx,eax
c000bafd:	b8 80 51 01 00       	mov    eax,0x15180
c000bb02:	f7 e9                	imul   ecx
c000bb04:	03 04 24             	add    eax,DWORD PTR [esp]
c000bb07:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb0b:	83 c4 0c             	add    esp,0xc
c000bb0e:	5b                   	pop    ebx
c000bb0f:	5e                   	pop    esi
c000bb10:	5f                   	pop    edi
c000bb11:	5d                   	pop    ebp
c000bb12:	c3                   	ret    
c000bb13:	90                   	nop

c000bb14 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb14:	57                   	push   edi
c000bb15:	56                   	push   esi
c000bb16:	53                   	push   ebx
c000bb17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb1b:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb1d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb28:	e8 c2 fe ff ff       	call   c000b9ef <datetimeToSeconds(datetime_t)>
c000bb2d:	59                   	pop    ecx
c000bb2e:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb35:	5b                   	pop    ebx
c000bb36:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb3c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb42:	89 cb                	mov    ebx,ecx
c000bb44:	c1 fb 1f             	sar    ebx,0x1f
c000bb47:	29 c8                	sub    eax,ecx
c000bb49:	19 da                	sbb    edx,ebx
c000bb4b:	31 c9                	xor    ecx,ecx
c000bb4d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb54:	74 05                	je     c000bb5b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb56:	b9 08 07 00 00       	mov    ecx,0x708
c000bb5b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb5f:	31 db                	xor    ebx,ebx
c000bb61:	29 c8                	sub    eax,ecx
c000bb63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb67:	19 da                	sbb    edx,ebx
c000bb69:	89 f8                	mov    eax,edi
c000bb6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb6f:	5b                   	pop    ebx
c000bb70:	5e                   	pop    esi
c000bb71:	5f                   	pop    edi
c000bb72:	ff e0                	jmp    eax

c000bb74 <secondsToDatetime(unsigned long long)>:
c000bb74:	55                   	push   ebp
c000bb75:	57                   	push   edi
c000bb76:	56                   	push   esi
c000bb77:	53                   	push   ebx
c000bb78:	83 ec 1c             	sub    esp,0x1c
c000bb7b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb87:	6a 00                	push   0x0
c000bb89:	68 80 51 01 00       	push   0x15180
c000bb8e:	55                   	push   ebp
c000bb8f:	57                   	push   edi
c000bb90:	e8 9b 2a 01 00       	call   c001e630 <__udivdi3>
c000bb95:	83 c4 10             	add    esp,0x10
c000bb98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb9c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bba2:	6a 00                	push   0x0
c000bba4:	68 80 51 01 00       	push   0x15180
c000bba9:	55                   	push   ebp
c000bbaa:	57                   	push   edi
c000bbab:	bf 10 0e 00 00       	mov    edi,0xe10
c000bbb0:	e8 7b 2b 01 00       	call   c001e730 <__umoddi3>
c000bbb5:	83 c4 10             	add    esp,0x10
c000bbb8:	99                   	cdq    
c000bbb9:	f7 ff                	idiv   edi
c000bbbb:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbc0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbc3:	89 d0                	mov    eax,edx
c000bbc5:	99                   	cdq    
c000bbc6:	f7 ff                	idiv   edi
c000bbc8:	85 db                	test   ebx,ebx
c000bbca:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbcd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbd0:	79 11                	jns    c000bbe3 <secondsToDatetime(unsigned long long)+0x6f>
c000bbd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbd6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbdc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbe1:	eb 07                	jmp    c000bbea <secondsToDatetime(unsigned long long)+0x76>
c000bbe3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbe8:	89 d8                	mov    eax,ebx
c000bbea:	99                   	cdq    
c000bbeb:	bf b4 05 00 00       	mov    edi,0x5b4
c000bbf0:	f7 f9                	idiv   ecx
c000bbf2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbf7:	31 d2                	xor    edx,edx
c000bbf9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc02:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc0a:	01 c3                	add    ebx,eax
c000bc0c:	89 d8                	mov    eax,ebx
c000bc0e:	f7 f1                	div    ecx
c000bc10:	31 d2                	xor    edx,edx
c000bc12:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc15:	89 d8                	mov    eax,ebx
c000bc17:	f7 f7                	div    edi
c000bc19:	31 d2                	xor    edx,edx
c000bc1b:	29 c1                	sub    ecx,eax
c000bc1d:	89 d8                	mov    eax,ebx
c000bc1f:	f7 f5                	div    ebp
c000bc21:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc26:	31 d2                	xor    edx,edx
c000bc28:	29 c1                	sub    ecx,eax
c000bc2a:	89 c8                	mov    eax,ecx
c000bc2c:	f7 f5                	div    ebp
c000bc2e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc33:	31 d2                	xor    edx,edx
c000bc35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc39:	89 c8                	mov    eax,ecx
c000bc3b:	f7 f5                	div    ebp
c000bc3d:	31 d2                	xor    edx,edx
c000bc3f:	01 c3                	add    ebx,eax
c000bc41:	89 c8                	mov    eax,ecx
c000bc43:	f7 f7                	div    edi
c000bc45:	bf 99 00 00 00       	mov    edi,0x99
c000bc4a:	31 d2                	xor    edx,edx
c000bc4c:	29 c3                	sub    ebx,eax
c000bc4e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc56:	29 c3                	sub    ebx,eax
c000bc58:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc5b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc5e:	83 c1 02             	add    ecx,0x2
c000bc61:	89 c8                	mov    eax,ecx
c000bc63:	bb 05 00 00 00       	mov    ebx,0x5
c000bc68:	f7 f7                	div    edi
c000bc6a:	31 d2                	xor    edx,edx
c000bc6c:	89 c7                	mov    edi,eax
c000bc6e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc74:	83 c0 02             	add    eax,0x2
c000bc77:	f7 f3                	div    ebx
c000bc79:	89 eb                	mov    ebx,ebp
c000bc7b:	29 c3                	sub    ebx,eax
c000bc7d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc83:	88 1e                	mov    BYTE PTR [esi],bl
c000bc85:	19 c0                	sbb    eax,eax
c000bc87:	31 d2                	xor    edx,edx
c000bc89:	83 e0 0c             	and    eax,0xc
c000bc8c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc90:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc98:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc9c:	83 f9 01             	cmp    ecx,0x1
c000bc9f:	0f 96 c2             	setbe  dl
c000bca2:	41                   	inc    ecx
c000bca3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bca6:	01 d0                	add    eax,edx
c000bca8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bcac:	83 c4 1c             	add    esp,0x1c
c000bcaf:	89 f0                	mov    eax,esi
c000bcb1:	5b                   	pop    ebx
c000bcb2:	5e                   	pop    esi
c000bcb3:	5f                   	pop    edi
c000bcb4:	5d                   	pop    ebp
c000bcb5:	c2 04 00             	ret    0x4

c000bcb8 <Clock::timeInDatetimeLocal()>:
c000bcb8:	53                   	push   ebx
c000bcb9:	83 ec 14             	sub    esp,0x14
c000bcbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcc4:	e8 85 fc ff ff       	call   c000b94e <Clock::timeInSecondsLocal()>
c000bcc9:	83 c4 0c             	add    esp,0xc
c000bccc:	52                   	push   edx
c000bccd:	50                   	push   eax
c000bcce:	53                   	push   ebx
c000bccf:	e8 a0 fe ff ff       	call   c000bb74 <secondsToDatetime(unsigned long long)>
c000bcd4:	89 d8                	mov    eax,ebx
c000bcd6:	83 c4 14             	add    esp,0x14
c000bcd9:	5b                   	pop    ebx
c000bcda:	c2 04 00             	ret    0x4
c000bcdd:	90                   	nop

c000bcde <Device::hibernate()>:
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <Device::wake()>:
c000bce0:	c3                   	ret    
c000bce1:	90                   	nop

c000bce2 <Device::detect()>:
c000bce2:	c3                   	ret    
c000bce3:	90                   	nop

c000bce4 <Device::disableLegacy()>:
c000bce4:	c3                   	ret    
c000bce5:	90                   	nop

c000bce6 <Device::powerSaving(PowerSavingLevel)>:
c000bce6:	c3                   	ret    
c000bce7:	90                   	nop

c000bce8 <DriverlessDevice::close(int, int, void*)>:
c000bce8:	31 c0                	xor    eax,eax
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <DriverlessDevice::detect()>:
c000bcec:	c3                   	ret    
c000bced:	90                   	nop

c000bcee <DriverlessDevice::open(int, int, void*)>:
c000bcee:	83 ec 18             	sub    esp,0x18
c000bcf1:	68 10 04 02 c0       	push   0xc0020410
c000bcf6:	e8 6e 4b 00 00       	call   c0010869 <KePanic(char const*)>
c000bcfb:	83 c8 ff             	or     eax,0xffffffff
c000bcfe:	83 c4 1c             	add    esp,0x1c
c000bd01:	c3                   	ret    

c000bd02 <Device::~Device()>:
c000bd02:	ba 70 04 02 c0       	mov    edx,0xc0020470
c000bd07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd0b:	89 10                	mov    DWORD PTR [eax],edx
c000bd0d:	90                   	nop
c000bd0e:	c3                   	ret    
c000bd0f:	90                   	nop

c000bd10 <Device::~Device()>:
c000bd10:	83 ec 0c             	sub    esp,0xc
c000bd13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bd17:	e8 e6 ff ff ff       	call   c000bd02 <Device::~Device()>
c000bd1c:	83 c4 04             	add    esp,0x4
c000bd1f:	83 ec 08             	sub    esp,0x8
c000bd22:	68 58 01 00 00       	push   0x158
c000bd27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2b:	e8 70 eb ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000bd30:	83 c4 10             	add    esp,0x10
c000bd33:	83 c4 0c             	add    esp,0xc
c000bd36:	c3                   	ret    
c000bd37:	90                   	nop

c000bd38 <Device::findAndLoadDriver()>:
c000bd38:	c7 44 24 04 2e 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc002042e
c000bd40:	e9 59 ec ff ff       	jmp    c000a99e <Dbg::kprintf(char const*, ...)>
c000bd45:	90                   	nop

c000bd46 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd46:	57                   	push   edi
c000bd47:	b9 09 00 00 00       	mov    ecx,0x9
c000bd4c:	56                   	push   esi
c000bd4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd51:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd55:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd5f:	81 c7 18 01 00 00    	add    edi,0x118
c000bd65:	fc                   	cld    
c000bd66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd68:	5e                   	pop    esi
c000bd69:	5f                   	pop    edi
c000bd6a:	c3                   	ret    
c000bd6b:	90                   	nop

c000bd6c <Device::preOpenACPI(void*, char*, char*)>:
c000bd6c:	57                   	push   edi
c000bd6d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd72:	56                   	push   esi
c000bd73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd7f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd89:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd8f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd97:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bda1:	b9 0e 00 00 00       	mov    ecx,0xe
c000bda6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bda8:	5e                   	pop    esi
c000bda9:	5f                   	pop    edi
c000bdaa:	c3                   	ret    
c000bdab:	90                   	nop

c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bdac:	53                   	push   ebx
c000bdad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bdbd:	0f b6 c0             	movzx  eax,al
c000bdc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdc4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdc8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bdcc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdd0:	5b                   	pop    ebx
c000bdd1:	e9 aa 05 00 00       	jmp    c000c380 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bdd6 <Device::getParent()>:
c000bdd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdda:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bde0:	c3                   	ret    
c000bde1:	90                   	nop

c000bde2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bde2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bde6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdea:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bdef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdf3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdf7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdfb:	e9 f7 06 00 00       	jmp    c000c4f7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000be00 <Device::addChild(Device*)>:
c000be00:	53                   	push   ebx
c000be01:	83 ec 08             	sub    esp,0x8
c000be04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be0c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be12:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be18:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be1a:	85 d2                	test   edx,edx
c000be1c:	74 04                	je     c000be22 <Device::addChild(Device*)+0x22>
c000be1e:	89 d3                	mov    ebx,edx
c000be20:	eb f6                	jmp    c000be18 <Device::addChild(Device*)+0x18>
c000be22:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be25:	83 ec 0c             	sub    esp,0xc
c000be28:	6a 08                	push   0x8
c000be2a:	e8 9c bc ff ff       	call   c0007acb <malloc>
c000be2f:	89 03                	mov    DWORD PTR [ebx],eax
c000be31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be3e:	83 c4 18             	add    esp,0x18
c000be41:	5b                   	pop    ebx
c000be42:	c3                   	ret    
c000be43:	90                   	nop

c000be44 <Device::removeAllChildren()>:
c000be44:	56                   	push   esi
c000be45:	53                   	push   ebx
c000be46:	52                   	push   edx
c000be47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be4b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be54:	74 17                	je     c000be6d <Device::removeAllChildren()+0x29>
c000be56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be59:	85 c0                	test   eax,eax
c000be5b:	74 0c                	je     c000be69 <Device::removeAllChildren()+0x25>
c000be5d:	8b 10                	mov    edx,DWORD PTR [eax]
c000be5f:	83 ec 0c             	sub    esp,0xc
c000be62:	50                   	push   eax
c000be63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be66:	83 c4 10             	add    esp,0x10
c000be69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be6b:	eb e4                	jmp    c000be51 <Device::removeAllChildren()+0xd>
c000be6d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be73:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be79:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be86:	58                   	pop    eax
c000be87:	5b                   	pop    ebx
c000be88:	5e                   	pop    esi
c000be89:	c3                   	ret    

c000be8a <Device::hibernateAll()>:
c000be8a:	53                   	push   ebx
c000be8b:	83 ec 14             	sub    esp,0x14
c000be8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be94:	53                   	push   ebx
c000be95:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bea4:	74 0f                	je     c000beb5 <Device::hibernateAll()+0x2b>
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beac:	e8 d9 ff ff ff       	call   c000be8a <Device::hibernateAll()>
c000beb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beb3:	eb e9                	jmp    c000be9e <Device::hibernateAll()+0x14>
c000beb5:	83 c4 08             	add    esp,0x8
c000beb8:	5b                   	pop    ebx
c000beb9:	c3                   	ret    

c000beba <Device::wakeAll()>:
c000beba:	53                   	push   ebx
c000bebb:	83 ec 14             	sub    esp,0x14
c000bebe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bec2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bec4:	53                   	push   ebx
c000bec5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bec8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bece:	83 c4 10             	add    esp,0x10
c000bed1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bed4:	74 0f                	je     c000bee5 <Device::wakeAll()+0x2b>
c000bed6:	83 ec 0c             	sub    esp,0xc
c000bed9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bedc:	e8 d9 ff ff ff       	call   c000beba <Device::wakeAll()>
c000bee1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bee3:	eb e9                	jmp    c000bece <Device::wakeAll()+0x14>
c000bee5:	83 c4 08             	add    esp,0x8
c000bee8:	5b                   	pop    ebx
c000bee9:	c3                   	ret    

c000beea <Device::detectAll()>:
c000beea:	53                   	push   ebx
c000beeb:	83 ec 14             	sub    esp,0x14
c000beee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bef4:	53                   	push   ebx
c000bef5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bef8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000befe:	83 c4 10             	add    esp,0x10
c000bf01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf04:	74 0f                	je     c000bf15 <Device::detectAll()+0x2b>
c000bf06:	83 ec 0c             	sub    esp,0xc
c000bf09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf0c:	e8 d9 ff ff ff       	call   c000beea <Device::detectAll()>
c000bf11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf13:	eb e9                	jmp    c000befe <Device::detectAll()+0x14>
c000bf15:	83 c4 08             	add    esp,0x8
c000bf18:	5b                   	pop    ebx
c000bf19:	c3                   	ret    

c000bf1a <Device::disableLegacyAll()>:
c000bf1a:	c3                   	ret    
c000bf1b:	90                   	nop

c000bf1c <Device::loadDriversForAll()>:
c000bf1c:	c3                   	ret    
c000bf1d:	90                   	nop

c000bf1e <Device::closeAll()>:
c000bf1e:	53                   	push   ebx
c000bf1f:	83 ec 08             	sub    esp,0x8
c000bf22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf26:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf28:	6a 00                	push   0x0
c000bf2a:	6a 00                	push   0x0
c000bf2c:	6a 00                	push   0x0
c000bf2e:	53                   	push   ebx
c000bf2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf38:	83 c4 10             	add    esp,0x10
c000bf3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf3e:	74 0f                	je     c000bf4f <Device::closeAll()+0x31>
c000bf40:	83 ec 0c             	sub    esp,0xc
c000bf43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf46:	e8 d3 ff ff ff       	call   c000bf1e <Device::closeAll()>
c000bf4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf4d:	eb e9                	jmp    c000bf38 <Device::closeAll()+0x1a>
c000bf4f:	83 c4 08             	add    esp,0x8
c000bf52:	5b                   	pop    ebx
c000bf53:	c3                   	ret    

c000bf54 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf54:	56                   	push   esi
c000bf55:	53                   	push   ebx
c000bf56:	83 ec 0c             	sub    esp,0xc
c000bf59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf5d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf61:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf63:	56                   	push   esi
c000bf64:	53                   	push   ebx
c000bf65:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf6e:	83 c4 10             	add    esp,0x10
c000bf71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf74:	74 0f                	je     c000bf85 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf76:	52                   	push   edx
c000bf77:	52                   	push   edx
c000bf78:	56                   	push   esi
c000bf79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf7c:	e8 d3 ff ff ff       	call   c000bf54 <Device::powerSavingAll(PowerSavingLevel)>
c000bf81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf83:	eb e9                	jmp    c000bf6e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf85:	58                   	pop    eax
c000bf86:	5b                   	pop    ebx
c000bf87:	5e                   	pop    esi
c000bf88:	c3                   	ret    
c000bf89:	90                   	nop

c000bf8a <Device::setName(char const*)>:
c000bf8a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf92:	e9 b9 46 ff ff       	jmp    c0000650 <strcpy>
c000bf97:	90                   	nop

c000bf98 <Device::Device(char const*)>:
c000bf98:	83 ec 1c             	sub    esp,0x1c
c000bf9b:	ba 70 04 02 c0       	mov    edx,0xc0020470
c000bfa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa4:	89 10                	mov    DWORD PTR [eax],edx
c000bfa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfaa:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfde:	83 ec 08             	sub    esp,0x8
c000bfe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfe9:	e8 9c ff ff ff       	call   c000bf8a <Device::setName(char const*)>
c000bfee:	83 c4 10             	add    esp,0x10
c000bff1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bff9:	83 ec 0c             	sub    esp,0xc
c000bffc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c000:	e8 c6 ba ff ff       	call   c0007acb <malloc>
c000c005:	83 c4 10             	add    esp,0x10
c000c008:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c00e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c015:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c019:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c01f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c023:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c029:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c02f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c033:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c039:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c044:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c04b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c04f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c05a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c068:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c076:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c084:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c08e:	90                   	nop
c000c08f:	83 c4 1c             	add    esp,0x1c
c000c092:	c3                   	ret    
c000c093:	90                   	nop

c000c094 <Device::getName()>:
c000c094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c098:	05 d0 00 00 00       	add    eax,0xd0
c000c09d:	c3                   	ret    

c000c09e <DriverlessDevice::DriverlessDevice(char const*)>:
c000c09e:	83 ec 0c             	sub    esp,0xc
c000c0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a5:	83 ec 08             	sub    esp,0x8
c000c0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ac:	50                   	push   eax
c000c0ad:	e8 e6 fe ff ff       	call   c000bf98 <Device::Device(char const*)>
c000c0b2:	83 c4 10             	add    esp,0x10
c000c0b5:	ba 9c 04 02 c0       	mov    edx,0xc002049c
c000c0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0be:	89 10                	mov    DWORD PTR [eax],edx
c000c0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0ce:	90                   	nop
c000c0cf:	83 c4 0c             	add    esp,0xc
c000c0d2:	c3                   	ret    
c000c0d3:	90                   	nop

c000c0d4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0d4:	57                   	push   edi
c000c0d5:	56                   	push   esi
c000c0d6:	53                   	push   ebx
c000c0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0e3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0e9:	75 0c                	jne    c000c0f7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0eb:	52                   	push   edx
c000c0ec:	52                   	push   edx
c000c0ed:	53                   	push   ebx
c000c0ee:	56                   	push   esi
c000c0ef:	e8 ee 29 01 00       	call   c001eae2 <LinkedList<Device>::addElement(Device*)>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c100:	74 12                	je     c000c114 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c102:	50                   	push   eax
c000c103:	57                   	push   edi
c000c104:	56                   	push   esi
c000c105:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c108:	e8 c7 ff ff ff       	call   c000c0d4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c10d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c10f:	83 c4 10             	add    esp,0x10
c000c112:	eb e9                	jmp    c000c0fd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c114:	5b                   	pop    ebx
c000c115:	5e                   	pop    esi
c000c116:	5f                   	pop    edi
c000c117:	c3                   	ret    

c000c118 <getDevicesOfType(DeviceType)>:
c000c118:	53                   	push   ebx
c000c119:	83 ec 14             	sub    esp,0x14
c000c11c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c120:	53                   	push   ebx
c000c121:	e8 98 2a 01 00       	call   c001ebbe <LinkedList<Device>::LinkedList()>
c000c126:	83 c4 0c             	add    esp,0xc
c000c129:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c12d:	53                   	push   ebx
c000c12e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c134:	e8 9b ff ff ff       	call   c000c0d4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c139:	83 c4 18             	add    esp,0x18
c000c13c:	89 d8                	mov    eax,ebx
c000c13e:	5b                   	pop    ebx
c000c13f:	c2 04 00             	ret    0x4
c000c142:	66 90                	xchg   ax,ax

c000c144 <HardDiskController::HardDiskController(char const*)>:
c000c144:	83 ec 0c             	sub    esp,0xc
c000c147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14b:	83 ec 08             	sub    esp,0x8
c000c14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c152:	50                   	push   eax
c000c153:	e8 40 fe ff ff       	call   c000bf98 <Device::Device(char const*)>
c000c158:	83 c4 10             	add    esp,0x10
c000c15b:	ba c8 04 02 c0       	mov    edx,0xc00204c8
c000c160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c164:	89 10                	mov    DWORD PTR [eax],edx
c000c166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c16a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c174:	90                   	nop
c000c175:	83 c4 0c             	add    esp,0xc
c000c178:	c3                   	ret    
c000c179:	90                   	nop
c000c17a:	66 90                	xchg   ax,ax

c000c17c <HardDiskController::~HardDiskController()>:
c000c17c:	83 ec 0c             	sub    esp,0xc
c000c17f:	ba c8 04 02 c0       	mov    edx,0xc00204c8
c000c184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c188:	89 10                	mov    DWORD PTR [eax],edx
c000c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c18e:	83 ec 0c             	sub    esp,0xc
c000c191:	50                   	push   eax
c000c192:	e8 6b fb ff ff       	call   c000bd02 <Device::~Device()>
c000c197:	83 c4 10             	add    esp,0x10
c000c19a:	90                   	nop
c000c19b:	83 c4 0c             	add    esp,0xc
c000c19e:	c3                   	ret    
c000c19f:	90                   	nop

c000c1a0 <HardDiskController::~HardDiskController()>:
c000c1a0:	83 ec 0c             	sub    esp,0xc
c000c1a3:	83 ec 0c             	sub    esp,0xc
c000c1a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1aa:	e8 cd ff ff ff       	call   c000c17c <HardDiskController::~HardDiskController()>
c000c1af:	83 c4 10             	add    esp,0x10
c000c1b2:	83 ec 08             	sub    esp,0x8
c000c1b5:	68 58 01 00 00       	push   0x158
c000c1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1be:	e8 dd e6 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000c1c3:	83 c4 10             	add    esp,0x10
c000c1c6:	83 c4 0c             	add    esp,0xc
c000c1c9:	c3                   	ret    

c000c1ca <PhysicalDisk::eject()>:
c000c1ca:	83 c8 ff             	or     eax,0xffffffff
c000c1cd:	c3                   	ret    

c000c1ce <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1ce:	83 ec 0c             	sub    esp,0xc
c000c1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d5:	83 ec 08             	sub    esp,0x8
c000c1d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1dc:	50                   	push   eax
c000c1dd:	e8 b6 fd ff ff       	call   c000bf98 <Device::Device(char const*)>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	ba f4 04 02 c0       	mov    edx,0xc00204f4
c000c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ee:	89 10                	mov    DWORD PTR [eax],edx
c000c1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ff:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c218:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c21c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c226:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c230:	90                   	nop
c000c231:	83 c4 0c             	add    esp,0xc
c000c234:	c3                   	ret    
c000c235:	90                   	nop

c000c236 <PhysicalDisk::startCache()>:
c000c236:	56                   	push   esi
c000c237:	53                   	push   ebx
c000c238:	83 ec 10             	sub    esp,0x10
c000c23b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c23f:	6a 44                	push   0x44
c000c241:	e8 85 b8 ff ff       	call   c0007acb <malloc>
c000c246:	89 c6                	mov    esi,eax
c000c248:	58                   	pop    eax
c000c249:	5a                   	pop    edx
c000c24a:	53                   	push   ebx
c000c24b:	56                   	push   esi
c000c24c:	e8 83 17 00 00       	call   c000d9d4 <VCache::VCache(PhysicalDisk*)>
c000c251:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c257:	83 c4 14             	add    esp,0x14
c000c25a:	5b                   	pop    ebx
c000c25b:	5e                   	pop    esi
c000c25c:	c3                   	ret    
c000c25d:	90                   	nop

c000c25e <PhysicalDisk::~PhysicalDisk()>:
c000c25e:	83 ec 0c             	sub    esp,0xc
c000c261:	ba f4 04 02 c0       	mov    edx,0xc00204f4
c000c266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c26a:	89 10                	mov    DWORD PTR [eax],edx
c000c26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c270:	83 ec 0c             	sub    esp,0xc
c000c273:	50                   	push   eax
c000c274:	e8 89 fa ff ff       	call   c000bd02 <Device::~Device()>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	90                   	nop
c000c27d:	83 c4 0c             	add    esp,0xc
c000c280:	c3                   	ret    
c000c281:	90                   	nop

c000c282 <PhysicalDisk::~PhysicalDisk()>:
c000c282:	83 ec 0c             	sub    esp,0xc
c000c285:	83 ec 0c             	sub    esp,0xc
c000c288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c28c:	e8 cd ff ff ff       	call   c000c25e <PhysicalDisk::~PhysicalDisk()>
c000c291:	83 c4 10             	add    esp,0x10
c000c294:	83 ec 08             	sub    esp,0x8
c000c297:	68 6c 01 00 00       	push   0x16c
c000c29c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2a0:	e8 fb e5 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000c2a5:	83 c4 10             	add    esp,0x10
c000c2a8:	83 c4 0c             	add    esp,0xc
c000c2ab:	c3                   	ret    

c000c2ac <int_handler>:
c000c2ac:	55                   	push   ebp
c000c2ad:	57                   	push   edi
c000c2ae:	56                   	push   esi
c000c2af:	53                   	push   ebx
c000c2b0:	83 ec 0c             	sub    esp,0xc
c000c2b3:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2ba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c2be:	74 0b                	je     c000c2cb <int_handler+0x1f>
c000c2c0:	fa                   	cli    
c000c2c1:	f4                   	hlt    
c000c2c2:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2c9:	75 f5                	jne    c000c2c0 <int_handler+0x14>
c000c2cb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2ce:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2d1:	83 f8 17             	cmp    eax,0x17
c000c2d4:	76 40                	jbe    c000c316 <int_handler+0x6a>
c000c2d6:	c1 e6 04             	shl    esi,0x4
c000c2d9:	31 db                	xor    ebx,ebx
c000c2db:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2e1:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2e7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2eb:	85 c0                	test   eax,eax
c000c2ed:	74 13                	je     c000c302 <int_handler+0x56>
c000c2ef:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2f3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2f6:	74 2c                	je     c000c324 <int_handler+0x78>
c000c2f8:	83 ec 08             	sub    esp,0x8
c000c2fb:	52                   	push   edx
c000c2fc:	57                   	push   edi
c000c2fd:	ff d0                	call   eax
c000c2ff:	83 c4 10             	add    esp,0x10
c000c302:	83 c3 01             	add    ebx,0x1
c000c305:	83 fb 04             	cmp    ebx,0x4
c000c308:	75 dd                	jne    c000c2e7 <int_handler+0x3b>
c000c30a:	83 c4 0c             	add    esp,0xc
c000c30d:	31 c0                	xor    eax,eax
c000c30f:	5b                   	pop    ebx
c000c310:	31 d2                	xor    edx,edx
c000c312:	5e                   	pop    esi
c000c313:	5f                   	pop    edi
c000c314:	5d                   	pop    ebp
c000c315:	c3                   	ret    
c000c316:	83 ec 0c             	sub    esp,0xc
c000c319:	50                   	push   eax
c000c31a:	e8 81 af 00 00       	call   c00172a0 <HalEndOfInterrupt(int)>
c000c31f:	83 c4 10             	add    esp,0x10
c000c322:	eb b2                	jmp    c000c2d6 <int_handler+0x2a>
c000c324:	83 ec 08             	sub    esp,0x8
c000c327:	52                   	push   edx
c000c328:	57                   	push   edi
c000c329:	ff d0                	call   eax
c000c32b:	83 c4 10             	add    esp,0x10
c000c32e:	83 c4 0c             	add    esp,0xc
c000c331:	5b                   	pop    ebx
c000c332:	5e                   	pop    esi
c000c333:	5f                   	pop    edi
c000c334:	5d                   	pop    ebp
c000c335:	c3                   	ret    

c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c336:	56                   	push   esi
c000c337:	31 c0                	xor    eax,eax
c000c339:	53                   	push   ebx
c000c33a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c33e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c342:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c346:	89 ca                	mov    edx,ecx
c000c348:	c1 e2 04             	shl    edx,0x4
c000c34b:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c353:	74 17                	je     c000c36c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c355:	83 c0 01             	add    eax,0x1
c000c358:	83 f8 04             	cmp    eax,0x4
c000c35b:	75 ee                	jne    c000c34b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c35d:	c7 44 24 0c 24 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020524
c000c365:	5b                   	pop    ebx
c000c366:	5e                   	pop    esi
c000c367:	e9 fd 44 00 00       	jmp    c0010869 <KePanic(char const*)>
c000c36c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c36f:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c376:	5b                   	pop    ebx
c000c377:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c37e:	5e                   	pop    esi
c000c37f:	c3                   	ret    

c000c380 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c380:	55                   	push   ebp
c000c381:	57                   	push   edi
c000c382:	56                   	push   esi
c000c383:	53                   	push   ebx
c000c384:	83 ec 0c             	sub    esp,0xc
c000c387:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c38d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c391:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c395:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c39c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c39f:	74 57                	je     c000c3f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c3a1:	84 c0                	test   al,al
c000c3a3:	89 c7                	mov    edi,eax
c000c3a5:	74 1d                	je     c000c3c4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c3a7:	83 fe 0f             	cmp    esi,0xf
c000c3aa:	0f 8f d9 00 00 00    	jg     c000c489 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c3b0:	0f b6 b6 a0 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde060]
c000c3b7:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c3bf:	d1 ef                	shr    edi,1
c000c3c1:	83 e7 01             	and    edi,0x1
c000c3c4:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3c9:	83 ec 08             	sub    esp,0x8
c000c3cc:	31 db                	xor    ebx,ebx
c000c3ce:	50                   	push   eax
c000c3cf:	68 31 05 02 c0       	push   0xc0020531
c000c3d4:	e8 c5 e5 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000c3d9:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3de:	83 c4 10             	add    esp,0x10
c000c3e1:	85 c0                	test   eax,eax
c000c3e3:	7f 59                	jg     c000c43e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c3e5:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c3e8:	83 ec 0c             	sub    esp,0xc
c000c3eb:	68 48 05 02 c0       	push   0xc0020548
c000c3f0:	e8 74 44 00 00       	call   c0010869 <KePanic(char const*)>
c000c3f5:	83 c4 10             	add    esp,0x10
c000c3f8:	89 e8                	mov    eax,ebp
c000c3fa:	31 d2                	xor    edx,edx
c000c3fc:	c1 e0 04             	shl    eax,0x4
c000c3ff:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c406:	85 c9                	test   ecx,ecx
c000c408:	0f 84 92 00 00 00    	je     c000c4a0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c40e:	83 c2 01             	add    edx,0x1
c000c411:	83 fa 04             	cmp    edx,0x4
c000c414:	75 e9                	jne    c000c3ff <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c416:	83 ec 0c             	sub    esp,0xc
c000c419:	68 9c 05 02 c0       	push   0xc002059c
c000c41e:	e8 46 44 00 00       	call   c0010869 <KePanic(char const*)>
c000c423:	83 c4 10             	add    esp,0x10
c000c426:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c42b:	83 c4 0c             	add    esp,0xc
c000c42e:	5b                   	pop    ebx
c000c42f:	5e                   	pop    esi
c000c430:	5f                   	pop    edi
c000c431:	5d                   	pop    ebp
c000c432:	c3                   	ret    
c000c433:	83 c3 01             	add    ebx,0x1
c000c436:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c43c:	7e a7                	jle    c000c3e5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c43e:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c445:	83 ec 08             	sub    esp,0x8
c000c448:	56                   	push   esi
c000c449:	55                   	push   ebp
c000c44a:	e8 c5 15 01 00       	call   c001da14 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c44f:	83 c4 10             	add    esp,0x10
c000c452:	84 c0                	test   al,al
c000c454:	74 dd                	je     c000c433 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c456:	89 f8                	mov    eax,edi
c000c458:	83 ec 04             	sub    esp,0x4
c000c45b:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c462:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c465:	0f b6 f8             	movzx  edi,al
c000c468:	57                   	push   edi
c000c469:	89 e8                	mov    eax,ebp
c000c46b:	6a 00                	push   0x0
c000c46d:	0f b6 c0             	movzx  eax,al
c000c470:	50                   	push   eax
c000c471:	89 f0                	mov    eax,esi
c000c473:	6a 00                	push   0x0
c000c475:	0f b6 c0             	movzx  eax,al
c000c478:	6a 00                	push   0x0
c000c47a:	50                   	push   eax
c000c47b:	53                   	push   ebx
c000c47c:	e8 ff 16 01 00       	call   c001db80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c481:	83 c4 20             	add    esp,0x20
c000c484:	e9 6f ff ff ff       	jmp    c000c3f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c489:	83 ec 0c             	sub    esp,0xc
c000c48c:	31 ff                	xor    edi,edi
c000c48e:	68 64 05 02 c0       	push   0xc0020564
c000c493:	e8 d1 43 00 00       	call   c0010869 <KePanic(char const*)>
c000c498:	83 c4 10             	add    esp,0x10
c000c49b:	e9 24 ff ff ff       	jmp    c000c3c4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c4a0:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c4a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c4a7:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c4ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c4b2:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c4b9:	83 c4 0c             	add    esp,0xc
c000c4bc:	89 f0                	mov    eax,esi
c000c4be:	5b                   	pop    ebx
c000c4bf:	5e                   	pop    esi
c000c4c0:	5f                   	pop    edi
c000c4c1:	5d                   	pop    ebp
c000c4c2:	c3                   	ret    

c000c4c3 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4cb:	c1 e0 04             	shl    eax,0x4
c000c4ce:	8d 50 10             	lea    edx,[eax+0x10]
c000c4d1:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4d7:	74 08                	je     c000c4e1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4d9:	83 c0 04             	add    eax,0x4
c000c4dc:	39 d0                	cmp    eax,edx
c000c4de:	75 f1                	jne    c000c4d1 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4e0:	c3                   	ret    
c000c4e1:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4eb:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4f5:	eb e2                	jmp    c000c4d9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4f7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4f7:	56                   	push   esi
c000c4f8:	53                   	push   ebx
c000c4f9:	83 ec 04             	sub    esp,0x4
c000c4fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c501:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c505:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c509:	74 0e                	je     c000c519 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c50b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c510:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c517:	75 34                	jne    c000c54d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c519:	8d 43 20             	lea    eax,[ebx+0x20]
c000c51c:	c1 e0 04             	shl    eax,0x4
c000c51f:	8d 50 10             	lea    edx,[eax+0x10]
c000c522:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c528:	74 0d                	je     c000c537 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c52a:	83 c0 04             	add    eax,0x4
c000c52d:	39 d0                	cmp    eax,edx
c000c52f:	75 f1                	jne    c000c522 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c531:	83 c4 04             	add    esp,0x4
c000c534:	5b                   	pop    ebx
c000c535:	5e                   	pop    esi
c000c536:	c3                   	ret    
c000c537:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c541:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c54b:	eb dd                	jmp    c000c52a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c54d:	83 fb 0f             	cmp    ebx,0xf
c000c550:	7f 09                	jg     c000c55b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c552:	0f b6 9b a0 1f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde060]
c000c559:	eb be                	jmp    c000c519 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c55b:	83 ec 0c             	sub    esp,0xc
c000c55e:	68 55 05 02 c0       	push   0xc0020555
c000c563:	e8 01 43 00 00       	call   c0010869 <KePanic(char const*)>
c000c568:	83 c4 10             	add    esp,0x10
c000c56b:	eb ac                	jmp    c000c519 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c56d <setupINTS()>:
c000c56d:	31 c0                	xor    eax,eax
c000c56f:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c579:	83 c0 10             	add    eax,0x10
c000c57c:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c586:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c590:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c59a:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c5a4:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c5ae:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c5b8:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c5c2:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5c7:	75 a6                	jne    c000c56f <setupINTS()+0x2>
c000c5c9:	c3                   	ret    

c000c5ca <convertLegacyIRQNumber(int)>:
c000c5ca:	83 ec 0c             	sub    esp,0xc
c000c5cd:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5de:	74 0c                	je     c000c5ec <convertLegacyIRQNumber(int)+0x22>
c000c5e0:	83 f8 0f             	cmp    eax,0xf
c000c5e3:	7f 0b                	jg     c000c5f0 <convertLegacyIRQNumber(int)+0x26>
c000c5e5:	0f b6 80 a0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde060]
c000c5ec:	83 c4 0c             	add    esp,0xc
c000c5ef:	c3                   	ret    
c000c5f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	68 64 05 02 c0       	push   0xc0020564
c000c5fc:	e8 68 42 00 00       	call   c0010869 <KePanic(char const*)>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c608:	83 c4 0c             	add    esp,0xc
c000c60b:	c3                   	ret    

c000c60c <startGUI(void*)>:
c000c60c:	55                   	push   ebp
c000c60d:	89 e5                	mov    ebp,esp
c000c60f:	53                   	push   ebx
c000c610:	83 ec 04             	sub    esp,0x4
c000c613:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c618:	83 e8 01             	sub    eax,0x1
c000c61b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c620:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c625:	85 c0                	test   eax,eax
c000c627:	75 01                	jne    c000c62a <startGUI(void*)+0x1e>
c000c629:	fb                   	sti    
c000c62a:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c630:	83 ec 08             	sub    esp,0x8
c000c633:	6a 01                	push   0x1
c000c635:	68 c1 05 02 c0       	push   0xc00205c1
c000c63a:	e8 b9 7f 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c000c63f:	83 c4 10             	add    esp,0x10
c000c642:	83 ec 08             	sub    esp,0x8
c000c645:	53                   	push   ebx
c000c646:	50                   	push   eax
c000c647:	e8 ec 81 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c655:	83 ec 08             	sub    esp,0x8
c000c658:	6a 01                	push   0x1
c000c65a:	68 db 05 02 c0       	push   0xc00205db
c000c65f:	e8 94 7f 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c000c664:	83 c4 10             	add    esp,0x10
c000c667:	83 ec 08             	sub    esp,0x8
c000c66a:	53                   	push   ebx
c000c66b:	50                   	push   eax
c000c66c:	e8 c7 81 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c000c671:	83 c4 10             	add    esp,0x10
c000c674:	90                   	nop
c000c675:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c678:	c9                   	leave  
c000c679:	c3                   	ret    

c000c67a <startGUIVESA(void*)>:
c000c67a:	55                   	push   ebp
c000c67b:	89 e5                	mov    ebp,esp
c000c67d:	53                   	push   ebx
c000c67e:	83 ec 04             	sub    esp,0x4
c000c681:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c686:	83 e8 01             	sub    eax,0x1
c000c689:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c68e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c693:	85 c0                	test   eax,eax
c000c695:	75 01                	jne    c000c698 <startGUIVESA(void*)+0x1e>
c000c697:	fb                   	sti    
c000c698:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c69e:	83 ec 08             	sub    esp,0x8
c000c6a1:	6a 01                	push   0x1
c000c6a3:	68 f9 05 02 c0       	push   0xc00205f9
c000c6a8:	e8 4b 7f 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c000c6ad:	83 c4 10             	add    esp,0x10
c000c6b0:	83 ec 08             	sub    esp,0x8
c000c6b3:	53                   	push   ebx
c000c6b4:	50                   	push   eax
c000c6b5:	e8 7e 81 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c000c6ba:	83 c4 10             	add    esp,0x10
c000c6bd:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6c3:	83 ec 08             	sub    esp,0x8
c000c6c6:	6a 01                	push   0x1
c000c6c8:	68 db 05 02 c0       	push   0xc00205db
c000c6cd:	e8 26 7f 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	83 ec 08             	sub    esp,0x8
c000c6d8:	53                   	push   ebx
c000c6d9:	50                   	push   eax
c000c6da:	e8 59 81 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	90                   	nop
c000c6e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c6e6:	c9                   	leave  
c000c6e7:	c3                   	ret    

c000c6e8 <sendKeyToTerminal(unsigned char)>:
c000c6e8:	55                   	push   ebp
c000c6e9:	89 e5                	mov    ebp,esp
c000c6eb:	83 ec 28             	sub    esp,0x28
c000c6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6f4:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6f9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6fd:	83 ec 08             	sub    esp,0x8
c000c700:	52                   	push   edx
c000c701:	50                   	push   eax
c000c702:	e8 9f c6 ff ff       	call   c0008da6 <VgaText::receiveKey(unsigned char)>
c000c707:	83 c4 10             	add    esp,0x10
c000c70a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c70e:	83 f8 0a             	cmp    eax,0xa
c000c711:	74 16                	je     c000c729 <sendKeyToTerminal(unsigned char)+0x41>
c000c713:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c717:	83 f8 03             	cmp    eax,0x3
c000c71a:	74 0d                	je     c000c729 <sendKeyToTerminal(unsigned char)+0x41>
c000c71c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c720:	83 f8 1c             	cmp    eax,0x1c
c000c723:	0f 85 97 00 00 00    	jne    c000c7c0 <sendKeyToTerminal(unsigned char)+0xd8>
c000c729:	fa                   	cli    
c000c72a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c72f:	83 c0 01             	add    eax,0x1
c000c732:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c737:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c73c:	83 c0 01             	add    eax,0x1
c000c73f:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c744:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c749:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c74c:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c756:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c75a:	74 1f                	je     c000c77b <sendKeyToTerminal(unsigned char)+0x93>
c000c75c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c75f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c762:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c765:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c768:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c76b:	83 ec 0c             	sub    esp,0xc
c000c76e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c771:	e8 e6 8d 00 00       	call   c001555c <unblockTask(ThreadControlBlock*)>
c000c776:	83 c4 10             	add    esp,0x10
c000c779:	eb db                	jmp    c000c756 <sendKeyToTerminal(unsigned char)+0x6e>
c000c77b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c780:	83 e8 01             	sub    eax,0x1
c000c783:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c788:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c78d:	85 c0                	test   eax,eax
c000c78f:	75 18                	jne    c000c7a9 <sendKeyToTerminal(unsigned char)+0xc1>
c000c791:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c796:	85 c0                	test   eax,eax
c000c798:	74 0f                	je     c000c7a9 <sendKeyToTerminal(unsigned char)+0xc1>
c000c79a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c7a4:	e8 bb 88 00 00       	call   c0015064 <schedule()>
c000c7a9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7ae:	83 e8 01             	sub    eax,0x1
c000c7b1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7b6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7bb:	85 c0                	test   eax,eax
c000c7bd:	75 01                	jne    c000c7c0 <sendKeyToTerminal(unsigned char)+0xd8>
c000c7bf:	fb                   	sti    
c000c7c0:	90                   	nop
c000c7c1:	c9                   	leave  
c000c7c2:	c3                   	ret    

c000c7c3 <sendKeyboardToken(KeyboardToken)>:
c000c7c3:	55                   	push   ebp
c000c7c4:	89 e5                	mov    ebp,esp
c000c7c6:	83 ec 18             	sub    esp,0x18
c000c7c9:	e8 eb 40 00 00       	call   c00108b9 <Krnl::userIOReceived()>
c000c7ce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d4:	0f b7 c0             	movzx  eax,ax
c000c7d7:	83 f2 01             	xor    edx,0x1
c000c7da:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7e0:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7e5:	85 c0                	test   eax,eax
c000c7e7:	74 24                	je     c000c80d <sendKeyboardToken(KeyboardToken)+0x4a>
c000c7e9:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000c7ef:	83 ec 04             	sub    esp,0x4
c000c7f2:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7f7:	83 ec 08             	sub    esp,0x8
c000c7fa:	89 e0                	mov    eax,esp
c000c7fc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c7ff:	89 08                	mov    DWORD PTR [eax],ecx
c000c801:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c804:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000c808:	ff d2                	call   edx
c000c80a:	83 c4 10             	add    esp,0x10
c000c80d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c811:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c814:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c819:	0f b6 d2             	movzx  edx,dl
c000c81c:	0f b6 c0             	movzx  eax,al
c000c81f:	39 c2                	cmp    edx,eax
c000c821:	74 1c                	je     c000c83f <sendKeyboardToken(KeyboardToken)+0x7c>
c000c823:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c826:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c82b:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c830:	0f b6 c0             	movzx  eax,al
c000c833:	83 ec 0c             	sub    esp,0xc
c000c836:	50                   	push   eax
c000c837:	e8 c6 bc ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000c83c:	83 c4 10             	add    esp,0x10
c000c83f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c842:	0f b6 c0             	movzx  eax,al
c000c845:	85 c0                	test   eax,eax
c000c847:	0f 84 da 00 00 00    	je     c000c927 <sendKeyboardToken(KeyboardToken)+0x164>
c000c84d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c850:	0f b7 c0             	movzx  eax,ax
c000c853:	3d 18 03 00 00       	cmp    eax,0x318
c000c858:	75 06                	jne    c000c860 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c85a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c863:	0f b7 c0             	movzx  eax,ax
c000c866:	3d 19 03 00 00       	cmp    eax,0x319
c000c86b:	75 06                	jne    c000c873 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c86d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c876:	0f b7 c0             	movzx  eax,ax
c000c879:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c87e:	75 06                	jne    c000c886 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c880:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c889:	0f b7 c0             	movzx  eax,ax
c000c88c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c891:	75 06                	jne    c000c899 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c893:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89c:	0f b7 c0             	movzx  eax,ax
c000c89f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c8a4:	75 06                	jne    c000c8ac <sendKeyboardToken(KeyboardToken)+0xe9>
c000c8a6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c8ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8af:	0f b7 c0             	movzx  eax,ax
c000c8b2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8b7:	75 06                	jne    c000c8bf <sendKeyboardToken(KeyboardToken)+0xfc>
c000c8b9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c2:	0f b7 c0             	movzx  eax,ax
c000c8c5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8ca:	75 06                	jne    c000c8d2 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c8cc:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d5:	0f b7 c0             	movzx  eax,ax
c000c8d8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8dd:	75 06                	jne    c000c8e5 <sendKeyboardToken(KeyboardToken)+0x122>
c000c8df:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e8:	0f b7 c0             	movzx  eax,ax
c000c8eb:	3d 20 03 00 00       	cmp    eax,0x320
c000c8f0:	75 06                	jne    c000c8f8 <sendKeyboardToken(KeyboardToken)+0x135>
c000c8f2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fb:	0f b7 c0             	movzx  eax,ax
c000c8fe:	3d 21 03 00 00       	cmp    eax,0x321
c000c903:	75 06                	jne    c000c90b <sendKeyboardToken(KeyboardToken)+0x148>
c000c905:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c90b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90e:	0f b7 c0             	movzx  eax,ax
c000c911:	3d 22 03 00 00       	cmp    eax,0x322
c000c916:	0f 85 f1 00 00 00    	jne    c000ca0d <sendKeyboardToken(KeyboardToken)+0x24a>
c000c91c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c922:	e9 e6 00 00 00       	jmp    c000ca0d <sendKeyboardToken(KeyboardToken)+0x24a>
c000c927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92a:	0f b7 c0             	movzx  eax,ax
c000c92d:	3d 18 03 00 00       	cmp    eax,0x318
c000c932:	75 0a                	jne    c000c93e <sendKeyboardToken(KeyboardToken)+0x17b>
c000c934:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c93a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c93e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c941:	0f b7 c0             	movzx  eax,ax
c000c944:	3d 19 03 00 00       	cmp    eax,0x319
c000c949:	75 0a                	jne    c000c955 <sendKeyboardToken(KeyboardToken)+0x192>
c000c94b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c951:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c958:	0f b7 c0             	movzx  eax,ax
c000c95b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c960:	75 0a                	jne    c000c96c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c962:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c968:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c96c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96f:	0f b7 c0             	movzx  eax,ax
c000c972:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c977:	75 0a                	jne    c000c983 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c979:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c97f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c986:	0f b7 c0             	movzx  eax,ax
c000c989:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c98e:	75 0a                	jne    c000c99a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c990:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c996:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c99a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99d:	0f b7 c0             	movzx  eax,ax
c000c9a0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c9a5:	75 0a                	jne    c000c9b1 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c9a7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b4:	0f b7 c0             	movzx  eax,ax
c000c9b7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9bc:	75 0a                	jne    c000c9c8 <sendKeyboardToken(KeyboardToken)+0x205>
c000c9be:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9cb:	0f b7 c0             	movzx  eax,ax
c000c9ce:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9d3:	75 0a                	jne    c000c9df <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9d5:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9db:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e2:	0f b7 c0             	movzx  eax,ax
c000c9e5:	3d 20 03 00 00       	cmp    eax,0x320
c000c9ea:	75 0a                	jne    c000c9f6 <sendKeyboardToken(KeyboardToken)+0x233>
c000c9ec:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9f9:	0f b7 c0             	movzx  eax,ax
c000c9fc:	3d 21 03 00 00       	cmp    eax,0x321
c000ca01:	75 0a                	jne    c000ca0d <sendKeyboardToken(KeyboardToken)+0x24a>
c000ca03:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca09:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca10:	0f b7 c0             	movzx  eax,ax
c000ca13:	3d 00 02 00 00       	cmp    eax,0x200
c000ca18:	75 2f                	jne    c000ca49 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca1a:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca1f:	83 f0 01             	xor    eax,0x1
c000ca22:	0f b6 c0             	movzx  eax,al
c000ca25:	85 c0                	test   eax,eax
c000ca27:	74 20                	je     c000ca49 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca29:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca2e:	6a 01                	push   0x1
c000ca30:	6a 00                	push   0x0
c000ca32:	68 0c c6 00 c0       	push   0xc000c60c
c000ca37:	50                   	push   eax
c000ca38:	e8 db 83 00 00       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c000ca3d:	83 c4 10             	add    esp,0x10
c000ca40:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca47:	eb 3a                	jmp    c000ca83 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4c:	0f b7 c0             	movzx  eax,ax
c000ca4f:	3d 01 02 00 00       	cmp    eax,0x201
c000ca54:	75 2d                	jne    c000ca83 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca56:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca5b:	83 f0 01             	xor    eax,0x1
c000ca5e:	0f b6 c0             	movzx  eax,al
c000ca61:	85 c0                	test   eax,eax
c000ca63:	74 1e                	je     c000ca83 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca65:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca6a:	6a 01                	push   0x1
c000ca6c:	6a 00                	push   0x0
c000ca6e:	68 7a c6 00 c0       	push   0xc000c67a
c000ca73:	50                   	push   eax
c000ca74:	e8 9f 83 00 00       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca86:	0f b7 c0             	movzx  eax,ax
c000ca89:	3d 25 03 00 00       	cmp    eax,0x325
c000ca8e:	75 06                	jne    c000ca96 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca90:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca99:	0f b7 c0             	movzx  eax,ax
c000ca9c:	3d 24 03 00 00       	cmp    eax,0x324
c000caa1:	75 06                	jne    c000caa9 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000caa3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000caa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caac:	0f b7 c0             	movzx  eax,ax
c000caaf:	3d 23 03 00 00       	cmp    eax,0x323
c000cab4:	75 06                	jne    c000cabc <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cab6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cabc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cabf:	0f b7 c0             	movzx  eax,ax
c000cac2:	3d 26 03 00 00       	cmp    eax,0x326
c000cac7:	75 06                	jne    c000cacf <sendKeyboardToken(KeyboardToken)+0x30c>
c000cac9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cacf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad2:	0f b7 c0             	movzx  eax,ax
c000cad5:	3d 27 03 00 00       	cmp    eax,0x327
c000cada:	75 06                	jne    c000cae2 <sendKeyboardToken(KeyboardToken)+0x31f>
c000cadc:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae5:	0f b7 c0             	movzx  eax,ax
c000cae8:	3d 22 03 00 00       	cmp    eax,0x322
c000caed:	75 06                	jne    c000caf5 <sendKeyboardToken(KeyboardToken)+0x332>
c000caef:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000caf5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000caf9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cafc:	83 f0 01             	xor    eax,0x1
c000caff:	0f b6 c0             	movzx  eax,al
c000cb02:	85 c0                	test   eax,eax
c000cb04:	74 7c                	je     c000cb82 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cb06:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cb0b:	0f b6 c0             	movzx  eax,al
c000cb0e:	85 c0                	test   eax,eax
c000cb10:	74 43                	je     c000cb55 <sendKeyboardToken(KeyboardToken)+0x392>
c000cb12:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb16:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cb1a:	85 c0                	test   eax,eax
c000cb1c:	74 2b                	je     c000cb49 <sendKeyboardToken(KeyboardToken)+0x386>
c000cb1e:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb24:	89 d0                	mov    eax,edx
c000cb26:	c1 e0 02             	shl    eax,0x2
c000cb29:	01 d0                	add    eax,edx
c000cb2b:	d1 e0                	shl    eax,1
c000cb2d:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb35:	0f b7 c0             	movzx  eax,ax
c000cb38:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb3b:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb40:	01 d0                	add    eax,edx
c000cb42:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb47:	eb 71                	jmp    c000cbba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb49:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb53:	eb 65                	jmp    c000cbba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb55:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb5a:	85 c0                	test   eax,eax
c000cb5c:	74 18                	je     c000cb76 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb5e:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb63:	0f b6 c0             	movzx  eax,al
c000cb66:	83 ec 0c             	sub    esp,0xc
c000cb69:	50                   	push   eax
c000cb6a:	e8 79 fb ff ff       	call   c000c6e8 <sendKeyToTerminal(unsigned char)>
c000cb6f:	83 c4 10             	add    esp,0x10
c000cb72:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb76:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb80:	eb 38                	jmp    c000cbba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb85:	0f b7 c0             	movzx  eax,ax
c000cb88:	3d 01 01 00 00       	cmp    eax,0x101
c000cb8d:	75 2b                	jne    c000cbba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb8f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb94:	85 c0                	test   eax,eax
c000cb96:	74 18                	je     c000cbb0 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb98:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb9d:	0f b6 c0             	movzx  eax,al
c000cba0:	83 ec 0c             	sub    esp,0xc
c000cba3:	50                   	push   eax
c000cba4:	e8 3f fb ff ff       	call   c000c6e8 <sendKeyToTerminal(unsigned char)>
c000cba9:	83 c4 10             	add    esp,0x10
c000cbac:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbb0:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbba:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbbd:	83 f0 01             	xor    eax,0x1
c000cbc0:	0f b6 c0             	movzx  eax,al
c000cbc3:	85 c0                	test   eax,eax
c000cbc5:	74 5a                	je     c000cc21 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbc7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbca:	83 f0 01             	xor    eax,0x1
c000cbcd:	0f b6 c0             	movzx  eax,al
c000cbd0:	85 c0                	test   eax,eax
c000cbd2:	74 4d                	je     c000cc21 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbd4:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbd9:	83 f0 01             	xor    eax,0x1
c000cbdc:	0f b6 c0             	movzx  eax,al
c000cbdf:	85 c0                	test   eax,eax
c000cbe1:	74 3e                	je     c000cc21 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe6:	0f b7 c0             	movzx  eax,ax
c000cbe9:	83 f8 1f             	cmp    eax,0x1f
c000cbec:	76 0b                	jbe    c000cbf9 <sendKeyboardToken(KeyboardToken)+0x436>
c000cbee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf1:	0f b7 c0             	movzx  eax,ax
c000cbf4:	83 f8 7e             	cmp    eax,0x7e
c000cbf7:	76 16                	jbe    c000cc0f <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfc:	0f b7 c0             	movzx  eax,ax
c000cbff:	83 f8 0a             	cmp    eax,0xa
c000cc02:	74 0b                	je     c000cc0f <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc07:	0f b7 c0             	movzx  eax,ax
c000cc0a:	83 f8 08             	cmp    eax,0x8
c000cc0d:	75 12                	jne    c000cc21 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cc0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc12:	0f b6 c0             	movzx  eax,al
c000cc15:	83 ec 0c             	sub    esp,0xc
c000cc18:	50                   	push   eax
c000cc19:	e8 ca fa ff ff       	call   c000c6e8 <sendKeyToTerminal(unsigned char)>
c000cc1e:	83 c4 10             	add    esp,0x10
c000cc21:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc24:	83 f0 01             	xor    eax,0x1
c000cc27:	0f b6 c0             	movzx  eax,al
c000cc2a:	85 c0                	test   eax,eax
c000cc2c:	74 5d                	je     c000cc8b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc2e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc31:	83 f0 01             	xor    eax,0x1
c000cc34:	0f b6 c0             	movzx  eax,al
c000cc37:	85 c0                	test   eax,eax
c000cc39:	74 50                	je     c000cc8b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc3b:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc40:	0f b6 c0             	movzx  eax,al
c000cc43:	85 c0                	test   eax,eax
c000cc45:	74 44                	je     c000cc8b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4a:	0f b7 c0             	movzx  eax,ax
c000cc4d:	83 f8 3f             	cmp    eax,0x3f
c000cc50:	76 39                	jbe    c000cc8b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc55:	0f b7 c0             	movzx  eax,ax
c000cc58:	83 f8 7f             	cmp    eax,0x7f
c000cc5b:	77 2e                	ja     c000cc8b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc60:	88 c2                	mov    dl,al
c000cc62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc65:	0f b7 c0             	movzx  eax,ax
c000cc68:	83 f8 5f             	cmp    eax,0x5f
c000cc6b:	76 04                	jbe    c000cc71 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc6d:	b0 20                	mov    al,0x20
c000cc6f:	eb 02                	jmp    c000cc73 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc71:	b0 00                	mov    al,0x0
c000cc73:	89 d1                	mov    ecx,edx
c000cc75:	29 c1                	sub    ecx,eax
c000cc77:	89 c8                	mov    eax,ecx
c000cc79:	83 e8 40             	sub    eax,0x40
c000cc7c:	0f b6 c0             	movzx  eax,al
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	50                   	push   eax
c000cc83:	e8 60 fa ff ff       	call   c000c6e8 <sendKeyToTerminal(unsigned char)>
c000cc88:	83 c4 10             	add    esp,0x10
c000cc8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc8e:	0f b7 c0             	movzx  eax,ax
c000cc91:	3d 00 03 00 00       	cmp    eax,0x300
c000cc96:	75 12                	jne    c000ccaa <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc98:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc9b:	83 f0 01             	xor    eax,0x1
c000cc9e:	0f b6 c0             	movzx  eax,al
c000cca1:	85 c0                	test   eax,eax
c000cca3:	74 05                	je     c000ccaa <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cca5:	e8 59 b8 ff ff       	call   c0008503 <doTerminalCycle()>
c000ccaa:	90                   	nop
c000ccab:	c9                   	leave  
c000ccac:	c3                   	ret    

c000ccad <clearInternalKeybuffer(VgaText*)>:
c000ccad:	55                   	push   ebp
c000ccae:	89 e5                	mov    ebp,esp
c000ccb0:	83 ec 08             	sub    esp,0x8
c000ccb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb6:	05 02 01 00 00       	add    eax,0x102
c000ccbb:	83 ec 0c             	sub    esp,0xc
c000ccbe:	50                   	push   eax
c000ccbf:	e8 bc 38 ff ff       	call   c0000580 <strlen>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccca:	81 c2 02 01 00 00    	add    edx,0x102
c000ccd0:	83 ec 04             	sub    esp,0x4
c000ccd3:	50                   	push   eax
c000ccd4:	6a 00                	push   0x0
c000ccd6:	52                   	push   edx
c000ccd7:	e8 14 38 ff ff       	call   c00004f0 <memset>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	90                   	nop
c000cce0:	c9                   	leave  
c000cce1:	c3                   	ret    

c000cce2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cce2:	55                   	push   ebp
c000cce3:	89 e5                	mov    ebp,esp
c000cce5:	83 ec 18             	sub    esp,0x18
c000cce8:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cced:	85 c0                	test   eax,eax
c000ccef:	74 2a                	je     c000cd1b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ccf1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ccf7:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000ccfd:	83 ec 04             	sub    esp,0x4
c000cd00:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cd05:	83 ec 08             	sub    esp,0x8
c000cd08:	89 e0                	mov    eax,esp
c000cd0a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000cd0d:	89 08                	mov    DWORD PTR [eax],ecx
c000cd0f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000cd12:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cd16:	ff d2                	call   edx
c000cd18:	83 c4 10             	add    esp,0x10
c000cd1b:	fb                   	sti    
c000cd1c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd23:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd27:	0f 84 0d 01 00 00    	je     c000ce3a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cd2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd30:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd36:	0f be c0             	movsx  eax,al
c000cd39:	85 c0                	test   eax,eax
c000cd3b:	75 2c                	jne    c000cd69 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd3d:	fa                   	cli    
c000cd3e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd43:	83 c0 01             	add    eax,0x1
c000cd46:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd4b:	e8 14 83 00 00       	call   c0015064 <schedule()>
c000cd50:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd55:	83 e8 01             	sub    eax,0x1
c000cd58:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd5d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd62:	85 c0                	test   eax,eax
c000cd64:	75 c7                	jne    c000cd2d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd66:	fb                   	sti    
c000cd67:	eb c4                	jmp    c000cd2d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd6c:	8d 50 01             	lea    edx,[eax+0x1]
c000cd6f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd72:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd75:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd7b:	88 10                	mov    BYTE PTR [eax],dl
c000cd7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd80:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd86:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd89:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd8d:	83 f8 03             	cmp    eax,0x3
c000cd90:	75 1e                	jne    c000cdb0 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd92:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd97:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd9c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cda2:	83 ec 08             	sub    esp,0x8
c000cda5:	6a 02                	push   0x2
c000cda7:	50                   	push   eax
c000cda8:	e8 56 3f 00 00       	call   c0010d03 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdb4:	83 f8 1c             	cmp    eax,0x1c
c000cdb7:	75 1e                	jne    c000cdd7 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cdb9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdc3:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdc9:	83 ec 08             	sub    esp,0x8
c000cdcc:	6a 09                	push   0x9
c000cdce:	50                   	push   eax
c000cdcf:	e8 2f 3f 00 00       	call   c0010d03 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdda:	05 02 01 00 00       	add    eax,0x102
c000cddf:	83 ec 0c             	sub    esp,0xc
c000cde2:	50                   	push   eax
c000cde3:	e8 98 37 ff ff       	call   c0000580 <strlen>
c000cde8:	83 c4 10             	add    esp,0x10
c000cdeb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdee:	81 c2 02 01 00 00    	add    edx,0x102
c000cdf4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cdf7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdfa:	81 c2 02 01 00 00    	add    edx,0x102
c000ce00:	83 ec 04             	sub    esp,0x4
c000ce03:	50                   	push   eax
c000ce04:	51                   	push   ecx
c000ce05:	52                   	push   edx
c000ce06:	e8 c5 35 ff ff       	call   c00003d0 <memmove>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ce12:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ce16:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce1a:	83 f8 0a             	cmp    eax,0xa
c000ce1d:	74 16                	je     c000ce35 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce1f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce23:	83 f8 03             	cmp    eax,0x3
c000ce26:	74 0d                	je     c000ce35 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce28:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce2c:	83 f8 1c             	cmp    eax,0x1c
c000ce2f:	0f 85 ee fe ff ff    	jne    c000cd23 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce38:	eb 03                	jmp    c000ce3d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce3d:	c9                   	leave  
c000ce3e:	c3                   	ret    
c000ce3f:	90                   	nop

c000ce40 <Keyboard::Keyboard(char const*)>:
c000ce40:	83 ec 0c             	sub    esp,0xc
c000ce43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4e:	50                   	push   eax
c000ce4f:	e8 44 f1 ff ff       	call   c000bf98 <Device::Device(char const*)>
c000ce54:	83 c4 10             	add    esp,0x10
c000ce57:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c000ce5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce60:	89 10                	mov    DWORD PTR [eax],edx
c000ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce66:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce70:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce77:	90                   	nop
c000ce78:	83 c4 0c             	add    esp,0xc
c000ce7b:	c3                   	ret    

c000ce7c <Keyboard::~Keyboard()>:
c000ce7c:	83 ec 0c             	sub    esp,0xc
c000ce7f:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c000ce84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce88:	89 10                	mov    DWORD PTR [eax],edx
c000ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8e:	83 ec 0c             	sub    esp,0xc
c000ce91:	50                   	push   eax
c000ce92:	e8 6b ee ff ff       	call   c000bd02 <Device::~Device()>
c000ce97:	83 c4 10             	add    esp,0x10
c000ce9a:	90                   	nop
c000ce9b:	83 c4 0c             	add    esp,0xc
c000ce9e:	c3                   	ret    
c000ce9f:	90                   	nop

c000cea0 <Keyboard::~Keyboard()>:
c000cea0:	83 ec 0c             	sub    esp,0xc
c000cea3:	83 ec 0c             	sub    esp,0xc
c000cea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceaa:	e8 cd ff ff ff       	call   c000ce7c <Keyboard::~Keyboard()>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	83 ec 08             	sub    esp,0x8
c000ceb5:	68 5c 01 00 00       	push   0x15c
c000ceba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cebe:	e8 dd d9 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	83 c4 0c             	add    esp,0xc
c000cec9:	c3                   	ret    

c000ceca <LogicalDisk::close(int, int, void*)>:
c000ceca:	83 c8 ff             	or     eax,0xffffffff
c000cecd:	c3                   	ret    

c000cece <LogicalDisk::~LogicalDisk()>:
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	ba 94 06 02 c0       	mov    edx,0xc0020694
c000ced6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceda:	89 10                	mov    DWORD PTR [eax],edx
c000cedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	50                   	push   eax
c000cee4:	e8 19 ee ff ff       	call   c000bd02 <Device::~Device()>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	90                   	nop
c000ceed:	83 c4 0c             	add    esp,0xc
c000cef0:	c3                   	ret    
c000cef1:	90                   	nop

c000cef2 <LogicalDisk::~LogicalDisk()>:
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	83 ec 0c             	sub    esp,0xc
c000cef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefc:	e8 cd ff ff ff       	call   c000cece <LogicalDisk::~LogicalDisk()>
c000cf01:	83 c4 10             	add    esp,0x10
c000cf04:	83 ec 08             	sub    esp,0x8
c000cf07:	68 78 01 00 00       	push   0x178
c000cf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf10:	e8 8b d9 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000cf15:	83 c4 10             	add    esp,0x10
c000cf18:	83 c4 0c             	add    esp,0xc
c000cf1b:	c3                   	ret    

c000cf1c <LogicalDisk::open(int, int, void*)>:
c000cf1c:	83 ec 18             	sub    esp,0x18
c000cf1f:	68 48 06 02 c0       	push   0xc0020648
c000cf24:	e8 40 39 00 00       	call   c0010869 <KePanic(char const*)>
c000cf29:	83 c8 ff             	or     eax,0xffffffff
c000cf2c:	83 c4 1c             	add    esp,0x1c
c000cf2f:	c3                   	ret    

c000cf30 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf30:	53                   	push   ebx
c000cf31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf3d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf43:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf49:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf4f:	77 10                	ja     c000cf61 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf51:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf57:	89 d3                	mov    ebx,edx
c000cf59:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf5f:	72 05                	jb     c000cf66 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf61:	83 c8 ff             	or     eax,0xffffffff
c000cf64:	89 c2                	mov    edx,eax
c000cf66:	5b                   	pop    ebx
c000cf67:	c3                   	ret    

c000cf68 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf68:	56                   	push   esi
c000cf69:	83 c8 ff             	or     eax,0xffffffff
c000cf6c:	53                   	push   ebx
c000cf6d:	89 c2                	mov    edx,eax
c000cf6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf73:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf81:	77 27                	ja     c000cfaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf83:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf89:	89 d8                	mov    eax,ebx
c000cf8b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	73 10                	jae    c000cfaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf9a:	89 c8                	mov    eax,ecx
c000cf9c:	89 da                	mov    edx,ebx
c000cf9e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfa4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfaa:	5b                   	pop    ebx
c000cfab:	5e                   	pop    esi
c000cfac:	c3                   	ret    
c000cfad:	90                   	nop

c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfae:	83 ec 1c             	sub    esp,0x1c
c000cfb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfd4:	83 ec 08             	sub    esp,0x8
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	50                   	push   eax
c000cfdc:	e8 b7 ef ff ff       	call   c000bf98 <Device::Device(char const*)>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	ba 94 06 02 c0       	mov    edx,0xc0020694
c000cfe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfed:	89 10                	mov    DWORD PTR [eax],edx
c000cfef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cff3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cffe:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d009:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d014:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d01e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d026:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d02a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d030:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d036:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d03a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d03d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d041:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d047:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d04d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d051:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d055:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d05f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d069:	90                   	nop
c000d06a:	83 c4 1c             	add    esp,0x1c
c000d06d:	c3                   	ret    

c000d06e <LogicalDisk::assignDriveLetter()>:
c000d06e:	55                   	push   ebp
c000d06f:	57                   	push   edi
c000d070:	56                   	push   esi
c000d071:	53                   	push   ebx
c000d072:	83 ec 14             	sub    esp,0x14
c000d075:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d079:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d07f:	b0 41                	mov    al,0x41
c000d081:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d087:	84 d2                	test   dl,dl
c000d089:	75 02                	jne    c000d08d <LogicalDisk::assignDriveLetter()+0x1f>
c000d08b:	b0 43                	mov    al,0x43
c000d08d:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d093:	0f b6 ca             	movzx  ecx,dl
c000d096:	0f be e8             	movsx  ebp,al
c000d099:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d09d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d0a1:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d0a7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d0ab:	3c 43                	cmp    al,0x43
c000d0ad:	75 10                	jne    c000d0bf <LogicalDisk::assignDriveLetter()+0x51>
c000d0af:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0b6:	75 5a                	jne    c000d112 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d0bd:	75 53                	jne    c000d112 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0bf:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0c2:	ba 01 00 00 00       	mov    edx,0x1
c000d0c7:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0ca:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d0cd:	d3 e2                	shl    edx,cl
c000d0cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0d3:	89 d7                	mov    edi,edx
c000d0d5:	89 d6                	mov    esi,edx
c000d0d7:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0db:	c1 ff 1f             	sar    edi,0x1f
c000d0de:	21 f9                	and    ecx,edi
c000d0e0:	09 d1                	or     ecx,edx
c000d0e2:	75 2e                	jne    c000d112 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0e8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0ec:	09 f2                	or     edx,esi
c000d0ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0f1:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0fb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d101:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d108:	09 fa                	or     edx,edi
c000d10a:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d110:	eb 0d                	jmp    c000d11f <LogicalDisk::assignDriveLetter()+0xb1>
c000d112:	8d 50 01             	lea    edx,[eax+0x1]
c000d115:	45                   	inc    ebp
c000d116:	80 fa 5b             	cmp    dl,0x5b
c000d119:	88 d0                	mov    al,dl
c000d11b:	75 8e                	jne    c000d0ab <LogicalDisk::assignDriveLetter()+0x3d>
c000d11d:	31 c0                	xor    eax,eax
c000d11f:	83 c4 14             	add    esp,0x14
c000d122:	5b                   	pop    ebx
c000d123:	5e                   	pop    esi
c000d124:	5f                   	pop    edi
c000d125:	5d                   	pop    ebp
c000d126:	c3                   	ret    
c000d127:	90                   	nop

c000d128 <LogicalDisk::mount()>:
c000d128:	56                   	push   esi
c000d129:	53                   	push   ebx
c000d12a:	53                   	push   ebx
c000d12b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d12f:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d135:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d13f:	85 db                	test   ebx,ebx
c000d141:	74 27                	je     c000d16a <LogicalDisk::mount()+0x42>
c000d143:	51                   	push   ecx
c000d144:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d14b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d14d:	83 e8 41             	sub    eax,0x41
c000d150:	50                   	push   eax
c000d151:	56                   	push   esi
c000d152:	53                   	push   ebx
c000d153:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d156:	83 c4 10             	add    esp,0x10
c000d159:	84 c0                	test   al,al
c000d15b:	74 08                	je     c000d165 <LogicalDisk::mount()+0x3d>
c000d15d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d163:	eb 07                	jmp    c000d16c <LogicalDisk::mount()+0x44>
c000d165:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d168:	eb d5                	jmp    c000d13f <LogicalDisk::mount()+0x17>
c000d16a:	31 c0                	xor    eax,eax
c000d16c:	5a                   	pop    edx
c000d16d:	5b                   	pop    ebx
c000d16e:	5e                   	pop    esi
c000d16f:	c3                   	ret    

c000d170 <LogicalDisk::unmount()>:
c000d170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d174:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d17e:	c3                   	ret    
c000d17f:	90                   	nop

c000d180 <LogicalDisk::eject()>:
c000d180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d184:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d18a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d18c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d190:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d193:	90                   	nop

c000d194 <LogicalDisk::unassignDriveLetter()>:
c000d194:	57                   	push   edi
c000d195:	56                   	push   esi
c000d196:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d1a1:	85 c9                	test   ecx,ecx
c000d1a3:	75 0f                	jne    c000d1b4 <LogicalDisk::unassignDriveLetter()+0x20>
c000d1a5:	c7 44 24 0c 6c 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc002066c
c000d1ad:	5e                   	pop    esi
c000d1ae:	5f                   	pop    edi
c000d1af:	e9 b5 36 00 00       	jmp    c0010869 <KePanic(char const*)>
c000d1b4:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1bb:	83 e9 41             	sub    ecx,0x41
c000d1be:	b8 01 00 00 00       	mov    eax,0x1
c000d1c3:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1ce:	d3 e0                	shl    eax,cl
c000d1d0:	89 c7                	mov    edi,eax
c000d1d2:	f7 d0                	not    eax
c000d1d4:	c1 ff 1f             	sar    edi,0x1f
c000d1d7:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d1dd:	89 fe                	mov    esi,edi
c000d1df:	f7 d6                	not    esi
c000d1e1:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1e7:	5e                   	pop    esi
c000d1e8:	5f                   	pop    edi
c000d1e9:	c3                   	ret    

c000d1ea <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1ea:	57                   	push   edi
c000d1eb:	56                   	push   esi
c000d1ec:	53                   	push   ebx
c000d1ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1fd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d203:	77 41                	ja     c000d246 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d205:	99                   	cdq    
c000d206:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d20c:	01 c8                	add    eax,ecx
c000d20e:	11 da                	adc    edx,ebx
c000d210:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d216:	19 d7                	sbb    edi,edx
c000d218:	72 33                	jb     c000d24d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d21a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d220:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d226:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d22a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d22e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d234:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d23a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d23e:	5b                   	pop    ebx
c000d23f:	5e                   	pop    esi
c000d240:	5f                   	pop    edi
c000d241:	e9 d4 0a 00 00       	jmp    c000dd1a <VCache::read(unsigned long long, int, void*)>
c000d246:	b8 05 00 00 00       	mov    eax,0x5
c000d24b:	eb 05                	jmp    c000d252 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d24d:	b8 07 00 00 00       	mov    eax,0x7
c000d252:	5b                   	pop    ebx
c000d253:	5e                   	pop    esi
c000d254:	5f                   	pop    edi
c000d255:	c3                   	ret    

c000d256 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d256:	57                   	push   edi
c000d257:	56                   	push   esi
c000d258:	53                   	push   ebx
c000d259:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d25d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d261:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d269:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d26f:	77 41                	ja     c000d2b2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d271:	99                   	cdq    
c000d272:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d278:	01 c8                	add    eax,ecx
c000d27a:	11 da                	adc    edx,ebx
c000d27c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d282:	19 d7                	sbb    edi,edx
c000d284:	72 33                	jb     c000d2b9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d286:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d28c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d292:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d296:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d29a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2aa:	5b                   	pop    ebx
c000d2ab:	5e                   	pop    esi
c000d2ac:	5f                   	pop    edi
c000d2ad:	e9 6e 09 00 00       	jmp    c000dc20 <VCache::write(unsigned long long, int, void*)>
c000d2b2:	b8 05 00 00 00       	mov    eax,0x5
c000d2b7:	eb 05                	jmp    c000d2be <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2b9:	b8 07 00 00 00       	mov    eax,0x7
c000d2be:	5b                   	pop    ebx
c000d2bf:	5e                   	pop    esi
c000d2c0:	5f                   	pop    edi
c000d2c1:	c3                   	ret    
c000d2c2:	66 90                	xchg   ax,ax

c000d2c4 <Mouse::Mouse(char const*)>:
c000d2c4:	83 ec 0c             	sub    esp,0xc
c000d2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cb:	83 ec 08             	sub    esp,0x8
c000d2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d2:	50                   	push   eax
c000d2d3:	e8 c0 ec ff ff       	call   c000bf98 <Device::Device(char const*)>
c000d2d8:	83 c4 10             	add    esp,0x10
c000d2db:	ba c0 06 02 c0       	mov    edx,0xc00206c0
c000d2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e4:	89 10                	mov    DWORD PTR [eax],edx
c000d2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ea:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2f4:	90                   	nop
c000d2f5:	83 c4 0c             	add    esp,0xc
c000d2f8:	c3                   	ret    
c000d2f9:	90                   	nop
c000d2fa:	66 90                	xchg   ax,ax

c000d2fc <Mouse::~Mouse()>:
c000d2fc:	83 ec 0c             	sub    esp,0xc
c000d2ff:	ba c0 06 02 c0       	mov    edx,0xc00206c0
c000d304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d308:	89 10                	mov    DWORD PTR [eax],edx
c000d30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30e:	83 ec 0c             	sub    esp,0xc
c000d311:	50                   	push   eax
c000d312:	e8 eb e9 ff ff       	call   c000bd02 <Device::~Device()>
c000d317:	83 c4 10             	add    esp,0x10
c000d31a:	90                   	nop
c000d31b:	83 c4 0c             	add    esp,0xc
c000d31e:	c3                   	ret    
c000d31f:	90                   	nop

c000d320 <Mouse::~Mouse()>:
c000d320:	83 ec 0c             	sub    esp,0xc
c000d323:	83 ec 0c             	sub    esp,0xc
c000d326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32a:	e8 cd ff ff ff       	call   c000d2fc <Mouse::~Mouse()>
c000d32f:	83 c4 10             	add    esp,0x10
c000d332:	83 ec 08             	sub    esp,0x8
c000d335:	68 58 01 00 00       	push   0x158
c000d33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33e:	e8 5d d5 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	83 c4 0c             	add    esp,0xc
c000d349:	c3                   	ret    

c000d34a <NIC::getMAC()>:
c000d34a:	31 c0                	xor    eax,eax
c000d34c:	31 d2                	xor    edx,edx
c000d34e:	c3                   	ret    
c000d34f:	90                   	nop

c000d350 <NIC::write(int, unsigned char*, int*)>:
c000d350:	b8 01 00 00 00       	mov    eax,0x1
c000d355:	c3                   	ret    

c000d356 <NIC::NIC(char const*)>:
c000d356:	83 ec 0c             	sub    esp,0xc
c000d359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35d:	83 ec 08             	sub    esp,0x8
c000d360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d364:	50                   	push   eax
c000d365:	e8 2e ec ff ff       	call   c000bf98 <Device::Device(char const*)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	ba ec 06 02 c0       	mov    edx,0xc00206ec
c000d372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d376:	89 10                	mov    DWORD PTR [eax],edx
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d386:	90                   	nop
c000d387:	83 c4 0c             	add    esp,0xc
c000d38a:	c3                   	ret    
c000d38b:	90                   	nop

c000d38c <NIC::~NIC()>:
c000d38c:	83 ec 0c             	sub    esp,0xc
c000d38f:	ba ec 06 02 c0       	mov    edx,0xc00206ec
c000d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d398:	89 10                	mov    DWORD PTR [eax],edx
c000d39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d39e:	83 ec 0c             	sub    esp,0xc
c000d3a1:	50                   	push   eax
c000d3a2:	e8 5b e9 ff ff       	call   c000bd02 <Device::~Device()>
c000d3a7:	83 c4 10             	add    esp,0x10
c000d3aa:	90                   	nop
c000d3ab:	83 c4 0c             	add    esp,0xc
c000d3ae:	c3                   	ret    
c000d3af:	90                   	nop

c000d3b0 <NIC::~NIC()>:
c000d3b0:	83 ec 0c             	sub    esp,0xc
c000d3b3:	83 ec 0c             	sub    esp,0xc
c000d3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ba:	e8 cd ff ff ff       	call   c000d38c <NIC::~NIC()>
c000d3bf:	83 c4 10             	add    esp,0x10
c000d3c2:	83 ec 08             	sub    esp,0x8
c000d3c5:	68 58 01 00 00       	push   0x158
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 cd d4 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	83 c4 0c             	add    esp,0xc
c000d3d9:	c3                   	ret    

c000d3da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3da:	55                   	push   ebp
c000d3db:	57                   	push   edi
c000d3dc:	56                   	push   esi
c000d3dd:	53                   	push   ebx
c000d3de:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3e4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d3eb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d3f2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d3f9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d400:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d404:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d408:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d40f:	e8 80 ec ff ff       	call   c000c094 <Device::getName()>
c000d414:	5a                   	pop    edx
c000d415:	59                   	pop    ecx
c000d416:	50                   	push   eax
c000d417:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d41b:	55                   	push   ebp
c000d41c:	e8 2f 32 ff ff       	call   c0000650 <strcpy>
c000d421:	5b                   	pop    ebx
c000d422:	58                   	pop    eax
c000d423:	68 18 07 02 c0       	push   0xc0020718
c000d428:	55                   	push   ebp
c000d429:	e8 42 34 ff ff       	call   c0000870 <strcat>
c000d42e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d435:	e8 91 a6 ff ff       	call   c0007acb <malloc>
c000d43a:	83 c4 0c             	add    esp,0xc
c000d43d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d441:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d445:	89 c3                	mov    ebx,eax
c000d447:	57                   	push   edi
c000d448:	56                   	push   esi
c000d449:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d450:	55                   	push   ebp
c000d451:	50                   	push   eax
c000d452:	e8 57 fb ff ff       	call   c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d457:	83 c4 14             	add    esp,0x14
c000d45a:	53                   	push   ebx
c000d45b:	e8 0e fc ff ff       	call   c000d06e <LogicalDisk::assignDriveLetter()>
c000d460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d463:	e8 c0 fc ff ff       	call   c000d128 <LogicalDisk::mount()>
c000d468:	58                   	pop    eax
c000d469:	5a                   	pop    edx
c000d46a:	53                   	push   ebx
c000d46b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d472:	e8 89 e9 ff ff       	call   c000be00 <Device::addChild(Device*)>
c000d477:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d47d:	5b                   	pop    ebx
c000d47e:	5e                   	pop    esi
c000d47f:	5f                   	pop    edi
c000d480:	5d                   	pop    ebp
c000d481:	c3                   	ret    

c000d482 <createPartitionsForDisk(PhysicalDisk*)>:
c000d482:	55                   	push   ebp
c000d483:	57                   	push   edi
c000d484:	56                   	push   esi
c000d485:	53                   	push   ebx
c000d486:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d48c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d493:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d499:	3d 00 02 00 00       	cmp    eax,0x200
c000d49e:	74 27                	je     c000d4c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4a6:	83 ec 10             	sub    esp,0x10
c000d4a9:	99                   	cdq    
c000d4aa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d4b0:	52                   	push   edx
c000d4b1:	50                   	push   eax
c000d4b2:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d4b6:	c1 e6 0a             	shl    esi,0xa
c000d4b9:	89 fd                	mov    ebp,edi
c000d4bb:	55                   	push   ebp
c000d4bc:	56                   	push   esi
c000d4bd:	e8 6e 11 01 00       	call   c001e630 <__udivdi3>
c000d4c2:	e9 b9 00 00 00       	jmp    c000d580 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4d0:	56                   	push   esi
c000d4d1:	6a 01                	push   0x1
c000d4d3:	6a 00                	push   0x0
c000d4d5:	6a 00                	push   0x0
c000d4d7:	53                   	push   ebx
c000d4d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4db:	83 c4 20             	add    esp,0x20
c000d4de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4e6:	75 0a                	jne    c000d4f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4f0:	74 2c                	je     c000d51e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4f8:	83 ec 10             	sub    esp,0x10
c000d4fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d501:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d507:	89 f7                	mov    edi,esi
c000d509:	c1 ff 1f             	sar    edi,0x1f
c000d50c:	57                   	push   edi
c000d50d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d511:	56                   	push   esi
c000d512:	c1 e0 0a             	shl    eax,0xa
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	e8 14 11 01 00       	call   c001e630 <__udivdi3>
c000d51c:	eb 62                	jmp    c000d580 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d51e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d525:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d52c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d533:	89 cf                	mov    edi,ecx
c000d535:	83 e2 7f             	and    edx,0x7f
c000d538:	83 e7 7f             	and    edi,0x7f
c000d53b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d53e:	83 e0 7f             	and    eax,0x7f
c000d541:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d544:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d54b:	83 e0 7f             	and    eax,0x7f
c000d54e:	01 d0                	add    eax,edx
c000d550:	84 c0                	test   al,al
c000d552:	89 c5                	mov    ebp,eax
c000d554:	74 41                	je     c000d597 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d556:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d55c:	83 ec 10             	sub    esp,0x10
c000d55f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d565:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d56b:	89 f7                	mov    edi,esi
c000d56d:	c1 ff 1f             	sar    edi,0x1f
c000d570:	57                   	push   edi
c000d571:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d575:	56                   	push   esi
c000d576:	c1 e0 0a             	shl    eax,0xa
c000d579:	52                   	push   edx
c000d57a:	50                   	push   eax
c000d57b:	e8 b0 10 01 00       	call   c001e630 <__udivdi3>
c000d580:	83 c4 14             	add    esp,0x14
c000d583:	52                   	push   edx
c000d584:	50                   	push   eax
c000d585:	6a 00                	push   0x0
c000d587:	6a 00                	push   0x0
c000d589:	53                   	push   ebx
c000d58a:	e8 4b fe ff ff       	call   c000d3da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d58f:	83 c4 20             	add    esp,0x20
c000d592:	e9 73 01 00 00       	jmp    c000d70a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d597:	89 f0                	mov    eax,esi
c000d599:	31 c9                	xor    ecx,ecx
c000d59b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5a2:	75 02                	jne    c000d5a6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d5a4:	89 cd                	mov    ebp,ecx
c000d5a6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d5ae:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5b5:	83 c0 10             	add    eax,0x10
c000d5b8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d5c0:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d5c7:	c1 e2 08             	shl    edx,0x8
c000d5ca:	c1 e6 10             	shl    esi,0x10
c000d5cd:	09 f2                	or     edx,esi
c000d5cf:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d5d6:	09 f2                	or     edx,esi
c000d5d8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d5df:	c1 e6 18             	shl    esi,0x18
c000d5e2:	09 f2                	or     edx,esi
c000d5e4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d5eb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5ef:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5f6:	c1 e6 10             	shl    esi,0x10
c000d5f9:	c1 e2 08             	shl    edx,0x8
c000d5fc:	09 f2                	or     edx,esi
c000d5fe:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d605:	09 f2                	or     edx,esi
c000d607:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d60e:	c1 e6 18             	shl    esi,0x18
c000d611:	09 f2                	or     edx,esi
c000d613:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d617:	41                   	inc    ecx
c000d618:	83 f9 04             	cmp    ecx,0x4
c000d61b:	0f 85 7a ff ff ff    	jne    c000d59b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d625:	83 f0 01             	xor    eax,0x1
c000d628:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d62c:	75 4f                	jne    c000d67d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d62e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d632:	83 f0 01             	xor    eax,0x1
c000d635:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d639:	75 42                	jne    c000d67d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d63b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d641:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d649:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d64f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d657:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d65d:	89 f7                	mov    edi,esi
c000d65f:	c1 ff 1f             	sar    edi,0x1f
c000d662:	57                   	push   edi
c000d663:	56                   	push   esi
c000d664:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d668:	52                   	push   edx
c000d669:	c1 e0 0a             	shl    eax,0xa
c000d66c:	50                   	push   eax
c000d66d:	e8 be 0f 01 00       	call   c001e630 <__udivdi3>
c000d672:	83 c4 10             	add    esp,0x10
c000d675:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d679:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d67d:	89 e8                	mov    eax,ebp
c000d67f:	0f b6 e8             	movzx  ebp,al
c000d682:	85 ed                	test   ebp,ebp
c000d684:	74 50                	je     c000d6d6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d686:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d68a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d68e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d692:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d69a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d69e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6a2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d6b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d6ba:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6be:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d6c2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6c6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6ca:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6ce:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6d2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6d6:	31 ed                	xor    ebp,ebp
c000d6d8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6dc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6e0:	89 f8                	mov    eax,edi
c000d6e2:	09 f0                	or     eax,esi
c000d6e4:	74 1e                	je     c000d704 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6e6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6ea:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6ee:	89 d1                	mov    ecx,edx
c000d6f0:	09 c1                	or     ecx,eax
c000d6f2:	74 10                	je     c000d704 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6f4:	83 ec 0c             	sub    esp,0xc
c000d6f7:	57                   	push   edi
c000d6f8:	56                   	push   esi
c000d6f9:	52                   	push   edx
c000d6fa:	50                   	push   eax
c000d6fb:	53                   	push   ebx
c000d6fc:	e8 d9 fc ff ff       	call   c000d3da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d701:	83 c4 20             	add    esp,0x20
c000d704:	45                   	inc    ebp
c000d705:	83 fd 04             	cmp    ebp,0x4
c000d708:	75 ce                	jne    c000d6d8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d70a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d710:	5b                   	pop    ebx
c000d711:	5e                   	pop    esi
c000d712:	5f                   	pop    edi
c000d713:	5d                   	pop    ebp
c000d714:	c3                   	ret    
c000d715:	66 90                	xchg   ax,ax
c000d717:	90                   	nop

c000d718 <Serial::Serial(char const*)>:
c000d718:	83 ec 0c             	sub    esp,0xc
c000d71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71f:	83 ec 08             	sub    esp,0x8
c000d722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d726:	50                   	push   eax
c000d727:	e8 6c e8 ff ff       	call   c000bf98 <Device::Device(char const*)>
c000d72c:	83 c4 10             	add    esp,0x10
c000d72f:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d738:	89 10                	mov    DWORD PTR [eax],edx
c000d73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d748:	90                   	nop
c000d749:	83 c4 0c             	add    esp,0xc
c000d74c:	c3                   	ret    
c000d74d:	90                   	nop
c000d74e:	66 90                	xchg   ax,ax

c000d750 <Serial::~Serial()>:
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75c:	89 10                	mov    DWORD PTR [eax],edx
c000d75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d762:	83 ec 0c             	sub    esp,0xc
c000d765:	50                   	push   eax
c000d766:	e8 97 e5 ff ff       	call   c000bd02 <Device::~Device()>
c000d76b:	83 c4 10             	add    esp,0x10
c000d76e:	90                   	nop
c000d76f:	83 c4 0c             	add    esp,0xc
c000d772:	c3                   	ret    
c000d773:	90                   	nop

c000d774 <Serial::~Serial()>:
c000d774:	83 ec 0c             	sub    esp,0xc
c000d777:	83 ec 0c             	sub    esp,0xc
c000d77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77e:	e8 cd ff ff ff       	call   c000d750 <Serial::~Serial()>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	83 ec 08             	sub    esp,0x8
c000d789:	68 58 01 00 00       	push   0x158
c000d78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d792:	e8 09 d1 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	83 c4 0c             	add    esp,0xc
c000d79d:	c3                   	ret    
c000d79e:	66 90                	xchg   ax,ax

c000d7a0 <Timer::Timer(char const*)>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a7:	83 ec 08             	sub    esp,0x8
c000d7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ae:	50                   	push   eax
c000d7af:	e8 e4 e7 ff ff       	call   c000bf98 <Device::Device(char const*)>
c000d7b4:	83 c4 10             	add    esp,0x10
c000d7b7:	ba 70 07 02 c0       	mov    edx,0xc0020770
c000d7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c0:	89 10                	mov    DWORD PTR [eax],edx
c000d7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7d0:	90                   	nop
c000d7d1:	83 c4 0c             	add    esp,0xc
c000d7d4:	c3                   	ret    
c000d7d5:	90                   	nop
c000d7d6:	66 90                	xchg   ax,ax

c000d7d8 <Timer::~Timer()>:
c000d7d8:	83 ec 0c             	sub    esp,0xc
c000d7db:	ba 70 07 02 c0       	mov    edx,0xc0020770
c000d7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e4:	89 10                	mov    DWORD PTR [eax],edx
c000d7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ea:	83 ec 0c             	sub    esp,0xc
c000d7ed:	50                   	push   eax
c000d7ee:	e8 0f e5 ff ff       	call   c000bd02 <Device::~Device()>
c000d7f3:	83 c4 10             	add    esp,0x10
c000d7f6:	90                   	nop
c000d7f7:	83 c4 0c             	add    esp,0xc
c000d7fa:	c3                   	ret    
c000d7fb:	90                   	nop

c000d7fc <Timer::~Timer()>:
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	83 ec 0c             	sub    esp,0xc
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	e8 cd ff ff ff       	call   c000d7d8 <Timer::~Timer()>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	83 ec 08             	sub    esp,0x8
c000d811:	68 5c 01 00 00       	push   0x15c
c000d816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81a:	e8 81 d0 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000d81f:	83 c4 10             	add    esp,0x10
c000d822:	83 c4 0c             	add    esp,0xc
c000d825:	c3                   	ret    

c000d826 <Timer::read()>:
c000d826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d82a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d830:	c3                   	ret    

c000d831 <setupTimer(int)>:
c000d831:	53                   	push   ebx
c000d832:	83 ec 14             	sub    esp,0x14
c000d835:	68 5c 01 00 00       	push   0x15c
c000d83a:	e8 8c a2 ff ff       	call   c0007acb <malloc>
c000d83f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d842:	89 c3                	mov    ebx,eax
c000d844:	e8 53 06 01 00       	call   c001de9c <PIT::PIT()>
c000d849:	58                   	pop    eax
c000d84a:	5a                   	pop    edx
c000d84b:	53                   	push   ebx
c000d84c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d852:	e8 a9 e5 ff ff       	call   c000be00 <Device::addChild(Device*)>
c000d857:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d859:	6a 00                	push   0x0
c000d85b:	6a 00                	push   0x0
c000d85d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d861:	53                   	push   ebx
c000d862:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d865:	83 c4 28             	add    esp,0x28
c000d868:	89 d8                	mov    eax,ebx
c000d86a:	5b                   	pop    ebx
c000d86b:	c3                   	ret    

c000d86c <timerHandler(unsigned int)>:
c000d86c:	56                   	push   esi
c000d86d:	53                   	push   ebx
c000d86e:	51                   	push   ecx
c000d86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d873:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d879:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d880:	0f 84 4a 01 00 00    	je     c000d9d0 <timerHandler(unsigned int)+0x164>
c000d886:	fa                   	cli    
c000d887:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d88d:	83 ec 0c             	sub    esp,0xc
c000d890:	68 78 81 02 c0       	push   0xc0028178
c000d895:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d89b:	e8 60 13 01 00       	call   c001ec00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	84 c0                	test   al,al
c000d8a5:	0f 85 a1 00 00 00    	jne    c000d94c <timerHandler(unsigned int)+0xe0>
c000d8ab:	83 ec 0c             	sub    esp,0xc
c000d8ae:	68 78 81 02 c0       	push   0xc0028178
c000d8b3:	e8 64 13 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	89 c6                	mov    esi,eax
c000d8bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c0:	83 ec 0c             	sub    esp,0xc
c000d8c3:	68 78 81 02 c0       	push   0xc0028178
c000d8c8:	e8 4f 13 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8cd:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8d4:	89 c3                	mov    ebx,eax
c000d8d6:	e8 49 13 01 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8db:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8e7:	77 23                	ja     c000d90c <timerHandler(unsigned int)+0xa0>
c000d8e9:	83 ec 0c             	sub    esp,0xc
c000d8ec:	53                   	push   ebx
c000d8ed:	e8 6a 7c 00 00       	call   c001555c <unblockTask(ThreadControlBlock*)>
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	39 de                	cmp    esi,ebx
c000d8f7:	75 27                	jne    c000d920 <timerHandler(unsigned int)+0xb4>
c000d8f9:	83 ec 0c             	sub    esp,0xc
c000d8fc:	68 78 81 02 c0       	push   0xc0028178
c000d901:	e8 16 13 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d906:	89 c6                	mov    esi,eax
c000d908:	eb 12                	jmp    c000d91c <timerHandler(unsigned int)+0xb0>
c000d90a:	66 90                	xchg   ax,ax
c000d90c:	52                   	push   edx
c000d90d:	52                   	push   edx
c000d90e:	53                   	push   ebx
c000d90f:	68 78 81 02 c0       	push   0xc0028178
c000d914:	e8 c7 13 01 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d919:	8d 76 00             	lea    esi,[esi+0x0]
c000d91c:	83 c4 10             	add    esp,0x10
c000d91f:	90                   	nop
c000d920:	83 ec 0c             	sub    esp,0xc
c000d923:	68 78 81 02 c0       	push   0xc0028178
c000d928:	e8 d3 12 01 00       	call   c001ec00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d92d:	83 c4 10             	add    esp,0x10
c000d930:	84 c0                	test   al,al
c000d932:	75 18                	jne    c000d94c <timerHandler(unsigned int)+0xe0>
c000d934:	83 ec 0c             	sub    esp,0xc
c000d937:	68 78 81 02 c0       	push   0xc0028178
c000d93c:	e8 db 12 01 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d941:	83 c4 10             	add    esp,0x10
c000d944:	39 f0                	cmp    eax,esi
c000d946:	0f 85 74 ff ff ff    	jne    c000d8c0 <timerHandler(unsigned int)+0x54>
c000d94c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d951:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d955:	74 41                	je     c000d998 <timerHandler(unsigned int)+0x12c>
c000d957:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d95e:	74 38                	je     c000d998 <timerHandler(unsigned int)+0x12c>
c000d960:	fa                   	cli    
c000d961:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d967:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d96c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d972:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d975:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d97b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d97e:	72 08                	jb     c000d988 <timerHandler(unsigned int)+0x11c>
c000d980:	e8 df 76 00 00       	call   c0015064 <schedule()>
c000d985:	8d 76 00             	lea    esi,[esi+0x0]
c000d988:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d98d:	48                   	dec    eax
c000d98e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d993:	75 03                	jne    c000d998 <timerHandler(unsigned int)+0x12c>
c000d995:	fb                   	sti    
c000d996:	66 90                	xchg   ax,ax
c000d998:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d99d:	48                   	dec    eax
c000d99e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d9a3:	75 1b                	jne    c000d9c0 <timerHandler(unsigned int)+0x154>
c000d9a5:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d9ac:	74 12                	je     c000d9c0 <timerHandler(unsigned int)+0x154>
c000d9ae:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9b8:	e8 a7 76 00 00       	call   c0015064 <schedule()>
c000d9bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d9c0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9c5:	48                   	dec    eax
c000d9c6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9cb:	75 03                	jne    c000d9d0 <timerHandler(unsigned int)+0x164>
c000d9cd:	fb                   	sti    
c000d9ce:	66 90                	xchg   ax,ax
c000d9d0:	58                   	pop    eax
c000d9d1:	5b                   	pop    ebx
c000d9d2:	5e                   	pop    esi
c000d9d3:	c3                   	ret    

c000d9d4 <VCache::VCache(PhysicalDisk*)>:
c000d9d4:	53                   	push   ebx
c000d9d5:	83 ec 18             	sub    esp,0x18
c000d9d8:	ba a0 07 02 c0       	mov    edx,0xc00207a0
c000d9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e1:	89 10                	mov    DWORD PTR [eax],edx
c000d9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da16:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da21:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da34:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da3b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da46:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da56:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da65:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da6d:	83 ec 0c             	sub    esp,0xc
c000da70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da74:	e8 52 a0 ff ff       	call   c0007acb <malloc>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	89 c3                	mov    ebx,eax
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	53                   	push   ebx
c000da82:	e8 7d 73 00 00       	call   c0014e04 <Mutex::Mutex()>
c000da87:	83 c4 10             	add    esp,0x10
c000da8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000daa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daab:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dab8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dabc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dac2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dac8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dacc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dacf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dada:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dade:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dae4:	05 00 02 00 00       	add    eax,0x200
c000dae9:	c1 e0 03             	shl    eax,0x3
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	50                   	push   eax
c000daf0:	e8 d6 9f ff ff       	call   c0007acb <malloc>
c000daf5:	83 c4 10             	add    esp,0x10
c000daf8:	89 c2                	mov    edx,eax
c000dafa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dafe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db05:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db10:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db18:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db1e:	89 d0                	mov    eax,edx
c000db20:	c1 e0 02             	shl    eax,0x2
c000db23:	01 d0                	add    eax,edx
c000db25:	c1 e0 04             	shl    eax,0x4
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	50                   	push   eax
c000db2c:	e8 9a 9f ff ff       	call   c0007acb <malloc>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	89 c2                	mov    edx,eax
c000db36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db3a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db3d:	90                   	nop
c000db3e:	83 c4 18             	add    esp,0x18
c000db41:	5b                   	pop    ebx
c000db42:	c3                   	ret    
c000db43:	90                   	nop

c000db44 <VCache::invalidateReadBuffer()>:
c000db44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db48:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db4e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db52:	c3                   	ret    
c000db53:	90                   	nop

c000db54 <VCache::writeWriteBuffer()>:
c000db54:	53                   	push   ebx
c000db55:	83 ec 08             	sub    esp,0x8
c000db58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db5c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db60:	74 1e                	je     c000db80 <VCache::writeWriteBuffer()+0x2c>
c000db62:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db65:	83 ec 0c             	sub    esp,0xc
c000db68:	8b 10                	mov    edx,DWORD PTR [eax]
c000db6a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db70:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db73:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db76:	50                   	push   eax
c000db77:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db7a:	83 c4 20             	add    esp,0x20
c000db7d:	8d 76 00             	lea    esi,[esi+0x0]
c000db80:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db87:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db8e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db92:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db99:	83 c4 08             	add    esp,0x8
c000db9c:	5b                   	pop    ebx
c000db9d:	c3                   	ret    
c000db9e:	66 90                	xchg   ax,ax

c000dba0 <VCache::~VCache()>:
c000dba0:	83 ec 0c             	sub    esp,0xc
c000dba3:	ba a0 07 02 c0       	mov    edx,0xc00207a0
c000dba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbac:	89 10                	mov    DWORD PTR [eax],edx
c000dbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbb5:	0f b6 c0             	movzx  eax,al
c000dbb8:	85 c0                	test   eax,eax
c000dbba:	74 10                	je     c000dbcc <VCache::~VCache()+0x2c>
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc3:	e8 8c ff ff ff       	call   c000db54 <VCache::writeWriteBuffer()>
c000dbc8:	83 c4 10             	add    esp,0x10
c000dbcb:	90                   	nop
c000dbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbd3:	83 ec 0c             	sub    esp,0xc
c000dbd6:	50                   	push   eax
c000dbd7:	e8 ff 9e ff ff       	call   c0007adb <free>
c000dbdc:	83 c4 10             	add    esp,0x10
c000dbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbe6:	83 ec 0c             	sub    esp,0xc
c000dbe9:	50                   	push   eax
c000dbea:	e8 ec 9e ff ff       	call   c0007adb <free>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	90                   	nop
c000dbf3:	83 c4 0c             	add    esp,0xc
c000dbf6:	c3                   	ret    
c000dbf7:	90                   	nop

c000dbf8 <VCache::~VCache()>:
c000dbf8:	83 ec 0c             	sub    esp,0xc
c000dbfb:	83 ec 0c             	sub    esp,0xc
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	e8 99 ff ff ff       	call   c000dba0 <VCache::~VCache()>
c000dc07:	83 c4 10             	add    esp,0x10
c000dc0a:	83 ec 08             	sub    esp,0x8
c000dc0d:	6a 44                	push   0x44
c000dc0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc13:	e8 88 cc ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000dc18:	83 c4 10             	add    esp,0x10
c000dc1b:	83 c4 0c             	add    esp,0xc
c000dc1e:	c3                   	ret    
c000dc1f:	90                   	nop

c000dc20 <VCache::write(unsigned long long, int, void*)>:
c000dc20:	55                   	push   ebp
c000dc21:	57                   	push   edi
c000dc22:	56                   	push   esi
c000dc23:	53                   	push   ebx
c000dc24:	83 ec 1c             	sub    esp,0x1c
c000dc27:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc2f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dc33:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc37:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc3f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc43:	74 0f                	je     c000dc54 <VCache::write(unsigned long long, int, void*)+0x34>
c000dc45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc49:	53                   	push   ebx
c000dc4a:	e8 f5 fe ff ff       	call   c000db44 <VCache::invalidateReadBuffer()>
c000dc4f:	58                   	pop    eax
c000dc50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc54:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc58:	74 66                	je     c000dcc0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc5a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc61:	99                   	cdq    
c000dc62:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc65:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc68:	89 c6                	mov    esi,eax
c000dc6a:	31 ce                	xor    esi,ecx
c000dc6c:	89 d0                	mov    eax,edx
c000dc6e:	31 e8                	xor    eax,ebp
c000dc70:	09 c6                	or     esi,eax
c000dc72:	75 38                	jne    c000dcac <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc74:	83 ff 01             	cmp    edi,0x1
c000dc77:	75 33                	jne    c000dcac <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc7c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dc80:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc84:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc8a:	0f af f9             	imul   edi,ecx
c000dc8d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc92:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc95:	40                   	inc    eax
c000dc96:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc99:	83 f8 50             	cmp    eax,0x50
c000dc9c:	75 72                	jne    c000dd10 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc9e:	83 ec 0c             	sub    esp,0xc
c000dca1:	53                   	push   ebx
c000dca2:	e8 ad fe ff ff       	call   c000db54 <VCache::writeWriteBuffer()>
c000dca7:	83 c4 10             	add    esp,0x10
c000dcaa:	eb 64                	jmp    c000dd10 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	53                   	push   ebx
c000dcb4:	e8 9b fe ff ff       	call   c000db54 <VCache::writeWriteBuffer()>
c000dcb9:	83 c4 10             	add    esp,0x10
c000dcbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dcc0:	83 ff 4f             	cmp    edi,0x4f
c000dcc3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcc6:	7f 20                	jg     c000dce8 <VCache::write(unsigned long long, int, void*)+0xc8>
c000dcc8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dccb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dccf:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dcd2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcd5:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dcd8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dcdc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dce2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dce4:	eb 2a                	jmp    c000dd10 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dce6:	66 90                	xchg   ax,ax
c000dce8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcec:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcee:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcf2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dcf6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcfa:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dcfe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd02:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd05:	83 c4 1c             	add    esp,0x1c
c000dd08:	5b                   	pop    ebx
c000dd09:	5e                   	pop    esi
c000dd0a:	5f                   	pop    edi
c000dd0b:	5d                   	pop    ebp
c000dd0c:	ff e0                	jmp    eax
c000dd0e:	66 90                	xchg   ax,ax
c000dd10:	83 c4 1c             	add    esp,0x1c
c000dd13:	31 c0                	xor    eax,eax
c000dd15:	5b                   	pop    ebx
c000dd16:	5e                   	pop    esi
c000dd17:	5f                   	pop    edi
c000dd18:	5d                   	pop    ebp
c000dd19:	c3                   	ret    

c000dd1a <VCache::read(unsigned long long, int, void*)>:
c000dd1a:	55                   	push   ebp
c000dd1b:	57                   	push   edi
c000dd1c:	56                   	push   esi
c000dd1d:	53                   	push   ebx
c000dd1e:	83 ec 1c             	sub    esp,0x1c
c000dd21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd25:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dd2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd31:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd39:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd3d:	74 0d                	je     c000dd4c <VCache::read(unsigned long long, int, void*)+0x32>
c000dd3f:	83 ec 0c             	sub    esp,0xc
c000dd42:	57                   	push   edi
c000dd43:	e8 0c fe ff ff       	call   c000db54 <VCache::writeWriteBuffer()>
c000dd48:	83 c4 10             	add    esp,0x10
c000dd4b:	90                   	nop
c000dd4c:	83 fd 01             	cmp    ebp,0x1
c000dd4f:	0f 85 93 00 00 00    	jne    c000dde8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd58:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd62:	0f 85 80 00 00 00    	jne    c000dde8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd68:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dd6b:	89 cd                	mov    ebp,ecx
c000dd6d:	f7 dd                	neg    ebp
c000dd6f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dd73:	89 e8                	mov    eax,ebp
c000dd75:	21 dd                	and    ebp,ebx
c000dd77:	c1 f8 1f             	sar    eax,0x1f
c000dd7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd7e:	89 e8                	mov    eax,ebp
c000dd80:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd84:	21 f5                	and    ebp,esi
c000dd86:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd8a:	89 ea                	mov    edx,ebp
c000dd8c:	74 2e                	je     c000ddbc <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd8e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd91:	75 29                	jne    c000ddbc <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd93:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd96:	75 24                	jne    c000ddbc <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd98:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd9b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dda1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dda4:	8d 70 ff             	lea    esi,[eax-0x1]
c000dda7:	21 f3                	and    ebx,esi
c000dda9:	0f af d9             	imul   ebx,ecx
c000ddac:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000ddaf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ddb3:	89 de                	mov    esi,ebx
c000ddb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddb7:	31 c0                	xor    eax,eax
c000ddb9:	eb 61                	jmp    c000de1c <VCache::read(unsigned long long, int, void*)+0x102>
c000ddbb:	90                   	nop
c000ddbc:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000ddc0:	83 ec 0c             	sub    esp,0xc
c000ddc3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ddc6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ddca:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ddcd:	8b 36                	mov    esi,DWORD PTR [esi]
c000ddcf:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ddd2:	51                   	push   ecx
c000ddd3:	52                   	push   edx
c000ddd4:	50                   	push   eax
c000ddd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dddc:	83 c4 20             	add    esp,0x20
c000dddf:	85 c0                	test   eax,eax
c000dde1:	75 39                	jne    c000de1c <VCache::read(unsigned long long, int, void*)+0x102>
c000dde3:	eb b3                	jmp    c000dd98 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dde5:	8d 76 00             	lea    esi,[esi+0x0]
c000dde8:	83 ec 0c             	sub    esp,0xc
c000ddeb:	57                   	push   edi
c000ddec:	e8 53 fd ff ff       	call   c000db44 <VCache::invalidateReadBuffer()>
c000ddf1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddf4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddfa:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ddfe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000de02:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000de06:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000de0a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de0e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de11:	83 c4 2c             	add    esp,0x2c
c000de14:	5b                   	pop    ebx
c000de15:	5e                   	pop    esi
c000de16:	5f                   	pop    edi
c000de17:	5d                   	pop    ebp
c000de18:	ff e0                	jmp    eax
c000de1a:	66 90                	xchg   ax,ax
c000de1c:	83 c4 1c             	add    esp,0x1c
c000de1f:	5b                   	pop    ebx
c000de20:	5e                   	pop    esi
c000de21:	5f                   	pop    edi
c000de22:	5d                   	pop    ebp
c000de23:	c3                   	ret    

c000de24 <Video::putrect(int, int, int, int, unsigned int)>:
c000de24:	55                   	push   ebp
c000de25:	57                   	push   edi
c000de26:	56                   	push   esi
c000de27:	53                   	push   ebx
c000de28:	83 ec 1c             	sub    esp,0x1c
c000de2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de33:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de37:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de43:	01 df                	add    edi,ebx
c000de45:	39 fb                	cmp    ebx,edi
c000de47:	7d 1f                	jge    c000de68 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de49:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de4d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de51:	7d 12                	jge    c000de65 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de53:	8b 16                	mov    edx,DWORD PTR [esi]
c000de55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de59:	53                   	push   ebx
c000de5a:	55                   	push   ebp
c000de5b:	45                   	inc    ebp
c000de5c:	56                   	push   esi
c000de5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de60:	83 c4 10             	add    esp,0x10
c000de63:	eb e8                	jmp    c000de4d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de65:	43                   	inc    ebx
c000de66:	eb dd                	jmp    c000de45 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de68:	83 c4 1c             	add    esp,0x1c
c000de6b:	5b                   	pop    ebx
c000de6c:	5e                   	pop    esi
c000de6d:	5f                   	pop    edi
c000de6e:	5d                   	pop    ebp
c000de6f:	c3                   	ret    

c000de70 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de70:	55                   	push   ebp
c000de71:	57                   	push   edi
c000de72:	31 ff                	xor    edi,edi
c000de74:	56                   	push   esi
c000de75:	53                   	push   ebx
c000de76:	83 ec 1c             	sub    esp,0x1c
c000de79:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de7d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de81:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de88:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de95:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de99:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de9c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dea0:	01 f9                	add    ecx,edi
c000dea2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dea6:	7d 2f                	jge    c000ded7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dea8:	31 f6                	xor    esi,esi
c000deaa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000deae:	01 f2                	add    edx,esi
c000deb0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000deb4:	7d 1a                	jge    c000ded0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000deb6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000deb9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000debc:	46                   	inc    esi
c000debd:	51                   	push   ecx
c000debe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dec2:	52                   	push   edx
c000dec3:	55                   	push   ebp
c000dec4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dec7:	83 c4 10             	add    esp,0x10
c000deca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dece:	eb da                	jmp    c000deaa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ded0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ded4:	47                   	inc    edi
c000ded5:	eb c5                	jmp    c000de9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ded7:	83 c4 1c             	add    esp,0x1c
c000deda:	5b                   	pop    ebx
c000dedb:	5e                   	pop    esi
c000dedc:	5f                   	pop    edi
c000dedd:	5d                   	pop    ebp
c000dede:	c3                   	ret    
c000dedf:	90                   	nop

c000dee0 <Video::blit(unsigned int*, int, int, int, int)>:
c000dee0:	55                   	push   ebp
c000dee1:	ba 00 00 00 00       	mov    edx,0x0
c000dee6:	57                   	push   edi
c000dee7:	56                   	push   esi
c000dee8:	53                   	push   ebx
c000dee9:	83 ec 1c             	sub    esp,0x1c
c000deec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000def0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000def4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000def8:	85 c0                	test   eax,eax
c000defa:	0f 49 d0             	cmovns edx,eax
c000defd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000df04:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000df08:	89 eb                	mov    ebx,ebp
c000df0a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000df0e:	01 ea                	add    edx,ebp
c000df10:	39 da                	cmp    edx,ebx
c000df12:	7e 54                	jle    c000df68 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000df14:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df1a:	7c 4c                	jl     c000df68 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000df1c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df20:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df24:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df28:	01 c1                	add    ecx,eax
c000df2a:	39 f9                	cmp    ecx,edi
c000df2c:	7e 2f                	jle    c000df5d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000df2e:	83 c2 04             	add    edx,0x4
c000df31:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df37:	7c 21                	jl     c000df5a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000df39:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df3d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df3f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000df42:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df46:	55                   	push   ebp
c000df47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df4b:	56                   	push   esi
c000df4c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df5a:	47                   	inc    edi
c000df5b:	eb c7                	jmp    c000df24 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df5d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df61:	43                   	inc    ebx
c000df62:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df66:	eb a2                	jmp    c000df0a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df68:	83 c4 1c             	add    esp,0x1c
c000df6b:	5b                   	pop    ebx
c000df6c:	5e                   	pop    esi
c000df6d:	5f                   	pop    edi
c000df6e:	5d                   	pop    ebp
c000df6f:	c3                   	ret    

c000df70 <Video::clearScreen(unsigned int)>:
c000df70:	57                   	push   edi
c000df71:	56                   	push   esi
c000df72:	53                   	push   ebx
c000df73:	31 db                	xor    ebx,ebx
c000df75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df79:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df7f:	7e 1f                	jle    c000dfa0 <Video::clearScreen(unsigned int)+0x30>
c000df81:	31 ff                	xor    edi,edi
c000df83:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df89:	7e 12                	jle    c000df9d <Video::clearScreen(unsigned int)+0x2d>
c000df8b:	8b 06                	mov    eax,DWORD PTR [esi]
c000df8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df91:	53                   	push   ebx
c000df92:	57                   	push   edi
c000df93:	47                   	inc    edi
c000df94:	56                   	push   esi
c000df95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df98:	83 c4 10             	add    esp,0x10
c000df9b:	eb e6                	jmp    c000df83 <Video::clearScreen(unsigned int)+0x13>
c000df9d:	43                   	inc    ebx
c000df9e:	eb d9                	jmp    c000df79 <Video::clearScreen(unsigned int)+0x9>
c000dfa0:	5b                   	pop    ebx
c000dfa1:	5e                   	pop    esi
c000dfa2:	5f                   	pop    edi
c000dfa3:	c3                   	ret    

c000dfa4 <Video::putpixel(int, int, unsigned int)>:
c000dfa4:	c7 44 24 04 a8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207a8
c000dfac:	e9 b8 28 00 00       	jmp    c0010869 <KePanic(char const*)>
c000dfb1:	90                   	nop

c000dfb2 <Video::readPixelApprox(int, int)>:
c000dfb2:	83 ec 18             	sub    esp,0x18
c000dfb5:	68 c9 07 02 c0       	push   0xc00207c9
c000dfba:	e8 aa 28 00 00       	call   c0010869 <KePanic(char const*)>
c000dfbf:	31 c0                	xor    eax,eax
c000dfc1:	83 c4 1c             	add    esp,0x1c
c000dfc4:	c3                   	ret    
c000dfc5:	90                   	nop

c000dfc6 <Video::Video(char const*)>:
c000dfc6:	83 ec 0c             	sub    esp,0xc
c000dfc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcd:	83 ec 08             	sub    esp,0x8
c000dfd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd4:	50                   	push   eax
c000dfd5:	e8 be df ff ff       	call   c000bf98 <Device::Device(char const*)>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	ba 44 08 02 c0       	mov    edx,0xc0020844
c000dfe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe6:	89 10                	mov    DWORD PTR [eax],edx
c000dfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfec:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dff6:	90                   	nop
c000dff7:	83 c4 0c             	add    esp,0xc
c000dffa:	c3                   	ret    
c000dffb:	90                   	nop

c000dffc <Video::~Video()>:
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	ba 44 08 02 c0       	mov    edx,0xc0020844
c000e004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e008:	89 10                	mov    DWORD PTR [eax],edx
c000e00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	50                   	push   eax
c000e012:	e8 eb dc ff ff       	call   c000bd02 <Device::~Device()>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	90                   	nop
c000e01b:	83 c4 0c             	add    esp,0xc
c000e01e:	c3                   	ret    
c000e01f:	90                   	nop

c000e020 <Video::~Video()>:
c000e020:	83 ec 0c             	sub    esp,0xc
c000e023:	83 ec 0c             	sub    esp,0xc
c000e026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02a:	e8 cd ff ff ff       	call   c000dffc <Video::~Video()>
c000e02f:	83 c4 10             	add    esp,0x10
c000e032:	83 ec 08             	sub    esp,0x8
c000e035:	68 64 01 00 00       	push   0x164
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	e8 5d c8 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	83 c4 0c             	add    esp,0xc
c000e049:	c3                   	ret    

c000e04a <Video::isMonochrome()>:
c000e04a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e04e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e054:	c3                   	ret    
c000e055:	90                   	nop

c000e056 <Video::getWidth()>:
c000e056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e05a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e060:	c3                   	ret    
c000e061:	90                   	nop

c000e062 <Video::getHeight()>:
c000e062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e066:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e06c:	c3                   	ret    
c000e06d:	90                   	nop

c000e06e <Video::drawCursor(int, int, unsigned int*, int)>:
c000e06e:	55                   	push   ebp
c000e06f:	57                   	push   edi
c000e070:	56                   	push   esi
c000e071:	53                   	push   ebx
c000e072:	83 ec 2c             	sub    esp,0x2c
c000e075:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e079:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e07d:	83 f8 01             	cmp    eax,0x1
c000e080:	19 c9                	sbb    ecx,ecx
c000e082:	31 db                	xor    ebx,ebx
c000e084:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e088:	89 ce                	mov    esi,ecx
c000e08a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e092:	f7 d6                	not    esi
c000e094:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e09a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e09e:	01 d8                	add    eax,ebx
c000e0a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a4:	57                   	push   edi
c000e0a5:	e8 b8 ff ff ff       	call   c000e062 <Video::getHeight()>
c000e0aa:	59                   	pop    ecx
c000e0ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0af:	7e 70                	jle    c000e121 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e0b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0b5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e0b9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0c0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0c4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cf:	89 e8                	mov    eax,ebp
c000e0d1:	83 c0 20             	add    eax,0x20
c000e0d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0d8:	57                   	push   edi
c000e0d9:	e8 78 ff ff ff       	call   c000e056 <Video::getWidth()>
c000e0de:	5a                   	pop    edx
c000e0df:	39 c5                	cmp    ebp,eax
c000e0e1:	7d 34                	jge    c000e117 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0e3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0e8:	74 05                	je     c000e0ef <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0ea:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0ec:	56                   	push   esi
c000e0ed:	eb 0d                	jmp    c000e0fc <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0ef:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0f4:	74 12                	je     c000e108 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0f6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e100:	55                   	push   ebp
c000e101:	57                   	push   edi
c000e102:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e105:	83 c4 10             	add    esp,0x10
c000e108:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e10c:	45                   	inc    ebp
c000e10d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e111:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e115:	75 c1                	jne    c000e0d8 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e117:	43                   	inc    ebx
c000e118:	83 fb 20             	cmp    ebx,0x20
c000e11b:	0f 85 79 ff ff ff    	jne    c000e09a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e121:	83 c4 2c             	add    esp,0x2c
c000e124:	5b                   	pop    ebx
c000e125:	5e                   	pop    esi
c000e126:	5f                   	pop    edi
c000e127:	5d                   	pop    ebp
c000e128:	c3                   	ret    
c000e129:	90                   	nop

c000e12a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e12a:	55                   	push   ebp
c000e12b:	57                   	push   edi
c000e12c:	56                   	push   esi
c000e12d:	53                   	push   ebx
c000e12e:	83 ec 28             	sub    esp,0x28
c000e131:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e135:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e139:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e13d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e141:	c1 e7 08             	shl    edi,0x8
c000e144:	01 c7                	add    edi,eax
c000e146:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e14a:	c1 e6 08             	shl    esi,0x8
c000e14d:	01 f0                	add    eax,esi
c000e14f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e153:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e157:	0f af c7             	imul   eax,edi
c000e15a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e161:	50                   	push   eax
c000e162:	e8 64 99 ff ff       	call   c0007acb <malloc>
c000e167:	83 c4 10             	add    esp,0x10
c000e16a:	85 c0                	test   eax,eax
c000e16c:	89 c5                	mov    ebp,eax
c000e16e:	75 10                	jne    c000e180 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e170:	83 ec 0c             	sub    esp,0xc
c000e173:	68 f4 07 02 c0       	push   0xc00207f4
c000e178:	e8 ec 26 00 00       	call   c0010869 <KePanic(char const*)>
c000e17d:	83 c4 10             	add    esp,0x10
c000e180:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e184:	ba 12 00 00 00       	mov    edx,0x12
c000e189:	85 c0                	test   eax,eax
c000e18b:	74 11                	je     c000e19e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e18d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e191:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e195:	c1 fa 03             	sar    edx,0x3
c000e198:	0f af d1             	imul   edx,ecx
c000e19b:	83 c2 12             	add    edx,0x12
c000e19e:	85 ff                	test   edi,edi
c000e1a0:	74 06                	je     c000e1a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e1a2:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1a6:	75 12                	jne    c000e1ba <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e1a8:	83 ec 0c             	sub    esp,0xc
c000e1ab:	68 04 08 02 c0       	push   0xc0020804
c000e1b0:	e8 e9 c7 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000e1b5:	e9 b8 00 00 00       	jmp    c000e272 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e1ba:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1be:	83 f9 02             	cmp    ecx,0x2
c000e1c1:	0f 85 96 00 00 00    	jne    c000e25d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e1c7:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1cc:	75 0e                	jne    c000e1dc <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1ce:	85 c0                	test   eax,eax
c000e1d0:	75 0a                	jne    c000e1dc <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1d5:	83 e8 18             	sub    eax,0x18
c000e1d8:	a8 f7                	test   al,0xf7
c000e1da:	74 0a                	je     c000e1e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1dc:	83 ec 0c             	sub    esp,0xc
c000e1df:	68 19 08 02 c0       	push   0xc0020819
c000e1e4:	eb 7f                	jmp    c000e265 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1ee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1f6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e1fa:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e206:	75 0c                	jne    c000e214 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e208:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e20d:	c1 e1 18             	shl    ecx,0x18
c000e210:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e214:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e219:	46                   	inc    esi
c000e21a:	89 c8                	mov    eax,ecx
c000e21c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e221:	c1 e0 10             	shl    eax,0x10
c000e224:	c1 e1 08             	shl    ecx,0x8
c000e227:	09 c1                	or     ecx,eax
c000e229:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e22d:	09 c1                	or     ecx,eax
c000e22f:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e233:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e237:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e23b:	c1 f8 03             	sar    eax,0x3
c000e23e:	01 c2                	add    edx,eax
c000e240:	89 f0                	mov    eax,esi
c000e242:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e246:	39 c7                	cmp    edi,eax
c000e248:	7f b0                	jg     c000e1fa <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e24a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e24e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e252:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e255:	7e 22                	jle    c000e279 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e257:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e25b:	eb 99                	jmp    c000e1f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e25d:	50                   	push   eax
c000e25e:	50                   	push   eax
c000e25f:	51                   	push   ecx
c000e260:	68 27 08 02 c0       	push   0xc0020827
c000e265:	e8 34 c7 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000e26a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e26d:	e8 69 98 ff ff       	call   c0007adb <free>
c000e272:	83 c4 10             	add    esp,0x10
c000e275:	31 ed                	xor    ebp,ebp
c000e277:	eb 0f                	jmp    c000e288 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e27d:	89 38                	mov    DWORD PTR [eax],edi
c000e27f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e283:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e286:	89 38                	mov    DWORD PTR [eax],edi
c000e288:	83 c4 1c             	add    esp,0x1c
c000e28b:	89 e8                	mov    eax,ebp
c000e28d:	5b                   	pop    ebx
c000e28e:	5e                   	pop    esi
c000e28f:	5f                   	pop    edi
c000e290:	5d                   	pop    ebp
c000e291:	c3                   	ret    

c000e292 <Video::putTGA(int, int, unsigned char*, int)>:
c000e292:	55                   	push   ebp
c000e293:	57                   	push   edi
c000e294:	56                   	push   esi
c000e295:	53                   	push   ebx
c000e296:	83 ec 28             	sub    esp,0x28
c000e299:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e29d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e2a1:	50                   	push   eax
c000e2a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2a6:	50                   	push   eax
c000e2a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2af:	57                   	push   edi
c000e2b0:	e8 75 fe ff ff       	call   c000e12a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2b5:	83 c4 20             	add    esp,0x20
c000e2b8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2bc:	85 c0                	test   eax,eax
c000e2be:	74 35                	je     c000e2f5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2c0:	89 c6                	mov    esi,eax
c000e2c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2c6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2ca:	39 d8                	cmp    eax,ebx
c000e2cc:	7e 27                	jle    c000e2f5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2ce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2d2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e2d6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e2da:	39 e9                	cmp    ecx,ebp
c000e2dc:	7e 14                	jle    c000e2f2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2de:	83 c6 04             	add    esi,0x4
c000e2e1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e2e3:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e2e6:	53                   	push   ebx
c000e2e7:	55                   	push   ebp
c000e2e8:	45                   	inc    ebp
c000e2e9:	57                   	push   edi
c000e2ea:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2ed:	83 c4 10             	add    esp,0x10
c000e2f0:	eb e0                	jmp    c000e2d2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2f2:	43                   	inc    ebx
c000e2f3:	eb cd                	jmp    c000e2c2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2f5:	83 c4 1c             	add    esp,0x1c
c000e2f8:	5b                   	pop    ebx
c000e2f9:	5e                   	pop    esi
c000e2fa:	5f                   	pop    edi
c000e2fb:	5d                   	pop    ebp
c000e2fc:	c3                   	ret    
c000e2fd:	66 90                	xchg   ax,ax
c000e2ff:	90                   	nop

c000e300 <ACPI::close(int, int, void*)>:
c000e300:	83 ec 1c             	sub    esp,0x1c
c000e303:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e30b:	74 0b                	je     c000e318 <ACPI::close(int, int, void*)+0x18>
c000e30d:	b8 00 00 00 00       	mov    eax,0x0
c000e312:	e9 99 00 00 00       	jmp    c000e3b0 <ACPI::close(int, int, void*)+0xb0>
c000e317:	90                   	nop
c000e318:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e31d:	75 29                	jne    c000e348 <ACPI::close(int, int, void*)+0x48>
c000e31f:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e324:	85 c0                	test   eax,eax
c000e326:	74 08                	je     c000e330 <ACPI::close(int, int, void*)+0x30>
c000e328:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e32d:	ff d0                	call   eax
c000e32f:	90                   	nop
c000e330:	83 ec 0c             	sub    esp,0xc
c000e333:	68 88 08 02 c0       	push   0xc0020888
c000e338:	e8 2c 25 00 00       	call   c0010869 <KePanic(char const*)>
c000e33d:	83 c4 10             	add    esp,0x10
c000e340:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e345:	eb 69                	jmp    c000e3b0 <ACPI::close(int, int, void*)+0xb0>
c000e347:	90                   	nop
c000e348:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e34d:	75 59                	jne    c000e3a8 <ACPI::close(int, int, void*)+0xa8>
c000e34f:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e354:	85 c0                	test   eax,eax
c000e356:	74 08                	je     c000e360 <ACPI::close(int, int, void*)+0x60>
c000e358:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e35d:	ff d0                	call   eax
c000e35f:	90                   	nop
c000e360:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e365:	8d 76 00             	lea    esi,[esi+0x0]
c000e368:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e36d:	83 e0 02             	and    eax,0x2
c000e370:	74 1e                	je     c000e390 <ACPI::close(int, int, void*)+0x90>
c000e372:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e37d:	89 c2                	mov    edx,eax
c000e37f:	ec                   	in     al,dx
c000e380:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e384:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e388:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e38c:	eb da                	jmp    c000e368 <ACPI::close(int, int, void*)+0x68>
c000e38e:	66 90                	xchg   ax,ax
c000e390:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e397:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e39c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3a4:	ee                   	out    dx,al
c000e3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b0:	83 c4 1c             	add    esp,0x1c
c000e3b3:	c3                   	ret    

c000e3b4 <findRSDP()>:
c000e3b4:	83 ec 1c             	sub    esp,0x1c
c000e3b7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3bc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3c2:	83 e0 04             	and    eax,0x4
c000e3c5:	0f b6 c0             	movzx  eax,al
c000e3c8:	85 c0                	test   eax,eax
c000e3ca:	75 08                	jne    c000e3d4 <findRSDP()+0x20>
c000e3cc:	b8 00 00 00 00       	mov    eax,0x0
c000e3d1:	eb 75                	jmp    c000e448 <findRSDP()+0x94>
c000e3d3:	90                   	nop
c000e3d4:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3d9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3de:	7f 1c                	jg     c000e3fc <findRSDP()+0x48>
c000e3e0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3e5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3eb:	83 e2 fb             	and    edx,0xfffffffb
c000e3ee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3f4:	b8 00 00 00 00       	mov    eax,0x0
c000e3f9:	eb 4d                	jmp    c000e448 <findRSDP()+0x94>
c000e3fb:	90                   	nop
c000e3fc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e404:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e40c:	77 32                	ja     c000e440 <findRSDP()+0x8c>
c000e40e:	83 ec 04             	sub    esp,0x4
c000e411:	6a 08                	push   0x8
c000e413:	68 23 09 02 c0       	push   0xc0020923
c000e418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e41c:	e8 5f 1f ff ff       	call   c0000380 <memcmp>
c000e421:	83 c4 10             	add    esp,0x10
c000e424:	85 c0                	test   eax,eax
c000e426:	0f 94 c0             	sete   al
c000e429:	0f b6 c0             	movzx  eax,al
c000e42c:	85 c0                	test   eax,eax
c000e42e:	74 08                	je     c000e438 <findRSDP()+0x84>
c000e430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e434:	eb 12                	jmp    c000e448 <findRSDP()+0x94>
c000e436:	66 90                	xchg   ax,ax
c000e438:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e43d:	eb c5                	jmp    c000e404 <findRSDP()+0x50>
c000e43f:	90                   	nop
c000e440:	b8 00 00 00 00       	mov    eax,0x0
c000e445:	8d 76 00             	lea    esi,[esi+0x0]
c000e448:	83 c4 1c             	add    esp,0x1c
c000e44b:	c3                   	ret    

c000e44c <loadACPITables(unsigned char*)>:
c000e44c:	57                   	push   edi
c000e44d:	56                   	push   esi
c000e44e:	53                   	push   ebx
c000e44f:	83 ec 60             	sub    esp,0x60
c000e452:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e457:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e45d:	83 e0 04             	and    eax,0x4
c000e460:	0f b6 c0             	movzx  eax,al
c000e463:	85 c0                	test   eax,eax
c000e465:	0f 84 41 02 00 00    	je     c000e6ac <loadACPITables(unsigned char*)+0x260>
c000e46b:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e470:	0f b6 c0             	movzx  eax,al
c000e473:	85 c0                	test   eax,eax
c000e475:	74 79                	je     c000e4f0 <loadACPITables(unsigned char*)+0xa4>
c000e477:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e47b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e47f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e483:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e486:	83 e8 24             	sub    eax,0x24
c000e489:	c1 e8 03             	shr    eax,0x3
c000e48c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e490:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e498:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e49c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4a0:	0f 8d ba 00 00 00    	jge    c000e560 <loadACPITables(unsigned char*)+0x114>
c000e4a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4aa:	83 c0 24             	add    eax,0x24
c000e4ad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4b5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4b9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4bd:	c1 e0 03             	shl    eax,0x3
c000e4c0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4cd:	89 c1                	mov    ecx,eax
c000e4cf:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4d4:	8d 50 01             	lea    edx,[eax+0x1]
c000e4d7:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4dd:	89 ca                	mov    edx,ecx
c000e4df:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4e6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4eb:	eb ab                	jmp    c000e498 <loadACPITables(unsigned char*)+0x4c>
c000e4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4ff:	83 e8 24             	sub    eax,0x24
c000e502:	c1 e8 02             	shr    eax,0x2
c000e505:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e509:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e511:	8d 76 00             	lea    esi,[esi+0x0]
c000e514:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e518:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e51c:	7d 42                	jge    c000e560 <loadACPITables(unsigned char*)+0x114>
c000e51e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e522:	83 c0 24             	add    eax,0x24
c000e525:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e529:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e52d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e531:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e535:	c1 e0 02             	shl    eax,0x2
c000e538:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e53c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e540:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e542:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e547:	8d 50 01             	lea    edx,[eax+0x1]
c000e54a:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e550:	89 ca                	mov    edx,ecx
c000e552:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e559:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e55e:	eb b4                	jmp    c000e514 <loadACPITables(unsigned char*)+0xc8>
c000e560:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e568:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e56d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e571:	0f 8d 39 01 00 00    	jge    c000e6b0 <loadACPITables(unsigned char*)+0x264>
c000e577:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e57b:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e582:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e58a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e58e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e592:	25 ff 0f 00 00       	and    eax,0xfff
c000e597:	89 c6                	mov    esi,eax
c000e599:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e59f:	83 ec 0c             	sub    esp,0xc
c000e5a2:	6a 01                	push   0x1
c000e5a4:	e8 5c b0 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e5a9:	83 c4 10             	add    esp,0x10
c000e5ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5b6:	83 ec 0c             	sub    esp,0xc
c000e5b9:	6a 01                	push   0x1
c000e5bb:	6a 01                	push   0x1
c000e5bd:	50                   	push   eax
c000e5be:	52                   	push   edx
c000e5bf:	53                   	push   ebx
c000e5c0:	e8 39 ba ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5c5:	83 c4 20             	add    esp,0x20
c000e5c8:	09 f0                	or     eax,esi
c000e5ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5ce:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5d2:	c1 e0 03             	shl    eax,0x3
c000e5d5:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5e6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e602:	89 c6                	mov    esi,eax
c000e604:	89 d7                	mov    edi,edx
c000e606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e608:	89 c8                	mov    eax,ecx
c000e60a:	89 fa                	mov    edx,edi
c000e60c:	89 f3                	mov    ebx,esi
c000e60e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e612:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e616:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e61a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e621:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e625:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e629:	05 00 10 00 00       	add    eax,0x1000
c000e62e:	c1 e8 0c             	shr    eax,0xc
c000e631:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e639:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e63d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e641:	25 ff 0f 00 00       	and    eax,0xfff
c000e646:	89 c6                	mov    esi,eax
c000e648:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e64e:	83 ec 0c             	sub    esp,0xc
c000e651:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e655:	e8 ab af ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e65a:	83 c4 10             	add    esp,0x10
c000e65d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e661:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e667:	83 ec 0c             	sub    esp,0xc
c000e66a:	6a 01                	push   0x1
c000e66c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e670:	50                   	push   eax
c000e671:	52                   	push   edx
c000e672:	53                   	push   ebx
c000e673:	e8 86 b9 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e678:	83 c4 20             	add    esp,0x20
c000e67b:	09 f0                	or     eax,esi
c000e67d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e685:	83 ec 0c             	sub    esp,0xc
c000e688:	50                   	push   eax
c000e689:	e8 89 b2 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000e68e:	83 c4 10             	add    esp,0x10
c000e691:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e695:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e699:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e6a0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e6a5:	e9 be fe ff ff       	jmp    c000e568 <loadACPITables(unsigned char*)+0x11c>
c000e6aa:	66 90                	xchg   ax,ax
c000e6ac:	90                   	nop
c000e6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e6b0:	83 c4 60             	add    esp,0x60
c000e6b3:	5b                   	pop    ebx
c000e6b4:	5e                   	pop    esi
c000e6b5:	5f                   	pop    edi
c000e6b6:	c3                   	ret    
c000e6b7:	90                   	nop

c000e6b8 <findRSDT(unsigned char*)>:
c000e6b8:	57                   	push   edi
c000e6b9:	56                   	push   esi
c000e6ba:	53                   	push   ebx
c000e6bb:	83 ec 50             	sub    esp,0x50
c000e6be:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e6c3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6c9:	83 e0 04             	and    eax,0x4
c000e6cc:	0f b6 c0             	movzx  eax,al
c000e6cf:	85 c0                	test   eax,eax
c000e6d1:	75 0d                	jne    c000e6e0 <findRSDT(unsigned char*)+0x28>
c000e6d3:	b8 00 00 00 00       	mov    eax,0x0
c000e6d8:	e9 2b 01 00 00       	jmp    c000e808 <findRSDT(unsigned char*)+0x150>
c000e6dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6e0:	89 e0                	mov    eax,esp
c000e6e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6ee:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e702:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e706:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e70a:	89 c6                	mov    esi,eax
c000e70c:	89 d7                	mov    edi,edx
c000e70e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e710:	89 c8                	mov    eax,ecx
c000e712:	89 fa                	mov    edx,edi
c000e714:	89 f3                	mov    ebx,esi
c000e716:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e71a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e71e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e722:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e726:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e72a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e73a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e742:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e746:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e74a:	25 ff 0f 00 00       	and    eax,0xfff
c000e74f:	89 c6                	mov    esi,eax
c000e751:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e757:	83 ec 0c             	sub    esp,0xc
c000e75a:	6a 02                	push   0x2
c000e75c:	e8 a4 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e761:	83 c4 10             	add    esp,0x10
c000e764:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e768:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e76e:	83 ec 0c             	sub    esp,0xc
c000e771:	6a 01                	push   0x1
c000e773:	6a 02                	push   0x2
c000e775:	50                   	push   eax
c000e776:	52                   	push   edx
c000e777:	53                   	push   ebx
c000e778:	e8 81 b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e77d:	83 c4 20             	add    esp,0x20
c000e780:	09 f0                	or     eax,esi
c000e782:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e786:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e78a:	25 ff 0f 00 00       	and    eax,0xfff
c000e78f:	89 c6                	mov    esi,eax
c000e791:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e797:	83 ec 0c             	sub    esp,0xc
c000e79a:	6a 02                	push   0x2
c000e79c:	e8 64 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e7a1:	83 c4 10             	add    esp,0x10
c000e7a4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ae:	83 ec 0c             	sub    esp,0xc
c000e7b1:	6a 01                	push   0x1
c000e7b3:	6a 02                	push   0x2
c000e7b5:	50                   	push   eax
c000e7b6:	52                   	push   edx
c000e7b7:	53                   	push   ebx
c000e7b8:	e8 41 b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7bd:	83 c4 20             	add    esp,0x20
c000e7c0:	09 f0                	or     eax,esi
c000e7c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7c6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7cb:	85 c0                	test   eax,eax
c000e7cd:	75 11                	jne    c000e7e0 <findRSDT(unsigned char*)+0x128>
c000e7cf:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7de:	eb 24                	jmp    c000e804 <findRSDT(unsigned char*)+0x14c>
c000e7e0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7e5:	83 f8 02             	cmp    eax,0x2
c000e7e8:	75 12                	jne    c000e7fc <findRSDT(unsigned char*)+0x144>
c000e7ea:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7f1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7f5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7f9:	eb 09                	jmp    c000e804 <findRSDT(unsigned char*)+0x14c>
c000e7fb:	90                   	nop
c000e7fc:	b8 00 00 00 00       	mov    eax,0x0
c000e801:	eb 05                	jmp    c000e808 <findRSDT(unsigned char*)+0x150>
c000e803:	90                   	nop
c000e804:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e808:	83 c4 50             	add    esp,0x50
c000e80b:	5b                   	pop    ebx
c000e80c:	5e                   	pop    esi
c000e80d:	5f                   	pop    edi
c000e80e:	c3                   	ret    
c000e80f:	90                   	nop

c000e810 <findDataTable(unsigned char*, char*)>:
c000e810:	83 ec 1c             	sub    esp,0x1c
c000e813:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e818:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e81e:	83 e0 04             	and    eax,0x4
c000e821:	0f b6 c0             	movzx  eax,al
c000e824:	85 c0                	test   eax,eax
c000e826:	75 08                	jne    c000e830 <findDataTable(unsigned char*, char*)+0x20>
c000e828:	b8 00 00 00 00       	mov    eax,0x0
c000e82d:	eb 5d                	jmp    c000e88c <findDataTable(unsigned char*, char*)+0x7c>
c000e82f:	90                   	nop
c000e830:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e838:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e83d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e841:	7d 41                	jge    c000e884 <findDataTable(unsigned char*, char*)+0x74>
c000e843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e847:	c1 e0 03             	shl    eax,0x3
c000e84a:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e84f:	83 ec 04             	sub    esp,0x4
c000e852:	6a 04                	push   0x4
c000e854:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e858:	50                   	push   eax
c000e859:	e8 22 1b ff ff       	call   c0000380 <memcmp>
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	85 c0                	test   eax,eax
c000e863:	0f 94 c0             	sete   al
c000e866:	0f b6 c0             	movzx  eax,al
c000e869:	85 c0                	test   eax,eax
c000e86b:	74 0f                	je     c000e87c <findDataTable(unsigned char*, char*)+0x6c>
c000e86d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e871:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e878:	eb 12                	jmp    c000e88c <findDataTable(unsigned char*, char*)+0x7c>
c000e87a:	66 90                	xchg   ax,ax
c000e87c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e881:	eb b5                	jmp    c000e838 <findDataTable(unsigned char*, char*)+0x28>
c000e883:	90                   	nop
c000e884:	b8 00 00 00 00       	mov    eax,0x0
c000e889:	8d 76 00             	lea    esi,[esi+0x0]
c000e88c:	83 c4 1c             	add    esp,0x1c
c000e88f:	c3                   	ret    

c000e890 <scanMADT()>:
c000e890:	53                   	push   ebx
c000e891:	83 ec 38             	sub    esp,0x38
c000e894:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e899:	25 00 04 00 00       	and    eax,0x400
c000e89e:	74 14                	je     c000e8b4 <scanMADT()+0x24>
c000e8a0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8a5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8ab:	83 e2 fb             	and    edx,0xfffffffb
c000e8ae:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8b4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8b9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8bf:	83 e0 04             	and    eax,0x4
c000e8c2:	0f b6 c0             	movzx  eax,al
c000e8c5:	85 c0                	test   eax,eax
c000e8c7:	0f 84 6b 04 00 00    	je     c000ed38 <scanMADT()+0x4a8>
c000e8cd:	e8 e2 fa ff ff       	call   c000e3b4 <findRSDP()>
c000e8d2:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8d7:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8dc:	85 c0                	test   eax,eax
c000e8de:	75 1c                	jne    c000e8fc <scanMADT()+0x6c>
c000e8e0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8e5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8eb:	83 e2 fb             	and    edx,0xfffffffb
c000e8ee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8f4:	e9 47 04 00 00       	jmp    c000ed40 <scanMADT()+0x4b0>
c000e8f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e8fc:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e901:	83 ec 0c             	sub    esp,0xc
c000e904:	50                   	push   eax
c000e905:	e8 ae fd ff ff       	call   c000e6b8 <findRSDT(unsigned char*)>
c000e90a:	83 c4 10             	add    esp,0x10
c000e90d:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e912:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e917:	85 c0                	test   eax,eax
c000e919:	75 19                	jne    c000e934 <scanMADT()+0xa4>
c000e91b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e920:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e926:	83 e2 fb             	and    edx,0xfffffffb
c000e929:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e92f:	e9 0c 04 00 00       	jmp    c000ed40 <scanMADT()+0x4b0>
c000e934:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e939:	83 ec 0c             	sub    esp,0xc
c000e93c:	50                   	push   eax
c000e93d:	e8 0a fb ff ff       	call   c000e44c <loadACPITables(unsigned char*)>
c000e942:	83 c4 10             	add    esp,0x10
c000e945:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e94a:	83 ec 08             	sub    esp,0x8
c000e94d:	68 2c 09 02 c0       	push   0xc002092c
c000e952:	50                   	push   eax
c000e953:	e8 b8 fe ff ff       	call   c000e810 <findDataTable(unsigned char*, char*)>
c000e958:	83 c4 10             	add    esp,0x10
c000e95b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e95f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e964:	75 1a                	jne    c000e980 <scanMADT()+0xf0>
c000e966:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e96b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e971:	83 e2 fe             	and    edx,0xfffffffe
c000e974:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e97a:	e9 c1 03 00 00       	jmp    c000ed40 <scanMADT()+0x4b0>
c000e97f:	90                   	nop
c000e980:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e988:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e98c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e98f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e993:	0f 87 a7 03 00 00    	ja     c000ed40 <scanMADT()+0x4b0>
c000e999:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e9a1:	0f 87 99 03 00 00    	ja     c000ed40 <scanMADT()+0x4b0>
c000e9a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9b3:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9c2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e9cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9d9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9dd:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9e2:	83 f8 02             	cmp    eax,0x2
c000e9e5:	0f 86 51 03 00 00    	jbe    c000ed3c <scanMADT()+0x4ac>
c000e9eb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9f0:	85 c0                	test   eax,eax
c000e9f2:	75 58                	jne    c000ea4c <scanMADT()+0x1bc>
c000e9f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9f8:	8d 50 01             	lea    edx,[eax+0x1]
c000e9fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9ff:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea05:	0f b6 d2             	movzx  edx,dl
c000ea08:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea0c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea10:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ea16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea1a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea21:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea27:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea2a:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea30:	0f b6 d2             	movzx  edx,dl
c000ea33:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea37:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea3b:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea41:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea46:	e9 d9 02 00 00       	jmp    c000ed24 <scanMADT()+0x494>
c000ea4b:	90                   	nop
c000ea4c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea51:	83 f8 01             	cmp    eax,0x1
c000ea54:	0f 85 1a 01 00 00    	jne    c000eb74 <scanMADT()+0x2e4>
c000ea5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea65:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea6b:	0f b6 d2             	movzx  edx,dl
c000ea6e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea72:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea76:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea7c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea89:	01 d0                	add    eax,edx
c000ea8b:	83 c0 2c             	add    eax,0x2c
c000ea8e:	8a 00                	mov    al,BYTE PTR [eax]
c000ea90:	0f b6 d0             	movzx  edx,al
c000ea93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea97:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea9e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eaa2:	0f b6 c0             	movzx  eax,al
c000eaa5:	c1 e0 08             	shl    eax,0x8
c000eaa8:	89 d1                	mov    ecx,edx
c000eaaa:	09 c1                	or     ecx,eax
c000eaac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eab0:	8d 50 02             	lea    edx,[eax+0x2]
c000eab3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eab7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eabb:	0f b6 c0             	movzx  eax,al
c000eabe:	c1 e0 10             	shl    eax,0x10
c000eac1:	09 c1                	or     ecx,eax
c000eac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac7:	8d 50 03             	lea    edx,[eax+0x3]
c000eaca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eace:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ead2:	0f b6 c0             	movzx  eax,al
c000ead5:	c1 e0 18             	shl    eax,0x18
c000ead8:	09 c1                	or     ecx,eax
c000eada:	89 ca                	mov    edx,ecx
c000eadc:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eae1:	0f b6 c0             	movzx  eax,al
c000eae4:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eaeb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaf0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaf8:	01 d0                	add    eax,edx
c000eafa:	83 c0 2c             	add    eax,0x2c
c000eafd:	8a 00                	mov    al,BYTE PTR [eax]
c000eaff:	0f b6 d0             	movzx  edx,al
c000eb02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb06:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb0d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb11:	0f b6 c0             	movzx  eax,al
c000eb14:	c1 e0 08             	shl    eax,0x8
c000eb17:	89 d1                	mov    ecx,edx
c000eb19:	09 c1                	or     ecx,eax
c000eb1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb1f:	8d 50 02             	lea    edx,[eax+0x2]
c000eb22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb2a:	0f b6 c0             	movzx  eax,al
c000eb2d:	c1 e0 10             	shl    eax,0x10
c000eb30:	09 c1                	or     ecx,eax
c000eb32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb36:	8d 50 03             	lea    edx,[eax+0x3]
c000eb39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb3d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb41:	0f b6 c0             	movzx  eax,al
c000eb44:	c1 e0 18             	shl    eax,0x18
c000eb47:	09 c1                	or     ecx,eax
c000eb49:	89 ca                	mov    edx,ecx
c000eb4b:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb50:	0f b6 c0             	movzx  eax,al
c000eb53:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb5a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb5f:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb64:	83 c0 01             	add    eax,0x1
c000eb67:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb6c:	e9 b3 01 00 00       	jmp    c000ed24 <scanMADT()+0x494>
c000eb71:	8d 76 00             	lea    esi,[esi+0x0]
c000eb74:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb79:	83 f8 02             	cmp    eax,0x2
c000eb7c:	0f 85 ea 00 00 00    	jne    c000ec6c <scanMADT()+0x3dc>
c000eb82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb86:	8d 50 01             	lea    edx,[eax+0x1]
c000eb89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb91:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb95:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb9d:	8d 50 01             	lea    edx,[eax+0x1]
c000eba0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eba4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eba8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebb8:	01 d0                	add    eax,edx
c000ebba:	83 c0 2c             	add    eax,0x2c
c000ebbd:	8a 00                	mov    al,BYTE PTR [eax]
c000ebbf:	0f b6 d0             	movzx  edx,al
c000ebc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc6:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebcd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebd1:	0f b6 c0             	movzx  eax,al
c000ebd4:	c1 e0 08             	shl    eax,0x8
c000ebd7:	89 d1                	mov    ecx,edx
c000ebd9:	09 c1                	or     ecx,eax
c000ebdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdf:	8d 50 02             	lea    edx,[eax+0x2]
c000ebe2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebea:	0f b6 c0             	movzx  eax,al
c000ebed:	c1 e0 10             	shl    eax,0x10
c000ebf0:	09 c1                	or     ecx,eax
c000ebf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebf6:	8d 50 03             	lea    edx,[eax+0x3]
c000ebf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebfd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec01:	0f b6 c0             	movzx  eax,al
c000ec04:	c1 e0 18             	shl    eax,0x18
c000ec07:	09 c8                	or     eax,ecx
c000ec09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec0d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec1a:	01 d0                	add    eax,edx
c000ec1c:	83 c0 2c             	add    eax,0x2c
c000ec1f:	8a 00                	mov    al,BYTE PTR [eax]
c000ec21:	0f b6 d0             	movzx  edx,al
c000ec24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec28:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec2f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec33:	0f b6 c0             	movzx  eax,al
c000ec36:	c1 e0 08             	shl    eax,0x8
c000ec39:	09 d0                	or     eax,edx
c000ec3b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec40:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec45:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec4e:	88 90 a0 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde060],dl
c000ec54:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec59:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ec5e:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec66:	e9 b9 00 00 00       	jmp    c000ed24 <scanMADT()+0x494>
c000ec6b:	90                   	nop
c000ec6c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec71:	83 f8 04             	cmp    eax,0x4
c000ec74:	0f 85 9a 00 00 00    	jne    c000ed14 <scanMADT()+0x484>
c000ec7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec7e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec89:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec8d:	0f b6 c0             	movzx  eax,al
c000ec90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec9c:	01 d0                	add    eax,edx
c000ec9e:	83 c0 2c             	add    eax,0x2c
c000eca1:	8a 00                	mov    al,BYTE PTR [eax]
c000eca3:	0f b6 d0             	movzx  edx,al
c000eca6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecaa:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecb1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecb5:	0f b6 c0             	movzx  eax,al
c000ecb8:	c1 e0 08             	shl    eax,0x8
c000ecbb:	09 d0                	or     eax,edx
c000ecbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecc1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecca:	8d 50 01             	lea    edx,[eax+0x1]
c000eccd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecd5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecd9:	0f b6 c0             	movzx  eax,al
c000ecdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ece0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ece4:	c1 e0 08             	shl    eax,0x8
c000ece7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000eceb:	89 c1                	mov    ecx,eax
c000eced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecf1:	c1 e0 18             	shl    eax,0x18
c000ecf4:	89 c3                	mov    ebx,eax
c000ecf6:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecfb:	8d 50 01             	lea    edx,[eax+0x1]
c000ecfe:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ed04:	09 d9                	or     ecx,ebx
c000ed06:	89 ca                	mov    edx,ecx
c000ed08:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ed0f:	eb 13                	jmp    c000ed24 <scanMADT()+0x494>
c000ed11:	8d 76 00             	lea    esi,[esi+0x0]
c000ed14:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ed19:	83 f8 05             	cmp    eax,0x5
c000ed1c:	75 06                	jne    c000ed24 <scanMADT()+0x494>
c000ed1e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed23:	90                   	nop
c000ed24:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ed29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed2d:	01 d0                	add    eax,edx
c000ed2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed33:	e9 50 fc ff ff       	jmp    c000e988 <scanMADT()+0xf8>
c000ed38:	90                   	nop
c000ed39:	eb 05                	jmp    c000ed40 <scanMADT()+0x4b0>
c000ed3b:	90                   	nop
c000ed3c:	90                   	nop
c000ed3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed40:	83 c4 38             	add    esp,0x38
c000ed43:	5b                   	pop    ebx
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop
c000ed46:	66 90                	xchg   ax,ax

c000ed48 <ACPI::ACPI()>:
c000ed48:	83 ec 0c             	sub    esp,0xc
c000ed4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed4f:	83 ec 08             	sub    esp,0x8
c000ed52:	68 31 09 02 c0       	push   0xc0020931
c000ed57:	50                   	push   eax
c000ed58:	e8 3b d2 ff ff       	call   c000bf98 <Device::Device(char const*)>
c000ed5d:	83 c4 10             	add    esp,0x10
c000ed60:	ba a0 0a 02 c0       	mov    edx,0xc0020aa0
c000ed65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed69:	89 10                	mov    DWORD PTR [eax],edx
c000ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed6f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed7a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed88:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed92:	e8 f9 fa ff ff       	call   c000e890 <scanMADT()>
c000ed97:	90                   	nop
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    

c000ed9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed9c:	83 ec 2c             	sub    esp,0x2c
c000ed9f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eda3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eda7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000edab:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000edaf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000edb4:	88 c8                	mov    al,cl
c000edb6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000edbf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edc7:	90                   	nop
c000edc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edcc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edd2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edd6:	0f 8d b0 00 00 00    	jge    c000ee8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000eddc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ede0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ede4:	83 c2 2a             	add    edx,0x2a
c000ede7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edeb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000edf0:	0f b7 c0             	movzx  eax,ax
c000edf3:	39 c2                	cmp    edx,eax
c000edf5:	0f 85 85 00 00 00    	jne    c000ee80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee03:	83 c2 2a             	add    edx,0x2a
c000ee06:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee0a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ee0f:	0f b6 c0             	movzx  eax,al
c000ee12:	39 c2                	cmp    edx,eax
c000ee14:	75 6a                	jne    c000ee80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ee16:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee1b:	85 c0                	test   eax,eax
c000ee1d:	74 3d                	je     c000ee5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ee1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee27:	83 c2 2a             	add    edx,0x2a
c000ee2a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee35:	39 c2                	cmp    edx,eax
c000ee37:	74 13                	je     c000ee4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee39:	83 ec 0c             	sub    esp,0xc
c000ee3c:	68 ac 08 02 c0       	push   0xc00208ac
c000ee41:	e8 23 1a 00 00       	call   c0010869 <KePanic(char const*)>
c000ee46:	83 c4 10             	add    esp,0x10
c000ee49:	8d 76 00             	lea    esi,[esi+0x0]
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 36 09 02 c0       	push   0xc0020936
c000ee54:	e8 10 1a 00 00       	call   c0010869 <KePanic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee68:	83 c2 2a             	add    edx,0x2a
c000ee6b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee6f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee71:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee74:	89 01                	mov    DWORD PTR [ecx],eax
c000ee76:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee79:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee7e:	66 90                	xchg   ax,ax
c000ee80:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee85:	e9 3e ff ff ff       	jmp    c000edc8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee8a:	66 90                	xchg   ax,ax
c000ee8c:	90                   	nop
c000ee8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee91:	83 c4 2c             	add    esp,0x2c
c000ee94:	c2 04 00             	ret    0x4
c000ee97:	90                   	nop

c000ee98 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee98:	83 ec 1c             	sub    esp,0x1c
c000ee9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee9f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eea3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eea7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeac:	88 c8                	mov    al,cl
c000eeae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeb2:	88 d0                	mov    al,dl
c000eeb4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eeb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec6:	83 c2 2a             	add    edx,0x2a
c000eec9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000eecd:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000eed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eedb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eedf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eee2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eee6:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000eeeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeef:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eef5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eef9:	83 c0 01             	add    eax,0x1
c000eefc:	88 c1                	mov    cl,al
c000eefe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef02:	83 c2 2a             	add    edx,0x2a
c000ef05:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef17:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef1e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef26:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ef2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef33:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef3d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef43:	3d 00 02 00 00       	cmp    eax,0x200
c000ef48:	75 12                	jne    c000ef5c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef4a:	83 ec 0c             	sub    esp,0xc
c000ef4d:	68 45 09 02 c0       	push   0xc0020945
c000ef52:	e8 12 19 00 00       	call   c0010869 <KePanic(char const*)>
c000ef57:	83 c4 10             	add    esp,0x10
c000ef5a:	66 90                	xchg   ax,ax
c000ef5c:	90                   	nop
c000ef5d:	83 c4 1c             	add    esp,0x1c
c000ef60:	c3                   	ret    
c000ef61:	90                   	nop
c000ef62:	66 90                	xchg   ax,ax

c000ef64 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef64:	b8 00 00 00 00       	mov    eax,0x0
c000ef69:	c3                   	ret    
c000ef6a:	66 90                	xchg   ax,ax

c000ef6c <ACPI::detectPCI()>:
c000ef6c:	53                   	push   ebx
c000ef6d:	83 ec 28             	sub    esp,0x28
c000ef70:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef75:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef7a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef7f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef85:	83 e0 04             	and    eax,0x4
c000ef88:	0f b6 c0             	movzx  eax,al
c000ef8b:	85 c0                	test   eax,eax
c000ef8d:	74 2d                	je     c000efbc <ACPI::detectPCI()+0x50>
c000ef8f:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef94:	83 ec 08             	sub    esp,0x8
c000ef97:	68 62 09 02 c0       	push   0xc0020962
c000ef9c:	50                   	push   eax
c000ef9d:	e8 6e f8 ff ff       	call   c000e810 <findDataTable(unsigned char*, char*)>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efa9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efae:	74 0c                	je     c000efbc <ACPI::detectPCI()+0x50>
c000efb0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efb5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efba:	66 90                	xchg   ax,ax
c000efbc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc8:	8a 00                	mov    al,BYTE PTR [eax]
c000efca:	0f b6 c0             	movzx  eax,al
c000efcd:	83 f8 01             	cmp    eax,0x1
c000efd0:	75 0e                	jne    c000efe0 <ACPI::detectPCI()+0x74>
c000efd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efdc:	eb 2e                	jmp    c000f00c <ACPI::detectPCI()+0xa0>
c000efde:	66 90                	xchg   ax,ax
c000efe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe4:	8a 00                	mov    al,BYTE PTR [eax]
c000efe6:	0f b6 c0             	movzx  eax,al
c000efe9:	83 f8 02             	cmp    eax,0x2
c000efec:	75 1e                	jne    c000f00c <ACPI::detectPCI()+0xa0>
c000efee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eff3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000eff8:	85 c0                	test   eax,eax
c000effa:	74 10                	je     c000f00c <ACPI::detectPCI()+0xa0>
c000effc:	83 ec 0c             	sub    esp,0xc
c000efff:	68 dc 08 02 c0       	push   0xc00208dc
c000f004:	e8 60 18 00 00       	call   c0010869 <KePanic(char const*)>
c000f009:	83 c4 10             	add    esp,0x10
c000f00c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f010:	83 f0 01             	xor    eax,0x1
c000f013:	0f b6 c0             	movzx  eax,al
c000f016:	85 c0                	test   eax,eax
c000f018:	74 46                	je     c000f060 <ACPI::detectPCI()+0xf4>
c000f01a:	e8 11 11 ff ff       	call   c0000130 <manualPCIProbe>
c000f01f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f023:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f028:	75 0e                	jne    c000f038 <ACPI::detectPCI()+0xcc>
c000f02a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f02f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f034:	eb 2a                	jmp    c000f060 <ACPI::detectPCI()+0xf4>
c000f036:	66 90                	xchg   ax,ax
c000f038:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f03d:	75 21                	jne    c000f060 <ACPI::detectPCI()+0xf4>
c000f03f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f044:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f049:	85 c0                	test   eax,eax
c000f04b:	74 13                	je     c000f060 <ACPI::detectPCI()+0xf4>
c000f04d:	83 ec 0c             	sub    esp,0xc
c000f050:	68 dc 08 02 c0       	push   0xc00208dc
c000f055:	e8 0f 18 00 00       	call   c0010869 <KePanic(char const*)>
c000f05a:	83 c4 10             	add    esp,0x10
c000f05d:	8d 76 00             	lea    esi,[esi+0x0]
c000f060:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f065:	85 c0                	test   eax,eax
c000f067:	0f 84 87 00 00 00    	je     c000f0f4 <ACPI::detectPCI()+0x188>
c000f06d:	83 ec 0c             	sub    esp,0xc
c000f070:	68 67 09 02 c0       	push   0xc0020967
c000f075:	e8 72 11 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c000f07a:	83 c4 10             	add    esp,0x10
c000f07d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f085:	83 ec 0c             	sub    esp,0xc
c000f088:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f08c:	e8 3a 8a ff ff       	call   c0007acb <malloc>
c000f091:	83 c4 10             	add    esp,0x10
c000f094:	89 c3                	mov    ebx,eax
c000f096:	83 ec 0c             	sub    esp,0xc
c000f099:	53                   	push   ebx
c000f09a:	e8 c7 af 00 00       	call   c001a066 <PCI::PCI()>
c000f09f:	83 c4 10             	add    esp,0x10
c000f0a2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f0a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0aa:	83 ec 08             	sub    esp,0x8
c000f0ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0b1:	50                   	push   eax
c000f0b2:	e8 49 cd ff ff       	call   c000be00 <Device::addChild(Device*)>
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c0:	83 c0 08             	add    eax,0x8
c000f0c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f0ca:	85 d2                	test   edx,edx
c000f0cc:	74 0a                	je     c000f0d8 <ACPI::detectPCI()+0x16c>
c000f0ce:	ba 01 00 00 00       	mov    edx,0x1
c000f0d3:	eb 0b                	jmp    c000f0e0 <ACPI::detectPCI()+0x174>
c000f0d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d8:	ba 02 00 00 00       	mov    edx,0x2
c000f0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e0:	6a 00                	push   0x0
c000f0e2:	6a 00                	push   0x0
c000f0e4:	52                   	push   edx
c000f0e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0e9:	ff d0                	call   eax
c000f0eb:	83 c4 10             	add    esp,0x10
c000f0ee:	e9 91 00 00 00       	jmp    c000f184 <ACPI::detectPCI()+0x218>
c000f0f3:	90                   	nop
c000f0f4:	83 ec 0c             	sub    esp,0xc
c000f0f7:	68 7f 09 02 c0       	push   0xc002097f
c000f0fc:	e8 eb 10 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c000f101:	83 c4 10             	add    esp,0x10
c000f104:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f10b:	83 ec 0c             	sub    esp,0xc
c000f10e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f112:	e8 b4 89 ff ff       	call   c0007acb <malloc>
c000f117:	83 c4 10             	add    esp,0x10
c000f11a:	89 c3                	mov    ebx,eax
c000f11c:	83 ec 0c             	sub    esp,0xc
c000f11f:	53                   	push   ebx
c000f120:	e8 e9 ba 00 00       	call   c001ac0e <IDE::IDE()>
c000f125:	83 c4 10             	add    esp,0x10
c000f128:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f12c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f130:	83 ec 08             	sub    esp,0x8
c000f133:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f137:	50                   	push   eax
c000f138:	e8 c3 cc ff ff       	call   c000be00 <Device::addChild(Device*)>
c000f13d:	83 c4 10             	add    esp,0x10
c000f140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f144:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f14e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f152:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f15b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f15f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f16c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f16e:	83 c0 08             	add    eax,0x8
c000f171:	8b 00                	mov    eax,DWORD PTR [eax]
c000f173:	6a 00                	push   0x0
c000f175:	6a 00                	push   0x0
c000f177:	6a 00                	push   0x0
c000f179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f17d:	ff d0                	call   eax
c000f17f:	83 c4 10             	add    esp,0x10
c000f182:	66 90                	xchg   ax,ax
c000f184:	90                   	nop
c000f185:	83 c4 28             	add    esp,0x28
c000f188:	5b                   	pop    ebx
c000f189:	c3                   	ret    
c000f18a:	66 90                	xchg   ax,ax

c000f18c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f18c:	83 ec 1c             	sub    esp,0x1c
c000f18f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f193:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f196:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f19a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f19f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1a4:	83 ec 08             	sub    esp,0x8
c000f1a7:	52                   	push   edx
c000f1a8:	50                   	push   eax
c000f1a9:	e8 e4 7f ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f1ae:	83 c4 10             	add    esp,0x10
c000f1b1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1b5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1ba:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1bf:	83 ec 04             	sub    esp,0x4
c000f1c2:	6a 01                	push   0x1
c000f1c4:	52                   	push   edx
c000f1c5:	50                   	push   eax
c000f1c6:	e8 df 80 ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1cb:	83 c4 10             	add    esp,0x10
c000f1ce:	90                   	nop
c000f1cf:	83 c4 1c             	add    esp,0x1c
c000f1d2:	c3                   	ret    
c000f1d3:	90                   	nop

c000f1d4 <ACPI::sleep()>:
c000f1d4:	83 ec 0c             	sub    esp,0xc
c000f1d7:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1dc:	85 c0                	test   eax,eax
c000f1de:	74 08                	je     c000f1e8 <ACPI::sleep()+0x14>
c000f1e0:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1e5:	ff d0                	call   eax
c000f1e7:	90                   	nop
c000f1e8:	90                   	nop
c000f1e9:	83 c4 0c             	add    esp,0xc
c000f1ec:	c3                   	ret    
c000f1ed:	90                   	nop
c000f1ee:	66 90                	xchg   ax,ax

c000f1f0 <ACPI::open(int, int, void*)>:
c000f1f0:	55                   	push   ebp
c000f1f1:	89 e5                	mov    ebp,esp
c000f1f3:	53                   	push   ebx
c000f1f4:	81 ec 74 01 00 00    	sub    esp,0x174
c000f1fa:	83 ec 0c             	sub    esp,0xc
c000f1fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f200:	e8 67 fd ff ff       	call   c000ef6c <ACPI::detectPCI()>
c000f205:	83 c4 10             	add    esp,0x10
c000f208:	83 ec 0c             	sub    esp,0xc
c000f20b:	68 04 09 02 c0       	push   0xc0020904
c000f210:	e8 d7 0f 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c000f215:	83 c4 10             	add    esp,0x10
c000f218:	b8 4c 05 00 00       	mov    eax,0x54c
c000f21d:	8a 00                	mov    al,BYTE PTR [eax]
c000f21f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f222:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f226:	83 f8 01             	cmp    eax,0x1
c000f229:	75 15                	jne    c000f240 <ACPI::open(int, int, void*)+0x50>
c000f22b:	83 ec 0c             	sub    esp,0xc
c000f22e:	68 94 09 02 c0       	push   0xc0020994
c000f233:	e8 3e 49 00 00       	call   c0013b76 <Thr::loadKernelSymbolTable(char const*)>
c000f238:	83 c4 10             	add    esp,0x10
c000f23b:	eb 33                	jmp    c000f270 <ACPI::open(int, int, void*)+0x80>
c000f23d:	8d 76 00             	lea    esi,[esi+0x0]
c000f240:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f244:	3d bb 00 00 00       	cmp    eax,0xbb
c000f249:	75 15                	jne    c000f260 <ACPI::open(int, int, void*)+0x70>
c000f24b:	83 ec 0c             	sub    esp,0xc
c000f24e:	68 b2 09 02 c0       	push   0xc00209b2
c000f253:	e8 1e 49 00 00       	call   c0013b76 <Thr::loadKernelSymbolTable(char const*)>
c000f258:	83 c4 10             	add    esp,0x10
c000f25b:	eb 13                	jmp    c000f270 <ACPI::open(int, int, void*)+0x80>
c000f25d:	8d 76 00             	lea    esi,[esi+0x0]
c000f260:	83 ec 0c             	sub    esp,0xc
c000f263:	68 d0 09 02 c0       	push   0xc00209d0
c000f268:	e8 fc 15 00 00       	call   c0010869 <KePanic(char const*)>
c000f26d:	83 c4 10             	add    esp,0x10
c000f270:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f274:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f27b:	83 ec 0c             	sub    esp,0xc
c000f27e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f281:	e8 45 88 ff ff       	call   c0007acb <malloc>
c000f286:	83 c4 10             	add    esp,0x10
c000f289:	89 c3                	mov    ebx,eax
c000f28b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f290:	83 ec 04             	sub    esp,0x4
c000f293:	50                   	push   eax
c000f294:	68 ea 09 02 c0       	push   0xc00209ea
c000f299:	53                   	push   ebx
c000f29a:	e8 a7 bc ff ff       	call   c000af46 <File::File(char const*, Process*)>
c000f29f:	83 c4 10             	add    esp,0x10
c000f2a2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2a5:	83 ec 08             	sub    esp,0x8
c000f2a8:	6a 01                	push   0x1
c000f2aa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2ad:	e8 50 bd ff ff       	call   c000b002 <File::open(FileOpenMode)>
c000f2b2:	83 c4 10             	add    esp,0x10
c000f2b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f2b8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f2bc:	75 12                	jne    c000f2d0 <ACPI::open(int, int, void*)+0xe0>
c000f2be:	83 ec 0c             	sub    esp,0xc
c000f2c1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2c4:	e8 97 bd ff ff       	call   c000b060 <File::close()>
c000f2c9:	83 c4 10             	add    esp,0x10
c000f2cc:	eb 06                	jmp    c000f2d4 <ACPI::open(int, int, void*)+0xe4>
c000f2ce:	66 90                	xchg   ax,ax
c000f2d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f2d4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f2d8:	74 16                	je     c000f2f0 <ACPI::open(int, int, void*)+0x100>
c000f2da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2df:	83 c0 08             	add    eax,0x8
c000f2e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2e4:	83 ec 0c             	sub    esp,0xc
c000f2e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2ea:	ff d0                	call   eax
c000f2ec:	83 c4 10             	add    esp,0x10
c000f2ef:	90                   	nop
c000f2f0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f2f3:	83 f0 01             	xor    eax,0x1
c000f2f6:	0f b6 c0             	movzx  eax,al
c000f2f9:	85 c0                	test   eax,eax
c000f2fb:	74 3b                	je     c000f338 <ACPI::open(int, int, void*)+0x148>
c000f2fd:	83 ec 0c             	sub    esp,0xc
c000f300:	68 08 0a 02 c0       	push   0xc0020a08
c000f305:	e8 e2 0e 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c000f30a:	83 c4 10             	add    esp,0x10
c000f30d:	83 ec 04             	sub    esp,0x4
c000f310:	6a 0c                	push   0xc
c000f312:	68 23 0a 02 c0       	push   0xc0020a23
c000f317:	68 34 0a 02 c0       	push   0xc0020a34
c000f31c:	e8 fd 3b 00 00       	call   c0012f1e <Reg::readIntWithDefault(char*, char*, int)>
c000f321:	83 c4 10             	add    esp,0x10
c000f324:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f327:	83 ec 0c             	sub    esp,0xc
c000f32a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f32d:	e8 f8 a4 ff ff       	call   c000982a <Virt::setupPageSwapping(int)>
c000f332:	83 c4 10             	add    esp,0x10
c000f335:	8d 76 00             	lea    esi,[esi+0x0]
c000f338:	83 ec 0c             	sub    esp,0xc
c000f33b:	68 15 fa 01 c0       	push   0xc001fa15
c000f340:	e8 a7 0e 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c000f345:	83 c4 10             	add    esp,0x10
c000f348:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f34b:	83 ec 08             	sub    esp,0x8
c000f34e:	6a 13                	push   0x13
c000f350:	50                   	push   eax
c000f351:	e8 c2 cd ff ff       	call   c000c118 <getDevicesOfType(DeviceType)>
c000f356:	83 c4 0c             	add    esp,0xc
c000f359:	8d 76 00             	lea    esi,[esi+0x0]
c000f35c:	83 ec 0c             	sub    esp,0xc
c000f35f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f362:	50                   	push   eax
c000f363:	e8 a8 fa 00 00       	call   c001ee10 <LinkedList<Device>::isEmpty()>
c000f368:	83 c4 10             	add    esp,0x10
c000f36b:	83 f0 01             	xor    eax,0x1
c000f36e:	0f b6 c0             	movzx  eax,al
c000f371:	85 c0                	test   eax,eax
c000f373:	0f 84 1f 01 00 00    	je     c000f498 <ACPI::open(int, int, void*)+0x2a8>
c000f379:	83 ec 0c             	sub    esp,0xc
c000f37c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f37f:	50                   	push   eax
c000f380:	e8 a7 fa 00 00       	call   c001ee2c <LinkedList<Device>::getFirstElement()>
c000f385:	83 c4 10             	add    esp,0x10
c000f388:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f38b:	83 ec 0c             	sub    esp,0xc
c000f38e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f391:	50                   	push   eax
c000f392:	e8 9d fa 00 00       	call   c001ee34 <LinkedList<Device>::removeFirst()>
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f39d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f3a0:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f3a3:	b8 24 00 00 00       	mov    eax,0x24
c000f3a8:	83 e0 fc             	and    eax,0xfffffffc
c000f3ab:	89 c3                	mov    ebx,eax
c000f3ad:	b8 00 00 00 00       	mov    eax,0x0
c000f3b2:	66 90                	xchg   ax,ax
c000f3b4:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f3bb:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f3c2:	83 c0 04             	add    eax,0x4
c000f3c5:	39 d8                	cmp    eax,ebx
c000f3c7:	72 eb                	jb     c000f3b4 <ACPI::open(int, int, void*)+0x1c4>
c000f3c9:	83 ec 08             	sub    esp,0x8
c000f3cc:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f3d2:	50                   	push   eax
c000f3d3:	83 ec 24             	sub    esp,0x24
c000f3d6:	89 e1                	mov    ecx,esp
c000f3d8:	b8 24 00 00 00       	mov    eax,0x24
c000f3dd:	83 e0 fc             	and    eax,0xfffffffc
c000f3e0:	89 c3                	mov    ebx,eax
c000f3e2:	b8 00 00 00 00       	mov    eax,0x0
c000f3e7:	90                   	nop
c000f3e8:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f3ef:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f3f2:	83 c0 04             	add    eax,0x4
c000f3f5:	39 d8                	cmp    eax,ebx
c000f3f7:	72 ef                	jb     c000f3e8 <ACPI::open(int, int, void*)+0x1f8>
c000f3f9:	e8 50 b1 00 00       	call   c001a54e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3fe:	83 c4 30             	add    esp,0x30
c000f401:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f404:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f408:	0f 84 4e ff ff ff    	je     c000f35c <ACPI::open(int, int, void*)+0x16c>
c000f40e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f415:	83 ec 0c             	sub    esp,0xc
c000f418:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f41b:	e8 ab 86 ff ff       	call   c0007acb <malloc>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	89 c3                	mov    ebx,eax
c000f425:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f42a:	83 ec 04             	sub    esp,0x4
c000f42d:	50                   	push   eax
c000f42e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f431:	53                   	push   ebx
c000f432:	e8 0f bb ff ff       	call   c000af46 <File::File(char const*, Process*)>
c000f437:	83 c4 10             	add    esp,0x10
c000f43a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f43d:	83 ec 0c             	sub    esp,0xc
c000f440:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f443:	e8 28 be ff ff       	call   c000b270 <File::exists()>
c000f448:	83 c4 10             	add    esp,0x10
c000f44b:	0f b6 c0             	movzx  eax,al
c000f44e:	85 c0                	test   eax,eax
c000f450:	74 22                	je     c000f474 <ACPI::open(int, int, void*)+0x284>
c000f452:	83 ec 08             	sub    esp,0x8
c000f455:	6a 01                	push   0x1
c000f457:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f45a:	e8 99 51 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	83 ec 08             	sub    esp,0x8
c000f465:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f468:	50                   	push   eax
c000f469:	e8 ca 53 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	8d 76 00             	lea    esi,[esi+0x0]
c000f474:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f478:	0f 84 de fe ff ff    	je     c000f35c <ACPI::open(int, int, void*)+0x16c>
c000f47e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f481:	8b 00                	mov    eax,DWORD PTR [eax]
c000f483:	83 c0 08             	add    eax,0x8
c000f486:	8b 00                	mov    eax,DWORD PTR [eax]
c000f488:	83 ec 0c             	sub    esp,0xc
c000f48b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f48e:	ff d0                	call   eax
c000f490:	83 c4 10             	add    esp,0x10
c000f493:	e9 c4 fe ff ff       	jmp    c000f35c <ACPI::open(int, int, void*)+0x16c>
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f49e:	50                   	push   eax
c000f49f:	e8 68 f9 00 00       	call   c001ee0c <LinkedList<Device>::~LinkedList()>
c000f4a4:	83 c4 10             	add    esp,0x10
c000f4a7:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f4ad:	83 ec 08             	sub    esp,0x8
c000f4b0:	6a 01                	push   0x1
c000f4b2:	68 3b 0a 02 c0       	push   0xc0020a3b
c000f4b7:	e8 3c 51 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	83 ec 08             	sub    esp,0x8
c000f4c2:	53                   	push   ebx
c000f4c3:	50                   	push   eax
c000f4c4:	e8 6f 53 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f4d1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4d7:	83 e0 04             	and    eax,0x4
c000f4da:	0f b6 c0             	movzx  eax,al
c000f4dd:	85 c0                	test   eax,eax
c000f4df:	0f 84 e3 00 00 00    	je     c000f5c8 <ACPI::open(int, int, void*)+0x3d8>
c000f4e5:	83 ec 0c             	sub    esp,0xc
c000f4e8:	68 58 0a 02 c0       	push   0xc0020a58
c000f4ed:	e8 fa 0c 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c000f4f2:	83 c4 10             	add    esp,0x10
c000f4f5:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f502:	e8 c4 85 ff ff       	call   c0007acb <malloc>
c000f507:	83 c4 10             	add    esp,0x10
c000f50a:	89 c3                	mov    ebx,eax
c000f50c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f511:	83 ec 04             	sub    esp,0x4
c000f514:	50                   	push   eax
c000f515:	68 75 0a 02 c0       	push   0xc0020a75
c000f51a:	53                   	push   ebx
c000f51b:	e8 26 ba ff ff       	call   c000af46 <File::File(char const*, Process*)>
c000f520:	83 c4 10             	add    esp,0x10
c000f523:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f526:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f52a:	74 1c                	je     c000f548 <ACPI::open(int, int, void*)+0x358>
c000f52c:	83 ec 0c             	sub    esp,0xc
c000f52f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f532:	e8 39 bd ff ff       	call   c000b270 <File::exists()>
c000f537:	83 c4 10             	add    esp,0x10
c000f53a:	0f b6 c0             	movzx  eax,al
c000f53d:	85 c0                	test   eax,eax
c000f53f:	74 07                	je     c000f548 <ACPI::open(int, int, void*)+0x358>
c000f541:	b0 01                	mov    al,0x1
c000f543:	eb 07                	jmp    c000f54c <ACPI::open(int, int, void*)+0x35c>
c000f545:	8d 76 00             	lea    esi,[esi+0x0]
c000f548:	b0 00                	mov    al,0x0
c000f54a:	66 90                	xchg   ax,ax
c000f54c:	0f b6 c0             	movzx  eax,al
c000f54f:	85 c0                	test   eax,eax
c000f551:	74 21                	je     c000f574 <ACPI::open(int, int, void*)+0x384>
c000f553:	83 ec 08             	sub    esp,0x8
c000f556:	6a 01                	push   0x1
c000f558:	68 75 0a 02 c0       	push   0xc0020a75
c000f55d:	e8 96 50 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	83 ec 08             	sub    esp,0x8
c000f568:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f56b:	50                   	push   eax
c000f56c:	e8 c7 52 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c000f571:	83 c4 10             	add    esp,0x10
c000f574:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f578:	74 1e                	je     c000f598 <ACPI::open(int, int, void*)+0x3a8>
c000f57a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f57e:	74 18                	je     c000f598 <ACPI::open(int, int, void*)+0x3a8>
c000f580:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f583:	8b 00                	mov    eax,DWORD PTR [eax]
c000f585:	83 c0 08             	add    eax,0x8
c000f588:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58a:	83 ec 0c             	sub    esp,0xc
c000f58d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f590:	ff d0                	call   eax
c000f592:	83 c4 10             	add    esp,0x10
c000f595:	8d 76 00             	lea    esi,[esi+0x0]
c000f598:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f59d:	83 ec 08             	sub    esp,0x8
c000f5a0:	68 92 0a 02 c0       	push   0xc0020a92
c000f5a5:	50                   	push   eax
c000f5a6:	e8 65 f2 ff ff       	call   c000e810 <findDataTable(unsigned char*, char*)>
c000f5ab:	83 c4 10             	add    esp,0x10
c000f5ae:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f5b1:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f5b5:	74 11                	je     c000f5c8 <ACPI::open(int, int, void*)+0x3d8>
c000f5b7:	83 ec 08             	sub    esp,0x8
c000f5ba:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f5bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f5c0:	e8 c7 fb ff ff       	call   c000f18c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5c5:	83 c4 10             	add    esp,0x10
c000f5c8:	b8 00 00 00 00       	mov    eax,0x0
c000f5cd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f5d0:	c9                   	leave  
c000f5d1:	c3                   	ret    

c000f5d2 <CPU::close(int, int, void*)>:
c000f5d2:	31 c0                	xor    eax,eax
c000f5d4:	c3                   	ret    
c000f5d5:	90                   	nop

c000f5d6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5d6:	60                   	pusha  
c000f5d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5e3:	9c                   	pushf  
c000f5e4:	fa                   	cli    
c000f5e5:	0f 09                	wbinvd 
c000f5e7:	0f 30                	wrmsr  
c000f5e9:	9d                   	popf   
c000f5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5ee:	89 02                	mov    DWORD PTR [edx],eax
c000f5f0:	61                   	popa   
c000f5f1:	c3                   	ret    

c000f5f2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5f2:	60                   	pusha  
c000f5f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5f7:	9c                   	pushf  
c000f5f8:	fa                   	cli    
c000f5f9:	0f 09                	wbinvd 
c000f5fb:	31 c0                	xor    eax,eax
c000f5fd:	31 d2                	xor    edx,edx
c000f5ff:	0f 32                	rdmsr  
c000f601:	9d                   	popf   
c000f602:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f606:	89 02                	mov    DWORD PTR [edx],eax
c000f608:	61                   	popa   
c000f609:	c3                   	ret    

c000f60a <CPU::AMD_K6_writeback(int, int, int)>:
c000f60a:	56                   	push   esi
c000f60b:	53                   	push   ebx
c000f60c:	83 ec 10             	sub    esp,0x10
c000f60f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f618:	75 5d                	jne    c000f677 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f61a:	83 f8 08             	cmp    eax,0x8
c000f61d:	75 09                	jne    c000f628 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f61f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f624:	7e 13                	jle    c000f639 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f626:	eb 30                	jmp    c000f658 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f628:	83 f8 06             	cmp    eax,0x6
c000f62b:	7c 4a                	jl     c000f677 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f62d:	83 f8 07             	cmp    eax,0x7
c000f630:	7e 07                	jle    c000f639 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f632:	83 f8 09             	cmp    eax,0x9
c000f635:	74 21                	je     c000f658 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f637:	eb 3e                	jmp    c000f677 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f639:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f63f:	89 e6                	mov    esi,esp
c000f641:	56                   	push   esi
c000f642:	68 82 00 00 c0       	push   0xc0000082
c000f647:	e8 a6 ff ff ff       	call   c000f5f2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f64c:	c1 eb 15             	shr    ebx,0x15
c000f64f:	56                   	push   esi
c000f650:	83 e3 7e             	and    ebx,0x7e
c000f653:	6a 00                	push   0x0
c000f655:	53                   	push   ebx
c000f656:	eb 12                	jmp    c000f66a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f658:	89 e3                	mov    ebx,esp
c000f65a:	53                   	push   ebx
c000f65b:	68 82 00 00 c0       	push   0xc0000082
c000f660:	e8 8d ff ff ff       	call   c000f5f2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f665:	53                   	push   ebx
c000f666:	6a 00                	push   0x0
c000f668:	6a 00                	push   0x0
c000f66a:	68 82 00 00 c0       	push   0xc0000082
c000f66f:	e8 62 ff ff ff       	call   c000f5d6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f674:	83 c4 18             	add    esp,0x18
c000f677:	83 c4 10             	add    esp,0x10
c000f67a:	5b                   	pop    ebx
c000f67b:	5e                   	pop    esi
c000f67c:	c3                   	ret    
c000f67d:	90                   	nop

c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f67e:	55                   	push   ebp
c000f67f:	57                   	push   edi
c000f680:	56                   	push   esi
c000f681:	53                   	push   ebx
c000f682:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f686:	39 05 b0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fb0,eax
c000f68c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f690:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f694:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f698:	75 23                	jne    c000f6bd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f69a:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f69f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6a3:	89 06                	mov    DWORD PTR [esi],eax
c000f6a5:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f6aa:	89 07                	mov    DWORD PTR [edi],eax
c000f6ac:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f6b1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6b4:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f6b9:	89 02                	mov    DWORD PTR [edx],eax
c000f6bb:	eb 3f                	jmp    c000f6fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6bd:	31 c9                	xor    ecx,ecx
c000f6bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6c3:	0f a2                	cpuid  
c000f6c5:	89 06                	mov    DWORD PTR [esi],eax
c000f6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6cb:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6cd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6d0:	89 10                	mov    DWORD PTR [eax],edx
c000f6d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6d6:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c000f6db:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6dd:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6e2:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6e4:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6ec:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f7:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6fc:	5b                   	pop    ebx
c000f6fd:	5e                   	pop    esi
c000f6fe:	5f                   	pop    edi
c000f6ff:	5d                   	pop    ebp
c000f700:	c3                   	ret    
c000f701:	90                   	nop

c000f702 <CPU::cpuidCheckEDX(unsigned int)>:
c000f702:	83 ec 10             	sub    esp,0x10
c000f705:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f709:	50                   	push   eax
c000f70a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70e:	50                   	push   eax
c000f70f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f713:	50                   	push   eax
c000f714:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f718:	50                   	push   eax
c000f719:	6a 01                	push   0x1
c000f71b:	e8 5e ff ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f720:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f724:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f728:	0f 95 c0             	setne  al
c000f72b:	83 c4 24             	add    esp,0x24
c000f72e:	c3                   	ret    
c000f72f:	90                   	nop

c000f730 <CPU::cpuidCheckECX(unsigned int)>:
c000f730:	83 ec 10             	sub    esp,0x10
c000f733:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f737:	50                   	push   eax
c000f738:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73c:	50                   	push   eax
c000f73d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f741:	50                   	push   eax
c000f742:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f746:	50                   	push   eax
c000f747:	6a 01                	push   0x1
c000f749:	e8 30 ff ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f752:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f756:	0f 95 c0             	setne  al
c000f759:	83 c4 24             	add    esp,0x24
c000f75c:	c3                   	ret    
c000f75d:	90                   	nop

c000f75e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f75e:	83 ec 10             	sub    esp,0x10
c000f761:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f765:	50                   	push   eax
c000f766:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76a:	50                   	push   eax
c000f76b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76f:	50                   	push   eax
c000f770:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f774:	50                   	push   eax
c000f775:	6a 07                	push   0x7
c000f777:	e8 02 ff ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f77c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f780:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f784:	0f 95 c0             	setne  al
c000f787:	83 c4 24             	add    esp,0x24
c000f78a:	c3                   	ret    
c000f78b:	90                   	nop

c000f78c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f78c:	83 ec 10             	sub    esp,0x10
c000f78f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f793:	50                   	push   eax
c000f794:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f798:	50                   	push   eax
c000f799:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79d:	50                   	push   eax
c000f79e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a2:	50                   	push   eax
c000f7a3:	6a 07                	push   0x7
c000f7a5:	e8 d4 fe ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7ae:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7b2:	0f 95 c0             	setne  al
c000f7b5:	83 c4 24             	add    esp,0x24
c000f7b8:	c3                   	ret    
c000f7b9:	90                   	nop

c000f7ba <CPU::CPU()>:
c000f7ba:	83 ec 0c             	sub    esp,0xc
c000f7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7c1:	83 ec 08             	sub    esp,0x8
c000f7c4:	68 b5 0b 02 c0       	push   0xc0020bb5
c000f7c9:	50                   	push   eax
c000f7ca:	e8 c9 c7 ff ff       	call   c000bf98 <Device::Device(char const*)>
c000f7cf:	83 c4 10             	add    esp,0x10
c000f7d2:	ba 3c 0c 02 c0       	mov    edx,0xc0020c3c
c000f7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7db:	89 10                	mov    DWORD PTR [eax],edx
c000f7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ef:	05 78 01 00 00       	add    eax,0x178
c000f7f4:	83 ec 0c             	sub    esp,0xc
c000f7f7:	50                   	push   eax
c000f7f8:	e8 77 7b ff ff       	call   c0007374 <GDT::GDT()>
c000f7fd:	83 c4 10             	add    esp,0x10
c000f800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f804:	05 7c 09 00 00       	add    eax,0x97c
c000f809:	83 ec 0c             	sub    esp,0xc
c000f80c:	50                   	push   eax
c000f80d:	e8 b2 7d ff ff       	call   c00075c4 <IDT::IDT()>
c000f812:	83 c4 10             	add    esp,0x10
c000f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f819:	05 7c 11 00 00       	add    eax,0x117c
c000f81e:	83 ec 0c             	sub    esp,0xc
c000f821:	50                   	push   eax
c000f822:	e8 15 97 ff ff       	call   c0008f3c <TSS::TSS()>
c000f827:	83 c4 10             	add    esp,0x10
c000f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f82e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f839:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f843:	90                   	nop
c000f844:	83 c4 0c             	add    esp,0xc
c000f847:	c3                   	ret    

c000f848 <CPU::displayFeatures()>:
c000f848:	c3                   	ret    
c000f849:	90                   	nop

c000f84a <CPU::detectFeatures()>:
c000f84a:	55                   	push   ebp
c000f84b:	57                   	push   edi
c000f84c:	56                   	push   esi
c000f84d:	53                   	push   ebx
c000f84e:	83 ec 30             	sub    esp,0x30
c000f851:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f855:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f85f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f865:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f86c:	6a 0d                	push   0xd
c000f86e:	6a 00                	push   0x0
c000f870:	55                   	push   ebp
c000f871:	e8 7a 0c ff ff       	call   c00004f0 <memset>
c000f876:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f87b:	83 c4 10             	add    esp,0x10
c000f87e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f885:	0f 84 db 05 00 00    	je     c000fe66 <CPU::detectFeatures()+0x61c>
c000f88b:	83 ec 0c             	sub    esp,0xc
c000f88e:	89 ef                	mov    edi,ebp
c000f890:	6a 10                	push   0x10
c000f892:	e8 6b fe ff ff       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c000f897:	83 e0 01             	and    eax,0x1
c000f89a:	8d 14 00             	lea    edx,[eax+eax*1]
c000f89d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a3:	83 e0 fd             	and    eax,0xfffffffd
c000f8a6:	09 d0                	or     eax,edx
c000f8a8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8ae:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8b5:	e8 48 fe ff ff       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c000f8ba:	83 e0 01             	and    eax,0x1
c000f8bd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8c4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ca:	83 e0 fb             	and    eax,0xfffffffb
c000f8cd:	09 d0                	or     eax,edx
c000f8cf:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8dc:	e8 21 fe ff ff       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8f1:	83 e0 f7             	and    eax,0xfffffff7
c000f8f4:	09 d0                	or     eax,edx
c000f8f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8fc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f903:	e8 fa fd ff ff       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c000f908:	83 e0 01             	and    eax,0x1
c000f90b:	c1 e0 04             	shl    eax,0x4
c000f90e:	89 c2                	mov    edx,eax
c000f910:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f916:	83 e0 ef             	and    eax,0xffffffef
c000f919:	09 d0                	or     eax,edx
c000f91b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f921:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f928:	e8 d5 fd ff ff       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c000f92d:	83 e0 01             	and    eax,0x1
c000f930:	c1 e0 05             	shl    eax,0x5
c000f933:	89 c2                	mov    edx,eax
c000f935:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f93b:	83 e0 df             	and    eax,0xffffffdf
c000f93e:	09 d0                	or     eax,edx
c000f940:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f946:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f94d:	e8 b0 fd ff ff       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c000f952:	83 e0 01             	and    eax,0x1
c000f955:	8d 14 00             	lea    edx,[eax+eax*1]
c000f958:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f95e:	83 e0 fd             	and    eax,0xfffffffd
c000f961:	09 d0                	or     eax,edx
c000f963:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f969:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f970:	e8 8d fd ff ff       	call   c000f702 <CPU::cpuidCheckEDX(unsigned int)>
c000f975:	83 e0 01             	and    eax,0x1
c000f978:	c1 e0 06             	shl    eax,0x6
c000f97b:	89 c2                	mov    edx,eax
c000f97d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f983:	83 e0 bf             	and    eax,0xffffffbf
c000f986:	09 d0                	or     eax,edx
c000f988:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f98e:	58                   	pop    eax
c000f98f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f993:	50                   	push   eax
c000f994:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f998:	50                   	push   eax
c000f999:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f99d:	56                   	push   esi
c000f99e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a2:	50                   	push   eax
c000f9a3:	6a 00                	push   0x0
c000f9a5:	e8 d4 fc ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9aa:	b8 04 00 00 00       	mov    eax,0x4
c000f9af:	89 c1                	mov    ecx,eax
c000f9b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9b3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9b9:	89 c1                	mov    ecx,eax
c000f9bb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9c1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9c7:	89 c1                	mov    ecx,eax
c000f9c9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9cf:	83 c4 18             	add    esp,0x18
c000f9d2:	68 c4 0a 02 c0       	push   0xc0020ac4
c000f9d7:	55                   	push   ebp
c000f9d8:	e8 a3 0d ff ff       	call   c0000780 <strcmp>
c000f9dd:	83 c4 10             	add    esp,0x10
c000f9e0:	85 c0                	test   eax,eax
c000f9e2:	75 0f                	jne    c000f9f3 <CPU::detectFeatures()+0x1a9>
c000f9e4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9ee:	e9 22 02 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000f9f3:	50                   	push   eax
c000f9f4:	50                   	push   eax
c000f9f5:	68 d1 0a 02 c0       	push   0xc0020ad1
c000f9fa:	55                   	push   ebp
c000f9fb:	e8 80 0d ff ff       	call   c0000780 <strcmp>
c000fa00:	83 c4 10             	add    esp,0x10
c000fa03:	85 c0                	test   eax,eax
c000fa05:	74 dd                	je     c000f9e4 <CPU::detectFeatures()+0x19a>
c000fa07:	50                   	push   eax
c000fa08:	50                   	push   eax
c000fa09:	68 de 0a 02 c0       	push   0xc0020ade
c000fa0e:	55                   	push   ebp
c000fa0f:	e8 6c 0d ff ff       	call   c0000780 <strcmp>
c000fa14:	83 c4 10             	add    esp,0x10
c000fa17:	85 c0                	test   eax,eax
c000fa19:	74 2a                	je     c000fa45 <CPU::detectFeatures()+0x1fb>
c000fa1b:	50                   	push   eax
c000fa1c:	50                   	push   eax
c000fa1d:	68 eb 0a 02 c0       	push   0xc0020aeb
c000fa22:	55                   	push   ebp
c000fa23:	e8 58 0d ff ff       	call   c0000780 <strcmp>
c000fa28:	83 c4 10             	add    esp,0x10
c000fa2b:	85 c0                	test   eax,eax
c000fa2d:	74 16                	je     c000fa45 <CPU::detectFeatures()+0x1fb>
c000fa2f:	50                   	push   eax
c000fa30:	50                   	push   eax
c000fa31:	68 f8 0a 02 c0       	push   0xc0020af8
c000fa36:	55                   	push   ebp
c000fa37:	e8 44 0d ff ff       	call   c0000780 <strcmp>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	85 c0                	test   eax,eax
c000fa41:	74 48                	je     c000fa8b <CPU::detectFeatures()+0x241>
c000fa43:	eb 0f                	jmp    c000fa54 <CPU::detectFeatures()+0x20a>
c000fa45:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa4f:	e9 c1 01 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fa54:	50                   	push   eax
c000fa55:	50                   	push   eax
c000fa56:	68 05 0b 02 c0       	push   0xc0020b05
c000fa5b:	55                   	push   ebp
c000fa5c:	e8 1f 0d ff ff       	call   c0000780 <strcmp>
c000fa61:	83 c4 10             	add    esp,0x10
c000fa64:	85 c0                	test   eax,eax
c000fa66:	74 23                	je     c000fa8b <CPU::detectFeatures()+0x241>
c000fa68:	57                   	push   edi
c000fa69:	57                   	push   edi
c000fa6a:	68 12 0b 02 c0       	push   0xc0020b12
c000fa6f:	55                   	push   ebp
c000fa70:	e8 0b 0d ff ff       	call   c0000780 <strcmp>
c000fa75:	83 c4 10             	add    esp,0x10
c000fa78:	85 c0                	test   eax,eax
c000fa7a:	75 1e                	jne    c000fa9a <CPU::detectFeatures()+0x250>
c000fa7c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa86:	e9 8a 01 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fa8b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa95:	e9 7b 01 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fa9a:	56                   	push   esi
c000fa9b:	56                   	push   esi
c000fa9c:	68 1f 0b 02 c0       	push   0xc0020b1f
c000faa1:	55                   	push   ebp
c000faa2:	e8 d9 0c ff ff       	call   c0000780 <strcmp>
c000faa7:	83 c4 10             	add    esp,0x10
c000faaa:	85 c0                	test   eax,eax
c000faac:	75 0f                	jne    c000fabd <CPU::detectFeatures()+0x273>
c000faae:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fab8:	e9 58 01 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fabd:	51                   	push   ecx
c000fabe:	51                   	push   ecx
c000fabf:	68 de 0a 02 c0       	push   0xc0020ade
c000fac4:	55                   	push   ebp
c000fac5:	e8 b6 0c ff ff       	call   c0000780 <strcmp>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	85 c0                	test   eax,eax
c000facf:	75 0f                	jne    c000fae0 <CPU::detectFeatures()+0x296>
c000fad1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fadb:	e9 35 01 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fae0:	52                   	push   edx
c000fae1:	52                   	push   edx
c000fae2:	68 2c 0b 02 c0       	push   0xc0020b2c
c000fae7:	55                   	push   ebp
c000fae8:	e8 93 0c ff ff       	call   c0000780 <strcmp>
c000faed:	83 c4 10             	add    esp,0x10
c000faf0:	85 c0                	test   eax,eax
c000faf2:	75 0f                	jne    c000fb03 <CPU::detectFeatures()+0x2b9>
c000faf4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fafe:	e9 12 01 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fb03:	50                   	push   eax
c000fb04:	50                   	push   eax
c000fb05:	68 39 0b 02 c0       	push   0xc0020b39
c000fb0a:	55                   	push   ebp
c000fb0b:	e8 70 0c ff ff       	call   c0000780 <strcmp>
c000fb10:	83 c4 10             	add    esp,0x10
c000fb13:	85 c0                	test   eax,eax
c000fb15:	75 0f                	jne    c000fb26 <CPU::detectFeatures()+0x2dc>
c000fb17:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb21:	e9 ef 00 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fb26:	50                   	push   eax
c000fb27:	50                   	push   eax
c000fb28:	68 46 0b 02 c0       	push   0xc0020b46
c000fb2d:	55                   	push   ebp
c000fb2e:	e8 4d 0c ff ff       	call   c0000780 <strcmp>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	85 c0                	test   eax,eax
c000fb38:	75 0f                	jne    c000fb49 <CPU::detectFeatures()+0x2ff>
c000fb3a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb44:	e9 cc 00 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fb49:	50                   	push   eax
c000fb4a:	50                   	push   eax
c000fb4b:	68 53 0b 02 c0       	push   0xc0020b53
c000fb50:	55                   	push   ebp
c000fb51:	e8 2a 0c ff ff       	call   c0000780 <strcmp>
c000fb56:	83 c4 10             	add    esp,0x10
c000fb59:	85 c0                	test   eax,eax
c000fb5b:	75 0f                	jne    c000fb6c <CPU::detectFeatures()+0x322>
c000fb5d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb67:	e9 a9 00 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fb6c:	50                   	push   eax
c000fb6d:	50                   	push   eax
c000fb6e:	68 60 0b 02 c0       	push   0xc0020b60
c000fb73:	55                   	push   ebp
c000fb74:	e8 07 0c ff ff       	call   c0000780 <strcmp>
c000fb79:	83 c4 10             	add    esp,0x10
c000fb7c:	85 c0                	test   eax,eax
c000fb7e:	75 0f                	jne    c000fb8f <CPU::detectFeatures()+0x345>
c000fb80:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb8a:	e9 86 00 00 00       	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fb8f:	50                   	push   eax
c000fb90:	50                   	push   eax
c000fb91:	68 6d 0b 02 c0       	push   0xc0020b6d
c000fb96:	55                   	push   ebp
c000fb97:	e8 e4 0b ff ff       	call   c0000780 <strcmp>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	75 0c                	jne    c000fbaf <CPU::detectFeatures()+0x365>
c000fba3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbad:	eb 66                	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fbaf:	50                   	push   eax
c000fbb0:	50                   	push   eax
c000fbb1:	68 7a 0b 02 c0       	push   0xc0020b7a
c000fbb6:	55                   	push   ebp
c000fbb7:	e8 c4 0b ff ff       	call   c0000780 <strcmp>
c000fbbc:	83 c4 10             	add    esp,0x10
c000fbbf:	85 c0                	test   eax,eax
c000fbc1:	75 0c                	jne    c000fbcf <CPU::detectFeatures()+0x385>
c000fbc3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbcd:	eb 46                	jmp    c000fc15 <CPU::detectFeatures()+0x3cb>
c000fbcf:	57                   	push   edi
c000fbd0:	57                   	push   edi
c000fbd1:	68 87 0b 02 c0       	push   0xc0020b87
c000fbd6:	55                   	push   ebp
c000fbd7:	e8 a4 0b ff ff       	call   c0000780 <strcmp>
c000fbdc:	83 c4 10             	add    esp,0x10
c000fbdf:	85 c0                	test   eax,eax
c000fbe1:	74 e0                	je     c000fbc3 <CPU::detectFeatures()+0x379>
c000fbe3:	56                   	push   esi
c000fbe4:	56                   	push   esi
c000fbe5:	68 94 0b 02 c0       	push   0xc0020b94
c000fbea:	55                   	push   ebp
c000fbeb:	e8 90 0b ff ff       	call   c0000780 <strcmp>
c000fbf0:	83 c4 10             	add    esp,0x10
c000fbf3:	85 c0                	test   eax,eax
c000fbf5:	74 cc                	je     c000fbc3 <CPU::detectFeatures()+0x379>
c000fbf7:	51                   	push   ecx
c000fbf8:	51                   	push   ecx
c000fbf9:	68 a1 0b 02 c0       	push   0xc0020ba1
c000fbfe:	55                   	push   ebp
c000fbff:	e8 7c 0b ff ff       	call   c0000780 <strcmp>
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	85 c0                	test   eax,eax
c000fc09:	74 b8                	je     c000fbc3 <CPU::detectFeatures()+0x379>
c000fc0b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc15:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc1a:	0f 86 be 00 00 00    	jbe    c000fcde <CPU::detectFeatures()+0x494>
c000fc20:	83 ec 0c             	sub    esp,0xc
c000fc23:	68 80 00 00 00       	push   0x80
c000fc28:	e8 31 fb ff ff       	call   c000f75e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc2d:	83 e0 01             	and    eax,0x1
c000fc30:	c1 e0 06             	shl    eax,0x6
c000fc33:	89 c2                	mov    edx,eax
c000fc35:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc3b:	83 e0 bf             	and    eax,0xffffffbf
c000fc3e:	09 d0                	or     eax,edx
c000fc40:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc46:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc4d:	e8 0c fb ff ff       	call   c000f75e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc52:	83 e0 01             	and    eax,0x1
c000fc55:	c1 e0 04             	shl    eax,0x4
c000fc58:	89 c2                	mov    edx,eax
c000fc5a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc60:	83 e0 ef             	and    eax,0xffffffef
c000fc63:	09 d0                	or     eax,edx
c000fc65:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc6b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc72:	e8 e7 fa ff ff       	call   c000f75e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc77:	89 c2                	mov    edx,eax
c000fc79:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc7f:	c1 e2 07             	shl    edx,0x7
c000fc82:	83 e0 7f             	and    eax,0x7f
c000fc85:	09 d0                	or     eax,edx
c000fc87:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc8d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc94:	e8 f3 fa ff ff       	call   c000f78c <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc99:	83 e0 01             	and    eax,0x1
c000fc9c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fca3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fca9:	83 e0 f7             	and    eax,0xfffffff7
c000fcac:	09 d0                	or     eax,edx
c000fcae:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcb4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fcbb:	e8 cc fa ff ff       	call   c000f78c <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcc0:	83 c4 10             	add    esp,0x10
c000fcc3:	83 e0 01             	and    eax,0x1
c000fcc6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fccd:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcd3:	83 e0 fb             	and    eax,0xfffffffb
c000fcd6:	09 d0                	or     eax,edx
c000fcd8:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcde:	83 ec 0c             	sub    esp,0xc
c000fce1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fce5:	50                   	push   eax
c000fce6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcea:	50                   	push   eax
c000fceb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcef:	57                   	push   edi
c000fcf0:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcf4:	56                   	push   esi
c000fcf5:	6a 01                	push   0x1
c000fcf7:	e8 82 f9 ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd00:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fd06:	89 c1                	mov    ecx,eax
c000fd08:	83 e1 0f             	and    ecx,0xf
c000fd0b:	83 e2 f0             	and    edx,0xfffffff0
c000fd0e:	09 ca                	or     edx,ecx
c000fd10:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd16:	89 c2                	mov    edx,eax
c000fd18:	c1 ea 04             	shr    edx,0x4
c000fd1b:	83 e2 0f             	and    edx,0xf
c000fd1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fd22:	89 d1                	mov    ecx,edx
c000fd24:	83 c4 20             	add    esp,0x20
c000fd27:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd2d:	c1 e1 06             	shl    ecx,0x6
c000fd30:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd36:	09 ca                	or     edx,ecx
c000fd38:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd3f:	89 c2                	mov    edx,eax
c000fd41:	c1 ea 08             	shr    edx,0x8
c000fd44:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd4a:	83 e2 0f             	and    edx,0xf
c000fd4d:	89 d5                	mov    ebp,edx
c000fd4f:	83 e5 03             	and    ebp,0x3
c000fd52:	c1 e5 06             	shl    ebp,0x6
c000fd55:	83 e1 3f             	and    ecx,0x3f
c000fd58:	09 e9                	or     ecx,ebp
c000fd5a:	89 d5                	mov    ebp,edx
c000fd5c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd62:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd68:	c1 ed 02             	shr    ebp,0x2
c000fd6b:	83 e1 c0             	and    ecx,0xffffffc0
c000fd6e:	09 e9                	or     ecx,ebp
c000fd70:	89 c5                	mov    ebp,eax
c000fd72:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd78:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd7e:	c1 ed 08             	shr    ebp,0x8
c000fd81:	83 e5 30             	and    ebp,0x30
c000fd84:	83 e1 cf             	and    ecx,0xffffffcf
c000fd87:	09 e9                	or     ecx,ebp
c000fd89:	83 fa 06             	cmp    edx,0x6
c000fd8c:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd92:	74 05                	je     c000fd99 <CPU::detectFeatures()+0x54f>
c000fd94:	83 fa 0f             	cmp    edx,0xf
c000fd97:	75 64                	jne    c000fdfd <CPU::detectFeatures()+0x5b3>
c000fd99:	89 c1                	mov    ecx,eax
c000fd9b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fda1:	c1 e9 10             	shr    ecx,0x10
c000fda4:	c1 e1 04             	shl    ecx,0x4
c000fda7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fdab:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fdb1:	0f b6 c9             	movzx  ecx,cl
c000fdb4:	c1 e1 06             	shl    ecx,0x6
c000fdb7:	09 e9                	or     ecx,ebp
c000fdb9:	83 fa 0f             	cmp    edx,0xf
c000fdbc:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fdc3:	75 38                	jne    c000fdfd <CPU::detectFeatures()+0x5b3>
c000fdc5:	c1 e8 14             	shr    eax,0x14
c000fdc8:	83 c0 0f             	add    eax,0xf
c000fdcb:	0f b6 c0             	movzx  eax,al
c000fdce:	89 c2                	mov    edx,eax
c000fdd0:	c1 e8 02             	shr    eax,0x2
c000fdd3:	83 e2 03             	and    edx,0x3
c000fdd6:	89 d1                	mov    ecx,edx
c000fdd8:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fdde:	c1 e1 06             	shl    ecx,0x6
c000fde1:	83 e2 3f             	and    edx,0x3f
c000fde4:	09 ca                	or     edx,ecx
c000fde6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdec:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdf2:	83 e2 c0             	and    edx,0xffffffc0
c000fdf5:	09 d0                	or     eax,edx
c000fdf7:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdfd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe03:	83 ec 0c             	sub    esp,0xc
c000fe06:	83 c8 07             	or     eax,0x7
c000fe09:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe0f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe13:	50                   	push   eax
c000fe14:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe18:	55                   	push   ebp
c000fe19:	57                   	push   edi
c000fe1a:	56                   	push   esi
c000fe1b:	68 00 00 00 80       	push   0x80000000
c000fe20:	e8 59 f8 ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe25:	83 c4 20             	add    esp,0x20
c000fe28:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe30:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe34:	76 1e                	jbe    c000fe54 <CPU::detectFeatures()+0x60a>
c000fe36:	83 ec 0c             	sub    esp,0xc
c000fe39:	50                   	push   eax
c000fe3a:	55                   	push   ebp
c000fe3b:	57                   	push   edi
c000fe3c:	56                   	push   esi
c000fe3d:	68 01 00 00 80       	push   0x80000001
c000fe42:	e8 37 f8 ff ff       	call   c000f67e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe47:	83 c4 20             	add    esp,0x20
c000fe4a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe54:	52                   	push   edx
c000fe55:	52                   	push   edx
c000fe56:	68 ad 0b 02 c0       	push   0xc0020bad
c000fe5b:	53                   	push   ebx
c000fe5c:	e8 29 c1 ff ff       	call   c000bf8a <Device::setName(char const*)>
c000fe61:	83 c4 10             	add    esp,0x10
c000fe64:	eb 69                	jmp    c000fecf <CPU::detectFeatures()+0x685>
c000fe66:	50                   	push   eax
c000fe67:	50                   	push   eax
c000fe68:	68 12 0b 02 c0       	push   0xc0020b12
c000fe6d:	55                   	push   ebp
c000fe6e:	e8 dd 07 ff ff       	call   c0000650 <strcpy>
c000fe73:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe7d:	e8 41 03 ff ff       	call   c00001c3 <is486>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	85 c0                	test   eax,eax
c000fe87:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe8d:	74 1f                	je     c000feae <CPU::detectFeatures()+0x664>
c000fe8f:	83 c8 07             	or     eax,0x7
c000fe92:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe98:	0f 20 c0             	mov    eax,cr0
c000fe9b:	83 e0 14             	and    eax,0x14
c000fe9e:	83 f8 04             	cmp    eax,0x4
c000fea1:	75 10                	jne    c000feb3 <CPU::detectFeatures()+0x669>
c000fea3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fea9:	83 e0 fd             	and    eax,0xfffffffd
c000feac:	eb 1b                	jmp    c000fec9 <CPU::detectFeatures()+0x67f>
c000feae:	83 e0 f8             	and    eax,0xfffffff8
c000feb1:	eb df                	jmp    c000fe92 <CPU::detectFeatures()+0x648>
c000feb3:	e8 e6 02 ff ff       	call   c000019e <hasLegacyFPU>
c000feb8:	83 e0 01             	and    eax,0x1
c000febb:	8d 14 00             	lea    edx,[eax+eax*1]
c000febe:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fec4:	83 e0 fd             	and    eax,0xfffffffd
c000fec7:	09 d0                	or     eax,edx
c000fec9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fecf:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fed6:	74 17                	je     c000feef <CPU::detectFeatures()+0x6a5>
c000fed8:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fede:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000fee4:	83 c8 10             	or     eax,0x10
c000fee7:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000feed:	eb 20                	jmp    c000ff0f <CPU::detectFeatures()+0x6c5>
c000feef:	e8 aa 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fef4:	83 e0 01             	and    eax,0x1
c000fef7:	8d 14 00             	lea    edx,[eax+eax*1]
c000fefa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff00:	83 e0 fd             	and    eax,0xfffffffd
c000ff03:	09 d0                	or     eax,edx
c000ff05:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff0b:	a8 02                	test   al,0x2
c000ff0d:	75 c9                	jne    c000fed8 <CPU::detectFeatures()+0x68e>
c000ff0f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff16:	83 c4 2c             	add    esp,0x2c
c000ff19:	5b                   	pop    ebx
c000ff1a:	5e                   	pop    esi
c000ff1b:	5f                   	pop    edi
c000ff1c:	5d                   	pop    ebp
c000ff1d:	c3                   	ret    

c000ff1e <CPU::setupSMEP()>:
c000ff1e:	0f 20 e0             	mov    eax,cr4
c000ff21:	0d 00 00 10 00       	or     eax,0x100000
c000ff26:	0f 22 e0             	mov    cr4,eax
c000ff29:	c3                   	ret    

c000ff2a <CPU::setupUMIP()>:
c000ff2a:	0f 20 e0             	mov    eax,cr4
c000ff2d:	80 cc 08             	or     ah,0x8
c000ff30:	0f 22 e0             	mov    cr4,eax
c000ff33:	c3                   	ret    

c000ff34 <CPU::setupTSC()>:
c000ff34:	0f 20 e0             	mov    eax,cr4
c000ff37:	83 c8 04             	or     eax,0x4
c000ff3a:	0f 22 e0             	mov    cr4,eax
c000ff3d:	c3                   	ret    

c000ff3e <CPU::setupLargePages()>:
c000ff3e:	0f 20 e0             	mov    eax,cr4
c000ff41:	83 c8 10             	or     eax,0x10
c000ff44:	0f 22 e0             	mov    cr4,eax
c000ff47:	c3                   	ret    

c000ff48 <CPU::setupPAT()>:
c000ff48:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff4d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff54:	74 2c                	je     c000ff82 <CPU::setupPAT()+0x3a>
c000ff56:	53                   	push   ebx
c000ff57:	83 ec 10             	sub    esp,0x10
c000ff5a:	68 77 02 00 00       	push   0x277
c000ff5f:	50                   	push   eax
c000ff60:	e8 75 71 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c000ff65:	83 e2 f8             	and    edx,0xfffffff8
c000ff68:	83 ca 01             	or     edx,0x1
c000ff6b:	52                   	push   edx
c000ff6c:	50                   	push   eax
c000ff6d:	68 77 02 00 00       	push   0x277
c000ff72:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff78:	e8 89 71 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff7d:	83 c4 28             	add    esp,0x28
c000ff80:	5b                   	pop    ebx
c000ff81:	c3                   	ret    
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <CPU::setupMTRR()>:
c000ff84:	c3                   	ret    
c000ff85:	90                   	nop

c000ff86 <CPU::setupGlobalPages()>:
c000ff86:	0f 20 e0             	mov    eax,cr4
c000ff89:	0c 80                	or     al,0x80
c000ff8b:	0f 22 e0             	mov    cr4,eax
c000ff8e:	c3                   	ret    
c000ff8f:	90                   	nop

c000ff90 <CPU::allowUsermodeDataAccess()>:
c000ff90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff94:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff9b:	74 03                	je     c000ffa0 <CPU::allowUsermodeDataAccess()+0x10>
c000ff9d:	0f 01 cb             	stac   
c000ffa0:	c3                   	ret    
c000ffa1:	90                   	nop

c000ffa2 <CPU::prohibitUsermodeDataAccess()>:
c000ffa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffa6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffad:	74 03                	je     c000ffb2 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ffaf:	0f 01 ca             	clac   
c000ffb2:	c3                   	ret    
c000ffb3:	90                   	nop

c000ffb4 <CPU::setupSMAP()>:
c000ffb4:	0f 20 e0             	mov    eax,cr4
c000ffb7:	0d 00 00 20 00       	or     eax,0x200000
c000ffbc:	0f 22 e0             	mov    cr4,eax
c000ffbf:	eb e1                	jmp    c000ffa2 <CPU::prohibitUsermodeDataAccess()>
c000ffc1:	90                   	nop

c000ffc2 <CPU::setupFeatures()>:
c000ffc2:	53                   	push   ebx
c000ffc3:	83 ec 08             	sub    esp,0x8
c000ffc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffca:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffd1:	74 18                	je     c000ffeb <CPU::setupFeatures()+0x29>
c000ffd3:	83 ec 0c             	sub    esp,0xc
c000ffd6:	68 b9 0b 02 c0       	push   0xc0020bb9
c000ffdb:	e8 be a9 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c000ffe0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe3:	e8 42 ff ff ff       	call   c000ff2a <CPU::setupUMIP()>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fff2:	74 18                	je     c001000c <CPU::setupFeatures()+0x4a>
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	68 c3 0b 02 c0       	push   0xc0020bc3
c000fffc:	e8 9d a9 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0010001:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010004:	e8 2b ff ff ff       	call   c000ff34 <CPU::setupTSC()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010013:	74 18                	je     c001002d <CPU::setupFeatures()+0x6b>
c0010015:	83 ec 0c             	sub    esp,0xc
c0010018:	68 cc 0b 02 c0       	push   0xc0020bcc
c001001d:	e8 7c a9 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0010022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010025:	e8 14 ff ff ff       	call   c000ff3e <CPU::setupLargePages()>
c001002a:	83 c4 10             	add    esp,0x10
c001002d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010034:	74 18                	je     c001004e <CPU::setupFeatures()+0x8c>
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	68 d5 0b 02 c0       	push   0xc0020bd5
c001003e:	e8 5b a9 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0010043:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010046:	e8 3b ff ff ff       	call   c000ff86 <CPU::setupGlobalPages()>
c001004b:	83 c4 10             	add    esp,0x10
c001004e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010055:	74 18                	je     c001006f <CPU::setupFeatures()+0xad>
c0010057:	83 ec 0c             	sub    esp,0xc
c001005a:	68 e7 0b 02 c0       	push   0xc0020be7
c001005f:	e8 3a a9 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0010064:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010067:	e8 dc fe ff ff       	call   c000ff48 <CPU::setupPAT()>
c001006c:	83 c4 10             	add    esp,0x10
c001006f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010076:	74 11                	je     c0010089 <CPU::setupFeatures()+0xc7>
c0010078:	c7 44 24 10 f0 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bf0
c0010080:	83 c4 08             	add    esp,0x8
c0010083:	5b                   	pop    ebx
c0010084:	e9 15 a9 ff ff       	jmp    c000a99e <Dbg::kprintf(char const*, ...)>
c0010089:	83 c4 08             	add    esp,0x8
c001008c:	5b                   	pop    ebx
c001008d:	c3                   	ret    

c001008e <CPU::open(int, int, void*)>:
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010095:	83 ec 0c             	sub    esp,0xc
c0010098:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001009c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00100a2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100a8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100ae:	50                   	push   eax
c00100af:	e8 22 73 ff ff       	call   c00073d6 <GDT::setup()>
c00100b4:	83 c4 0c             	add    esp,0xc
c00100b7:	6a 00                	push   0x0
c00100b9:	68 ef be ad de       	push   0xdeadbeef
c00100be:	57                   	push   edi
c00100bf:	e8 bc 8e ff ff       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c00100c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100c7:	e8 94 8e ff ff       	call   c0008f60 <TSS::flush()>
c00100cc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00100d5:	e8 60 75 ff ff       	call   c000763a <IDT::setup()>
c00100da:	b8 00 04 00 00       	mov    eax,0x400
c00100df:	0f 23 f8             	mov    db7,eax
c00100e2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100ec:	e8 e5 7c ff ff       	call   c0007dd6 <Phys::allocatePage()>
c00100f1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100f7:	89 30                	mov    DWORD PTR [eax],esi
c00100f9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100ff:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010102:	58                   	pop    eax
c0010103:	5a                   	pop    edx
c0010104:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001010a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001010e:	e8 cd 9e ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c0010113:	c7 04 24 fa 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bfa
c001011a:	e8 cd 00 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c001011f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010122:	e8 23 f7 ff ff       	call   c000f84a <CPU::detectFeatures()>
c0010127:	c7 04 24 1d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1d
c001012e:	e8 b9 00 00 00       	call   c00101ec <KeSetBootMessage(char const*)>
c0010133:	e8 75 6f 00 00       	call   c00170ad <HalInitialise()>
c0010138:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c001013d:	83 e0 10             	and    eax,0x10
c0010140:	83 f8 01             	cmp    eax,0x1
c0010143:	19 c0                	sbb    eax,eax
c0010145:	83 e0 46             	and    eax,0x46
c0010148:	83 c0 1e             	add    eax,0x1e
c001014b:	89 04 24             	mov    DWORD PTR [esp],eax
c001014e:	e8 de d6 ff ff       	call   c000d831 <setupTimer(int)>
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c001015d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010163:	74 0c                	je     c0010171 <CPU::open(int, int, void*)+0xe3>
c0010165:	83 ec 0c             	sub    esp,0xc
c0010168:	53                   	push   ebx
c0010169:	e8 54 fe ff ff       	call   c000ffc2 <CPU::setupFeatures()>
c001016e:	83 c4 10             	add    esp,0x10
c0010171:	5b                   	pop    ebx
c0010172:	31 c0                	xor    eax,eax
c0010174:	5e                   	pop    esi
c0010175:	5f                   	pop    edi
c0010176:	c3                   	ret    

c0010177 <KeDisplaySplashScreen()>:
c0010177:	55                   	push   ebp
c0010178:	bd 05 00 00 00       	mov    ebp,0x5
c001017d:	57                   	push   edi
c001017e:	bf c0 1f 02 c0       	mov    edi,0xc0021fc0
c0010183:	56                   	push   esi
c0010184:	be 0a 00 00 00       	mov    esi,0xa
c0010189:	53                   	push   ebx
c001018a:	31 db                	xor    ebx,ebx
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010192:	85 d2                	test   edx,edx
c0010194:	89 d0                	mov    eax,edx
c0010196:	74 4c                	je     c00101e4 <KeDisplaySplashScreen()+0x6d>
c0010198:	80 bb f6 1f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde00a],0xdb
c001019f:	75 13                	jne    c00101b4 <KeDisplaySplashScreen()+0x3d>
c00101a1:	0f b6 8b f5 1f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde00b]
c00101a8:	83 e1 fe             	and    ecx,0xfffffffe
c00101ab:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00101b1:	75 01                	jne    c00101b4 <KeDisplaySplashScreen()+0x3d>
c00101b3:	46                   	inc    esi
c00101b4:	83 fa 0d             	cmp    edx,0xd
c00101b7:	74 28                	je     c00101e1 <KeDisplaySplashScreen()+0x6a>
c00101b9:	83 fa 0a             	cmp    edx,0xa
c00101bc:	75 0a                	jne    c00101c8 <KeDisplaySplashScreen()+0x51>
c00101be:	45                   	inc    ebp
c00101bf:	be 0a 00 00 00       	mov    esi,0xa
c00101c4:	31 db                	xor    ebx,ebx
c00101c6:	eb 19                	jmp    c00101e1 <KeDisplaySplashScreen()+0x6a>
c00101c8:	83 ec 0c             	sub    esp,0xc
c00101cb:	0f be c0             	movsx  eax,al
c00101ce:	55                   	push   ebp
c00101cf:	8d 14 33             	lea    edx,[ebx+esi*1]
c00101d2:	43                   	inc    ebx
c00101d3:	52                   	push   edx
c00101d4:	6a 00                	push   0x0
c00101d6:	6a 0e                	push   0xe
c00101d8:	50                   	push   eax
c00101d9:	e8 4a 7b 00 00       	call   c0017d28 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101de:	83 c4 20             	add    esp,0x20
c00101e1:	47                   	inc    edi
c00101e2:	eb ab                	jmp    c001018f <KeDisplaySplashScreen()+0x18>
c00101e4:	83 c4 0c             	add    esp,0xc
c00101e7:	5b                   	pop    ebx
c00101e8:	5e                   	pop    esi
c00101e9:	5f                   	pop    edi
c00101ea:	5d                   	pop    ebp
c00101eb:	c3                   	ret    

c00101ec <KeSetBootMessage(char const*)>:
c00101ec:	57                   	push   edi
c00101ed:	56                   	push   esi
c00101ee:	53                   	push   ebx
c00101ef:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101f5:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101fc:	68 9e 00 00 00       	push   0x9e
c0010201:	6a 00                	push   0x0
c0010203:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010207:	56                   	push   esi
c0010208:	e8 e3 02 ff ff       	call   c00004f0 <memset>
c001020d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010210:	e8 6b 03 ff ff       	call   c0000580 <strlen>
c0010215:	ba 50 00 00 00       	mov    edx,0x50
c001021a:	83 c4 10             	add    esp,0x10
c001021d:	31 c9                	xor    ecx,ecx
c001021f:	29 c2                	sub    edx,eax
c0010221:	83 e2 fe             	and    edx,0xfffffffe
c0010224:	01 f2                	add    edx,esi
c0010226:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001022b:	84 c0                	test   al,al
c001022d:	74 0a                	je     c0010239 <KeSetBootMessage(char const*)+0x4d>
c001022f:	80 cc 0f             	or     ah,0xf
c0010232:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010236:	41                   	inc    ecx
c0010237:	eb ed                	jmp    c0010226 <KeSetBootMessage(char const*)+0x3a>
c0010239:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001023e:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010243:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010245:	81 c4 a0 00 00 00    	add    esp,0xa0
c001024b:	5b                   	pop    ebx
c001024c:	5e                   	pop    esi
c001024d:	5f                   	pop    edi
c001024e:	c3                   	ret    
c001024f:	90                   	nop

c0010250 <EnvVarContainer::getEnv(char const*)>:
c0010250:	57                   	push   edi
c0010251:	56                   	push   esi
c0010252:	53                   	push   ebx
c0010253:	31 db                	xor    ebx,ebx
c0010255:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010259:	39 1e                	cmp    DWORD PTR [esi],ebx
c001025b:	7e 2b                	jle    c0010288 <EnvVarContainer::getEnv(char const*)+0x38>
c001025d:	50                   	push   eax
c001025e:	50                   	push   eax
c001025f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010262:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010269:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001026c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010270:	e8 0b 05 ff ff       	call   c0000780 <strcmp>
c0010275:	83 c4 10             	add    esp,0x10
c0010278:	85 c0                	test   eax,eax
c001027a:	75 09                	jne    c0010285 <EnvVarContainer::getEnv(char const*)+0x35>
c001027c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001027f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010283:	eb 05                	jmp    c001028a <EnvVarContainer::getEnv(char const*)+0x3a>
c0010285:	43                   	inc    ebx
c0010286:	eb d1                	jmp    c0010259 <EnvVarContainer::getEnv(char const*)+0x9>
c0010288:	31 c0                	xor    eax,eax
c001028a:	5b                   	pop    ebx
c001028b:	5e                   	pop    esi
c001028c:	5f                   	pop    edi
c001028d:	c3                   	ret    

c001028e <EnvVarContainer::setEnv(char const*, char const*)>:
c001028e:	55                   	push   ebp
c001028f:	57                   	push   edi
c0010290:	56                   	push   esi
c0010291:	53                   	push   ebx
c0010292:	83 ec 28             	sub    esp,0x28
c0010295:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010299:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001029d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00102a1:	56                   	push   esi
c00102a2:	e8 d9 02 ff ff       	call   c0000580 <strlen>
c00102a7:	40                   	inc    eax
c00102a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00102ab:	e8 1b 78 ff ff       	call   c0007acb <malloc>
c00102b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102b7:	e8 c4 02 ff ff       	call   c0000580 <strlen>
c00102bc:	40                   	inc    eax
c00102bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00102c0:	e8 06 78 ff ff       	call   c0007acb <malloc>
c00102c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00102c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102cc:	e8 af 02 ff ff       	call   c0000580 <strlen>
c00102d1:	83 c4 0c             	add    esp,0xc
c00102d4:	40                   	inc    eax
c00102d5:	50                   	push   eax
c00102d6:	6a 00                	push   0x0
c00102d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102dc:	e8 0f 02 ff ff       	call   c00004f0 <memset>
c00102e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00102e4:	e8 97 02 ff ff       	call   c0000580 <strlen>
c00102e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00102f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f5:	89 de                	mov    esi,ebx
c00102f7:	e8 84 02 ff ff       	call   c0000580 <strlen>
c00102fc:	83 c4 0c             	add    esp,0xc
c00102ff:	40                   	inc    eax
c0010300:	50                   	push   eax
c0010301:	6a 00                	push   0x0
c0010303:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010307:	e8 e4 01 ff ff       	call   c00004f0 <memset>
c001030c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001030f:	e8 6c 02 ff ff       	call   c0000580 <strlen>
c0010314:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010318:	8d 48 01             	lea    ecx,[eax+0x1]
c001031b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001031d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010320:	40                   	inc    eax
c0010321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010324:	c1 e0 03             	shl    eax,0x3
c0010327:	5a                   	pop    edx
c0010328:	59                   	pop    ecx
c0010329:	50                   	push   eax
c001032a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001032d:	e8 85 77 ff ff       	call   c0007ab7 <realloc>
c0010332:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010335:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010339:	b9 08 00 00 00       	mov    ecx,0x8
c001033e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010341:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010345:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010347:	83 c4 2c             	add    esp,0x2c
c001034a:	5b                   	pop    ebx
c001034b:	5e                   	pop    esi
c001034c:	5f                   	pop    edi
c001034d:	5d                   	pop    ebp
c001034e:	c3                   	ret    
c001034f:	90                   	nop

c0010350 <EnvVarContainer::deleteEnv(char const*)>:
c0010350:	c3                   	ret    
c0010351:	90                   	nop

c0010352 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010352:	55                   	push   ebp
c0010353:	57                   	push   edi
c0010354:	56                   	push   esi
c0010355:	53                   	push   ebx
c0010356:	81 ec 38 01 00 00    	sub    esp,0x138
c001035c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010363:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001036a:	68 14 01 00 00       	push   0x114
c001036f:	e8 57 77 ff ff       	call   c0007acb <malloc>
c0010374:	83 c4 0c             	add    esp,0xc
c0010377:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001037a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010381:	89 c3                	mov    ebx,eax
c0010383:	50                   	push   eax
c0010384:	e8 bd ab ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0010389:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001038c:	e8 df ae ff ff       	call   c000b270 <File::exists()>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	84 c0                	test   al,al
c0010396:	75 31                	jne    c00103c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010398:	50                   	push   eax
c0010399:	50                   	push   eax
c001039a:	6a 12                	push   0x12
c001039c:	53                   	push   ebx
c001039d:	e8 60 ac ff ff       	call   c000b002 <File::open(FileOpenMode)>
c00103a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103a4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00103a7:	89 34 24             	mov    DWORD PTR [esp],esi
c00103aa:	e8 d1 01 ff ff       	call   c0000580 <strlen>
c00103af:	5a                   	pop    edx
c00103b0:	31 d2                	xor    edx,edx
c00103b2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103b6:	51                   	push   ecx
c00103b7:	56                   	push   esi
c00103b8:	52                   	push   edx
c00103b9:	50                   	push   eax
c00103ba:	53                   	push   ebx
c00103bb:	ff d7                	call   edi
c00103bd:	83 c4 14             	add    esp,0x14
c00103c0:	53                   	push   ebx
c00103c1:	e8 9a ac ff ff       	call   c000b060 <File::close()>
c00103c6:	83 c4 10             	add    esp,0x10
c00103c9:	56                   	push   esi
c00103ca:	31 f6                	xor    esi,esi
c00103cc:	68 00 01 00 00       	push   0x100
c00103d1:	6a 00                	push   0x0
c00103d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103d7:	50                   	push   eax
c00103d8:	e8 13 01 ff ff       	call   c00004f0 <memset>
c00103dd:	5f                   	pop    edi
c00103de:	58                   	pop    eax
c00103df:	6a 01                	push   0x1
c00103e1:	53                   	push   ebx
c00103e2:	e8 1b ac ff ff       	call   c000b002 <File::open(FileOpenMode)>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103f2:	83 ec 0c             	sub    esp,0xc
c00103f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103f7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103fb:	51                   	push   ecx
c00103fc:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010400:	52                   	push   edx
c0010401:	6a 00                	push   0x0
c0010403:	6a 01                	push   0x1
c0010405:	53                   	push   ebx
c0010406:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010409:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c001040e:	83 c4 20             	add    esp,0x20
c0010411:	83 fa 0d             	cmp    edx,0xd
c0010414:	89 d0                	mov    eax,edx
c0010416:	0f 84 0a 01 00 00    	je     c0010526 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001041c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010421:	0f 84 f0 00 00 00    	je     c0010517 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010427:	83 fa 0a             	cmp    edx,0xa
c001042a:	74 13                	je     c001043f <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c001042c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010431:	74 0c                	je     c001043f <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010433:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010439:	0f 8e d8 00 00 00    	jle    c0010517 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001043f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010443:	83 ec 0c             	sub    esp,0xc
c0010446:	8d 78 01             	lea    edi,[eax+0x1]
c0010449:	57                   	push   edi
c001044a:	e8 7c 76 ff ff       	call   c0007acb <malloc>
c001044f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010453:	8d 56 04             	lea    edx,[esi+0x4]
c0010456:	89 14 24             	mov    DWORD PTR [esp],edx
c0010459:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001045d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010461:	e8 65 76 ff ff       	call   c0007acb <malloc>
c0010466:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001046a:	83 c4 0c             	add    esp,0xc
c001046d:	57                   	push   edi
c001046e:	6a 00                	push   0x0
c0010470:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010474:	e8 77 00 ff ff       	call   c00004f0 <memset>
c0010479:	8d 74 24 30          	lea    esi,[esp+0x30]
c001047d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010481:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010485:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010487:	83 c4 0c             	add    esp,0xc
c001048a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001048e:	52                   	push   edx
c001048f:	6a 00                	push   0x0
c0010491:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010495:	e8 56 00 ff ff       	call   c00004f0 <memset>
c001049a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001049e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00104a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00104a5:	e8 d6 00 ff ff       	call   c0000580 <strlen>
c00104aa:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00104ae:	89 c1                	mov    ecx,eax
c00104b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00104bb:	40                   	inc    eax
c00104bc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00104bf:	85 d2                	test   edx,edx
c00104c1:	75 0c                	jne    c00104cf <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c00104c3:	83 ec 0c             	sub    esp,0xc
c00104c6:	6a 08                	push   0x8
c00104c8:	e8 fe 75 ff ff       	call   c0007acb <malloc>
c00104cd:	eb 0c                	jmp    c00104db <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c00104cf:	51                   	push   ecx
c00104d0:	51                   	push   ecx
c00104d1:	c1 e0 03             	shl    eax,0x3
c00104d4:	50                   	push   eax
c00104d5:	52                   	push   edx
c00104d6:	e8 dc 75 ff ff       	call   c0007ab7 <realloc>
c00104db:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104de:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104e1:	83 c4 10             	add    esp,0x10
c00104e4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104e7:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104eb:	b9 08 00 00 00       	mov    ecx,0x8
c00104f0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104f6:	50                   	push   eax
c00104f7:	31 f6                	xor    esi,esi
c00104f9:	68 00 01 00 00       	push   0x100
c00104fe:	6a 00                	push   0x0
c0010500:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010504:	50                   	push   eax
c0010505:	e8 e6 ff fe ff       	call   c00004f0 <memset>
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010515:	eb 0f                	jmp    c0010526 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010517:	3c 3d                	cmp    al,0x3d
c0010519:	74 07                	je     c0010522 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001051b:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001051f:	46                   	inc    esi
c0010520:	eb 04                	jmp    c0010526 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010522:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010526:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001052b:	0f 85 c1 fe ff ff    	jne    c00103f2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010531:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010537:	5b                   	pop    ebx
c0010538:	5e                   	pop    esi
c0010539:	5f                   	pop    edi
c001053a:	5d                   	pop    ebp
c001053b:	c3                   	ret    

c001053c <EnvVarContainer::__loadSystem()>:
c001053c:	83 ec 10             	sub    esp,0x10
c001053f:	68 20 21 02 c0       	push   0xc0022120
c0010544:	68 60 0c 02 c0       	push   0xc0020c60
c0010549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054d:	e8 00 fe ff ff       	call   c0010352 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010552:	83 c4 1c             	add    esp,0x1c
c0010555:	c3                   	ret    

c0010556 <EnvVarContainer::__loadUser()>:
c0010556:	c3                   	ret    
c0010557:	90                   	nop

c0010558 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001056a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001056d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010578:	90                   	nop
c0010579:	c3                   	ret    

c001057a <EnvVarContainer::~EnvVarContainer()>:
c001057a:	83 ec 0c             	sub    esp,0xc
c001057d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010581:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010584:	85 c0                	test   eax,eax
c0010586:	74 1d                	je     c00105a5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058c:	8b 00                	mov    eax,DWORD PTR [eax]
c001058e:	85 c0                	test   eax,eax
c0010590:	74 13                	je     c00105a5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010599:	83 ec 0c             	sub    esp,0xc
c001059c:	50                   	push   eax
c001059d:	e8 39 75 ff ff       	call   c0007adb <free>
c00105a2:	83 c4 10             	add    esp,0x10
c00105a5:	90                   	nop
c00105a6:	83 c4 0c             	add    esp,0xc
c00105a9:	c3                   	ret    

c00105aa <Krnl::getEnv(Process*, char const*)>:
c00105aa:	53                   	push   ebx
c00105ab:	83 ec 08             	sub    esp,0x8
c00105ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b2:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c00105b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105bc:	74 04                	je     c00105c2 <Krnl::getEnv(Process*, char const*)+0x18>
c00105be:	85 c0                	test   eax,eax
c00105c0:	75 0b                	jne    c00105cd <Krnl::getEnv(Process*, char const*)+0x23>
c00105c2:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105c7:	85 c0                	test   eax,eax
c00105c9:	75 19                	jne    c00105e4 <Krnl::getEnv(Process*, char const*)+0x3a>
c00105cb:	eb 27                	jmp    c00105f4 <Krnl::getEnv(Process*, char const*)+0x4a>
c00105cd:	52                   	push   edx
c00105ce:	52                   	push   edx
c00105cf:	53                   	push   ebx
c00105d0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105d6:	e8 75 fc ff ff       	call   c0010250 <EnvVarContainer::getEnv(char const*)>
c00105db:	83 c4 10             	add    esp,0x10
c00105de:	85 c0                	test   eax,eax
c00105e0:	75 28                	jne    c001060a <Krnl::getEnv(Process*, char const*)+0x60>
c00105e2:	eb de                	jmp    c00105c2 <Krnl::getEnv(Process*, char const*)+0x18>
c00105e4:	52                   	push   edx
c00105e5:	52                   	push   edx
c00105e6:	53                   	push   ebx
c00105e7:	50                   	push   eax
c00105e8:	e8 63 fc ff ff       	call   c0010250 <EnvVarContainer::getEnv(char const*)>
c00105ed:	83 c4 10             	add    esp,0x10
c00105f0:	85 c0                	test   eax,eax
c00105f2:	75 16                	jne    c001060a <Krnl::getEnv(Process*, char const*)+0x60>
c00105f4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105f8:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010601:	83 c4 08             	add    esp,0x8
c0010604:	5b                   	pop    ebx
c0010605:	e9 46 fc ff ff       	jmp    c0010250 <EnvVarContainer::getEnv(char const*)>
c001060a:	83 c4 08             	add    esp,0x8
c001060d:	5b                   	pop    ebx
c001060e:	c3                   	ret    

c001060f <Krnl::setEnvSystem(char const*, char const*)>:
c001060f:	83 ec 10             	sub    esp,0x10
c0010612:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010616:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001061a:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c0010620:	e8 69 fc ff ff       	call   c001028e <EnvVarContainer::setEnv(char const*, char const*)>
c0010625:	83 c4 1c             	add    esp,0x1c
c0010628:	c3                   	ret    

c0010629 <Krnl::setEnvUser(char const*, char const*)>:
c0010629:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001062e:	85 c0                	test   eax,eax
c0010630:	74 15                	je     c0010647 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010632:	83 ec 10             	sub    esp,0x10
c0010635:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010639:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001063d:	50                   	push   eax
c001063e:	e8 4b fc ff ff       	call   c001028e <EnvVarContainer::setEnv(char const*, char const*)>
c0010643:	83 c4 1c             	add    esp,0x1c
c0010646:	c3                   	ret    
c0010647:	c3                   	ret    

c0010648 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010652:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010656:	e9 33 fc ff ff       	jmp    c001028e <EnvVarContainer::setEnv(char const*, char const*)>

c001065b <Krnl::deleteEnvSystem(char const*)>:
c001065b:	c3                   	ret    

c001065c <Krnl::deleteEnvUser(char const*)>:
c001065c:	c3                   	ret    

c001065d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001065d:	c3                   	ret    

c001065e <Krnl::newProcessEnv(Process*)>:
c001065e:	83 ec 28             	sub    esp,0x28
c0010661:	6a 0c                	push   0xc
c0010663:	e8 63 74 ff ff       	call   c0007acb <malloc>
c0010668:	5a                   	pop    edx
c0010669:	59                   	pop    ecx
c001066a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001066e:	50                   	push   eax
c001066f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010673:	e8 e0 fe ff ff       	call   c0010558 <EnvVarContainer::EnvVarContainer(Process*)>
c0010678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001067c:	83 c4 2c             	add    esp,0x2c
c001067f:	c3                   	ret    

c0010680 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010680:	57                   	push   edi
c0010681:	56                   	push   esi
c0010682:	53                   	push   ebx
c0010683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010687:	83 ec 0c             	sub    esp,0xc
c001068a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010690:	6a 0c                	push   0xc
c0010692:	e8 34 74 ff ff       	call   c0007acb <malloc>
c0010697:	89 c3                	mov    ebx,eax
c0010699:	58                   	pop    eax
c001069a:	5a                   	pop    edx
c001069b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069f:	53                   	push   ebx
c00106a0:	e8 b3 fe ff ff       	call   c0010558 <EnvVarContainer::EnvVarContainer(Process*)>
c00106a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00106a7:	89 03                	mov    DWORD PTR [ebx],eax
c00106a9:	c1 e0 03             	shl    eax,0x3
c00106ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00106af:	e8 17 74 ff ff       	call   c0007acb <malloc>
c00106b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00106b7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00106b9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00106bc:	89 c7                	mov    edi,eax
c00106be:	c1 e1 03             	shl    ecx,0x3
c00106c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	89 d8                	mov    eax,ebx
c00106c8:	5b                   	pop    ebx
c00106c9:	5e                   	pop    esi
c00106ca:	5f                   	pop    edi
c00106cb:	c3                   	ret    

c00106cc <Krnl::loadSystemEnv()>:
c00106cc:	53                   	push   ebx
c00106cd:	83 ec 14             	sub    esp,0x14
c00106d0:	6a 0c                	push   0xc
c00106d2:	e8 f4 73 ff ff       	call   c0007acb <malloc>
c00106d7:	89 c3                	mov    ebx,eax
c00106d9:	58                   	pop    eax
c00106da:	5a                   	pop    edx
c00106db:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106e1:	53                   	push   ebx
c00106e2:	e8 71 fe ff ff       	call   c0010558 <EnvVarContainer::EnvVarContainer(Process*)>
c00106e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106ea:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106f0:	e8 47 fe ff ff       	call   c001053c <EnvVarContainer::__loadSystem()>
c00106f5:	83 c4 18             	add    esp,0x18
c00106f8:	5b                   	pop    ebx
c00106f9:	c3                   	ret    

c00106fa <Krnl::loadUserEnv()>:
c00106fa:	53                   	push   ebx
c00106fb:	83 ec 14             	sub    esp,0x14
c00106fe:	6a 0c                	push   0xc
c0010700:	e8 c6 73 ff ff       	call   c0007acb <malloc>
c0010705:	89 c3                	mov    ebx,eax
c0010707:	58                   	pop    eax
c0010708:	5a                   	pop    edx
c0010709:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001070f:	53                   	push   ebx
c0010710:	e8 43 fe ff ff       	call   c0010558 <EnvVarContainer::EnvVarContainer(Process*)>
c0010715:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c001071b:	83 c4 18             	add    esp,0x18
c001071e:	5b                   	pop    ebx
c001071f:	c3                   	ret    

c0010720 <Krnl::flushEnv()>:
c0010720:	c3                   	ret    

c0010721 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010725:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c001072b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010731:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010736:	8b 00                	mov    eax,DWORD PTR [eax]
c0010738:	03 01                	add    eax,DWORD PTR [ecx]
c001073a:	85 d2                	test   edx,edx
c001073c:	74 02                	je     c0010740 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001073e:	03 02                	add    eax,DWORD PTR [edx]
c0010740:	c3                   	ret    

c0010741 <Krnl::getProcessEnvPair(Process*, int)>:
c0010741:	57                   	push   edi
c0010742:	56                   	push   esi
c0010743:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010749:	53                   	push   ebx
c001074a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001074e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010752:	85 f6                	test   esi,esi
c0010754:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010758:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001075e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010760:	75 16                	jne    c0010778 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010762:	39 c2                	cmp    edx,eax
c0010764:	7c 16                	jl     c001077c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010766:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c001076c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001076e:	01 c6                	add    esi,eax
c0010770:	39 d6                	cmp    esi,edx
c0010772:	7e 3c                	jle    c00107b0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010774:	29 c2                	sub    edx,eax
c0010776:	eb 04                	jmp    c001077c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010778:	39 c2                	cmp    edx,eax
c001077a:	7d 05                	jge    c0010781 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001077c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001077f:	eb 20                	jmp    c00107a1 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010781:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010783:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010786:	39 d1                	cmp    ecx,edx
c0010788:	7e 04                	jle    c001078e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001078a:	29 c2                	sub    edx,eax
c001078c:	eb 10                	jmp    c001079e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001078e:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010794:	03 0e                	add    ecx,DWORD PTR [esi]
c0010796:	39 d1                	cmp    ecx,edx
c0010798:	7e 16                	jle    c00107b0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001079a:	29 c2                	sub    edx,eax
c001079c:	29 fa                	sub    edx,edi
c001079e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00107a1:	8d 14 d0             	lea    edx,[eax+edx*8]
c00107a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00107a6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00107a9:	89 03                	mov    DWORD PTR [ebx],eax
c00107ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00107ae:	eb 1d                	jmp    c00107cd <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00107b0:	83 ec 0c             	sub    esp,0xc
c00107b3:	68 82 0c 02 c0       	push   0xc0020c82
c00107b8:	e8 ac 00 00 00       	call   c0010869 <KePanic(char const*)>
c00107bd:	83 c4 10             	add    esp,0x10
c00107c0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00107c6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00107cd:	89 d8                	mov    eax,ebx
c00107cf:	5b                   	pop    ebx
c00107d0:	5e                   	pop    esi
c00107d1:	5f                   	pop    edi
c00107d2:	c2 04 00             	ret    0x4

c00107d5 <CPU::current()>:
c00107d5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107e0:	c3                   	ret    

c00107e1 <operator new(unsigned long)>:
c00107e1:	e9 e5 72 ff ff       	jmp    c0007acb <malloc>

c00107e6 <operator delete(void*)>:
c00107e6:	e9 00 73 ff ff       	jmp    c0007aeb <rfree>

c00107eb <disableIRQs()>:
c00107eb:	fa                   	cli    
c00107ec:	c3                   	ret    

c00107ed <enableIRQs()>:
c00107ed:	fb                   	sti    
c00107ee:	c3                   	ret    

c00107ef <lockScheduler()>:
c00107ef:	fa                   	cli    
c00107f0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107f6:	c3                   	ret    

c00107f7 <unlockScheduler()>:
c00107f7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107fc:	48                   	dec    eax
c00107fd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010802:	75 01                	jne    c0010805 <unlockScheduler()+0xe>
c0010804:	fb                   	sti    
c0010805:	c3                   	ret    

c0010806 <lockStuff()>:
c0010806:	fa                   	cli    
c0010807:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001080d:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0010813:	c3                   	ret    

c0010814 <unlockStuff()>:
c0010814:	83 ec 0c             	sub    esp,0xc
c0010817:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001081c:	48                   	dec    eax
c001081d:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0010822:	75 18                	jne    c001083c <unlockStuff()+0x28>
c0010824:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c001082b:	74 0f                	je     c001083c <unlockStuff()+0x28>
c001082d:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010837:	e8 28 48 00 00       	call   c0015064 <schedule()>
c001083c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010841:	48                   	dec    eax
c0010842:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010847:	75 01                	jne    c001084a <unlockStuff()+0x36>
c0010849:	fb                   	sti    
c001084a:	83 c4 0c             	add    esp,0xc
c001084d:	c3                   	ret    

c001084e <Virt::getAKernelVAS()>:
c001084e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010853:	c3                   	ret    

c0010854 <__not_memcpy>:
c0010854:	57                   	push   edi
c0010855:	56                   	push   esi
c0010856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001085a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001085e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010862:	89 c7                	mov    edi,eax
c0010864:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010866:	5e                   	pop    esi
c0010867:	5f                   	pop    edi
c0010868:	c3                   	ret    

c0010869 <KePanic(char const*)>:
c0010869:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010870:	e9 11 67 00 00       	jmp    c0016f86 <HalPanic(char const*)>

c0010875 <Krnl::powerThread(void*)>:
c0010875:	83 ec 0c             	sub    esp,0xc
c0010878:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001087d:	48                   	dec    eax
c001087e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010883:	75 01                	jne    c0010886 <Krnl::powerThread(void*)+0x11>
c0010885:	fb                   	sti    
c0010886:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001088d:	83 ec 0c             	sub    esp,0xc
c0010890:	6a 0a                	push   0xa
c0010892:	e8 fd 4a 00 00       	call   c0015394 <sleep(unsigned int)>
c0010897:	83 c4 10             	add    esp,0x10
c001089a:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c00108a1:	eb e3                	jmp    c0010886 <Krnl::powerThread(void*)+0x11>

c00108a3 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00108a3:	57                   	push   edi
c00108a4:	b9 09 00 00 00       	mov    ecx,0x9
c00108a9:	56                   	push   esi
c00108aa:	bf 60 79 02 c0       	mov    edi,0xc0027960
c00108af:	fc                   	cld    
c00108b0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00108b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108b6:	5e                   	pop    esi
c00108b7:	5f                   	pop    edi
c00108b8:	c3                   	ret    

c00108b9 <Krnl::userIOReceived()>:
c00108b9:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108c3:	c3                   	ret    

c00108c4 <Krnl::handlePowerButton()>:
c00108c4:	83 ec 0c             	sub    esp,0xc
c00108c7:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00108cc:	83 f8 02             	cmp    eax,0x2
c00108cf:	75 10                	jne    c00108e1 <Krnl::handlePowerButton()+0x1d>
c00108d1:	83 ec 0c             	sub    esp,0xc
c00108d4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108da:	e8 63 68 ff ff       	call   c0007142 <Computer::shutdown()>
c00108df:	eb 11                	jmp    c00108f2 <Krnl::handlePowerButton()+0x2e>
c00108e1:	48                   	dec    eax
c00108e2:	75 11                	jne    c00108f5 <Krnl::handlePowerButton()+0x31>
c00108e4:	83 ec 0c             	sub    esp,0xc
c00108e7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108ed:	e8 80 68 ff ff       	call   c0007172 <Computer::sleep()>
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	83 c4 0c             	add    esp,0xc
c00108f8:	c3                   	ret    

c00108f9 <Krnl::handleSleepButton()>:
c00108f9:	83 ec 0c             	sub    esp,0xc
c00108fc:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0010901:	83 f8 02             	cmp    eax,0x2
c0010904:	75 10                	jne    c0010916 <Krnl::handleSleepButton()+0x1d>
c0010906:	83 ec 0c             	sub    esp,0xc
c0010909:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001090f:	e8 2e 68 ff ff       	call   c0007142 <Computer::shutdown()>
c0010914:	eb 11                	jmp    c0010927 <Krnl::handleSleepButton()+0x2e>
c0010916:	48                   	dec    eax
c0010917:	75 11                	jne    c001092a <Krnl::handleSleepButton()+0x31>
c0010919:	83 ec 0c             	sub    esp,0xc
c001091c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010922:	e8 4b 68 ff ff       	call   c0007172 <Computer::sleep()>
c0010927:	83 c4 10             	add    esp,0x10
c001092a:	83 c4 0c             	add    esp,0xc
c001092d:	c3                   	ret    

c001092e <Krnl::setupPowerManager()>:
c001092e:	83 ec 0c             	sub    esp,0xc
c0010931:	68 f0 00 00 00       	push   0xf0
c0010936:	6a 00                	push   0x0
c0010938:	68 75 08 01 c0       	push   0xc0010875
c001093d:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010943:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001094d:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010954:	e8 bf 44 00 00       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c0010959:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010963:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c001096d:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010977:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010981:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c001098b:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010995:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001099f:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c00109a9:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c00109b3:	83 c4 1c             	add    esp,0x1c
c00109b6:	c3                   	ret    

c00109b7 <KeRand()>:
c00109b7:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c00109c1:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c00109cb:	53                   	push   ebx
c00109cc:	01 c1                	add    ecx,eax
c00109ce:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109d3:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109d9:	01 ca                	add    edx,ecx
c00109db:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109e0:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109e5:	83 d2 00             	adc    edx,0x0
c00109e8:	0f b7 da             	movzx  ebx,dx
c00109eb:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109f1:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00109f5:	5b                   	pop    ebx
c00109f6:	c3                   	ret    

c00109f7 <KeSeedRand(unsigned int)>:
c00109f7:	53                   	push   ebx
c00109f8:	83 ec 08             	sub    esp,0x8
c00109fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109ff:	e8 99 68 00 00       	call   c001729d <HalGetRand()>
c0010a04:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010a0e:	31 d8                	xor    eax,ebx
c0010a10:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a15:	e8 9d ff ff ff       	call   c00109b7 <KeRand()>
c0010a1a:	83 c4 08             	add    esp,0x8
c0010a1d:	5b                   	pop    ebx
c0010a1e:	eb 97                	jmp    c00109b7 <KeRand()>

c0010a20 <KeInitRand()>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	e8 6a 66 00 00       	call   c0017092 <HalQueryPerformanceCounter()>
c0010a28:	0f 20 da             	mov    edx,cr3
c0010a2b:	0f 22 da             	mov    cr3,edx
c0010a2e:	0f 20 da             	mov    edx,cr3
c0010a31:	0f 22 da             	mov    cr3,edx
c0010a34:	0f 20 da             	mov    edx,cr3
c0010a37:	0f 22 da             	mov    cr3,edx
c0010a3a:	0f 20 da             	mov    edx,cr3
c0010a3d:	0f 22 da             	mov    cr3,edx
c0010a40:	83 ec 0c             	sub    esp,0xc
c0010a43:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a48:	50                   	push   eax
c0010a49:	e8 a9 ff ff ff       	call   c00109f7 <KeSeedRand(unsigned int)>
c0010a4e:	83 c4 1c             	add    esp,0x1c
c0010a51:	c3                   	ret    
c0010a52:	66 90                	xchg   ax,ax

c0010a54 <KeResolveCompatibilitySymbol(char*)>:
c0010a54:	83 ec 0c             	sub    esp,0xc
c0010a57:	83 ec 08             	sub    esp,0x8
c0010a5a:	68 9c 0c 02 c0       	push   0xc0020c9c
c0010a5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a63:	e8 18 fd fe ff       	call   c0000780 <strcmp>
c0010a68:	83 c4 10             	add    esp,0x10
c0010a6b:	85 c0                	test   eax,eax
c0010a6d:	0f 94 c0             	sete   al
c0010a70:	0f b6 c0             	movzx  eax,al
c0010a73:	85 c0                	test   eax,eax
c0010a75:	74 0d                	je     c0010a84 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a77:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a7c:	e9 8b 01 00 00       	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a81:	8d 76 00             	lea    esi,[esi+0x0]
c0010a84:	83 ec 08             	sub    esp,0x8
c0010a87:	68 a5 0c 02 c0       	push   0xc0020ca5
c0010a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a90:	e8 eb fc fe ff       	call   c0000780 <strcmp>
c0010a95:	83 c4 10             	add    esp,0x10
c0010a98:	85 c0                	test   eax,eax
c0010a9a:	0f 94 c0             	sete   al
c0010a9d:	0f b6 c0             	movzx  eax,al
c0010aa0:	85 c0                	test   eax,eax
c0010aa2:	74 0c                	je     c0010ab0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010aa4:	b8 30 e6 01 c0       	mov    eax,0xc001e630
c0010aa9:	e9 5e 01 00 00       	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aae:	66 90                	xchg   ax,ax
c0010ab0:	83 ec 08             	sub    esp,0x8
c0010ab3:	68 af 0c 02 c0       	push   0xc0020caf
c0010ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010abc:	e8 bf fc fe ff       	call   c0000780 <strcmp>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	85 c0                	test   eax,eax
c0010ac6:	0f 94 c0             	sete   al
c0010ac9:	0f b6 c0             	movzx  eax,al
c0010acc:	85 c0                	test   eax,eax
c0010ace:	74 0c                	je     c0010adc <KeResolveCompatibilitySymbol(char*)+0x88>
c0010ad0:	b8 64 e3 01 c0       	mov    eax,0xc001e364
c0010ad5:	e9 32 01 00 00       	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ada:	66 90                	xchg   ax,ax
c0010adc:	83 ec 08             	sub    esp,0x8
c0010adf:	68 b8 0c 02 c0       	push   0xc0020cb8
c0010ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae8:	e8 93 fc fe ff       	call   c0000780 <strcmp>
c0010aed:	83 c4 10             	add    esp,0x10
c0010af0:	85 c0                	test   eax,eax
c0010af2:	0f 94 c0             	sete   al
c0010af5:	0f b6 c0             	movzx  eax,al
c0010af8:	85 c0                	test   eax,eax
c0010afa:	74 0c                	je     c0010b08 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010afc:	b8 69 08 01 c0       	mov    eax,0xc0010869
c0010b01:	e9 06 01 00 00       	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b06:	66 90                	xchg   ax,ax
c0010b08:	83 ec 08             	sub    esp,0x8
c0010b0b:	68 cb 0c 02 c0       	push   0xc0020ccb
c0010b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b14:	e8 67 fc fe ff       	call   c0000780 <strcmp>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	0f 94 c0             	sete   al
c0010b21:	0f b6 c0             	movzx  eax,al
c0010b24:	85 c0                	test   eax,eax
c0010b26:	74 0c                	je     c0010b34 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b28:	b8 ec 01 01 c0       	mov    eax,0xc00101ec
c0010b2d:	e9 da 00 00 00       	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b32:	66 90                	xchg   ax,ax
c0010b34:	83 ec 08             	sub    esp,0x8
c0010b37:	68 e8 0c 02 c0       	push   0xc0020ce8
c0010b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b40:	e8 3b fc fe ff       	call   c0000780 <strcmp>
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	0f 94 c0             	sete   al
c0010b4d:	0f b6 c0             	movzx  eax,al
c0010b50:	85 c0                	test   eax,eax
c0010b52:	74 0c                	je     c0010b60 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b54:	b8 30 e7 01 c0       	mov    eax,0xc001e730
c0010b59:	e9 ae 00 00 00       	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b5e:	66 90                	xchg   ax,ax
c0010b60:	83 ec 08             	sub    esp,0x8
c0010b63:	68 f2 0c 02 c0       	push   0xc0020cf2
c0010b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6c:	e8 0f fc fe ff       	call   c0000780 <strcmp>
c0010b71:	83 c4 10             	add    esp,0x10
c0010b74:	85 c0                	test   eax,eax
c0010b76:	0f 94 c0             	sete   al
c0010b79:	0f b6 c0             	movzx  eax,al
c0010b7c:	85 c0                	test   eax,eax
c0010b7e:	74 0c                	je     c0010b8c <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b80:	b8 b0 e4 01 c0       	mov    eax,0xc001e4b0
c0010b85:	e9 82 00 00 00       	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b8a:	66 90                	xchg   ax,ax
c0010b8c:	83 ec 08             	sub    esp,0x8
c0010b8f:	68 fb 0c 02 c0       	push   0xc0020cfb
c0010b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b98:	e8 e3 fb fe ff       	call   c0000780 <strcmp>
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	0f 94 c0             	sete   al
c0010ba5:	0f b6 c0             	movzx  eax,al
c0010ba8:	85 c0                	test   eax,eax
c0010baa:	74 08                	je     c0010bb4 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010bac:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010bb1:	eb 59                	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bb3:	90                   	nop
c0010bb4:	83 ec 08             	sub    esp,0x8
c0010bb7:	68 13 0d 02 c0       	push   0xc0020d13
c0010bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc0:	e8 bb fb fe ff       	call   c0000780 <strcmp>
c0010bc5:	83 c4 10             	add    esp,0x10
c0010bc8:	85 c0                	test   eax,eax
c0010bca:	0f 94 c0             	sete   al
c0010bcd:	0f b6 c0             	movzx  eax,al
c0010bd0:	85 c0                	test   eax,eax
c0010bd2:	74 08                	je     c0010bdc <KeResolveCompatibilitySymbol(char*)+0x188>
c0010bd4:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010bd9:	eb 31                	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bdb:	90                   	nop
c0010bdc:	83 ec 08             	sub    esp,0x8
c0010bdf:	68 20 0d 02 c0       	push   0xc0020d20
c0010be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be8:	e8 93 fb fe ff       	call   c0000780 <strcmp>
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	0f 94 c0             	sete   al
c0010bf5:	0f b6 c0             	movzx  eax,al
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 08                	je     c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010bfc:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010c01:	eb 09                	jmp    c0010c0c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c03:	90                   	nop
c0010c04:	b8 00 00 00 00       	mov    eax,0x0
c0010c09:	8d 76 00             	lea    esi,[esi+0x0]
c0010c0c:	83 c4 0c             	add    esp,0xc
c0010c0f:	c3                   	ret    

c0010c10 <KiSigKill(int)>:
c0010c10:	83 ec 0c             	sub    esp,0xc
c0010c13:	6a 00                	push   0x0
c0010c15:	6a 00                	push   0x0
c0010c17:	6a ff                	push   0xffffffff
c0010c19:	6a 01                	push   0x1
c0010c1b:	e8 32 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c20:	83 c4 1c             	add    esp,0x1c
c0010c23:	c3                   	ret    

c0010c24 <KiDefaultSignalHandlerIgnore(int)>:
c0010c24:	c3                   	ret    

c0010c25 <KiDefaultSignalHandlerPause(int)>:
c0010c25:	57                   	push   edi
c0010c26:	b9 07 00 00 00       	mov    ecx,0x7
c0010c2b:	56                   	push   esi
c0010c2c:	be 69 0d 02 c0       	mov    esi,0xc0020d69
c0010c31:	83 ec 24             	sub    esp,0x24
c0010c34:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c38:	fc                   	cld    
c0010c39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c3b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c3f:	50                   	push   eax
c0010c40:	6a 00                	push   0x0
c0010c42:	6a 00                	push   0x0
c0010c44:	6a 27                	push   0x27
c0010c46:	e8 07 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c4b:	83 c4 34             	add    esp,0x34
c0010c4e:	5e                   	pop    esi
c0010c4f:	5f                   	pop    edi
c0010c50:	c3                   	ret    

c0010c51 <KiDefaultSignalHandlerResume(int)>:
c0010c51:	57                   	push   edi
c0010c52:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c57:	56                   	push   esi
c0010c58:	be 85 0d 02 c0       	mov    esi,0xc0020d85
c0010c5d:	83 ec 24             	sub    esp,0x24
c0010c60:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c64:	fc                   	cld    
c0010c65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c67:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c6b:	50                   	push   eax
c0010c6c:	6a 00                	push   0x0
c0010c6e:	6a 00                	push   0x0
c0010c70:	6a 27                	push   0x27
c0010c72:	e8 db 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c77:	83 c4 34             	add    esp,0x34
c0010c7a:	5e                   	pop    esi
c0010c7b:	5f                   	pop    edi
c0010c7c:	c3                   	ret    

c0010c7d <KeDeinitSignals(SigHandlerBlock*)>:
c0010c7d:	e9 59 6e ff ff       	jmp    c0007adb <free>

c0010c82 <KeInitSignals()>:
c0010c82:	53                   	push   ebx
c0010c83:	83 ec 14             	sub    esp,0x14
c0010c86:	68 c8 00 00 00       	push   0xc8
c0010c8b:	e8 3b 6e ff ff       	call   c0007acb <malloc>
c0010c90:	83 c4 0c             	add    esp,0xc
c0010c93:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c9d:	89 c3                	mov    ebx,eax
c0010c9f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010ca9:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010caf:	6a 20                	push   0x20
c0010cb1:	6a 00                	push   0x0
c0010cb3:	50                   	push   eax
c0010cb4:	e8 37 f8 fe ff       	call   c00004f0 <memset>
c0010cb9:	83 c4 0c             	add    esp,0xc
c0010cbc:	6a 44                	push   0x44
c0010cbe:	6a 00                	push   0x0
c0010cc0:	53                   	push   ebx
c0010cc1:	e8 2a f8 fe ff       	call   c00004f0 <memset>
c0010cc6:	83 c4 18             	add    esp,0x18
c0010cc9:	89 d8                	mov    eax,ebx
c0010ccb:	5b                   	pop    ebx
c0010ccc:	c3                   	ret    

c0010ccd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010ccd:	53                   	push   ebx
c0010cce:	b8 01 00 00 00       	mov    eax,0x1
c0010cd3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010cd7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cdb:	83 f9 10             	cmp    ecx,0x10
c0010cde:	7f 21                	jg     c0010d01 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010ce7:	89 03                	mov    DWORD PTR [ebx],eax
c0010ce9:	b8 01 00 00 00       	mov    eax,0x1
c0010cee:	d3 e0                	shl    eax,cl
c0010cf0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cf4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cf7:	31 c0                	xor    eax,eax
c0010cf9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010d01:	5b                   	pop    ebx
c0010d02:	c3                   	ret    

c0010d03 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010d03:	55                   	push   ebp
c0010d04:	57                   	push   edi
c0010d05:	bf 08 00 00 00       	mov    edi,0x8
c0010d0a:	56                   	push   esi
c0010d0b:	53                   	push   ebx
c0010d0c:	83 ec 18             	sub    esp,0x18
c0010d0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d13:	68 a2 0d 02 c0       	push   0xc0020da2
c0010d18:	e8 81 9c ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	31 c9                	xor    ecx,ecx
c0010d22:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d29:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010d2f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d33:	99                   	cdq    
c0010d34:	f7 ff                	idiv   edi
c0010d36:	8d 42 24             	lea    eax,[edx+0x24]
c0010d39:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d3d:	85 f6                	test   esi,esi
c0010d3f:	75 1a                	jne    c0010d5b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d41:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d45:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d49:	50                   	push   eax
c0010d4a:	50                   	push   eax
c0010d4b:	52                   	push   edx
c0010d4c:	68 b3 0d 02 c0       	push   0xc0020db3
c0010d51:	e8 48 9c ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0010d56:	83 c4 10             	add    esp,0x10
c0010d59:	eb 1b                	jmp    c0010d76 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d5b:	41                   	inc    ecx
c0010d5c:	83 f9 08             	cmp    ecx,0x8
c0010d5f:	75 ce                	jne    c0010d2f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d61:	83 ec 0c             	sub    esp,0xc
c0010d64:	be 01 00 00 00       	mov    esi,0x1
c0010d69:	68 d4 0d 02 c0       	push   0xc0020dd4
c0010d6e:	e8 2b 9c ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	83 c4 0c             	add    esp,0xc
c0010d79:	89 f0                	mov    eax,esi
c0010d7b:	5b                   	pop    ebx
c0010d7c:	5e                   	pop    esi
c0010d7d:	5f                   	pop    edi
c0010d7e:	5d                   	pop    ebp
c0010d7f:	c3                   	ret    

c0010d80 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d80:	55                   	push   ebp
c0010d81:	57                   	push   edi
c0010d82:	56                   	push   esi
c0010d83:	53                   	push   ebx
c0010d84:	51                   	push   ecx
c0010d85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d89:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d90:	0f 84 af 00 00 00    	je     c0010e45 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d96:	31 c9                	xor    ecx,ecx
c0010d98:	bf 08 00 00 00       	mov    edi,0x8
c0010d9d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010da3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010da6:	99                   	cdq    
c0010da7:	f7 ff                	idiv   edi
c0010da9:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010db0:	85 ed                	test   ebp,ebp
c0010db2:	0f 84 9e 00 00 00    	je     c0010e56 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010db8:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010dbe:	89 e9                	mov    ecx,ebp
c0010dc0:	bf 01 00 00 00       	mov    edi,0x1
c0010dc5:	d3 e7                	shl    edi,cl
c0010dc7:	31 c9                	xor    ecx,ecx
c0010dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dcc:	b8 01 00 00 00       	mov    eax,0x1
c0010dd1:	d3 e0                	shl    eax,cl
c0010dd3:	85 04 24             	test   DWORD PTR [esp],eax
c0010dd6:	74 06                	je     c0010dde <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010dd8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010ddc:	75 67                	jne    c0010e45 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dde:	41                   	inc    ecx
c0010ddf:	83 f9 11             	cmp    ecx,0x11
c0010de2:	75 e8                	jne    c0010dcc <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010de4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010de7:	46                   	inc    esi
c0010de8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dee:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010df9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e00:	09 f8                	or     eax,edi
c0010e02:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010e08:	31 c0                	xor    eax,eax
c0010e0a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010e12:	74 09                	je     c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010e14:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010e1b:	eb 06                	jmp    c0010e23 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010e1d:	40                   	inc    eax
c0010e1e:	83 f8 08             	cmp    eax,0x8
c0010e21:	75 e7                	jne    c0010e0a <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010e23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010e27:	83 fd 09             	cmp    ebp,0x9
c0010e2a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e2d:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e2f:	75 07                	jne    c0010e38 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010e31:	b8 10 0c 01 c0       	mov    eax,0xc0010c10
c0010e36:	eb 31                	jmp    c0010e69 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e38:	83 f8 01             	cmp    eax,0x1
c0010e3b:	75 0c                	jne    c0010e49 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e3d:	f7 d7                	not    edi
c0010e3f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e45:	31 c0                	xor    eax,eax
c0010e47:	eb 20                	jmp    c0010e69 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e49:	85 c0                	test   eax,eax
c0010e4b:	75 1c                	jne    c0010e69 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e4d:	8b 04 ad 80 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdde80]
c0010e54:	eb 13                	jmp    c0010e69 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e56:	41                   	inc    ecx
c0010e57:	46                   	inc    esi
c0010e58:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e5e:	83 f9 08             	cmp    ecx,0x8
c0010e61:	0f 85 36 ff ff ff    	jne    c0010d9d <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e67:	eb dc                	jmp    c0010e45 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e69:	5a                   	pop    edx
c0010e6a:	5b                   	pop    ebx
c0010e6b:	5e                   	pop    esi
c0010e6c:	5f                   	pop    edi
c0010e6d:	5d                   	pop    ebp
c0010e6e:	c3                   	ret    

c0010e6f <KiCheckSignalZ>:
c0010e6f:	83 ec 10             	sub    esp,0x10
c0010e72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e76:	50                   	push   eax
c0010e77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e7f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e85:	e8 f6 fe ff ff       	call   c0010d80 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e8a:	5a                   	pop    edx
c0010e8b:	31 d2                	xor    edx,edx
c0010e8d:	59                   	pop    ecx
c0010e8e:	85 c0                	test   eax,eax
c0010e90:	74 19                	je     c0010eab <KiCheckSignalZ+0x3c>
c0010e92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e98:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e9b:	89 02                	mov    DWORD PTR [edx],eax
c0010e9d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ea8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010eab:	89 d0                	mov    eax,edx
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	c3                   	ret    

c0010eb1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010eb1:	56                   	push   esi
c0010eb2:	53                   	push   ebx
c0010eb3:	bb 01 00 00 00       	mov    ebx,0x1
c0010eb8:	52                   	push   edx
c0010eb9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ec1:	d3 e3                	shl    ebx,cl
c0010ec3:	83 f9 10             	cmp    ecx,0x10
c0010ec6:	7f 08                	jg     c0010ed0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010ec8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010ece:	75 10                	jne    c0010ee0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010ed0:	83 ec 0c             	sub    esp,0xc
c0010ed3:	68 e5 0d 02 c0       	push   0xc0020de5
c0010ed8:	e8 8c f9 ff ff       	call   c0010869 <KePanic(char const*)>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	f7 d3                	not    ebx
c0010ee2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010ee8:	58                   	pop    eax
c0010ee9:	5b                   	pop    ebx
c0010eea:	5e                   	pop    esi
c0010eeb:	c3                   	ret    

c0010eec <KiFinishSignalZ>:
c0010eec:	53                   	push   ebx
c0010eed:	83 ec 10             	sub    esp,0x10
c0010ef0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ef4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010ef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010efc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010eff:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f05:	e8 a7 ff ff ff       	call   c0010eb1 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010f0a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f10:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010f17:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010f1e:	83 c4 18             	add    esp,0x18
c0010f21:	5b                   	pop    ebx
c0010f22:	c3                   	ret    

c0010f23 <SysSeekDir(regs*)>:
c0010f23:	31 c0                	xor    eax,eax
c0010f25:	31 d2                	xor    edx,edx
c0010f27:	c3                   	ret    

c0010f28 <SysTellDir(regs*)>:
c0010f28:	31 c0                	xor    eax,eax
c0010f2a:	31 d2                	xor    edx,edx
c0010f2c:	c3                   	ret    

c0010f2d <SysVerify(regs*)>:
c0010f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f31:	31 d2                	xor    edx,edx
c0010f33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f36:	c3                   	ret    

c0010f37 <SysGetArgc(regs*)>:
c0010f37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f3f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f45:	89 c2                	mov    edx,eax
c0010f47:	c1 fa 1f             	sar    edx,0x1f
c0010f4a:	c3                   	ret    

c0010f4b <SysTTYName(regs*)>:
c0010f4b:	b8 01 00 00 00       	mov    eax,0x1
c0010f50:	31 d2                	xor    edx,edx
c0010f52:	c3                   	ret    

c0010f53 <SysFormatDisk(regs*)>:
c0010f53:	56                   	push   esi
c0010f54:	53                   	push   ebx
c0010f55:	83 ec 04             	sub    esp,0x4
c0010f58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f5c:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f62:	eb 2a                	jmp    c0010f8e <SysFormatDisk(regs*)+0x3b>
c0010f64:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f67:	83 ec 0c             	sub    esp,0xc
c0010f6a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f6f:	51                   	push   ecx
c0010f70:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f73:	51                   	push   ecx
c0010f74:	50                   	push   eax
c0010f75:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f7c:	50                   	push   eax
c0010f7d:	53                   	push   ebx
c0010f7e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f81:	83 c4 20             	add    esp,0x20
c0010f84:	83 f8 08             	cmp    eax,0x8
c0010f87:	89 c1                	mov    ecx,eax
c0010f89:	75 14                	jne    c0010f9f <SysFormatDisk(regs*)+0x4c>
c0010f8b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f8e:	85 db                	test   ebx,ebx
c0010f90:	75 d2                	jne    c0010f64 <SysFormatDisk(regs*)+0x11>
c0010f92:	b8 03 00 00 00       	mov    eax,0x3
c0010f97:	31 d2                	xor    edx,edx
c0010f99:	83 c4 04             	add    esp,0x4
c0010f9c:	5b                   	pop    ebx
c0010f9d:	5e                   	pop    esi
c0010f9e:	c3                   	ret    
c0010f9f:	85 c0                	test   eax,eax
c0010fa1:	74 13                	je     c0010fb6 <SysFormatDisk(regs*)+0x63>
c0010fa3:	31 d2                	xor    edx,edx
c0010fa5:	83 f9 09             	cmp    ecx,0x9
c0010fa8:	b8 01 00 00 00       	mov    eax,0x1
c0010fad:	74 ea                	je     c0010f99 <SysFormatDisk(regs*)+0x46>
c0010faf:	b8 02 00 00 00       	mov    eax,0x2
c0010fb4:	eb e1                	jmp    c0010f97 <SysFormatDisk(regs*)+0x44>
c0010fb6:	31 c0                	xor    eax,eax
c0010fb8:	eb dd                	jmp    c0010f97 <SysFormatDisk(regs*)+0x44>

c0010fba <SysSetDiskVolumeLabel(regs*)>:
c0010fba:	56                   	push   esi
c0010fbb:	53                   	push   ebx
c0010fbc:	83 ec 04             	sub    esp,0x4
c0010fbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fc3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fc6:	83 f8 19             	cmp    eax,0x19
c0010fc9:	77 33                	ja     c0010ffe <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fcb:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010fd2:	85 c9                	test   ecx,ecx
c0010fd4:	74 28                	je     c0010ffe <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fd6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010fd9:	85 db                	test   ebx,ebx
c0010fdb:	74 21                	je     c0010ffe <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fdd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010fe3:	85 d2                	test   edx,edx
c0010fe5:	74 17                	je     c0010ffe <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fe7:	8b 32                	mov    esi,DWORD PTR [edx]
c0010fe9:	53                   	push   ebx
c0010fea:	50                   	push   eax
c0010feb:	51                   	push   ecx
c0010fec:	52                   	push   edx
c0010fed:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010ff0:	83 c4 10             	add    esp,0x10
c0010ff3:	83 c4 04             	add    esp,0x4
c0010ff6:	5b                   	pop    ebx
c0010ff7:	5e                   	pop    esi
c0010ff8:	89 c2                	mov    edx,eax
c0010ffa:	c1 fa 1f             	sar    edx,0x1f
c0010ffd:	c3                   	ret    
c0010ffe:	83 c4 04             	add    esp,0x4
c0011001:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011006:	5b                   	pop    ebx
c0011007:	ba ff ff ff ff       	mov    edx,0xffffffff
c001100c:	5e                   	pop    esi
c001100d:	c3                   	ret    

c001100e <SysGetDiskVolumeLabel(regs*)>:
c001100e:	57                   	push   edi
c001100f:	56                   	push   esi
c0011010:	53                   	push   ebx
c0011011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011015:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011018:	83 fa 19             	cmp    edx,0x19
c001101b:	77 3c                	ja     c0011059 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001101d:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0011024:	85 c9                	test   ecx,ecx
c0011026:	74 31                	je     c0011059 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011028:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001102b:	85 db                	test   ebx,ebx
c001102d:	74 2a                	je     c0011059 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001102f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011032:	85 f6                	test   esi,esi
c0011034:	74 23                	je     c0011059 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011036:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001103c:	85 c0                	test   eax,eax
c001103e:	74 19                	je     c0011059 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	8b 38                	mov    edi,DWORD PTR [eax]
c0011045:	56                   	push   esi
c0011046:	53                   	push   ebx
c0011047:	52                   	push   edx
c0011048:	51                   	push   ecx
c0011049:	50                   	push   eax
c001104a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001104d:	83 c4 20             	add    esp,0x20
c0011050:	5b                   	pop    ebx
c0011051:	5e                   	pop    esi
c0011052:	89 c2                	mov    edx,eax
c0011054:	c1 fa 1f             	sar    edx,0x1f
c0011057:	5f                   	pop    edi
c0011058:	c3                   	ret    
c0011059:	5b                   	pop    ebx
c001105a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001105f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011064:	5e                   	pop    esi
c0011065:	5f                   	pop    edi
c0011066:	c3                   	ret    

c0011067 <SysShutdown(regs*)>:
c0011067:	57                   	push   edi
c0011068:	56                   	push   esi
c0011069:	83 ec 04             	sub    esp,0x4
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011073:	85 c0                	test   eax,eax
c0011075:	74 1e                	je     c0011095 <SysShutdown(regs*)+0x2e>
c0011077:	83 f8 01             	cmp    eax,0x1
c001107a:	74 5f                	je     c00110db <SysShutdown(regs*)+0x74>
c001107c:	83 f8 02             	cmp    eax,0x2
c001107f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011084:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011089:	74 32                	je     c00110bd <SysShutdown(regs*)+0x56>
c001108b:	83 c4 04             	add    esp,0x4
c001108e:	89 f0                	mov    eax,esi
c0011090:	5e                   	pop    esi
c0011091:	89 fa                	mov    edx,edi
c0011093:	5f                   	pop    edi
c0011094:	c3                   	ret    
c0011095:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001109a:	be ff ff ff ff       	mov    esi,0xffffffff
c001109f:	bf ff ff ff ff       	mov    edi,0xffffffff
c00110a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00110a6:	6a 00                	push   0x0
c00110a8:	6a 00                	push   0x0
c00110aa:	6a 00                	push   0x0
c00110ac:	50                   	push   eax
c00110ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	89 f0                	mov    eax,esi
c00110b5:	83 c4 04             	add    esp,0x4
c00110b8:	89 fa                	mov    edx,edi
c00110ba:	5e                   	pop    esi
c00110bb:	5f                   	pop    edi
c00110bc:	c3                   	ret    
c00110bd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00110c4:	6a 00                	push   0x0
c00110c6:	6a 00                	push   0x0
c00110c8:	6a 01                	push   0x1
c00110ca:	50                   	push   eax
c00110cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110ce:	83 c4 10             	add    esp,0x10
c00110d1:	89 f0                	mov    eax,esi
c00110d3:	83 c4 04             	add    esp,0x4
c00110d6:	89 fa                	mov    edx,edi
c00110d8:	5e                   	pop    esi
c00110d9:	5f                   	pop    edi
c00110da:	c3                   	ret    
c00110db:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110e0:	85 c0                	test   eax,eax
c00110e2:	74 02                	je     c00110e6 <SysShutdown(regs*)+0x7f>
c00110e4:	ff d0                	call   eax
c00110e6:	31 f6                	xor    esi,esi
c00110e8:	83 c4 04             	add    esp,0x4
c00110eb:	89 f0                	mov    eax,esi
c00110ed:	31 ff                	xor    edi,edi
c00110ef:	5e                   	pop    esi
c00110f0:	89 fa                	mov    edx,edi
c00110f2:	5f                   	pop    edi
c00110f3:	c3                   	ret    

c00110f4 <SysRealpath(regs*)>:
c00110f4:	53                   	push   ebx
c00110f5:	83 ec 08             	sub    esp,0x8
c00110f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110ff:	85 c9                	test   ecx,ecx
c0011101:	74 37                	je     c001113a <SysRealpath(regs*)+0x46>
c0011103:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011106:	31 d2                	xor    edx,edx
c0011108:	b8 01 00 00 00       	mov    eax,0x1
c001110d:	85 db                	test   ebx,ebx
c001110f:	75 05                	jne    c0011116 <SysRealpath(regs*)+0x22>
c0011111:	83 c4 08             	add    esp,0x8
c0011114:	5b                   	pop    ebx
c0011115:	c3                   	ret    
c0011116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001111b:	83 ec 04             	sub    esp,0x4
c001111e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011121:	05 0c 01 00 00       	add    eax,0x10c
c0011126:	50                   	push   eax
c0011127:	51                   	push   ecx
c0011128:	53                   	push   ebx
c0011129:	e8 3c 9c ff ff       	call   c000ad6a <Fs::standardiseFiles(char*, char const*, char const*)>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	31 c0                	xor    eax,eax
c0011133:	31 d2                	xor    edx,edx
c0011135:	83 c4 08             	add    esp,0x8
c0011138:	5b                   	pop    ebx
c0011139:	c3                   	ret    
c001113a:	b8 01 00 00 00       	mov    eax,0x1
c001113f:	31 d2                	xor    edx,edx
c0011141:	eb f2                	jmp    c0011135 <SysRealpath(regs*)+0x41>

c0011143 <SysReadDir(regs*)>:
c0011143:	53                   	push   ebx
c0011144:	83 ec 18             	sub    esp,0x18
c0011147:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001114b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001114e:	83 f8 02             	cmp    eax,0x2
c0011151:	76 4f                	jbe    c00111a2 <SysReadDir(regs*)+0x5f>
c0011153:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001115a:	77 52                	ja     c00111ae <SysReadDir(regs*)+0x6b>
c001115c:	83 ec 0c             	sub    esp,0xc
c001115f:	50                   	push   eax
c0011160:	e8 46 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	85 c0                	test   eax,eax
c001116a:	74 42                	je     c00111ae <SysReadDir(regs*)+0x6b>
c001116c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011174:	83 ec 0c             	sub    esp,0xc
c0011177:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001117b:	8b 10                	mov    edx,DWORD PTR [eax]
c001117d:	51                   	push   ecx
c001117e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011181:	51                   	push   ecx
c0011182:	6a 00                	push   0x0
c0011184:	68 10 01 00 00       	push   0x110
c0011189:	50                   	push   eax
c001118a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001118d:	83 c4 20             	add    esp,0x20
c0011190:	85 c0                	test   eax,eax
c0011192:	89 c1                	mov    ecx,eax
c0011194:	74 27                	je     c00111bd <SysReadDir(regs*)+0x7a>
c0011196:	31 d2                	xor    edx,edx
c0011198:	83 f9 07             	cmp    ecx,0x7
c001119b:	b8 02 00 00 00       	mov    eax,0x2
c00111a0:	75 16                	jne    c00111b8 <SysReadDir(regs*)+0x75>
c00111a2:	b8 01 00 00 00       	mov    eax,0x1
c00111a7:	31 d2                	xor    edx,edx
c00111a9:	83 c4 18             	add    esp,0x18
c00111ac:	5b                   	pop    ebx
c00111ad:	c3                   	ret    
c00111ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111b8:	83 c4 18             	add    esp,0x18
c00111bb:	5b                   	pop    ebx
c00111bc:	c3                   	ret    
c00111bd:	31 c0                	xor    eax,eax
c00111bf:	31 d2                	xor    edx,edx
c00111c1:	eb e6                	jmp    c00111a9 <SysReadDir(regs*)+0x66>

c00111c3 <SysIsATTY(regs*)>:
c00111c3:	83 ec 0c             	sub    esp,0xc
c00111c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111cd:	83 f8 02             	cmp    eax,0x2
c00111d0:	76 07                	jbe    c00111d9 <SysIsATTY(regs*)+0x16>
c00111d2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111d7:	75 26                	jne    c00111ff <SysIsATTY(regs*)+0x3c>
c00111d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111e7:	85 c0                	test   eax,eax
c00111e9:	74 24                	je     c001120f <SysIsATTY(regs*)+0x4c>
c00111eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00111ed:	83 ec 0c             	sub    esp,0xc
c00111f0:	50                   	push   eax
c00111f1:	ff 12                	call   DWORD PTR [edx]
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	31 d2                	xor    edx,edx
c00111f8:	83 c4 0c             	add    esp,0xc
c00111fb:	0f b6 c0             	movzx  eax,al
c00111fe:	c3                   	ret    
c00111ff:	83 ec 0c             	sub    esp,0xc
c0011202:	50                   	push   eax
c0011203:	e8 a3 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011208:	83 c4 10             	add    esp,0x10
c001120b:	85 c0                	test   eax,eax
c001120d:	75 dc                	jne    c00111eb <SysIsATTY(regs*)+0x28>
c001120f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011214:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011219:	83 c4 0c             	add    esp,0xc
c001121c:	c3                   	ret    

c001121d <SysSeek(regs*)>:
c001121d:	56                   	push   esi
c001121e:	53                   	push   ebx
c001121f:	83 ec 04             	sub    esp,0x4
c0011222:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011226:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011229:	8d 71 fd             	lea    esi,[ecx-0x3]
c001122c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011232:	77 33                	ja     c0011267 <SysSeek(regs*)+0x4a>
c0011234:	83 ec 0c             	sub    esp,0xc
c0011237:	51                   	push   ecx
c0011238:	e8 6e 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001123d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011240:	83 c4 0c             	add    esp,0xc
c0011243:	31 db                	xor    ebx,ebx
c0011245:	53                   	push   ebx
c0011246:	51                   	push   ecx
c0011247:	50                   	push   eax
c0011248:	e8 73 9e ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c001124d:	83 c4 10             	add    esp,0x10
c0011250:	85 c0                	test   eax,eax
c0011252:	0f 95 c0             	setne  al
c0011255:	31 d2                	xor    edx,edx
c0011257:	0f b6 c0             	movzx  eax,al
c001125a:	f7 d8                	neg    eax
c001125c:	83 d2 00             	adc    edx,0x0
c001125f:	83 c4 04             	add    esp,0x4
c0011262:	5b                   	pop    ebx
c0011263:	f7 da                	neg    edx
c0011265:	5e                   	pop    esi
c0011266:	c3                   	ret    
c0011267:	83 c4 04             	add    esp,0x4
c001126a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001126f:	5b                   	pop    ebx
c0011270:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011275:	5e                   	pop    esi
c0011276:	c3                   	ret    

c0011277 <SysTell(regs*)>:
c0011277:	53                   	push   ebx
c0011278:	83 ec 08             	sub    esp,0x8
c001127b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001127f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011282:	83 f8 02             	cmp    eax,0x2
c0011285:	76 4e                	jbe    c00112d5 <SysTell(regs*)+0x5e>
c0011287:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001128c:	76 19                	jbe    c00112a7 <SysTell(regs*)+0x30>
c001128e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011291:	31 d2                	xor    edx,edx
c0011293:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011299:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112a0:	83 c4 08             	add    esp,0x8
c00112a3:	31 c0                	xor    eax,eax
c00112a5:	5b                   	pop    ebx
c00112a6:	c3                   	ret    
c00112a7:	83 ec 0c             	sub    esp,0xc
c00112aa:	50                   	push   eax
c00112ab:	e8 fb 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00112b0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00112b3:	5a                   	pop    edx
c00112b4:	59                   	pop    ecx
c00112b5:	53                   	push   ebx
c00112b6:	50                   	push   eax
c00112b7:	e8 5a 9e ff ff       	call   c000b116 <File::tell(unsigned long long*)>
c00112bc:	83 c4 10             	add    esp,0x10
c00112bf:	85 c0                	test   eax,eax
c00112c1:	0f 95 c0             	setne  al
c00112c4:	31 d2                	xor    edx,edx
c00112c6:	0f b6 c0             	movzx  eax,al
c00112c9:	f7 d8                	neg    eax
c00112cb:	83 d2 00             	adc    edx,0x0
c00112ce:	83 c4 08             	add    esp,0x8
c00112d1:	5b                   	pop    ebx
c00112d2:	f7 da                	neg    edx
c00112d4:	c3                   	ret    
c00112d5:	83 c4 08             	add    esp,0x8
c00112d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112dd:	5b                   	pop    ebx
c00112de:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112e3:	c3                   	ret    

c00112e4 <SysSize(regs*)>:
c00112e4:	53                   	push   ebx
c00112e5:	83 ec 18             	sub    esp,0x18
c00112e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112ef:	83 f8 02             	cmp    eax,0x2
c00112f2:	76 54                	jbe    c0011348 <SysSize(regs*)+0x64>
c00112f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112f9:	76 19                	jbe    c0011314 <SysSize(regs*)+0x30>
c00112fb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112fe:	31 d2                	xor    edx,edx
c0011300:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011306:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001130d:	83 c4 18             	add    esp,0x18
c0011310:	31 c0                	xor    eax,eax
c0011312:	5b                   	pop    ebx
c0011313:	c3                   	ret    
c0011314:	83 ec 0c             	sub    esp,0xc
c0011317:	50                   	push   eax
c0011318:	e8 8e 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001131d:	83 c4 0c             	add    esp,0xc
c0011320:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011324:	52                   	push   edx
c0011325:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011328:	52                   	push   edx
c0011329:	50                   	push   eax
c001132a:	e8 7f 9f ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c001132f:	83 c4 10             	add    esp,0x10
c0011332:	85 c0                	test   eax,eax
c0011334:	0f 95 c0             	setne  al
c0011337:	31 d2                	xor    edx,edx
c0011339:	0f b6 c0             	movzx  eax,al
c001133c:	f7 d8                	neg    eax
c001133e:	83 d2 00             	adc    edx,0x0
c0011341:	83 c4 18             	add    esp,0x18
c0011344:	5b                   	pop    ebx
c0011345:	f7 da                	neg    edx
c0011347:	c3                   	ret    
c0011348:	83 c4 18             	add    esp,0x18
c001134b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011350:	5b                   	pop    ebx
c0011351:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011356:	c3                   	ret    

c0011357 <SysSizeFromFilename(regs*)>:
c0011357:	57                   	push   edi
c0011358:	56                   	push   esi
c0011359:	53                   	push   ebx
c001135a:	83 ec 10             	sub    esp,0x10
c001135d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011361:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011364:	83 fb 02             	cmp    ebx,0x2
c0011367:	0f 86 83 00 00 00    	jbe    c00113f0 <SysSizeFromFilename(regs*)+0x99>
c001136d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011373:	76 1b                	jbe    c0011390 <SysSizeFromFilename(regs*)+0x39>
c0011375:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011378:	31 d2                	xor    edx,edx
c001137a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011380:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	31 c0                	xor    eax,eax
c001138c:	5b                   	pop    ebx
c001138d:	5e                   	pop    esi
c001138e:	5f                   	pop    edi
c001138f:	c3                   	ret    
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	68 14 01 00 00       	push   0x114
c0011398:	e8 2e 67 ff ff       	call   c0007acb <malloc>
c001139d:	83 c4 0c             	add    esp,0xc
c00113a0:	89 c7                	mov    edi,eax
c00113a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113aa:	50                   	push   eax
c00113ab:	53                   	push   ebx
c00113ac:	57                   	push   edi
c00113ad:	e8 94 9b ff ff       	call   c000af46 <File::File(char const*, Process*)>
c00113b2:	83 c4 0c             	add    esp,0xc
c00113b5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00113b9:	50                   	push   eax
c00113ba:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00113bd:	52                   	push   edx
c00113be:	57                   	push   edi
c00113bf:	e8 ea 9e ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	85 ff                	test   edi,edi
c00113c9:	89 c3                	mov    ebx,eax
c00113cb:	74 0c                	je     c00113d9 <SysSizeFromFilename(regs*)+0x82>
c00113cd:	8b 07                	mov    eax,DWORD PTR [edi]
c00113cf:	83 ec 0c             	sub    esp,0xc
c00113d2:	57                   	push   edi
c00113d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	31 c0                	xor    eax,eax
c00113db:	85 db                	test   ebx,ebx
c00113dd:	0f 95 c0             	setne  al
c00113e0:	31 d2                	xor    edx,edx
c00113e2:	f7 d8                	neg    eax
c00113e4:	83 d2 00             	adc    edx,0x0
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	5b                   	pop    ebx
c00113eb:	f7 da                	neg    edx
c00113ed:	5e                   	pop    esi
c00113ee:	5f                   	pop    edi
c00113ef:	c3                   	ret    
c00113f0:	83 c4 10             	add    esp,0x10
c00113f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113f8:	5b                   	pop    ebx
c00113f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113fe:	5e                   	pop    esi
c00113ff:	5f                   	pop    edi
c0011400:	c3                   	ret    

c0011401 <SysClose(regs*)>:
c0011401:	53                   	push   ebx
c0011402:	83 ec 08             	sub    esp,0x8
c0011405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011409:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001140c:	83 f8 02             	cmp    eax,0x2
c001140f:	76 41                	jbe    c0011452 <SysClose(regs*)+0x51>
c0011411:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011417:	83 fa 01             	cmp    edx,0x1
c001141a:	76 2d                	jbe    c0011449 <SysClose(regs*)+0x48>
c001141c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011421:	77 2f                	ja     c0011452 <SysClose(regs*)+0x51>
c0011423:	83 ec 0c             	sub    esp,0xc
c0011426:	50                   	push   eax
c0011427:	e8 7f 80 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001142c:	89 04 24             	mov    DWORD PTR [esp],eax
c001142f:	89 c3                	mov    ebx,eax
c0011431:	e8 2a 9c ff ff       	call   c000b060 <File::close()>
c0011436:	83 c4 10             	add    esp,0x10
c0011439:	85 db                	test   ebx,ebx
c001143b:	74 0c                	je     c0011449 <SysClose(regs*)+0x48>
c001143d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001143f:	83 ec 0c             	sub    esp,0xc
c0011442:	53                   	push   ebx
c0011443:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011446:	83 c4 10             	add    esp,0x10
c0011449:	83 c4 08             	add    esp,0x8
c001144c:	31 c0                	xor    eax,eax
c001144e:	5b                   	pop    ebx
c001144f:	31 d2                	xor    edx,edx
c0011451:	c3                   	ret    
c0011452:	83 c4 08             	add    esp,0x8
c0011455:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001145a:	5b                   	pop    ebx
c001145b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011460:	c3                   	ret    

c0011461 <SysOpenDir(regs*)>:
c0011461:	56                   	push   esi
c0011462:	53                   	push   ebx
c0011463:	83 ec 04             	sub    esp,0x4
c0011466:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001146a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001146d:	85 c9                	test   ecx,ecx
c001146f:	74 5d                	je     c00114ce <SysOpenDir(regs*)+0x6d>
c0011471:	83 ec 0c             	sub    esp,0xc
c0011474:	68 14 01 00 00       	push   0x114
c0011479:	e8 4d 66 ff ff       	call   c0007acb <malloc>
c001147e:	83 c4 0c             	add    esp,0xc
c0011481:	89 c6                	mov    esi,eax
c0011483:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011488:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001148b:	50                   	push   eax
c001148c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001148f:	52                   	push   edx
c0011490:	56                   	push   esi
c0011491:	e8 d6 9f ff ff       	call   c000b46c <Directory::Directory(char const*, Process*)>
c0011496:	83 c4 10             	add    esp,0x10
c0011499:	85 f6                	test   esi,esi
c001149b:	74 31                	je     c00114ce <SysOpenDir(regs*)+0x6d>
c001149d:	83 ec 0c             	sub    esp,0xc
c00114a0:	56                   	push   esi
c00114a1:	e8 82 a0 ff ff       	call   c000b528 <Directory::open()>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	85 c0                	test   eax,eax
c00114ab:	75 21                	jne    c00114ce <SysOpenDir(regs*)+0x6d>
c00114ad:	83 ec 0c             	sub    esp,0xc
c00114b0:	56                   	push   esi
c00114b1:	e8 f8 7c ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00114b6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00114b9:	83 c4 10             	add    esp,0x10
c00114bc:	89 02                	mov    DWORD PTR [edx],eax
c00114be:	c1 f8 1f             	sar    eax,0x1f
c00114c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114c4:	83 c4 04             	add    esp,0x4
c00114c7:	31 c0                	xor    eax,eax
c00114c9:	5b                   	pop    ebx
c00114ca:	31 d2                	xor    edx,edx
c00114cc:	5e                   	pop    esi
c00114cd:	c3                   	ret    
c00114ce:	83 c4 04             	add    esp,0x4
c00114d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114d6:	5b                   	pop    ebx
c00114d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114dc:	5e                   	pop    esi
c00114dd:	c3                   	ret    

c00114de <SysMakeDir(regs*)>:
c00114de:	56                   	push   esi
c00114df:	53                   	push   ebx
c00114e0:	83 ec 10             	sub    esp,0x10
c00114e3:	68 14 01 00 00       	push   0x114
c00114e8:	e8 de 65 ff ff       	call   c0007acb <malloc>
c00114ed:	83 c4 0c             	add    esp,0xc
c00114f0:	89 c3                	mov    ebx,eax
c00114f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114fa:	50                   	push   eax
c00114fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114ff:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011502:	52                   	push   edx
c0011503:	53                   	push   ebx
c0011504:	e8 63 9f ff ff       	call   c000b46c <Directory::Directory(char const*, Process*)>
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	85 db                	test   ebx,ebx
c001150e:	74 2c                	je     c001153c <SysMakeDir(regs*)+0x5e>
c0011510:	83 ec 0c             	sub    esp,0xc
c0011513:	53                   	push   ebx
c0011514:	e8 ef a1 ff ff       	call   c000b708 <Directory::create()>
c0011519:	89 c6                	mov    esi,eax
c001151b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001151d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011520:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011523:	83 c4 10             	add    esp,0x10
c0011526:	31 c0                	xor    eax,eax
c0011528:	85 f6                	test   esi,esi
c001152a:	0f 95 c0             	setne  al
c001152d:	31 d2                	xor    edx,edx
c001152f:	f7 d8                	neg    eax
c0011531:	83 d2 00             	adc    edx,0x0
c0011534:	83 c4 04             	add    esp,0x4
c0011537:	5b                   	pop    ebx
c0011538:	f7 da                	neg    edx
c001153a:	5e                   	pop    esi
c001153b:	c3                   	ret    
c001153c:	83 c4 04             	add    esp,0x4
c001153f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011544:	5b                   	pop    ebx
c0011545:	ba ff ff ff ff       	mov    edx,0xffffffff
c001154a:	5e                   	pop    esi
c001154b:	c3                   	ret    

c001154c <SysCloseDir(regs*)>:
c001154c:	53                   	push   ebx
c001154d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011552:	83 ec 08             	sub    esp,0x8
c0011555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011559:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001155c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011561:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011564:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001156a:	77 2a                	ja     c0011596 <SysCloseDir(regs*)+0x4a>
c001156c:	83 ec 0c             	sub    esp,0xc
c001156f:	51                   	push   ecx
c0011570:	e8 36 7f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011575:	89 04 24             	mov    DWORD PTR [esp],eax
c0011578:	89 c3                	mov    ebx,eax
c001157a:	e8 05 a0 ff ff       	call   c000b584 <Directory::close()>
c001157f:	83 c4 10             	add    esp,0x10
c0011582:	85 db                	test   ebx,ebx
c0011584:	74 0c                	je     c0011592 <SysCloseDir(regs*)+0x46>
c0011586:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011588:	83 ec 0c             	sub    esp,0xc
c001158b:	53                   	push   ebx
c001158c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	31 c0                	xor    eax,eax
c0011594:	31 d2                	xor    edx,edx
c0011596:	83 c4 08             	add    esp,0x8
c0011599:	5b                   	pop    ebx
c001159a:	c3                   	ret    

c001159b <SysWait(regs*)>:
c001159b:	83 ec 10             	sub    esp,0x10
c001159e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115a2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00115a5:	52                   	push   edx
c00115a6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00115a9:	51                   	push   ecx
c00115aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115ad:	50                   	push   eax
c00115ae:	e8 e9 3c 00 00       	call   c001529c <waitTask(int, int*, int)>
c00115b3:	83 c4 1c             	add    esp,0x1c
c00115b6:	89 c2                	mov    edx,eax
c00115b8:	c1 fa 1f             	sar    edx,0x1f
c00115bb:	c3                   	ret    

c00115bc <SysNotImpl(regs*)>:
c00115bc:	83 ec 18             	sub    esp,0x18
c00115bf:	68 f6 0d 02 c0       	push   0xc0020df6
c00115c4:	e8 a0 f2 ff ff       	call   c0010869 <KePanic(char const*)>
c00115c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115d3:	83 c4 1c             	add    esp,0x1c
c00115d6:	c3                   	ret    

c00115d7 <SysPanic(regs*)>:
c00115d7:	83 ec 18             	sub    esp,0x18
c00115da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115de:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115e1:	50                   	push   eax
c00115e2:	e8 82 f2 ff ff       	call   c0010869 <KePanic(char const*)>
c00115e7:	b8 01 00 00 00       	mov    eax,0x1
c00115ec:	31 d2                	xor    edx,edx
c00115ee:	83 c4 1c             	add    esp,0x1c
c00115f1:	c3                   	ret    

c00115f2 <SysRmdir(regs*)>:
c00115f2:	56                   	push   esi
c00115f3:	53                   	push   ebx
c00115f4:	83 ec 10             	sub    esp,0x10
c00115f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115fb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115fe:	68 14 01 00 00       	push   0x114
c0011603:	e8 c3 64 ff ff       	call   c0007acb <malloc>
c0011608:	83 c4 0c             	add    esp,0xc
c001160b:	89 c3                	mov    ebx,eax
c001160d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011612:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011615:	50                   	push   eax
c0011616:	56                   	push   esi
c0011617:	53                   	push   ebx
c0011618:	e8 29 99 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c001161d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011620:	e8 55 9b ff ff       	call   c000b17a <File::unlink()>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	85 db                	test   ebx,ebx
c001162a:	89 c6                	mov    esi,eax
c001162c:	74 0c                	je     c001163a <SysRmdir(regs*)+0x48>
c001162e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	53                   	push   ebx
c0011634:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011637:	83 c4 10             	add    esp,0x10
c001163a:	31 c0                	xor    eax,eax
c001163c:	85 f6                	test   esi,esi
c001163e:	0f 95 c0             	setne  al
c0011641:	31 d2                	xor    edx,edx
c0011643:	f7 d8                	neg    eax
c0011645:	83 d2 00             	adc    edx,0x0
c0011648:	83 c4 04             	add    esp,0x4
c001164b:	5b                   	pop    ebx
c001164c:	f7 da                	neg    edx
c001164e:	5e                   	pop    esi
c001164f:	c3                   	ret    

c0011650 <SysUnlink(regs*)>:
c0011650:	56                   	push   esi
c0011651:	53                   	push   ebx
c0011652:	83 ec 10             	sub    esp,0x10
c0011655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011659:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001165c:	68 14 01 00 00       	push   0x114
c0011661:	e8 65 64 ff ff       	call   c0007acb <malloc>
c0011666:	83 c4 0c             	add    esp,0xc
c0011669:	89 c3                	mov    ebx,eax
c001166b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011670:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011673:	50                   	push   eax
c0011674:	56                   	push   esi
c0011675:	53                   	push   ebx
c0011676:	e8 cb 98 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c001167b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001167e:	e8 f7 9a ff ff       	call   c000b17a <File::unlink()>
c0011683:	83 c4 10             	add    esp,0x10
c0011686:	85 db                	test   ebx,ebx
c0011688:	89 c6                	mov    esi,eax
c001168a:	74 0c                	je     c0011698 <SysUnlink(regs*)+0x48>
c001168c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001168e:	83 ec 0c             	sub    esp,0xc
c0011691:	53                   	push   ebx
c0011692:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	31 c0                	xor    eax,eax
c001169a:	85 f6                	test   esi,esi
c001169c:	0f 95 c0             	setne  al
c001169f:	31 d2                	xor    edx,edx
c00116a1:	f7 d8                	neg    eax
c00116a3:	83 d2 00             	adc    edx,0x0
c00116a6:	83 c4 04             	add    esp,0x4
c00116a9:	5b                   	pop    ebx
c00116aa:	f7 da                	neg    edx
c00116ac:	5e                   	pop    esi
c00116ad:	c3                   	ret    

c00116ae <SysGetArgv(regs*)>:
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116b5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116b8:	85 c0                	test   eax,eax
c00116ba:	78 2c                	js     c00116e8 <SysGetArgv(regs*)+0x3a>
c00116bc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116c2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116c5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116cb:	7d 1b                	jge    c00116e8 <SysGetArgv(regs*)+0x3a>
c00116cd:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116d4:	85 c0                	test   eax,eax
c00116d6:	74 18                	je     c00116f0 <SysGetArgv(regs*)+0x42>
c00116d8:	83 ec 08             	sub    esp,0x8
c00116db:	50                   	push   eax
c00116dc:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116df:	50                   	push   eax
c00116e0:	e8 6b ef fe ff       	call   c0000650 <strcpy>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	31 c0                	xor    eax,eax
c00116ea:	31 d2                	xor    edx,edx
c00116ec:	83 c4 0c             	add    esp,0xc
c00116ef:	c3                   	ret    
c00116f0:	b8 01 00 00 00       	mov    eax,0x1
c00116f5:	31 d2                	xor    edx,edx
c00116f7:	83 c4 0c             	add    esp,0xc
c00116fa:	c3                   	ret    

c00116fb <SysUSleep(regs*)>:
c00116fb:	83 ec 1c             	sub    esp,0x1c
c00116fe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011702:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011705:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011708:	6a 00                	push   0x0
c001170a:	6a 64                	push   0x64
c001170c:	52                   	push   edx
c001170d:	50                   	push   eax
c001170e:	e8 1d cf 00 00       	call   c001e630 <__udivdi3>
c0011713:	83 c4 14             	add    esp,0x14
c0011716:	50                   	push   eax
c0011717:	e8 64 3c 00 00       	call   c0015380 <milliTenthSleep(unsigned int)>
c001171c:	31 c0                	xor    eax,eax
c001171e:	31 d2                	xor    edx,edx
c0011720:	83 c4 1c             	add    esp,0x1c
c0011723:	c3                   	ret    

c0011724 <SysSpawn(regs*)>:
c0011724:	56                   	push   esi
c0011725:	53                   	push   ebx
c0011726:	83 ec 04             	sub    esp,0x4
c0011729:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001172d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011730:	85 f6                	test   esi,esi
c0011732:	75 0a                	jne    c001173e <SysSpawn(regs*)+0x1a>
c0011734:	83 c4 04             	add    esp,0x4
c0011737:	31 c0                	xor    eax,eax
c0011739:	5b                   	pop    ebx
c001173a:	31 d2                	xor    edx,edx
c001173c:	5e                   	pop    esi
c001173d:	c3                   	ret    
c001173e:	83 ec 0c             	sub    esp,0xc
c0011741:	68 24 07 00 00       	push   0x724
c0011746:	e8 80 63 ff ff       	call   c0007acb <malloc>
c001174b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001174e:	83 c4 10             	add    esp,0x10
c0011751:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011754:	89 c6                	mov    esi,eax
c0011756:	31 c0                	xor    eax,eax
c0011758:	85 c9                	test   ecx,ecx
c001175a:	75 08                	jne    c0011764 <SysSpawn(regs*)+0x40>
c001175c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011761:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011764:	52                   	push   edx
c0011765:	50                   	push   eax
c0011766:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011769:	50                   	push   eax
c001176a:	56                   	push   esi
c001176b:	e8 78 32 00 00       	call   c00149e8 <Process::Process(char const*, Process*, char**)>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001177a:	75 b8                	jne    c0011734 <SysSpawn(regs*)+0x10>
c001177c:	83 ec 0c             	sub    esp,0xc
c001177f:	56                   	push   esi
c0011780:	e8 9b 37 00 00       	call   c0014f20 <Process::createUserThread()>
c0011785:	8b 06                	mov    eax,DWORD PTR [esi]
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	83 c4 04             	add    esp,0x4
c001178d:	5b                   	pop    ebx
c001178e:	89 c2                	mov    edx,eax
c0011790:	c1 fa 1f             	sar    edx,0x1f
c0011793:	5e                   	pop    esi
c0011794:	c3                   	ret    

c0011795 <SysGetEnv(regs*)>:
c0011795:	57                   	push   edi
c0011796:	56                   	push   esi
c0011797:	53                   	push   ebx
c0011798:	83 ec 1c             	sub    esp,0x1c
c001179b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00117a4:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00117a7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00117aa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117ad:	51                   	push   ecx
c00117ae:	e8 6e ef ff ff       	call   c0010721 <Krnl::getProcessTotalEnvCount(Process*)>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	39 c7                	cmp    edi,eax
c00117b8:	7c 12                	jl     c00117cc <SysGetEnv(regs*)+0x37>
c00117ba:	31 c0                	xor    eax,eax
c00117bc:	31 d2                	xor    edx,edx
c00117be:	85 f6                	test   esi,esi
c00117c0:	74 03                	je     c00117c5 <SysGetEnv(regs*)+0x30>
c00117c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	5b                   	pop    ebx
c00117c9:	5e                   	pop    esi
c00117ca:	5f                   	pop    edi
c00117cb:	c3                   	ret    
c00117cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117d0:	83 ec 04             	sub    esp,0x4
c00117d3:	57                   	push   edi
c00117d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117da:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117dd:	57                   	push   edi
c00117de:	50                   	push   eax
c00117df:	e8 5d ef ff ff       	call   c0010741 <Krnl::getProcessEnvPair(Process*, int)>
c00117e4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117ef:	83 c4 0c             	add    esp,0xc
c00117f2:	85 d2                	test   edx,edx
c00117f4:	75 23                	jne    c0011819 <SysGetEnv(regs*)+0x84>
c00117f6:	83 ec 0c             	sub    esp,0xc
c00117f9:	50                   	push   eax
c00117fa:	e8 81 ed fe ff       	call   c0000580 <strlen>
c00117ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011802:	89 c3                	mov    ebx,eax
c0011804:	e8 77 ed fe ff       	call   c0000580 <strlen>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	31 d2                	xor    edx,edx
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011815:	5b                   	pop    ebx
c0011816:	5e                   	pop    esi
c0011817:	5f                   	pop    edi
c0011818:	c3                   	ret    
c0011819:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001181c:	83 ec 08             	sub    esp,0x8
c001181f:	50                   	push   eax
c0011820:	56                   	push   esi
c0011821:	e8 2a ee fe ff       	call   c0000650 <strcpy>
c0011826:	58                   	pop    eax
c0011827:	5a                   	pop    edx
c0011828:	68 10 0e 02 c0       	push   0xc0020e10
c001182d:	56                   	push   esi
c001182e:	e8 3d f0 fe ff       	call   c0000870 <strcat>
c0011833:	59                   	pop    ecx
c0011834:	5b                   	pop    ebx
c0011835:	57                   	push   edi
c0011836:	56                   	push   esi
c0011837:	e8 34 f0 fe ff       	call   c0000870 <strcat>
c001183c:	83 c4 10             	add    esp,0x10
c001183f:	31 c0                	xor    eax,eax
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	31 d2                	xor    edx,edx
c0011846:	5b                   	pop    ebx
c0011847:	5e                   	pop    esi
c0011848:	5f                   	pop    edi
c0011849:	c3                   	ret    

c001184a <SysSetFatAttrib(regs*)>:
c001184a:	57                   	push   edi
c001184b:	56                   	push   esi
c001184c:	53                   	push   ebx
c001184d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011857:	68 14 01 00 00       	push   0x114
c001185c:	e8 6a 62 ff ff       	call   c0007acb <malloc>
c0011861:	83 c4 0c             	add    esp,0xc
c0011864:	89 c3                	mov    ebx,eax
c0011866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001186b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001186e:	50                   	push   eax
c001186f:	57                   	push   edi
c0011870:	53                   	push   ebx
c0011871:	e8 d0 96 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0011876:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011879:	83 c4 0c             	add    esp,0xc
c001187c:	0f b6 d4             	movzx  edx,ah
c001187f:	0f b6 c0             	movzx  eax,al
c0011882:	52                   	push   edx
c0011883:	50                   	push   eax
c0011884:	53                   	push   ebx
c0011885:	e8 8a 99 ff ff       	call   c000b214 <File::chfatattr(unsigned char, unsigned char)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	85 db                	test   ebx,ebx
c001188f:	89 c6                	mov    esi,eax
c0011891:	74 0c                	je     c001189f <SysSetFatAttrib(regs*)+0x55>
c0011893:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011895:	83 ec 0c             	sub    esp,0xc
c0011898:	53                   	push   ebx
c0011899:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	5b                   	pop    ebx
c00118a0:	31 c0                	xor    eax,eax
c00118a2:	85 f6                	test   esi,esi
c00118a4:	0f 95 c0             	setne  al
c00118a7:	31 d2                	xor    edx,edx
c00118a9:	5e                   	pop    esi
c00118aa:	f7 d8                	neg    eax
c00118ac:	83 d2 00             	adc    edx,0x0
c00118af:	f7 da                	neg    edx
c00118b1:	5f                   	pop    edi
c00118b2:	c3                   	ret    

c00118b3 <SysPipe(regs*)>:
c00118b3:	57                   	push   edi
c00118b4:	56                   	push   esi
c00118b5:	53                   	push   ebx
c00118b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ba:	83 ec 0c             	sub    esp,0xc
c00118bd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00118c0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118c3:	6a 20                	push   0x20
c00118c5:	e8 01 62 ff ff       	call   c0007acb <malloc>
c00118ca:	89 c3                	mov    ebx,eax
c00118cc:	58                   	pop    eax
c00118cd:	5a                   	pop    edx
c00118ce:	68 00 50 00 00       	push   0x5000
c00118d3:	53                   	push   ebx
c00118d4:	e8 4f 6b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00118d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118dc:	e8 cd 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118e1:	89 07                	mov    DWORD PTR [edi],eax
c00118e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118e6:	e8 c3 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	31 d2                	xor    edx,edx
c00118f0:	89 06                	mov    DWORD PTR [esi],eax
c00118f2:	31 c0                	xor    eax,eax
c00118f4:	5b                   	pop    ebx
c00118f5:	5e                   	pop    esi
c00118f6:	5f                   	pop    edi
c00118f7:	c3                   	ret    

c00118f8 <SysGetUnixTime(regs*)>:
c00118f8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011903:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011907:	e9 42 a0 ff ff       	jmp    c000b94e <Clock::timeInSecondsLocal()>

c001190c <string_ends_with(char const*, char const*)>:
c001190c:	57                   	push   edi
c001190d:	56                   	push   esi
c001190e:	53                   	push   ebx
c001190f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011913:	83 ec 0c             	sub    esp,0xc
c0011916:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001191a:	53                   	push   ebx
c001191b:	e8 60 ec fe ff       	call   c0000580 <strlen>
c0011920:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011923:	89 c6                	mov    esi,eax
c0011925:	e8 56 ec fe ff       	call   c0000580 <strlen>
c001192a:	83 c4 10             	add    esp,0x10
c001192d:	31 d2                	xor    edx,edx
c001192f:	39 c6                	cmp    esi,eax
c0011931:	7d 06                	jge    c0011939 <string_ends_with(char const*, char const*)+0x2d>
c0011933:	5b                   	pop    ebx
c0011934:	89 d0                	mov    eax,edx
c0011936:	5e                   	pop    esi
c0011937:	5f                   	pop    edi
c0011938:	c3                   	ret    
c0011939:	83 ec 08             	sub    esp,0x8
c001193c:	29 c6                	sub    esi,eax
c001193e:	57                   	push   edi
c001193f:	01 f3                	add    ebx,esi
c0011941:	53                   	push   ebx
c0011942:	e8 39 ee fe ff       	call   c0000780 <strcmp>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	31 d2                	xor    edx,edx
c001194c:	5b                   	pop    ebx
c001194d:	5e                   	pop    esi
c001194e:	85 c0                	test   eax,eax
c0011950:	5f                   	pop    edi
c0011951:	0f 94 c2             	sete   dl
c0011954:	89 d0                	mov    eax,edx
c0011956:	c3                   	ret    

c0011957 <SysOpen(regs*)>:
c0011957:	56                   	push   esi
c0011958:	53                   	push   ebx
c0011959:	81 ec 04 01 00 00    	sub    esp,0x104
c001195f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011966:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011969:	85 c0                	test   eax,eax
c001196b:	0f 84 c5 01 00 00    	je     c0011b36 <SysOpen(regs*)+0x1df>
c0011971:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011974:	85 c0                	test   eax,eax
c0011976:	0f 84 ba 01 00 00    	je     c0011b36 <SysOpen(regs*)+0x1df>
c001197c:	83 ec 04             	sub    esp,0x4
c001197f:	68 12 0e 02 c0       	push   0xc0020e12
c0011984:	50                   	push   eax
c0011985:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011989:	56                   	push   esi
c001198a:	e8 db 93 ff ff       	call   c000ad6a <Fs::standardiseFiles(char*, char const*, char const*)>
c001198f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011992:	e8 e9 eb fe ff       	call   c0000580 <strlen>
c0011997:	83 c4 10             	add    esp,0x10
c001199a:	83 e8 01             	sub    eax,0x1
c001199d:	74 29                	je     c00119c8 <SysOpen(regs*)+0x71>
c001199f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00119a3:	83 fa 2e             	cmp    edx,0x2e
c00119a6:	74 1c                	je     c00119c4 <SysOpen(regs*)+0x6d>
c00119a8:	83 fa 3a             	cmp    edx,0x3a
c00119ab:	74 17                	je     c00119c4 <SysOpen(regs*)+0x6d>
c00119ad:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00119b1:	83 e8 01             	sub    eax,0x1
c00119b4:	74 12                	je     c00119c8 <SysOpen(regs*)+0x71>
c00119b6:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00119ba:	83 fa 3a             	cmp    edx,0x3a
c00119bd:	74 05                	je     c00119c4 <SysOpen(regs*)+0x6d>
c00119bf:	83 fa 2e             	cmp    edx,0x2e
c00119c2:	75 e9                	jne    c00119ad <SysOpen(regs*)+0x56>
c00119c4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00119c8:	83 ec 08             	sub    esp,0x8
c00119cb:	68 16 0e 02 c0       	push   0xc0020e16
c00119d0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119d3:	50                   	push   eax
c00119d4:	e8 33 ff ff ff       	call   c001190c <string_ends_with(char const*, char const*)>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	85 c0                	test   eax,eax
c00119de:	74 1d                	je     c00119fd <SysOpen(regs*)+0xa6>
c00119e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119e3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119f0:	81 c4 04 01 00 00    	add    esp,0x104
c00119f6:	31 c0                	xor    eax,eax
c00119f8:	5b                   	pop    ebx
c00119f9:	31 d2                	xor    edx,edx
c00119fb:	5e                   	pop    esi
c00119fc:	c3                   	ret    
c00119fd:	83 ec 08             	sub    esp,0x8
c0011a00:	68 1b 0e 02 c0       	push   0xc0020e1b
c0011a05:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a08:	50                   	push   eax
c0011a09:	e8 fe fe ff ff       	call   c001190c <string_ends_with(char const*, char const*)>
c0011a0e:	83 c4 10             	add    esp,0x10
c0011a11:	85 c0                	test   eax,eax
c0011a13:	75 cb                	jne    c00119e0 <SysOpen(regs*)+0x89>
c0011a15:	83 ec 08             	sub    esp,0x8
c0011a18:	68 17 0e 02 c0       	push   0xc0020e17
c0011a1d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a20:	50                   	push   eax
c0011a21:	e8 5a ed fe ff       	call   c0000780 <strcmp>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	85 c0                	test   eax,eax
c0011a2b:	74 b3                	je     c00119e0 <SysOpen(regs*)+0x89>
c0011a2d:	83 ec 08             	sub    esp,0x8
c0011a30:	68 16 0e 02 c0       	push   0xc0020e16
c0011a35:	56                   	push   esi
c0011a36:	e8 d1 fe ff ff       	call   c001190c <string_ends_with(char const*, char const*)>
c0011a3b:	83 c4 10             	add    esp,0x10
c0011a3e:	85 c0                	test   eax,eax
c0011a40:	75 9e                	jne    c00119e0 <SysOpen(regs*)+0x89>
c0011a42:	83 ec 08             	sub    esp,0x8
c0011a45:	68 20 0e 02 c0       	push   0xc0020e20
c0011a4a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a4d:	50                   	push   eax
c0011a4e:	e8 b9 fe ff ff       	call   c001190c <string_ends_with(char const*, char const*)>
c0011a53:	83 c4 10             	add    esp,0x10
c0011a56:	85 c0                	test   eax,eax
c0011a58:	0f 85 eb 00 00 00    	jne    c0011b49 <SysOpen(regs*)+0x1f2>
c0011a5e:	83 ec 08             	sub    esp,0x8
c0011a61:	68 25 0e 02 c0       	push   0xc0020e25
c0011a66:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a69:	50                   	push   eax
c0011a6a:	e8 9d fe ff ff       	call   c001190c <string_ends_with(char const*, char const*)>
c0011a6f:	83 c4 10             	add    esp,0x10
c0011a72:	85 c0                	test   eax,eax
c0011a74:	0f 85 cf 00 00 00    	jne    c0011b49 <SysOpen(regs*)+0x1f2>
c0011a7a:	83 ec 08             	sub    esp,0x8
c0011a7d:	68 21 0e 02 c0       	push   0xc0020e21
c0011a82:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a85:	51                   	push   ecx
c0011a86:	e8 f5 ec fe ff       	call   c0000780 <strcmp>
c0011a8b:	83 c4 10             	add    esp,0x10
c0011a8e:	85 c0                	test   eax,eax
c0011a90:	0f 84 b3 00 00 00    	je     c0011b49 <SysOpen(regs*)+0x1f2>
c0011a96:	83 ec 08             	sub    esp,0x8
c0011a99:	68 20 0e 02 c0       	push   0xc0020e20
c0011a9e:	56                   	push   esi
c0011a9f:	e8 68 fe ff ff       	call   c001190c <string_ends_with(char const*, char const*)>
c0011aa4:	83 c4 10             	add    esp,0x10
c0011aa7:	85 c0                	test   eax,eax
c0011aa9:	0f 85 9a 00 00 00    	jne    c0011b49 <SysOpen(regs*)+0x1f2>
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	68 14 01 00 00       	push   0x114
c0011ab7:	e8 0f 60 ff ff       	call   c0007acb <malloc>
c0011abc:	83 c4 0c             	add    esp,0xc
c0011abf:	89 c6                	mov    esi,eax
c0011ac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac9:	50                   	push   eax
c0011aca:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011acd:	52                   	push   edx
c0011ace:	56                   	push   esi
c0011acf:	e8 72 94 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0011ad4:	83 c4 10             	add    esp,0x10
c0011ad7:	85 f6                	test   esi,esi
c0011ad9:	74 5b                	je     c0011b36 <SysOpen(regs*)+0x1df>
c0011adb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ade:	0f b6 c2             	movzx  eax,dl
c0011ae1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ae4:	89 d0                	mov    eax,edx
c0011ae6:	83 e0 01             	and    eax,0x1
c0011ae9:	f6 c2 02             	test   dl,0x2
c0011aec:	74 03                	je     c0011af1 <SysOpen(regs*)+0x19a>
c0011aee:	83 c8 02             	or     eax,0x2
c0011af1:	f6 c2 04             	test   dl,0x4
c0011af4:	74 03                	je     c0011af9 <SysOpen(regs*)+0x1a2>
c0011af6:	83 c8 04             	or     eax,0x4
c0011af9:	f6 c2 08             	test   dl,0x8
c0011afc:	74 03                	je     c0011b01 <SysOpen(regs*)+0x1aa>
c0011afe:	83 c8 0a             	or     eax,0xa
c0011b01:	80 e2 10             	and    dl,0x10
c0011b04:	74 03                	je     c0011b09 <SysOpen(regs*)+0x1b2>
c0011b06:	83 c8 12             	or     eax,0x12
c0011b09:	83 ec 08             	sub    esp,0x8
c0011b0c:	50                   	push   eax
c0011b0d:	56                   	push   esi
c0011b0e:	e8 ef 94 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	85 c0                	test   eax,eax
c0011b18:	75 1c                	jne    c0011b36 <SysOpen(regs*)+0x1df>
c0011b1a:	83 ec 0c             	sub    esp,0xc
c0011b1d:	56                   	push   esi
c0011b1e:	e8 8b 76 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011b23:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	89 02                	mov    DWORD PTR [edx],eax
c0011b2b:	c1 f8 1f             	sar    eax,0x1f
c0011b2e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b31:	e9 ba fe ff ff       	jmp    c00119f0 <SysOpen(regs*)+0x99>
c0011b36:	81 c4 04 01 00 00    	add    esp,0x104
c0011b3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b41:	5b                   	pop    ebx
c0011b42:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b47:	5e                   	pop    esi
c0011b48:	c3                   	ret    
c0011b49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b4c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b52:	e9 92 fe ff ff       	jmp    c00119e9 <SysOpen(regs*)+0x92>

c0011b57 <KeSystemCall(regs*, void*)>:
c0011b57:	53                   	push   ebx
c0011b58:	83 ec 08             	sub    esp,0x8
c0011b5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b5f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b62:	83 f8 3b             	cmp    eax,0x3b
c0011b65:	77 16                	ja     c0011b7d <KeSystemCall(regs*, void*)+0x26>
c0011b67:	8b 14 85 e0 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdde20]
c0011b6e:	85 d2                	test   edx,edx
c0011b70:	74 0b                	je     c0011b7d <KeSystemCall(regs*, void*)+0x26>
c0011b72:	83 ec 0c             	sub    esp,0xc
c0011b75:	53                   	push   ebx
c0011b76:	ff d2                	call   edx
c0011b78:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b7b:	eb 0d                	jmp    c0011b8a <KeSystemCall(regs*, void*)+0x33>
c0011b7d:	52                   	push   edx
c0011b7e:	52                   	push   edx
c0011b7f:	50                   	push   eax
c0011b80:	68 2a 0e 02 c0       	push   0xc0020e2a
c0011b85:	e8 14 8e ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0011b8a:	83 c4 10             	add    esp,0x10
c0011b8d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b92:	83 c4 08             	add    esp,0x8
c0011b95:	31 d2                	xor    edx,edx
c0011b97:	5b                   	pop    ebx
c0011b98:	c3                   	ret    
c0011b99:	66 90                	xchg   ax,ax
c0011b9b:	90                   	nop

c0011b9c <KeSwitchEndian16(unsigned short)>:
c0011b9c:	83 ec 04             	sub    esp,0x4
c0011b9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ba3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011ba7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011bab:	c1 f8 08             	sar    eax,0x8
c0011bae:	89 c2                	mov    edx,eax
c0011bb0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011bb4:	c1 e0 08             	shl    eax,0x8
c0011bb7:	09 d0                	or     eax,edx
c0011bb9:	83 c4 04             	add    esp,0x4
c0011bbc:	c3                   	ret    
c0011bbd:	8d 76 00             	lea    esi,[esi+0x0]

c0011bc0 <KeSwitchEndian32(unsigned int)>:
c0011bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc4:	c1 e8 18             	shr    eax,0x18
c0011bc7:	89 c2                	mov    edx,eax
c0011bc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcd:	c1 e0 08             	shl    eax,0x8
c0011bd0:	25 00 00 ff 00       	and    eax,0xff0000
c0011bd5:	09 c2                	or     edx,eax
c0011bd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bdb:	c1 e8 08             	shr    eax,0x8
c0011bde:	25 00 ff 00 00       	and    eax,0xff00
c0011be3:	09 c2                	or     edx,eax
c0011be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be9:	c1 e0 18             	shl    eax,0x18
c0011bec:	09 d0                	or     eax,edx
c0011bee:	c3                   	ret    
c0011bef:	90                   	nop

c0011bf0 <EthernetCRC32(unsigned char*, int)>:
c0011bf0:	83 ec 10             	sub    esp,0x10
c0011bf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bf8:	75 0a                	jne    c0011c04 <EthernetCRC32(unsigned char*, int)+0x14>
c0011bfa:	b8 00 00 00 00       	mov    eax,0x0
c0011bff:	e9 8c 00 00 00       	jmp    c0011c90 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c04:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011c09:	7f 09                	jg     c0011c14 <EthernetCRC32(unsigned char*, int)+0x24>
c0011c0b:	b8 00 00 00 00       	mov    eax,0x0
c0011c10:	eb 7e                	jmp    c0011c90 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c12:	66 90                	xchg   ax,ax
c0011c14:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c28:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c2c:	7d 5a                	jge    c0011c88 <EthernetCRC32(unsigned char*, int)+0x98>
c0011c2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c36:	01 d0                	add    eax,edx
c0011c38:	8a 00                	mov    al,BYTE PTR [eax]
c0011c3a:	0f b6 c0             	movzx  eax,al
c0011c3d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c49:	8d 76 00             	lea    esi,[esi+0x0]
c0011c4c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c51:	7f 2d                	jg     c0011c80 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c57:	83 e0 01             	and    eax,0x1
c0011c5a:	74 10                	je     c0011c6c <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c60:	d1 e8                	shr    eax,1
c0011c62:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c67:	eb 0b                	jmp    c0011c74 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c69:	8d 76 00             	lea    esi,[esi+0x0]
c0011c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c70:	d1 e8                	shr    eax,1
c0011c72:	66 90                	xchg   ax,ax
c0011c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c78:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c7d:	eb cd                	jmp    c0011c4c <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c7f:	90                   	nop
c0011c80:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c85:	eb 9d                	jmp    c0011c24 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c87:	90                   	nop
c0011c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c8c:	f7 d0                	not    eax
c0011c8e:	66 90                	xchg   ax,ax
c0011c90:	83 c4 10             	add    esp,0x10
c0011c93:	c3                   	ret    

c0011c94 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c94:	83 ec 2c             	sub    esp,0x2c
c0011c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c9b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ca4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011caf:	0f b7 c0             	movzx  eax,ax
c0011cb2:	3d 06 08 00 00       	cmp    eax,0x806
c0011cb7:	75 13                	jne    c0011ccc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011cb9:	83 ec 0c             	sub    esp,0xc
c0011cbc:	68 3e 0e 02 c0       	push   0xc0020e3e
c0011cc1:	e8 d8 8c ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0011cc6:	83 c4 10             	add    esp,0x10
c0011cc9:	eb 25                	jmp    c0011cf0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011ccb:	90                   	nop
c0011ccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cd3:	0f b7 c0             	movzx  eax,ax
c0011cd6:	3d 00 08 00 00       	cmp    eax,0x800
c0011cdb:	75 13                	jne    c0011cf0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cdd:	83 ec 0c             	sub    esp,0xc
c0011ce0:	68 54 0e 02 c0       	push   0xc0020e54
c0011ce5:	e8 b4 8c ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0011cea:	83 c4 10             	add    esp,0x10
c0011ced:	8d 76 00             	lea    esi,[esi+0x0]
c0011cf0:	90                   	nop
c0011cf1:	83 c4 2c             	add    esp,0x2c
c0011cf4:	c3                   	ret    

c0011cf5 <CmOpen(char const*)>:
c0011cf5:	57                   	push   edi
c0011cf6:	56                   	push   esi
c0011cf7:	53                   	push   ebx
c0011cf8:	83 ec 1c             	sub    esp,0x1c
c0011cfb:	6a 30                	push   0x30
c0011cfd:	e8 c9 5d ff ff       	call   c0007acb <malloc>
c0011d02:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d09:	89 c3                	mov    ebx,eax
c0011d0b:	e8 bb 5d ff ff       	call   c0007acb <malloc>
c0011d10:	83 c4 0c             	add    esp,0xc
c0011d13:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011d19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d1d:	89 c6                	mov    esi,eax
c0011d1f:	50                   	push   eax
c0011d20:	e8 21 92 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0011d25:	83 c4 0c             	add    esp,0xc
c0011d28:	89 33                	mov    DWORD PTR [ebx],esi
c0011d2a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d2e:	50                   	push   eax
c0011d2f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d33:	50                   	push   eax
c0011d34:	56                   	push   esi
c0011d35:	e8 74 95 ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c0011d3a:	5a                   	pop    edx
c0011d3b:	59                   	pop    ecx
c0011d3c:	6a 01                	push   0x1
c0011d3e:	ff 33                	push   DWORD PTR [ebx]
c0011d40:	e8 bd 92 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0011d45:	5e                   	pop    esi
c0011d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d4a:	e8 7c 5d ff ff       	call   c0007acb <malloc>
c0011d4f:	5a                   	pop    edx
c0011d50:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d54:	89 c7                	mov    edi,eax
c0011d56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d58:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d5a:	56                   	push   esi
c0011d5b:	57                   	push   edi
c0011d5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d64:	50                   	push   eax
c0011d65:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d68:	83 c4 14             	add    esp,0x14
c0011d6b:	ff 33                	push   DWORD PTR [ebx]
c0011d6d:	e8 ee 92 ff ff       	call   c000b060 <File::close()>
c0011d72:	59                   	pop    ecx
c0011d73:	58                   	pop    eax
c0011d74:	6a 13                	push   0x13
c0011d76:	ff 33                	push   DWORD PTR [ebx]
c0011d78:	e8 85 92 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0011d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d81:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d84:	57                   	push   edi
c0011d85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d8d:	50                   	push   eax
c0011d8e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d91:	83 c4 14             	add    esp,0x14
c0011d94:	57                   	push   edi
c0011d95:	e8 41 5d ff ff       	call   c0007adb <free>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011da0:	75 10                	jne    c0011db2 <CmOpen(char const*)+0xbd>
c0011da2:	83 ec 0c             	sub    esp,0xc
c0011da5:	68 69 0e 02 c0       	push   0xc0020e69
c0011daa:	e8 ba ea ff ff       	call   c0010869 <KePanic(char const*)>
c0011daf:	83 c4 10             	add    esp,0x10
c0011db2:	50                   	push   eax
c0011db3:	6a 00                	push   0x0
c0011db5:	6a 00                	push   0x0
c0011db7:	ff 33                	push   DWORD PTR [ebx]
c0011db9:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011dbc:	e8 ff 92 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0011dc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011dc8:	57                   	push   edi
c0011dc9:	6a 00                	push   0x0
c0011dcb:	6a 2b                	push   0x2b
c0011dcd:	50                   	push   eax
c0011dce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dd1:	83 c4 1c             	add    esp,0x1c
c0011dd4:	6a 00                	push   0x0
c0011dd6:	6a 00                	push   0x0
c0011dd8:	ff 33                	push   DWORD PTR [ebx]
c0011dda:	e8 e1 92 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0011ddf:	83 c4 0c             	add    esp,0xc
c0011de2:	6a 08                	push   0x8
c0011de4:	68 7a 0e 02 c0       	push   0xc0020e7a
c0011de9:	57                   	push   edi
c0011dea:	e8 91 e5 fe ff       	call   c0000380 <memcmp>
c0011def:	83 c4 10             	add    esp,0x10
c0011df2:	85 c0                	test   eax,eax
c0011df4:	74 10                	je     c0011e06 <CmOpen(char const*)+0x111>
c0011df6:	83 ec 0c             	sub    esp,0xc
c0011df9:	68 83 0e 02 c0       	push   0xc0020e83
c0011dfe:	e8 66 ea ff ff       	call   c0010869 <KePanic(char const*)>
c0011e03:	83 c4 10             	add    esp,0x10
c0011e06:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	89 d8                	mov    eax,ebx
c0011e0f:	5b                   	pop    ebx
c0011e10:	5e                   	pop    esi
c0011e11:	5f                   	pop    edi
c0011e12:	c3                   	ret    

c0011e13 <CmClose(Reghive_Tag*)>:
c0011e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e17:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011e1b:	74 0b                	je     c0011e28 <CmClose(Reghive_Tag*)+0x15>
c0011e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e23:	e9 38 92 ff ff       	jmp    c000b060 <File::close()>
c0011e28:	c3                   	ret    

c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e29:	53                   	push   ebx
c0011e2a:	83 ec 18             	sub    esp,0x18
c0011e2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e31:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e35:	74 29                	je     c0011e60 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e37:	50                   	push   eax
c0011e38:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e3d:	99                   	cdq    
c0011e3e:	52                   	push   edx
c0011e3f:	50                   	push   eax
c0011e40:	ff 33                	push   DWORD PTR [ebx]
c0011e42:	e8 79 92 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0011e47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e49:	5a                   	pop    edx
c0011e4a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e50:	51                   	push   ecx
c0011e51:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e55:	6a 00                	push   0x0
c0011e57:	6a 2b                	push   0x2b
c0011e59:	50                   	push   eax
c0011e5a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e5d:	83 c4 20             	add    esp,0x20
c0011e60:	83 c4 18             	add    esp,0x18
c0011e63:	5b                   	pop    ebx
c0011e64:	c3                   	ret    

c0011e65 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e65:	55                   	push   ebp
c0011e66:	57                   	push   edi
c0011e67:	56                   	push   esi
c0011e68:	53                   	push   ebx
c0011e69:	31 db                	xor    ebx,ebx
c0011e6b:	83 ec 70             	sub    esp,0x70
c0011e6e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e72:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e79:	50                   	push   eax
c0011e7a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e81:	55                   	push   ebp
c0011e82:	e8 a2 ff ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e87:	83 c4 10             	add    esp,0x10
c0011e8a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e8f:	c1 e0 08             	shl    eax,0x8
c0011e92:	89 c2                	mov    edx,eax
c0011e94:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e99:	09 d0                	or     eax,edx
c0011e9b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011ea0:	c1 e0 08             	shl    eax,0x8
c0011ea3:	09 d0                	or     eax,edx
c0011ea5:	74 25                	je     c0011ecc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011ea7:	52                   	push   edx
c0011ea8:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011eac:	52                   	push   edx
c0011ead:	6b fb 0d             	imul   edi,ebx,0xd
c0011eb0:	50                   	push   eax
c0011eb1:	55                   	push   ebp
c0011eb2:	e8 72 ff ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011eb7:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011ebb:	b9 27 00 00 00       	mov    ecx,0x27
c0011ec0:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011ec7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ec9:	83 c4 10             	add    esp,0x10
c0011ecc:	83 c3 03             	add    ebx,0x3
c0011ecf:	83 fb 15             	cmp    ebx,0x15
c0011ed2:	75 b6                	jne    c0011e8a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011ed4:	83 c4 6c             	add    esp,0x6c
c0011ed7:	5b                   	pop    ebx
c0011ed8:	5e                   	pop    esi
c0011ed9:	5f                   	pop    edi
c0011eda:	5d                   	pop    ebp
c0011edb:	c3                   	ret    

c0011edc <CmEnterDirectory(Reghive_Tag*, int)>:
c0011edc:	83 ec 40             	sub    esp,0x40
c0011edf:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ee3:	50                   	push   eax
c0011ee4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011eec:	e8 38 ff ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ef1:	83 c4 10             	add    esp,0x10
c0011ef4:	83 c8 ff             	or     eax,0xffffffff
c0011ef7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011efc:	75 19                	jne    c0011f17 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011efe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011f03:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011f08:	c1 e0 08             	shl    eax,0x8
c0011f0b:	09 c2                	or     edx,eax
c0011f0d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011f12:	c1 e0 10             	shl    eax,0x10
c0011f15:	09 d0                	or     eax,edx
c0011f17:	83 c4 3c             	add    esp,0x3c
c0011f1a:	c3                   	ret    

c0011f1b <CmGetNext(Reghive_Tag*, int)>:
c0011f1b:	83 ec 40             	sub    esp,0x40
c0011f1e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f22:	50                   	push   eax
c0011f23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f2b:	e8 f9 fe ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f30:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f35:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f3a:	c1 e0 08             	shl    eax,0x8
c0011f3d:	09 c2                	or     edx,eax
c0011f3f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f44:	83 c4 4c             	add    esp,0x4c
c0011f47:	c1 e0 10             	shl    eax,0x10
c0011f4a:	09 d0                	or     eax,edx
c0011f4c:	c3                   	ret    

c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f4d:	53                   	push   ebx
c0011f4e:	83 ec 18             	sub    esp,0x18
c0011f51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f55:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f59:	74 29                	je     c0011f84 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f5b:	50                   	push   eax
c0011f5c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f61:	99                   	cdq    
c0011f62:	52                   	push   edx
c0011f63:	50                   	push   eax
c0011f64:	ff 33                	push   DWORD PTR [ebx]
c0011f66:	e8 55 91 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0011f6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f6d:	5a                   	pop    edx
c0011f6e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f72:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f74:	51                   	push   ecx
c0011f75:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f79:	6a 00                	push   0x0
c0011f7b:	6a 2b                	push   0x2b
c0011f7d:	50                   	push   eax
c0011f7e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f81:	83 c4 20             	add    esp,0x20
c0011f84:	83 c4 18             	add    esp,0x18
c0011f87:	5b                   	pop    ebx
c0011f88:	c3                   	ret    

c0011f89 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f89:	53                   	push   ebx
c0011f8a:	83 ec 3c             	sub    esp,0x3c
c0011f8d:	6a 2b                	push   0x2b
c0011f8f:	6a 00                	push   0x0
c0011f91:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f95:	53                   	push   ebx
c0011f96:	e8 55 e5 fe ff       	call   c00004f0 <memset>
c0011f9b:	83 c4 0c             	add    esp,0xc
c0011f9e:	53                   	push   ebx
c0011f9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fa3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fa7:	e8 a1 ff ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fac:	83 c4 48             	add    esp,0x48
c0011faf:	5b                   	pop    ebx
c0011fb0:	c3                   	ret    

c0011fb1 <CmUpdateHeader(Reghive_Tag*)>:
c0011fb1:	83 ec 0c             	sub    esp,0xc
c0011fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fb8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011fbc:	74 10                	je     c0011fce <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011fbe:	52                   	push   edx
c0011fbf:	8d 50 05             	lea    edx,[eax+0x5]
c0011fc2:	52                   	push   edx
c0011fc3:	6a 00                	push   0x0
c0011fc5:	50                   	push   eax
c0011fc6:	e8 82 ff ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	83 c4 0c             	add    esp,0xc
c0011fd1:	c3                   	ret    

c0011fd2 <CmExpand(Reghive_Tag*, int)>:
c0011fd2:	55                   	push   ebp
c0011fd3:	57                   	push   edi
c0011fd4:	83 cf ff             	or     edi,0xffffffff
c0011fd7:	56                   	push   esi
c0011fd8:	53                   	push   ebx
c0011fd9:	83 ec 3c             	sub    esp,0x3c
c0011fdc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011fe0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011fe4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fe8:	74 59                	je     c0012043 <CmExpand(Reghive_Tag*, int)+0x71>
c0011fea:	50                   	push   eax
c0011feb:	31 d2                	xor    edx,edx
c0011fed:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011ff1:	31 ff                	xor    edi,edi
c0011ff3:	52                   	push   edx
c0011ff4:	50                   	push   eax
c0011ff5:	ff 33                	push   DWORD PTR [ebx]
c0011ff7:	e8 c4 90 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0011ffc:	83 c4 0c             	add    esp,0xc
c0011fff:	6a 2b                	push   0x2b
c0012001:	6a 00                	push   0x0
c0012003:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012007:	55                   	push   ebp
c0012008:	e8 e3 e4 fe ff       	call   c00004f0 <memset>
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	39 f7                	cmp    edi,esi
c0012012:	7d 1b                	jge    c001202f <CmExpand(Reghive_Tag*, int)+0x5d>
c0012014:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	47                   	inc    edi
c001201a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001201e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012020:	51                   	push   ecx
c0012021:	55                   	push   ebp
c0012022:	6a 00                	push   0x0
c0012024:	6a 2b                	push   0x2b
c0012026:	50                   	push   eax
c0012027:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001202a:	83 c4 20             	add    esp,0x20
c001202d:	eb e1                	jmp    c0012010 <CmExpand(Reghive_Tag*, int)+0x3e>
c001202f:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012032:	83 ec 0c             	sub    esp,0xc
c0012035:	01 fe                	add    esi,edi
c0012037:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001203a:	53                   	push   ebx
c001203b:	e8 71 ff ff ff       	call   c0011fb1 <CmUpdateHeader(Reghive_Tag*)>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 c4 3c             	add    esp,0x3c
c0012046:	89 f8                	mov    eax,edi
c0012048:	5b                   	pop    ebx
c0012049:	5e                   	pop    esi
c001204a:	5f                   	pop    edi
c001204b:	5d                   	pop    ebp
c001204c:	c3                   	ret    

c001204d <CmFindUnusedExtent(Reghive_Tag*)>:
c001204d:	55                   	push   ebp
c001204e:	57                   	push   edi
c001204f:	56                   	push   esi
c0012050:	53                   	push   ebx
c0012051:	83 cb ff             	or     ebx,0xffffffff
c0012054:	83 ec 1c             	sub    esp,0x1c
c0012057:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001205b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001205f:	74 68                	je     c00120c9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012061:	51                   	push   ecx
c0012062:	be 2b 00 00 00       	mov    esi,0x2b
c0012067:	6a 00                	push   0x0
c0012069:	31 ff                	xor    edi,edi
c001206b:	6a 00                	push   0x0
c001206d:	31 db                	xor    ebx,ebx
c001206f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012072:	e8 49 90 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001207d:	76 3b                	jbe    c00120ba <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001207f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012082:	83 ec 0c             	sub    esp,0xc
c0012085:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012089:	8b 10                	mov    edx,DWORD PTR [eax]
c001208b:	51                   	push   ecx
c001208c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012090:	51                   	push   ecx
c0012091:	6a 00                	push   0x0
c0012093:	6a 01                	push   0x1
c0012095:	50                   	push   eax
c0012096:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012099:	83 c4 20             	add    esp,0x20
c001209c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120a1:	74 26                	je     c00120c9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00120a3:	52                   	push   edx
c00120a4:	43                   	inc    ebx
c00120a5:	57                   	push   edi
c00120a6:	56                   	push   esi
c00120a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00120aa:	e8 11 90 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c00120af:	83 c6 2b             	add    esi,0x2b
c00120b2:	83 d7 00             	adc    edi,0x0
c00120b5:	83 c4 10             	add    esp,0x10
c00120b8:	eb c0                	jmp    c001207a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00120ba:	50                   	push   eax
c00120bb:	50                   	push   eax
c00120bc:	6a 40                	push   0x40
c00120be:	55                   	push   ebp
c00120bf:	e8 0e ff ff ff       	call   c0011fd2 <CmExpand(Reghive_Tag*, int)>
c00120c4:	83 c4 10             	add    esp,0x10
c00120c7:	89 c3                	mov    ebx,eax
c00120c9:	83 c4 1c             	add    esp,0x1c
c00120cc:	89 d8                	mov    eax,ebx
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	5d                   	pop    ebp
c00120d2:	c3                   	ret    

c00120d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120d3:	55                   	push   ebp
c00120d4:	57                   	push   edi
c00120d5:	56                   	push   esi
c00120d6:	53                   	push   ebx
c00120d7:	81 ec 88 00 00 00    	sub    esp,0x88
c00120dd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120e4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120eb:	e8 5d ff ff ff       	call   c001204d <CmFindUnusedExtent(Reghive_Tag*)>
c00120f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120f4:	83 c4 0c             	add    esp,0xc
c00120f7:	6a 2b                	push   0x2b
c00120f9:	6a 00                	push   0x0
c00120fb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120ff:	55                   	push   ebp
c0012100:	e8 eb e3 fe ff       	call   c00004f0 <memset>
c0012105:	83 c4 10             	add    esp,0x10
c0012108:	85 db                	test   ebx,ebx
c001210a:	74 12                	je     c001211e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c001210c:	51                   	push   ecx
c001210d:	55                   	push   ebp
c001210e:	53                   	push   ebx
c001210f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012116:	e8 0e fd ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012122:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012129:	b9 2b 00 00 00       	mov    ecx,0x2b
c001212e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012130:	85 db                	test   ebx,ebx
c0012132:	74 49                	je     c001217d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012134:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012139:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001213e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012142:	c1 e0 08             	shl    eax,0x8
c0012145:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001214b:	09 c8                	or     eax,ecx
c001214d:	74 11                	je     c0012160 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001214f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012153:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012157:	c1 e8 10             	shr    eax,0x10
c001215a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001215e:	eb 0f                	jmp    c001216f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012160:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012165:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001216a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001216f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012173:	c1 ea 08             	shr    edx,0x8
c0012176:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001217b:	eb 0f                	jmp    c001218c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001217d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012182:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012187:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001218c:	52                   	push   edx
c001218d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012191:	50                   	push   eax
c0012192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012196:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001219d:	e8 ab fd ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00121a2:	83 c4 10             	add    esp,0x10
c00121a5:	85 db                	test   ebx,ebx
c00121a7:	74 12                	je     c00121bb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00121a9:	50                   	push   eax
c00121aa:	55                   	push   ebp
c00121ab:	53                   	push   ebx
c00121ac:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121b3:	e8 95 fd ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00121b8:	83 c4 10             	add    esp,0x10
c00121bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121bf:	83 c4 7c             	add    esp,0x7c
c00121c2:	5b                   	pop    ebx
c00121c3:	5e                   	pop    esi
c00121c4:	5f                   	pop    edi
c00121c5:	5d                   	pop    ebp
c00121c6:	c3                   	ret    

c00121c7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00121c7:	55                   	push   ebp
c00121c8:	57                   	push   edi
c00121c9:	56                   	push   esi
c00121ca:	53                   	push   ebx
c00121cb:	bb 27 00 00 00       	mov    ebx,0x27
c00121d0:	81 ec 88 00 00 00    	sub    esp,0x88
c00121d6:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00121dd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121e4:	e8 97 e3 fe ff       	call   c0000580 <strlen>
c00121e9:	8d 48 26             	lea    ecx,[eax+0x26]
c00121ec:	89 c8                	mov    eax,ecx
c00121ee:	99                   	cdq    
c00121ef:	f7 fb                	idiv   ebx
c00121f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121fe:	7e 10                	jle    c0012210 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012200:	83 ec 0c             	sub    esp,0xc
c0012203:	68 94 0e 02 c0       	push   0xc0020e94
c0012208:	e8 5c e6 ff ff       	call   c0010869 <KePanic(char const*)>
c001220d:	83 c4 10             	add    esp,0x10
c0012210:	53                   	push   ebx
c0012211:	31 ed                	xor    ebp,ebp
c0012213:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012217:	53                   	push   ebx
c0012218:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001221f:	57                   	push   edi
c0012220:	e8 04 fc ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c001222c:	89 f0                	mov    eax,esi
c001222e:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012232:	c1 e0 08             	shl    eax,0x8
c0012235:	09 c6                	or     esi,eax
c0012237:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001223b:	c1 e6 08             	shl    esi,0x8
c001223e:	09 c6                	or     esi,eax
c0012240:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012244:	7e 72                	jle    c00122b8 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012246:	85 f6                	test   esi,esi
c0012248:	75 25                	jne    c001226f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001224a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001224f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012253:	50                   	push   eax
c0012254:	6a 00                	push   0x0
c0012256:	6a 00                	push   0x0
c0012258:	57                   	push   edi
c0012259:	e8 75 fe ff ff       	call   c00120d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001225e:	83 c4 10             	add    esp,0x10
c0012261:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012264:	89 c6                	mov    esi,eax
c0012266:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012269:	c1 f8 10             	sar    eax,0x10
c001226c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001226f:	51                   	push   ecx
c0012270:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012274:	52                   	push   edx
c0012275:	56                   	push   esi
c0012276:	57                   	push   edi
c0012277:	e8 ad fb ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001227c:	83 c4 0c             	add    esp,0xc
c001227f:	6a 27                	push   0x27
c0012281:	6a 00                	push   0x0
c0012283:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012287:	51                   	push   ecx
c0012288:	e8 63 e2 fe ff       	call   c00004f0 <memset>
c001228d:	6b c5 27             	imul   eax,ebp,0x27
c0012290:	83 c4 0c             	add    esp,0xc
c0012293:	6a 27                	push   0x27
c0012295:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001229c:	50                   	push   eax
c001229d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00122a1:	51                   	push   ecx
c00122a2:	e8 e9 e3 fe ff       	call   c0000690 <strncpy>
c00122a7:	83 c4 0c             	add    esp,0xc
c00122aa:	8d 54 24 49          	lea    edx,[esp+0x49]
c00122ae:	52                   	push   edx
c00122af:	56                   	push   esi
c00122b0:	57                   	push   edi
c00122b1:	e8 97 fc ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122b6:	eb 19                	jmp    c00122d1 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00122b8:	85 f6                	test   esi,esi
c00122ba:	74 18                	je     c00122d4 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00122bc:	52                   	push   edx
c00122bd:	52                   	push   edx
c00122be:	56                   	push   esi
c00122bf:	57                   	push   edi
c00122c0:	e8 c4 fc ff ff       	call   c0011f89 <CmFreeExtent(Reghive_Tag*, int)>
c00122c5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00122c9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122cd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	45                   	inc    ebp
c00122d5:	83 c3 03             	add    ebx,0x3
c00122d8:	83 fd 07             	cmp    ebp,0x7
c00122db:	0f 85 47 ff ff ff    	jne    c0012228 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122e1:	50                   	push   eax
c00122e2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122e6:	50                   	push   eax
c00122e7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122ee:	57                   	push   edi
c00122ef:	e8 59 fc ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122f4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122fa:	5b                   	pop    ebx
c00122fb:	5e                   	pop    esi
c00122fc:	5f                   	pop    edi
c00122fd:	5d                   	pop    ebp
c00122fe:	c3                   	ret    

c00122ff <CmGetMatch(char*, char*, bool, bool*)>:
c00122ff:	56                   	push   esi
c0012300:	53                   	push   ebx
c0012301:	50                   	push   eax
c0012302:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012307:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001230b:	74 25                	je     c0012332 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c001230d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012310:	31 db                	xor    ebx,ebx
c0012312:	50                   	push   eax
c0012313:	50                   	push   eax
c0012314:	8d 04 9d e0 22 02 c0 	lea    eax,[ebx*4-0x3ffddd20]
c001231b:	50                   	push   eax
c001231c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012320:	e8 5b e4 fe ff       	call   c0000780 <strcmp>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	85 c0                	test   eax,eax
c001232a:	74 2e                	je     c001235a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001232c:	43                   	inc    ebx
c001232d:	83 fb 3f             	cmp    ebx,0x3f
c0012330:	75 e0                	jne    c0012312 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012332:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012335:	31 db                	xor    ebx,ebx
c0012337:	51                   	push   ecx
c0012338:	51                   	push   ecx
c0012339:	8d 04 9d e0 22 02 c0 	lea    eax,[ebx*4-0x3ffddd20]
c0012340:	50                   	push   eax
c0012341:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012345:	e8 36 e4 fe ff       	call   c0000780 <strcmp>
c001234a:	83 c4 10             	add    esp,0x10
c001234d:	85 c0                	test   eax,eax
c001234f:	74 09                	je     c001235a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012351:	43                   	inc    ebx
c0012352:	83 fb 3f             	cmp    ebx,0x3f
c0012355:	75 e0                	jne    c0012337 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012357:	83 cb ff             	or     ebx,0xffffffff
c001235a:	5a                   	pop    edx
c001235b:	89 d8                	mov    eax,ebx
c001235d:	5b                   	pop    ebx
c001235e:	5e                   	pop    esi
c001235f:	c3                   	ret    

c0012360 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012360:	55                   	push   ebp
c0012361:	31 c0                	xor    eax,eax
c0012363:	57                   	push   edi
c0012364:	56                   	push   esi
c0012365:	53                   	push   ebx
c0012366:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001236a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001236e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012372:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012376:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012378:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001237b:	83 fd 1f             	cmp    ebp,0x1f
c001237e:	7f 0b                	jg     c001238b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012380:	0f b6 c2             	movzx  eax,dl
c0012383:	d3 e0                	shl    eax,cl
c0012385:	09 07                	or     DWORD PTR [edi],eax
c0012387:	b0 01                	mov    al,0x1
c0012389:	01 33                	add    DWORD PTR [ebx],esi
c001238b:	5b                   	pop    ebx
c001238c:	5e                   	pop    esi
c001238d:	5f                   	pop    edi
c001238e:	5d                   	pop    ebp
c001238f:	c3                   	ret    

c0012390 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012390:	57                   	push   edi
c0012391:	56                   	push   esi
c0012392:	53                   	push   ebx
c0012393:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012397:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001239b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001239f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00123a3:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00123a5:	7c 17                	jl     c00123be <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00123a7:	8b 17                	mov    edx,DWORD PTR [edi]
c00123a9:	b8 01 00 00 00       	mov    eax,0x1
c00123ae:	d3 e0                	shl    eax,cl
c00123b0:	48                   	dec    eax
c00123b1:	21 d0                	and    eax,edx
c00123b3:	d3 ea                	shr    edx,cl
c00123b5:	89 17                	mov    DWORD PTR [edi],edx
c00123b7:	29 0b                	sub    DWORD PTR [ebx],ecx
c00123b9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123bc:	eb 05                	jmp    c00123c3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00123be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123c1:	31 c0                	xor    eax,eax
c00123c3:	5b                   	pop    ebx
c00123c4:	5e                   	pop    esi
c00123c5:	5f                   	pop    edi
c00123c6:	c3                   	ret    

c00123c7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00123c7:	83 ec 40             	sub    esp,0x40
c00123ca:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123ce:	50                   	push   eax
c00123cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123d7:	e8 4d fa ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123dc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123e0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123e4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123e8:	89 10                	mov    DWORD PTR [eax],edx
c00123ea:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123ed:	83 c4 4c             	add    esp,0x4c
c00123f0:	c3                   	ret    

c00123f1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123f1:	55                   	push   ebp
c00123f2:	57                   	push   edi
c00123f3:	56                   	push   esi
c00123f4:	53                   	push   ebx
c00123f5:	83 ec 40             	sub    esp,0x40
c00123f8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123fc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012400:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012404:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012408:	53                   	push   ebx
c0012409:	56                   	push   esi
c001240a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001240e:	e8 16 fa ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012413:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012417:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001241b:	83 c4 0c             	add    esp,0xc
c001241e:	53                   	push   ebx
c001241f:	56                   	push   esi
c0012420:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012424:	e8 24 fb ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012429:	83 c4 4c             	add    esp,0x4c
c001242c:	5b                   	pop    ebx
c001242d:	5e                   	pop    esi
c001242e:	5f                   	pop    edi
c001242f:	5d                   	pop    ebp
c0012430:	c3                   	ret    

c0012431 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012431:	55                   	push   ebp
c0012432:	57                   	push   edi
c0012433:	56                   	push   esi
c0012434:	31 f6                	xor    esi,esi
c0012436:	53                   	push   ebx
c0012437:	31 db                	xor    ebx,ebx
c0012439:	83 ec 40             	sub    esp,0x40
c001243c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012444:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001244c:	6a 12                	push   0x12
c001244e:	68 ee 00 00 00       	push   0xee
c0012453:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012457:	e8 94 e0 fe ff       	call   c00004f0 <memset>
c001245c:	83 c4 10             	add    esp,0x10
c001245f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012463:	6a 08                	push   0x8
c0012465:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012469:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001246d:	50                   	push   eax
c001246e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012472:	55                   	push   ebp
c0012473:	57                   	push   edi
c0012474:	e8 e7 fe ff ff       	call   c0012360 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012479:	83 c4 10             	add    esp,0x10
c001247c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012480:	50                   	push   eax
c0012481:	6a 06                	push   0x6
c0012483:	55                   	push   ebp
c0012484:	57                   	push   edi
c0012485:	e8 06 ff ff ff       	call   c0012390 <CmGetShift(unsigned int*, int*, int, bool*)>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012492:	74 07                	je     c001249b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012494:	46                   	inc    esi
c0012495:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012499:	eb e1                	jmp    c001247c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001249b:	43                   	inc    ebx
c001249c:	83 fb 12             	cmp    ebx,0x12
c001249f:	75 c2                	jne    c0012463 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00124a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00124a5:	31 f6                	xor    esi,esi
c00124a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00124aa:	50                   	push   eax
c00124ab:	50                   	push   eax
c00124ac:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00124b1:	46                   	inc    esi
c00124b2:	8d 04 85 e0 22 02 c0 	lea    eax,[eax*4-0x3ffddd20]
c00124b9:	50                   	push   eax
c00124ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124be:	e8 ad e3 fe ff       	call   c0000870 <strcat>
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	83 fe 18             	cmp    esi,0x18
c00124c9:	75 df                	jne    c00124aa <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00124cb:	83 c4 3c             	add    esp,0x3c
c00124ce:	31 c0                	xor    eax,eax
c00124d0:	5b                   	pop    ebx
c00124d1:	5e                   	pop    esi
c00124d2:	5f                   	pop    edi
c00124d3:	5d                   	pop    ebp
c00124d4:	c3                   	ret    

c00124d5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124d5:	83 ec 40             	sub    esp,0x40
c00124d8:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124dc:	50                   	push   eax
c00124dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124e5:	e8 3f f9 ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124ea:	58                   	pop    eax
c00124eb:	5a                   	pop    edx
c00124ec:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124f0:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124f4:	50                   	push   eax
c00124f5:	e8 37 ff ff ff       	call   c0012431 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124fa:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124ff:	83 c4 4c             	add    esp,0x4c
c0012502:	c3                   	ret    

c0012503 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012503:	55                   	push   ebp
c0012504:	57                   	push   edi
c0012505:	56                   	push   esi
c0012506:	53                   	push   ebx
c0012507:	31 db                	xor    ebx,ebx
c0012509:	83 ec 70             	sub    esp,0x70
c001250c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012513:	6a 30                	push   0x30
c0012515:	6a 00                	push   0x0
c0012517:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001251b:	56                   	push   esi
c001251c:	e8 cf df fe ff       	call   c00004f0 <memset>
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	83 ec 0c             	sub    esp,0xc
c0012527:	57                   	push   edi
c0012528:	e8 53 e0 fe ff       	call   c0000580 <strlen>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	39 d8                	cmp    eax,ebx
c0012532:	76 16                	jbe    c001254a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012534:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012538:	83 ec 0c             	sub    esp,0xc
c001253b:	50                   	push   eax
c001253c:	e8 1f e4 fe ff       	call   c0000960 <toupper>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012547:	43                   	inc    ebx
c0012548:	eb da                	jmp    c0012524 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001254a:	52                   	push   edx
c001254b:	31 db                	xor    ebx,ebx
c001254d:	6a 18                	push   0x18
c001254f:	31 ff                	xor    edi,edi
c0012551:	6a 3f                	push   0x3f
c0012553:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012557:	50                   	push   eax
c0012558:	e8 93 df fe ff       	call   c00004f0 <memset>
c001255d:	83 c4 10             	add    esp,0x10
c0012560:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012564:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012568:	84 c0                	test   al,al
c001256a:	0f 84 af 00 00 00    	je     c001261f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012570:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012574:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012577:	83 ec 0c             	sub    esp,0xc
c001257a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001257f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012583:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012587:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001258c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012590:	56                   	push   esi
c0012591:	e8 ea df fe ff       	call   c0000580 <strlen>
c0012596:	83 c4 10             	add    esp,0x10
c0012599:	85 c0                	test   eax,eax
c001259b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001259f:	74 0b                	je     c00125ac <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00125a1:	50                   	push   eax
c00125a2:	6a 01                	push   0x1
c00125a4:	56                   	push   esi
c00125a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00125a9:	50                   	push   eax
c00125aa:	eb 0a                	jmp    c00125b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00125ac:	50                   	push   eax
c00125ad:	6a 00                	push   0x0
c00125af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00125b3:	50                   	push   eax
c00125b4:	6a 00                	push   0x0
c00125b6:	e8 44 fd ff ff       	call   c00122ff <CmGetMatch(char*, char*, bool, bool*)>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	83 f8 ff             	cmp    eax,0xffffffff
c00125c1:	75 1a                	jne    c00125dd <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00125c3:	83 ec 0c             	sub    esp,0xc
c00125c6:	68 a9 0e 02 c0       	push   0xc0020ea9
c00125cb:	e8 99 e2 ff ff       	call   c0010869 <KePanic(char const*)>
c00125d0:	83 c4 10             	add    esp,0x10
c00125d3:	b8 02 00 00 00       	mov    eax,0x2
c00125d8:	e9 bb 00 00 00       	jmp    c0012698 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125dd:	83 ff 18             	cmp    edi,0x18
c00125e0:	75 1a                	jne    c00125fc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125e2:	83 ec 0c             	sub    esp,0xc
c00125e5:	68 be 0e 02 c0       	push   0xc0020ebe
c00125ea:	e8 7a e2 ff ff       	call   c0010869 <KePanic(char const*)>
c00125ef:	83 c4 10             	add    esp,0x10
c00125f2:	b8 01 00 00 00       	mov    eax,0x1
c00125f7:	e9 9c 00 00 00       	jmp    c0012698 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125fc:	47                   	inc    edi
c00125fd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012602:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012606:	0f 45 dd             	cmovne ebx,ebp
c0012609:	83 ec 0c             	sub    esp,0xc
c001260c:	56                   	push   esi
c001260d:	e8 6e df fe ff       	call   c0000580 <strlen>
c0012612:	83 c4 10             	add    esp,0x10
c0012615:	85 c0                	test   eax,eax
c0012617:	74 06                	je     c001261f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012619:	43                   	inc    ebx
c001261a:	e9 41 ff ff ff       	jmp    c0012560 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001261f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012627:	31 db                	xor    ebx,ebx
c0012629:	31 ff                	xor    edi,edi
c001262b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012633:	50                   	push   eax
c0012634:	6a 12                	push   0x12
c0012636:	68 ee 00 00 00       	push   0xee
c001263b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012642:	e8 a9 de fe ff       	call   c00004f0 <memset>
c0012647:	83 c4 10             	add    esp,0x10
c001264a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001264e:	83 fb 17             	cmp    ebx,0x17
c0012651:	7e 26                	jle    c0012679 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012653:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012657:	50                   	push   eax
c0012658:	6a 08                	push   0x8
c001265a:	55                   	push   ebp
c001265b:	56                   	push   esi
c001265c:	e8 2f fd ff ff       	call   c0012390 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012669:	74 26                	je     c0012691 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001266b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012672:	4b                   	dec    ebx
c0012673:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012676:	47                   	inc    edi
c0012677:	eb 1c                	jmp    c0012695 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012679:	6a 06                	push   0x6
c001267b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012680:	50                   	push   eax
c0012681:	55                   	push   ebp
c0012682:	56                   	push   esi
c0012683:	e8 d8 fc ff ff       	call   c0012360 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	84 c0                	test   al,al
c001268d:	75 06                	jne    c0012695 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001268f:	eb c2                	jmp    c0012653 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012691:	31 c0                	xor    eax,eax
c0012693:	eb 03                	jmp    c0012698 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012695:	43                   	inc    ebx
c0012696:	eb b2                	jmp    c001264a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012698:	83 c4 6c             	add    esp,0x6c
c001269b:	5b                   	pop    ebx
c001269c:	5e                   	pop    esi
c001269d:	5f                   	pop    edi
c001269e:	5d                   	pop    ebp
c001269f:	c3                   	ret    

c00126a0 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00126a0:	53                   	push   ebx
c00126a1:	83 ec 3c             	sub    esp,0x3c
c00126a4:	6a 2b                	push   0x2b
c00126a6:	6a 00                	push   0x0
c00126a8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00126ac:	53                   	push   ebx
c00126ad:	e8 3e de fe ff       	call   c00004f0 <memset>
c00126b2:	58                   	pop    eax
c00126b3:	5a                   	pop    edx
c00126b4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00126b8:	50                   	push   eax
c00126b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126bd:	e8 41 fe ff ff       	call   c0012503 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126c2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00126c7:	83 c4 0c             	add    esp,0xc
c00126ca:	6a 15                	push   0x15
c00126cc:	6a 00                	push   0x0
c00126ce:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126d2:	50                   	push   eax
c00126d3:	e8 18 de fe ff       	call   c00004f0 <memset>
c00126d8:	53                   	push   ebx
c00126d9:	6a 00                	push   0x0
c00126db:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126df:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126e3:	e8 eb f9 ff ff       	call   c00120d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126e8:	83 c4 58             	add    esp,0x58
c00126eb:	5b                   	pop    ebx
c00126ec:	c3                   	ret    

c00126ed <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126ed:	56                   	push   esi
c00126ee:	53                   	push   ebx
c00126ef:	83 ec 48             	sub    esp,0x48
c00126f2:	6a 12                	push   0x12
c00126f4:	68 ff 00 00 00       	push   0xff
c00126f9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126fd:	56                   	push   esi
c00126fe:	e8 ed dd fe ff       	call   c00004f0 <memset>
c0012703:	5a                   	pop    edx
c0012704:	59                   	pop    ecx
c0012705:	56                   	push   esi
c0012706:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001270a:	e8 f4 fd ff ff       	call   c0012503 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012716:	85 db                	test   ebx,ebx
c0012718:	74 42                	je     c001275c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001271a:	50                   	push   eax
c001271b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001271f:	50                   	push   eax
c0012720:	53                   	push   ebx
c0012721:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012725:	e8 ff f6 ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001272a:	83 c4 0c             	add    esp,0xc
c001272d:	6a 12                	push   0x12
c001272f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012733:	50                   	push   eax
c0012734:	56                   	push   esi
c0012735:	e8 46 dc fe ff       	call   c0000380 <memcmp>
c001273a:	83 c4 10             	add    esp,0x10
c001273d:	85 c0                	test   eax,eax
c001273f:	74 1e                	je     c001275f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012741:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012746:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001274b:	c1 e3 08             	shl    ebx,0x8
c001274e:	09 d8                	or     eax,ebx
c0012750:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012755:	c1 e3 10             	shl    ebx,0x10
c0012758:	09 c3                	or     ebx,eax
c001275a:	eb ba                	jmp    c0012716 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001275c:	83 cb ff             	or     ebx,0xffffffff
c001275f:	83 c4 44             	add    esp,0x44
c0012762:	89 d8                	mov    eax,ebx
c0012764:	5b                   	pop    ebx
c0012765:	5e                   	pop    esi
c0012766:	c3                   	ret    

c0012767 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012767:	57                   	push   edi
c0012768:	56                   	push   esi
c0012769:	53                   	push   ebx
c001276a:	83 ec 34             	sub    esp,0x34
c001276d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012771:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012775:	6a 2b                	push   0x2b
c0012777:	6a 00                	push   0x0
c0012779:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001277d:	53                   	push   ebx
c001277e:	e8 6d dd fe ff       	call   c00004f0 <memset>
c0012783:	58                   	pop    eax
c0012784:	5a                   	pop    edx
c0012785:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012789:	50                   	push   eax
c001278a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001278e:	e8 70 fd ff ff       	call   c0012503 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012793:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012797:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001279b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001279f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00127a3:	53                   	push   ebx
c00127a4:	6a 00                	push   0x0
c00127a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127ae:	e8 20 f9 ff ff       	call   c00120d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127b3:	83 c4 50             	add    esp,0x50
c00127b6:	5b                   	pop    ebx
c00127b7:	5e                   	pop    esi
c00127b8:	5f                   	pop    edi
c00127b9:	c3                   	ret    

c00127ba <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00127ba:	55                   	push   ebp
c00127bb:	57                   	push   edi
c00127bc:	56                   	push   esi
c00127bd:	53                   	push   ebx
c00127be:	83 ec 40             	sub    esp,0x40
c00127c1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00127c5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127c9:	6a 2b                	push   0x2b
c00127cb:	6a 00                	push   0x0
c00127cd:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127d1:	56                   	push   esi
c00127d2:	e8 19 dd fe ff       	call   c00004f0 <memset>
c00127d7:	5f                   	pop    edi
c00127d8:	89 ef                	mov    edi,ebp
c00127da:	58                   	pop    eax
c00127db:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127df:	50                   	push   eax
c00127e0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127e4:	e8 1a fd ff ff       	call   c0012503 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127e9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127ee:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127f3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127f8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127fd:	83 c4 10             	add    esp,0x10
c0012800:	85 ed                	test   ebp,ebp
c0012802:	74 14                	je     c0012818 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012804:	51                   	push   ecx
c0012805:	51                   	push   ecx
c0012806:	57                   	push   edi
c0012807:	53                   	push   ebx
c0012808:	e8 0e f7 ff ff       	call   c0011f1b <CmGetNext(Reghive_Tag*, int)>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	85 c0                	test   eax,eax
c0012812:	74 04                	je     c0012818 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012814:	89 c7                	mov    edi,eax
c0012816:	eb e8                	jmp    c0012800 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012818:	56                   	push   esi
c0012819:	6a 00                	push   0x0
c001281b:	57                   	push   edi
c001281c:	53                   	push   ebx
c001281d:	e8 b1 f8 ff ff       	call   c00120d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012822:	83 c4 0c             	add    esp,0xc
c0012825:	56                   	push   esi
c0012826:	50                   	push   eax
c0012827:	89 c7                	mov    edi,eax
c0012829:	53                   	push   ebx
c001282a:	e8 fa f5 ff ff       	call   c0011e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001282f:	58                   	pop    eax
c0012830:	5a                   	pop    edx
c0012831:	6a 6c                	push   0x6c
c0012833:	6a 00                	push   0x0
c0012835:	6a 00                	push   0x0
c0012837:	68 cf 0e 02 c0       	push   0xc0020ecf
c001283c:	57                   	push   edi
c001283d:	53                   	push   ebx
c001283e:	e8 24 ff ff ff       	call   c0012767 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012843:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012847:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001284b:	c1 e8 10             	shr    eax,0x10
c001284e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012852:	83 c4 1c             	add    esp,0x1c
c0012855:	56                   	push   esi
c0012856:	57                   	push   edi
c0012857:	53                   	push   ebx
c0012858:	e8 f0 f6 ff ff       	call   c0011f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001285d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012862:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012867:	c1 e0 08             	shl    eax,0x8
c001286a:	09 c2                	or     edx,eax
c001286c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012871:	83 c4 4c             	add    esp,0x4c
c0012874:	5b                   	pop    ebx
c0012875:	5e                   	pop    esi
c0012876:	c1 e0 10             	shl    eax,0x10
c0012879:	09 d0                	or     eax,edx
c001287b:	5f                   	pop    edi
c001287c:	5d                   	pop    ebp
c001287d:	c3                   	ret    

c001287e <zStrtok(char*, char const*)>:
c001287e:	55                   	push   ebp
c001287f:	57                   	push   edi
c0012880:	56                   	push   esi
c0012881:	53                   	push   ebx
c0012882:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012886:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001288a:	85 db                	test   ebx,ebx
c001288c:	74 2f                	je     c00128bd <zStrtok(char*, char const*)+0x3f>
c001288e:	85 c0                	test   eax,eax
c0012890:	75 09                	jne    c001289b <zStrtok(char*, char const*)+0x1d>
c0012892:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012897:	85 c0                	test   eax,eax
c0012899:	74 50                	je     c00128eb <zStrtok(char*, char const*)+0x6d>
c001289b:	31 c9                	xor    ecx,ecx
c001289d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00128a1:	74 03                	je     c00128a6 <zStrtok(char*, char const*)+0x28>
c00128a3:	41                   	inc    ecx
c00128a4:	eb f7                	jmp    c001289d <zStrtok(char*, char const*)+0x1f>
c00128a6:	31 d2                	xor    edx,edx
c00128a8:	39 ca                	cmp    edx,ecx
c00128aa:	74 15                	je     c00128c1 <zStrtok(char*, char const*)+0x43>
c00128ac:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00128b0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00128b3:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00128b6:	39 ee                	cmp    esi,ebp
c00128b8:	74 13                	je     c00128cd <zStrtok(char*, char const*)+0x4f>
c00128ba:	42                   	inc    edx
c00128bb:	eb eb                	jmp    c00128a8 <zStrtok(char*, char const*)+0x2a>
c00128bd:	31 c0                	xor    eax,eax
c00128bf:	eb 2a                	jmp    c00128eb <zStrtok(char*, char const*)+0x6d>
c00128c1:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c00128cb:	eb 1e                	jmp    c00128eb <zStrtok(char*, char const*)+0x6d>
c00128cd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128d0:	39 ce                	cmp    esi,ecx
c00128d2:	75 0a                	jne    c00128de <zStrtok(char*, char const*)+0x60>
c00128d4:	40                   	inc    eax
c00128d5:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128da:	89 d8                	mov    eax,ebx
c00128dc:	eb 0d                	jmp    c00128eb <zStrtok(char*, char const*)+0x6d>
c00128de:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128e1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128e5:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128eb:	5b                   	pop    ebx
c00128ec:	5e                   	pop    esi
c00128ed:	5f                   	pop    edi
c00128ee:	5d                   	pop    ebp
c00128ef:	c3                   	ret    

c00128f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128f0:	57                   	push   edi
c00128f1:	56                   	push   esi
c00128f2:	53                   	push   ebx
c00128f3:	81 ec 08 01 00 00    	sub    esp,0x108
c00128f9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012900:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012907:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001290b:	53                   	push   ebx
c001290c:	e8 3f dd fe ff       	call   c0000650 <strcpy>
c0012911:	59                   	pop    ecx
c0012912:	5e                   	pop    esi
c0012913:	68 33 12 02 c0       	push   0xc0021233
c0012918:	53                   	push   ebx
c0012919:	bb 01 00 00 00       	mov    ebx,0x1
c001291e:	e8 5b ff ff ff       	call   c001287e <zStrtok(char*, char const*)>
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	85 c0                	test   eax,eax
c0012928:	74 3b                	je     c0012965 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001292a:	52                   	push   edx
c001292b:	50                   	push   eax
c001292c:	6a 01                	push   0x1
c001292e:	57                   	push   edi
c001292f:	e8 b9 fd ff ff       	call   c00126ed <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012934:	59                   	pop    ecx
c0012935:	5e                   	pop    esi
c0012936:	89 c3                	mov    ebx,eax
c0012938:	68 33 12 02 c0       	push   0xc0021233
c001293d:	6a 00                	push   0x0
c001293f:	e8 3a ff ff ff       	call   c001287e <zStrtok(char*, char const*)>
c0012944:	83 c4 10             	add    esp,0x10
c0012947:	85 c0                	test   eax,eax
c0012949:	89 c6                	mov    esi,eax
c001294b:	74 18                	je     c0012965 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001294d:	52                   	push   edx
c001294e:	52                   	push   edx
c001294f:	53                   	push   ebx
c0012950:	57                   	push   edi
c0012951:	e8 86 f5 ff ff       	call   c0011edc <CmEnterDirectory(Reghive_Tag*, int)>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	83 f8 ff             	cmp    eax,0xffffffff
c001295c:	89 c3                	mov    ebx,eax
c001295e:	74 05                	je     c0012965 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012960:	50                   	push   eax
c0012961:	56                   	push   esi
c0012962:	53                   	push   ebx
c0012963:	eb c9                	jmp    c001292e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012965:	81 c4 00 01 00 00    	add    esp,0x100
c001296b:	89 d8                	mov    eax,ebx
c001296d:	5b                   	pop    ebx
c001296e:	5e                   	pop    esi
c001296f:	5f                   	pop    edi
c0012970:	c3                   	ret    

c0012971 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012971:	55                   	push   ebp
c0012972:	57                   	push   edi
c0012973:	56                   	push   esi
c0012974:	53                   	push   ebx
c0012975:	83 ec 5c             	sub    esp,0x5c
c0012978:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001297c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012980:	85 db                	test   ebx,ebx
c0012982:	0f 8e 84 00 00 00    	jle    c0012a0c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012988:	57                   	push   edi
c0012989:	31 ed                	xor    ebp,ebp
c001298b:	6a 32                	push   0x32
c001298d:	6a 00                	push   0x0
c001298f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012993:	57                   	push   edi
c0012994:	e8 57 db fe ff       	call   c00004f0 <memset>
c0012999:	83 c4 0c             	add    esp,0xc
c001299c:	57                   	push   edi
c001299d:	53                   	push   ebx
c001299e:	56                   	push   esi
c001299f:	e8 31 fb ff ff       	call   c00124d5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00129a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129a8:	83 c4 10             	add    esp,0x10
c00129ab:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00129af:	7d 13                	jge    c00129c4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00129b1:	83 ec 0c             	sub    esp,0xc
c00129b4:	45                   	inc    ebp
c00129b5:	68 a4 15 02 c0       	push   0xc00215a4
c00129ba:	e8 df 7f ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	eb e7                	jmp    c00129ab <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00129c4:	51                   	push   ecx
c00129c5:	57                   	push   edi
c00129c6:	53                   	push   ebx
c00129c7:	68 d5 0e 02 c0       	push   0xc0020ed5
c00129cc:	e8 cd 7f ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00129d1:	83 c4 10             	add    esp,0x10
c00129d4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129d9:	75 1e                	jne    c00129f9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129db:	52                   	push   edx
c00129dc:	52                   	push   edx
c00129dd:	53                   	push   ebx
c00129de:	56                   	push   esi
c00129df:	e8 f8 f4 ff ff       	call   c0011edc <CmEnterDirectory(Reghive_Tag*, int)>
c00129e4:	83 c4 0c             	add    esp,0xc
c00129e7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129eb:	8d 51 04             	lea    edx,[ecx+0x4]
c00129ee:	52                   	push   edx
c00129ef:	50                   	push   eax
c00129f0:	56                   	push   esi
c00129f1:	e8 7b ff ff ff       	call   c0012971 <CmDisplayTree(Reghive_Tag*, int, int)>
c00129f6:	83 c4 10             	add    esp,0x10
c00129f9:	50                   	push   eax
c00129fa:	50                   	push   eax
c00129fb:	53                   	push   ebx
c00129fc:	56                   	push   esi
c00129fd:	e8 19 f5 ff ff       	call   c0011f1b <CmGetNext(Reghive_Tag*, int)>
c0012a02:	83 c4 10             	add    esp,0x10
c0012a05:	89 c3                	mov    ebx,eax
c0012a07:	e9 74 ff ff ff       	jmp    c0012980 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012a0c:	83 c4 5c             	add    esp,0x5c
c0012a0f:	5b                   	pop    ebx
c0012a10:	5e                   	pop    esi
c0012a11:	5f                   	pop    edi
c0012a12:	5d                   	pop    ebp
c0012a13:	c3                   	ret    

c0012a14 <CmSplitFinalSlashInPlace(char*)>:
c0012a14:	53                   	push   ebx
c0012a15:	83 ec 14             	sub    esp,0x14
c0012a18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a1c:	53                   	push   ebx
c0012a1d:	e8 5e db fe ff       	call   c0000580 <strlen>
c0012a22:	83 c4 10             	add    esp,0x10
c0012a25:	48                   	dec    eax
c0012a26:	85 c0                	test   eax,eax
c0012a28:	74 15                	je     c0012a3f <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a2a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a2e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a31:	75 09                	jne    c0012a3c <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a33:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a36:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a3a:	eb 05                	jmp    c0012a41 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a3c:	48                   	dec    eax
c0012a3d:	eb e7                	jmp    c0012a26 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a3f:	31 c0                	xor    eax,eax
c0012a41:	83 c4 08             	add    esp,0x8
c0012a44:	5b                   	pop    ebx
c0012a45:	c3                   	ret    

c0012a46 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a46:	55                   	push   ebp
c0012a47:	57                   	push   edi
c0012a48:	56                   	push   esi
c0012a49:	53                   	push   ebx
c0012a4a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a50:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a57:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012a5a:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a61:	89 f0                	mov    eax,esi
c0012a63:	3c 40                	cmp    al,0x40
c0012a65:	75 1b                	jne    c0012a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012a67:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a6a:	85 c0                	test   eax,eax
c0012a6c:	74 08                	je     c0012a76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a6e:	83 f8 3a             	cmp    eax,0x3a
c0012a71:	74 03                	je     c0012a76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a73:	43                   	inc    ebx
c0012a74:	eb f1                	jmp    c0012a67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012a76:	85 c0                	test   eax,eax
c0012a78:	0f 84 45 01 00 00    	je     c0012bc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a7e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a81:	43                   	inc    ebx
c0012a82:	50                   	push   eax
c0012a83:	6a 40                	push   0x40
c0012a85:	6a 00                	push   0x0
c0012a87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a8b:	50                   	push   eax
c0012a8c:	e8 5f da fe ff       	call   c00004f0 <memset>
c0012a91:	89 f1                	mov    ecx,esi
c0012a93:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a9a:	31 c0                	xor    eax,eax
c0012a9c:	83 c4 10             	add    esp,0x10
c0012a9f:	0f be f1             	movsx  esi,cl
c0012aa2:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012aa5:	85 d2                	test   edx,edx
c0012aa7:	89 d1                	mov    ecx,edx
c0012aa9:	0f 84 14 01 00 00    	je     c0012bc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012aaf:	3d c7 00 00 00       	cmp    eax,0xc7
c0012ab4:	0f 8f 09 01 00 00    	jg     c0012bc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012aba:	83 fa 0a             	cmp    edx,0xa
c0012abd:	0f 85 f1 00 00 00    	jne    c0012bb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012ac3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ac8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012acd:	89 c8                	mov    eax,ecx
c0012acf:	a8 df                	test   al,0xdf
c0012ad1:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ad6:	83 f9 23             	cmp    ecx,0x23
c0012ad9:	0f 94 c2             	sete   dl
c0012adc:	89 d5                	mov    ebp,edx
c0012ade:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ae2:	09 ea                	or     edx,ebp
c0012ae4:	80 e2 01             	and    dl,0x1
c0012ae7:	75 47                	jne    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ae9:	83 e8 09             	sub    eax,0x9
c0012aec:	3c 01                	cmp    al,0x1
c0012aee:	76 40                	jbe    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012af0:	83 f9 5b             	cmp    ecx,0x5b
c0012af3:	75 42                	jne    c0012b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012af5:	83 fe 40             	cmp    esi,0x40
c0012af8:	75 36                	jne    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012afa:	83 ec 0c             	sub    esp,0xc
c0012afd:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012b01:	55                   	push   ebp
c0012b02:	e8 79 da fe ff       	call   c0000580 <strlen>
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	83 f8 3f             	cmp    eax,0x3f
c0012b0d:	0f 87 b0 00 00 00    	ja     c0012bc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b13:	50                   	push   eax
c0012b14:	50                   	push   eax
c0012b15:	55                   	push   ebp
c0012b16:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012b1a:	55                   	push   ebp
c0012b1b:	e8 30 db fe ff       	call   c0000650 <strcpy>
c0012b20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b23:	e8 58 da fe ff       	call   c0000580 <strlen>
c0012b28:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b2d:	83 c4 10             	add    esp,0x10
c0012b30:	31 d2                	xor    edx,edx
c0012b32:	e9 84 00 00 00       	jmp    c0012bbb <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012b37:	83 fe 40             	cmp    esi,0x40
c0012b3a:	74 06                	je     c0012b42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012b3c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b40:	eb 19                	jmp    c0012b5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b42:	51                   	push   ecx
c0012b43:	51                   	push   ecx
c0012b44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b4c:	50                   	push   eax
c0012b4d:	e8 2e dc fe ff       	call   c0000780 <strcmp>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	85 c0                	test   eax,eax
c0012b57:	75 d7                	jne    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b59:	eb e1                	jmp    c0012b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012b5b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012b5e:	85 c9                	test   ecx,ecx
c0012b60:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b65:	83 f9 3d             	cmp    ecx,0x3d
c0012b68:	0f 94 c0             	sete   al
c0012b6b:	89 c5                	mov    ebp,eax
c0012b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b71:	09 e8                	or     eax,ebp
c0012b73:	a8 01                	test   al,0x1
c0012b75:	89 c5                	mov    ebp,eax
c0012b77:	75 03                	jne    c0012b7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012b79:	42                   	inc    edx
c0012b7a:	eb df                	jmp    c0012b5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b7c:	85 c9                	test   ecx,ecx
c0012b7e:	74 43                	je     c0012bc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b84:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b87:	52                   	push   edx
c0012b88:	52                   	push   edx
c0012b89:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b8d:	50                   	push   eax
c0012b8e:	53                   	push   ebx
c0012b8f:	e8 ec db fe ff       	call   c0000780 <strcmp>
c0012b94:	83 c4 10             	add    esp,0x10
c0012b97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b9b:	85 c0                	test   eax,eax
c0012b9d:	75 91                	jne    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b9f:	50                   	push   eax
c0012ba0:	42                   	inc    edx
c0012ba1:	50                   	push   eax
c0012ba2:	52                   	push   edx
c0012ba3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012baa:	e8 a1 da fe ff       	call   c0000650 <strcpy>
c0012baf:	83 c4 10             	add    esp,0x10
c0012bb2:	eb 11                	jmp    c0012bc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012bb4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012bb8:	8d 50 01             	lea    edx,[eax+0x1]
c0012bbb:	47                   	inc    edi
c0012bbc:	89 d0                	mov    eax,edx
c0012bbe:	e9 df fe ff ff       	jmp    c0012aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012bc3:	31 ed                	xor    ebp,ebp
c0012bc5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012bcb:	89 e8                	mov    eax,ebp
c0012bcd:	5b                   	pop    ebx
c0012bce:	5e                   	pop    esi
c0012bcf:	5f                   	pop    edi
c0012bd0:	5d                   	pop    ebp
c0012bd1:	c3                   	ret    

c0012bd2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012bd2:	57                   	push   edi
c0012bd3:	56                   	push   esi
c0012bd4:	53                   	push   ebx
c0012bd5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012bdb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012be2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012be9:	53                   	push   ebx
c0012bea:	e8 91 d9 fe ff       	call   c0000580 <strlen>
c0012bef:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bf2:	89 c7                	mov    edi,eax
c0012bf4:	e8 87 d9 fe ff       	call   c0000580 <strlen>
c0012bf9:	83 c4 10             	add    esp,0x10
c0012bfc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c00:	3d ff 00 00 00       	cmp    eax,0xff
c0012c05:	0f 87 d3 00 00 00    	ja     c0012cde <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c0b:	57                   	push   edi
c0012c0c:	57                   	push   edi
c0012c0d:	56                   	push   esi
c0012c0e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c12:	56                   	push   esi
c0012c13:	e8 38 da fe ff       	call   c0000650 <strcpy>
c0012c18:	58                   	pop    eax
c0012c19:	5a                   	pop    edx
c0012c1a:	68 33 12 02 c0       	push   0xc0021233
c0012c1f:	56                   	push   esi
c0012c20:	e8 4b dc fe ff       	call   c0000870 <strcat>
c0012c25:	59                   	pop    ecx
c0012c26:	5f                   	pop    edi
c0012c27:	53                   	push   ebx
c0012c28:	56                   	push   esi
c0012c29:	e8 42 dc fe ff       	call   c0000870 <strcat>
c0012c2e:	58                   	pop    eax
c0012c2f:	5a                   	pop    edx
c0012c30:	68 df 0e 02 c0       	push   0xc0020edf
c0012c35:	56                   	push   esi
c0012c36:	e8 35 dc fe ff       	call   c0000870 <strcat>
c0012c3b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c42:	e8 84 4e ff ff       	call   c0007acb <malloc>
c0012c47:	83 c4 0c             	add    esp,0xc
c0012c4a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c50:	56                   	push   esi
c0012c51:	50                   	push   eax
c0012c52:	89 c3                	mov    ebx,eax
c0012c54:	e8 ed 82 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0012c59:	83 c4 10             	add    esp,0x10
c0012c5c:	85 db                	test   ebx,ebx
c0012c5e:	74 7e                	je     c0012cde <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c60:	51                   	push   ecx
c0012c61:	51                   	push   ecx
c0012c62:	6a 01                	push   0x1
c0012c64:	53                   	push   ebx
c0012c65:	e8 98 83 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	85 c0                	test   eax,eax
c0012c6f:	74 08                	je     c0012c79 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c71:	83 ec 0c             	sub    esp,0xc
c0012c74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c76:	53                   	push   ebx
c0012c77:	eb 5f                	jmp    c0012cd8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c79:	52                   	push   edx
c0012c7a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c7e:	50                   	push   eax
c0012c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c83:	50                   	push   eax
c0012c84:	53                   	push   ebx
c0012c85:	e8 24 86 ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c0012c8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	89 c1                	mov    ecx,eax
c0012c93:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c97:	74 31                	je     c0012cca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c99:	83 ec 0c             	sub    esp,0xc
c0012c9c:	50                   	push   eax
c0012c9d:	e8 29 4e ff ff       	call   c0007acb <malloc>
c0012ca2:	89 c6                	mov    esi,eax
c0012ca4:	58                   	pop    eax
c0012ca5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ca7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012cab:	52                   	push   edx
c0012cac:	56                   	push   esi
c0012cad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012cb1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012cb5:	53                   	push   ebx
c0012cb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012cb9:	83 c4 20             	add    esp,0x20
c0012cbc:	85 c0                	test   eax,eax
c0012cbe:	75 0a                	jne    c0012cca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012cc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cc4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012cc8:	74 18                	je     c0012ce2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	53                   	push   ebx
c0012cce:	e8 8d 83 ff ff       	call   c000b060 <File::close()>
c0012cd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	31 c0                	xor    eax,eax
c0012ce0:	eb 3b                	jmp    c0012d1d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012ce2:	83 ec 0c             	sub    esp,0xc
c0012ce5:	53                   	push   ebx
c0012ce6:	e8 75 83 ff ff       	call   c000b060 <File::close()>
c0012ceb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ced:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cf0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cf3:	83 c4 0c             	add    esp,0xc
c0012cf6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cfd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d04:	56                   	push   esi
c0012d05:	e8 3c fd ff ff       	call   c0012a46 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d0d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d11:	e8 c5 4d ff ff       	call   c0007adb <free>
c0012d16:	83 c4 10             	add    esp,0x10
c0012d19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d1d:	81 c4 20 01 00 00    	add    esp,0x120
c0012d23:	5b                   	pop    ebx
c0012d24:	5e                   	pop    esi
c0012d25:	5f                   	pop    edi
c0012d26:	c3                   	ret    

c0012d27 <Reg::getLine(char*, char*, char*)>:
c0012d27:	57                   	push   edi
c0012d28:	56                   	push   esi
c0012d29:	53                   	push   ebx
c0012d2a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d36:	57                   	push   edi
c0012d37:	56                   	push   esi
c0012d38:	53                   	push   ebx
c0012d39:	68 e4 0e 02 c0       	push   0xc0020ee4
c0012d3e:	e8 8f fe ff ff       	call   c0012bd2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d43:	83 c4 10             	add    esp,0x10
c0012d46:	84 c0                	test   al,al
c0012d48:	75 10                	jne    c0012d5a <Reg::getLine(char*, char*, char*)+0x33>
c0012d4a:	57                   	push   edi
c0012d4b:	56                   	push   esi
c0012d4c:	53                   	push   ebx
c0012d4d:	68 09 0f 02 c0       	push   0xc0020f09
c0012d52:	e8 7b fe ff ff       	call   c0012bd2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	5b                   	pop    ebx
c0012d5b:	5e                   	pop    esi
c0012d5c:	5f                   	pop    edi
c0012d5d:	c3                   	ret    

c0012d5e <Reg::readInt(char*, char*, int*)>:
c0012d5e:	55                   	push   ebp
c0012d5f:	57                   	push   edi
c0012d60:	56                   	push   esi
c0012d61:	53                   	push   ebx
c0012d62:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d68:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d6c:	55                   	push   ebp
c0012d6d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d74:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d7b:	e8 a7 ff ff ff       	call   c0012d27 <Reg::getLine(char*, char*, char*)>
c0012d80:	83 c4 10             	add    esp,0x10
c0012d83:	84 c0                	test   al,al
c0012d85:	0f 84 b6 00 00 00    	je     c0012e41 <Reg::readInt(char*, char*, int*)+0xe3>
c0012d8b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d90:	83 fa 2b             	cmp    edx,0x2b
c0012d93:	74 0c                	je     c0012da1 <Reg::readInt(char*, char*, int*)+0x43>
c0012d95:	83 fa 2d             	cmp    edx,0x2d
c0012d98:	75 0e                	jne    c0012da8 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d9a:	ba 01 00 00 00       	mov    edx,0x1
c0012d9f:	eb 0b                	jmp    c0012dac <Reg::readInt(char*, char*, int*)+0x4e>
c0012da1:	ba 01 00 00 00       	mov    edx,0x1
c0012da6:	eb 02                	jmp    c0012daa <Reg::readInt(char*, char*, int*)+0x4c>
c0012da8:	31 d2                	xor    edx,edx
c0012daa:	31 c0                	xor    eax,eax
c0012dac:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012db1:	be 0a 00 00 00       	mov    esi,0xa
c0012db6:	75 21                	jne    c0012dd9 <Reg::readInt(char*, char*, int*)+0x7b>
c0012db8:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012dbd:	83 f9 78             	cmp    ecx,0x78
c0012dc0:	75 0a                	jne    c0012dcc <Reg::readInt(char*, char*, int*)+0x6e>
c0012dc2:	83 c2 02             	add    edx,0x2
c0012dc5:	be 10 00 00 00       	mov    esi,0x10
c0012dca:	eb 0d                	jmp    c0012dd9 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dcc:	83 f9 62             	cmp    ecx,0x62
c0012dcf:	75 08                	jne    c0012dd9 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dd1:	83 c2 02             	add    edx,0x2
c0012dd4:	be 02 00 00 00       	mov    esi,0x2
c0012dd9:	01 d5                	add    ebp,edx
c0012ddb:	31 d2                	xor    edx,edx
c0012ddd:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012de1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012de5:	85 c9                	test   ecx,ecx
c0012de7:	0f 94 c3             	sete   bl
c0012dea:	83 f9 0d             	cmp    ecx,0xd
c0012ded:	89 df                	mov    edi,ebx
c0012def:	0f 94 c3             	sete   bl
c0012df2:	09 df                	or     edi,ebx
c0012df4:	89 fb                	mov    ebx,edi
c0012df6:	83 e7 01             	and    edi,0x1
c0012df9:	75 35                	jne    c0012e30 <Reg::readInt(char*, char*, int*)+0xd2>
c0012dfb:	0f af d6             	imul   edx,esi
c0012dfe:	83 fe 10             	cmp    esi,0x10
c0012e01:	75 26                	jne    c0012e29 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012e07:	83 ef 41             	sub    edi,0x41
c0012e0a:	89 fb                	mov    ebx,edi
c0012e0c:	80 fb 05             	cmp    bl,0x5
c0012e0f:	77 06                	ja     c0012e17 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e11:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012e15:	eb 16                	jmp    c0012e2d <Reg::readInt(char*, char*, int*)+0xcf>
c0012e17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e1b:	83 eb 61             	sub    ebx,0x61
c0012e1e:	80 fb 05             	cmp    bl,0x5
c0012e21:	77 06                	ja     c0012e29 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e23:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012e27:	eb 04                	jmp    c0012e2d <Reg::readInt(char*, char*, int*)+0xcf>
c0012e29:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012e2d:	45                   	inc    ebp
c0012e2e:	eb ad                	jmp    c0012ddd <Reg::readInt(char*, char*, int*)+0x7f>
c0012e30:	84 c0                	test   al,al
c0012e32:	74 02                	je     c0012e36 <Reg::readInt(char*, char*, int*)+0xd8>
c0012e34:	f7 da                	neg    edx
c0012e36:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e3d:	89 10                	mov    DWORD PTR [eax],edx
c0012e3f:	88 d8                	mov    al,bl
c0012e41:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e47:	5b                   	pop    ebx
c0012e48:	5e                   	pop    esi
c0012e49:	5f                   	pop    edi
c0012e4a:	5d                   	pop    ebp
c0012e4b:	c3                   	ret    

c0012e4c <Reg::readString(char*, char*, char*, int)>:
c0012e4c:	57                   	push   edi
c0012e4d:	56                   	push   esi
c0012e4e:	53                   	push   ebx
c0012e4f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e55:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e59:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e60:	57                   	push   edi
c0012e61:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e68:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e6f:	e8 b3 fe ff ff       	call   c0012d27 <Reg::getLine(char*, char*, char*)>
c0012e74:	83 c4 10             	add    esp,0x10
c0012e77:	84 c0                	test   al,al
c0012e79:	89 c6                	mov    esi,eax
c0012e7b:	74 44                	je     c0012ec1 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e7d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e84:	31 c0                	xor    eax,eax
c0012e86:	4a                   	dec    edx
c0012e87:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e8a:	84 c9                	test   cl,cl
c0012e8c:	74 0f                	je     c0012e9d <Reg::readString(char*, char*, char*, int)+0x51>
c0012e8e:	39 c2                	cmp    edx,eax
c0012e90:	7e 0b                	jle    c0012e9d <Reg::readString(char*, char*, char*, int)+0x51>
c0012e92:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e95:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e9a:	40                   	inc    eax
c0012e9b:	eb ea                	jmp    c0012e87 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e9d:	83 ec 0c             	sub    esp,0xc
c0012ea0:	53                   	push   ebx
c0012ea1:	e8 da d6 fe ff       	call   c0000580 <strlen>
c0012ea6:	83 c4 10             	add    esp,0x10
c0012ea9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012eae:	75 11                	jne    c0012ec1 <Reg::readString(char*, char*, char*, int)+0x75>
c0012eb0:	83 ec 0c             	sub    esp,0xc
c0012eb3:	53                   	push   ebx
c0012eb4:	e8 c7 d6 fe ff       	call   c0000580 <strlen>
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ec1:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012ec7:	89 f0                	mov    eax,esi
c0012ec9:	5b                   	pop    ebx
c0012eca:	5e                   	pop    esi
c0012ecb:	5f                   	pop    edi
c0012ecc:	c3                   	ret    

c0012ecd <Reg::readBool(char*, char*, bool*)>:
c0012ecd:	83 ec 20             	sub    esp,0x20
c0012ed0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ed4:	50                   	push   eax
c0012ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012edd:	e8 7c fe ff ff       	call   c0012d5e <Reg::readInt(char*, char*, int*)>
c0012ee2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012ee6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012eeb:	0f 95 02             	setne  BYTE PTR [edx]
c0012eee:	83 c4 2c             	add    esp,0x2c
c0012ef1:	c3                   	ret    

c0012ef2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012ef2:	53                   	push   ebx
c0012ef3:	83 ec 1c             	sub    esp,0x1c
c0012ef6:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012efa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012efe:	50                   	push   eax
c0012eff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f07:	e8 c1 ff ff ff       	call   c0012ecd <Reg::readBool(char*, char*, bool*)>
c0012f0c:	83 c4 10             	add    esp,0x10
c0012f0f:	84 c0                	test   al,al
c0012f11:	74 04                	je     c0012f17 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012f13:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012f17:	83 c4 18             	add    esp,0x18
c0012f1a:	88 d8                	mov    al,bl
c0012f1c:	5b                   	pop    ebx
c0012f1d:	c3                   	ret    

c0012f1e <Reg::readIntWithDefault(char*, char*, int)>:
c0012f1e:	53                   	push   ebx
c0012f1f:	83 ec 1c             	sub    esp,0x1c
c0012f22:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f26:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f2a:	50                   	push   eax
c0012f2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f33:	e8 26 fe ff ff       	call   c0012d5e <Reg::readInt(char*, char*, int*)>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	84 c0                	test   al,al
c0012f3d:	74 04                	je     c0012f43 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f43:	83 c4 18             	add    esp,0x18
c0012f46:	89 d8                	mov    eax,ebx
c0012f48:	5b                   	pop    ebx
c0012f49:	c3                   	ret    

c0012f4a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f4a:	57                   	push   edi
c0012f4b:	56                   	push   esi
c0012f4c:	53                   	push   ebx
c0012f4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f51:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f59:	56                   	push   esi
c0012f5a:	57                   	push   edi
c0012f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f63:	e8 e4 fe ff ff       	call   c0012e4c <Reg::readString(char*, char*, char*, int)>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	84 c0                	test   al,al
c0012f6d:	75 16                	jne    c0012f85 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f6f:	50                   	push   eax
c0012f70:	56                   	push   esi
c0012f71:	6a 00                	push   0x0
c0012f73:	57                   	push   edi
c0012f74:	e8 77 d5 fe ff       	call   c00004f0 <memset>
c0012f79:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f7c:	89 de                	mov    esi,ebx
c0012f7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	89 df                	mov    edi,ebx
c0012f85:	5b                   	pop    ebx
c0012f86:	89 f8                	mov    eax,edi
c0012f88:	5e                   	pop    esi
c0012f89:	5f                   	pop    edi
c0012f8a:	c3                   	ret    

c0012f8b <SysEject(regs*)>:
c0012f8b:	83 ec 0c             	sub    esp,0xc
c0012f8e:	83 ca ff             	or     edx,0xffffffff
c0012f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f95:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f98:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f9d:	83 e9 41             	sub    ecx,0x41
c0012fa0:	83 f9 19             	cmp    ecx,0x19
c0012fa3:	77 18                	ja     c0012fbd <SysEject(regs*)+0x32>
c0012fa5:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012fac:	85 c9                	test   ecx,ecx
c0012fae:	74 0d                	je     c0012fbd <SysEject(regs*)+0x32>
c0012fb0:	83 ec 0c             	sub    esp,0xc
c0012fb3:	51                   	push   ecx
c0012fb4:	e8 c7 a1 ff ff       	call   c000d180 <LogicalDisk::eject()>
c0012fb9:	83 c4 10             	add    esp,0x10
c0012fbc:	99                   	cdq    
c0012fbd:	83 c4 0c             	add    esp,0xc
c0012fc0:	c3                   	ret    

c0012fc1 <SysExit(regs*)>:
c0012fc1:	83 ec 18             	sub    esp,0x18
c0012fc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fcb:	e8 14 2a 00 00       	call   c00159e4 <terminateTask(int)>
c0012fd0:	83 c8 ff             	or     eax,0xffffffff
c0012fd3:	83 c4 1c             	add    esp,0x1c
c0012fd6:	89 c2                	mov    edx,eax
c0012fd8:	c3                   	ret    

c0012fd9 <SysGetCwd(regs*)>:
c0012fd9:	83 ec 10             	sub    esp,0x10
c0012fdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fe0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fe3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012feb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fee:	e8 23 7d ff ff       	call   c000ad16 <Fs::getcwd(Process*, char*, int)>
c0012ff3:	83 c4 1c             	add    esp,0x1c
c0012ff6:	99                   	cdq    
c0012ff7:	c3                   	ret    

c0012ff8 <SysGetPID(regs*)>:
c0012ff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ffd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013000:	8b 00                	mov    eax,DWORD PTR [eax]
c0013002:	99                   	cdq    
c0013003:	c3                   	ret    

c0013004 <SysGetRAMData(regs*)>:
c0013004:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c001300e:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0013014:	99                   	cdq    
c0013015:	f7 f9                	idiv   ecx
c0013017:	c1 e0 18             	shl    eax,0x18
c001301a:	09 c8                	or     eax,ecx
c001301c:	99                   	cdq    
c001301d:	c3                   	ret    

c001301e <SysGetVGAPtr(regs*)>:
c001301e:	55                   	push   ebp
c001301f:	57                   	push   edi
c0013020:	56                   	push   esi
c0013021:	53                   	push   ebx
c0013022:	83 ec 18             	sub    esp,0x18
c0013025:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013029:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001302c:	e8 7f 24 00 00       	call   c00154b0 <Thr::processFromPID(int)>
c0013031:	83 c4 10             	add    esp,0x10
c0013034:	89 c1                	mov    ecx,eax
c0013036:	b8 01 00 00 00       	mov    eax,0x1
c001303b:	85 c9                	test   ecx,ecx
c001303d:	74 57                	je     c0013096 <SysGetVGAPtr(regs*)+0x78>
c001303f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013043:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013049:	74 0c                	je     c0013057 <SysGetVGAPtr(regs*)+0x39>
c001304b:	83 ec 0c             	sub    esp,0xc
c001304e:	55                   	push   ebp
c001304f:	e8 05 57 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001305a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001305f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013062:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013064:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013067:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001306a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013070:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013073:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013076:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001307c:	50                   	push   eax
c001307d:	50                   	push   eax
c001307e:	68 24 0f 02 c0       	push   0xc0020f24
c0013083:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013086:	05 a8 0f 00 00       	add    eax,0xfa8
c001308b:	50                   	push   eax
c001308c:	e8 bf d5 fe ff       	call   c0000650 <strcpy>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	31 c0                	xor    eax,eax
c0013096:	83 c4 0c             	add    esp,0xc
c0013099:	31 d2                	xor    edx,edx
c001309b:	5b                   	pop    ebx
c001309c:	5e                   	pop    esi
c001309d:	5f                   	pop    edi
c001309e:	5d                   	pop    ebp
c001309f:	c3                   	ret    

c00130a0 <SysKill(regs*)>:
c00130a0:	53                   	push   ebx
c00130a1:	83 ec 08             	sub    esp,0x8
c00130a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130a8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00130ac:	75 16                	jne    c00130c4 <SysKill(regs*)+0x24>
c00130ae:	83 ec 0c             	sub    esp,0xc
c00130b1:	68 2e 0f 02 c0       	push   0xc0020f2e
c00130b6:	e8 ae d7 ff ff       	call   c0010869 <KePanic(char const*)>
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	e9 89 00 00 00       	jmp    c001314c <SysKill(regs*)+0xac>
c00130c3:	90                   	nop
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	68 84 81 02 c0       	push   0xc0028184
c00130cc:	e8 4b bb 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130d1:	8d 76 00             	lea    esi,[esi+0x0]
c00130d4:	83 c4 10             	add    esp,0x10
c00130d7:	85 c0                	test   eax,eax
c00130d9:	74 19                	je     c00130f4 <SysKill(regs*)+0x54>
c00130db:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130e1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130e3:	74 33                	je     c0013118 <SysKill(regs*)+0x78>
c00130e5:	52                   	push   edx
c00130e6:	52                   	push   edx
c00130e7:	50                   	push   eax
c00130e8:	68 84 81 02 c0       	push   0xc0028184
c00130ed:	e8 4a be 00 00       	call   c001ef3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130f2:	eb e0                	jmp    c00130d4 <SysKill(regs*)+0x34>
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	68 78 81 02 c0       	push   0xc0028178
c00130fc:	e8 1b bb 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013101:	8d 76 00             	lea    esi,[esi+0x0]
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	85 c0                	test   eax,eax
c0013109:	74 41                	je     c001314c <SysKill(regs*)+0xac>
c001310b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001310e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013111:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013113:	75 27                	jne    c001313c <SysKill(regs*)+0x9c>
c0013115:	8d 76 00             	lea    esi,[esi+0x0]
c0013118:	51                   	push   ecx
c0013119:	51                   	push   ecx
c001311a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001311d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013122:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013125:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001312b:	e8 d3 db ff ff       	call   c0010d03 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	31 c0                	xor    eax,eax
c0013135:	31 d2                	xor    edx,edx
c0013137:	eb 1b                	jmp    c0013154 <SysKill(regs*)+0xb4>
c0013139:	8d 76 00             	lea    esi,[esi+0x0]
c001313c:	52                   	push   edx
c001313d:	52                   	push   edx
c001313e:	50                   	push   eax
c001313f:	68 78 81 02 c0       	push   0xc0028178
c0013144:	e8 f3 bd 00 00       	call   c001ef3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013149:	eb b9                	jmp    c0013104 <SysKill(regs*)+0x64>
c001314b:	90                   	nop
c001314c:	83 c8 ff             	or     eax,0xffffffff
c001314f:	89 c2                	mov    edx,eax
c0013151:	8d 76 00             	lea    esi,[esi+0x0]
c0013154:	83 c4 08             	add    esp,0x8
c0013157:	5b                   	pop    ebx
c0013158:	c3                   	ret    

c0013159 <SysLoadDLL(regs*)>:
c0013159:	56                   	push   esi
c001315a:	31 d2                	xor    edx,edx
c001315c:	53                   	push   ebx
c001315d:	b8 01 00 00 00       	mov    eax,0x1
c0013162:	51                   	push   ecx
c0013163:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013167:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001316b:	0f 84 8c 00 00 00    	je     c00131fd <SysLoadDLL(regs*)+0xa4>
c0013171:	83 ec 0c             	sub    esp,0xc
c0013174:	68 14 01 00 00       	push   0x114
c0013179:	e8 4d 49 ff ff       	call   c0007acb <malloc>
c001317e:	83 c4 0c             	add    esp,0xc
c0013181:	89 c3                	mov    ebx,eax
c0013183:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013188:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001318b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001318e:	53                   	push   ebx
c001318f:	e8 b2 7d ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	31 d2                	xor    edx,edx
c0013199:	85 db                	test   ebx,ebx
c001319b:	b8 02 00 00 00       	mov    eax,0x2
c00131a0:	74 5b                	je     c00131fd <SysLoadDLL(regs*)+0xa4>
c00131a2:	83 ec 0c             	sub    esp,0xc
c00131a5:	53                   	push   ebx
c00131a6:	e8 c5 80 ff ff       	call   c000b270 <File::exists()>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	84 c0                	test   al,al
c00131b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131b2:	75 11                	jne    c00131c5 <SysLoadDLL(regs*)+0x6c>
c00131b4:	83 ec 0c             	sub    esp,0xc
c00131b7:	53                   	push   ebx
c00131b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131bb:	83 c4 10             	add    esp,0x10
c00131be:	b8 03 00 00 00       	mov    eax,0x3
c00131c3:	eb 36                	jmp    c00131fb <SysLoadDLL(regs*)+0xa2>
c00131c5:	83 ec 0c             	sub    esp,0xc
c00131c8:	53                   	push   ebx
c00131c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131cc:	58                   	pop    eax
c00131cd:	5a                   	pop    edx
c00131ce:	6a 00                	push   0x0
c00131d0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131d3:	e8 20 14 00 00       	call   c00145f8 <Thr::loadDLL(char const*, bool)>
c00131d8:	83 c4 10             	add    esp,0x10
c00131db:	31 d2                	xor    edx,edx
c00131dd:	89 c1                	mov    ecx,eax
c00131df:	b8 04 00 00 00       	mov    eax,0x4
c00131e4:	85 c9                	test   ecx,ecx
c00131e6:	74 15                	je     c00131fd <SysLoadDLL(regs*)+0xa4>
c00131e8:	53                   	push   ebx
c00131e9:	53                   	push   ebx
c00131ea:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131f0:	51                   	push   ecx
c00131f1:	e8 42 16 00 00       	call   c0014838 <Thr::executeDLL(unsigned long, void*)>
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	31 c0                	xor    eax,eax
c00131fb:	31 d2                	xor    edx,edx
c00131fd:	59                   	pop    ecx
c00131fe:	5b                   	pop    ebx
c00131ff:	5e                   	pop    esi
c0013200:	c3                   	ret    

c0013201 <SysRead(regs*)>:
c0013201:	57                   	push   edi
c0013202:	56                   	push   esi
c0013203:	53                   	push   ebx
c0013204:	83 ec 10             	sub    esp,0x10
c0013207:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001320b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001320e:	83 f8 02             	cmp    eax,0x2
c0013211:	77 10                	ja     c0013223 <SysRead(regs*)+0x22>
c0013213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013218:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001321b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013221:	eb 0e                	jmp    c0013231 <SysRead(regs*)+0x30>
c0013223:	83 ec 0c             	sub    esp,0xc
c0013226:	50                   	push   eax
c0013227:	e8 7f 62 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001322c:	83 c4 10             	add    esp,0x10
c001322f:	89 c1                	mov    ecx,eax
c0013231:	83 c8 ff             	or     eax,0xffffffff
c0013234:	85 c9                	test   ecx,ecx
c0013236:	89 c2                	mov    edx,eax
c0013238:	74 28                	je     c0013262 <SysRead(regs*)+0x61>
c001323a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013242:	83 ec 0c             	sub    esp,0xc
c0013245:	31 ff                	xor    edi,edi
c0013247:	8d 54 24 18          	lea    edx,[esp+0x18]
c001324b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001324d:	52                   	push   edx
c001324e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013251:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013254:	57                   	push   edi
c0013255:	56                   	push   esi
c0013256:	51                   	push   ecx
c0013257:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001325a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001325e:	83 c4 20             	add    esp,0x20
c0013261:	99                   	cdq    
c0013262:	83 c4 10             	add    esp,0x10
c0013265:	5b                   	pop    ebx
c0013266:	5e                   	pop    esi
c0013267:	5f                   	pop    edi
c0013268:	c3                   	ret    

c0013269 <SysRegisterSignal(regs*)>:
c0013269:	83 ec 18             	sub    esp,0x18
c001326c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013270:	6a 00                	push   0x0
c0013272:	6a 00                	push   0x0
c0013274:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013277:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001327a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001327f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013282:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013288:	e8 40 da ff ff       	call   c0010ccd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001328d:	83 c4 2c             	add    esp,0x2c
c0013290:	99                   	cdq    
c0013291:	c3                   	ret    

c0013292 <SysRegistryGetTypeFromPath(regs*)>:
c0013292:	57                   	push   edi
c0013293:	56                   	push   esi
c0013294:	53                   	push   ebx
c0013295:	81 ec 38 01 00 00    	sub    esp,0x138
c001329b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00132a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132a5:	68 4f 0f 02 c0       	push   0xc0020f4f
c00132aa:	e8 ef 76 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00132af:	5a                   	pop    edx
c00132b0:	59                   	pop    ecx
c00132b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132b4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132b7:	e8 34 f6 ff ff       	call   c00128f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132bc:	5f                   	pop    edi
c00132bd:	5a                   	pop    edx
c00132be:	89 c6                	mov    esi,eax
c00132c0:	50                   	push   eax
c00132c1:	68 6f 0f 02 c0       	push   0xc0020f6f
c00132c6:	e8 d3 76 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	85 f6                	test   esi,esi
c00132d0:	74 28                	je     c00132fa <SysRegistryGetTypeFromPath(regs*)+0x68>
c00132d2:	50                   	push   eax
c00132d3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132d7:	57                   	push   edi
c00132d8:	56                   	push   esi
c00132d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132dc:	e8 f4 f1 ff ff       	call   c00124d5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132e1:	83 c4 0c             	add    esp,0xc
c00132e4:	57                   	push   edi
c00132e5:	50                   	push   eax
c00132e6:	89 c3                	mov    ebx,eax
c00132e8:	68 77 0f 02 c0       	push   0xc0020f77
c00132ed:	e8 ac 76 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00132f2:	89 d8                	mov    eax,ebx
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	99                   	cdq    
c00132f8:	eb 05                	jmp    c00132ff <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132fa:	83 c8 ff             	or     eax,0xffffffff
c00132fd:	89 c2                	mov    edx,eax
c00132ff:	81 c4 30 01 00 00    	add    esp,0x130
c0013305:	5b                   	pop    ebx
c0013306:	5e                   	pop    esi
c0013307:	5f                   	pop    edi
c0013308:	c3                   	ret    

c0013309 <SysRegistryReadExtent(regs*)>:
c0013309:	83 ec 1c             	sub    esp,0x1c
c001330c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013310:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013313:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013316:	85 c0                	test   eax,eax
c0013318:	79 1f                	jns    c0013339 <SysRegistryReadExtent(regs*)+0x30>
c001331a:	52                   	push   edx
c001331b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013320:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013324:	52                   	push   edx
c0013325:	50                   	push   eax
c0013326:	51                   	push   ecx
c0013327:	e8 9b f0 ff ff       	call   c00123c7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001332c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	eb 14                	jmp    c001334d <SysRegistryReadExtent(regs*)+0x44>
c0013339:	83 ec 04             	sub    esp,0x4
c001333c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001333f:	50                   	push   eax
c0013340:	51                   	push   ecx
c0013341:	e8 1f eb ff ff       	call   c0011e65 <CmGetString(Reghive_Tag*, int, char*)>
c0013346:	83 c4 10             	add    esp,0x10
c0013349:	31 c0                	xor    eax,eax
c001334b:	31 d2                	xor    edx,edx
c001334d:	83 c4 1c             	add    esp,0x1c
c0013350:	c3                   	ret    

c0013351 <SysRegistryPathToExtentLookup(regs*)>:
c0013351:	53                   	push   ebx
c0013352:	83 ec 10             	sub    esp,0x10
c0013355:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013359:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001335c:	68 8d 0f 02 c0       	push   0xc0020f8d
c0013361:	e8 38 76 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0013366:	58                   	pop    eax
c0013367:	5a                   	pop    edx
c0013368:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001336b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001336e:	e8 7d f5 ff ff       	call   c00128f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013373:	83 c4 18             	add    esp,0x18
c0013376:	5b                   	pop    ebx
c0013377:	99                   	cdq    
c0013378:	c3                   	ret    

c0013379 <SysRegistryEnterDirectory(regs*)>:
c0013379:	53                   	push   ebx
c001337a:	83 ec 10             	sub    esp,0x10
c001337d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013381:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013384:	68 b0 0f 02 c0       	push   0xc0020fb0
c0013389:	e8 10 76 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001338e:	58                   	pop    eax
c001338f:	5a                   	pop    edx
c0013390:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013393:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013396:	e8 41 eb ff ff       	call   c0011edc <CmEnterDirectory(Reghive_Tag*, int)>
c001339b:	83 c4 18             	add    esp,0x18
c001339e:	5b                   	pop    ebx
c001339f:	99                   	cdq    
c00133a0:	c3                   	ret    

c00133a1 <SysRegistryGetNext(regs*)>:
c00133a1:	53                   	push   ebx
c00133a2:	83 ec 10             	sub    esp,0x10
c00133a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133ac:	68 ce 0f 02 c0       	push   0xc0020fce
c00133b1:	e8 e8 75 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00133b6:	58                   	pop    eax
c00133b7:	5a                   	pop    edx
c00133b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133bb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133be:	e8 58 eb ff ff       	call   c0011f1b <CmGetNext(Reghive_Tag*, int)>
c00133c3:	83 c4 18             	add    esp,0x18
c00133c6:	5b                   	pop    ebx
c00133c7:	99                   	cdq    
c00133c8:	c3                   	ret    

c00133c9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00133c9:	57                   	push   edi
c00133ca:	56                   	push   esi
c00133cb:	53                   	push   ebx
c00133cc:	81 ec 34 01 00 00    	sub    esp,0x134
c00133d2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133d9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133dd:	57                   	push   edi
c00133de:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133e4:	e8 ec f0 ff ff       	call   c00124d5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133e9:	89 c3                	mov    ebx,eax
c00133eb:	58                   	pop    eax
c00133ec:	5a                   	pop    edx
c00133ed:	57                   	push   edi
c00133ee:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133f1:	e8 5a d2 fe ff       	call   c0000650 <strcpy>
c00133f6:	81 c4 40 01 00 00    	add    esp,0x140
c00133fc:	89 d8                	mov    eax,ebx
c00133fe:	5b                   	pop    ebx
c00133ff:	99                   	cdq    
c0013400:	5e                   	pop    esi
c0013401:	5f                   	pop    edi
c0013402:	c3                   	ret    

c0013403 <SysRegistryOpen(regs*)>:
c0013403:	83 ec 18             	sub    esp,0x18
c0013406:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001340a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001340d:	e8 e3 e8 ff ff       	call   c0011cf5 <CmOpen(char const*)>
c0013412:	83 c4 1c             	add    esp,0x1c
c0013415:	99                   	cdq    
c0013416:	c3                   	ret    

c0013417 <SysRegistryClose(regs*)>:
c0013417:	83 ec 18             	sub    esp,0x18
c001341a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001341e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013421:	e8 ed e9 ff ff       	call   c0011e13 <CmClose(Reghive_Tag*)>
c0013426:	31 c0                	xor    eax,eax
c0013428:	31 d2                	xor    edx,edx
c001342a:	83 c4 1c             	add    esp,0x1c
c001342d:	c3                   	ret    

c001342e <SysSbrk(regs*)>:
c001342e:	56                   	push   esi
c001342f:	53                   	push   ebx
c0013430:	50                   	push   eax
c0013431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013436:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001343a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001343d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013440:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013446:	85 db                	test   ebx,ebx
c0013448:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001344b:	74 02                	je     c001344f <SysSbrk(regs*)+0x21>
c001344d:	79 06                	jns    c0013455 <SysSbrk(regs*)+0x27>
c001344f:	89 f0                	mov    eax,esi
c0013451:	31 d2                	xor    edx,edx
c0013453:	eb 2a                	jmp    c001347f <SysSbrk(regs*)+0x51>
c0013455:	83 c8 ff             	or     eax,0xffffffff
c0013458:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001345e:	89 c2                	mov    edx,eax
c0013460:	77 1d                	ja     c001347f <SysSbrk(regs*)+0x51>
c0013462:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013468:	50                   	push   eax
c0013469:	68 07 0c 00 00       	push   0xc07
c001346e:	c1 ea 0c             	shr    edx,0xc
c0013471:	52                   	push   edx
c0013472:	51                   	push   ecx
c0013473:	e8 78 69 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c0013478:	89 f0                	mov    eax,esi
c001347a:	31 d2                	xor    edx,edx
c001347c:	83 c4 10             	add    esp,0x10
c001347f:	59                   	pop    ecx
c0013480:	5b                   	pop    ebx
c0013481:	5e                   	pop    esi
c0013482:	c3                   	ret    

c0013483 <SysSetCwd(regs*)>:
c0013483:	83 ec 14             	sub    esp,0x14
c0013486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001348d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013492:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013495:	e8 75 7e ff ff       	call   c000b30f <Fs::setcwd(Process*, char*)>
c001349a:	83 c4 1c             	add    esp,0x1c
c001349d:	99                   	cdq    
c001349e:	c3                   	ret    

c001349f <SysSetTime(regs*)>:
c001349f:	55                   	push   ebp
c00134a0:	31 c9                	xor    ecx,ecx
c00134a2:	57                   	push   edi
c00134a3:	bd 0c 00 00 00       	mov    ebp,0xc
c00134a8:	56                   	push   esi
c00134a9:	53                   	push   ebx
c00134aa:	31 db                	xor    ebx,ebx
c00134ac:	83 ec 10             	sub    esp,0x10
c00134af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134b3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134b6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00134b9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00134bc:	89 c2                	mov    edx,eax
c00134be:	c1 e8 05             	shr    eax,0x5
c00134c1:	83 e2 1f             	and    edx,0x1f
c00134c4:	42                   	inc    edx
c00134c5:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00134cb:	c1 e7 10             	shl    edi,0x10
c00134ce:	88 d1                	mov    cl,dl
c00134d0:	31 d2                	xor    edx,edx
c00134d2:	f7 f5                	div    ebp
c00134d4:	89 dd                	mov    ebp,ebx
c00134d6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134dc:	88 d5                	mov    ch,dl
c00134de:	31 d2                	xor    edx,edx
c00134e0:	0f b7 c1             	movzx  eax,cx
c00134e3:	09 f8                	or     eax,edi
c00134e5:	bf 3c 00 00 00       	mov    edi,0x3c
c00134ea:	89 c1                	mov    ecx,eax
c00134ec:	89 f0                	mov    eax,esi
c00134ee:	f7 f7                	div    edi
c00134f0:	c1 e2 10             	shl    edx,0x10
c00134f3:	09 d5                	or     ebp,edx
c00134f5:	31 d2                	xor    edx,edx
c00134f7:	f7 f7                	div    edi
c00134f9:	89 eb                	mov    ebx,ebp
c00134fb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013500:	89 f0                	mov    eax,esi
c0013502:	88 d7                	mov    bh,dl
c0013504:	31 d2                	xor    edx,edx
c0013506:	f7 f7                	div    edi
c0013508:	bf 18 00 00 00       	mov    edi,0x18
c001350d:	31 d2                	xor    edx,edx
c001350f:	f7 f7                	div    edi
c0013511:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013516:	88 d3                	mov    bl,dl
c0013518:	53                   	push   ebx
c0013519:	51                   	push   ecx
c001351a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013520:	e8 ef 85 ff ff       	call   c000bb14 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013525:	83 c4 1c             	add    esp,0x1c
c0013528:	31 d2                	xor    edx,edx
c001352a:	5b                   	pop    ebx
c001352b:	5e                   	pop    esi
c001352c:	83 f0 01             	xor    eax,0x1
c001352f:	5f                   	pop    edi
c0013530:	0f b6 c0             	movzx  eax,al
c0013533:	5d                   	pop    ebp
c0013534:	c3                   	ret    

c0013535 <SysTimezone(regs*)>:
c0013535:	53                   	push   ebx
c0013536:	83 ec 08             	sub    esp,0x8
c0013539:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001353d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013541:	75 17                	jne    c001355a <SysTimezone(regs*)+0x25>
c0013543:	83 ec 0c             	sub    esp,0xc
c0013546:	68 e5 0f 02 c0       	push   0xc0020fe5
c001354b:	e8 4e 74 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0013550:	83 c8 ff             	or     eax,0xffffffff
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	89 c2                	mov    edx,eax
c0013558:	eb 20                	jmp    c001357a <SysTimezone(regs*)+0x45>
c001355a:	83 ec 0c             	sub    esp,0xc
c001355d:	68 fa 0f 02 c0       	push   0xc0020ffa
c0013562:	e8 37 74 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0013567:	58                   	pop    eax
c0013568:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001356b:	e8 08 83 ff ff       	call   c000b878 <User::loadClockSettings(int)>
c0013570:	83 c4 10             	add    esp,0x10
c0013573:	b8 01 00 00 00       	mov    eax,0x1
c0013578:	31 d2                	xor    edx,edx
c001357a:	83 c4 08             	add    esp,0x8
c001357d:	5b                   	pop    ebx
c001357e:	c3                   	ret    

c001357f <SysWrite(regs*)>:
c001357f:	57                   	push   edi
c0013580:	56                   	push   esi
c0013581:	53                   	push   ebx
c0013582:	83 ec 10             	sub    esp,0x10
c0013585:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013589:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001358c:	83 f8 02             	cmp    eax,0x2
c001358f:	77 10                	ja     c00135a1 <SysWrite(regs*)+0x22>
c0013591:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013596:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013599:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001359f:	eb 0e                	jmp    c00135af <SysWrite(regs*)+0x30>
c00135a1:	83 ec 0c             	sub    esp,0xc
c00135a4:	50                   	push   eax
c00135a5:	e8 01 5f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00135aa:	83 c4 10             	add    esp,0x10
c00135ad:	89 c1                	mov    ecx,eax
c00135af:	83 c8 ff             	or     eax,0xffffffff
c00135b2:	85 c9                	test   ecx,ecx
c00135b4:	89 c2                	mov    edx,eax
c00135b6:	74 28                	je     c00135e0 <SysWrite(regs*)+0x61>
c00135b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135c0:	83 ec 0c             	sub    esp,0xc
c00135c3:	31 ff                	xor    edi,edi
c00135c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135cb:	52                   	push   edx
c00135cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135cf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135d2:	57                   	push   edi
c00135d3:	56                   	push   esi
c00135d4:	51                   	push   ecx
c00135d5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135dc:	83 c4 20             	add    esp,0x20
c00135df:	99                   	cdq    
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	5b                   	pop    ebx
c00135e4:	5e                   	pop    esi
c00135e5:	5f                   	pop    edi
c00135e6:	c3                   	ret    

c00135e7 <SysWsbe(regs*)>:
c00135e7:	57                   	push   edi
c00135e8:	b9 0b 00 00 00       	mov    ecx,0xb
c00135ed:	56                   	push   esi
c00135ee:	be 39 10 02 c0       	mov    esi,0xc0021039
c00135f3:	53                   	push   ebx
c00135f4:	83 ec 30             	sub    esp,0x30
c00135f7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135fb:	fc                   	cld    
c00135fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013605:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001360a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001360d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013613:	8b 06                	mov    eax,DWORD PTR [esi]
c0013615:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013618:	57                   	push   edi
c0013619:	e8 62 cf fe ff       	call   c0000580 <strlen>
c001361e:	5a                   	pop    edx
c001361f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013623:	52                   	push   edx
c0013624:	31 d2                	xor    edx,edx
c0013626:	57                   	push   edi
c0013627:	52                   	push   edx
c0013628:	50                   	push   eax
c0013629:	56                   	push   esi
c001362a:	ff d3                	call   ebx
c001362c:	83 c4 14             	add    esp,0x14
c001362f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013633:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013636:	e8 a9 23 00 00       	call   c00159e4 <terminateTask(int)>
c001363b:	83 c4 40             	add    esp,0x40
c001363e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013643:	5b                   	pop    ebx
c0013644:	31 d2                	xor    edx,edx
c0013646:	5e                   	pop    esi
c0013647:	5f                   	pop    edi
c0013648:	c3                   	ret    

c0013649 <SysYield(regs*)>:
c0013649:	83 ec 0c             	sub    esp,0xc
c001364c:	fa                   	cli    
c001364d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013653:	e8 0c 1a 00 00       	call   c0015064 <schedule()>
c0013658:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001365d:	48                   	dec    eax
c001365e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013663:	75 01                	jne    c0013666 <SysYield(regs*)+0x1d>
c0013665:	fb                   	sti    
c0013666:	31 c0                	xor    eax,eax
c0013668:	31 d2                	xor    edx,edx
c001366a:	83 c4 0c             	add    esp,0xc
c001366d:	c3                   	ret    

c001366e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001366e:	55                   	push   ebp
c001366f:	57                   	push   edi
c0013670:	56                   	push   esi
c0013671:	53                   	push   ebx
c0013672:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013678:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013683:	74 3b                	je     c00136c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013685:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001368d:	74 31                	je     c00136c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001368f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013697:	75 27                	jne    c00136c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013699:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00136a0:	05 00 10 00 00       	add    eax,0x1000
c00136a5:	89 c2                	mov    edx,eax
c00136a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00136ac:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00136b3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00136b9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00136c0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00136c7:	83 ec 0c             	sub    esp,0xc
c00136ca:	6a 01                	push   0x1
c00136cc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136d2:	e8 2e 5f ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c00136d7:	83 c4 10             	add    esp,0x10
c00136da:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136e0:	89 c3                	mov    ebx,eax
c00136e2:	0f 86 26 01 00 00    	jbe    c001380e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00136e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136f0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136f7:	c1 ee 0c             	shr    esi,0xc
c00136fa:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136fe:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013705:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001370c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013710:	29 ef                	sub    edi,ebp
c0013712:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013716:	0f 83 f9 00 00 00    	jae    c0013815 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001371c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013722:	b8 00 10 00 00       	mov    eax,0x1000
c0013727:	0f 47 f8             	cmova  edi,eax
c001372a:	83 ec 0c             	sub    esp,0xc
c001372d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013734:	31 d2                	xor    edx,edx
c0013736:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013738:	8d 44 24 28          	lea    eax,[esp+0x28]
c001373c:	50                   	push   eax
c001373d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013741:	56                   	push   esi
c0013742:	52                   	push   edx
c0013743:	57                   	push   edi
c0013744:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001374b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001374e:	83 c4 20             	add    esp,0x20
c0013751:	85 c0                	test   eax,eax
c0013753:	75 06                	jne    c001375b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013755:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013759:	74 13                	je     c001376e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001375b:	83 ec 0c             	sub    esp,0xc
c001375e:	53                   	push   ebx
c001375f:	e8 b3 61 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0013764:	83 c4 10             	add    esp,0x10
c0013767:	31 c0                	xor    eax,eax
c0013769:	e9 7c 01 00 00       	jmp    c00138ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001376e:	fa                   	cli    
c001376f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013775:	e8 5c 46 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c001377a:	6a 07                	push   0x7
c001377c:	53                   	push   ebx
c001377d:	50                   	push   eax
c001377e:	89 c7                	mov    edi,eax
c0013780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013785:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013788:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001378e:	e8 51 65 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013793:	83 c4 0c             	add    esp,0xc
c0013796:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001379d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137a3:	6a 00                	push   0x0
c00137a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137ad:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137b3:	e8 92 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c00137b8:	58                   	pop    eax
c00137b9:	5a                   	pop    edx
c00137ba:	68 07 0c 00 00       	push   0xc07
c00137bf:	55                   	push   ebp
c00137c0:	57                   	push   edi
c00137c1:	89 df                	mov    edi,ebx
c00137c3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00137ca:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137d0:	6a 00                	push   0x0
c00137d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137da:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137e0:	e8 e1 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137e5:	b9 00 10 00 00       	mov    ecx,0x1000
c00137ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137ec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137f1:	83 c4 20             	add    esp,0x20
c00137f4:	48                   	dec    eax
c00137f5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137fa:	85 c0                	test   eax,eax
c00137fc:	75 01                	jne    c00137ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00137fe:	fb                   	sti    
c00137ff:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013803:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013809:	e9 f0 fe ff ff       	jmp    c00136fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001380e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013815:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001381c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013822:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013828:	0f 86 ae 00 00 00    	jbe    c00138dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001382e:	fa                   	cli    
c001382f:	51                   	push   ecx
c0013830:	31 ff                	xor    edi,edi
c0013832:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013839:	c1 ee 0c             	shr    esi,0xc
c001383c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013842:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013848:	6a 00                	push   0x0
c001384a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001384f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013852:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013858:	e8 ed 62 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c001385d:	83 c4 10             	add    esp,0x10
c0013860:	e8 71 45 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0013865:	47                   	inc    edi
c0013866:	6a 07                	push   0x7
c0013868:	53                   	push   ebx
c0013869:	50                   	push   eax
c001386a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001386e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013874:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013877:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001387d:	e8 62 64 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013882:	58                   	pop    eax
c0013883:	5a                   	pop    edx
c0013884:	68 07 0c 00 00       	push   0xc07
c0013889:	55                   	push   ebp
c001388a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013890:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013894:	50                   	push   eax
c0013895:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001389c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138a2:	6a 00                	push   0x0
c00138a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138b2:	e8 0f 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00138b7:	83 c4 1c             	add    esp,0x1c
c00138ba:	68 00 10 00 00       	push   0x1000
c00138bf:	6a 00                	push   0x0
c00138c1:	53                   	push   ebx
c00138c2:	e8 29 cc fe ff       	call   c00004f0 <memset>
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	39 fe                	cmp    esi,edi
c00138cc:	77 92                	ja     c0013860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00138ce:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138d3:	48                   	dec    eax
c00138d4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138d9:	75 01                	jne    c00138dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138db:	fb                   	sti    
c00138dc:	83 ec 0c             	sub    esp,0xc
c00138df:	53                   	push   ebx
c00138e0:	e8 32 60 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	b0 01                	mov    al,0x1
c00138ea:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138f0:	5b                   	pop    ebx
c00138f1:	5e                   	pop    esi
c00138f2:	5f                   	pop    edi
c00138f3:	5d                   	pop    ebp
c00138f4:	c3                   	ret    

c00138f5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138f5:	55                   	push   ebp
c00138f6:	57                   	push   edi
c00138f7:	56                   	push   esi
c00138f8:	53                   	push   ebx
c00138f9:	83 ec 48             	sub    esp,0x48
c00138fc:	68 14 01 00 00       	push   0x114
c0013901:	e8 c5 41 ff ff       	call   c0007acb <malloc>
c0013906:	83 c4 0c             	add    esp,0xc
c0013909:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001390d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013911:	89 c7                	mov    edi,eax
c0013913:	50                   	push   eax
c0013914:	e8 2d 76 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0013919:	58                   	pop    eax
c001391a:	5a                   	pop    edx
c001391b:	6a 01                	push   0x1
c001391d:	57                   	push   edi
c001391e:	e8 df 76 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0013923:	83 c4 10             	add    esp,0x10
c0013926:	85 c0                	test   eax,eax
c0013928:	0f 85 4c 01 00 00    	jne    c0013a7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001392e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013936:	83 ec 0c             	sub    esp,0xc
c0013939:	6a 34                	push   0x34
c001393b:	e8 8b 41 ff ff       	call   c0007acb <malloc>
c0013940:	89 c3                	mov    ebx,eax
c0013942:	58                   	pop    eax
c0013943:	8b 07                	mov    eax,DWORD PTR [edi]
c0013945:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013949:	56                   	push   esi
c001394a:	53                   	push   ebx
c001394b:	6a 00                	push   0x0
c001394d:	6a 34                	push   0x34
c001394f:	57                   	push   edi
c0013950:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013953:	83 c4 20             	add    esp,0x20
c0013956:	85 c0                	test   eax,eax
c0013958:	0f 85 1c 01 00 00    	jne    c0013a7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001395e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013964:	0f 85 10 01 00 00    	jne    c0013a7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001396a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001396d:	85 c0                	test   eax,eax
c001396f:	0f 84 05 01 00 00    	je     c0013a7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013975:	31 d2                	xor    edx,edx
c0013977:	55                   	push   ebp
c0013978:	52                   	push   edx
c0013979:	50                   	push   eax
c001397a:	57                   	push   edi
c001397b:	e8 40 77 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013980:	83 c4 10             	add    esp,0x10
c0013983:	85 c0                	test   eax,eax
c0013985:	0f 85 ef 00 00 00    	jne    c0013a7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001398b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001398e:	83 ec 0c             	sub    esp,0xc
c0013991:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013995:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013999:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001399d:	0f af c2             	imul   eax,edx
c00139a0:	50                   	push   eax
c00139a1:	e8 25 41 ff ff       	call   c0007acb <malloc>
c00139a6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139a8:	89 34 24             	mov    DWORD PTR [esp],esi
c00139ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00139af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139b3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00139b7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00139bb:	0f af c2             	imul   eax,edx
c00139be:	99                   	cdq    
c00139bf:	52                   	push   edx
c00139c0:	50                   	push   eax
c00139c1:	57                   	push   edi
c00139c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139c5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00139c8:	83 c4 20             	add    esp,0x20
c00139cb:	85 c0                	test   eax,eax
c00139cd:	0f 84 a7 00 00 00    	je     c0013a7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139d3:	31 d2                	xor    edx,edx
c00139d5:	51                   	push   ecx
c00139d6:	52                   	push   edx
c00139d7:	50                   	push   eax
c00139d8:	57                   	push   edi
c00139d9:	e8 e2 76 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c00139de:	83 c4 10             	add    esp,0x10
c00139e1:	85 c0                	test   eax,eax
c00139e3:	0f 85 91 00 00 00    	jne    c0013a7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139e9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139ed:	83 ec 0c             	sub    esp,0xc
c00139f0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139f4:	0f af c2             	imul   eax,edx
c00139f7:	50                   	push   eax
c00139f8:	e8 ce 40 ff ff       	call   c0007acb <malloc>
c00139fd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a0a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a0e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a12:	0f af c2             	imul   eax,edx
c0013a15:	99                   	cdq    
c0013a16:	52                   	push   edx
c0013a17:	50                   	push   eax
c0013a18:	57                   	push   edi
c0013a19:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a1c:	83 c4 20             	add    esp,0x20
c0013a1f:	31 c9                	xor    ecx,ecx
c0013a21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a29:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013a2d:	0f b7 e9             	movzx  ebp,cx
c0013a30:	0f 83 86 00 00 00    	jae    c0013abc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013a36:	c1 e5 05             	shl    ebp,0x5
c0013a39:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013a3d:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013a41:	75 73                	jne    c0013ab6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013a43:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013a4a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013a4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a51:	52                   	push   edx
c0013a52:	31 d2                	xor    edx,edx
c0013a54:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013a57:	52                   	push   edx
c0013a58:	50                   	push   eax
c0013a59:	57                   	push   edi
c0013a5a:	e8 61 76 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013a5f:	83 c4 10             	add    esp,0x10
c0013a62:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a66:	85 c0                	test   eax,eax
c0013a68:	74 17                	je     c0013a81 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013a6a:	83 ec 0c             	sub    esp,0xc
c0013a6d:	68 65 10 02 c0       	push   0xc0021065
c0013a72:	e8 27 6f ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	31 c0                	xor    eax,eax
c0013a7c:	e9 8b 00 00 00       	jmp    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013a81:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a85:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a88:	83 ec 0c             	sub    esp,0xc
c0013a8b:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a8e:	50                   	push   eax
c0013a8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a93:	56                   	push   esi
c0013a94:	57                   	push   edi
c0013a95:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a99:	e8 d0 fb ff ff       	call   c001366e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a9e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013aa2:	83 c4 20             	add    esp,0x20
c0013aa5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013aa9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013aad:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013ab2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013ab6:	41                   	inc    ecx
c0013ab7:	e9 6d ff ff ff       	jmp    c0013a29 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013abc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013ac0:	83 ec 0c             	sub    esp,0xc
c0013ac3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013acb:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013ad1:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013ad7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013adc:	05 00 10 00 00       	add    eax,0x1000
c0013ae1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae8:	e8 ee 3f ff ff       	call   c0007adb <free>
c0013aed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013af0:	e8 e6 3f ff ff       	call   c0007adb <free>
c0013af5:	58                   	pop    eax
c0013af6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013afa:	e8 dc 3f ff ff       	call   c0007adb <free>
c0013aff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013b02:	e8 59 75 ff ff       	call   c000b060 <File::close()>
c0013b07:	83 c4 10             	add    esp,0x10
c0013b0a:	b0 01                	mov    al,0x1
c0013b0c:	83 c4 3c             	add    esp,0x3c
c0013b0f:	5b                   	pop    ebx
c0013b10:	5e                   	pop    esi
c0013b11:	5f                   	pop    edi
c0013b12:	5d                   	pop    ebp
c0013b13:	c3                   	ret    

c0013b14 <Thr::runtimeReferenceHelper()>:
c0013b14:	83 ec 18             	sub    esp,0x18
c0013b17:	68 6d 10 02 c0       	push   0xc002106d
c0013b1c:	e8 7d 6e ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0013b21:	fa                   	cli    
c0013b22:	83 c4 10             	add    esp,0x10
c0013b25:	eb fe                	jmp    c0013b25 <Thr::runtimeReferenceHelper()+0x11>

c0013b27 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b27:	57                   	push   edi
c0013b28:	56                   	push   esi
c0013b29:	53                   	push   ebx
c0013b2a:	31 db                	xor    ebx,ebx
c0013b2c:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b32:	7e 3c                	jle    c0013b70 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b34:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b3b:	31 ff                	xor    edi,edi
c0013b3d:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b44:	7e 27                	jle    c0013b6d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b46:	50                   	push   eax
c0013b47:	50                   	push   eax
c0013b48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b4c:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b4e:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b55:	50                   	push   eax
c0013b56:	e8 25 cc fe ff       	call   c0000780 <strcmp>
c0013b5b:	83 c4 10             	add    esp,0x10
c0013b5e:	85 c0                	test   eax,eax
c0013b60:	75 05                	jne    c0013b67 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b62:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b65:	eb 0b                	jmp    c0013b72 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b67:	83 c6 10             	add    esi,0x10
c0013b6a:	47                   	inc    edi
c0013b6b:	eb d0                	jmp    c0013b3d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b6d:	43                   	inc    ebx
c0013b6e:	eb bc                	jmp    c0013b2c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b70:	31 c0                	xor    eax,eax
c0013b72:	5b                   	pop    ebx
c0013b73:	5e                   	pop    esi
c0013b74:	5f                   	pop    edi
c0013b75:	c3                   	ret    

c0013b76 <Thr::loadKernelSymbolTable(char const*)>:
c0013b76:	55                   	push   ebp
c0013b77:	57                   	push   edi
c0013b78:	56                   	push   esi
c0013b79:	53                   	push   ebx
c0013b7a:	83 ec 68             	sub    esp,0x68
c0013b7d:	68 14 01 00 00       	push   0x114
c0013b82:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b88:	e8 3e 3f ff ff       	call   c0007acb <malloc>
c0013b8d:	83 c4 0c             	add    esp,0xc
c0013b90:	56                   	push   esi
c0013b91:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b95:	89 c3                	mov    ebx,eax
c0013b97:	50                   	push   eax
c0013b98:	e8 a9 73 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0013b9d:	5e                   	pop    esi
c0013b9e:	5f                   	pop    edi
c0013b9f:	6a 01                	push   0x1
c0013ba1:	53                   	push   ebx
c0013ba2:	e8 5b 74 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0013ba7:	83 c4 10             	add    esp,0x10
c0013baa:	85 c0                	test   eax,eax
c0013bac:	74 0a                	je     c0013bb8 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	68 8f 10 02 c0       	push   0xc002108f
c0013bb6:	eb 34                	jmp    c0013bec <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013bb8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013bc0:	83 ec 0c             	sub    esp,0xc
c0013bc3:	6a 34                	push   0x34
c0013bc5:	e8 01 3f ff ff       	call   c0007acb <malloc>
c0013bca:	59                   	pop    ecx
c0013bcb:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013bcf:	89 c7                	mov    edi,eax
c0013bd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bd3:	56                   	push   esi
c0013bd4:	57                   	push   edi
c0013bd5:	6a 00                	push   0x0
c0013bd7:	6a 34                	push   0x34
c0013bd9:	53                   	push   ebx
c0013bda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bdd:	83 c4 20             	add    esp,0x20
c0013be0:	85 c0                	test   eax,eax
c0013be2:	74 17                	je     c0013bfb <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	68 a6 10 02 c0       	push   0xc00210a6
c0013bec:	e8 78 cc ff ff       	call   c0010869 <KePanic(char const*)>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	31 c0                	xor    eax,eax
c0013bf6:	e9 31 02 00 00       	jmp    c0013e2c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013bfb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013c01:	75 e1                	jne    c0013be4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c03:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013c06:	85 c0                	test   eax,eax
c0013c08:	74 da                	je     c0013be4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c0a:	52                   	push   edx
c0013c0b:	31 d2                	xor    edx,edx
c0013c0d:	52                   	push   edx
c0013c0e:	50                   	push   eax
c0013c0f:	53                   	push   ebx
c0013c10:	e8 ab 74 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013c15:	83 c4 10             	add    esp,0x10
c0013c18:	85 c0                	test   eax,eax
c0013c1a:	75 c8                	jne    c0013be4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	31 ed                	xor    ebp,ebp
c0013c25:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c29:	0f af c2             	imul   eax,edx
c0013c2c:	50                   	push   eax
c0013c2d:	e8 99 3e ff ff       	call   c0007acb <malloc>
c0013c32:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c34:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c3f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c43:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c47:	0f af c2             	imul   eax,edx
c0013c4a:	99                   	cdq    
c0013c4b:	52                   	push   edx
c0013c4c:	50                   	push   eax
c0013c4d:	53                   	push   ebx
c0013c4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c51:	83 c4 20             	add    esp,0x20
c0013c54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c5c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c64:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c74:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c78:	0f b7 f5             	movzx  esi,bp
c0013c7b:	0f 83 a7 00 00 00    	jae    c0013d28 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c81:	6b f6 28             	imul   esi,esi,0x28
c0013c84:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c88:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c8f:	50                   	push   eax
c0013c90:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c98:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c9a:	6b c0 28             	imul   eax,eax,0x28
c0013c9d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013ca1:	89 d0                	mov    eax,edx
c0013ca3:	31 d2                	xor    edx,edx
c0013ca5:	52                   	push   edx
c0013ca6:	50                   	push   eax
c0013ca7:	53                   	push   ebx
c0013ca8:	e8 13 74 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013cad:	83 c4 0c             	add    esp,0xc
c0013cb0:	6a 20                	push   0x20
c0013cb2:	6a 00                	push   0x0
c0013cb4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013cb8:	52                   	push   edx
c0013cb9:	e8 32 c8 fe ff       	call   c00004f0 <memset>
c0013cbe:	58                   	pop    eax
c0013cbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013cc5:	51                   	push   ecx
c0013cc6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013cca:	52                   	push   edx
c0013ccb:	6a 00                	push   0x0
c0013ccd:	6a 1f                	push   0x1f
c0013ccf:	53                   	push   ebx
c0013cd0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cd3:	83 c4 18             	add    esp,0x18
c0013cd6:	68 bd 10 02 c0       	push   0xc00210bd
c0013cdb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013cdf:	52                   	push   edx
c0013ce0:	e8 9b ca fe ff       	call   c0000780 <strcmp>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	85 c0                	test   eax,eax
c0013cea:	75 0f                	jne    c0013cfb <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cec:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cfb:	50                   	push   eax
c0013cfc:	50                   	push   eax
c0013cfd:	68 c5 10 02 c0       	push   0xc00210c5
c0013d02:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013d06:	50                   	push   eax
c0013d07:	e8 74 ca fe ff       	call   c0000780 <strcmp>
c0013d0c:	83 c4 10             	add    esp,0x10
c0013d0f:	85 c0                	test   eax,eax
c0013d11:	75 0f                	jne    c0013d22 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013d13:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d22:	45                   	inc    ebp
c0013d23:	e9 4c ff ff ff       	jmp    c0013c74 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d28:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d2d:	75 10                	jne    c0013d3f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013d2f:	83 ec 0c             	sub    esp,0xc
c0013d32:	68 cd 10 02 c0       	push   0xc00210cd
c0013d37:	e8 2d cb ff ff       	call   c0010869 <KePanic(char const*)>
c0013d3c:	83 c4 10             	add    esp,0x10
c0013d3f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d44:	75 10                	jne    c0013d56 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d46:	83 ec 0c             	sub    esp,0xc
c0013d49:	68 cd 10 02 c0       	push   0xc00210cd
c0013d4e:	e8 16 cb ff ff       	call   c0010869 <KePanic(char const*)>
c0013d53:	83 c4 10             	add    esp,0x10
c0013d56:	50                   	push   eax
c0013d57:	31 d2                	xor    edx,edx
c0013d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5d:	52                   	push   edx
c0013d5e:	50                   	push   eax
c0013d5f:	53                   	push   ebx
c0013d60:	e8 5b 73 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013d65:	5a                   	pop    edx
c0013d66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d6a:	e8 5c 3d ff ff       	call   c0007acb <malloc>
c0013d6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d73:	31 c9                	xor    ecx,ecx
c0013d75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7b:	5e                   	pop    esi
c0013d7c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d80:	55                   	push   ebp
c0013d81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d85:	51                   	push   ecx
c0013d86:	52                   	push   edx
c0013d87:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d8b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d8f:	53                   	push   ebx
c0013d90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d93:	83 c4 14             	add    esp,0x14
c0013d96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d9a:	e8 2c 3d ff ff       	call   c0007acb <malloc>
c0013d9f:	89 c6                	mov    esi,eax
c0013da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013da6:	56                   	push   esi
c0013da7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013dab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013daf:	51                   	push   ecx
c0013db0:	52                   	push   edx
c0013db1:	53                   	push   ebx
c0013db2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013db5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013db9:	83 c4 1c             	add    esp,0x1c
c0013dbc:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013dc2:	c1 e8 04             	shr    eax,0x4
c0013dc5:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013dcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dd0:	31 d2                	xor    edx,edx
c0013dd2:	52                   	push   edx
c0013dd3:	50                   	push   eax
c0013dd4:	53                   	push   ebx
c0013dd5:	e8 e6 72 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013dda:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013ddc:	31 d2                	xor    edx,edx
c0013dde:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013de1:	56                   	push   esi
c0013de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013de6:	52                   	push   edx
c0013de7:	50                   	push   eax
c0013de8:	53                   	push   ebx
c0013de9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dec:	83 c4 14             	add    esp,0x14
c0013def:	53                   	push   ebx
c0013df0:	e8 6b 72 ff ff       	call   c000b060 <File::close()>
c0013df5:	5d                   	pop    ebp
c0013df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013dfa:	e8 dc 3c ff ff       	call   c0007adb <free>
c0013dff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e02:	e8 d4 3c ff ff       	call   c0007adb <free>
c0013e07:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013e0c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013e1a:	8d 50 01             	lea    edx,[eax+0x1]
c0013e1d:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e24:	b0 01                	mov    al,0x1
c0013e26:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e2c:	83 c4 5c             	add    esp,0x5c
c0013e2f:	5b                   	pop    ebx
c0013e30:	5e                   	pop    esi
c0013e31:	5f                   	pop    edi
c0013e32:	5d                   	pop    ebp
c0013e33:	c3                   	ret    

c0013e34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e34:	55                   	push   ebp
c0013e35:	57                   	push   edi
c0013e36:	56                   	push   esi
c0013e37:	53                   	push   ebx
c0013e38:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e3e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e45:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013e4b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0013e4f:	68 14 01 00 00       	push   0x114
c0013e54:	e8 72 3c ff ff       	call   c0007acb <malloc>
c0013e59:	83 c4 0c             	add    esp,0xc
c0013e5c:	56                   	push   esi
c0013e5d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e64:	50                   	push   eax
c0013e65:	89 c3                	mov    ebx,eax
c0013e67:	e8 da 70 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0013e6c:	5f                   	pop    edi
c0013e6d:	5d                   	pop    ebp
c0013e6e:	6a 01                	push   0x1
c0013e70:	53                   	push   ebx
c0013e71:	e8 8c 71 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0013e76:	83 c4 10             	add    esp,0x10
c0013e79:	85 c0                	test   eax,eax
c0013e7b:	0f 85 b3 06 00 00    	jne    c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e81:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e89:	83 ec 0c             	sub    esp,0xc
c0013e8c:	6a 34                	push   0x34
c0013e8e:	e8 38 3c ff ff       	call   c0007acb <malloc>
c0013e93:	5e                   	pop    esi
c0013e94:	8d 74 24 54          	lea    esi,[esp+0x54]
c0013e98:	89 c5                	mov    ebp,eax
c0013e9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e9c:	56                   	push   esi
c0013e9d:	55                   	push   ebp
c0013e9e:	6a 00                	push   0x0
c0013ea0:	6a 34                	push   0x34
c0013ea2:	53                   	push   ebx
c0013ea3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea6:	83 c4 20             	add    esp,0x20
c0013ea9:	85 c0                	test   eax,eax
c0013eab:	0f 85 83 06 00 00    	jne    c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013eb1:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013eb8:	0f 85 76 06 00 00    	jne    c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ebe:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013ec1:	85 c0                	test   eax,eax
c0013ec3:	0f 84 6b 06 00 00    	je     c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ec9:	31 d2                	xor    edx,edx
c0013ecb:	51                   	push   ecx
c0013ecc:	52                   	push   edx
c0013ecd:	50                   	push   eax
c0013ece:	53                   	push   ebx
c0013ecf:	e8 ec 71 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	85 c0                	test   eax,eax
c0013ed9:	0f 85 55 06 00 00    	jne    c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013edf:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013ee2:	83 ec 0c             	sub    esp,0xc
c0013ee5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013ee9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013eed:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ef1:	0f af c2             	imul   eax,edx
c0013ef4:	50                   	push   eax
c0013ef5:	e8 d1 3b ff ff       	call   c0007acb <malloc>
c0013efa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013efc:	89 34 24             	mov    DWORD PTR [esp],esi
c0013eff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f07:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013f0b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013f0f:	0f af c2             	imul   eax,edx
c0013f12:	99                   	cdq    
c0013f13:	52                   	push   edx
c0013f14:	50                   	push   eax
c0013f15:	53                   	push   ebx
c0013f16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f19:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013f1c:	83 c4 20             	add    esp,0x20
c0013f1f:	85 c0                	test   eax,eax
c0013f21:	0f 84 0d 06 00 00    	je     c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f27:	52                   	push   edx
c0013f28:	31 d2                	xor    edx,edx
c0013f2a:	52                   	push   edx
c0013f2b:	50                   	push   eax
c0013f2c:	53                   	push   ebx
c0013f2d:	e8 8e 71 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013f32:	83 c4 10             	add    esp,0x10
c0013f35:	85 c0                	test   eax,eax
c0013f37:	0f 85 f7 05 00 00    	jne    c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f3d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f41:	83 ec 0c             	sub    esp,0xc
c0013f44:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f48:	0f af c2             	imul   eax,edx
c0013f4b:	50                   	push   eax
c0013f4c:	e8 7a 3b ff ff       	call   c0007acb <malloc>
c0013f51:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f53:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f5e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f62:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f66:	0f af c2             	imul   eax,edx
c0013f69:	99                   	cdq    
c0013f6a:	52                   	push   edx
c0013f6b:	50                   	push   eax
c0013f6c:	53                   	push   ebx
c0013f6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f70:	83 c4 20             	add    esp,0x20
c0013f73:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0013f79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013f7c:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0013f80:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0013f84:	73 78                	jae    c0013ffe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0013f86:	c1 e7 05             	shl    edi,0x5
c0013f89:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013f8d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013f90:	75 63                	jne    c0013ff5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0013f92:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013f95:	31 d2                	xor    edx,edx
c0013f97:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0013f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f9e:	50                   	push   eax
c0013f9f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013fa2:	52                   	push   edx
c0013fa3:	50                   	push   eax
c0013fa4:	53                   	push   ebx
c0013fa5:	e8 16 71 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0013faa:	83 c4 10             	add    esp,0x10
c0013fad:	85 c0                	test   eax,eax
c0013faf:	0f 85 7f 05 00 00    	jne    c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013fb5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	31 d2                	xor    edx,edx
c0013fc1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013fc5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013fc7:	01 c6                	add    esi,eax
c0013fc9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fd0:	50                   	push   eax
c0013fd1:	56                   	push   esi
c0013fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd6:	52                   	push   edx
c0013fd7:	50                   	push   eax
c0013fd8:	53                   	push   ebx
c0013fd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fdc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013fdf:	83 c4 1c             	add    esp,0x1c
c0013fe2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013fe5:	50                   	push   eax
c0013fe6:	6a 00                	push   0x0
c0013fe8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fec:	56                   	push   esi
c0013fed:	e8 fe c4 fe ff       	call   c00004f0 <memset>
c0013ff2:	83 c4 10             	add    esp,0x10
c0013ff5:	66 ff 04 24          	inc    WORD PTR [esp]
c0013ff9:	e9 7b ff ff ff       	jmp    c0013f79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0013ffe:	50                   	push   eax
c0013fff:	68 00 01 00 00       	push   0x100
c0014004:	6a 00                	push   0x0
c0014006:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001400a:	50                   	push   eax
c001400b:	e8 e0 c4 fe ff       	call   c00004f0 <memset>
c0014010:	83 c4 0c             	add    esp,0xc
c0014013:	68 00 01 00 00       	push   0x100
c0014018:	6a 00                	push   0x0
c001401a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014021:	50                   	push   eax
c0014022:	e8 c9 c4 fe ff       	call   c00004f0 <memset>
c0014027:	83 c4 10             	add    esp,0x10
c001402a:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014031:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014038:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014040:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014048:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014050:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014058:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001405c:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014060:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014065:	0f 83 16 01 00 00    	jae    c0014181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001406b:	6b ff 28             	imul   edi,edi,0x28
c001406e:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014072:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014075:	51                   	push   ecx
c0014076:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001407a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001407e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014080:	6b d2 28             	imul   edx,edx,0x28
c0014083:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014087:	31 d2                	xor    edx,edx
c0014089:	52                   	push   edx
c001408a:	50                   	push   eax
c001408b:	53                   	push   ebx
c001408c:	e8 2f 70 ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0014091:	83 c4 0c             	add    esp,0xc
c0014094:	6a 20                	push   0x20
c0014096:	6a 00                	push   0x0
c0014098:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001409f:	51                   	push   ecx
c00140a0:	e8 4b c4 fe ff       	call   c00004f0 <memset>
c00140a5:	58                   	pop    eax
c00140a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140a8:	8d 54 24 58          	lea    edx,[esp+0x58]
c00140ac:	52                   	push   edx
c00140ad:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00140b4:	51                   	push   ecx
c00140b5:	6a 00                	push   0x0
c00140b7:	6a 1f                	push   0x1f
c00140b9:	53                   	push   ebx
c00140ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140bd:	83 c4 1c             	add    esp,0x1c
c00140c0:	6a 09                	push   0x9
c00140c2:	68 e7 10 02 c0       	push   0xc00210e7
c00140c7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140ce:	51                   	push   ecx
c00140cf:	e8 ac c2 fe ff       	call   c0000380 <memcmp>
c00140d4:	83 c4 10             	add    esp,0x10
c00140d7:	85 c0                	test   eax,eax
c00140d9:	75 1a                	jne    c00140f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00140db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140de:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140e1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00140e5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140e8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140ef:	89 d0                	mov    eax,edx
c00140f1:	40                   	inc    eax
c00140f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00140f5:	52                   	push   edx
c00140f6:	6a 09                	push   0x9
c00140f8:	68 f1 10 02 c0       	push   0xc00210f1
c00140fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014104:	50                   	push   eax
c0014105:	e8 76 c2 fe ff       	call   c0000380 <memcmp>
c001410a:	83 c4 10             	add    esp,0x10
c001410d:	85 c0                	test   eax,eax
c001410f:	75 1a                	jne    c001412b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014111:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014114:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014117:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001411b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001411e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014125:	89 d0                	mov    eax,edx
c0014127:	40                   	inc    eax
c0014128:	89 04 24             	mov    DWORD PTR [esp],eax
c001412b:	50                   	push   eax
c001412c:	50                   	push   eax
c001412d:	68 bd 10 02 c0       	push   0xc00210bd
c0014132:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014139:	50                   	push   eax
c001413a:	e8 41 c6 fe ff       	call   c0000780 <strcmp>
c001413f:	83 c4 10             	add    esp,0x10
c0014142:	85 c0                	test   eax,eax
c0014144:	75 0b                	jne    c0014151 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014146:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001414a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001414d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014151:	50                   	push   eax
c0014152:	50                   	push   eax
c0014153:	68 c5 10 02 c0       	push   0xc00210c5
c0014158:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001415f:	50                   	push   eax
c0014160:	e8 1b c6 fe ff       	call   c0000780 <strcmp>
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	85 c0                	test   eax,eax
c001416a:	75 0b                	jne    c0014177 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001416c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014170:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014173:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014177:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001417c:	e9 d7 fe ff ff       	jmp    c0014058 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014181:	50                   	push   eax
c0014182:	31 d2                	xor    edx,edx
c0014184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014188:	52                   	push   edx
c0014189:	50                   	push   eax
c001418a:	53                   	push   ebx
c001418b:	e8 30 6f ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0014190:	58                   	pop    eax
c0014191:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014195:	e8 31 39 ff ff       	call   c0007acb <malloc>
c001419a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001419c:	31 d2                	xor    edx,edx
c001419e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00141a2:	58                   	pop    eax
c00141a3:	8d 74 24 54          	lea    esi,[esp+0x54]
c00141a7:	56                   	push   esi
c00141a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00141ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b0:	52                   	push   edx
c00141b1:	50                   	push   eax
c00141b2:	53                   	push   ebx
c00141b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b6:	83 c4 14             	add    esp,0x14
c00141b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141bd:	e8 09 39 ff ff       	call   c0007acb <malloc>
c00141c2:	31 d2                	xor    edx,edx
c00141c4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00141c8:	83 c4 0c             	add    esp,0xc
c00141cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141cf:	52                   	push   edx
c00141d0:	50                   	push   eax
c00141d1:	53                   	push   ebx
c00141d2:	e8 e9 6e ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c00141d7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141d9:	31 d2                	xor    edx,edx
c00141db:	89 34 24             	mov    DWORD PTR [esp],esi
c00141de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00141e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141e6:	52                   	push   edx
c00141e7:	50                   	push   eax
c00141e8:	53                   	push   ebx
c00141e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141ec:	83 c4 20             	add    esp,0x20
c00141ef:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00141f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014200:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014204:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014207:	0f 84 2b 03 00 00    	je     c0014538 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001420d:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014214:	31 d2                	xor    edx,edx
c0014216:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001421a:	c1 e8 03             	shr    eax,0x3
c001421d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014221:	51                   	push   ecx
c0014222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014226:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001422a:	52                   	push   edx
c001422b:	50                   	push   eax
c001422c:	53                   	push   ebx
c001422d:	e8 8e 6e ff ff       	call   c000b0c0 <File::seek(unsigned long long)>
c0014232:	5e                   	pop    esi
c0014233:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014237:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001423e:	e8 88 38 ff ff       	call   c0007acb <malloc>
c0014243:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014245:	31 d2                	xor    edx,edx
c0014247:	89 c7                	mov    edi,eax
c0014249:	58                   	pop    eax
c001424a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001424e:	50                   	push   eax
c001424f:	57                   	push   edi
c0014250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014254:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001425b:	52                   	push   edx
c001425c:	50                   	push   eax
c001425d:	53                   	push   ebx
c001425e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014261:	83 c4 20             	add    esp,0x20
c0014264:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001426c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014270:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014274:	0f 8d a5 02 00 00    	jge    c001451f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001427a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001427f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014283:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014286:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001428a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001428e:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014292:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014296:	c1 e8 08             	shr    eax,0x8
c0014299:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001429d:	89 c2                	mov    edx,eax
c001429f:	c1 e2 04             	shl    edx,0x4
c00142a2:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00142a6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00142a9:	85 f6                	test   esi,esi
c00142ab:	0f 85 cf 00 00 00    	jne    c0014380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142b1:	83 ec 0c             	sub    esp,0xc
c00142b4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00142b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142bc:	03 02                	add    eax,DWORD PTR [edx]
c00142be:	50                   	push   eax
c00142bf:	e8 63 f8 ff ff       	call   c0013b27 <Thr::getAddressOfKernelSymbol(char const*)>
c00142c4:	83 c4 10             	add    esp,0x10
c00142c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142cb:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00142d0:	85 c0                	test   eax,eax
c00142d2:	89 c6                	mov    esi,eax
c00142d4:	0f 85 a6 00 00 00    	jne    c0014380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142da:	83 ec 0c             	sub    esp,0xc
c00142dd:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00142e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142e5:	03 02                	add    eax,DWORD PTR [edx]
c00142e7:	50                   	push   eax
c00142e8:	e8 67 c7 ff ff       	call   c0010a54 <KeResolveCompatibilitySymbol(char*)>
c00142ed:	83 c4 10             	add    esp,0x10
c00142f0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142f4:	85 c0                	test   eax,eax
c00142f6:	89 c6                	mov    esi,eax
c00142f8:	0f 85 82 00 00 00    	jne    c0014380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142fe:	50                   	push   eax
c00142ff:	50                   	push   eax
c0014300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014304:	03 02                	add    eax,DWORD PTR [edx]
c0014306:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001430a:	50                   	push   eax
c001430b:	68 fb 10 02 c0       	push   0xc00210fb
c0014310:	e8 89 66 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0014315:	58                   	pop    eax
c0014316:	5a                   	pop    edx
c0014317:	68 15 11 02 c0       	push   0xc0021115
c001431c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014323:	51                   	push   ecx
c0014324:	e8 27 c3 fe ff       	call   c0000650 <strcpy>
c0014329:	59                   	pop    ecx
c001432a:	58                   	pop    eax
c001432b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001432f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014333:	03 02                	add    eax,DWORD PTR [edx]
c0014335:	50                   	push   eax
c0014336:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001433d:	51                   	push   ecx
c001433e:	e8 2d c5 fe ff       	call   c0000870 <strcat>
c0014343:	58                   	pop    eax
c0014344:	5a                   	pop    edx
c0014345:	68 ab 11 02 c0       	push   0xc00211ab
c001434a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014351:	51                   	push   ecx
c0014352:	e8 19 c5 fe ff       	call   c0000870 <strcat>
c0014357:	83 c4 10             	add    esp,0x10
c001435a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001435f:	0f 84 77 01 00 00    	je     c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014365:	83 ec 0c             	sub    esp,0xc
c0014368:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001436f:	51                   	push   ecx
c0014370:	e8 f4 c4 ff ff       	call   c0010869 <KePanic(char const*)>
c0014375:	83 c4 10             	add    esp,0x10
c0014378:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001437c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014380:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014385:	83 f8 01             	cmp    eax,0x1
c0014388:	0f 85 9b 00 00 00    	jne    c0014429 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001438e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014392:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014399:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c001439d:	01 c8                	add    eax,ecx
c001439f:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00143a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00143ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00143ad:	0f 94 c2             	sete   dl
c00143b0:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00143b8:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c00143bd:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c00143c1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143c6:	0f b6 d2             	movzx  edx,dl
c00143c9:	74 41                	je     c001440c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00143cb:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00143ce:	85 d2                	test   edx,edx
c00143d0:	75 15                	jne    c00143e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00143d2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143d6:	66 83 f8 0c          	cmp    ax,0xc
c00143da:	76 05                	jbe    c00143e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00143dc:	b8 0c 00 00 00       	mov    eax,0xc
c00143e1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00143e5:	76 37                	jbe    c001441e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143e7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00143ec:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00143f0:	0f 84 e6 00 00 00    	je     c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	68 2c 11 02 c0       	push   0xc002112c
c00143fe:	e8 66 c4 ff ff       	call   c0010869 <KePanic(char const*)>
c0014403:	83 c4 10             	add    esp,0x10
c0014406:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001440a:	eb 12                	jmp    c001441e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001440c:	01 c1                	add    ecx,eax
c001440e:	85 d2                	test   edx,edx
c0014410:	75 0c                	jne    c001441e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014412:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014416:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001441a:	77 02                	ja     c001441e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001441c:	01 f1                	add    ecx,esi
c001441e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014422:	89 08                	mov    DWORD PTR [eax],ecx
c0014424:	e9 ed 00 00 00       	jmp    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014429:	83 f8 02             	cmp    eax,0x2
c001442c:	0f 85 81 00 00 00    	jne    c00144b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014432:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014439:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001443d:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014441:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014449:	74 21                	je     c001446c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001444b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014453:	74 17                	je     c001446c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014455:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014459:	ba 0a 00 00 00       	mov    edx,0xa
c001445e:	83 f9 0e             	cmp    ecx,0xe
c0014461:	77 03                	ja     c0014466 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014463:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014466:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001446a:	76 1f                	jbe    c001448b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c001446c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014471:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014475:	74 65                	je     c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014477:	83 ec 0c             	sub    esp,0xc
c001447a:	68 48 11 02 c0       	push   0xc0021148
c001447f:	e8 e5 c3 ff ff       	call   c0010869 <KePanic(char const*)>
c0014484:	83 c4 10             	add    esp,0x10
c0014487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001448b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014490:	8b 10                	mov    edx,DWORD PTR [eax]
c0014492:	74 15                	je     c00144a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014494:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014498:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001449f:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00144a3:	01 d1                	add    ecx,edx
c00144a5:	01 ce                	add    esi,ecx
c00144a7:	eb 06                	jmp    c00144af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00144a9:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00144ad:	01 d6                	add    esi,edx
c00144af:	89 30                	mov    DWORD PTR [eax],esi
c00144b1:	eb 63                	jmp    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00144b3:	56                   	push   esi
c00144b4:	56                   	push   esi
c00144b5:	50                   	push   eax
c00144b6:	68 64 11 02 c0       	push   0xc0021164
c00144bb:	e8 de 64 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00144c0:	83 c4 10             	add    esp,0x10
c00144c3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00144c8:	74 12                	je     c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00144ca:	83 ec 0c             	sub    esp,0xc
c00144cd:	68 6f 11 02 c0       	push   0xc002116f
c00144d2:	e8 92 c3 ff ff       	call   c0010869 <KePanic(char const*)>
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	eb 3a                	jmp    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00144dc:	83 ec 0c             	sub    esp,0xc
c00144df:	53                   	push   ebx
c00144e0:	e8 7b 6b ff ff       	call   c000b060 <File::close()>
c00144e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144f0:	e8 e6 35 ff ff       	call   c0007adb <free>
c00144f5:	59                   	pop    ecx
c00144f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144fa:	e8 dc 35 ff ff       	call   c0007adb <free>
c00144ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014502:	e8 d4 35 ff ff       	call   c0007adb <free>
c0014507:	5b                   	pop    ebx
c0014508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001450c:	e8 ca 35 ff ff       	call   c0007adb <free>
c0014511:	83 c4 10             	add    esp,0x10
c0014514:	eb 1e                	jmp    c0014534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014516:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001451a:	e9 4d fd ff ff       	jmp    c001426c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001451f:	83 ec 0c             	sub    esp,0xc
c0014522:	57                   	push   edi
c0014523:	e8 b3 35 ff ff       	call   c0007adb <free>
c0014528:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001452c:	83 c4 10             	add    esp,0x10
c001452f:	e9 cc fc ff ff       	jmp    c0014200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014534:	31 c0                	xor    eax,eax
c0014536:	eb 32                	jmp    c001456a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014538:	83 ec 0c             	sub    esp,0xc
c001453b:	53                   	push   ebx
c001453c:	e8 1f 6b ff ff       	call   c000b060 <File::close()>
c0014541:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014546:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014549:	58                   	pop    eax
c001454a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001454e:	e8 88 35 ff ff       	call   c0007adb <free>
c0014553:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014556:	e8 80 35 ff ff       	call   c0007adb <free>
c001455b:	5a                   	pop    edx
c001455c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014560:	e8 76 35 ff ff       	call   c0007adb <free>
c0014565:	83 c4 10             	add    esp,0x10
c0014568:	b0 01                	mov    al,0x1
c001456a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014570:	5b                   	pop    ebx
c0014571:	5e                   	pop    esi
c0014572:	5f                   	pop    edi
c0014573:	5d                   	pop    ebp
c0014574:	c3                   	ret    

c0014575 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014575:	56                   	push   esi
c0014576:	31 d2                	xor    edx,edx
c0014578:	53                   	push   ebx
c0014579:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001457f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014583:	39 d3                	cmp    ebx,edx
c0014585:	7e 1b                	jle    c00145a2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014587:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c001458e:	39 c8                	cmp    eax,ecx
c0014590:	77 0d                	ja     c001459f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014592:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014599:	01 c6                	add    esi,eax
c001459b:	39 ce                	cmp    esi,ecx
c001459d:	77 05                	ja     c00145a4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001459f:	42                   	inc    edx
c00145a0:	eb e1                	jmp    c0014583 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00145a2:	31 c0                	xor    eax,eax
c00145a4:	5b                   	pop    ebx
c00145a5:	5e                   	pop    esi
c00145a6:	c3                   	ret    

c00145a7 <Thr::getDriverNameFromAddress(unsigned long)>:
c00145a7:	53                   	push   ebx
c00145a8:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00145ae:	31 c0                	xor    eax,eax
c00145b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00145b4:	39 c3                	cmp    ebx,eax
c00145b6:	7e 22                	jle    c00145da <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00145b8:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c00145bf:	39 ca                	cmp    edx,ecx
c00145c1:	77 14                	ja     c00145d7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145c3:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00145ca:	39 ca                	cmp    edx,ecx
c00145cc:	76 09                	jbe    c00145d7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145ce:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145d5:	eb 05                	jmp    c00145dc <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145d7:	40                   	inc    eax
c00145d8:	eb da                	jmp    c00145b4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145da:	31 c0                	xor    eax,eax
c00145dc:	5b                   	pop    ebx
c00145dd:	c3                   	ret    

c00145de <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145de:	53                   	push   ebx
c00145df:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145e3:	53                   	push   ebx
c00145e4:	e8 8c ff ff ff       	call   c0014575 <Thr::getDriverBaseFromAddress(unsigned long)>
c00145e9:	5a                   	pop    edx
c00145ea:	31 d2                	xor    edx,edx
c00145ec:	85 c0                	test   eax,eax
c00145ee:	74 04                	je     c00145f4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145f0:	89 da                	mov    edx,ebx
c00145f2:	29 c2                	sub    edx,eax
c00145f4:	5b                   	pop    ebx
c00145f5:	89 d0                	mov    eax,edx
c00145f7:	c3                   	ret    

c00145f8 <Thr::loadDLL(char const*, bool)>:
c00145f8:	55                   	push   ebp
c00145f9:	57                   	push   edi
c00145fa:	56                   	push   esi
c00145fb:	53                   	push   ebx
c00145fc:	81 ec 34 01 00 00    	sub    esp,0x134
c0014602:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014609:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014610:	56                   	push   esi
c0014611:	68 87 11 02 c0       	push   0xc0021187
c0014616:	e8 83 63 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001461b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014622:	e8 a4 34 ff ff       	call   c0007acb <malloc>
c0014627:	83 c4 0c             	add    esp,0xc
c001462a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014630:	56                   	push   esi
c0014631:	50                   	push   eax
c0014632:	89 c3                	mov    ebx,eax
c0014634:	e8 0d 69 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0014639:	83 c4 10             	add    esp,0x10
c001463c:	85 db                	test   ebx,ebx
c001463e:	75 3c                	jne    c001467c <Thr::loadDLL(char const*, bool)+0x84>
c0014640:	89 e8                	mov    eax,ebp
c0014642:	84 c0                	test   al,al
c0014644:	0f 84 e1 01 00 00    	je     c001482b <Thr::loadDLL(char const*, bool)+0x233>
c001464a:	50                   	push   eax
c001464b:	50                   	push   eax
c001464c:	68 98 11 02 c0       	push   0xc0021198
c0014651:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014655:	57                   	push   edi
c0014656:	e8 f5 bf fe ff       	call   c0000650 <strcpy>
c001465b:	58                   	pop    eax
c001465c:	5a                   	pop    edx
c001465d:	56                   	push   esi
c001465e:	57                   	push   edi
c001465f:	e8 0c c2 fe ff       	call   c0000870 <strcat>
c0014664:	59                   	pop    ecx
c0014665:	58                   	pop    eax
c0014666:	68 ab 11 02 c0       	push   0xc00211ab
c001466b:	57                   	push   edi
c001466c:	e8 ff c1 fe ff       	call   c0000870 <strcat>
c0014671:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014674:	e8 f0 c1 ff ff       	call   c0010869 <KePanic(char const*)>
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	50                   	push   eax
c001467d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014681:	50                   	push   eax
c0014682:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014686:	50                   	push   eax
c0014687:	53                   	push   ebx
c0014688:	e8 21 6c ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	85 db                	test   ebx,ebx
c0014692:	74 0c                	je     c00146a0 <Thr::loadDLL(char const*, bool)+0xa8>
c0014694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014696:	83 ec 0c             	sub    esp,0xc
c0014699:	53                   	push   ebx
c001469a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001469d:	83 c4 10             	add    esp,0x10
c00146a0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00146a5:	75 0a                	jne    c00146b1 <Thr::loadDLL(char const*, bool)+0xb9>
c00146a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146ab:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00146af:	75 3e                	jne    c00146ef <Thr::loadDLL(char const*, bool)+0xf7>
c00146b1:	89 e8                	mov    eax,ebp
c00146b3:	31 db                	xor    ebx,ebx
c00146b5:	84 c0                	test   al,al
c00146b7:	0f 84 6e 01 00 00    	je     c001482b <Thr::loadDLL(char const*, bool)+0x233>
c00146bd:	50                   	push   eax
c00146be:	50                   	push   eax
c00146bf:	68 98 11 02 c0       	push   0xc0021198
c00146c4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00146c8:	53                   	push   ebx
c00146c9:	e8 82 bf fe ff       	call   c0000650 <strcpy>
c00146ce:	58                   	pop    eax
c00146cf:	5a                   	pop    edx
c00146d0:	56                   	push   esi
c00146d1:	53                   	push   ebx
c00146d2:	e8 99 c1 fe ff       	call   c0000870 <strcat>
c00146d7:	59                   	pop    ecx
c00146d8:	5f                   	pop    edi
c00146d9:	68 ab 11 02 c0       	push   0xc00211ab
c00146de:	53                   	push   ebx
c00146df:	e8 8c c1 fe ff       	call   c0000870 <strcat>
c00146e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146e7:	e8 7d c1 ff ff       	call   c0010869 <KePanic(char const*)>
c00146ec:	83 c4 10             	add    esp,0x10
c00146ef:	53                   	push   ebx
c00146f0:	6a 03                	push   0x3
c00146f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146fa:	05 ff 0f 00 00       	add    eax,0xfff
c00146ff:	83 d2 00             	adc    edx,0x0
c0014702:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014706:	50                   	push   eax
c0014707:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001470d:	e8 de 56 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c0014712:	89 c3                	mov    ebx,eax
c0014714:	58                   	pop    eax
c0014715:	5a                   	pop    edx
c0014716:	53                   	push   ebx
c0014717:	68 b2 fc 01 c0       	push   0xc001fcb2
c001471c:	e8 7d 62 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0014721:	89 34 24             	mov    DWORD PTR [esp],esi
c0014724:	e8 57 be fe ff       	call   c0000580 <strlen>
c0014729:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c001472f:	40                   	inc    eax
c0014730:	89 04 24             	mov    DWORD PTR [esp],eax
c0014733:	e8 93 33 ff ff       	call   c0007acb <malloc>
c0014738:	59                   	pop    ecx
c0014739:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014740:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014745:	5f                   	pop    edi
c0014746:	56                   	push   esi
c0014747:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001474e:	e8 fd be fe ff       	call   c0000650 <strcpy>
c0014753:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014758:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c001475f:	8d 50 01             	lea    edx,[eax+0x1]
c0014762:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014768:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001476c:	83 c4 0c             	add    esp,0xc
c001476f:	6a 01                	push   0x1
c0014771:	53                   	push   ebx
c0014772:	56                   	push   esi
c0014773:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001477a:	e8 b5 f6 ff ff       	call   c0013e34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001477f:	83 c4 10             	add    esp,0x10
c0014782:	89 c7                	mov    edi,eax
c0014784:	89 f8                	mov    eax,edi
c0014786:	83 f0 01             	xor    eax,0x1
c0014789:	84 c0                	test   al,al
c001478b:	74 18                	je     c00147a5 <Thr::loadDLL(char const*, bool)+0x1ad>
c001478d:	89 e8                	mov    eax,ebp
c001478f:	84 c0                	test   al,al
c0014791:	74 12                	je     c00147a5 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 ad 11 02 c0       	push   0xc00211ad
c001479b:	e8 c9 c0 ff ff       	call   c0010869 <KePanic(char const*)>
c00147a0:	83 c4 10             	add    esp,0x10
c00147a3:	eb 06                	jmp    c00147ab <Thr::loadDLL(char const*, bool)+0x1b3>
c00147a5:	89 f8                	mov    eax,edi
c00147a7:	84 c0                	test   al,al
c00147a9:	75 10                	jne    c00147bb <Thr::loadDLL(char const*, bool)+0x1c3>
c00147ab:	83 ec 0c             	sub    esp,0xc
c00147ae:	68 cc 11 02 c0       	push   0xc00211cc
c00147b3:	e8 b1 c0 ff ff       	call   c0010869 <KePanic(char const*)>
c00147b8:	83 c4 10             	add    esp,0x10
c00147bb:	31 f6                	xor    esi,esi
c00147bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147c5:	05 ff 0f 00 00       	add    eax,0xfff
c00147ca:	83 d2 00             	adc    edx,0x0
c00147cd:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147d5:	c1 ea 0c             	shr    edx,0xc
c00147d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147dc:	ba 00 00 00 00       	mov    edx,0x0
c00147e1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00147e5:	89 d0                	mov    eax,edx
c00147e7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147eb:	73 32                	jae    c001481f <Thr::loadDLL(char const*, bool)+0x227>
c00147ed:	50                   	push   eax
c00147ee:	50                   	push   eax
c00147ef:	89 f0                	mov    eax,esi
c00147f1:	c1 e0 0c             	shl    eax,0xc
c00147f4:	01 d8                	add    eax,ebx
c00147f6:	50                   	push   eax
c00147f7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147fd:	e8 f6 50 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0014802:	83 c4 10             	add    esp,0x10
c0014805:	8b 00                	mov    eax,DWORD PTR [eax]
c0014807:	a8 60                	test   al,0x60
c0014809:	75 11                	jne    c001481c <Thr::loadDLL(char const*, bool)+0x224>
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014813:	50                   	push   eax
c0014814:	e8 54 35 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0014819:	83 c4 10             	add    esp,0x10
c001481c:	46                   	inc    esi
c001481d:	eb 9e                	jmp    c00147bd <Thr::loadDLL(char const*, bool)+0x1c5>
c001481f:	89 f8                	mov    eax,edi
c0014821:	84 c0                	test   al,al
c0014823:	b8 00 00 00 00       	mov    eax,0x0
c0014828:	0f 44 d8             	cmove  ebx,eax
c001482b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014831:	89 d8                	mov    eax,ebx
c0014833:	5b                   	pop    ebx
c0014834:	5e                   	pop    esi
c0014835:	5f                   	pop    edi
c0014836:	5d                   	pop    ebp
c0014837:	c3                   	ret    

c0014838 <Thr::executeDLL(unsigned long, void*)>:
c0014838:	56                   	push   esi
c0014839:	53                   	push   ebx
c001483a:	52                   	push   edx
c001483b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001483f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014843:	85 db                	test   ebx,ebx
c0014845:	75 10                	jne    c0014857 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014847:	83 ec 0c             	sub    esp,0xc
c001484a:	68 e8 11 02 c0       	push   0xc00211e8
c001484f:	e8 15 c0 ff ff       	call   c0010869 <KePanic(char const*)>
c0014854:	83 c4 10             	add    esp,0x10
c0014857:	50                   	push   eax
c0014858:	50                   	push   eax
c0014859:	53                   	push   ebx
c001485a:	68 12 12 02 c0       	push   0xc0021212
c001485f:	e8 3a 61 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0014864:	89 d8                	mov    eax,ebx
c0014866:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001486a:	83 c4 14             	add    esp,0x14
c001486d:	5b                   	pop    ebx
c001486e:	5e                   	pop    esi
c001486f:	ff e0                	jmp    eax
c0014871:	66 90                	xchg   ax,ax
c0014873:	90                   	nop

c0014874 <userModeEntryPoint(void*)>:
c0014874:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014879:	83 e8 01             	sub    eax,0x1
c001487c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014881:	75 01                	jne    c0014884 <userModeEntryPoint(void*)+0x10>
c0014883:	fb                   	sti    
c0014884:	fb                   	sti    
c0014885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001488a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001488d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014893:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014897:	e9 a3 b9 fe ff       	jmp    c000023f <goToUsermode>

c001489c <changeTSS>:
c001489c:	83 ec 14             	sub    esp,0x14
c001489f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148a4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00148a7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00148ac:	c1 e2 15             	shl    edx,0x15
c00148af:	29 d0                	sub    eax,edx
c00148b1:	50                   	push   eax
c00148b2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00148b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00148bd:	05 7c 11 00 00       	add    eax,0x117c
c00148c2:	50                   	push   eax
c00148c3:	e8 84 46 ff ff       	call   c0008f4c <TSS::setESP(unsigned long)>
c00148c8:	83 c4 1c             	add    esp,0x1c
c00148cb:	c3                   	ret    

c00148cc <switchToThread(ThreadControlBlock*)>:
c00148cc:	57                   	push   edi
c00148cd:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00148d3:	56                   	push   esi
c00148d4:	53                   	push   ebx
c00148d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148d9:	85 c9                	test   ecx,ecx
c00148db:	0f 85 8b 00 00 00    	jne    c001496c <switchToThread(ThreadControlBlock*)+0xa0>
c00148e1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00148e5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00148eb:	74 7b                	je     c0014968 <switchToThread(ThreadControlBlock*)+0x9c>
c00148ed:	b8 00 04 00 00       	mov    eax,0x400
c00148f2:	29 d0                	sub    eax,edx
c00148f4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148f7:	d1 f8                	sar    eax,1
c00148f9:	01 d0                	add    eax,edx
c00148fb:	90                   	nop
c00148fc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148ff:	e8 8e 27 00 00       	call   c0017092 <HalQueryPerformanceCounter()>
c0014904:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014909:	89 c6                	mov    esi,eax
c001490b:	89 d7                	mov    edi,edx
c001490d:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014913:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014918:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c001491e:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014924:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001492a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014930:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014936:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c001493c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001493f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014942:	01 c6                	add    esi,eax
c0014944:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014947:	11 d7                	adc    edi,edx
c0014949:	83 ec 0c             	sub    esp,0xc
c001494c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001494f:	53                   	push   ebx
c0014950:	e8 22 b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014955:	0f 20 c0             	mov    eax,cr0
c0014958:	83 c8 08             	or     eax,0x8
c001495b:	0f 22 c0             	mov    cr0,eax
c001495e:	83 c4 10             	add    esp,0x10
c0014961:	5b                   	pop    ebx
c0014962:	5e                   	pop    esi
c0014963:	5f                   	pop    edi
c0014964:	c3                   	ret    
c0014965:	8d 76 00             	lea    esi,[esi+0x0]
c0014968:	31 c0                	xor    eax,eax
c001496a:	eb 90                	jmp    c00148fc <switchToThread(ThreadControlBlock*)+0x30>
c001496c:	5b                   	pop    ebx
c001496d:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014977:	5e                   	pop    esi
c0014978:	5f                   	pop    edi
c0014979:	c3                   	ret    
c001497a:	66 90                	xchg   ax,ax

c001497c <Process::addArgs(char**)>:
c001497c:	57                   	push   edi
c001497d:	56                   	push   esi
c001497e:	53                   	push   ebx
c001497f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014983:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014987:	85 f6                	test   esi,esi
c0014989:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014993:	74 4f                	je     c00149e4 <Process::addArgs(char**)+0x68>
c0014995:	8b 06                	mov    eax,DWORD PTR [esi]
c0014997:	85 c0                	test   eax,eax
c0014999:	74 49                	je     c00149e4 <Process::addArgs(char**)+0x68>
c001499b:	31 db                	xor    ebx,ebx
c001499d:	8d 76 00             	lea    esi,[esi+0x0]
c00149a0:	83 ec 0c             	sub    esp,0xc
c00149a3:	50                   	push   eax
c00149a4:	e8 d7 bb fe ff       	call   c0000580 <strlen>
c00149a9:	83 c0 01             	add    eax,0x1
c00149ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00149af:	e8 17 31 ff ff       	call   c0007acb <malloc>
c00149b4:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00149bb:	5a                   	pop    edx
c00149bc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00149bf:	83 c3 01             	add    ebx,0x1
c00149c2:	59                   	pop    ecx
c00149c3:	52                   	push   edx
c00149c4:	50                   	push   eax
c00149c5:	e8 86 bc fe ff       	call   c0000650 <strcpy>
c00149ca:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00149d0:	83 c4 10             	add    esp,0x10
c00149d3:	83 c1 01             	add    ecx,0x1
c00149d6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00149dc:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00149df:	85 c0                	test   eax,eax
c00149e1:	75 bd                	jne    c00149a0 <Process::addArgs(char**)+0x24>
c00149e3:	90                   	nop
c00149e4:	5b                   	pop    ebx
c00149e5:	5e                   	pop    esi
c00149e6:	5f                   	pop    edi
c00149e7:	c3                   	ret    

c00149e8 <Process::Process(char const*, Process*, char**)>:
c00149e8:	56                   	push   esi
c00149e9:	53                   	push   ebx
c00149ea:	83 ec 14             	sub    esp,0x14
c00149ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149f1:	05 0c 02 00 00       	add    eax,0x20c
c00149f6:	bb 07 00 00 00       	mov    ebx,0x7
c00149fb:	89 c6                	mov    esi,eax
c00149fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014a00:	85 db                	test   ebx,ebx
c0014a02:	78 14                	js     c0014a18 <Process::Process(char const*, Process*, char**)+0x30>
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	56                   	push   esi
c0014a08:	e8 3b a5 00 00       	call   c001ef48 <ThreadControlBlock::ThreadControlBlock()>
c0014a0d:	83 c4 10             	add    esp,0x10
c0014a10:	83 c6 5f             	add    esi,0x5f
c0014a13:	83 eb 01             	sub    ebx,0x1
c0014a16:	eb e8                	jmp    c0014a00 <Process::Process(char const*, Process*, char**)+0x18>
c0014a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a1c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a27:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a2e:	83 ec 0c             	sub    esp,0xc
c0014a31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a35:	e8 24 bc ff ff       	call   c001065e <Krnl::newProcessEnv(Process*)>
c0014a3a:	83 c4 10             	add    esp,0x10
c0014a3d:	89 c2                	mov    edx,eax
c0014a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a43:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a4d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a56:	a1 e0 23 02 c0       	mov    eax,ds:0xc00223e0
c0014a5b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a5e:	89 15 e0 23 02 c0    	mov    DWORD PTR ds:0xc00223e0,edx
c0014a64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a68:	89 02                	mov    DWORD PTR [edx],eax
c0014a6a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a72:	83 ec 0c             	sub    esp,0xc
c0014a75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a79:	e8 4d 30 ff ff       	call   c0007acb <malloc>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	89 c3                	mov    ebx,eax
c0014a83:	83 ec 08             	sub    esp,0x8
c0014a86:	6a 00                	push   0x0
c0014a88:	53                   	push   ebx
c0014a89:	e8 28 57 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014a8e:	83 c4 10             	add    esp,0x10
c0014a91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a95:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a9f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014aa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ab1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014ab7:	e8 c6 c1 ff ff       	call   c0010c82 <KeInitSignals()>
c0014abc:	89 c2                	mov    edx,eax
c0014abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014acc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ad2:	85 c0                	test   eax,eax
c0014ad4:	74 42                	je     c0014b18 <Process::Process(char const*, Process*, char**)+0x130>
c0014ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ada:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ae0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aea:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014afa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b04:	05 0c 01 00 00       	add    eax,0x10c
c0014b09:	83 ec 08             	sub    esp,0x8
c0014b0c:	52                   	push   edx
c0014b0d:	50                   	push   eax
c0014b0e:	e8 3d bb fe ff       	call   c0000650 <strcpy>
c0014b13:	83 c4 10             	add    esp,0x10
c0014b16:	eb 64                	jmp    c0014b7c <Process::Process(char const*, Process*, char**)+0x194>
c0014b18:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b27:	e8 9f 2f ff ff       	call   c0007acb <malloc>
c0014b2c:	83 c4 10             	add    esp,0x10
c0014b2f:	89 c3                	mov    ebx,eax
c0014b31:	83 ec 08             	sub    esp,0x8
c0014b34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b38:	53                   	push   ebx
c0014b39:	e8 18 41 ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b45:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b55:	83 ec 0c             	sub    esp,0xc
c0014b58:	50                   	push   eax
c0014b59:	e8 a6 39 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014b5e:	83 c4 10             	add    esp,0x10
c0014b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b65:	05 0c 01 00 00       	add    eax,0x10c
c0014b6a:	83 ec 08             	sub    esp,0x8
c0014b6d:	68 31 12 02 c0       	push   0xc0021231
c0014b72:	50                   	push   eax
c0014b73:	e8 d8 ba fe ff       	call   c0000650 <strcpy>
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	90                   	nop
c0014b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b80:	83 c0 0c             	add    eax,0xc
c0014b83:	83 ec 08             	sub    esp,0x8
c0014b86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b8a:	50                   	push   eax
c0014b8b:	e8 c0 ba fe ff       	call   c0000650 <strcpy>
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	83 ec 08             	sub    esp,0x8
c0014b96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b9e:	e8 d9 fd ff ff       	call   c001497c <Process::addArgs(char**)>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	83 ec 08             	sub    esp,0x8
c0014ba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bb1:	e8 3f ed ff ff       	call   c00138f5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014bbd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014bc1:	83 f0 01             	xor    eax,0x1
c0014bc4:	88 c2                	mov    dl,al
c0014bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bca:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014bd0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014bd5:	83 ec 04             	sub    esp,0x4
c0014bd8:	50                   	push   eax
c0014bd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bdd:	68 88 12 02 c0       	push   0xc0021288
c0014be2:	e8 b7 5d ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0014be7:	83 c4 10             	add    esp,0x10
c0014bea:	90                   	nop
c0014beb:	83 c4 14             	add    esp,0x14
c0014bee:	5b                   	pop    ebx
c0014bef:	5e                   	pop    esi
c0014bf0:	c3                   	ret    
c0014bf1:	90                   	nop
c0014bf2:	66 90                	xchg   ax,ax

c0014bf4 <Process::Process(bool, char const*, Process*, char**)>:
c0014bf4:	56                   	push   esi
c0014bf5:	53                   	push   ebx
c0014bf6:	83 ec 24             	sub    esp,0x24
c0014bf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bfd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c05:	05 0c 02 00 00       	add    eax,0x20c
c0014c0a:	bb 07 00 00 00       	mov    ebx,0x7
c0014c0f:	89 c6                	mov    esi,eax
c0014c11:	8d 76 00             	lea    esi,[esi+0x0]
c0014c14:	85 db                	test   ebx,ebx
c0014c16:	78 14                	js     c0014c2c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014c18:	83 ec 0c             	sub    esp,0xc
c0014c1b:	56                   	push   esi
c0014c1c:	e8 27 a3 00 00       	call   c001ef48 <ThreadControlBlock::ThreadControlBlock()>
c0014c21:	83 c4 10             	add    esp,0x10
c0014c24:	83 c6 5f             	add    esi,0x5f
c0014c27:	83 eb 01             	sub    ebx,0x1
c0014c2a:	eb e8                	jmp    c0014c14 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c30:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c42:	83 ec 0c             	sub    esp,0xc
c0014c45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c49:	e8 10 ba ff ff       	call   c001065e <Krnl::newProcessEnv(Process*)>
c0014c4e:	83 c4 10             	add    esp,0x10
c0014c51:	89 c2                	mov    edx,eax
c0014c53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c57:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c61:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c6a:	a1 e0 23 02 c0       	mov    eax,ds:0xc00223e0
c0014c6f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c72:	89 15 e0 23 02 c0    	mov    DWORD PTR ds:0xc00223e0,edx
c0014c78:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c7c:	89 02                	mov    DWORD PTR [edx],eax
c0014c7e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c86:	83 ec 0c             	sub    esp,0xc
c0014c89:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c8d:	e8 39 2e ff ff       	call   c0007acb <malloc>
c0014c92:	83 c4 10             	add    esp,0x10
c0014c95:	89 c3                	mov    ebx,eax
c0014c97:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c9c:	83 ec 08             	sub    esp,0x8
c0014c9f:	50                   	push   eax
c0014ca0:	53                   	push   ebx
c0014ca1:	e8 10 55 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cad:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014cc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cc9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014ccf:	e8 ae bf ff ff       	call   c0010c82 <KeInitSignals()>
c0014cd4:	89 c2                	mov    edx,eax
c0014cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cda:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cea:	85 c0                	test   eax,eax
c0014cec:	74 42                	je     c0014d30 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cf8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014cfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d02:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014d18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d1c:	05 0c 01 00 00       	add    eax,0x10c
c0014d21:	83 ec 08             	sub    esp,0x8
c0014d24:	52                   	push   edx
c0014d25:	50                   	push   eax
c0014d26:	e8 25 b9 fe ff       	call   c0000650 <strcpy>
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	eb 64                	jmp    c0014d94 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d30:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d38:	83 ec 0c             	sub    esp,0xc
c0014d3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d3f:	e8 87 2d ff ff       	call   c0007acb <malloc>
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	89 c3                	mov    ebx,eax
c0014d49:	83 ec 08             	sub    esp,0x8
c0014d4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d50:	53                   	push   ebx
c0014d51:	e8 00 3f ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014d56:	83 c4 10             	add    esp,0x10
c0014d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d5d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d6d:	83 ec 0c             	sub    esp,0xc
c0014d70:	50                   	push   eax
c0014d71:	e8 8e 37 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014d76:	83 c4 10             	add    esp,0x10
c0014d79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d7d:	05 0c 01 00 00       	add    eax,0x10c
c0014d82:	83 ec 08             	sub    esp,0x8
c0014d85:	68 31 12 02 c0       	push   0xc0021231
c0014d8a:	50                   	push   eax
c0014d8b:	e8 c0 b8 fe ff       	call   c0000650 <strcpy>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	90                   	nop
c0014d94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d98:	83 c0 0c             	add    eax,0xc
c0014d9b:	83 ec 08             	sub    esp,0x8
c0014d9e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014da2:	50                   	push   eax
c0014da3:	e8 a8 b8 fe ff       	call   c0000650 <strcpy>
c0014da8:	83 c4 10             	add    esp,0x10
c0014dab:	83 ec 08             	sub    esp,0x8
c0014dae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014db2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014db6:	e8 c1 fb ff ff       	call   c001497c <Process::addArgs(char**)>
c0014dbb:	83 c4 10             	add    esp,0x10
c0014dbe:	90                   	nop
c0014dbf:	83 c4 24             	add    esp,0x24
c0014dc2:	5b                   	pop    ebx
c0014dc3:	5e                   	pop    esi
c0014dc4:	c3                   	ret    
c0014dc5:	8d 76 00             	lea    esi,[esi+0x0]

c0014dc8 <taskStartupFunction>:
c0014dc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dcd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014dd0:	c3                   	ret    
c0014dd1:	90                   	nop
c0014dd2:	66 90                	xchg   ax,ax

c0014dd4 <Semaphore::Semaphore(int)>:
c0014dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ddc:	89 10                	mov    DWORD PTR [eax],edx
c0014dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014de2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014de9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ded:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014df8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014dff:	90                   	nop
c0014e00:	c3                   	ret    
c0014e01:	90                   	nop
c0014e02:	66 90                	xchg   ax,ax

c0014e04 <Mutex::Mutex()>:
c0014e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e08:	6a 01                	push   0x1
c0014e0a:	50                   	push   eax
c0014e0b:	e8 c4 ff ff ff       	call   c0014dd4 <Semaphore::Semaphore(int)>
c0014e10:	83 c4 08             	add    esp,0x8
c0014e13:	90                   	nop
c0014e14:	c3                   	ret    
c0014e15:	90                   	nop
c0014e16:	66 90                	xchg   ax,ax

c0014e18 <Process::createThread(void (*)(void*), void*, int)>:
c0014e18:	57                   	push   edi
c0014e19:	31 c9                	xor    ecx,ecx
c0014e1b:	56                   	push   esi
c0014e1c:	53                   	push   ebx
c0014e1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e21:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e28:	89 f2                	mov    edx,esi
c0014e2a:	66 90                	xchg   ax,ax
c0014e2c:	0f b7 c2             	movzx  eax,dx
c0014e2f:	80 e2 01             	and    dl,0x1
c0014e32:	74 14                	je     c0014e48 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e34:	d1 f8                	sar    eax,1
c0014e36:	83 c1 01             	add    ecx,0x1
c0014e39:	83 f9 10             	cmp    ecx,0x10
c0014e3c:	89 c2                	mov    edx,eax
c0014e3e:	75 ec                	jne    c0014e2c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e40:	31 db                	xor    ebx,ebx
c0014e42:	89 d8                	mov    eax,ebx
c0014e44:	5b                   	pop    ebx
c0014e45:	5e                   	pop    esi
c0014e46:	5f                   	pop    edi
c0014e47:	c3                   	ret    
c0014e48:	b8 01 00 00 00       	mov    eax,0x1
c0014e4d:	d3 e0                	shl    eax,cl
c0014e4f:	09 c6                	or     esi,eax
c0014e51:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e58:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e5b:	c1 e0 05             	shl    eax,0x5
c0014e5e:	29 c8                	sub    eax,ecx
c0014e60:	01 d8                	add    eax,ebx
c0014e62:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e69:	75 0d                	jne    c0014e78 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e6b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e75:	8d 76 00             	lea    esi,[esi+0x0]
c0014e78:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e7e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e81:	83 ec 0c             	sub    esp,0xc
c0014e84:	c1 e6 05             	shl    esi,0x5
c0014e87:	29 ce                	sub    esi,ecx
c0014e89:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e8c:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e8f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e95:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014e9b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014ea1:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014ea8:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014eae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014eb2:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014eb8:	89 ca                	mov    edx,ecx
c0014eba:	f7 da                	neg    edx
c0014ebc:	c1 e2 15             	shl    edx,0x15
c0014ebf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014ec5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014ecb:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0014ecf:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014ed9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014edf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ee3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014ee9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014ef3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014efd:	68 00 01 00 00       	push   0x100
c0014f02:	e8 c4 2b ff ff       	call   c0007acb <malloc>
c0014f07:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014f0a:	58                   	pop    eax
c0014f0b:	5a                   	pop    edx
c0014f0c:	53                   	push   ebx
c0014f0d:	68 84 81 02 c0       	push   0xc0028184
c0014f12:	e8 c9 9d 00 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f17:	83 c4 10             	add    esp,0x10
c0014f1a:	89 d8                	mov    eax,ebx
c0014f1c:	5b                   	pop    ebx
c0014f1d:	5e                   	pop    esi
c0014f1e:	5f                   	pop    edi
c0014f1f:	c3                   	ret    

c0014f20 <Process::createUserThread()>:
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	68 80 00 00 00       	push   0x80
c0014f28:	6a 00                	push   0x0
c0014f2a:	68 74 48 01 c0       	push   0xc0014874
c0014f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f33:	50                   	push   eax
c0014f34:	e8 df fe ff ff       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c0014f39:	83 c4 1c             	add    esp,0x1c
c0014f3c:	c3                   	ret    
c0014f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0014f40 <setupMultitasking(void (*)())>:
c0014f40:	56                   	push   esi
c0014f41:	53                   	push   ebx
c0014f42:	83 ec 04             	sub    esp,0x4
c0014f45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f49:	eb 11                	jmp    c0014f5c <setupMultitasking(void (*)())+0x1c>
c0014f4b:	90                   	nop
c0014f4c:	83 ec 0c             	sub    esp,0xc
c0014f4f:	68 84 81 02 c0       	push   0xc0028184
c0014f54:	e8 cb 9c 00 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f59:	83 c4 10             	add    esp,0x10
c0014f5c:	83 ec 0c             	sub    esp,0xc
c0014f5f:	68 84 81 02 c0       	push   0xc0028184
c0014f64:	e8 97 9c 00 00       	call   c001ec00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	84 c0                	test   al,al
c0014f6e:	74 dc                	je     c0014f4c <setupMultitasking(void (*)())+0xc>
c0014f70:	83 ec 0c             	sub    esp,0xc
c0014f73:	68 24 07 00 00       	push   0x724
c0014f78:	e8 4e 2b ff ff       	call   c0007acb <malloc>
c0014f7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f84:	6a 00                	push   0x0
c0014f86:	68 35 12 02 c0       	push   0xc0021235
c0014f8b:	6a 01                	push   0x1
c0014f8d:	50                   	push   eax
c0014f8e:	89 c3                	mov    ebx,eax
c0014f90:	e8 5f fc ff ff       	call   c0014bf4 <Process::Process(bool, char const*, Process*, char**)>
c0014f95:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f9b:	83 c4 14             	add    esp,0x14
c0014f9e:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014fa4:	50                   	push   eax
c0014fa5:	e8 af 37 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0014faa:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014fb1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014fbb:	83 c8 01             	or     eax,0x1
c0014fbe:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014fc5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014fcb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fce:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014fd8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fde:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014fe8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fee:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014ff8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015002:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015008:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001500e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015018:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015022:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015029:	e8 9d 2a ff ff       	call   c0007acb <malloc>
c001502e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015034:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001503a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015040:	5a                   	pop    edx
c0015041:	59                   	pop    ecx
c0015042:	68 31 12 02 c0       	push   0xc0021231
c0015047:	50                   	push   eax
c0015048:	e8 03 b6 fe ff       	call   c0000650 <strcpy>
c001504d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015054:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015058:	83 c4 14             	add    esp,0x14
c001505b:	5b                   	pop    ebx
c001505c:	5e                   	pop    esi
c001505d:	e9 07 b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015062:	66 90                	xchg   ax,ax

c0015064 <schedule()>:
c0015064:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001506a:	85 d2                	test   edx,edx
c001506c:	74 0e                	je     c001507c <schedule()+0x18>
c001506e:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015078:	c3                   	ret    
c0015079:	8d 76 00             	lea    esi,[esi+0x0]
c001507c:	53                   	push   ebx
c001507d:	83 ec 14             	sub    esp,0x14
c0015080:	68 84 81 02 c0       	push   0xc0028184
c0015085:	e8 76 9b 00 00       	call   c001ec00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	84 c0                	test   al,al
c001508f:	75 3f                	jne    c00150d0 <schedule()+0x6c>
c0015091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015096:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015099:	83 fa 01             	cmp    edx,0x1
c001509c:	74 3a                	je     c00150d8 <schedule()+0x74>
c001509e:	66 90                	xchg   ax,ax
c00150a0:	83 ec 0c             	sub    esp,0xc
c00150a3:	68 84 81 02 c0       	push   0xc0028184
c00150a8:	e8 6f 9b 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00150ad:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00150b4:	89 c3                	mov    ebx,eax
c00150b6:	e8 69 9b 00 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00150bb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00150c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150c5:	e8 02 f8 ff ff       	call   c00148cc <switchToThread(ThreadControlBlock*)>
c00150ca:	83 c4 10             	add    esp,0x10
c00150cd:	8d 76 00             	lea    esi,[esi+0x0]
c00150d0:	83 c4 08             	add    esp,0x8
c00150d3:	5b                   	pop    ebx
c00150d4:	c3                   	ret    
c00150d5:	8d 76 00             	lea    esi,[esi+0x0]
c00150d8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150df:	83 ec 08             	sub    esp,0x8
c00150e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150e7:	50                   	push   eax
c00150e8:	68 84 81 02 c0       	push   0xc0028184
c00150ed:	e8 ee 9b 00 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150f2:	83 c4 10             	add    esp,0x10
c00150f5:	eb a9                	jmp    c00150a0 <schedule()+0x3c>
c00150f7:	90                   	nop

c00150f8 <Semaphore::tryAcquire()>:
c00150f8:	53                   	push   ebx
c00150f9:	83 ec 08             	sub    esp,0x8
c00150fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015100:	fa                   	cli    
c0015101:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015107:	8d 42 01             	lea    eax,[edx+0x1]
c001510a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001510f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015114:	8d 58 01             	lea    ebx,[eax+0x1]
c0015117:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c001511d:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015120:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015122:	7c 2c                	jl     c0015150 <Semaphore::tryAcquire()+0x58>
c0015124:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015129:	85 c0                	test   eax,eax
c001512b:	75 0b                	jne    c0015138 <Semaphore::tryAcquire()+0x40>
c001512d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015132:	85 c0                	test   eax,eax
c0015134:	75 5a                	jne    c0015190 <Semaphore::tryAcquire()+0x98>
c0015136:	66 90                	xchg   ax,ax
c0015138:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001513e:	31 c0                	xor    eax,eax
c0015140:	85 d2                	test   edx,edx
c0015142:	75 04                	jne    c0015148 <Semaphore::tryAcquire()+0x50>
c0015144:	fb                   	sti    
c0015145:	8d 76 00             	lea    esi,[esi+0x0]
c0015148:	83 c4 08             	add    esp,0x8
c001514b:	5b                   	pop    ebx
c001514c:	c3                   	ret    
c001514d:	8d 76 00             	lea    esi,[esi+0x0]
c0015150:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015155:	83 c3 01             	add    ebx,0x1
c0015158:	85 c0                	test   eax,eax
c001515a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001515d:	75 21                	jne    c0015180 <Semaphore::tryAcquire()+0x88>
c001515f:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015165:	85 c9                	test   ecx,ecx
c0015167:	74 17                	je     c0015180 <Semaphore::tryAcquire()+0x88>
c0015169:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015173:	e8 ec fe ff ff       	call   c0015064 <schedule()>
c0015178:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001517d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015180:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015186:	85 d2                	test   edx,edx
c0015188:	b0 01                	mov    al,0x1
c001518a:	75 bc                	jne    c0015148 <Semaphore::tryAcquire()+0x50>
c001518c:	eb b6                	jmp    c0015144 <Semaphore::tryAcquire()+0x4c>
c001518e:	66 90                	xchg   ax,ax
c0015190:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001519a:	e8 c5 fe ff ff       	call   c0015064 <schedule()>
c001519f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151a4:	8d 50 ff             	lea    edx,[eax-0x1]
c00151a7:	31 c0                	xor    eax,eax
c00151a9:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00151af:	85 d2                	test   edx,edx
c00151b1:	75 95                	jne    c0015148 <Semaphore::tryAcquire()+0x50>
c00151b3:	eb 8f                	jmp    c0015144 <Semaphore::tryAcquire()+0x4c>
c00151b5:	90                   	nop
c00151b6:	66 90                	xchg   ax,ax

c00151b8 <Semaphore::assertLocked(char const*)>:
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151bf:	fa                   	cli    
c00151c0:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00151c6:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151cb:	83 c1 01             	add    ecx,0x1
c00151ce:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00151d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00151d7:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151dd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151df:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151e2:	7c 28                	jl     c001520c <Semaphore::assertLocked(char const*)+0x54>
c00151e4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151e9:	85 c0                	test   eax,eax
c00151eb:	75 0b                	jne    c00151f8 <Semaphore::assertLocked(char const*)+0x40>
c00151ed:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151f2:	85 c0                	test   eax,eax
c00151f4:	75 32                	jne    c0015228 <Semaphore::assertLocked(char const*)+0x70>
c00151f6:	66 90                	xchg   ax,ax
c00151f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151fd:	83 e8 01             	sub    eax,0x1
c0015200:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015205:	75 01                	jne    c0015208 <Semaphore::assertLocked(char const*)+0x50>
c0015207:	fb                   	sti    
c0015208:	83 c4 0c             	add    esp,0xc
c001520b:	c3                   	ret    
c001520c:	83 ec 0c             	sub    esp,0xc
c001520f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015213:	52                   	push   edx
c0015214:	e8 50 b6 ff ff       	call   c0010869 <KePanic(char const*)>
c0015219:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	83 e8 01             	sub    eax,0x1
c0015224:	eb be                	jmp    c00151e4 <Semaphore::assertLocked(char const*)+0x2c>
c0015226:	66 90                	xchg   ax,ax
c0015228:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015232:	e8 2d fe ff ff       	call   c0015064 <schedule()>
c0015237:	eb bf                	jmp    c00151f8 <Semaphore::assertLocked(char const*)+0x40>
c0015239:	8d 76 00             	lea    esi,[esi+0x0]

c001523c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001523c:	83 ec 0c             	sub    esp,0xc
c001523f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015244:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015248:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001524b:	e8 14 fe ff ff       	call   c0015064 <schedule()>
c0015250:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015255:	83 e8 01             	sub    eax,0x1
c0015258:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001525d:	75 01                	jne    c0015260 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001525f:	fb                   	sti    
c0015260:	83 c4 0c             	add    esp,0xc
c0015263:	c3                   	ret    

c0015264 <blockTask(TaskState)>:
c0015264:	83 ec 0c             	sub    esp,0xc
c0015267:	fa                   	cli    
c0015268:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001526d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015271:	83 c0 01             	add    eax,0x1
c0015274:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001527e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015281:	e8 de fd ff ff       	call   c0015064 <schedule()>
c0015286:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001528b:	83 e8 01             	sub    eax,0x1
c001528e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015293:	75 03                	jne    c0015298 <blockTask(TaskState)+0x34>
c0015295:	fb                   	sti    
c0015296:	66 90                	xchg   ax,ax
c0015298:	83 c4 0c             	add    esp,0xc
c001529b:	c3                   	ret    

c001529c <waitTask(int, int*, int)>:
c001529c:	83 ec 18             	sub    esp,0x18
c001529f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152a8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00152ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00152b7:	6a 07                	push   0x7
c00152b9:	e8 a6 ff ff ff       	call   c0015264 <blockTask(TaskState)>
c00152be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c3:	83 c4 10             	add    esp,0x10
c00152c6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00152c9:	85 d2                	test   edx,edx
c00152cb:	74 0b                	je     c00152d8 <waitTask(int, int*, int)+0x3c>
c00152cd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00152d0:	89 02                	mov    DWORD PTR [edx],eax
c00152d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d7:	90                   	nop
c00152d8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00152db:	83 c4 0c             	add    esp,0xc
c00152de:	c3                   	ret    
c00152df:	90                   	nop

c00152e0 <milliTenthSleepUntil(unsigned int)>:
c00152e0:	83 ec 0c             	sub    esp,0xc
c00152e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152e7:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152ed:	76 05                	jbe    c00152f4 <milliTenthSleepUntil(unsigned int)+0x14>
c00152ef:	90                   	nop
c00152f0:	83 c4 0c             	add    esp,0xc
c00152f3:	c3                   	ret    
c00152f4:	fa                   	cli    
c00152f5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152fb:	83 ec 08             	sub    esp,0x8
c00152fe:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015304:	83 c2 01             	add    edx,0x1
c0015307:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001530d:	83 c1 01             	add    ecx,0x1
c0015310:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015316:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001531c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001531f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015324:	50                   	push   eax
c0015325:	68 78 81 02 c0       	push   0xc0028178
c001532a:	e8 b1 99 00 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001532f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015336:	e8 29 ff ff ff       	call   c0015264 <blockTask(TaskState)>
c001533b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	83 e8 01             	sub    eax,0x1
c0015346:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001534b:	85 c0                	test   eax,eax
c001534d:	75 09                	jne    c0015358 <milliTenthSleepUntil(unsigned int)+0x78>
c001534f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015354:	85 c0                	test   eax,eax
c0015356:	75 14                	jne    c001536c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015358:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001535d:	83 e8 01             	sub    eax,0x1
c0015360:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015365:	75 89                	jne    c00152f0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015367:	fb                   	sti    
c0015368:	83 c4 0c             	add    esp,0xc
c001536b:	c3                   	ret    
c001536c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015376:	e8 e9 fc ff ff       	call   c0015064 <schedule()>
c001537b:	eb db                	jmp    c0015358 <milliTenthSleepUntil(unsigned int)+0x78>
c001537d:	8d 76 00             	lea    esi,[esi+0x0]

c0015380 <milliTenthSleep(unsigned int)>:
c0015380:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015384:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015389:	01 c2                	add    edx,eax
c001538b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001538f:	e9 4c ff ff ff       	jmp    c00152e0 <milliTenthSleepUntil(unsigned int)>

c0015394 <sleep(unsigned int)>:
c0015394:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c001539c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153a0:	eb de                	jmp    c0015380 <milliTenthSleep(unsigned int)>
c00153a2:	66 90                	xchg   ax,ax

c00153a4 <Semaphore::acquire()>:
c00153a4:	83 ec 0c             	sub    esp,0xc
c00153a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153ab:	fa                   	cli    
c00153ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153b1:	83 c0 01             	add    eax,0x1
c00153b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153b9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153be:	8d 48 01             	lea    ecx,[eax+0x1]
c00153c1:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153c7:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00153ca:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00153cc:	7d 2e                	jge    c00153fc <Semaphore::acquire()+0x58>
c00153ce:	83 c1 01             	add    ecx,0x1
c00153d1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153d4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153d9:	85 c0                	test   eax,eax
c00153db:	75 0b                	jne    c00153e8 <Semaphore::acquire()+0x44>
c00153dd:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153e2:	85 c0                	test   eax,eax
c00153e4:	75 66                	jne    c001544c <Semaphore::acquire()+0xa8>
c00153e6:	66 90                	xchg   ax,ax
c00153e8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153ed:	83 e8 01             	sub    eax,0x1
c00153f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153f5:	75 01                	jne    c00153f8 <Semaphore::acquire()+0x54>
c00153f7:	fb                   	sti    
c00153f8:	83 c4 0c             	add    esp,0xc
c00153fb:	c3                   	ret    
c00153fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015401:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015408:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001540b:	85 c9                	test   ecx,ecx
c001540d:	74 51                	je     c0015460 <Semaphore::acquire()+0xbc>
c001540f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015412:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015418:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001541b:	90                   	nop
c001541c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015421:	83 ec 0c             	sub    esp,0xc
c0015424:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015427:	68 b4 12 02 c0       	push   0xc00212b4
c001542c:	e8 6d 55 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0015431:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015438:	e8 27 fe ff ff       	call   c0015264 <blockTask(TaskState)>
c001543d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	83 e8 01             	sub    eax,0x1
c0015448:	eb 8a                	jmp    c00153d4 <Semaphore::acquire()+0x30>
c001544a:	66 90                	xchg   ax,ax
c001544c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015456:	e8 09 fc ff ff       	call   c0015064 <schedule()>
c001545b:	eb 8b                	jmp    c00153e8 <Semaphore::acquire()+0x44>
c001545d:	8d 76 00             	lea    esi,[esi+0x0]
c0015460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015465:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015468:	eb b2                	jmp    c001541c <Semaphore::acquire()+0x78>
c001546a:	66 90                	xchg   ax,ax

c001546c <taskReturned>:
c001546c:	83 ec 18             	sub    esp,0x18
c001546f:	68 d4 12 02 c0       	push   0xc00212d4
c0015474:	e8 f0 b3 ff ff       	call   c0010869 <KePanic(char const*)>
c0015479:	83 c4 10             	add    esp,0x10
c001547c:	83 ec 0c             	sub    esp,0xc
c001547f:	6a 02                	push   0x2
c0015481:	e8 de fd ff ff       	call   c0015264 <blockTask(TaskState)>
c0015486:	fa                   	cli    
c0015487:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001548c:	83 c0 01             	add    eax,0x1
c001548f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015494:	e8 cb fb ff ff       	call   c0015064 <schedule()>
c0015499:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	83 e8 01             	sub    eax,0x1
c00154a4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154a9:	85 c0                	test   eax,eax
c00154ab:	75 cf                	jne    c001547c <taskReturned+0x10>
c00154ad:	fb                   	sti    
c00154ae:	eb cc                	jmp    c001547c <taskReturned+0x10>

c00154b0 <Thr::processFromPID(int)>:
c00154b0:	57                   	push   edi
c00154b1:	56                   	push   esi
c00154b2:	53                   	push   ebx
c00154b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154b7:	fa                   	cli    
c00154b8:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154be:	83 ec 0c             	sub    esp,0xc
c00154c1:	68 84 81 02 c0       	push   0xc0028184
c00154c6:	83 c1 01             	add    ecx,0x1
c00154c9:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00154cf:	e8 48 97 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	89 c7                	mov    edi,eax
c00154d9:	eb 15                	jmp    c00154f0 <Thr::processFromPID(int)+0x40>
c00154db:	90                   	nop
c00154dc:	83 ec 0c             	sub    esp,0xc
c00154df:	68 84 81 02 c0       	push   0xc0028184
c00154e4:	e8 33 97 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	39 f8                	cmp    eax,edi
c00154ee:	74 50                	je     c0015540 <Thr::processFromPID(int)+0x90>
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	68 84 81 02 c0       	push   0xc0028184
c00154f8:	e8 1f 97 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154fd:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015504:	89 c3                	mov    ebx,eax
c0015506:	e8 19 97 00 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001550b:	58                   	pop    eax
c001550c:	5a                   	pop    edx
c001550d:	53                   	push   ebx
c001550e:	68 84 81 02 c0       	push   0xc0028184
c0015513:	e8 c8 97 00 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015518:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	39 30                	cmp    DWORD PTR [eax],esi
c0015520:	75 ba                	jne    c00154dc <Thr::processFromPID(int)+0x2c>
c0015522:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015527:	83 e8 01             	sub    eax,0x1
c001552a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001552f:	74 0b                	je     c001553c <Thr::processFromPID(int)+0x8c>
c0015531:	8d 76 00             	lea    esi,[esi+0x0]
c0015534:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015537:	90                   	nop
c0015538:	5b                   	pop    ebx
c0015539:	5e                   	pop    esi
c001553a:	5f                   	pop    edi
c001553b:	c3                   	ret    
c001553c:	fb                   	sti    
c001553d:	eb f5                	jmp    c0015534 <Thr::processFromPID(int)+0x84>
c001553f:	90                   	nop
c0015540:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015545:	8d 50 ff             	lea    edx,[eax-0x1]
c0015548:	31 c0                	xor    eax,eax
c001554a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015550:	85 d2                	test   edx,edx
c0015552:	75 e4                	jne    c0015538 <Thr::processFromPID(int)+0x88>
c0015554:	fb                   	sti    
c0015555:	5b                   	pop    ebx
c0015556:	5e                   	pop    esi
c0015557:	5f                   	pop    edi
c0015558:	c3                   	ret    
c0015559:	8d 76 00             	lea    esi,[esi+0x0]

c001555c <unblockTask(ThreadControlBlock*)>:
c001555c:	53                   	push   ebx
c001555d:	83 ec 08             	sub    esp,0x8
c0015560:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015564:	fa                   	cli    
c0015565:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001556a:	83 c0 01             	add    eax,0x1
c001556d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015572:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015575:	85 c0                	test   eax,eax
c0015577:	74 67                	je     c00155e0 <unblockTask(ThreadControlBlock*)+0x84>
c0015579:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001557c:	83 f8 01             	cmp    eax,0x1
c001557f:	74 37                	je     c00155b8 <unblockTask(ThreadControlBlock*)+0x5c>
c0015581:	83 ec 0c             	sub    esp,0xc
c0015584:	68 84 81 02 c0       	push   0xc0028184
c0015589:	e8 8e 96 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	85 c0                	test   eax,eax
c0015593:	75 1b                	jne    c00155b0 <unblockTask(ThreadControlBlock*)+0x54>
c0015595:	eb 5d                	jmp    c00155f4 <unblockTask(ThreadControlBlock*)+0x98>
c0015597:	90                   	nop
c0015598:	83 ec 08             	sub    esp,0x8
c001559b:	50                   	push   eax
c001559c:	68 84 81 02 c0       	push   0xc0028184
c00155a1:	e8 96 99 00 00       	call   c001ef3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	85 c0                	test   eax,eax
c00155ab:	74 47                	je     c00155f4 <unblockTask(ThreadControlBlock*)+0x98>
c00155ad:	8d 76 00             	lea    esi,[esi+0x0]
c00155b0:	39 c3                	cmp    ebx,eax
c00155b2:	75 e4                	jne    c0015598 <unblockTask(ThreadControlBlock*)+0x3c>
c00155b4:	eb 12                	jmp    c00155c8 <unblockTask(ThreadControlBlock*)+0x6c>
c00155b6:	66 90                	xchg   ax,ax
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	68 53 12 02 c0       	push   0xc0021253
c00155c0:	e8 d9 53 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155cd:	83 e8 01             	sub    eax,0x1
c00155d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155d5:	75 01                	jne    c00155d8 <unblockTask(ThreadControlBlock*)+0x7c>
c00155d7:	fb                   	sti    
c00155d8:	83 c4 08             	add    esp,0x8
c00155db:	5b                   	pop    ebx
c00155dc:	c3                   	ret    
c00155dd:	8d 76 00             	lea    esi,[esi+0x0]
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	68 3c 12 02 c0       	push   0xc002123c
c00155e8:	e8 b1 53 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00155ed:	83 c4 10             	add    esp,0x10
c00155f0:	eb d6                	jmp    c00155c8 <unblockTask(ThreadControlBlock*)+0x6c>
c00155f2:	66 90                	xchg   ax,ax
c00155f4:	83 ec 08             	sub    esp,0x8
c00155f7:	53                   	push   ebx
c00155f8:	68 84 81 02 c0       	push   0xc0028184
c00155fd:	e8 de 96 00 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015602:	83 c4 10             	add    esp,0x10
c0015605:	eb c1                	jmp    c00155c8 <unblockTask(ThreadControlBlock*)+0x6c>
c0015607:	90                   	nop

c0015608 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015608:	55                   	push   ebp
c0015609:	57                   	push   edi
c001560a:	56                   	push   esi
c001560b:	53                   	push   ebx
c001560c:	83 ec 1c             	sub    esp,0x1c
c001560f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015613:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015616:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001561c:	85 ed                	test   ebp,ebp
c001561e:	7e 28                	jle    c0015648 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015620:	31 f6                	xor    esi,esi
c0015622:	66 90                	xchg   ax,ax
c0015624:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001562b:	83 ec 0c             	sub    esp,0xc
c001562e:	83 c6 01             	add    esi,0x1
c0015631:	57                   	push   edi
c0015632:	e8 a4 24 ff ff       	call   c0007adb <free>
c0015637:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001563a:	83 c4 10             	add    esp,0x10
c001563d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015643:	7f df                	jg     c0015624 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015645:	8d 76 00             	lea    esi,[esi+0x0]
c0015648:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015652:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015657:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001565a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001565d:	d3 c0                	rol    eax,cl
c001565f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015666:	21 c8                	and    eax,ecx
c0015668:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001566f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015672:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001567a:	89 f7                	mov    edi,esi
c001567c:	0f 85 72 01 00 00    	jne    c00157f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015682:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015688:	85 ed                	test   ebp,ebp
c001568a:	74 1c                	je     c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001568c:	83 ec 0c             	sub    esp,0xc
c001568f:	55                   	push   ebp
c0015690:	e8 e5 ae ff ff       	call   c001057a <EnvVarContainer::~EnvVarContainer()>
c0015695:	59                   	pop    ecx
c0015696:	5e                   	pop    esi
c0015697:	6a 0c                	push   0xc
c0015699:	55                   	push   ebp
c001569a:	e8 01 52 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001569f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	89 f7                	mov    edi,esi
c00156a7:	90                   	nop
c00156a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156ae:	85 c0                	test   eax,eax
c00156b0:	0f 84 b2 00 00 00    	je     c0015768 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156b6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00156b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00156bd:	31 c9                	xor    ecx,ecx
c00156bf:	eb 17                	jmp    c00156d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00156c1:	8d 76 00             	lea    esi,[esi+0x0]
c00156c4:	83 c1 01             	add    ecx,0x1
c00156c7:	83 f9 10             	cmp    ecx,0x10
c00156ca:	0f 84 98 00 00 00    	je     c0015768 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156d0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156d6:	66 90                	xchg   ax,ax
c00156d8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156df:	d3 fa                	sar    edx,cl
c00156e1:	80 e2 01             	and    dl,0x1
c00156e4:	74 de                	je     c00156c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156e6:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00156e9:	c1 e2 05             	shl    edx,0x5
c00156ec:	29 ca                	sub    edx,ecx
c00156ee:	01 d0                	add    eax,edx
c00156f0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156f6:	83 fd 07             	cmp    ebp,0x7
c00156f9:	75 c9                	jne    c00156c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156fb:	05 40 02 00 00       	add    eax,0x240
c0015700:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015703:	83 fd ff             	cmp    ebp,0xffffffff
c0015706:	0f 8c f0 00 00 00    	jl     c00157fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001570c:	0f 84 ae 01 00 00    	je     c00158c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015712:	85 ed                	test   ebp,ebp
c0015714:	0f 84 92 01 00 00    	je     c00158ac <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001571a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001571c:	75 a6                	jne    c00156c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001571e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015722:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015728:	01 d0                	add    eax,edx
c001572a:	66 90                	xchg   ax,ax
c001572c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015730:	83 ec 0c             	sub    esp,0xc
c0015733:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015739:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001573c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015742:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015749:	50                   	push   eax
c001574a:	e8 0d fe ff ff       	call   c001555c <unblockTask(ThreadControlBlock*)>
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015755:	89 f7                	mov    edi,esi
c0015757:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001575b:	83 c1 01             	add    ecx,0x1
c001575e:	83 f9 10             	cmp    ecx,0x10
c0015761:	0f 85 69 ff ff ff    	jne    c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015767:	90                   	nop
c0015768:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001576e:	85 c0                	test   eax,eax
c0015770:	74 62                	je     c00157d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015772:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015778:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001577e:	74 54                	je     c00157d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015780:	83 ec 0c             	sub    esp,0xc
c0015783:	68 84 81 02 c0       	push   0xc0028184
c0015788:	e8 8f 94 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001578d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015794:	89 c7                	mov    edi,eax
c0015796:	e8 65 94 00 00       	call   c001ec00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001579b:	83 c4 10             	add    esp,0x10
c001579e:	84 c0                	test   al,al
c00157a0:	0f 84 ce 00 00 00    	je     c0015874 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00157a6:	66 90                	xchg   ax,ax
c00157a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157ab:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157b1:	85 d2                	test   edx,edx
c00157b3:	74 0f                	je     c00157c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00157b5:	8b 02                	mov    eax,DWORD PTR [edx]
c00157b7:	83 ec 0c             	sub    esp,0xc
c00157ba:	52                   	push   edx
c00157bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157be:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157c1:	83 c4 10             	add    esp,0x10
c00157c4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00157ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157d1:	8d 76 00             	lea    esi,[esi+0x0]
c00157d4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157da:	85 db                	test   ebx,ebx
c00157dc:	74 16                	je     c00157f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157de:	83 ec 0c             	sub    esp,0xc
c00157e1:	53                   	push   ebx
c00157e2:	e8 8f 43 ff ff       	call   c0009b76 <VAS::~VAS()>
c00157e7:	58                   	pop    eax
c00157e8:	5a                   	pop    edx
c00157e9:	6a 14                	push   0x14
c00157eb:	53                   	push   ebx
c00157ec:	e8 af 50 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	83 c4 1c             	add    esp,0x1c
c00157f7:	5b                   	pop    ebx
c00157f8:	5e                   	pop    esi
c00157f9:	5f                   	pop    edi
c00157fa:	5d                   	pop    ebp
c00157fb:	c3                   	ret    
c00157fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015800:	83 ec 0c             	sub    esp,0xc
c0015803:	68 08 13 02 c0       	push   0xc0021308
c0015808:	e8 5c b0 ff ff       	call   c0010869 <KePanic(char const*)>
c001580d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	89 f7                	mov    edi,esi
c0015815:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015819:	e9 a6 fe ff ff       	jmp    c00156c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001581e:	66 90                	xchg   ax,ax
c0015820:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015826:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001582c:	75 1e                	jne    c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001582e:	83 ec 0c             	sub    esp,0xc
c0015831:	68 70 13 02 c0       	push   0xc0021370
c0015836:	e8 63 51 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001583b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015842:	e8 1d fa ff ff       	call   c0015264 <blockTask(TaskState)>
c0015847:	83 c4 10             	add    esp,0x10
c001584a:	66 90                	xchg   ax,ax
c001584c:	83 ec 08             	sub    esp,0x8
c001584f:	56                   	push   esi
c0015850:	68 84 81 02 c0       	push   0xc0028184
c0015855:	e8 86 94 00 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001585a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015861:	e8 b6 93 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	39 f8                	cmp    eax,edi
c001586b:	0f 84 37 ff ff ff    	je     c00157a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015871:	8d 76 00             	lea    esi,[esi+0x0]
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	68 84 81 02 c0       	push   0xc0028184
c001587c:	e8 9b 93 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015881:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015888:	89 c6                	mov    esi,eax
c001588a:	e8 95 93 00 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001588f:	83 c4 10             	add    esp,0x10
c0015892:	39 f3                	cmp    ebx,esi
c0015894:	74 b6                	je     c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015896:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015899:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001589c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00158a2:	75 a8                	jne    c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00158a4:	e9 77 ff ff ff       	jmp    c0015820 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00158a9:	8d 76 00             	lea    esi,[esi+0x0]
c00158ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158b0:	83 ec 0c             	sub    esp,0xc
c00158b3:	68 3c 13 02 c0       	push   0xc002133c
c00158b8:	e9 4b ff ff ff       	jmp    c0015808 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158bd:	8d 76 00             	lea    esi,[esi+0x0]
c00158c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158c4:	8b 36                	mov    esi,DWORD PTR [esi]
c00158c6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00158c9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158cc:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158d2:	01 d7                	add    edi,edx
c00158d4:	89 f8                	mov    eax,edi
c00158d6:	e9 51 fe ff ff       	jmp    c001572c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158db:	90                   	nop

c00158dc <cleanerTaskFunction(void*)>:
c00158dc:	53                   	push   ebx
c00158dd:	83 ec 08             	sub    esp,0x8
c00158e0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158e5:	83 e8 01             	sub    eax,0x1
c00158e8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158ed:	75 01                	jne    c00158f0 <cleanerTaskFunction(void*)+0x14>
c00158ef:	fb                   	sti    
c00158f0:	fa                   	cli    
c00158f1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158f6:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158fd:	8d 50 01             	lea    edx,[eax+0x1]
c0015900:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015906:	0f 84 c4 00 00 00    	je     c00159d0 <cleanerTaskFunction(void*)+0xf4>
c001590c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015911:	85 c0                	test   eax,eax
c0015913:	75 03                	jne    c0015918 <cleanerTaskFunction(void*)+0x3c>
c0015915:	fb                   	sti    
c0015916:	66 90                	xchg   ax,ax
c0015918:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c001591f:	fa                   	cli    
c0015920:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015926:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001592c:	83 c2 01             	add    edx,0x1
c001592f:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015935:	83 c1 01             	add    ecx,0x1
c0015938:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001593e:	fa                   	cli    
c001593f:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015945:	83 c3 01             	add    ebx,0x1
c0015948:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c001594e:	eb 28                	jmp    c0015978 <cleanerTaskFunction(void*)+0x9c>
c0015950:	83 ec 0c             	sub    esp,0xc
c0015953:	68 6c 81 02 c0       	push   0xc002816c
c0015958:	e8 bf 92 00 00       	call   c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001595d:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015964:	89 c3                	mov    ebx,eax
c0015966:	e8 b9 92 00 00       	call   c001ec24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001596b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001596e:	e8 95 fc ff ff       	call   c0015608 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	66 90                	xchg   ax,ax
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	68 6c 81 02 c0       	push   0xc002816c
c0015980:	e8 7b 92 00 00       	call   c001ec00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	84 c0                	test   al,al
c001598a:	74 c4                	je     c0015950 <cleanerTaskFunction(void*)+0x74>
c001598c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015991:	83 e8 01             	sub    eax,0x1
c0015994:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015999:	75 01                	jne    c001599c <cleanerTaskFunction(void*)+0xc0>
c001599b:	fb                   	sti    
c001599c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159a1:	83 e8 01             	sub    eax,0x1
c00159a4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00159a9:	0f 85 31 ff ff ff    	jne    c00158e0 <cleanerTaskFunction(void*)+0x4>
c00159af:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00159b4:	85 c0                	test   eax,eax
c00159b6:	0f 84 24 ff ff ff    	je     c00158e0 <cleanerTaskFunction(void*)+0x4>
c00159bc:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159c6:	e8 99 f6 ff ff       	call   c0015064 <schedule()>
c00159cb:	e9 10 ff ff ff       	jmp    c00158e0 <cleanerTaskFunction(void*)+0x4>
c00159d0:	83 ec 0c             	sub    esp,0xc
c00159d3:	6a 02                	push   0x2
c00159d5:	e8 62 f8 ff ff       	call   c001523c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	e9 36 ff ff ff       	jmp    c0015918 <cleanerTaskFunction(void*)+0x3c>
c00159e2:	66 90                	xchg   ax,ax

c00159e4 <terminateTask(int)>:
c00159e4:	83 ec 14             	sub    esp,0x14
c00159e7:	fa                   	cli    
c00159e8:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159ee:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159f4:	83 c2 01             	add    edx,0x1
c00159f7:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159fd:	83 c1 01             	add    ecx,0x1
c0015a00:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a06:	fa                   	cli    
c0015a07:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015a10:	83 c0 01             	add    eax,0x1
c0015a13:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a1d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a25:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a28:	50                   	push   eax
c0015a29:	68 6c 81 02 c0       	push   0xc002816c
c0015a2e:	e8 ad 92 00 00       	call   c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a38:	83 c4 10             	add    esp,0x10
c0015a3b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a42:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a47:	85 c0                	test   eax,eax
c0015a49:	74 65                	je     c0015ab0 <terminateTask(int)+0xcc>
c0015a4b:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a52:	83 ec 0c             	sub    esp,0xc
c0015a55:	50                   	push   eax
c0015a56:	e8 01 fb ff ff       	call   c001555c <unblockTask(ThreadControlBlock*)>
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	66 90                	xchg   ax,ax
c0015a60:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a65:	83 e8 01             	sub    eax,0x1
c0015a68:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a6d:	75 01                	jne    c0015a70 <terminateTask(int)+0x8c>
c0015a6f:	fb                   	sti    
c0015a70:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a75:	83 e8 01             	sub    eax,0x1
c0015a78:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a7d:	75 09                	jne    c0015a88 <terminateTask(int)+0xa4>
c0015a7f:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a86:	75 3c                	jne    c0015ac4 <terminateTask(int)+0xe0>
c0015a88:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a8d:	83 e8 01             	sub    eax,0x1
c0015a90:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a95:	75 01                	jne    c0015a98 <terminateTask(int)+0xb4>
c0015a97:	fb                   	sti    
c0015a98:	fa                   	cli    
c0015a99:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a9e:	83 c0 01             	add    eax,0x1
c0015aa1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015aa6:	66 90                	xchg   ax,ax
c0015aa8:	e8 b7 f5 ff ff       	call   c0015064 <schedule()>
c0015aad:	eb d9                	jmp    c0015a88 <terminateTask(int)+0xa4>
c0015aaf:	90                   	nop
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	68 6a 12 02 c0       	push   0xc002126a
c0015ab8:	e8 e1 4e ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0015abd:	83 c4 10             	add    esp,0x10
c0015ac0:	eb 9e                	jmp    c0015a60 <terminateTask(int)+0x7c>
c0015ac2:	66 90                	xchg   ax,ax
c0015ac4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ace:	eb d8                	jmp    c0015aa8 <terminateTask(int)+0xc4>

c0015ad0 <Thr::terminateFromIRQ(int)>:
c0015ad0:	83 ec 18             	sub    esp,0x18
c0015ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ad7:	50                   	push   eax
c0015ad8:	e8 07 ff ff ff       	call   c00159e4 <terminateTask(int)>
c0015add:	90                   	nop
c0015ade:	66 90                	xchg   ax,ax

c0015ae0 <Semaphore::release()>:
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ae7:	fa                   	cli    
c0015ae8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aed:	83 c0 01             	add    eax,0x1
c0015af0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015af5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015afa:	8d 48 01             	lea    ecx,[eax+0x1]
c0015afd:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015b03:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015b06:	85 c9                	test   ecx,ecx
c0015b08:	74 42                	je     c0015b4c <Semaphore::release()+0x6c>
c0015b0a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015b0d:	83 ec 0c             	sub    esp,0xc
c0015b10:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b13:	51                   	push   ecx
c0015b14:	e8 43 fa ff ff       	call   c001555c <unblockTask(ThreadControlBlock*)>
c0015b19:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	83 e8 01             	sub    eax,0x1
c0015b24:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b29:	85 c0                	test   eax,eax
c0015b2b:	75 0b                	jne    c0015b38 <Semaphore::release()+0x58>
c0015b2d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b32:	85 c0                	test   eax,eax
c0015b34:	75 22                	jne    c0015b58 <Semaphore::release()+0x78>
c0015b36:	66 90                	xchg   ax,ax
c0015b38:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b3d:	83 e8 01             	sub    eax,0x1
c0015b40:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b45:	75 01                	jne    c0015b48 <Semaphore::release()+0x68>
c0015b47:	fb                   	sti    
c0015b48:	83 c4 0c             	add    esp,0xc
c0015b4b:	c3                   	ret    
c0015b4c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b4f:	83 e9 01             	sub    ecx,0x1
c0015b52:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b55:	eb cd                	jmp    c0015b24 <Semaphore::release()+0x44>
c0015b57:	90                   	nop
c0015b58:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b62:	e8 fd f4 ff ff       	call   c0015064 <schedule()>
c0015b67:	eb cf                	jmp    c0015b38 <Semaphore::release()+0x58>
c0015b69:	8d 76 00             	lea    esi,[esi+0x0]

c0015b6c <__static_initialization_and_destruction_0(int, int)>:
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b74:	0f 85 8e 00 00 00    	jne    c0015c08 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b7a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b82:	0f 85 80 00 00 00    	jne    c0015c08 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b88:	83 ec 0c             	sub    esp,0xc
c0015b8b:	68 84 81 02 c0       	push   0xc0028184
c0015b90:	e8 ff 93 00 00       	call   c001ef94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b95:	83 c4 10             	add    esp,0x10
c0015b98:	83 ec 04             	sub    esp,0x4
c0015b9b:	68 04 1f 02 c0       	push   0xc0021f04
c0015ba0:	68 84 81 02 c0       	push   0xc0028184
c0015ba5:	68 44 ef 01 c0       	push   0xc001ef44
c0015baa:	e8 a1 4c ff ff       	call   c000a850 <__cxa_atexit>
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	83 ec 0c             	sub    esp,0xc
c0015bb5:	68 78 81 02 c0       	push   0xc0028178
c0015bba:	e8 d5 93 00 00       	call   c001ef94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bbf:	83 c4 10             	add    esp,0x10
c0015bc2:	83 ec 04             	sub    esp,0x4
c0015bc5:	68 04 1f 02 c0       	push   0xc0021f04
c0015bca:	68 78 81 02 c0       	push   0xc0028178
c0015bcf:	68 44 ef 01 c0       	push   0xc001ef44
c0015bd4:	e8 77 4c ff ff       	call   c000a850 <__cxa_atexit>
c0015bd9:	83 c4 10             	add    esp,0x10
c0015bdc:	83 ec 0c             	sub    esp,0xc
c0015bdf:	68 6c 81 02 c0       	push   0xc002816c
c0015be4:	e8 ab 93 00 00       	call   c001ef94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015be9:	83 c4 10             	add    esp,0x10
c0015bec:	83 ec 04             	sub    esp,0x4
c0015bef:	68 04 1f 02 c0       	push   0xc0021f04
c0015bf4:	68 6c 81 02 c0       	push   0xc002816c
c0015bf9:	68 44 ef 01 c0       	push   0xc001ef44
c0015bfe:	e8 4d 4c ff ff       	call   c000a850 <__cxa_atexit>
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	66 90                	xchg   ax,ax
c0015c08:	90                   	nop
c0015c09:	83 c4 0c             	add    esp,0xc
c0015c0c:	c3                   	ret    
c0015c0d:	8d 76 00             	lea    esi,[esi+0x0]

c0015c10 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	83 ec 08             	sub    esp,0x8
c0015c16:	68 ff ff 00 00       	push   0xffff
c0015c1b:	6a 01                	push   0x1
c0015c1d:	e8 4a ff ff ff       	call   c0015b6c <__static_initialization_and_destruction_0(int, int)>
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	83 c4 0c             	add    esp,0xc
c0015c28:	c3                   	ret    

c0015c29 <Vm::inbv(unsigned short)>:
c0015c29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c2d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c32:	75 06                	jne    c0015c3a <Vm::inbv(unsigned short)+0x11>
c0015c34:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c39:	c3                   	ret    
c0015c3a:	ec                   	in     al,dx
c0015c3b:	c3                   	ret    

c0015c3c <Vm::outbv(unsigned short, unsigned char)>:
c0015c3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c44:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c49:	75 25                	jne    c0015c70 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c4b:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c51:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c57:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c5a:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c60:	83 fa 20             	cmp    edx,0x20
c0015c63:	75 0c                	jne    c0015c71 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c65:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c6f:	c3                   	ret    
c0015c70:	ee                   	out    dx,al
c0015c71:	c3                   	ret    

c0015c72 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c72:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c77:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c7c:	c1 e0 04             	shl    eax,0x4
c0015c7f:	01 d0                	add    eax,edx
c0015c81:	c3                   	ret    

c0015c82 <Vm::getSegment(unsigned int)>:
c0015c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c86:	c1 e8 10             	shr    eax,0x10
c0015c89:	c3                   	ret    

c0015c8a <Vm::getOffset(unsigned int)>:
c0015c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c8e:	c3                   	ret    

c0015c8f <Vm::mainloop2()>:
c0015c8f:	83 ec 18             	sub    esp,0x18
c0015c92:	fa                   	cli    
c0015c93:	6a 02                	push   0x2
c0015c95:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c9b:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015ca2:	e8 95 f5 ff ff       	call   c001523c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cac:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015cb0:	52                   	push   edx
c0015cb1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015cb5:	52                   	push   edx
c0015cb6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015cba:	52                   	push   edx
c0015cbb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015cbf:	50                   	push   eax
c0015cc0:	e8 4a a5 fe ff       	call   c000020f <goToVM86>
c0015cc5:	83 c4 2c             	add    esp,0x2c
c0015cc8:	c3                   	ret    

c0015cc9 <Vm::mainVm8086Loop(void*)>:
c0015cc9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cce:	48                   	dec    eax
c0015ccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cd4:	75 01                	jne    c0015cd7 <Vm::mainVm8086Loop(void*)+0xe>
c0015cd6:	fb                   	sti    
c0015cd7:	eb b6                	jmp    c0015c8f <Vm::mainloop2()>

c0015cd9 <Vm::mainloop3(unsigned long)>:
c0015cd9:	83 ec 18             	sub    esp,0x18
c0015cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ce0:	fa                   	cli    
c0015ce1:	6a 02                	push   0x2
c0015ce3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ce9:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cf0:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cf5:	e8 42 f5 ff ff       	call   c001523c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cfa:	83 c4 1c             	add    esp,0x1c
c0015cfd:	eb 90                	jmp    c0015c8f <Vm::mainloop2()>

c0015cff <Vm::initialise8086()>:
c0015cff:	83 ec 0c             	sub    esp,0xc
c0015d02:	68 80 00 00 00       	push   0x80
c0015d07:	6a 00                	push   0x0
c0015d09:	68 c9 5c 01 c0       	push   0xc0015cc9
c0015d0e:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015d14:	e8 ff f0 ff ff       	call   c0014e18 <Process::createThread(void (*)(void*), void*, int)>
c0015d19:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d20:	68 00 01 00 00       	push   0x100
c0015d25:	6a 00                	push   0x0
c0015d27:	6a 00                	push   0x0
c0015d29:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d2e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d33:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d39:	e8 c0 42 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d3e:	83 c4 2c             	add    esp,0x2c
c0015d41:	c3                   	ret    

c0015d42 <Vm::finish8086()>:
c0015d42:	53                   	push   ebx
c0015d43:	83 ec 08             	sub    esp,0x8
c0015d46:	fa                   	cli    
c0015d47:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d4d:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d54:	75 15                	jne    c0015d6b <Vm::finish8086()+0x29>
c0015d56:	e8 09 f3 ff ff       	call   c0015064 <schedule()>
c0015d5b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d60:	48                   	dec    eax
c0015d61:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d66:	75 de                	jne    c0015d46 <Vm::finish8086()+0x4>
c0015d68:	fb                   	sti    
c0015d69:	eb db                	jmp    c0015d46 <Vm::finish8086()+0x4>
c0015d6b:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d72:	83 ec 0c             	sub    esp,0xc
c0015d75:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d7b:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d81:	e8 d6 f7 ff ff       	call   c001555c <unblockTask(ThreadControlBlock*)>
c0015d86:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d91:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d97:	85 d2                	test   edx,edx
c0015d99:	75 01                	jne    c0015d9c <Vm::finish8086()+0x5a>
c0015d9b:	fb                   	sti    
c0015d9c:	83 c4 08             	add    esp,0x8
c0015d9f:	89 d8                	mov    eax,ebx
c0015da1:	5b                   	pop    ebx
c0015da2:	c3                   	ret    

c0015da3 <Vm::getOutput8086(unsigned char*)>:
c0015da3:	57                   	push   edi
c0015da4:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015daa:	56                   	push   esi
c0015dab:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015db0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015db4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015db6:	5e                   	pop    esi
c0015db7:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015dbc:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015dc6:	5f                   	pop    edi
c0015dc7:	c3                   	ret    

c0015dc8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015dc8:	55                   	push   ebp
c0015dc9:	57                   	push   edi
c0015dca:	56                   	push   esi
c0015dcb:	53                   	push   ebx
c0015dcc:	83 ec 0c             	sub    esp,0xc
c0015dcf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015dd3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015dd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015ddb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015ddf:	fa                   	cli    
c0015de0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015de6:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015ded:	75 15                	jne    c0015e04 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015def:	e8 70 f2 ff ff       	call   c0015064 <schedule()>
c0015df4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015df9:	48                   	dec    eax
c0015dfa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dff:	75 de                	jne    c0015ddf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e01:	fb                   	sti    
c0015e02:	eb db                	jmp    c0015ddf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e04:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e0e:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e13:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e17:	0f b7 ff             	movzx  edi,di
c0015e1a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e1e:	0f b7 f6             	movzx  esi,si
c0015e21:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e25:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e29:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e2d:	50                   	push   eax
c0015e2e:	6a 20                	push   0x20
c0015e30:	6a 00                	push   0x0
c0015e32:	68 e0 81 02 c0       	push   0xc00281e0
c0015e37:	e8 b4 a6 fe ff       	call   c00004f0 <memset>
c0015e3c:	5a                   	pop    edx
c0015e3d:	59                   	pop    ecx
c0015e3e:	57                   	push   edi
c0015e3f:	56                   	push   esi
c0015e40:	e8 2d fe ff ff       	call   c0015c72 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e4c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e50:	89 c7                	mov    edi,eax
c0015e52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e54:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e5b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e60:	48                   	dec    eax
c0015e61:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e66:	75 01                	jne    c0015e69 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e68:	fb                   	sti    
c0015e69:	83 ec 0c             	sub    esp,0xc
c0015e6c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e72:	e8 e5 f6 ff ff       	call   c001555c <unblockTask(ThreadControlBlock*)>
c0015e77:	83 c4 1c             	add    esp,0x1c
c0015e7a:	b0 01                	mov    al,0x1
c0015e7c:	5b                   	pop    ebx
c0015e7d:	5e                   	pop    esi
c0015e7e:	5f                   	pop    edi
c0015e7f:	5d                   	pop    ebp
c0015e80:	c3                   	ret    

c0015e81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e81:	55                   	push   ebp
c0015e82:	57                   	push   edi
c0015e83:	56                   	push   esi
c0015e84:	53                   	push   ebx
c0015e85:	83 ec 2c             	sub    esp,0x2c
c0015e88:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e8c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015e90:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e94:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015e98:	fa                   	cli    
c0015e99:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0015e9f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ea5:	84 db                	test   bl,bl
c0015ea7:	75 1d                	jne    c0015ec6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x45>
c0015ea9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015ead:	e8 b2 f1 ff ff       	call   c0015064 <schedule()>
c0015eb2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015eb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ebb:	48                   	dec    eax
c0015ebc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ec1:	75 d5                	jne    c0015e98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015ec3:	fb                   	sti    
c0015ec4:	eb d2                	jmp    c0015e98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015ec6:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ed0:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015ed5:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ed9:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0015edd:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015ee1:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015ee5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ee9:	50                   	push   eax
c0015eea:	6a 20                	push   0x20
c0015eec:	6a 00                	push   0x0
c0015eee:	68 e0 81 02 c0       	push   0xc00281e0
c0015ef3:	e8 f8 a5 fe ff       	call   c00004f0 <memset>
c0015ef8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015eff:	e8 c7 1b ff ff       	call   c0007acb <malloc>
c0015f04:	83 c4 0c             	add    esp,0xc
c0015f07:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015f0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015f11:	89 c5                	mov    ebp,eax
c0015f13:	50                   	push   eax
c0015f14:	e8 2d 50 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c0015f19:	83 c4 10             	add    esp,0x10
c0015f1c:	85 ed                	test   ebp,ebp
c0015f1e:	75 0a                	jne    c0015f2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	68 98 13 02 c0       	push   0xc0021398
c0015f28:	eb 2b                	jmp    c0015f55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0015f2a:	50                   	push   eax
c0015f2b:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f2f:	50                   	push   eax
c0015f30:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f34:	50                   	push   eax
c0015f35:	55                   	push   ebp
c0015f36:	e8 73 53 ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c0015f3b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f3f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f4b:	74 27                	je     c0015f74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf3>
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	68 ac 13 02 c0       	push   0xc00213ac
c0015f55:	e8 0f a9 ff ff       	call   c0010869 <KePanic(char const*)>
c0015f5a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f5f:	83 c4 10             	add    esp,0x10
c0015f62:	48                   	dec    eax
c0015f63:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f68:	85 c0                	test   eax,eax
c0015f6a:	75 01                	jne    c0015f6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f6c:	fb                   	sti    
c0015f6d:	31 db                	xor    ebx,ebx
c0015f6f:	e9 90 00 00 00       	jmp    c0016004 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f74:	51                   	push   ecx
c0015f75:	51                   	push   ecx
c0015f76:	6a 01                	push   0x1
c0015f78:	55                   	push   ebp
c0015f79:	e8 84 50 ff ff       	call   c000b002 <File::open(FileOpenMode)>
c0015f7e:	83 c4 10             	add    esp,0x10
c0015f81:	85 c0                	test   eax,eax
c0015f83:	74 26                	je     c0015fab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12a>
c0015f85:	83 ec 0c             	sub    esp,0xc
c0015f88:	68 c5 13 02 c0       	push   0xc00213c5
c0015f8d:	e8 d7 a8 ff ff       	call   c0010869 <KePanic(char const*)>
c0015f92:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f97:	83 c4 10             	add    esp,0x10
c0015f9a:	48                   	dec    eax
c0015f9b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fa0:	85 c0                	test   eax,eax
c0015fa2:	75 c9                	jne    c0015f6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015fa4:	fb                   	sti    
c0015fa5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0015fa9:	eb 59                	jmp    c0016004 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015fab:	50                   	push   eax
c0015fac:	0f b7 ff             	movzx  edi,di
c0015faf:	50                   	push   eax
c0015fb0:	0f b7 f6             	movzx  esi,si
c0015fb3:	57                   	push   edi
c0015fb4:	56                   	push   esi
c0015fb5:	e8 b8 fc ff ff       	call   c0015c72 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fba:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fbd:	5a                   	pop    edx
c0015fbe:	8d 74 24 20          	lea    esi,[esp+0x20]
c0015fc2:	56                   	push   esi
c0015fc3:	50                   	push   eax
c0015fc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fcc:	55                   	push   ebp
c0015fcd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fd0:	83 c4 14             	add    esp,0x14
c0015fd3:	55                   	push   ebp
c0015fd4:	e8 87 50 ff ff       	call   c000b060 <File::close()>
c0015fd9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fde:	83 c4 10             	add    esp,0x10
c0015fe1:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015fe8:	48                   	dec    eax
c0015fe9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fee:	85 c0                	test   eax,eax
c0015ff0:	75 01                	jne    c0015ff3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0015ff2:	fb                   	sti    
c0015ff3:	83 ec 0c             	sub    esp,0xc
c0015ff6:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015ffc:	e8 5b f5 ff ff       	call   c001555c <unblockTask(ThreadControlBlock*)>
c0016001:	83 c4 10             	add    esp,0x10
c0016004:	83 c4 2c             	add    esp,0x2c
c0016007:	88 d8                	mov    al,bl
c0016009:	5b                   	pop    ebx
c001600a:	5e                   	pop    esi
c001600b:	5f                   	pop    edi
c001600c:	5d                   	pop    ebp
c001600d:	c3                   	ret    

c001600e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001600e:	57                   	push   edi
c001600f:	56                   	push   esi
c0016010:	53                   	push   ebx
c0016011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016015:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016019:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001601d:	83 e8 06             	sub    eax,0x6
c0016020:	0f b7 c0             	movzx  eax,ax
c0016023:	50                   	push   eax
c0016024:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016029:	50                   	push   eax
c001602a:	e8 43 fc ff ff       	call   c0015c72 <Vm::realToLinear(unsigned short, unsigned short)>
c001602f:	5a                   	pop    edx
c0016030:	5e                   	pop    esi
c0016031:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016034:	8d 56 fa             	lea    edx,[esi-0x6]
c0016037:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c001603a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016040:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016043:	8d 56 02             	lea    edx,[esi+0x2]
c0016046:	66 89 10             	mov    WORD PTR [eax],dx
c0016049:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001604c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016050:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016053:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016057:	89 d6                	mov    esi,edx
c0016059:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001605f:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0016065:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016069:	74 05                	je     c0016070 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c001606b:	80 ce 02             	or     dh,0x2
c001606e:	89 d6                	mov    esi,edx
c0016070:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016079:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001607d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016085:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016088:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016090:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016093:	5b                   	pop    ebx
c0016094:	5e                   	pop    esi
c0016095:	5f                   	pop    edi
c0016096:	c3                   	ret    

c0016097 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016097:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001609c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160a1:	c1 e0 04             	shl    eax,0x4
c00160a4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00160a7:	c3                   	ret    

c00160a8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00160a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160ad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160b2:	c1 e0 04             	shl    eax,0x4
c00160b5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00160b9:	c3                   	ret    

c00160ba <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00160ba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160c4:	c1 e0 04             	shl    eax,0x4
c00160c7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00160ca:	c3                   	ret    

c00160cb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00160cb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160d0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160d5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00160d9:	c1 e0 04             	shl    eax,0x4
c00160dc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160df:	c3                   	ret    

c00160e0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160ee:	c1 e0 04             	shl    eax,0x4
c00160f1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160f5:	c3                   	ret    

c00160f6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016100:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016104:	c1 e0 04             	shl    eax,0x4
c0016107:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001610a:	c3                   	ret    

c001610b <Vm::faultHandler(regs*)>:
c001610b:	55                   	push   ebp
c001610c:	57                   	push   edi
c001610d:	56                   	push   esi
c001610e:	53                   	push   ebx
c001610f:	83 ec 2c             	sub    esp,0x2c
c0016112:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016116:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016119:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001611d:	0f b7 f8             	movzx  edi,ax
c0016120:	0f b7 c0             	movzx  eax,ax
c0016123:	52                   	push   edx
c0016124:	50                   	push   eax
c0016125:	e8 48 fb ff ff       	call   c0015c72 <Vm::realToLinear(unsigned short, unsigned short)>
c001612a:	5a                   	pop    edx
c001612b:	59                   	pop    ecx
c001612c:	89 c1                	mov    ecx,eax
c001612e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016131:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016135:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001613a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001613e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016141:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016145:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001614a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001614e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016152:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016156:	e8 17 fb ff ff       	call   c0015c72 <Vm::realToLinear(unsigned short, unsigned short)>
c001615b:	5e                   	pop    esi
c001615c:	be 06 00 00 00       	mov    esi,0x6
c0016161:	5d                   	pop    ebp
c0016162:	31 ed                	xor    ebp,ebp
c0016164:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016169:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001616c:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016172:	0f 84 54 02 00 00    	je     c00163cc <Vm::faultHandler(regs*)+0x2c1>
c0016178:	0f 87 94 00 00 00    	ja     c0016212 <Vm::faultHandler(regs*)+0x107>
c001617e:	83 fa 66             	cmp    edx,0x66
c0016181:	0f 84 c2 01 00 00    	je     c0016349 <Vm::faultHandler(regs*)+0x23e>
c0016187:	77 47                	ja     c00161d0 <Vm::faultHandler(regs*)+0xc5>
c0016189:	83 fa 36             	cmp    edx,0x36
c001618c:	0f 84 aa 01 00 00    	je     c001633c <Vm::faultHandler(regs*)+0x231>
c0016192:	77 1a                	ja     c00161ae <Vm::faultHandler(regs*)+0xa3>
c0016194:	83 fa 26             	cmp    edx,0x26
c0016197:	0f 84 78 01 00 00    	je     c0016315 <Vm::faultHandler(regs*)+0x20a>
c001619d:	83 fa 2e             	cmp    edx,0x2e
c00161a0:	0f 85 07 06 00 00    	jne    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c00161a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161a9:	31 f6                	xor    esi,esi
c00161ab:	41                   	inc    ecx
c00161ac:	eb bb                	jmp    c0016169 <Vm::faultHandler(regs*)+0x5e>
c00161ae:	83 fa 64             	cmp    edx,0x64
c00161b1:	0f 84 6b 01 00 00    	je     c0016322 <Vm::faultHandler(regs*)+0x217>
c00161b7:	0f 87 72 01 00 00    	ja     c001632f <Vm::faultHandler(regs*)+0x224>
c00161bd:	83 fa 3e             	cmp    edx,0x3e
c00161c0:	0f 85 e7 05 00 00    	jne    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c00161c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161c9:	be 01 00 00 00       	mov    esi,0x1
c00161ce:	eb db                	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c00161d0:	83 fa 6d             	cmp    edx,0x6d
c00161d3:	0f 84 14 03 00 00    	je     c00164ed <Vm::faultHandler(regs*)+0x3e2>
c00161d9:	77 17                	ja     c00161f2 <Vm::faultHandler(regs*)+0xe7>
c00161db:	83 fa 67             	cmp    edx,0x67
c00161de:	0f 84 72 01 00 00    	je     c0016356 <Vm::faultHandler(regs*)+0x24b>
c00161e4:	83 fa 6c             	cmp    edx,0x6c
c00161e7:	0f 84 91 02 00 00    	je     c001647e <Vm::faultHandler(regs*)+0x373>
c00161ed:	e9 bb 05 00 00       	jmp    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c00161f2:	83 fa 6f             	cmp    edx,0x6f
c00161f5:	0f 84 20 04 00 00    	je     c001661b <Vm::faultHandler(regs*)+0x510>
c00161fb:	0f 82 82 03 00 00    	jb     c0016583 <Vm::faultHandler(regs*)+0x478>
c0016201:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016207:	0f 84 56 01 00 00    	je     c0016363 <Vm::faultHandler(regs*)+0x258>
c001620d:	e9 9b 05 00 00       	jmp    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c0016212:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016218:	0f 84 37 05 00 00    	je     c0016755 <Vm::faultHandler(regs*)+0x64a>
c001621e:	0f 87 89 00 00 00    	ja     c00162ad <Vm::faultHandler(regs*)+0x1a2>
c0016224:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001622a:	0f 84 b6 04 00 00    	je     c00166e6 <Vm::faultHandler(regs*)+0x5db>
c0016230:	77 58                	ja     c001628a <Vm::faultHandler(regs*)+0x17f>
c0016232:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016238:	0f 84 ee 01 00 00    	je     c001642c <Vm::faultHandler(regs*)+0x321>
c001623e:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016244:	0f 85 63 05 00 00    	jne    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c001624a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001624d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016250:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016254:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016257:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001625b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016261:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016264:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016268:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001626e:	c1 e8 09             	shr    eax,0x9
c0016271:	83 e0 01             	and    eax,0x1
c0016274:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016277:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001627a:	83 c0 06             	add    eax,0x6
c001627d:	25 ff ff 00 00       	and    eax,0xffff
c0016282:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016285:	e9 1f 05 00 00       	jmp    c00167a9 <Vm::faultHandler(regs*)+0x69e>
c001628a:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016290:	0f 84 95 04 00 00    	je     c001672b <Vm::faultHandler(regs*)+0x620>
c0016296:	0f 82 66 04 00 00    	jb     c0016702 <Vm::faultHandler(regs*)+0x5f7>
c001629c:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00162a2:	0f 84 9a 04 00 00    	je     c0016742 <Vm::faultHandler(regs*)+0x637>
c00162a8:	e9 00 05 00 00       	jmp    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c00162ad:	81 fa ef 00 00 00    	cmp    edx,0xef
c00162b3:	0f 84 dd 04 00 00    	je     c0016796 <Vm::faultHandler(regs*)+0x68b>
c00162b9:	77 2e                	ja     c00162e9 <Vm::faultHandler(regs*)+0x1de>
c00162bb:	81 fa ed 00 00 00    	cmp    edx,0xed
c00162c1:	0f 84 aa 04 00 00    	je     c0016771 <Vm::faultHandler(regs*)+0x666>
c00162c7:	81 fa ee 00 00 00    	cmp    edx,0xee
c00162cd:	0f 85 da 04 00 00    	jne    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c00162d3:	50                   	push   eax
c00162d4:	50                   	push   eax
c00162d5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162d9:	50                   	push   eax
c00162da:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162de:	50                   	push   eax
c00162df:	e8 58 f9 ff ff       	call   c0015c3c <Vm::outbv(unsigned short, unsigned char)>
c00162e4:	e9 a5 04 00 00       	jmp    c001678e <Vm::faultHandler(regs*)+0x683>
c00162e9:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162ef:	0f 84 6d 01 00 00    	je     c0016462 <Vm::faultHandler(regs*)+0x357>
c00162f5:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162fb:	0f 84 6f 01 00 00    	je     c0016470 <Vm::faultHandler(regs*)+0x365>
c0016301:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016307:	0f 85 a0 04 00 00    	jne    c00167ad <Vm::faultHandler(regs*)+0x6a2>
c001630d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016310:	e9 96 fe ff ff       	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c0016315:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016318:	be 02 00 00 00       	mov    esi,0x2
c001631d:	e9 89 fe ff ff       	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c0016322:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016325:	be 03 00 00 00       	mov    esi,0x3
c001632a:	e9 7c fe ff ff       	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c001632f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016332:	be 04 00 00 00       	mov    esi,0x4
c0016337:	e9 6f fe ff ff       	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c001633c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001633f:	be 05 00 00 00       	mov    esi,0x5
c0016344:	e9 62 fe ff ff       	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c0016349:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001634c:	bd 01 00 00 00       	mov    ebp,0x1
c0016351:	e9 55 fe ff ff       	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c0016356:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016359:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001635e:	e9 48 fe ff ff       	jmp    c00161ab <Vm::faultHandler(regs*)+0xa0>
c0016363:	83 e5 01             	and    ebp,0x1
c0016366:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016369:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001636d:	74 30                	je     c001639f <Vm::faultHandler(regs*)+0x294>
c001636f:	83 e9 04             	sub    ecx,0x4
c0016372:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016378:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001637e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016381:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016384:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001638a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001638e:	0f 84 12 04 00 00    	je     c00167a6 <Vm::faultHandler(regs*)+0x69b>
c0016394:	80 ce 02             	or     dh,0x2
c0016397:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001639a:	e9 07 04 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c001639f:	83 e9 02             	sub    ecx,0x2
c00163a2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00163a8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00163ab:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00163b5:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00163b9:	74 05                	je     c00163c0 <Vm::faultHandler(regs*)+0x2b5>
c00163bb:	80 ce 02             	or     dh,0x2
c00163be:	eb 03                	jmp    c00163c3 <Vm::faultHandler(regs*)+0x2b8>
c00163c0:	80 e6 fd             	and    dh,0xfd
c00163c3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163c7:	e9 da 03 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c00163cc:	83 e5 01             	and    ebp,0x1
c00163cf:	74 2a                	je     c00163fb <Vm::faultHandler(regs*)+0x2f0>
c00163d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00163d3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163d9:	81 ca 00 02 02 00    	or     edx,0x20200
c00163df:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00163e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163ea:	c1 e8 09             	shr    eax,0x9
c00163ed:	83 e0 01             	and    eax,0x1
c00163f0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163f3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163f6:	83 c0 04             	add    eax,0x4
c00163f9:	eb 24                	jmp    c001641f <Vm::faultHandler(regs*)+0x314>
c00163fb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163fe:	81 ca 00 02 02 00    	or     edx,0x20200
c0016404:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016407:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001640a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016410:	c1 e8 09             	shr    eax,0x9
c0016413:	83 e0 01             	and    eax,0x1
c0016416:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016419:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001641c:	83 c0 02             	add    eax,0x2
c001641f:	25 ff ff 00 00       	and    eax,0xffff
c0016424:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016427:	e9 7a 03 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c001642c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016430:	3d ee 00 00 00       	cmp    eax,0xee
c0016435:	75 10                	jne    c0016447 <Vm::faultHandler(regs*)+0x33c>
c0016437:	83 ec 0c             	sub    esp,0xc
c001643a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001643d:	e8 97 f8 ff ff       	call   c0015cd9 <Vm::mainloop3(unsigned long)>
c0016442:	e9 4a 03 00 00       	jmp    c0016791 <Vm::faultHandler(regs*)+0x686>
c0016447:	83 ec 0c             	sub    esp,0xc
c001644a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001644e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016452:	51                   	push   ecx
c0016453:	50                   	push   eax
c0016454:	53                   	push   ebx
c0016455:	e8 b4 fb ff ff       	call   c001600e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001645a:	83 c4 20             	add    esp,0x20
c001645d:	e9 47 03 00 00       	jmp    c00167a9 <Vm::faultHandler(regs*)+0x69e>
c0016462:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016467:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001646b:	e9 36 03 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c0016470:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016475:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016479:	e9 28 03 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c001647e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016483:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016486:	74 2b                	je     c00164b3 <Vm::faultHandler(regs*)+0x3a8>
c0016488:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001648f:	76 22                	jbe    c00164b3 <Vm::faultHandler(regs*)+0x3a8>
c0016491:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016495:	50                   	push   eax
c0016496:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001649a:	50                   	push   eax
c001649b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001649f:	50                   	push   eax
c00164a0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164a4:	50                   	push   eax
c00164a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164a9:	50                   	push   eax
c00164aa:	6a 6c                	push   0x6c
c00164ac:	6a 6c                	push   0x6c
c00164ae:	e9 c0 01 00 00       	jmp    c0016673 <Vm::faultHandler(regs*)+0x568>
c00164b3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00164b7:	83 ec 0c             	sub    esp,0xc
c00164ba:	0f b7 f6             	movzx  esi,si
c00164bd:	50                   	push   eax
c00164be:	e8 66 f7 ff ff       	call   c0015c29 <Vm::inbv(unsigned short)>
c00164c3:	83 c4 0c             	add    esp,0xc
c00164c6:	0f b6 c0             	movzx  eax,al
c00164c9:	50                   	push   eax
c00164ca:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00164ce:	50                   	push   eax
c00164cf:	56                   	push   esi
c00164d0:	e8 f6 fb ff ff       	call   c00160cb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164db:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164df:	74 03                	je     c00164e4 <Vm::faultHandler(regs*)+0x3d9>
c00164e1:	48                   	dec    eax
c00164e2:	eb 01                	jmp    c00164e5 <Vm::faultHandler(regs*)+0x3da>
c00164e4:	40                   	inc    eax
c00164e5:	0f b7 c0             	movzx  eax,ax
c00164e8:	e9 8e 00 00 00       	jmp    c001657b <Vm::faultHandler(regs*)+0x470>
c00164ed:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164f2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164f8:	74 29                	je     c0016523 <Vm::faultHandler(regs*)+0x418>
c00164fa:	3d ff ff 00 00       	cmp    eax,0xffff
c00164ff:	76 22                	jbe    c0016523 <Vm::faultHandler(regs*)+0x418>
c0016501:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016505:	50                   	push   eax
c0016506:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001650a:	50                   	push   eax
c001650b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001650f:	50                   	push   eax
c0016510:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016514:	50                   	push   eax
c0016515:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016519:	50                   	push   eax
c001651a:	6a 6d                	push   0x6d
c001651c:	6a 6d                	push   0x6d
c001651e:	e9 50 01 00 00       	jmp    c0016673 <Vm::faultHandler(regs*)+0x568>
c0016523:	83 e5 01             	and    ebp,0x1
c0016526:	0f b7 c8             	movzx  ecx,ax
c0016529:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001652c:	0f b7 f6             	movzx  esi,si
c001652f:	74 1e                	je     c001654f <Vm::faultHandler(regs*)+0x444>
c0016531:	ed                   	in     eax,dx
c0016532:	55                   	push   ebp
c0016533:	50                   	push   eax
c0016534:	51                   	push   ecx
c0016535:	56                   	push   esi
c0016536:	e8 bb fb ff ff       	call   c00160f6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001653b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001653e:	83 c4 10             	add    esp,0x10
c0016541:	8d 50 04             	lea    edx,[eax+0x4]
c0016544:	83 e8 04             	sub    eax,0x4
c0016547:	81 e2 ff ff 00 00    	and    edx,0xffff
c001654d:	eb 20                	jmp    c001656f <Vm::faultHandler(regs*)+0x464>
c001654f:	66 ed                	in     ax,dx
c0016551:	57                   	push   edi
c0016552:	0f b7 c0             	movzx  eax,ax
c0016555:	50                   	push   eax
c0016556:	51                   	push   ecx
c0016557:	56                   	push   esi
c0016558:	e8 83 fb ff ff       	call   c00160e0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001655d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016560:	83 c4 10             	add    esp,0x10
c0016563:	8d 50 02             	lea    edx,[eax+0x2]
c0016566:	83 e8 02             	sub    eax,0x2
c0016569:	81 e2 ff ff 00 00    	and    edx,0xffff
c001656f:	25 ff ff 00 00       	and    eax,0xffff
c0016574:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016578:	0f 44 c2             	cmove  eax,edx
c001657b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001657e:	e9 23 02 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c0016583:	8d 46 ff             	lea    eax,[esi-0x1]
c0016586:	0f b6 f0             	movzx  esi,al
c0016589:	83 fe 05             	cmp    esi,0x5
c001658c:	77 23                	ja     c00165b1 <Vm::faultHandler(regs*)+0x4a6>
c001658e:	ff 24 b5 38 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdebc8]
c0016595:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001659a:	eb 15                	jmp    c00165b1 <Vm::faultHandler(regs*)+0x4a6>
c001659c:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00165a0:	eb 0f                	jmp    c00165b1 <Vm::faultHandler(regs*)+0x4a6>
c00165a2:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00165a6:	eb 09                	jmp    c00165b1 <Vm::faultHandler(regs*)+0x4a6>
c00165a8:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00165ac:	eb 03                	jmp    c00165b1 <Vm::faultHandler(regs*)+0x4a6>
c00165ae:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00165b1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00165b6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165b9:	74 29                	je     c00165e4 <Vm::faultHandler(regs*)+0x4d9>
c00165bb:	3d ff ff 00 00       	cmp    eax,0xffff
c00165c0:	76 22                	jbe    c00165e4 <Vm::faultHandler(regs*)+0x4d9>
c00165c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165c6:	50                   	push   eax
c00165c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165cb:	50                   	push   eax
c00165cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165d0:	50                   	push   eax
c00165d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165d5:	50                   	push   eax
c00165d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165da:	50                   	push   eax
c00165db:	6a 6e                	push   0x6e
c00165dd:	6a 6e                	push   0x6e
c00165df:	e9 8f 00 00 00       	jmp    c0016673 <Vm::faultHandler(regs*)+0x568>
c00165e4:	52                   	push   edx
c00165e5:	0f b7 c0             	movzx  eax,ax
c00165e8:	52                   	push   edx
c00165e9:	50                   	push   eax
c00165ea:	57                   	push   edi
c00165eb:	e8 a7 fa ff ff       	call   c0016097 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165f0:	59                   	pop    ecx
c00165f1:	5e                   	pop    esi
c00165f2:	0f b6 c0             	movzx  eax,al
c00165f5:	50                   	push   eax
c00165f6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165fa:	50                   	push   eax
c00165fb:	e8 3c f6 ff ff       	call   c0015c3c <Vm::outbv(unsigned short, unsigned char)>
c0016600:	83 c4 10             	add    esp,0x10
c0016603:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016606:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001660a:	74 03                	je     c001660f <Vm::faultHandler(regs*)+0x504>
c001660c:	48                   	dec    eax
c001660d:	eb 01                	jmp    c0016610 <Vm::faultHandler(regs*)+0x505>
c001660f:	40                   	inc    eax
c0016610:	0f b7 c0             	movzx  eax,ax
c0016613:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016616:	e9 8b 01 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c001661b:	8d 46 ff             	lea    eax,[esi-0x1]
c001661e:	0f b6 f0             	movzx  esi,al
c0016621:	83 fe 05             	cmp    esi,0x5
c0016624:	77 1e                	ja     c0016644 <Vm::faultHandler(regs*)+0x539>
c0016626:	ff 24 b5 50 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdebb0]
c001662d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016631:	eb 11                	jmp    c0016644 <Vm::faultHandler(regs*)+0x539>
c0016633:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016636:	eb 0c                	jmp    c0016644 <Vm::faultHandler(regs*)+0x539>
c0016638:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001663b:	eb 07                	jmp    c0016644 <Vm::faultHandler(regs*)+0x539>
c001663d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016640:	eb 02                	jmp    c0016644 <Vm::faultHandler(regs*)+0x539>
c0016642:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016644:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016649:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001664c:	74 37                	je     c0016685 <Vm::faultHandler(regs*)+0x57a>
c001664e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016654:	76 2f                	jbe    c0016685 <Vm::faultHandler(regs*)+0x57a>
c0016656:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001665a:	50                   	push   eax
c001665b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001665f:	50                   	push   eax
c0016660:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016664:	50                   	push   eax
c0016665:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016669:	50                   	push   eax
c001666a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001666e:	50                   	push   eax
c001666f:	6a 6f                	push   0x6f
c0016671:	6a 6f                	push   0x6f
c0016673:	68 de 13 02 c0       	push   0xc00213de
c0016678:	e8 21 43 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001667d:	83 c4 20             	add    esp,0x20
c0016680:	e9 86 01 00 00       	jmp    c001680b <Vm::faultHandler(regs*)+0x700>
c0016685:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016688:	0f b7 d7             	movzx  edx,di
c001668b:	0f b7 c6             	movzx  eax,si
c001668e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016691:	81 e1 00 04 00 00    	and    ecx,0x400
c0016697:	83 e5 01             	and    ebp,0x1
c001669a:	74 1c                	je     c00166b8 <Vm::faultHandler(regs*)+0x5ad>
c001669c:	55                   	push   ebp
c001669d:	55                   	push   ebp
c001669e:	50                   	push   eax
c001669f:	52                   	push   edx
c00166a0:	e8 15 fa ff ff       	call   c00160ba <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00166a5:	83 c4 10             	add    esp,0x10
c00166a8:	89 fa                	mov    edx,edi
c00166aa:	ef                   	out    dx,eax
c00166ab:	8d 46 04             	lea    eax,[esi+0x4]
c00166ae:	83 ee 04             	sub    esi,0x4
c00166b1:	25 ff ff 00 00       	and    eax,0xffff
c00166b6:	eb 1b                	jmp    c00166d3 <Vm::faultHandler(regs*)+0x5c8>
c00166b8:	55                   	push   ebp
c00166b9:	55                   	push   ebp
c00166ba:	50                   	push   eax
c00166bb:	52                   	push   edx
c00166bc:	e8 e7 f9 ff ff       	call   c00160a8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	89 fa                	mov    edx,edi
c00166c6:	66 ef                	out    dx,ax
c00166c8:	8d 46 02             	lea    eax,[esi+0x2]
c00166cb:	83 ee 02             	sub    esi,0x2
c00166ce:	25 ff ff 00 00       	and    eax,0xffff
c00166d3:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166d9:	85 c9                	test   ecx,ecx
c00166db:	0f 44 f0             	cmove  esi,eax
c00166de:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166e1:	e9 c0 00 00 00       	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c00166e6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166ed:	83 ec 0c             	sub    esp,0xc
c00166f0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166f4:	50                   	push   eax
c00166f5:	e8 2f f5 ff ff       	call   c0015c29 <Vm::inbv(unsigned short)>
c00166fa:	0f b6 c0             	movzx  eax,al
c00166fd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016700:	eb 3a                	jmp    c001673c <Vm::faultHandler(regs*)+0x631>
c0016702:	83 e5 01             	and    ebp,0x1
c0016705:	74 07                	je     c001670e <Vm::faultHandler(regs*)+0x603>
c0016707:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001670b:	ed                   	in     eax,dx
c001670c:	eb 14                	jmp    c0016722 <Vm::faultHandler(regs*)+0x617>
c001670e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016711:	66 31 f6             	xor    si,si
c0016714:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016717:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001671b:	66 ed                	in     ax,dx
c001671d:	0f b7 c0             	movzx  eax,ax
c0016720:	09 f0                	or     eax,esi
c0016722:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016725:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016729:	eb 7e                	jmp    c00167a9 <Vm::faultHandler(regs*)+0x69e>
c001672b:	52                   	push   edx
c001672c:	52                   	push   edx
c001672d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016731:	50                   	push   eax
c0016732:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016736:	50                   	push   eax
c0016737:	e8 00 f5 ff ff       	call   c0015c3c <Vm::outbv(unsigned short, unsigned char)>
c001673c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016740:	eb 4f                	jmp    c0016791 <Vm::faultHandler(regs*)+0x686>
c0016742:	83 e5 01             	and    ebp,0x1
c0016745:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016748:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001674c:	74 03                	je     c0016751 <Vm::faultHandler(regs*)+0x646>
c001674e:	ef                   	out    dx,eax
c001674f:	eb d4                	jmp    c0016725 <Vm::faultHandler(regs*)+0x61a>
c0016751:	66 ef                	out    dx,ax
c0016753:	eb d0                	jmp    c0016725 <Vm::faultHandler(regs*)+0x61a>
c0016755:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016759:	83 ec 0c             	sub    esp,0xc
c001675c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016763:	50                   	push   eax
c0016764:	e8 c0 f4 ff ff       	call   c0015c29 <Vm::inbv(unsigned short)>
c0016769:	0f b6 c0             	movzx  eax,al
c001676c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001676f:	eb 1d                	jmp    c001678e <Vm::faultHandler(regs*)+0x683>
c0016771:	83 e5 01             	and    ebp,0x1
c0016774:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016777:	74 03                	je     c001677c <Vm::faultHandler(regs*)+0x671>
c0016779:	ed                   	in     eax,dx
c001677a:	eb 0d                	jmp    c0016789 <Vm::faultHandler(regs*)+0x67e>
c001677c:	66 ed                	in     ax,dx
c001677e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016781:	0f b7 c0             	movzx  eax,ax
c0016784:	66 31 d2             	xor    dx,dx
c0016787:	09 d0                	or     eax,edx
c0016789:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001678c:	eb 18                	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c001678e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016791:	83 c4 10             	add    esp,0x10
c0016794:	eb 13                	jmp    c00167a9 <Vm::faultHandler(regs*)+0x69e>
c0016796:	83 e5 01             	and    ebp,0x1
c0016799:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001679c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001679f:	74 03                	je     c00167a4 <Vm::faultHandler(regs*)+0x699>
c00167a1:	ef                   	out    dx,eax
c00167a2:	eb 02                	jmp    c00167a6 <Vm::faultHandler(regs*)+0x69b>
c00167a4:	66 ef                	out    dx,ax
c00167a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167a9:	b0 01                	mov    al,0x1
c00167ab:	eb 60                	jmp    c001680d <Vm::faultHandler(regs*)+0x702>
c00167ad:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167b1:	50                   	push   eax
c00167b2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167b6:	50                   	push   eax
c00167b7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167bb:	50                   	push   eax
c00167bc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167c0:	50                   	push   eax
c00167c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167c5:	50                   	push   eax
c00167c6:	52                   	push   edx
c00167c7:	52                   	push   edx
c00167c8:	68 0b 14 02 c0       	push   0xc002140b
c00167cd:	e8 cc 41 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00167d2:	83 c4 20             	add    esp,0x20
c00167d5:	83 ec 0c             	sub    esp,0xc
c00167d8:	6a 60                	push   0x60
c00167da:	e8 4a f4 ff ff       	call   c0015c29 <Vm::inbv(unsigned short)>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	0f b6 d0             	movzx  edx,al
c00167e5:	83 fa 1c             	cmp    edx,0x1c
c00167e8:	74 05                	je     c00167ef <Vm::faultHandler(regs*)+0x6e4>
c00167ea:	83 fa 5a             	cmp    edx,0x5a
c00167ed:	75 e6                	jne    c00167d5 <Vm::faultHandler(regs*)+0x6ca>
c00167ef:	0f b6 c0             	movzx  eax,al
c00167f2:	83 f8 1c             	cmp    eax,0x1c
c00167f5:	74 05                	je     c00167fc <Vm::faultHandler(regs*)+0x6f1>
c00167f7:	83 f8 5a             	cmp    eax,0x5a
c00167fa:	75 0f                	jne    c001680b <Vm::faultHandler(regs*)+0x700>
c00167fc:	83 ec 0c             	sub    esp,0xc
c00167ff:	6a 60                	push   0x60
c0016801:	e8 23 f4 ff ff       	call   c0015c29 <Vm::inbv(unsigned short)>
c0016806:	83 c4 10             	add    esp,0x10
c0016809:	eb e4                	jmp    c00167ef <Vm::faultHandler(regs*)+0x6e4>
c001680b:	31 c0                	xor    eax,eax
c001680d:	83 c4 2c             	add    esp,0x2c
c0016810:	5b                   	pop    ebx
c0016811:	5e                   	pop    esi
c0016812:	5f                   	pop    edi
c0016813:	5d                   	pop    ebp
c0016814:	c3                   	ret    

c0016815 <noCopro(unsigned long)>:
c0016815:	c3                   	ret    

c0016816 <nmiHandler(regs*, void*)>:
c0016816:	83 ec 0c             	sub    esp,0xc
c0016819:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001681e:	83 ec 0c             	sub    esp,0xc
c0016821:	50                   	push   eax
c0016822:	e8 a7 0a ff ff       	call   c00072ce <Computer::handleNMI()>
c0016827:	83 c4 10             	add    esp,0x10
c001682a:	90                   	nop
c001682b:	83 c4 0c             	add    esp,0xc
c001682e:	c3                   	ret    

c001682f <doubleFault(regs*, void*)>:
c001682f:	55                   	push   ebp
c0016830:	89 e5                	mov    ebp,esp
c0016832:	83 ec 08             	sub    esp,0x8
c0016835:	83 ec 0c             	sub    esp,0xc
c0016838:	68 68 14 02 c0       	push   0xc0021468
c001683d:	e8 27 a0 ff ff       	call   c0010869 <KePanic(char const*)>
c0016842:	83 c4 10             	add    esp,0x10
c0016845:	90                   	nop
c0016846:	c9                   	leave  
c0016847:	c3                   	ret    

c0016848 <displayDebugInfo(regs*)>:
c0016848:	83 ec 1c             	sub    esp,0x1c
c001684b:	0f 20 c0             	mov    eax,cr0
c001684e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016852:	0f 20 d0             	mov    eax,cr2
c0016855:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016859:	0f 20 d8             	mov    eax,cr3
c001685c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016860:	0f 20 e0             	mov    eax,cr4
c0016863:	89 04 24             	mov    DWORD PTR [esp],eax
c0016866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001686d:	83 ec 08             	sub    esp,0x8
c0016870:	50                   	push   eax
c0016871:	68 84 14 02 c0       	push   0xc0021484
c0016876:	e8 23 41 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001687b:	83 c4 10             	add    esp,0x10
c001687e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016882:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016885:	83 ec 08             	sub    esp,0x8
c0016888:	50                   	push   eax
c0016889:	68 75 14 02 c0       	push   0xc0021475
c001688e:	e8 0b 41 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001689d:	83 ec 08             	sub    esp,0x8
c00168a0:	50                   	push   eax
c00168a1:	68 80 14 02 c0       	push   0xc0021480
c00168a6:	e8 f3 40 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168b5:	83 ec 08             	sub    esp,0x8
c00168b8:	50                   	push   eax
c00168b9:	68 8f 14 02 c0       	push   0xc002148f
c00168be:	e8 db 40 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00168cd:	83 ec 08             	sub    esp,0x8
c00168d0:	50                   	push   eax
c00168d1:	68 9a 14 02 c0       	push   0xc002149a
c00168d6:	e8 c3 40 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00168db:	83 c4 10             	add    esp,0x10
c00168de:	83 ec 08             	sub    esp,0x8
c00168e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168e5:	68 a5 14 02 c0       	push   0xc00214a5
c00168ea:	e8 af 40 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	83 ec 08             	sub    esp,0x8
c00168f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168f9:	68 b0 14 02 c0       	push   0xc00214b0
c00168fe:	e8 9b 40 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001690b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016911:	83 ec 0c             	sub    esp,0xc
c0016914:	50                   	push   eax
c0016915:	e8 3f 1e ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001691a:	83 c4 10             	add    esp,0x10
c001691d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016922:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016928:	83 ec 08             	sub    esp,0x8
c001692b:	68 bb 14 02 c0       	push   0xc00214bb
c0016930:	50                   	push   eax
c0016931:	e8 60 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016936:	83 c4 10             	add    esp,0x10
c0016939:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001693e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016944:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016948:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001694b:	83 ec 08             	sub    esp,0x8
c001694e:	52                   	push   edx
c001694f:	50                   	push   eax
c0016950:	e8 fb 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016955:	83 c4 10             	add    esp,0x10
c0016958:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001695d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016963:	83 ec 08             	sub    esp,0x8
c0016966:	68 c9 14 02 c0       	push   0xc00214c9
c001696b:	50                   	push   eax
c001696c:	e8 25 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016971:	83 c4 10             	add    esp,0x10
c0016974:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016979:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001697f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016984:	8b 12                	mov    edx,DWORD PTR [edx]
c0016986:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016989:	83 c2 0c             	add    edx,0xc
c001698c:	83 ec 08             	sub    esp,0x8
c001698f:	52                   	push   edx
c0016990:	50                   	push   eax
c0016991:	e8 00 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a4:	83 ec 08             	sub    esp,0x8
c00169a7:	68 d2 14 02 c0       	push   0xc00214d2
c00169ac:	50                   	push   eax
c00169ad:	e8 e4 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169b2:	83 c4 10             	add    esp,0x10
c00169b5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169c4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00169c7:	83 ec 08             	sub    esp,0x8
c00169ca:	52                   	push   edx
c00169cb:	50                   	push   eax
c00169cc:	e8 7f 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169df:	83 ec 08             	sub    esp,0x8
c00169e2:	68 da 14 02 c0       	push   0xc00214da
c00169e7:	50                   	push   eax
c00169e8:	e8 a9 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169ff:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016a02:	83 ec 08             	sub    esp,0x8
c0016a05:	52                   	push   edx
c0016a06:	50                   	push   eax
c0016a07:	e8 44 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a0c:	83 c4 10             	add    esp,0x10
c0016a0f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a1a:	83 ec 08             	sub    esp,0x8
c0016a1d:	68 e2 14 02 c0       	push   0xc00214e2
c0016a22:	50                   	push   eax
c0016a23:	e8 6e 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a28:	83 c4 10             	add    esp,0x10
c0016a2b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a3a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a3d:	83 ec 08             	sub    esp,0x8
c0016a40:	52                   	push   edx
c0016a41:	50                   	push   eax
c0016a42:	e8 09 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a55:	83 ec 08             	sub    esp,0x8
c0016a58:	68 ea 14 02 c0       	push   0xc00214ea
c0016a5d:	50                   	push   eax
c0016a5e:	e8 33 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a63:	83 c4 10             	add    esp,0x10
c0016a66:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a75:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a78:	83 ec 08             	sub    esp,0x8
c0016a7b:	52                   	push   edx
c0016a7c:	50                   	push   eax
c0016a7d:	e8 ce 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a90:	83 ec 08             	sub    esp,0x8
c0016a93:	68 f2 14 02 c0       	push   0xc00214f2
c0016a98:	50                   	push   eax
c0016a99:	e8 f8 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a9e:	83 c4 10             	add    esp,0x10
c0016aa1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ab0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016ab3:	83 ec 08             	sub    esp,0x8
c0016ab6:	52                   	push   edx
c0016ab7:	50                   	push   eax
c0016ab8:	e8 93 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016acb:	83 ec 08             	sub    esp,0x8
c0016ace:	68 fa 14 02 c0       	push   0xc00214fa
c0016ad3:	50                   	push   eax
c0016ad4:	e8 bd 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016ad9:	83 c4 10             	add    esp,0x10
c0016adc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ae7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016aeb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016aee:	83 ec 08             	sub    esp,0x8
c0016af1:	52                   	push   edx
c0016af2:	50                   	push   eax
c0016af3:	e8 58 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b06:	83 ec 08             	sub    esp,0x8
c0016b09:	68 02 15 02 c0       	push   0xc0021502
c0016b0e:	50                   	push   eax
c0016b0f:	e8 82 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b22:	83 ec 08             	sub    esp,0x8
c0016b25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b29:	50                   	push   eax
c0016b2a:	e8 21 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b2f:	83 c4 10             	add    esp,0x10
c0016b32:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b3d:	83 ec 08             	sub    esp,0x8
c0016b40:	68 0b 15 02 c0       	push   0xc002150b
c0016b45:	50                   	push   eax
c0016b46:	e8 4b 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b4b:	83 c4 10             	add    esp,0x10
c0016b4e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b59:	83 ec 08             	sub    esp,0x8
c0016b5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b60:	50                   	push   eax
c0016b61:	e8 ea 1e ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b74:	83 ec 08             	sub    esp,0x8
c0016b77:	68 13 15 02 c0       	push   0xc0021513
c0016b7c:	50                   	push   eax
c0016b7d:	e8 14 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b90:	83 ec 08             	sub    esp,0x8
c0016b93:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b97:	50                   	push   eax
c0016b98:	e8 b3 1e ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b9d:	83 c4 10             	add    esp,0x10
c0016ba0:	fa                   	cli    
c0016ba1:	f4                   	hlt    
c0016ba2:	eb fe                	jmp    c0016ba2 <displayDebugInfo(regs*)+0x35a>

c0016ba4 <HalSystemIdle()>:
c0016ba4:	56                   	push   esi
c0016ba5:	53                   	push   ebx
c0016ba6:	83 ec 14             	sub    esp,0x14
c0016ba9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bb4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016bba:	83 e0 04             	and    eax,0x4
c0016bbd:	0f b6 c0             	movzx  eax,al
c0016bc0:	85 c0                	test   eax,eax
c0016bc2:	0f 95 c0             	setne  al
c0016bc5:	0f b6 c0             	movzx  eax,al
c0016bc8:	85 c0                	test   eax,eax
c0016bca:	74 4c                	je     c0016c18 <HalSystemIdle()+0x74>
c0016bcc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bd1:	83 ec 08             	sub    esp,0x8
c0016bd4:	68 e1 00 00 00       	push   0xe1
c0016bd9:	50                   	push   eax
c0016bda:	e8 fb 04 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016bdf:	83 c4 10             	add    esp,0x10
c0016be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016be6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bea:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bf3:	83 e2 02             	and    edx,0x2
c0016bf6:	89 d3                	mov    ebx,edx
c0016bf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bfc:	83 e2 00             	and    edx,0x0
c0016bff:	89 d6                	mov    esi,edx
c0016c01:	56                   	push   esi
c0016c02:	53                   	push   ebx
c0016c03:	68 e1 00 00 00       	push   0xe1
c0016c08:	50                   	push   eax
c0016c09:	e8 f8 04 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	e8 7e 95 fe ff       	call   c0000194 <doTPAUSE>
c0016c16:	eb 01                	jmp    c0016c19 <HalSystemIdle()+0x75>
c0016c18:	f4                   	hlt    
c0016c19:	90                   	nop
c0016c1a:	83 c4 14             	add    esp,0x14
c0016c1d:	5b                   	pop    ebx
c0016c1e:	5e                   	pop    esi
c0016c1f:	c3                   	ret    

c0016c20 <displayProgramFault(char const*)>:
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	83 ec 0c             	sub    esp,0xc
c0016c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c2a:	e8 6f 3d ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c42:	85 c0                	test   eax,eax
c0016c44:	74 21                	je     c0016c67 <displayProgramFault(char const*)+0x47>
c0016c46:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c50:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c56:	6a 04                	push   0x4
c0016c58:	6a 0f                	push   0xf
c0016c5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c5e:	50                   	push   eax
c0016c5f:	e8 a4 1e ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c64:	83 c4 10             	add    esp,0x10
c0016c67:	90                   	nop
c0016c68:	83 c4 0c             	add    esp,0xc
c0016c6b:	c3                   	ret    

c0016c6c <gpFault(regs*, void*)>:
c0016c6c:	83 ec 1c             	sub    esp,0x1c
c0016c6f:	c7 05 14 82 02 c0 0b 61 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc001610b
c0016c79:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c7e:	85 c0                	test   eax,eax
c0016c80:	74 1e                	je     c0016ca0 <gpFault(regs*, void*)+0x34>
c0016c82:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c87:	83 ec 0c             	sub    esp,0xc
c0016c8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c8e:	ff d0                	call   eax
c0016c90:	83 c4 10             	add    esp,0x10
c0016c93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c97:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c9c:	85 c0                	test   eax,eax
c0016c9e:	75 2e                	jne    c0016cce <gpFault(regs*, void*)+0x62>
c0016ca0:	83 ec 0c             	sub    esp,0xc
c0016ca3:	68 1b 15 02 c0       	push   0xc002151b
c0016ca8:	e8 73 ff ff ff       	call   c0016c20 <displayProgramFault(char const*)>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cb7:	e8 8c fb ff ff       	call   c0016848 <displayDebugInfo(regs*)>
c0016cbc:	83 c4 10             	add    esp,0x10
c0016cbf:	83 ec 0c             	sub    esp,0xc
c0016cc2:	6a 00                	push   0x0
c0016cc4:	e8 07 ee ff ff       	call   c0015ad0 <Thr::terminateFromIRQ(int)>
c0016cc9:	83 c4 10             	add    esp,0x10
c0016ccc:	eb 01                	jmp    c0016ccf <gpFault(regs*, void*)+0x63>
c0016cce:	90                   	nop
c0016ccf:	83 c4 1c             	add    esp,0x1c
c0016cd2:	c3                   	ret    

c0016cd3 <pgFault(regs*, void*)>:
c0016cd3:	83 ec 1c             	sub    esp,0x1c
c0016cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cda:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016cdd:	0f 20 d0             	mov    eax,cr2
c0016ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ce4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ce8:	83 ec 04             	sub    esp,0x4
c0016ceb:	52                   	push   edx
c0016cec:	50                   	push   eax
c0016ced:	68 f8 15 02 c0       	push   0xc00215f8
c0016cf2:	e8 a7 3c ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d04:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016d0a:	0f 20 d2             	mov    edx,cr2
c0016d0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d15:	83 ec 08             	sub    esp,0x8
c0016d18:	52                   	push   edx
c0016d19:	50                   	push   eax
c0016d1a:	e8 07 38 ff ff       	call   c000a526 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016d1f:	83 c4 10             	add    esp,0x10
c0016d22:	0f b6 c0             	movzx  eax,al
c0016d25:	85 c0                	test   eax,eax
c0016d27:	75 2e                	jne    c0016d57 <pgFault(regs*, void*)+0x84>
c0016d29:	83 ec 0c             	sub    esp,0xc
c0016d2c:	68 34 15 02 c0       	push   0xc0021534
c0016d31:	e8 ea fe ff ff       	call   c0016c20 <displayProgramFault(char const*)>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	83 ec 0c             	sub    esp,0xc
c0016d3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d40:	e8 03 fb ff ff       	call   c0016848 <displayDebugInfo(regs*)>
c0016d45:	83 c4 10             	add    esp,0x10
c0016d48:	83 ec 0c             	sub    esp,0xc
c0016d4b:	6a 00                	push   0x0
c0016d4d:	e8 7e ed ff ff       	call   c0015ad0 <Thr::terminateFromIRQ(int)>
c0016d52:	83 c4 10             	add    esp,0x10
c0016d55:	eb 01                	jmp    c0016d58 <pgFault(regs*, void*)+0x85>
c0016d57:	90                   	nop
c0016d58:	83 c4 1c             	add    esp,0x1c
c0016d5b:	c3                   	ret    

c0016d5c <otherISRHandler(regs*, void*)>:
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	83 ec 0c             	sub    esp,0xc
c0016d62:	68 20 16 02 c0       	push   0xc0021620
c0016d67:	e8 b4 fe ff ff       	call   c0016c20 <displayProgramFault(char const*)>
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	83 ec 0c             	sub    esp,0xc
c0016d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d76:	e8 cd fa ff ff       	call   c0016848 <displayDebugInfo(regs*)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	83 ec 0c             	sub    esp,0xc
c0016d81:	6a 00                	push   0x0
c0016d83:	e8 48 ed ff ff       	call   c0015ad0 <Thr::terminateFromIRQ(int)>
c0016d88:	83 c4 10             	add    esp,0x10
c0016d8b:	90                   	nop
c0016d8c:	83 c4 0c             	add    esp,0xc
c0016d8f:	c3                   	ret    

c0016d90 <opcodeFault(regs*, void*)>:
c0016d90:	55                   	push   ebp
c0016d91:	89 e5                	mov    ebp,esp
c0016d93:	83 ec 08             	sub    esp,0x8
c0016d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d9c:	83 ec 08             	sub    esp,0x8
c0016d9f:	50                   	push   eax
c0016da0:	68 3f 15 02 c0       	push   0xc002153f
c0016da5:	e8 f4 3b ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016daa:	83 c4 10             	add    esp,0x10
c0016dad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016db2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016db8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016dbe:	0f b6 c0             	movzx  eax,al
c0016dc1:	85 c0                	test   eax,eax
c0016dc3:	74 21                	je     c0016de6 <opcodeFault(regs*, void*)+0x56>
c0016dc5:	83 ec 0c             	sub    esp,0xc
c0016dc8:	68 48 16 02 c0       	push   0xc0021648
c0016dcd:	e8 cc 3b ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016dd2:	83 c4 10             	add    esp,0x10
c0016dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ddb:	8d 50 19             	lea    edx,[eax+0x19]
c0016dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016de1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016de4:	eb 2b                	jmp    c0016e11 <opcodeFault(regs*, void*)+0x81>
c0016de6:	83 ec 0c             	sub    esp,0xc
c0016de9:	68 4d 15 02 c0       	push   0xc002154d
c0016dee:	e8 2d fe ff ff       	call   c0016c20 <displayProgramFault(char const*)>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	83 ec 0c             	sub    esp,0xc
c0016df9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016dfc:	e8 47 fa ff ff       	call   c0016848 <displayDebugInfo(regs*)>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	6a 00                	push   0x0
c0016e09:	e8 c2 ec ff ff       	call   c0015ad0 <Thr::terminateFromIRQ(int)>
c0016e0e:	83 c4 10             	add    esp,0x10
c0016e11:	c9                   	leave  
c0016e12:	c3                   	ret    

c0016e13 <i386SaveCoprocessor(void*)>:
c0016e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e17:	83 c0 3f             	add    eax,0x3f
c0016e1a:	83 e0 c0             	and    eax,0xffffffc0
c0016e1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e21:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016e27 <i386LoadCoprocessor(void*)>:
c0016e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e2b:	83 c0 3f             	add    eax,0x3f
c0016e2e:	83 e0 c0             	and    eax,0xffffffc0
c0016e31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e35:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e3b <x87EmulHandler(regs*, void*)>:
c0016e3b:	53                   	push   ebx
c0016e3c:	83 ec 08             	sub    esp,0x8
c0016e3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e44:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e48:	74 10                	je     c0016e5a <x87EmulHandler(regs*, void*)+0x1f>
c0016e4a:	83 ec 0c             	sub    esp,0xc
c0016e4d:	68 5a 15 02 c0       	push   0xc002155a
c0016e52:	e8 12 9a ff ff       	call   c0010869 <KePanic(char const*)>
c0016e57:	83 c4 10             	add    esp,0x10
c0016e5a:	0f 20 c0             	mov    eax,cr0
c0016e5d:	a8 08                	test   al,0x8
c0016e5f:	74 59                	je     c0016eba <x87EmulHandler(regs*, void*)+0x7f>
c0016e61:	0f 06                	clts   
c0016e63:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e68:	85 c0                	test   eax,eax
c0016e6a:	74 0e                	je     c0016e7a <x87EmulHandler(regs*, void*)+0x3f>
c0016e6c:	83 ec 0c             	sub    esp,0xc
c0016e6f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e72:	e8 9c ff ff ff       	call   c0016e13 <i386SaveCoprocessor(void*)>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e80:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e84:	75 12                	jne    c0016e98 <x87EmulHandler(regs*, void*)+0x5d>
c0016e86:	83 ec 0c             	sub    esp,0xc
c0016e89:	68 40 02 00 00       	push   0x240
c0016e8e:	e8 38 0c ff ff       	call   c0007acb <malloc>
c0016e93:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e96:	eb 10                	jmp    c0016ea8 <x87EmulHandler(regs*, void*)+0x6d>
c0016e98:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e9d:	83 ec 0c             	sub    esp,0xc
c0016ea0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016ea3:	e8 7f ff ff ff       	call   c0016e27 <i386LoadCoprocessor(void*)>
c0016ea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ead:	83 c4 10             	add    esp,0x10
c0016eb0:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016eb5:	83 c4 08             	add    esp,0x8
c0016eb8:	5b                   	pop    ebx
c0016eb9:	c3                   	ret    
c0016eba:	83 ec 0c             	sub    esp,0xc
c0016ebd:	68 6e 15 02 c0       	push   0xc002156e
c0016ec2:	e8 d7 3a ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016ec7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016ecf:	83 c4 18             	add    esp,0x18
c0016ed2:	5b                   	pop    ebx
c0016ed3:	e9 f8 eb ff ff       	jmp    c0015ad0 <Thr::terminateFromIRQ(int)>

c0016ed8 <HalInitialiseCoprocessor()>:
c0016ed8:	83 ec 10             	sub    esp,0x10
c0016edb:	6a 00                	push   0x0
c0016edd:	68 3b 6e 01 c0       	push   0xc0016e3b
c0016ee2:	6a 07                	push   0x7
c0016ee4:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016eee:	e8 43 54 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ef3:	e8 28 70 00 00       	call   c001df20 <avxDetect>
c0016ef8:	83 c4 10             	add    esp,0x10
c0016efb:	85 c0                	test   eax,eax
c0016efd:	74 1c                	je     c0016f1b <HalInitialiseCoprocessor()+0x43>
c0016eff:	c7 05 10 82 02 c0 4a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df4a
c0016f09:	c7 05 0c 82 02 c0 5b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df5b
c0016f13:	83 c4 0c             	add    esp,0xc
c0016f16:	e9 51 70 00 00       	jmp    c001df6c <avxInit>
c0016f1b:	e8 90 73 00 00       	call   c001e2b0 <absolutelyNoChanceInHell>
c0016f20:	85 c0                	test   eax,eax
c0016f22:	74 1c                	je     c0016f40 <HalInitialiseCoprocessor()+0x68>
c0016f24:	c7 05 10 82 02 c0 c8 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2c8
c0016f2e:	c7 05 0c 82 02 c0 d0 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2d0
c0016f38:	83 c4 0c             	add    esp,0xc
c0016f3b:	e9 98 73 00 00       	jmp    c001e2d8 <sseInit>
c0016f40:	e8 b1 73 00 00       	call   c001e2f6 <x87Detect>
c0016f45:	85 c0                	test   eax,eax
c0016f47:	74 1c                	je     c0016f65 <HalInitialiseCoprocessor()+0x8d>
c0016f49:	c7 05 10 82 02 c0 11 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e311
c0016f53:	c7 05 0c 82 02 c0 18 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e318
c0016f5d:	83 c4 0c             	add    esp,0xc
c0016f60:	e9 ba 73 00 00       	jmp    c001e31f <x87Init>
c0016f65:	c7 05 10 82 02 c0 15 68 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016815
c0016f6f:	c7 05 0c 82 02 c0 15 68 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016815
c0016f79:	0f 20 c0             	mov    eax,cr0
c0016f7c:	83 c8 04             	or     eax,0x4
c0016f7f:	0f 22 c0             	mov    cr0,eax
c0016f82:	83 c4 0c             	add    esp,0xc
c0016f85:	c3                   	ret    

c0016f86 <HalPanic(char const*)>:
c0016f86:	53                   	push   ebx
c0016f87:	83 ec 10             	sub    esp,0x10
c0016f8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f8e:	fa                   	cli    
c0016f8f:	53                   	push   ebx
c0016f90:	68 84 15 02 c0       	push   0xc0021584
c0016f95:	e8 04 3a ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0016f9a:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016f9f:	83 c4 10             	add    esp,0x10
c0016fa2:	85 c0                	test   eax,eax
c0016fa4:	74 09                	je     c0016faf <HalPanic(char const*)+0x29>
c0016fa6:	83 ec 0c             	sub    esp,0xc
c0016fa9:	53                   	push   ebx
c0016faa:	ff d0                	call   eax
c0016fac:	83 c4 10             	add    esp,0x10
c0016faf:	50                   	push   eax
c0016fb0:	6a 01                	push   0x1
c0016fb2:	6a 0f                	push   0xf
c0016fb4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fba:	e8 f5 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fbf:	5a                   	pop    edx
c0016fc0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc6:	e8 d9 17 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0016fcb:	59                   	pop    ecx
c0016fcc:	58                   	pop    eax
c0016fcd:	68 64 fd 01 c0       	push   0xc001fd64
c0016fd2:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fd8:	e8 0f 16 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0016fdd:	83 c4 0c             	add    esp,0xc
c0016fe0:	6a 01                	push   0x1
c0016fe2:	6a 0f                	push   0xf
c0016fe4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fea:	e8 c5 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fef:	58                   	pop    eax
c0016ff0:	5a                   	pop    edx
c0016ff1:	68 9d 15 02 c0       	push   0xc002159d
c0016ff6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ffc:	e8 95 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017001:	83 c4 0c             	add    esp,0xc
c0017004:	6a 0f                	push   0xf
c0017006:	6a 01                	push   0x1
c0017008:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001700e:	e8 a1 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017013:	59                   	pop    ecx
c0017014:	58                   	pop    eax
c0017015:	68 a6 15 02 c0       	push   0xc00215a6
c001701a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017020:	e8 71 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017025:	83 c4 0c             	add    esp,0xc
c0017028:	6a 01                	push   0x1
c001702a:	6a 0f                	push   0xf
c001702c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017032:	e8 7d 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017037:	58                   	pop    eax
c0017038:	5a                   	pop    edx
c0017039:	68 ea 15 02 c0       	push   0xc00215ea
c001703e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017044:	e8 4d 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017049:	59                   	pop    ecx
c001704a:	58                   	pop    eax
c001704b:	68 b3 15 02 c0       	push   0xc00215b3
c0017050:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017056:	e8 3b 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001705b:	58                   	pop    eax
c001705c:	5a                   	pop    edx
c001705d:	68 ed 15 02 c0       	push   0xc00215ed
c0017062:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017068:	e8 29 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001706d:	59                   	pop    ecx
c001706e:	58                   	pop    eax
c001706f:	53                   	push   ebx
c0017070:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017076:	e8 1b 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001707b:	58                   	pop    eax
c001707c:	5a                   	pop    edx
c001707d:	68 ea 15 02 c0       	push   0xc00215ea
c0017082:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017088:	e8 09 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001708d:	83 c4 10             	add    esp,0x10
c0017090:	eb fe                	jmp    c0017090 <HalPanic(char const*)+0x10a>

c0017092 <HalQueryPerformanceCounter()>:
c0017092:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017097:	31 d2                	xor    edx,edx
c0017099:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001709f:	31 c0                	xor    eax,eax
c00170a1:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00170a8:	74 02                	je     c00170ac <HalQueryPerformanceCounter()+0x1a>
c00170aa:	0f 31                	rdtsc  
c00170ac:	c3                   	ret    

c00170ad <HalInitialise()>:
c00170ad:	53                   	push   ebx
c00170ae:	83 ec 08             	sub    esp,0x8
c00170b1:	e8 b7 54 ff ff       	call   c000c56d <setupINTS()>
c00170b6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00170bb:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c00170c2:	75 0f                	jne    c00170d3 <HalInitialise()+0x26>
c00170c4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170ca:	83 e2 fe             	and    edx,0xfffffffe
c00170cd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170d3:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c00170da:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170e0:	83 e2 fe             	and    edx,0xfffffffe
c00170e3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170e9:	e8 9e 02 00 00       	call   c001738c <picOpen()>
c00170ee:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170f5:	74 0a                	je     c0017101 <HalInitialise()+0x54>
c00170f7:	e8 e0 01 00 00       	call   c00172dc <picDisable()>
c00170fc:	e8 97 67 00 00       	call   c001d898 <apicOpen()>
c0017101:	50                   	push   eax
c0017102:	bb 0f 00 00 00       	mov    ebx,0xf
c0017107:	6a 00                	push   0x0
c0017109:	68 5c 6d 01 c0       	push   0xc0016d5c
c001710e:	6a 00                	push   0x0
c0017110:	e8 21 52 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017115:	83 c4 0c             	add    esp,0xc
c0017118:	6a 00                	push   0x0
c001711a:	68 5c 6d 01 c0       	push   0xc0016d5c
c001711f:	6a 01                	push   0x1
c0017121:	e8 10 52 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017126:	83 c4 0c             	add    esp,0xc
c0017129:	6a 00                	push   0x0
c001712b:	68 16 68 01 c0       	push   0xc0016816
c0017130:	6a 02                	push   0x2
c0017132:	e8 ff 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017137:	83 c4 0c             	add    esp,0xc
c001713a:	6a 00                	push   0x0
c001713c:	68 5c 6d 01 c0       	push   0xc0016d5c
c0017141:	6a 03                	push   0x3
c0017143:	e8 ee 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017148:	83 c4 0c             	add    esp,0xc
c001714b:	6a 00                	push   0x0
c001714d:	68 5c 6d 01 c0       	push   0xc0016d5c
c0017152:	6a 04                	push   0x4
c0017154:	e8 dd 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017159:	83 c4 0c             	add    esp,0xc
c001715c:	6a 00                	push   0x0
c001715e:	68 5c 6d 01 c0       	push   0xc0016d5c
c0017163:	6a 05                	push   0x5
c0017165:	e8 cc 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001716a:	83 c4 0c             	add    esp,0xc
c001716d:	6a 00                	push   0x0
c001716f:	68 90 6d 01 c0       	push   0xc0016d90
c0017174:	6a 06                	push   0x6
c0017176:	e8 bb 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001717b:	83 c4 0c             	add    esp,0xc
c001717e:	6a 00                	push   0x0
c0017180:	68 2f 68 01 c0       	push   0xc001682f
c0017185:	6a 08                	push   0x8
c0017187:	e8 aa 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001718c:	83 c4 0c             	add    esp,0xc
c001718f:	6a 00                	push   0x0
c0017191:	68 5c 6d 01 c0       	push   0xc0016d5c
c0017196:	6a 09                	push   0x9
c0017198:	e8 99 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001719d:	83 c4 0c             	add    esp,0xc
c00171a0:	6a 00                	push   0x0
c00171a2:	68 5c 6d 01 c0       	push   0xc0016d5c
c00171a7:	6a 0a                	push   0xa
c00171a9:	e8 88 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ae:	83 c4 0c             	add    esp,0xc
c00171b1:	6a 00                	push   0x0
c00171b3:	68 5c 6d 01 c0       	push   0xc0016d5c
c00171b8:	6a 0b                	push   0xb
c00171ba:	e8 77 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171bf:	83 c4 0c             	add    esp,0xc
c00171c2:	6a 00                	push   0x0
c00171c4:	68 6c 6c 01 c0       	push   0xc0016c6c
c00171c9:	6a 0d                	push   0xd
c00171cb:	e8 66 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171d0:	83 c4 0c             	add    esp,0xc
c00171d3:	6a 00                	push   0x0
c00171d5:	68 d3 6c 01 c0       	push   0xc0016cd3
c00171da:	6a 0e                	push   0xe
c00171dc:	e8 55 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171e1:	83 c4 10             	add    esp,0x10
c00171e4:	50                   	push   eax
c00171e5:	6a 00                	push   0x0
c00171e7:	68 5c 6d 01 c0       	push   0xc0016d5c
c00171ec:	53                   	push   ebx
c00171ed:	43                   	inc    ebx
c00171ee:	e8 43 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171f3:	83 c4 10             	add    esp,0x10
c00171f6:	83 fb 1e             	cmp    ebx,0x1e
c00171f9:	75 e9                	jne    c00171e4 <HalInitialise()+0x137>
c00171fb:	50                   	push   eax
c00171fc:	6a 00                	push   0x0
c00171fe:	68 57 1b 01 c0       	push   0xc0011b57
c0017203:	6a 60                	push   0x60
c0017205:	e8 2c 51 ff ff       	call   c000c336 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001720a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001720f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017219:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017220:	e8 a6 08 ff ff       	call   c0007acb <malloc>
c0017225:	89 04 24             	mov    DWORD PTR [esp],eax
c0017228:	89 c3                	mov    ebx,eax
c001722a:	e8 35 09 00 00       	call   c0017b64 <RTC::RTC()>
c001722f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017239:	5a                   	pop    edx
c001723a:	59                   	pop    ecx
c001723b:	53                   	push   ebx
c001723c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017242:	e8 b9 4b ff ff       	call   c000be00 <Device::addChild(Device*)>
c0017247:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017249:	6a 00                	push   0x0
c001724b:	6a 00                	push   0x0
c001724d:	6a 00                	push   0x0
c001724f:	53                   	push   ebx
c0017250:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017253:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017258:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001725e:	83 c4 28             	add    esp,0x28
c0017261:	5b                   	pop    ebx
c0017262:	c3                   	ret    

c0017263 <HalMakeBeep(int)>:
c0017263:	53                   	push   ebx
c0017264:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017268:	85 db                	test   ebx,ebx
c001726a:	75 07                	jne    c0017273 <HalMakeBeep(int)+0x10>
c001726c:	e4 61                	in     al,0x61
c001726e:	83 e0 fc             	and    eax,0xfffffffc
c0017271:	eb 26                	jmp    c0017299 <HalMakeBeep(int)+0x36>
c0017273:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017278:	99                   	cdq    
c0017279:	f7 fb                	idiv   ebx
c001727b:	89 c1                	mov    ecx,eax
c001727d:	b0 b6                	mov    al,0xb6
c001727f:	e6 43                	out    0x43,al
c0017281:	88 c8                	mov    al,cl
c0017283:	e6 42                	out    0x42,al
c0017285:	89 c8                	mov    eax,ecx
c0017287:	c1 e8 08             	shr    eax,0x8
c001728a:	e6 42                	out    0x42,al
c001728c:	e4 61                	in     al,0x61
c001728e:	89 c2                	mov    edx,eax
c0017290:	83 ca 03             	or     edx,0x3
c0017293:	38 d0                	cmp    al,dl
c0017295:	74 04                	je     c001729b <HalMakeBeep(int)+0x38>
c0017297:	88 d0                	mov    al,dl
c0017299:	e6 61                	out    0x61,al
c001729b:	5b                   	pop    ebx
c001729c:	c3                   	ret    

c001729d <HalGetRand()>:
c001729d:	31 c0                	xor    eax,eax
c001729f:	c3                   	ret    

c00172a0 <HalEndOfInterrupt(int)>:
c00172a0:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00172a7:	74 23                	je     c00172cc <HalEndOfInterrupt(int)+0x2c>
c00172a9:	83 ec 14             	sub    esp,0x14
c00172ac:	6a 1b                	push   0x1b
c00172ae:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00172b4:	e8 21 fe fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c00172b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00172be:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00172c8:	83 c4 1c             	add    esp,0x1c
c00172cb:	c3                   	ret    
c00172cc:	e9 3f 02 00 00       	jmp    c0017510 <picEOI(int)>

c00172d1 <HalRestart()>:
c00172d1:	c3                   	ret    

c00172d2 <HalShutdown()>:
c00172d2:	c3                   	ret    

c00172d3 <HalSleep()>:
c00172d3:	c3                   	ret    

c00172d4 <picIoWait()>:
c00172d4:	eb 00                	jmp    c00172d6 <picIoWait()+0x2>
c00172d6:	eb 00                	jmp    c00172d8 <picIoWait()+0x4>
c00172d8:	90                   	nop
c00172d9:	c3                   	ret    
c00172da:	66 90                	xchg   ax,ax

c00172dc <picDisable()>:
c00172dc:	83 ec 10             	sub    esp,0x10
c00172df:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00172e6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172ef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172f4:	ee                   	out    dx,al
c00172f5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172fc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017301:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017305:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001730a:	ee                   	out    dx,al
c001730b:	90                   	nop
c001730c:	83 c4 10             	add    esp,0x10
c001730f:	c3                   	ret    

c0017310 <picGetIRQReg(int)>:
c0017310:	83 ec 10             	sub    esp,0x10
c0017313:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017317:	0f b6 c0             	movzx  eax,al
c001731a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017321:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017325:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017329:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001732e:	ee                   	out    dx,al
c001732f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017333:	0f b6 c0             	movzx  eax,al
c0017336:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001733d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017341:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017345:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001734a:	ee                   	out    dx,al
c001734b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017352:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017357:	89 c2                	mov    edx,eax
c0017359:	ec                   	in     al,dx
c001735a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001735e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017362:	0f b6 c0             	movzx  eax,al
c0017365:	c1 e0 08             	shl    eax,0x8
c0017368:	89 c1                	mov    ecx,eax
c001736a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017371:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017376:	89 c2                	mov    edx,eax
c0017378:	ec                   	in     al,dx
c0017379:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001737d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017381:	0f b6 c0             	movzx  eax,al
c0017384:	09 c8                	or     eax,ecx
c0017386:	83 c4 10             	add    esp,0x10
c0017389:	c3                   	ret    
c001738a:	66 90                	xchg   ax,ax

c001738c <picOpen()>:
c001738c:	83 ec 50             	sub    esp,0x50
c001738f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017396:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001739b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001739f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173a3:	ee                   	out    dx,al
c00173a4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00173ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00173b0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00173b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00173b8:	ee                   	out    dx,al
c00173b9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00173c1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00173c9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00173d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173d4:	89 c2                	mov    edx,eax
c00173d6:	ec                   	in     al,dx
c00173d7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00173db:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00173df:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00173e3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173ee:	89 c2                	mov    edx,eax
c00173f0:	ec                   	in     al,dx
c00173f1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173f5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173f9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173fd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017404:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017409:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001740d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017411:	ee                   	out    dx,al
c0017412:	e8 bd fe ff ff       	call   c00172d4 <picIoWait()>
c0017417:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001741e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017423:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017427:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001742b:	ee                   	out    dx,al
c001742c:	e8 a3 fe ff ff       	call   c00172d4 <picIoWait()>
c0017431:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017435:	0f b6 c0             	movzx  eax,al
c0017438:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001743f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017443:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017447:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001744b:	ee                   	out    dx,al
c001744c:	e8 83 fe ff ff       	call   c00172d4 <picIoWait()>
c0017451:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017455:	0f b6 c0             	movzx  eax,al
c0017458:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001745f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017463:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017467:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001746b:	ee                   	out    dx,al
c001746c:	e8 63 fe ff ff       	call   c00172d4 <picIoWait()>
c0017471:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017478:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001747d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017481:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017485:	ee                   	out    dx,al
c0017486:	e8 49 fe ff ff       	call   c00172d4 <picIoWait()>
c001748b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017492:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017497:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001749b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001749f:	ee                   	out    dx,al
c00174a0:	e8 2f fe ff ff       	call   c00172d4 <picIoWait()>
c00174a5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00174ac:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00174b1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00174b5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00174b9:	ee                   	out    dx,al
c00174ba:	e8 15 fe ff ff       	call   c00172d4 <picIoWait()>
c00174bf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00174c6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00174cb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00174cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174d3:	ee                   	out    dx,al
c00174d4:	e8 fb fd ff ff       	call   c00172d4 <picIoWait()>
c00174d9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00174de:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00174e5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174e9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174ed:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174f1:	ee                   	out    dx,al
c00174f2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174f7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174fe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017502:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017506:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001750a:	ee                   	out    dx,al
c001750b:	90                   	nop
c001750c:	83 c4 50             	add    esp,0x50
c001750f:	c3                   	ret    

c0017510 <picEOI(int)>:
c0017510:	83 ec 10             	sub    esp,0x10
c0017513:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017518:	75 1e                	jne    c0017538 <picEOI(int)+0x28>
c001751a:	6a 0b                	push   0xb
c001751c:	e8 ef fd ff ff       	call   c0017310 <picGetIRQReg(int)>
c0017521:	83 c4 04             	add    esp,0x4
c0017524:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017529:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001752e:	25 80 00 00 00       	and    eax,0x80
c0017533:	74 73                	je     c00175a8 <picEOI(int)+0x98>
c0017535:	8d 76 00             	lea    esi,[esi+0x0]
c0017538:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001753d:	75 31                	jne    c0017570 <picEOI(int)+0x60>
c001753f:	6a 0b                	push   0xb
c0017541:	e8 ca fd ff ff       	call   c0017310 <picGetIRQReg(int)>
c0017546:	83 c4 04             	add    esp,0x4
c0017549:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001754e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017552:	98                   	cwde   
c0017553:	85 c0                	test   eax,eax
c0017555:	78 19                	js     c0017570 <picEOI(int)+0x60>
c0017557:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001755e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017563:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017567:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001756c:	ee                   	out    dx,al
c001756d:	eb 3d                	jmp    c00175ac <picEOI(int)+0x9c>
c001756f:	90                   	nop
c0017570:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017575:	7e 19                	jle    c0017590 <picEOI(int)+0x80>
c0017577:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001757e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017583:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017587:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001758c:	ee                   	out    dx,al
c001758d:	8d 76 00             	lea    esi,[esi+0x0]
c0017590:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017597:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001759c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00175a0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00175a5:	ee                   	out    dx,al
c00175a6:	eb 04                	jmp    c00175ac <picEOI(int)+0x9c>
c00175a8:	90                   	nop
c00175a9:	8d 76 00             	lea    esi,[esi+0x0]
c00175ac:	83 c4 10             	add    esp,0x10
c00175af:	c3                   	ret    

c00175b0 <RTC::open(int, int, void*)>:
c00175b0:	31 c0                	xor    eax,eax
c00175b2:	c3                   	ret    
c00175b3:	90                   	nop

c00175b4 <RTC::close(int, int, void*)>:
c00175b4:	31 c0                	xor    eax,eax
c00175b6:	c3                   	ret    
c00175b7:	90                   	nop

c00175b8 <RTC::timeInSecondsUTC()>:
c00175b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175bc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00175c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175c8:	c3                   	ret    
c00175c9:	90                   	nop

c00175ca <RTC::timeInDatetimeUTC()>:
c00175ca:	53                   	push   ebx
c00175cb:	83 ec 14             	sub    esp,0x14
c00175ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00175d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00175d8:	50                   	push   eax
c00175d9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00175dc:	83 c4 0c             	add    esp,0xc
c00175df:	52                   	push   edx
c00175e0:	50                   	push   eax
c00175e1:	53                   	push   ebx
c00175e2:	e8 8d 45 ff ff       	call   c000bb74 <secondsToDatetime(unsigned long long)>
c00175e7:	89 d8                	mov    eax,ebx
c00175e9:	83 c4 14             	add    esp,0x14
c00175ec:	5b                   	pop    ebx
c00175ed:	c2 04 00             	ret    0x4

c00175f0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175f0:	56                   	push   esi
c00175f1:	53                   	push   ebx
c00175f2:	83 ec 14             	sub    esp,0x14
c00175f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175fb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017602:	52                   	push   edx
c0017603:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017607:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001760b:	50                   	push   eax
c001760c:	e8 63 45 ff ff       	call   c000bb74 <secondsToDatetime(unsigned long long)>
c0017611:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017619:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001761d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017621:	89 f0                	mov    eax,esi
c0017623:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017627:	83 c4 20             	add    esp,0x20
c001762a:	5b                   	pop    ebx
c001762b:	5e                   	pop    esi
c001762c:	ff e0                	jmp    eax

c001762e <RTC::~RTC()>:
c001762e:	83 ec 0c             	sub    esp,0xc
c0017631:	ba 88 16 02 c0       	mov    edx,0xc0021688
c0017636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763a:	89 10                	mov    DWORD PTR [eax],edx
c001763c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017640:	83 ec 0c             	sub    esp,0xc
c0017643:	50                   	push   eax
c0017644:	e8 b7 42 ff ff       	call   c000b900 <Clock::~Clock()>
c0017649:	83 c4 10             	add    esp,0x10
c001764c:	90                   	nop
c001764d:	83 c4 0c             	add    esp,0xc
c0017650:	c3                   	ret    
c0017651:	90                   	nop

c0017652 <RTC::~RTC()>:
c0017652:	83 ec 0c             	sub    esp,0xc
c0017655:	83 ec 0c             	sub    esp,0xc
c0017658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001765c:	e8 cd ff ff ff       	call   c001762e <RTC::~RTC()>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	83 ec 08             	sub    esp,0x8
c0017667:	68 60 01 00 00       	push   0x160
c001766c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017670:	e8 2b 32 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	83 c4 0c             	add    esp,0xc
c001767b:	c3                   	ret    

c001767c <RTC::get_update_in_progress_flag()>:
c001767c:	83 ec 14             	sub    esp,0x14
c001767f:	6a 0a                	push   0xa
c0017681:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017687:	e8 06 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001768c:	83 c4 1c             	add    esp,0x1c
c001768f:	0f b6 c0             	movzx  eax,al
c0017692:	c1 e8 07             	shr    eax,0x7
c0017695:	c3                   	ret    

c0017696 <RTC::completeRTCRefresh()>:
c0017696:	55                   	push   ebp
c0017697:	57                   	push   edi
c0017698:	56                   	push   esi
c0017699:	53                   	push   ebx
c001769a:	83 ec 3c             	sub    esp,0x3c
c001769d:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00176a3:	83 ec 0c             	sub    esp,0xc
c00176a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00176aa:	e8 cd ff ff ff       	call   c001767c <RTC::get_update_in_progress_flag()>
c00176af:	83 c4 10             	add    esp,0x10
c00176b2:	84 c0                	test   al,al
c00176b4:	74 0e                	je     c00176c4 <RTC::completeRTCRefresh()+0x2e>
c00176b6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00176bc:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00176c2:	73 df                	jae    c00176a3 <RTC::completeRTCRefresh()+0xd>
c00176c4:	50                   	push   eax
c00176c5:	50                   	push   eax
c00176c6:	6a 00                	push   0x0
c00176c8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176ce:	e8 bf fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176d3:	89 c7                	mov    edi,eax
c00176d5:	58                   	pop    eax
c00176d6:	5a                   	pop    edx
c00176d7:	6a 02                	push   0x2
c00176d9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176df:	e8 ae fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176e4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176e8:	59                   	pop    ecx
c00176e9:	5b                   	pop    ebx
c00176ea:	6a 04                	push   0x4
c00176ec:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176f2:	e8 9b fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176f7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176fb:	5e                   	pop    esi
c00176fc:	5d                   	pop    ebp
c00176fd:	6a 07                	push   0x7
c00176ff:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017705:	e8 88 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001770a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001770e:	58                   	pop    eax
c001770f:	5a                   	pop    edx
c0017710:	6a 08                	push   0x8
c0017712:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017718:	e8 75 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001771d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017721:	59                   	pop    ecx
c0017722:	5b                   	pop    ebx
c0017723:	6a 09                	push   0x9
c0017725:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001772b:	e8 62 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017730:	0f b6 c0             	movzx  eax,al
c0017733:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017740:	83 ec 0c             	sub    esp,0xc
c0017743:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017747:	e8 30 ff ff ff       	call   c001767c <RTC::get_update_in_progress_flag()>
c001774c:	83 c4 10             	add    esp,0x10
c001774f:	84 c0                	test   al,al
c0017751:	74 0e                	je     c0017761 <RTC::completeRTCRefresh()+0xcb>
c0017753:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017759:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001775f:	73 df                	jae    c0017740 <RTC::completeRTCRefresh()+0xaa>
c0017761:	51                   	push   ecx
c0017762:	51                   	push   ecx
c0017763:	6a 00                	push   0x0
c0017765:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001776b:	e8 22 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017770:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017774:	5b                   	pop    ebx
c0017775:	5e                   	pop    esi
c0017776:	6a 02                	push   0x2
c0017778:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001777e:	e8 0f fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017783:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017787:	5d                   	pop    ebp
c0017788:	58                   	pop    eax
c0017789:	6a 04                	push   0x4
c001778b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017791:	e8 fc f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017796:	88 c3                	mov    bl,al
c0017798:	58                   	pop    eax
c0017799:	5a                   	pop    edx
c001779a:	6a 07                	push   0x7
c001779c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177a2:	e8 eb f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177a7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00177ab:	59                   	pop    ecx
c00177ac:	5e                   	pop    esi
c00177ad:	6a 08                	push   0x8
c00177af:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177b5:	e8 d8 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177ba:	5d                   	pop    ebp
c00177bb:	89 c6                	mov    esi,eax
c00177bd:	58                   	pop    eax
c00177be:	6a 09                	push   0x9
c00177c0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177c6:	e8 c7 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177cb:	89 f9                	mov    ecx,edi
c00177cd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	0f b6 e8             	movzx  ebp,al
c00177d7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00177dc:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00177e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177e4:	74 27                	je     c001780d <RTC::completeRTCRefresh()+0x177>
c00177e6:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00177ea:	89 f0                	mov    eax,esi
c00177ec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00177f0:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00177f4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177f8:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00177fc:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017800:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017804:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017808:	e9 2d ff ff ff       	jmp    c001773a <RTC::completeRTCRefresh()+0xa4>
c001780d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017812:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017816:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001781a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001781e:	75 c6                	jne    c00177e6 <RTC::completeRTCRefresh()+0x150>
c0017820:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017825:	89 f1                	mov    ecx,esi
c0017827:	0f b6 fb             	movzx  edi,bl
c001782a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001782e:	0f b6 c9             	movzx  ecx,cl
c0017831:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017835:	89 f1                	mov    ecx,esi
c0017837:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001783b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001783f:	0f 94 c2             	sete   dl
c0017842:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017846:	0f 94 c0             	sete   al
c0017849:	21 d0                	and    eax,edx
c001784b:	31 d2                	xor    edx,edx
c001784d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017851:	0f 94 c2             	sete   dl
c0017854:	85 c2                	test   edx,eax
c0017856:	74 8e                	je     c00177e6 <RTC::completeRTCRefresh()+0x150>
c0017858:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001785c:	75 88                	jne    c00177e6 <RTC::completeRTCRefresh()+0x150>
c001785e:	52                   	push   edx
c001785f:	52                   	push   edx
c0017860:	6a 0b                	push   0xb
c0017862:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017868:	e8 25 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001786d:	83 c4 10             	add    esp,0x10
c0017870:	a8 04                	test   al,0x4
c0017872:	75 7a                	jne    c00178ee <RTC::completeRTCRefresh()+0x258>
c0017874:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017878:	c1 ef 04             	shr    edi,0x4
c001787b:	83 e6 0f             	and    esi,0xf
c001787e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017882:	c1 ed 04             	shr    ebp,0x4
c0017885:	6b ed 0a             	imul   ebp,ebp,0xa
c0017888:	c1 ea 04             	shr    edx,0x4
c001788b:	6b d2 0a             	imul   edx,edx,0xa
c001788e:	83 e1 0f             	and    ecx,0xf
c0017891:	01 d1                	add    ecx,edx
c0017893:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017897:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001789b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001789f:	c1 ea 04             	shr    edx,0x4
c00178a2:	6b d2 0a             	imul   edx,edx,0xa
c00178a5:	83 e1 0f             	and    ecx,0xf
c00178a8:	01 d1                	add    ecx,edx
c00178aa:	89 fa                	mov    edx,edi
c00178ac:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00178b0:	83 e2 07             	and    edx,0x7
c00178b3:	89 d9                	mov    ecx,ebx
c00178b5:	6b d2 0a             	imul   edx,edx,0xa
c00178b8:	83 e1 0f             	and    ecx,0xf
c00178bb:	83 e3 80             	and    ebx,0xffffff80
c00178be:	01 d1                	add    ecx,edx
c00178c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178c4:	09 cb                	or     ebx,ecx
c00178c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00178ca:	c1 ea 04             	shr    edx,0x4
c00178cd:	6b d2 0a             	imul   edx,edx,0xa
c00178d0:	83 e1 0f             	and    ecx,0xf
c00178d3:	01 d1                	add    ecx,edx
c00178d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178d9:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00178dd:	c1 ea 04             	shr    edx,0x4
c00178e0:	6b d2 0a             	imul   edx,edx,0xa
c00178e3:	01 d6                	add    esi,edx
c00178e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178e9:	83 e2 0f             	and    edx,0xf
c00178ec:	01 d5                	add    ebp,edx
c00178ee:	a8 02                	test   al,0x2
c00178f0:	75 15                	jne    c0017907 <RTC::completeRTCRefresh()+0x271>
c00178f2:	f6 c3 80             	test   bl,0x80
c00178f5:	74 10                	je     c0017907 <RTC::completeRTCRefresh()+0x271>
c00178f7:	83 e3 7f             	and    ebx,0x7f
c00178fa:	b9 18 00 00 00       	mov    ecx,0x18
c00178ff:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017902:	99                   	cdq    
c0017903:	f7 f9                	idiv   ecx
c0017905:	88 d3                	mov    bl,dl
c0017907:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001790d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017913:	77 06                	ja     c001791b <RTC::completeRTCRefresh()+0x285>
c0017915:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001791b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017920:	31 c9                	xor    ecx,ecx
c0017922:	31 d2                	xor    edx,edx
c0017924:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017928:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001792c:	89 cd                	mov    ebp,ecx
c001792e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017932:	c1 e7 10             	shl    edi,0x10
c0017935:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001793b:	c1 e0 10             	shl    eax,0x10
c001793e:	09 c5                	or     ebp,eax
c0017940:	89 e9                	mov    ecx,ebp
c0017942:	0f b7 c2             	movzx  eax,dx
c0017945:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017949:	09 f8                	or     eax,edi
c001794b:	89 c2                	mov    edx,eax
c001794d:	50                   	push   eax
c001794e:	50                   	push   eax
c001794f:	88 d9                	mov    cl,bl
c0017951:	51                   	push   ecx
c0017952:	52                   	push   edx
c0017953:	e8 97 40 ff ff       	call   c000b9ef <datetimeToSeconds(datetime_t)>
c0017958:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001795c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017962:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017968:	83 c4 4c             	add    esp,0x4c
c001796b:	5b                   	pop    ebx
c001796c:	5e                   	pop    esi
c001796d:	5f                   	pop    edi
c001796e:	5d                   	pop    ebp
c001796f:	c3                   	ret    

c0017970 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017970:	55                   	push   ebp
c0017971:	57                   	push   edi
c0017972:	56                   	push   esi
c0017973:	53                   	push   ebx
c0017974:	83 ec 30             	sub    esp,0x30
c0017977:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001797b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001797f:	6a 00                	push   0x0
c0017981:	6a 00                	push   0x0
c0017983:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017989:	e8 1c f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c001798e:	83 c4 0c             	add    esp,0xc
c0017991:	6a 00                	push   0x0
c0017993:	6a 02                	push   0x2
c0017995:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001799b:	e8 0a f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c00179a0:	89 f8                	mov    eax,edi
c00179a2:	89 f9                	mov    ecx,edi
c00179a4:	0f b6 c4             	movzx  eax,ah
c00179a7:	31 d2                	xor    edx,edx
c00179a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179ad:	c1 e9 10             	shr    ecx,0x10
c00179b0:	89 f0                	mov    eax,esi
c00179b2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00179b6:	89 f0                	mov    eax,esi
c00179b8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00179bc:	0f b6 c4             	movzx  eax,ah
c00179bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179c3:	89 f0                	mov    eax,esi
c00179c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00179c9:	c1 e8 10             	shr    eax,0x10
c00179cc:	b9 64 00 00 00       	mov    ecx,0x64
c00179d1:	f7 f1                	div    ecx
c00179d3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179d7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00179db:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179df:	59                   	pop    ecx
c00179e0:	5b                   	pop    ebx
c00179e1:	89 fb                	mov    ebx,edi
c00179e3:	6a 0b                	push   0xb
c00179e5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179eb:	e8 a2 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00179f0:	83 c4 10             	add    esp,0x10
c00179f3:	a8 04                	test   al,0x4
c00179f5:	89 c5                	mov    ebp,eax
c00179f7:	75 6e                	jne    c0017a67 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179fd:	31 d2                	xor    edx,edx
c00179ff:	0f b6 c1             	movzx  eax,cl
c0017a02:	b9 0a 00 00 00       	mov    ecx,0xa
c0017a07:	f7 f1                	div    ecx
c0017a09:	c1 e0 04             	shl    eax,0x4
c0017a0c:	09 d0                	or     eax,edx
c0017a0e:	31 d2                	xor    edx,edx
c0017a10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a14:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017a19:	f7 f1                	div    ecx
c0017a1b:	c1 e0 04             	shl    eax,0x4
c0017a1e:	09 d0                	or     eax,edx
c0017a20:	31 d2                	xor    edx,edx
c0017a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a26:	0f b6 c3             	movzx  eax,bl
c0017a29:	f7 f1                	div    ecx
c0017a2b:	c1 e0 04             	shl    eax,0x4
c0017a2e:	09 d0                	or     eax,edx
c0017a30:	31 d2                	xor    edx,edx
c0017a32:	89 c3                	mov    ebx,eax
c0017a34:	89 f0                	mov    eax,esi
c0017a36:	0f b6 c0             	movzx  eax,al
c0017a39:	f7 f1                	div    ecx
c0017a3b:	c1 e0 04             	shl    eax,0x4
c0017a3e:	09 d0                	or     eax,edx
c0017a40:	31 d2                	xor    edx,edx
c0017a42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a4b:	f7 f1                	div    ecx
c0017a4d:	c1 e0 04             	shl    eax,0x4
c0017a50:	09 d0                	or     eax,edx
c0017a52:	31 d2                	xor    edx,edx
c0017a54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a5c:	f7 f1                	div    ecx
c0017a5e:	c1 e0 04             	shl    eax,0x4
c0017a61:	09 d0                	or     eax,edx
c0017a63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a67:	83 e5 02             	and    ebp,0x2
c0017a6a:	75 1e                	jne    c0017a8a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a6c:	0f b6 c3             	movzx  eax,bl
c0017a6f:	83 f8 0b             	cmp    eax,0xb
c0017a72:	76 10                	jbe    c0017a84 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a74:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a77:	84 d2                	test   dl,dl
c0017a79:	88 d3                	mov    bl,dl
c0017a7b:	75 02                	jne    c0017a7f <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a7d:	b3 0c                	mov    bl,0xc
c0017a7f:	83 cb 80             	or     ebx,0xffffff80
c0017a82:	eb 06                	jmp    c0017a8a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a84:	85 c0                	test   eax,eax
c0017a86:	75 02                	jne    c0017a8a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a88:	b3 0c                	mov    bl,0xc
c0017a8a:	50                   	push   eax
c0017a8b:	0f b6 db             	movzx  ebx,bl
c0017a8e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a93:	52                   	push   edx
c0017a94:	6a 00                	push   0x0
c0017a96:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a9c:	e8 09 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aa1:	83 c4 0c             	add    esp,0xc
c0017aa4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017aa9:	50                   	push   eax
c0017aaa:	6a 02                	push   0x2
c0017aac:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ab2:	e8 f3 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ab7:	83 c4 0c             	add    esp,0xc
c0017aba:	53                   	push   ebx
c0017abb:	6a 04                	push   0x4
c0017abd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ac3:	e8 e2 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ac8:	83 c4 0c             	add    esp,0xc
c0017acb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017ad0:	52                   	push   edx
c0017ad1:	6a 07                	push   0x7
c0017ad3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ad9:	e8 cc f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ade:	83 c4 0c             	add    esp,0xc
c0017ae1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ae6:	50                   	push   eax
c0017ae7:	6a 08                	push   0x8
c0017ae9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aef:	e8 b6 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017af4:	83 c4 0c             	add    esp,0xc
c0017af7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017afc:	55                   	push   ebp
c0017afd:	6a 09                	push   0x9
c0017aff:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b05:	e8 a0 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b0a:	5a                   	pop    edx
c0017b0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017b0f:	e8 82 fb ff ff       	call   c0017696 <RTC::completeRTCRefresh()>
c0017b14:	83 c4 3c             	add    esp,0x3c
c0017b17:	b0 01                	mov    al,0x1
c0017b19:	5b                   	pop    ebx
c0017b1a:	5e                   	pop    esi
c0017b1b:	5f                   	pop    edi
c0017b1c:	5d                   	pop    ebp
c0017b1d:	c3                   	ret    

c0017b1e <rtcIRQHandler(regs*, void*)>:
c0017b1e:	53                   	push   ebx
c0017b1f:	83 ec 10             	sub    esp,0x10
c0017b22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017b26:	6a 0c                	push   0xc
c0017b28:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b2e:	e8 5f f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b33:	83 c4 10             	add    esp,0x10
c0017b36:	a8 80                	test   al,0x80
c0017b38:	74 24                	je     c0017b5e <rtcIRQHandler(regs*, void*)+0x40>
c0017b3a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017b41:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b48:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017b4f:	75 0d                	jne    c0017b5e <rtcIRQHandler(regs*, void*)+0x40>
c0017b51:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b55:	83 c4 08             	add    esp,0x8
c0017b58:	5b                   	pop    ebx
c0017b59:	e9 38 fb ff ff       	jmp    c0017696 <RTC::completeRTCRefresh()>
c0017b5e:	83 c4 08             	add    esp,0x8
c0017b61:	5b                   	pop    ebx
c0017b62:	c3                   	ret    
c0017b63:	90                   	nop

c0017b64 <RTC::RTC()>:
c0017b64:	83 ec 1c             	sub    esp,0x1c
c0017b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6b:	83 ec 08             	sub    esp,0x8
c0017b6e:	68 6b 16 02 c0       	push   0xc002166b
c0017b73:	50                   	push   eax
c0017b74:	e8 51 3d ff ff       	call   c000b8ca <Clock::Clock(char const*)>
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	ba 88 16 02 c0       	mov    edx,0xc0021688
c0017b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b85:	89 10                	mov    DWORD PTR [eax],edx
c0017b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b8b:	83 ec 0c             	sub    esp,0xc
c0017b8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b92:	6a 01                	push   0x1
c0017b94:	68 1e 7b 01 c0       	push   0xc0017b1e
c0017b99:	6a 08                	push   0x8
c0017b9b:	50                   	push   eax
c0017b9c:	e8 0b 42 ff ff       	call   c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017ba1:	83 c4 20             	add    esp,0x20
c0017ba4:	89 c2                	mov    edx,eax
c0017ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017baa:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017bb0:	fa                   	cli    
c0017bb1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bb6:	83 c0 01             	add    eax,0x1
c0017bb9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bbe:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017bc3:	83 ec 08             	sub    esp,0x8
c0017bc6:	6a 0b                	push   0xb
c0017bc8:	50                   	push   eax
c0017bc9:	e8 c4 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017bce:	83 c4 10             	add    esp,0x10
c0017bd1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017bd5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017bda:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017bde:	83 ca 10             	or     edx,0x10
c0017be1:	0f b6 d2             	movzx  edx,dl
c0017be4:	83 ec 04             	sub    esp,0x4
c0017be7:	52                   	push   edx
c0017be8:	6a 0b                	push   0xb
c0017bea:	50                   	push   eax
c0017beb:	e8 ba f6 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bf0:	83 c4 10             	add    esp,0x10
c0017bf3:	83 ec 0c             	sub    esp,0xc
c0017bf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bfa:	e8 97 fa ff ff       	call   c0017696 <RTC::completeRTCRefresh()>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c07:	83 e8 01             	sub    eax,0x1
c0017c0a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c0f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c14:	85 c0                	test   eax,eax
c0017c16:	75 01                	jne    c0017c19 <RTC::RTC()+0xb5>
c0017c18:	fb                   	sti    
c0017c19:	90                   	nop
c0017c1a:	83 c4 1c             	add    esp,0x1c
c0017c1d:	c3                   	ret    
c0017c1e:	66 90                	xchg   ax,ax

c0017c20 <HalConsoleScroll(int, int)>:
c0017c20:	83 ec 10             	sub    esp,0x10
c0017c23:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017c2b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017c33:	90                   	nop
c0017c34:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c39:	0f 8f e1 00 00 00    	jg     c0017d20 <HalConsoleScroll(int, int)+0x100>
c0017c3f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c47:	90                   	nop
c0017c48:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c50:	0f 8f be 00 00 00    	jg     c0017d14 <HalConsoleScroll(int, int)+0xf4>
c0017c56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c5a:	89 d0                	mov    eax,edx
c0017c5c:	c1 e0 02             	shl    eax,0x2
c0017c5f:	01 d0                	add    eax,edx
c0017c61:	c1 e0 05             	shl    eax,0x5
c0017c64:	89 c2                	mov    edx,eax
c0017c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c6a:	01 d0                	add    eax,edx
c0017c6c:	89 c2                	mov    edx,eax
c0017c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c72:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c79:	89 d0                	mov    eax,edx
c0017c7b:	c1 e0 02             	shl    eax,0x2
c0017c7e:	01 d0                	add    eax,edx
c0017c80:	c1 e0 05             	shl    eax,0x5
c0017c83:	89 c2                	mov    edx,eax
c0017c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c89:	01 d0                	add    eax,edx
c0017c8b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c95:	01 d0                	add    eax,edx
c0017c97:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017c99:	88 10                	mov    BYTE PTR [eax],dl
c0017c9b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017ca0:	75 66                	jne    c0017d08 <HalConsoleScroll(int, int)+0xe8>
c0017ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ca6:	83 e0 01             	and    eax,0x1
c0017ca9:	74 39                	je     c0017ce4 <HalConsoleScroll(int, int)+0xc4>
c0017cab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017caf:	83 e0 0f             	and    eax,0xf
c0017cb2:	88 c2                	mov    dl,al
c0017cb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cb8:	c1 e0 04             	shl    eax,0x4
c0017cbb:	09 d0                	or     eax,edx
c0017cbd:	88 c1                	mov    cl,al
c0017cbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cc3:	89 d0                	mov    eax,edx
c0017cc5:	c1 e0 02             	shl    eax,0x2
c0017cc8:	01 d0                	add    eax,edx
c0017cca:	c1 e0 05             	shl    eax,0x5
c0017ccd:	89 c2                	mov    edx,eax
c0017ccf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cd3:	01 d0                	add    eax,edx
c0017cd5:	89 c2                	mov    edx,eax
c0017cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cdb:	01 d0                	add    eax,edx
c0017cdd:	88 ca                	mov    dl,cl
c0017cdf:	88 10                	mov    BYTE PTR [eax],dl
c0017ce1:	eb 25                	jmp    c0017d08 <HalConsoleScroll(int, int)+0xe8>
c0017ce3:	90                   	nop
c0017ce4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ce8:	89 d0                	mov    eax,edx
c0017cea:	c1 e0 02             	shl    eax,0x2
c0017ced:	01 d0                	add    eax,edx
c0017cef:	c1 e0 05             	shl    eax,0x5
c0017cf2:	89 c2                	mov    edx,eax
c0017cf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cf8:	01 d0                	add    eax,edx
c0017cfa:	89 c2                	mov    edx,eax
c0017cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d00:	01 d0                	add    eax,edx
c0017d02:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017d05:	8d 76 00             	lea    esi,[esi+0x0]
c0017d08:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017d0d:	e9 36 ff ff ff       	jmp    c0017c48 <HalConsoleScroll(int, int)+0x28>
c0017d12:	66 90                	xchg   ax,ax
c0017d14:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017d19:	e9 16 ff ff ff       	jmp    c0017c34 <HalConsoleScroll(int, int)+0x14>
c0017d1e:	66 90                	xchg   ax,ax
c0017d20:	90                   	nop
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	c3                   	ret    
c0017d25:	8d 76 00             	lea    esi,[esi+0x0]

c0017d28 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017d28:	83 ec 14             	sub    esp,0x14
c0017d2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d2f:	88 04 24             	mov    BYTE PTR [esp],al
c0017d32:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d35:	0f b6 c0             	movzx  eax,al
c0017d38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d3c:	89 d1                	mov    ecx,edx
c0017d3e:	83 e1 0f             	and    ecx,0xf
c0017d41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d45:	c1 e2 04             	shl    edx,0x4
c0017d48:	0f b6 d2             	movzx  edx,dl
c0017d4b:	09 ca                	or     edx,ecx
c0017d4d:	c1 e2 08             	shl    edx,0x8
c0017d50:	09 d0                	or     eax,edx
c0017d52:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d57:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d63:	89 d0                	mov    eax,edx
c0017d65:	c1 e0 02             	shl    eax,0x2
c0017d68:	01 d0                	add    eax,edx
c0017d6a:	c1 e0 04             	shl    eax,0x4
c0017d6d:	89 c2                	mov    edx,eax
c0017d6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d73:	01 d0                	add    eax,edx
c0017d75:	d1 e0                	shl    eax,1
c0017d77:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d7f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017d84:	66 89 10             	mov    WORD PTR [eax],dx
c0017d87:	90                   	nop
c0017d88:	83 c4 14             	add    esp,0x14
c0017d8b:	c3                   	ret    

c0017d8c <HalConsoleCursorUpdate(int, int)>:
c0017d8c:	83 ec 20             	sub    esp,0x20
c0017d8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d93:	89 c2                	mov    edx,eax
c0017d95:	c1 e2 02             	shl    edx,0x2
c0017d98:	01 d0                	add    eax,edx
c0017d9a:	c1 e0 04             	shl    eax,0x4
c0017d9d:	89 c2                	mov    edx,eax
c0017d9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017da3:	01 d0                	add    eax,edx
c0017da5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017daa:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017db1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017db6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017dba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017dbe:	ee                   	out    dx,al
c0017dbf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017dc4:	0f b6 c0             	movzx  eax,al
c0017dc7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017dce:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017dd2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017dd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017dda:	ee                   	out    dx,al
c0017ddb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017de2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017de7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017deb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017def:	ee                   	out    dx,al
c0017df0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017df5:	c1 e8 08             	shr    eax,0x8
c0017df8:	0f b6 c0             	movzx  eax,al
c0017dfb:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017e02:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e06:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e0e:	ee                   	out    dx,al
c0017e0f:	90                   	nop
c0017e10:	83 c4 20             	add    esp,0x20
c0017e13:	c3                   	ret    

c0017e14 <FAT::getName()>:
c0017e14:	b8 bc 16 02 c0       	mov    eax,0xc00216bc
c0017e19:	c3                   	ret    
c0017e1a:	66 90                	xchg   ax,ax

c0017e1c <FAT::tell(void*, unsigned long long*)>:
c0017e1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e21:	75 09                	jne    c0017e2c <FAT::tell(void*, unsigned long long*)+0x10>
c0017e23:	b8 04 00 00 00       	mov    eax,0x4
c0017e28:	c3                   	ret    
c0017e29:	8d 76 00             	lea    esi,[esi+0x0]
c0017e2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e31:	75 09                	jne    c0017e3c <FAT::tell(void*, unsigned long long*)+0x20>
c0017e33:	b8 04 00 00 00       	mov    eax,0x4
c0017e38:	c3                   	ret    
c0017e39:	8d 76 00             	lea    esi,[esi+0x0]
c0017e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017e43:	ba 00 00 00 00       	mov    edx,0x0
c0017e48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e4c:	89 01                	mov    DWORD PTR [ecx],eax
c0017e4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e51:	b8 00 00 00 00       	mov    eax,0x0
c0017e56:	c3                   	ret    
c0017e57:	90                   	nop

c0017e58 <FAT::stat(void*, unsigned long long*)>:
c0017e58:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e5d:	75 09                	jne    c0017e68 <FAT::stat(void*, unsigned long long*)+0x10>
c0017e5f:	b8 04 00 00 00       	mov    eax,0x4
c0017e64:	c3                   	ret    
c0017e65:	8d 76 00             	lea    esi,[esi+0x0]
c0017e68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e6d:	75 09                	jne    c0017e78 <FAT::stat(void*, unsigned long long*)+0x20>
c0017e6f:	b8 04 00 00 00       	mov    eax,0x4
c0017e74:	c3                   	ret    
c0017e75:	8d 76 00             	lea    esi,[esi+0x0]
c0017e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e7f:	ba 00 00 00 00       	mov    edx,0x0
c0017e84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e88:	89 01                	mov    DWORD PTR [ecx],eax
c0017e8a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e8d:	b8 00 00 00 00       	mov    eax,0x0
c0017e92:	c3                   	ret    
c0017e93:	90                   	nop

c0017e94 <FAT::~FAT()>:
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	ba 08 17 02 c0       	mov    edx,0xc0021708
c0017e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea0:	89 10                	mov    DWORD PTR [eax],edx
c0017ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea6:	83 ec 0c             	sub    esp,0xc
c0017ea9:	50                   	push   eax
c0017eaa:	e8 35 2e ff ff       	call   c000ace4 <Filesystem::~Filesystem()>
c0017eaf:	83 c4 10             	add    esp,0x10
c0017eb2:	90                   	nop
c0017eb3:	83 c4 0c             	add    esp,0xc
c0017eb6:	c3                   	ret    
c0017eb7:	90                   	nop

c0017eb8 <FAT::~FAT()>:
c0017eb8:	83 ec 0c             	sub    esp,0xc
c0017ebb:	83 ec 0c             	sub    esp,0xc
c0017ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ec2:	e8 cd ff ff ff       	call   c0017e94 <FAT::~FAT()>
c0017ec7:	83 c4 10             	add    esp,0x10
c0017eca:	83 ec 08             	sub    esp,0x8
c0017ecd:	6a 08                	push   0x8
c0017ecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ed3:	e8 c8 29 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c0017ed8:	83 c4 10             	add    esp,0x10
c0017edb:	83 c4 0c             	add    esp,0xc
c0017ede:	c3                   	ret    
c0017edf:	90                   	nop

c0017ee0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017ee0:	83 ec 1c             	sub    esp,0x1c
c0017ee3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017eea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017eef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef3:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017efa:	83 f8 ff             	cmp    eax,0xffffffff
c0017efd:	75 35                	jne    c0017f34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017eff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f03:	88 c2                	mov    dl,al
c0017f05:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f0a:	01 d0                	add    eax,edx
c0017f0c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f10:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f21:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f2a:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f31:	eb 19                	jmp    c0017f4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017f33:	90                   	nop
c0017f34:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f38:	88 c2                	mov    dl,al
c0017f3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f3e:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f45:	01 d0                	add    eax,edx
c0017f47:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f4b:	90                   	nop
c0017f4c:	83 ec 04             	sub    esp,0x4
c0017f4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f57:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f5b:	50                   	push   eax
c0017f5c:	e8 92 d0 fe ff       	call   c0004ff3 <f_getlabel>
c0017f61:	83 c4 10             	add    esp,0x10
c0017f64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f6d:	75 09                	jne    c0017f78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f6f:	b8 00 00 00 00       	mov    eax,0x0
c0017f74:	eb 0a                	jmp    c0017f80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f76:	66 90                	xchg   ax,ax
c0017f78:	b8 01 00 00 00       	mov    eax,0x1
c0017f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f80:	83 c4 1c             	add    esp,0x1c
c0017f83:	c3                   	ret    

c0017f84 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f84:	53                   	push   ebx
c0017f85:	83 ec 58             	sub    esp,0x58
c0017f88:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f90:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f94:	b9 00 00 00 00       	mov    ecx,0x0
c0017f99:	b8 3c 00 00 00       	mov    eax,0x3c
c0017f9e:	83 e0 f8             	and    eax,0xfffffff8
c0017fa1:	89 c3                	mov    ebx,eax
c0017fa3:	b8 00 00 00 00       	mov    eax,0x0
c0017fa8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0017fac:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0017fb0:	83 c0 08             	add    eax,0x8
c0017fb3:	39 d8                	cmp    eax,ebx
c0017fb5:	72 f1                	jb     c0017fa8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017fb7:	01 c2                	add    edx,eax
c0017fb9:	89 0a                	mov    DWORD PTR [edx],ecx
c0017fbb:	83 c2 04             	add    edx,0x4
c0017fbe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fc2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fc9:	83 f8 ff             	cmp    eax,0xffffffff
c0017fcc:	75 36                	jne    c0018004 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017fce:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fd2:	88 c2                	mov    dl,al
c0017fd4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fd9:	01 d0                	add    eax,edx
c0017fdb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fdf:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017fe5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fe9:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017ff0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ff5:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017ff9:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018000:	eb 1a                	jmp    c001801c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018002:	66 90                	xchg   ax,ax
c0018004:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018008:	88 c2                	mov    dl,al
c001800a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001800e:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018015:	01 d0                	add    eax,edx
c0018017:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001801b:	90                   	nop
c001801c:	83 ec 08             	sub    esp,0x8
c001801f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018023:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018027:	50                   	push   eax
c0018028:	e8 43 88 fe ff       	call   c0000870 <strcat>
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	83 ec 0c             	sub    esp,0xc
c0018033:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018037:	50                   	push   eax
c0018038:	e8 0a d1 fe ff       	call   c0005147 <f_setlabel>
c001803d:	83 c4 10             	add    esp,0x10
c0018040:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018044:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018049:	75 09                	jne    c0018054 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001804b:	b8 00 00 00 00       	mov    eax,0x0
c0018050:	eb 0a                	jmp    c001805c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018052:	66 90                	xchg   ax,ax
c0018054:	b8 01 00 00 00       	mov    eax,0x1
c0018059:	8d 76 00             	lea    esi,[esi+0x0]
c001805c:	83 c4 58             	add    esp,0x58
c001805f:	5b                   	pop    ebx
c0018060:	c3                   	ret    
c0018061:	90                   	nop
c0018062:	66 90                	xchg   ax,ax

c0018064 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018064:	83 ec 2c             	sub    esp,0x2c
c0018067:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001806f:	83 ec 08             	sub    esp,0x8
c0018072:	68 e0 16 02 c0       	push   0xc00216e0
c0018077:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001807b:	e8 00 87 fe ff       	call   c0000780 <strcmp>
c0018080:	83 c4 10             	add    esp,0x10
c0018083:	85 c0                	test   eax,eax
c0018085:	0f 94 c0             	sete   al
c0018088:	0f b6 c0             	movzx  eax,al
c001808b:	85 c0                	test   eax,eax
c001808d:	74 0d                	je     c001809c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001808f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018097:	e9 c0 00 00 00       	jmp    c001815c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001809c:	83 ec 08             	sub    esp,0x8
c001809f:	68 d2 16 02 c0       	push   0xc00216d2
c00180a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180a8:	e8 d3 86 fe ff       	call   c0000780 <strcmp>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	85 c0                	test   eax,eax
c00180b2:	0f 94 c0             	sete   al
c00180b5:	0f b6 c0             	movzx  eax,al
c00180b8:	85 c0                	test   eax,eax
c00180ba:	74 10                	je     c00180cc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00180bc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180c4:	e9 93 00 00 00       	jmp    c001815c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180c9:	8d 76 00             	lea    esi,[esi+0x0]
c00180cc:	83 ec 08             	sub    esp,0x8
c00180cf:	68 d8 16 02 c0       	push   0xc00216d8
c00180d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180d8:	e8 a3 86 fe ff       	call   c0000780 <strcmp>
c00180dd:	83 c4 10             	add    esp,0x10
c00180e0:	85 c0                	test   eax,eax
c00180e2:	0f 94 c0             	sete   al
c00180e5:	0f b6 c0             	movzx  eax,al
c00180e8:	85 c0                	test   eax,eax
c00180ea:	74 0c                	je     c00180f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00180ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180f4:	eb 66                	jmp    c001815c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180f6:	66 90                	xchg   ax,ax
c00180f8:	83 ec 08             	sub    esp,0x8
c00180fb:	68 1c f4 01 c0       	push   0xc001f41c
c0018100:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018104:	e8 77 86 fe ff       	call   c0000780 <strcmp>
c0018109:	83 c4 10             	add    esp,0x10
c001810c:	85 c0                	test   eax,eax
c001810e:	0f 94 c0             	sete   al
c0018111:	0f b6 c0             	movzx  eax,al
c0018114:	85 c0                	test   eax,eax
c0018116:	74 0c                	je     c0018124 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018118:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018120:	eb 3a                	jmp    c001815c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018122:	66 90                	xchg   ax,ax
c0018124:	83 ec 08             	sub    esp,0x8
c0018127:	68 de 16 02 c0       	push   0xc00216de
c001812c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018130:	e8 4b 86 fe ff       	call   c0000780 <strcmp>
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	85 c0                	test   eax,eax
c001813a:	0f 94 c0             	sete   al
c001813d:	0f b6 c0             	movzx  eax,al
c0018140:	85 c0                	test   eax,eax
c0018142:	74 0c                	je     c0018150 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018144:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001814c:	eb 0e                	jmp    c001815c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001814e:	66 90                	xchg   ax,ax
c0018150:	b8 08 00 00 00       	mov    eax,0x8
c0018155:	e9 ea 00 00 00       	jmp    c0018244 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001815a:	66 90                	xchg   ax,ax
c001815c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018163:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018168:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001816c:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018173:	83 f8 ff             	cmp    eax,0xffffffff
c0018176:	75 34                	jne    c00181ac <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018178:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001817c:	88 c2                	mov    dl,al
c001817e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018183:	01 d0                	add    eax,edx
c0018185:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018189:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001818f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018193:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001819a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001819f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00181a3:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00181aa:	eb 18                	jmp    c00181c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00181ac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00181b0:	88 c2                	mov    dl,al
c00181b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181b6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181bd:	01 d0                	add    eax,edx
c00181bf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00181c3:	90                   	nop
c00181c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181c8:	88 04 24             	mov    BYTE PTR [esp],al
c00181cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00181cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00181db:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00181e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00181e8:	83 ec 0c             	sub    esp,0xc
c00181eb:	68 00 20 00 00       	push   0x2000
c00181f0:	e8 d6 f8 fe ff       	call   c0007acb <malloc>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181fc:	68 00 20 00 00       	push   0x2000
c0018201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018205:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018209:	50                   	push   eax
c001820a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001820e:	50                   	push   eax
c001820f:	e8 30 d2 fe ff       	call   c0005444 <f_mkfs>
c0018214:	83 c4 10             	add    esp,0x10
c0018217:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001821b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018220:	75 0a                	jne    c001822c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018222:	b8 00 00 00 00       	mov    eax,0x0
c0018227:	eb 1b                	jmp    c0018244 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018229:	8d 76 00             	lea    esi,[esi+0x0]
c001822c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018231:	75 09                	jne    c001823c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018233:	b8 09 00 00 00       	mov    eax,0x9
c0018238:	eb 0a                	jmp    c0018244 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001823a:	66 90                	xchg   ax,ax
c001823c:	b8 01 00 00 00       	mov    eax,0x1
c0018241:	8d 76 00             	lea    esi,[esi+0x0]
c0018244:	83 c4 2c             	add    esp,0x2c
c0018247:	c3                   	ret    

c0018248 <FAT::tryMount(LogicalDisk*, int)>:
c0018248:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001824e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018253:	83 f8 14             	cmp    eax,0x14
c0018256:	75 18                	jne    c0018270 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018258:	83 ec 0c             	sub    esp,0xc
c001825b:	68 e4 16 02 c0       	push   0xc00216e4
c0018260:	e8 04 86 ff ff       	call   c0010869 <KePanic(char const*)>
c0018265:	83 c4 10             	add    esp,0x10
c0018268:	b0 00                	mov    al,0x0
c001826a:	e9 ed 01 00 00       	jmp    c001845c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001826f:	90                   	nop
c0018270:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018277:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001827d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018283:	3d 00 02 00 00       	cmp    eax,0x200
c0018288:	74 0a                	je     c0018294 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001828a:	b0 00                	mov    al,0x0
c001828c:	e9 cb 01 00 00       	jmp    c001845c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018291:	8d 76 00             	lea    esi,[esi+0x0]
c0018294:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001829c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182a3:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00182aa:	83 f8 ff             	cmp    eax,0xffffffff
c00182ad:	74 09                	je     c00182b8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00182af:	b0 01                	mov    al,0x1
c00182b1:	e9 a6 01 00 00       	jmp    c001845c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182b6:	66 90                	xchg   ax,ax
c00182b8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00182c2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00182ca:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00182d1:	88 c2                	mov    dl,al
c00182d3:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182d8:	01 d0                	add    eax,edx
c00182da:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00182e1:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00182e7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182ee:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182f5:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182fa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018301:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018308:	83 ec 0c             	sub    esp,0xc
c001830b:	68 34 02 00 00       	push   0x234
c0018310:	e8 b6 f7 fe ff       	call   c0007acb <malloc>
c0018315:	83 c4 10             	add    esp,0x10
c0018318:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001831f:	83 ec 04             	sub    esp,0x4
c0018322:	6a 00                	push   0x0
c0018324:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001832b:	50                   	push   eax
c001832c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018333:	e8 06 b9 fe ff       	call   c0003c3e <f_mount>
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018342:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001834a:	74 1c                	je     c0018368 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001834c:	83 ec 0c             	sub    esp,0xc
c001834f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018356:	e8 90 f7 fe ff       	call   c0007aeb <rfree>
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	b0 00                	mov    al,0x0
c0018360:	e9 f7 00 00 00       	jmp    c001845c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018365:	8d 76 00             	lea    esi,[esi+0x0]
c0018368:	83 ec 04             	sub    esp,0x4
c001836b:	68 00 01 00 00       	push   0x100
c0018370:	6a 00                	push   0x0
c0018372:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018379:	50                   	push   eax
c001837a:	e8 71 81 fe ff       	call   c00004f0 <memset>
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	83 ec 08             	sub    esp,0x8
c0018385:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001838c:	50                   	push   eax
c001838d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018394:	50                   	push   eax
c0018395:	e8 d6 84 fe ff       	call   c0000870 <strcat>
c001839a:	83 c4 10             	add    esp,0x10
c001839d:	83 ec 08             	sub    esp,0x8
c00183a0:	68 f2 16 02 c0       	push   0xc00216f2
c00183a5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183ac:	50                   	push   eax
c00183ad:	e8 be 84 fe ff       	call   c0000870 <strcat>
c00183b2:	83 c4 10             	add    esp,0x10
c00183b5:	83 ec 04             	sub    esp,0x4
c00183b8:	6a 01                	push   0x1
c00183ba:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00183c1:	50                   	push   eax
c00183c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183c6:	50                   	push   eax
c00183c7:	e8 d4 b8 fe ff       	call   c0003ca0 <f_open>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00183d6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00183dd:	85 c0                	test   eax,eax
c00183df:	74 0b                	je     c00183ec <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00183e1:	78 31                	js     c0018414 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183e3:	83 e8 04             	sub    eax,0x4
c00183e6:	83 f8 01             	cmp    eax,0x1
c00183e9:	77 29                	ja     c0018414 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183eb:	90                   	nop
c00183ec:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00183f4:	83 ec 0c             	sub    esp,0xc
c00183f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183fb:	50                   	push   eax
c00183fc:	e8 4f c0 fe ff       	call   c0004450 <f_close>
c0018401:	83 c4 10             	add    esp,0x10
c0018404:	90                   	nop
c0018405:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001840d:	85 c0                	test   eax,eax
c001840f:	74 43                	je     c0018454 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018411:	eb 31                	jmp    c0018444 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018413:	90                   	nop
c0018414:	83 ec 0c             	sub    esp,0xc
c0018417:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001841e:	e8 c8 f6 fe ff       	call   c0007aeb <rfree>
c0018423:	83 c4 10             	add    esp,0x10
c0018426:	83 ec 04             	sub    esp,0x4
c0018429:	6a 00                	push   0x0
c001842b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018432:	50                   	push   eax
c0018433:	6a 00                	push   0x0
c0018435:	e8 04 b8 fe ff       	call   c0003c3e <f_mount>
c001843a:	83 c4 10             	add    esp,0x10
c001843d:	b0 00                	mov    al,0x0
c001843f:	eb 1b                	jmp    c001845c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018441:	8d 76 00             	lea    esi,[esi+0x0]
c0018444:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018449:	83 c0 01             	add    eax,0x1
c001844c:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018451:	8d 76 00             	lea    esi,[esi+0x0]
c0018454:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001845b:	90                   	nop
c001845c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018462:	c3                   	ret    
c0018463:	90                   	nop

c0018464 <FAT::allocateSwapfile(char const*, int)>:
c0018464:	55                   	push   ebp
c0018465:	57                   	push   edi
c0018466:	56                   	push   esi
c0018467:	53                   	push   ebx
c0018468:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001846e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018479:	83 ec 0c             	sub    esp,0xc
c001847c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018483:	e8 43 f6 fe ff       	call   c0007acb <malloc>
c0018488:	83 c4 10             	add    esp,0x10
c001848b:	89 c7                	mov    edi,eax
c001848d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018492:	83 ec 04             	sub    esp,0x4
c0018495:	50                   	push   eax
c0018496:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001849d:	57                   	push   edi
c001849e:	e8 a3 2a ff ff       	call   c000af46 <File::File(char const*, Process*)>
c00184a3:	83 c4 10             	add    esp,0x10
c00184a6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00184ad:	83 ec 04             	sub    esp,0x4
c00184b0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00184b4:	50                   	push   eax
c00184b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184b9:	50                   	push   eax
c00184ba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184c1:	e8 e8 2d ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c00184c6:	83 c4 10             	add    esp,0x10
c00184c9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184d0:	c1 e0 14             	shl    eax,0x14
c00184d3:	89 c7                	mov    edi,eax
c00184d5:	89 c5                	mov    ebp,eax
c00184d7:	c1 fd 1f             	sar    ebp,0x1f
c00184da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184e2:	89 f9                	mov    ecx,edi
c00184e4:	31 c1                	xor    ecx,eax
c00184e6:	89 cb                	mov    ebx,ecx
c00184e8:	89 e9                	mov    ecx,ebp
c00184ea:	31 d1                	xor    ecx,edx
c00184ec:	89 ce                	mov    esi,ecx
c00184ee:	89 f0                	mov    eax,esi
c00184f0:	09 d8                	or     eax,ebx
c00184f2:	0f 84 9c 00 00 00    	je     c0018594 <FAT::allocateSwapfile(char const*, int)+0x130>
c00184f8:	83 ec 0c             	sub    esp,0xc
c00184fb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018502:	e8 73 2c ff ff       	call   c000b17a <File::unlink()>
c0018507:	83 c4 10             	add    esp,0x10
c001850a:	83 ec 08             	sub    esp,0x8
c001850d:	6a 12                	push   0x12
c001850f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018516:	e8 e7 2a ff ff       	call   c000b002 <File::open(FileOpenMode)>
c001851b:	83 c4 10             	add    esp,0x10
c001851e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018525:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001852b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018532:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018539:	c1 e0 14             	shl    eax,0x14
c001853c:	83 ec 04             	sub    esp,0x4
c001853f:	6a 01                	push   0x1
c0018541:	50                   	push   eax
c0018542:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018549:	e8 89 cd fe ff       	call   c00052d7 <f_expand>
c001854e:	83 c4 10             	add    esp,0x10
c0018551:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018558:	8b 00                	mov    eax,DWORD PTR [eax]
c001855a:	83 c0 10             	add    eax,0x10
c001855d:	8b 00                	mov    eax,DWORD PTR [eax]
c001855f:	83 ec 0c             	sub    esp,0xc
c0018562:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018566:	52                   	push   edx
c0018567:	8d 54 24 30          	lea    edx,[esp+0x30]
c001856b:	52                   	push   edx
c001856c:	6a 00                	push   0x0
c001856e:	68 00 04 00 00       	push   0x400
c0018573:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001857a:	ff d0                	call   eax
c001857c:	83 c4 20             	add    esp,0x20
c001857f:	83 ec 0c             	sub    esp,0xc
c0018582:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018589:	e8 d2 2a ff ff       	call   c000b060 <File::close()>
c001858e:	83 c4 10             	add    esp,0x10
c0018591:	8d 76 00             	lea    esi,[esi+0x0]
c0018594:	83 ec 08             	sub    esp,0x8
c0018597:	6a 01                	push   0x1
c0018599:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185a0:	e8 5d 2a ff ff       	call   c000b002 <File::open(FileOpenMode)>
c00185a5:	83 c4 10             	add    esp,0x10
c00185a8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185af:	8b 00                	mov    eax,DWORD PTR [eax]
c00185b1:	83 c0 0c             	add    eax,0xc
c00185b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00185b6:	83 ec 0c             	sub    esp,0xc
c00185b9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00185bd:	52                   	push   edx
c00185be:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00185c2:	52                   	push   edx
c00185c3:	6a 00                	push   0x0
c00185c5:	6a 04                	push   0x4
c00185c7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00185ce:	ff d0                	call   eax
c00185d0:	83 c4 20             	add    esp,0x20
c00185d3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185da:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00185e0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00185e7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00185ee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00185f1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018602:	e8 59 2a ff ff       	call   c000b060 <File::close()>
c0018607:	83 c4 10             	add    esp,0x10
c001860a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018611:	ba 00 00 00 00       	mov    edx,0x0
c0018616:	81 c4 3c 04 00 00    	add    esp,0x43c
c001861c:	5b                   	pop    ebx
c001861d:	5e                   	pop    esi
c001861e:	5f                   	pop    edi
c001861f:	5d                   	pop    ebp
c0018620:	c3                   	ret    
c0018621:	90                   	nop
c0018622:	66 90                	xchg   ax,ax

c0018624 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018624:	57                   	push   edi
c0018625:	56                   	push   esi
c0018626:	53                   	push   ebx
c0018627:	81 ec 50 02 00 00    	sub    esp,0x250
c001862d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018635:	74 0d                	je     c0018644 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018637:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001863f:	75 0f                	jne    c0018650 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018641:	8d 76 00             	lea    esi,[esi+0x0]
c0018644:	b8 04 00 00 00       	mov    eax,0x4
c0018649:	e9 3a 01 00 00       	jmp    c0018788 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001864e:	66 90                	xchg   ax,ax
c0018650:	83 ec 08             	sub    esp,0x8
c0018653:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001865a:	50                   	push   eax
c001865b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018662:	e8 b5 c0 fe ff       	call   c000471c <f_readdir>
c0018667:	83 c4 10             	add    esp,0x10
c001866a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018671:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018678:	83 ec 0c             	sub    esp,0xc
c001867b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018682:	83 c0 16             	add    eax,0x16
c0018685:	50                   	push   eax
c0018686:	e8 f5 7e fe ff       	call   c0000580 <strlen>
c001868b:	83 c4 10             	add    esp,0x10
c001868e:	ba 00 00 00 00       	mov    edx,0x0
c0018693:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018697:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001869b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00186a2:	0f b6 c0             	movzx  eax,al
c00186a5:	83 e0 10             	and    eax,0x10
c00186a8:	74 0a                	je     c00186b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00186aa:	b8 02 00 00 00       	mov    eax,0x2
c00186af:	eb 0b                	jmp    c00186bc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00186b1:	8d 76 00             	lea    esi,[esi+0x0]
c00186b4:	b8 01 00 00 00       	mov    eax,0x1
c00186b9:	8d 76 00             	lea    esi,[esi+0x0]
c00186bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186c0:	83 ec 08             	sub    esp,0x8
c00186c3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00186ca:	83 c0 16             	add    eax,0x16
c00186cd:	50                   	push   eax
c00186ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186d2:	83 c0 10             	add    eax,0x10
c00186d5:	50                   	push   eax
c00186d6:	e8 75 7f fe ff       	call   c0000650 <strcpy>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00186e5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00186ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186f0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00186f7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00186fe:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018705:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001870c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018713:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001871a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018721:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018728:	89 c6                	mov    esi,eax
c001872a:	89 d7                	mov    edi,edx
c001872c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001872e:	89 c8                	mov    eax,ecx
c0018730:	89 fa                	mov    edx,edi
c0018732:	89 f3                	mov    ebx,esi
c0018734:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001873b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018742:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018749:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018750:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018756:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001875d:	0f be c0             	movsx  eax,al
c0018760:	85 c0                	test   eax,eax
c0018762:	75 08                	jne    c001876c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018764:	b8 07 00 00 00       	mov    eax,0x7
c0018769:	eb 1d                	jmp    c0018788 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001876b:	90                   	nop
c001876c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018773:	85 c0                	test   eax,eax
c0018775:	75 09                	jne    c0018780 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018777:	b8 00 00 00 00       	mov    eax,0x0
c001877c:	eb 0a                	jmp    c0018788 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001877e:	66 90                	xchg   ax,ax
c0018780:	b8 01 00 00 00       	mov    eax,0x1
c0018785:	8d 76 00             	lea    esi,[esi+0x0]
c0018788:	81 c4 50 02 00 00    	add    esp,0x250
c001878e:	5b                   	pop    ebx
c001878f:	5e                   	pop    esi
c0018790:	5f                   	pop    edi
c0018791:	c3                   	ret    
c0018792:	66 90                	xchg   ax,ax

c0018794 <FAT::read(void*, unsigned long, void*, int*)>:
c0018794:	83 ec 1c             	sub    esp,0x1c
c0018797:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001879c:	74 0a                	je     c00187a8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001879e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187a3:	75 0b                	jne    c00187b0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00187a5:	8d 76 00             	lea    esi,[esi+0x0]
c00187a8:	b8 04 00 00 00       	mov    eax,0x4
c00187ad:	eb 41                	jmp    c00187f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187af:	90                   	nop
c00187b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187b4:	50                   	push   eax
c00187b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187c1:	e8 9d b7 fe ff       	call   c0003f63 <f_read>
c00187c6:	83 c4 10             	add    esp,0x10
c00187c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187d1:	89 c2                	mov    edx,eax
c00187d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187d7:	89 10                	mov    DWORD PTR [eax],edx
c00187d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187dd:	85 c0                	test   eax,eax
c00187df:	75 07                	jne    c00187e8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00187e1:	b8 00 00 00 00       	mov    eax,0x0
c00187e6:	eb 08                	jmp    c00187f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187e8:	b8 01 00 00 00       	mov    eax,0x1
c00187ed:	8d 76 00             	lea    esi,[esi+0x0]
c00187f0:	83 c4 1c             	add    esp,0x1c
c00187f3:	c3                   	ret    

c00187f4 <FAT::write(void*, unsigned long, void*, int*)>:
c00187f4:	83 ec 1c             	sub    esp,0x1c
c00187f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187fc:	74 0a                	je     c0018808 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00187fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018803:	75 0b                	jne    c0018810 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018805:	8d 76 00             	lea    esi,[esi+0x0]
c0018808:	b8 04 00 00 00       	mov    eax,0x4
c001880d:	eb 41                	jmp    c0018850 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001880f:	90                   	nop
c0018810:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018814:	50                   	push   eax
c0018815:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001881d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018821:	e8 1e b9 fe ff       	call   c0004144 <f_write>
c0018826:	83 c4 10             	add    esp,0x10
c0018829:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001882d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018831:	89 c2                	mov    edx,eax
c0018833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018837:	89 10                	mov    DWORD PTR [eax],edx
c0018839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001883d:	85 c0                	test   eax,eax
c001883f:	75 07                	jne    c0018848 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018841:	b8 00 00 00 00       	mov    eax,0x0
c0018846:	eb 08                	jmp    c0018850 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018848:	b8 01 00 00 00       	mov    eax,0x1
c001884d:	8d 76 00             	lea    esi,[esi+0x0]
c0018850:	83 c4 1c             	add    esp,0x1c
c0018853:	c3                   	ret    

c0018854 <FAT::close(void*)>:
c0018854:	83 ec 1c             	sub    esp,0x1c
c0018857:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001885c:	75 0a                	jne    c0018868 <FAT::close(void*)+0x14>
c001885e:	b8 04 00 00 00       	mov    eax,0x4
c0018863:	eb 3f                	jmp    c00188a4 <FAT::close(void*)+0x50>
c0018865:	8d 76 00             	lea    esi,[esi+0x0]
c0018868:	83 ec 0c             	sub    esp,0xc
c001886b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001886f:	e8 dc bb fe ff       	call   c0004450 <f_close>
c0018874:	83 c4 10             	add    esp,0x10
c0018877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001887b:	83 ec 0c             	sub    esp,0xc
c001887e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018882:	e8 54 f2 fe ff       	call   c0007adb <free>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001888e:	85 c0                	test   eax,eax
c0018890:	75 0a                	jne    c001889c <FAT::close(void*)+0x48>
c0018892:	b8 00 00 00 00       	mov    eax,0x0
c0018897:	eb 0b                	jmp    c00188a4 <FAT::close(void*)+0x50>
c0018899:	8d 76 00             	lea    esi,[esi+0x0]
c001889c:	b8 01 00 00 00       	mov    eax,0x1
c00188a1:	8d 76 00             	lea    esi,[esi+0x0]
c00188a4:	83 c4 1c             	add    esp,0x1c
c00188a7:	c3                   	ret    

c00188a8 <FAT::closeDir(void*)>:
c00188a8:	83 ec 1c             	sub    esp,0x1c
c00188ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00188b0:	75 0a                	jne    c00188bc <FAT::closeDir(void*)+0x14>
c00188b2:	b8 04 00 00 00       	mov    eax,0x4
c00188b7:	eb 3f                	jmp    c00188f8 <FAT::closeDir(void*)+0x50>
c00188b9:	8d 76 00             	lea    esi,[esi+0x0]
c00188bc:	83 ec 0c             	sub    esp,0xc
c00188bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188c3:	e8 32 be fe ff       	call   c00046fa <f_closedir>
c00188c8:	83 c4 10             	add    esp,0x10
c00188cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188cf:	83 ec 0c             	sub    esp,0xc
c00188d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188d6:	e8 00 f2 fe ff       	call   c0007adb <free>
c00188db:	83 c4 10             	add    esp,0x10
c00188de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188e2:	85 c0                	test   eax,eax
c00188e4:	75 0a                	jne    c00188f0 <FAT::closeDir(void*)+0x48>
c00188e6:	b8 00 00 00 00       	mov    eax,0x0
c00188eb:	eb 0b                	jmp    c00188f8 <FAT::closeDir(void*)+0x50>
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]
c00188f0:	b8 01 00 00 00       	mov    eax,0x1
c00188f5:	8d 76 00             	lea    esi,[esi+0x0]
c00188f8:	83 c4 1c             	add    esp,0x1c
c00188fb:	c3                   	ret    

c00188fc <FAT::seek(void*, unsigned long long)>:
c00188fc:	83 ec 2c             	sub    esp,0x2c
c00188ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018903:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018907:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001890b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001890f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018914:	75 0a                	jne    c0018920 <FAT::seek(void*, unsigned long long)+0x24>
c0018916:	b8 04 00 00 00       	mov    eax,0x4
c001891b:	eb 33                	jmp    c0018950 <FAT::seek(void*, unsigned long long)+0x54>
c001891d:	8d 76 00             	lea    esi,[esi+0x0]
c0018920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018924:	83 ec 08             	sub    esp,0x8
c0018927:	50                   	push   eax
c0018928:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001892c:	e8 4e bb fe ff       	call   c000447f <f_lseek>
c0018931:	83 c4 10             	add    esp,0x10
c0018934:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018938:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001893c:	85 c0                	test   eax,eax
c001893e:	75 08                	jne    c0018948 <FAT::seek(void*, unsigned long long)+0x4c>
c0018940:	b8 00 00 00 00       	mov    eax,0x0
c0018945:	eb 09                	jmp    c0018950 <FAT::seek(void*, unsigned long long)+0x54>
c0018947:	90                   	nop
c0018948:	b8 01 00 00 00       	mov    eax,0x1
c001894d:	8d 76 00             	lea    esi,[esi+0x0]
c0018950:	83 c4 2c             	add    esp,0x2c
c0018953:	c3                   	ret    

c0018954 <fatWrapperReadDisk>:
c0018954:	53                   	push   ebx
c0018955:	83 ec 18             	sub    esp,0x18
c0018958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001895c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018960:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018965:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001896c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018970:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018974:	ba 00 00 00 00       	mov    edx,0x0
c0018979:	83 ec 0c             	sub    esp,0xc
c001897c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018980:	53                   	push   ebx
c0018981:	52                   	push   edx
c0018982:	50                   	push   eax
c0018983:	51                   	push   ecx
c0018984:	e8 61 48 ff ff       	call   c000d1ea <LogicalDisk::read(unsigned long long, int, void*)>
c0018989:	83 c4 20             	add    esp,0x20
c001898c:	83 c4 18             	add    esp,0x18
c001898f:	5b                   	pop    ebx
c0018990:	c3                   	ret    
c0018991:	8d 76 00             	lea    esi,[esi+0x0]

c0018994 <fatWrapperWriteDisk>:
c0018994:	53                   	push   ebx
c0018995:	83 ec 18             	sub    esp,0x18
c0018998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001899c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189a5:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00189ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00189b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189b4:	ba 00 00 00 00       	mov    edx,0x0
c00189b9:	83 ec 0c             	sub    esp,0xc
c00189bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189c0:	53                   	push   ebx
c00189c1:	52                   	push   edx
c00189c2:	50                   	push   eax
c00189c3:	51                   	push   ecx
c00189c4:	e8 8d 48 ff ff       	call   c000d256 <LogicalDisk::write(unsigned long long, int, void*)>
c00189c9:	83 c4 20             	add    esp,0x20
c00189cc:	83 c4 18             	add    esp,0x18
c00189cf:	5b                   	pop    ebx
c00189d0:	c3                   	ret    
c00189d1:	8d 76 00             	lea    esi,[esi+0x0]

c00189d4 <fatWrapperIoctl>:
c00189d4:	53                   	push   ebx
c00189d5:	83 ec 28             	sub    esp,0x28
c00189d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189dc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00189e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189e4:	88 d0                	mov    al,dl
c00189e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189ef:	83 f8 02             	cmp    eax,0x2
c00189f2:	75 34                	jne    c0018a28 <fatWrapperIoctl+0x54>
c00189f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a01:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a08:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a0e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018a14:	89 c2                	mov    edx,eax
c0018a16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018a1a:	66 89 10             	mov    WORD PTR [eax],dx
c0018a1d:	b8 00 00 00 00       	mov    eax,0x0
c0018a22:	e9 c5 00 00 00       	jmp    c0018aec <fatWrapperIoctl+0x118>
c0018a27:	90                   	nop
c0018a28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a2d:	83 f8 01             	cmp    eax,0x1
c0018a30:	75 6a                	jne    c0018a9c <fatWrapperIoctl+0xc8>
c0018a32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a3f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a46:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a4c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018a52:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a58:	89 c8                	mov    eax,ecx
c0018a5a:	89 da                	mov    edx,ebx
c0018a5c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a60:	c1 e0 0a             	shl    eax,0xa
c0018a63:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a68:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a6f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a75:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a7b:	89 cb                	mov    ebx,ecx
c0018a7d:	c1 fb 1f             	sar    ebx,0x1f
c0018a80:	53                   	push   ebx
c0018a81:	51                   	push   ecx
c0018a82:	52                   	push   edx
c0018a83:	50                   	push   eax
c0018a84:	e8 a7 5b 00 00       	call   c001e630 <__udivdi3>
c0018a89:	83 c4 10             	add    esp,0x10
c0018a8c:	89 c2                	mov    edx,eax
c0018a8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a92:	89 10                	mov    DWORD PTR [eax],edx
c0018a94:	b8 00 00 00 00       	mov    eax,0x0
c0018a99:	eb 51                	jmp    c0018aec <fatWrapperIoctl+0x118>
c0018a9b:	90                   	nop
c0018a9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aa1:	85 c0                	test   eax,eax
c0018aa3:	75 07                	jne    c0018aac <fatWrapperIoctl+0xd8>
c0018aa5:	b8 00 00 00 00       	mov    eax,0x0
c0018aaa:	eb 40                	jmp    c0018aec <fatWrapperIoctl+0x118>
c0018aac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ab1:	83 f8 03             	cmp    eax,0x3
c0018ab4:	75 1a                	jne    c0018ad0 <fatWrapperIoctl+0xfc>
c0018ab6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018aba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018abe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ac2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018ac8:	b8 00 00 00 00       	mov    eax,0x0
c0018acd:	eb 1d                	jmp    c0018aec <fatWrapperIoctl+0x118>
c0018acf:	90                   	nop
c0018ad0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ad5:	83 f8 04             	cmp    eax,0x4
c0018ad8:	75 0a                	jne    c0018ae4 <fatWrapperIoctl+0x110>
c0018ada:	b8 00 00 00 00       	mov    eax,0x0
c0018adf:	eb 0b                	jmp    c0018aec <fatWrapperIoctl+0x118>
c0018ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae4:	b8 04 00 00 00       	mov    eax,0x4
c0018ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0018aec:	83 c4 28             	add    esp,0x28
c0018aef:	5b                   	pop    ebx
c0018af0:	c3                   	ret    
c0018af1:	90                   	nop
c0018af2:	66 90                	xchg   ax,ax

c0018af4 <FAT::FAT()>:
c0018af4:	83 ec 1c             	sub    esp,0x1c
c0018af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018afb:	83 ec 0c             	sub    esp,0xc
c0018afe:	50                   	push   eax
c0018aff:	e8 bc 21 ff ff       	call   c000acc0 <Filesystem::Filesystem()>
c0018b04:	83 c4 10             	add    esp,0x10
c0018b07:	ba 08 17 02 c0       	mov    edx,0xc0021708
c0018b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b10:	89 10                	mov    DWORD PTR [eax],edx
c0018b12:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018b1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018b24:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018b29:	7f 19                	jg     c0018b44 <FAT::FAT()+0x50>
c0018b2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b2f:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018b3a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018b3f:	eb e3                	jmp    c0018b24 <FAT::FAT()+0x30>
c0018b41:	8d 76 00             	lea    esi,[esi+0x0]
c0018b44:	90                   	nop
c0018b45:	83 c4 1c             	add    esp,0x1c
c0018b48:	c3                   	ret    
c0018b49:	90                   	nop
c0018b4a:	66 90                	xchg   ax,ax

c0018b4c <FAT::fixFilepath(char*)>:
c0018b4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b50:	8a 00                	mov    al,BYTE PTR [eax]
c0018b52:	0f be c0             	movsx  eax,al
c0018b55:	83 f8 40             	cmp    eax,0x40
c0018b58:	7e 2e                	jle    c0018b88 <FAT::fixFilepath(char*)+0x3c>
c0018b5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b5e:	8a 00                	mov    al,BYTE PTR [eax]
c0018b60:	83 e8 41             	sub    eax,0x41
c0018b63:	88 c2                	mov    dl,al
c0018b65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b69:	88 10                	mov    BYTE PTR [eax],dl
c0018b6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b6f:	8a 00                	mov    al,BYTE PTR [eax]
c0018b71:	0f be c0             	movsx  eax,al
c0018b74:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b7b:	83 c0 30             	add    eax,0x30
c0018b7e:	88 c2                	mov    dl,al
c0018b80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b84:	88 10                	mov    BYTE PTR [eax],dl
c0018b86:	66 90                	xchg   ax,ax
c0018b88:	90                   	nop
c0018b89:	c3                   	ret    
c0018b8a:	66 90                	xchg   ax,ax

c0018b8c <FAT::open(char const*, void**, FileOpenMode)>:
c0018b8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b92:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b9a:	74 0c                	je     c0018ba8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b9c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018ba4:	75 0e                	jne    c0018bb4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018ba6:	66 90                	xchg   ax,ax
c0018ba8:	b8 04 00 00 00       	mov    eax,0x4
c0018bad:	e9 46 01 00 00       	jmp    c0018cf8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018bb2:	66 90                	xchg   ax,ax
c0018bb4:	83 ec 08             	sub    esp,0x8
c0018bb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018bbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018bc2:	50                   	push   eax
c0018bc3:	e8 88 7a fe ff       	call   c0000650 <strcpy>
c0018bc8:	83 c4 10             	add    esp,0x10
c0018bcb:	83 ec 08             	sub    esp,0x8
c0018bce:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bd2:	50                   	push   eax
c0018bd3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018bda:	e8 6d ff ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c0018bdf:	83 c4 10             	add    esp,0x10
c0018be2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018bea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bf1:	83 e0 01             	and    eax,0x1
c0018bf4:	74 12                	je     c0018c08 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018bf6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bfd:	83 c8 01             	or     eax,0x1
c0018c00:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c07:	90                   	nop
c0018c08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c0f:	83 e0 04             	and    eax,0x4
c0018c12:	74 24                	je     c0018c38 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018c14:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c1b:	83 c8 30             	or     eax,0x30
c0018c1e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c25:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c2c:	83 c8 02             	or     eax,0x2
c0018c2f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c36:	66 90                	xchg   ax,ax
c0018c38:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c3f:	83 e0 02             	and    eax,0x2
c0018c42:	74 14                	je     c0018c58 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018c44:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c4b:	83 c8 02             	or     eax,0x2
c0018c4e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c55:	8d 76 00             	lea    esi,[esi+0x0]
c0018c58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c5f:	83 e0 08             	and    eax,0x8
c0018c62:	74 14                	je     c0018c78 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c64:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c6b:	83 c8 04             	or     eax,0x4
c0018c6e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c75:	8d 76 00             	lea    esi,[esi+0x0]
c0018c78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c7f:	83 e0 10             	and    eax,0x10
c0018c82:	74 14                	je     c0018c98 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c84:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c8b:	83 c8 08             	or     eax,0x8
c0018c8e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c95:	8d 76 00             	lea    esi,[esi+0x0]
c0018c98:	83 ec 0c             	sub    esp,0xc
c0018c9b:	68 28 02 00 00       	push   0x228
c0018ca0:	e8 26 ee fe ff       	call   c0007acb <malloc>
c0018ca5:	83 c4 10             	add    esp,0x10
c0018ca8:	89 c2                	mov    edx,eax
c0018caa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cb1:	89 10                	mov    DWORD PTR [eax],edx
c0018cb3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018cbb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cc4:	83 ec 04             	sub    esp,0x4
c0018cc7:	52                   	push   edx
c0018cc8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ccc:	52                   	push   edx
c0018ccd:	50                   	push   eax
c0018cce:	e8 cd af fe ff       	call   c0003ca0 <f_open>
c0018cd3:	83 c4 10             	add    esp,0x10
c0018cd6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018cdd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018ce5:	74 09                	je     c0018cf0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018ce7:	b8 01 00 00 00       	mov    eax,0x1
c0018cec:	eb 0a                	jmp    c0018cf8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018cee:	66 90                	xchg   ax,ax
c0018cf0:	b8 00 00 00 00       	mov    eax,0x0
c0018cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cf8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018cfe:	c3                   	ret    
c0018cff:	90                   	nop

c0018d00 <FAT::openDir(char const*, void**)>:
c0018d00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018d06:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018d0e:	74 0c                	je     c0018d1c <FAT::openDir(char const*, void**)+0x1c>
c0018d10:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018d18:	75 0e                	jne    c0018d28 <FAT::openDir(char const*, void**)+0x28>
c0018d1a:	66 90                	xchg   ax,ax
c0018d1c:	b8 04 00 00 00       	mov    eax,0x4
c0018d21:	e9 82 00 00 00       	jmp    c0018da8 <FAT::openDir(char const*, void**)+0xa8>
c0018d26:	66 90                	xchg   ax,ax
c0018d28:	83 ec 08             	sub    esp,0x8
c0018d2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d36:	50                   	push   eax
c0018d37:	e8 14 79 fe ff       	call   c0000650 <strcpy>
c0018d3c:	83 c4 10             	add    esp,0x10
c0018d3f:	83 ec 08             	sub    esp,0x8
c0018d42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d46:	50                   	push   eax
c0018d47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d4e:	e8 f9 fd ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c0018d53:	83 c4 10             	add    esp,0x10
c0018d56:	83 ec 0c             	sub    esp,0xc
c0018d59:	6a 30                	push   0x30
c0018d5b:	e8 6b ed fe ff       	call   c0007acb <malloc>
c0018d60:	83 c4 10             	add    esp,0x10
c0018d63:	89 c2                	mov    edx,eax
c0018d65:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d6c:	89 10                	mov    DWORD PTR [eax],edx
c0018d6e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d77:	83 ec 08             	sub    esp,0x8
c0018d7a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d7e:	52                   	push   edx
c0018d7f:	50                   	push   eax
c0018d80:	e8 aa b8 fe ff       	call   c000462f <f_opendir>
c0018d85:	83 c4 10             	add    esp,0x10
c0018d88:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d8f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d97:	74 07                	je     c0018da0 <FAT::openDir(char const*, void**)+0xa0>
c0018d99:	b8 01 00 00 00       	mov    eax,0x1
c0018d9e:	eb 08                	jmp    c0018da8 <FAT::openDir(char const*, void**)+0xa8>
c0018da0:	b8 00 00 00 00       	mov    eax,0x0
c0018da5:	8d 76 00             	lea    esi,[esi+0x0]
c0018da8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018dae:	c3                   	ret    
c0018daf:	90                   	nop

c0018db0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018db0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018db6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018dbe:	75 0c                	jne    c0018dcc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018dc0:	b8 04 00 00 00       	mov    eax,0x4
c0018dc5:	e9 d6 00 00 00       	jmp    c0018ea0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dca:	66 90                	xchg   ax,ax
c0018dcc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018dd4:	75 0a                	jne    c0018de0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018dd6:	b8 04 00 00 00       	mov    eax,0x4
c0018ddb:	e9 c0 00 00 00       	jmp    c0018ea0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018de0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018de8:	75 0a                	jne    c0018df4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018dea:	b8 04 00 00 00       	mov    eax,0x4
c0018def:	e9 ac 00 00 00       	jmp    c0018ea0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018df4:	83 ec 08             	sub    esp,0x8
c0018df7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018dfe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e05:	50                   	push   eax
c0018e06:	e8 45 78 fe ff       	call   c0000650 <strcpy>
c0018e0b:	83 c4 10             	add    esp,0x10
c0018e0e:	83 ec 08             	sub    esp,0x8
c0018e11:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018e18:	50                   	push   eax
c0018e19:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e20:	e8 27 fd ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c0018e25:	83 c4 10             	add    esp,0x10
c0018e28:	83 ec 08             	sub    esp,0x8
c0018e2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2f:	50                   	push   eax
c0018e30:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e37:	50                   	push   eax
c0018e38:	e8 71 b9 fe ff       	call   c00047ae <f_stat>
c0018e3d:	83 c4 10             	add    esp,0x10
c0018e40:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018e47:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018e4e:	85 c0                	test   eax,eax
c0018e50:	74 0a                	je     c0018e5c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018e52:	83 f8 04             	cmp    eax,0x4
c0018e55:	74 39                	je     c0018e90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e57:	eb 3f                	jmp    c0018e98 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e59:	8d 76 00             	lea    esi,[esi+0x0]
c0018e5c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e60:	0f b6 c0             	movzx  eax,al
c0018e63:	83 e0 10             	and    eax,0x10
c0018e66:	0f 95 c2             	setne  dl
c0018e69:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e70:	88 10                	mov    BYTE PTR [eax],dl
c0018e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e76:	ba 00 00 00 00       	mov    edx,0x0
c0018e7b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e82:	89 01                	mov    DWORD PTR [ecx],eax
c0018e84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e87:	b8 00 00 00 00       	mov    eax,0x0
c0018e8c:	eb 12                	jmp    c0018ea0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e8e:	66 90                	xchg   ax,ax
c0018e90:	b8 02 00 00 00       	mov    eax,0x2
c0018e95:	eb 09                	jmp    c0018ea0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e97:	90                   	nop
c0018e98:	b8 01 00 00 00       	mov    eax,0x1
c0018e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018ea6:	c3                   	ret    
c0018ea7:	90                   	nop

c0018ea8 <FAT::unlink(char const*)>:
c0018ea8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018eae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018eb6:	75 08                	jne    c0018ec0 <FAT::unlink(char const*)+0x18>
c0018eb8:	b8 04 00 00 00       	mov    eax,0x4
c0018ebd:	eb 61                	jmp    c0018f20 <FAT::unlink(char const*)+0x78>
c0018ebf:	90                   	nop
c0018ec0:	83 ec 08             	sub    esp,0x8
c0018ec3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018eca:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ece:	50                   	push   eax
c0018ecf:	e8 7c 77 fe ff       	call   c0000650 <strcpy>
c0018ed4:	83 c4 10             	add    esp,0x10
c0018ed7:	83 ec 08             	sub    esp,0x8
c0018eda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ede:	50                   	push   eax
c0018edf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ee6:	e8 61 fc ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c0018eeb:	83 c4 10             	add    esp,0x10
c0018eee:	83 ec 0c             	sub    esp,0xc
c0018ef1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ef5:	50                   	push   eax
c0018ef6:	e8 25 bb fe ff       	call   c0004a20 <f_unlink>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018f05:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018f0c:	85 c0                	test   eax,eax
c0018f0e:	75 08                	jne    c0018f18 <FAT::unlink(char const*)+0x70>
c0018f10:	b8 00 00 00 00       	mov    eax,0x0
c0018f15:	eb 09                	jmp    c0018f20 <FAT::unlink(char const*)+0x78>
c0018f17:	90                   	nop
c0018f18:	b8 01 00 00 00       	mov    eax,0x1
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018f26:	c3                   	ret    
c0018f27:	90                   	nop

c0018f28 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018f28:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f2e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018f35:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0018f3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f40:	88 d0                	mov    al,dl
c0018f42:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018f46:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f4e:	75 0c                	jne    c0018f5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018f50:	b8 04 00 00 00       	mov    eax,0x4
c0018f55:	e9 7e 01 00 00       	jmp    c00190d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0018f5a:	66 90                	xchg   ax,ax
c0018f5c:	83 ec 08             	sub    esp,0x8
c0018f5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f6a:	50                   	push   eax
c0018f6b:	e8 e0 76 fe ff       	call   c0000650 <strcpy>
c0018f70:	83 c4 10             	add    esp,0x10
c0018f73:	83 ec 08             	sub    esp,0x8
c0018f76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f7a:	50                   	push   eax
c0018f7b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f82:	e8 c5 fb ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f92:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f9f:	83 e0 01             	and    eax,0x1
c0018fa2:	74 14                	je     c0018fb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0018fa4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fab:	83 c8 01             	or     eax,0x1
c0018fae:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fbd:	83 e0 02             	and    eax,0x2
c0018fc0:	74 12                	je     c0018fd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018fc2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fc9:	83 c8 20             	or     eax,0x20
c0018fcc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fd3:	90                   	nop
c0018fd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fd9:	83 e0 04             	and    eax,0x4
c0018fdc:	74 12                	je     c0018ff0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0018fde:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fe5:	83 c8 04             	or     eax,0x4
c0018fe8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fef:	90                   	nop
c0018ff0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ff5:	83 e0 08             	and    eax,0x8
c0018ff8:	74 12                	je     c001900c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018ffa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019001:	83 c8 02             	or     eax,0x2
c0019004:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001900b:	90                   	nop
c001900c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019011:	83 e0 01             	and    eax,0x1
c0019014:	74 12                	je     c0019028 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019016:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001901d:	83 c8 01             	or     eax,0x1
c0019020:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019027:	90                   	nop
c0019028:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001902d:	83 e0 02             	and    eax,0x2
c0019030:	74 12                	je     c0019044 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019032:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019039:	83 c8 20             	or     eax,0x20
c001903c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019043:	90                   	nop
c0019044:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019049:	83 e0 04             	and    eax,0x4
c001904c:	74 12                	je     c0019060 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001904e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019055:	83 c8 04             	or     eax,0x4
c0019058:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001905f:	90                   	nop
c0019060:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019065:	83 e0 08             	and    eax,0x8
c0019068:	74 12                	je     c001907c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001906a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019071:	83 c8 02             	or     eax,0x2
c0019074:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001907b:	90                   	nop
c001907c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019083:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001908a:	09 d0                	or     eax,edx
c001908c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019093:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001909b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00190a3:	83 ec 04             	sub    esp,0x4
c00190a6:	52                   	push   edx
c00190a7:	50                   	push   eax
c00190a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00190ac:	50                   	push   eax
c00190ad:	e8 e1 bd fe ff       	call   c0004e93 <f_chmod>
c00190b2:	83 c4 10             	add    esp,0x10
c00190b5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00190bc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00190c3:	85 c0                	test   eax,eax
c00190c5:	75 09                	jne    c00190d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c00190c7:	b8 00 00 00 00       	mov    eax,0x0
c00190cc:	eb 0a                	jmp    c00190d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c00190ce:	66 90                	xchg   ax,ax
c00190d0:	b8 01 00 00 00       	mov    eax,0x1
c00190d5:	8d 76 00             	lea    esi,[esi+0x0]
c00190d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00190de:	c3                   	ret    
c00190df:	90                   	nop

c00190e0 <FAT::rename(char const*, char const*)>:
c00190e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00190e6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00190ee:	74 0c                	je     c00190fc <FAT::rename(char const*, char const*)+0x1c>
c00190f0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00190f8:	75 0e                	jne    c0019108 <FAT::rename(char const*, char const*)+0x28>
c00190fa:	66 90                	xchg   ax,ax
c00190fc:	b8 04 00 00 00       	mov    eax,0x4
c0019101:	e9 9e 00 00 00       	jmp    c00191a4 <FAT::rename(char const*, char const*)+0xc4>
c0019106:	66 90                	xchg   ax,ax
c0019108:	83 ec 08             	sub    esp,0x8
c001910b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019112:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019119:	50                   	push   eax
c001911a:	e8 31 75 fe ff       	call   c0000650 <strcpy>
c001911f:	83 c4 10             	add    esp,0x10
c0019122:	83 ec 08             	sub    esp,0x8
c0019125:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001912c:	50                   	push   eax
c001912d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019134:	e8 13 fa ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	83 ec 08             	sub    esp,0x8
c001913f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019146:	8d 44 24 18          	lea    eax,[esp+0x18]
c001914a:	50                   	push   eax
c001914b:	e8 00 75 fe ff       	call   c0000650 <strcpy>
c0019150:	83 c4 10             	add    esp,0x10
c0019153:	83 ec 08             	sub    esp,0x8
c0019156:	8d 44 24 14          	lea    eax,[esp+0x14]
c001915a:	50                   	push   eax
c001915b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019162:	e8 e5 f9 ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c0019167:	83 c4 10             	add    esp,0x10
c001916a:	83 ec 08             	sub    esp,0x8
c001916d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019171:	50                   	push   eax
c0019172:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019179:	50                   	push   eax
c001917a:	e8 5c bb fe ff       	call   c0004cdb <f_rename>
c001917f:	83 c4 10             	add    esp,0x10
c0019182:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019189:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019190:	85 c0                	test   eax,eax
c0019192:	75 08                	jne    c001919c <FAT::rename(char const*, char const*)+0xbc>
c0019194:	b8 00 00 00 00       	mov    eax,0x0
c0019199:	eb 09                	jmp    c00191a4 <FAT::rename(char const*, char const*)+0xc4>
c001919b:	90                   	nop
c001919c:	b8 01 00 00 00       	mov    eax,0x1
c00191a1:	8d 76 00             	lea    esi,[esi+0x0]
c00191a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00191aa:	c3                   	ret    
c00191ab:	90                   	nop

c00191ac <FAT::mkdir(char const*)>:
c00191ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00191b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00191ba:	75 08                	jne    c00191c4 <FAT::mkdir(char const*)+0x18>
c00191bc:	b8 04 00 00 00       	mov    eax,0x4
c00191c1:	eb 61                	jmp    c0019224 <FAT::mkdir(char const*)+0x78>
c00191c3:	90                   	nop
c00191c4:	83 ec 08             	sub    esp,0x8
c00191c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00191ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191d2:	50                   	push   eax
c00191d3:	e8 78 74 fe ff       	call   c0000650 <strcpy>
c00191d8:	83 c4 10             	add    esp,0x10
c00191db:	83 ec 08             	sub    esp,0x8
c00191de:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191e2:	50                   	push   eax
c00191e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00191ea:	e8 5d f9 ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	83 ec 0c             	sub    esp,0xc
c00191f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191f9:	50                   	push   eax
c00191fa:	e8 41 b9 fe ff       	call   c0004b40 <f_mkdir>
c00191ff:	83 c4 10             	add    esp,0x10
c0019202:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019209:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019210:	85 c0                	test   eax,eax
c0019212:	75 08                	jne    c001921c <FAT::mkdir(char const*)+0x70>
c0019214:	b8 00 00 00 00       	mov    eax,0x0
c0019219:	eb 09                	jmp    c0019224 <FAT::mkdir(char const*)+0x78>
c001921b:	90                   	nop
c001921c:	b8 01 00 00 00       	mov    eax,0x1
c0019221:	8d 76 00             	lea    esi,[esi+0x0]
c0019224:	81 c4 1c 01 00 00    	add    esp,0x11c
c001922a:	c3                   	ret    
c001922b:	90                   	nop

c001922c <FAT::exists(char const*)>:
c001922c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019232:	83 ec 08             	sub    esp,0x8
c0019235:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001923c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019240:	50                   	push   eax
c0019241:	e8 0a 74 fe ff       	call   c0000650 <strcpy>
c0019246:	83 c4 10             	add    esp,0x10
c0019249:	83 ec 08             	sub    esp,0x8
c001924c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019250:	50                   	push   eax
c0019251:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019258:	e8 ef f8 ff ff       	call   c0018b4c <FAT::fixFilepath(char*)>
c001925d:	83 c4 10             	add    esp,0x10
c0019260:	83 ec 08             	sub    esp,0x8
c0019263:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001926a:	50                   	push   eax
c001926b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001926f:	50                   	push   eax
c0019270:	e8 39 b5 fe ff       	call   c00047ae <f_stat>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001927f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019286:	85 c0                	test   eax,eax
c0019288:	75 06                	jne    c0019290 <FAT::exists(char const*)+0x64>
c001928a:	b0 01                	mov    al,0x1
c001928c:	eb 06                	jmp    c0019294 <FAT::exists(char const*)+0x68>
c001928e:	66 90                	xchg   ax,ax
c0019290:	b0 00                	mov    al,0x0
c0019292:	66 90                	xchg   ax,ax
c0019294:	81 c4 2c 02 00 00    	add    esp,0x22c
c001929a:	c3                   	ret    
c001929b:	90                   	nop

c001929c <isoReadDiscSectorHelper>:
c001929c:	83 ec 2c             	sub    esp,0x2c
c001929f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00192a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00192a7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00192ac:	83 e8 41             	sub    eax,0x41
c00192af:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00192b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00192ba:	ba 00 00 00 00       	mov    edx,0x0
c00192bf:	83 ec 0c             	sub    esp,0xc
c00192c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00192c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192ca:	52                   	push   edx
c00192cb:	50                   	push   eax
c00192cc:	51                   	push   ecx
c00192cd:	e8 18 3f ff ff       	call   c000d1ea <LogicalDisk::read(unsigned long long, int, void*)>
c00192d2:	83 c4 20             	add    esp,0x20
c00192d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00192d9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00192de:	74 0c                	je     c00192ec <isoReadDiscSectorHelper+0x50>
c00192e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192e4:	c1 e0 0b             	shl    eax,0xb
c00192e7:	eb 0b                	jmp    c00192f4 <isoReadDiscSectorHelper+0x58>
c00192e9:	8d 76 00             	lea    esi,[esi+0x0]
c00192ec:	b8 00 00 00 00       	mov    eax,0x0
c00192f1:	8d 76 00             	lea    esi,[esi+0x0]
c00192f4:	83 c4 2c             	add    esp,0x2c
c00192f7:	c3                   	ret    

c00192f8 <iso_kprintf>:
c00192f8:	83 ec 0c             	sub    esp,0xc
c00192fb:	83 ec 08             	sub    esp,0x8
c00192fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019302:	68 11 11 02 c0       	push   0xc0021111
c0019307:	e8 92 16 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001930c:	83 c4 10             	add    esp,0x10
c001930f:	90                   	nop
c0019310:	83 c4 0c             	add    esp,0xc
c0019313:	c3                   	ret    

c0019314 <iso_kprintfd>:
c0019314:	83 ec 0c             	sub    esp,0xc
c0019317:	83 ec 08             	sub    esp,0x8
c001931a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001931e:	68 fe 00 02 c0       	push   0xc00200fe
c0019323:	e8 76 16 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0019328:	83 c4 10             	add    esp,0x10
c001932b:	90                   	nop
c001932c:	83 c4 0c             	add    esp,0xc
c001932f:	c3                   	ret    

c0019330 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019330:	b8 08 00 00 00       	mov    eax,0x8
c0019335:	c3                   	ret    

c0019336 <ISO9660::getName()>:
c0019336:	b8 68 17 02 c0       	mov    eax,0xc0021768
c001933b:	c3                   	ret    

c001933c <ISO9660::closeDir(void*)>:
c001933c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019340:	8b 00                	mov    eax,DWORD PTR [eax]
c0019342:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019345:	90                   	nop

c0019346 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019346:	b8 01 00 00 00       	mov    eax,0x1
c001934b:	c3                   	ret    

c001934c <ISO9660::unlink(char const*)>:
c001934c:	b8 01 00 00 00       	mov    eax,0x1
c0019351:	c3                   	ret    

c0019352 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019352:	b8 03 00 00 00       	mov    eax,0x3
c0019357:	c3                   	ret    

c0019358 <ISO9660::rename(char const*, char const*)>:
c0019358:	b8 01 00 00 00       	mov    eax,0x1
c001935d:	c3                   	ret    

c001935e <ISO9660::mkdir(char const*)>:
c001935e:	b8 01 00 00 00       	mov    eax,0x1
c0019363:	c3                   	ret    

c0019364 <ISO9660::~ISO9660()>:
c0019364:	83 ec 0c             	sub    esp,0xc
c0019367:	ba a8 18 02 c0       	mov    edx,0xc00218a8
c001936c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019370:	89 10                	mov    DWORD PTR [eax],edx
c0019372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019376:	83 ec 0c             	sub    esp,0xc
c0019379:	50                   	push   eax
c001937a:	e8 65 19 ff ff       	call   c000ace4 <Filesystem::~Filesystem()>
c001937f:	83 c4 10             	add    esp,0x10
c0019382:	90                   	nop
c0019383:	83 c4 0c             	add    esp,0xc
c0019386:	c3                   	ret    
c0019387:	90                   	nop

c0019388 <ISO9660::~ISO9660()>:
c0019388:	83 ec 0c             	sub    esp,0xc
c001938b:	83 ec 0c             	sub    esp,0xc
c001938e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019392:	e8 cd ff ff ff       	call   c0019364 <ISO9660::~ISO9660()>
c0019397:	83 c4 10             	add    esp,0x10
c001939a:	83 ec 08             	sub    esp,0x8
c001939d:	6a 08                	push   0x8
c001939f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193a3:	e8 f8 14 ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c00193a8:	83 c4 10             	add    esp,0x10
c00193ab:	83 c4 0c             	add    esp,0xc
c00193ae:	c3                   	ret    
c00193af:	90                   	nop

c00193b0 <ISO9660::exists(char const*)>:
c00193b0:	83 ec 18             	sub    esp,0x18
c00193b3:	68 83 17 02 c0       	push   0xc0021783
c00193b8:	e8 ac 74 ff ff       	call   c0010869 <KePanic(char const*)>
c00193bd:	31 c0                	xor    eax,eax
c00193bf:	83 c4 1c             	add    esp,0x1c
c00193c2:	c3                   	ret    
c00193c3:	90                   	nop

c00193c4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00193c4:	56                   	push   esi
c00193c5:	53                   	push   ebx
c00193c6:	53                   	push   ebx
c00193c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00193cb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00193cf:	85 db                	test   ebx,ebx
c00193d1:	0f 84 ca 00 00 00    	je     c00194a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193d7:	85 f6                	test   esi,esi
c00193d9:	0f 84 c2 00 00 00    	je     c00194a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193df:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00193e4:	b8 03 00 00 00       	mov    eax,0x3
c00193e9:	0f 85 b7 00 00 00    	jne    c00194a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193ef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00193f1:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00193f7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193fe:	74 1b                	je     c001941b <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019400:	85 c0                	test   eax,eax
c0019402:	74 10                	je     c0019414 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019404:	83 ec 0c             	sub    esp,0xc
c0019407:	68 a1 17 02 c0       	push   0xc00217a1
c001940c:	e8 58 74 ff ff       	call   c0010869 <KePanic(char const*)>
c0019411:	83 c4 10             	add    esp,0x10
c0019414:	8a 03                	mov    al,BYTE PTR [ebx]
c0019416:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001941b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001941e:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019425:	85 c0                	test   eax,eax
c0019427:	74 09                	je     c0019432 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019429:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019430:	74 48                	je     c001947a <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019432:	83 ec 0c             	sub    esp,0xc
c0019435:	68 b1 17 02 c0       	push   0xc00217b1
c001943a:	e8 5f 15 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001943f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001944c:	85 c0                	test   eax,eax
c001944e:	74 17                	je     c0019467 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019450:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019457:	83 ec 0c             	sub    esp,0xc
c001945a:	68 d1 17 02 c0       	push   0xc00217d1
c001945f:	e8 3a 15 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001946e:	83 ec 0c             	sub    esp,0xc
c0019471:	50                   	push   eax
c0019472:	e8 f0 d5 fe ff       	call   c0006a67 <init_percd>
c0019477:	83 c4 10             	add    esp,0x10
c001947a:	51                   	push   ecx
c001947b:	83 c3 03             	add    ebx,0x3
c001947e:	51                   	push   ecx
c001947f:	6a 00                	push   0x0
c0019481:	53                   	push   ebx
c0019482:	e8 a3 d0 fe ff       	call   c000652a <iso_open>
c0019487:	83 c4 10             	add    esp,0x10
c001948a:	89 c2                	mov    edx,eax
c001948c:	b8 01 00 00 00       	mov    eax,0x1
c0019491:	83 fa ff             	cmp    edx,0xffffffff
c0019494:	74 10                	je     c00194a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019496:	83 c2 32             	add    edx,0x32
c0019499:	31 c0                	xor    eax,eax
c001949b:	01 d2                	add    edx,edx
c001949d:	89 16                	mov    DWORD PTR [esi],edx
c001949f:	eb 05                	jmp    c00194a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00194a1:	b8 04 00 00 00       	mov    eax,0x4
c00194a6:	5a                   	pop    edx
c00194a7:	5b                   	pop    ebx
c00194a8:	5e                   	pop    esi
c00194a9:	c3                   	ret    

c00194aa <ISO9660::read(void*, unsigned long, void*, int*)>:
c00194aa:	53                   	push   ebx
c00194ab:	83 ec 08             	sub    esp,0x8
c00194ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194b6:	85 c0                	test   eax,eax
c00194b8:	74 2d                	je     c00194e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00194ba:	85 db                	test   ebx,ebx
c00194bc:	74 29                	je     c00194e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00194be:	52                   	push   edx
c00194bf:	b9 02 00 00 00       	mov    ecx,0x2
c00194c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194c8:	99                   	cdq    
c00194c9:	f7 f9                	idiv   ecx
c00194cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194cf:	83 e8 32             	sub    eax,0x32
c00194d2:	50                   	push   eax
c00194d3:	e8 fa d0 fe ff       	call   c00065d2 <iso_read>
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	89 03                	mov    DWORD PTR [ebx],eax
c00194dd:	09 d0                	or     eax,edx
c00194df:	0f 94 c0             	sete   al
c00194e2:	0f b6 c0             	movzx  eax,al
c00194e5:	eb 05                	jmp    c00194ec <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00194e7:	b8 04 00 00 00       	mov    eax,0x4
c00194ec:	83 c4 08             	add    esp,0x8
c00194ef:	5b                   	pop    ebx
c00194f0:	c3                   	ret    
c00194f1:	90                   	nop

c00194f2 <ISO9660::seek(void*, unsigned long long)>:
c00194f2:	57                   	push   edi
c00194f3:	b8 04 00 00 00       	mov    eax,0x4
c00194f8:	56                   	push   esi
c00194f9:	51                   	push   ecx
c00194fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194fe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019502:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019506:	85 d2                	test   edx,edx
c0019508:	74 26                	je     c0019530 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001950a:	89 d0                	mov    eax,edx
c001950c:	b9 02 00 00 00       	mov    ecx,0x2
c0019511:	6a 00                	push   0x0
c0019513:	99                   	cdq    
c0019514:	f7 f9                	idiv   ecx
c0019516:	57                   	push   edi
c0019517:	56                   	push   esi
c0019518:	83 e8 32             	sub    eax,0x32
c001951b:	50                   	push   eax
c001951c:	e8 c7 d1 fe ff       	call   c00066e8 <iso_seek>
c0019521:	83 c4 10             	add    esp,0x10
c0019524:	31 f0                	xor    eax,esi
c0019526:	31 fa                	xor    edx,edi
c0019528:	09 d0                	or     eax,edx
c001952a:	0f 95 c0             	setne  al
c001952d:	0f b6 c0             	movzx  eax,al
c0019530:	5a                   	pop    edx
c0019531:	5e                   	pop    esi
c0019532:	5f                   	pop    edi
c0019533:	c3                   	ret    

c0019534 <ISO9660::tell(void*, unsigned long long*)>:
c0019534:	53                   	push   ebx
c0019535:	83 ec 08             	sub    esp,0x8
c0019538:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001953c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019540:	85 c0                	test   eax,eax
c0019542:	74 24                	je     c0019568 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019544:	85 db                	test   ebx,ebx
c0019546:	74 20                	je     c0019568 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019548:	b9 02 00 00 00       	mov    ecx,0x2
c001954d:	99                   	cdq    
c001954e:	f7 f9                	idiv   ecx
c0019550:	83 ec 0c             	sub    esp,0xc
c0019553:	83 e8 32             	sub    eax,0x32
c0019556:	50                   	push   eax
c0019557:	e8 10 d2 fe ff       	call   c000676c <iso_tell>
c001955c:	83 c4 10             	add    esp,0x10
c001955f:	89 03                	mov    DWORD PTR [ebx],eax
c0019561:	31 c0                	xor    eax,eax
c0019563:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019566:	eb 05                	jmp    c001956d <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019568:	b8 04 00 00 00       	mov    eax,0x4
c001956d:	83 c4 08             	add    esp,0x8
c0019570:	5b                   	pop    ebx
c0019571:	c3                   	ret    

c0019572 <ISO9660::stat(void*, unsigned long long*)>:
c0019572:	56                   	push   esi
c0019573:	53                   	push   ebx
c0019574:	83 ec 10             	sub    esp,0x10
c0019577:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001957b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001957f:	68 f5 17 02 c0       	push   0xc00217f5
c0019584:	e8 15 14 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0019589:	83 c4 10             	add    esp,0x10
c001958c:	85 db                	test   ebx,ebx
c001958e:	74 2a                	je     c00195ba <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019590:	85 f6                	test   esi,esi
c0019592:	74 26                	je     c00195ba <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019594:	89 d8                	mov    eax,ebx
c0019596:	b9 02 00 00 00       	mov    ecx,0x2
c001959b:	99                   	cdq    
c001959c:	83 ec 0c             	sub    esp,0xc
c001959f:	f7 f9                	idiv   ecx
c00195a1:	83 e8 32             	sub    eax,0x32
c00195a4:	50                   	push   eax
c00195a5:	e8 f3 d1 fe ff       	call   c000679d <iso_total>
c00195aa:	83 c4 10             	add    esp,0x10
c00195ad:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00195b4:	89 06                	mov    DWORD PTR [esi],eax
c00195b6:	31 c0                	xor    eax,eax
c00195b8:	eb 05                	jmp    c00195bf <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00195ba:	b8 04 00 00 00       	mov    eax,0x4
c00195bf:	5a                   	pop    edx
c00195c0:	5b                   	pop    ebx
c00195c1:	5e                   	pop    esi
c00195c2:	c3                   	ret    
c00195c3:	90                   	nop

c00195c4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00195c4:	55                   	push   ebp
c00195c5:	57                   	push   edi
c00195c6:	56                   	push   esi
c00195c7:	53                   	push   ebx
c00195c8:	83 ec 18             	sub    esp,0x18
c00195cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00195cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00195d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00195d7:	68 fd 17 02 c0       	push   0xc00217fd
c00195dc:	e8 bd 13 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c00195e1:	83 c4 10             	add    esp,0x10
c00195e4:	85 ff                	test   edi,edi
c00195e6:	0f 94 c0             	sete   al
c00195e9:	85 f6                	test   esi,esi
c00195eb:	0f 94 c2             	sete   dl
c00195ee:	09 d0                	or     eax,edx
c00195f0:	a8 01                	test   al,0x1
c00195f2:	0f 85 dd 00 00 00    	jne    c00196d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195f8:	85 db                	test   ebx,ebx
c00195fa:	0f 84 d5 00 00 00    	je     c00196d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019600:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019603:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019609:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019610:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019617:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019619:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001961f:	74 1b                	je     c001963c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019621:	85 c0                	test   eax,eax
c0019623:	74 10                	je     c0019635 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019625:	83 ec 0c             	sub    esp,0xc
c0019628:	68 a1 17 02 c0       	push   0xc00217a1
c001962d:	e8 37 72 ff ff       	call   c0010869 <KePanic(char const*)>
c0019632:	83 c4 10             	add    esp,0x10
c0019635:	8a 03                	mov    al,BYTE PTR [ebx]
c0019637:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001963c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001963f:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019646:	85 c0                	test   eax,eax
c0019648:	74 09                	je     c0019653 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001964a:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019651:	74 51                	je     c00196a4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019653:	83 ec 0c             	sub    esp,0xc
c0019656:	68 05 18 02 c0       	push   0xc0021805
c001965b:	e8 3e 13 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c0019660:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019663:	83 c4 10             	add    esp,0x10
c0019666:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c001966e:	74 21                	je     c0019691 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019670:	83 ec 0c             	sub    esp,0xc
c0019673:	68 25 18 02 c0       	push   0xc0021825
c0019678:	e8 21 13 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001967d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019680:	83 c4 10             	add    esp,0x10
c0019683:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001968a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019691:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	50                   	push   eax
c001969c:	e8 c6 d3 fe ff       	call   c0006a67 <init_percd>
c00196a1:	83 c4 10             	add    esp,0x10
c00196a4:	52                   	push   edx
c00196a5:	83 c3 03             	add    ebx,0x3
c00196a8:	52                   	push   edx
c00196a9:	6a 00                	push   0x0
c00196ab:	53                   	push   ebx
c00196ac:	e8 79 ce fe ff       	call   c000652a <iso_open>
c00196b1:	83 c4 10             	add    esp,0x10
c00196b4:	83 f8 ff             	cmp    eax,0xffffffff
c00196b7:	89 c5                	mov    ebp,eax
c00196b9:	75 21                	jne    c00196dc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00196bb:	50                   	push   eax
c00196bc:	50                   	push   eax
c00196bd:	6a 01                	push   0x1
c00196bf:	53                   	push   ebx
c00196c0:	e8 65 ce fe ff       	call   c000652a <iso_open>
c00196c5:	83 c4 10             	add    esp,0x10
c00196c8:	ba 02 00 00 00       	mov    edx,0x2
c00196cd:	40                   	inc    eax
c00196ce:	74 2b                	je     c00196fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196d0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00196d3:	eb 24                	jmp    c00196f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00196d5:	ba 04 00 00 00       	mov    edx,0x4
c00196da:	eb 1f                	jmp    c00196fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196dc:	83 ec 0c             	sub    esp,0xc
c00196df:	50                   	push   eax
c00196e0:	e8 b8 d0 fe ff       	call   c000679d <iso_total>
c00196e5:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00196ec:	89 07                	mov    DWORD PTR [edi],eax
c00196ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00196f1:	e8 be ce fe ff       	call   c00065b4 <iso_close>
c00196f6:	83 c4 10             	add    esp,0x10
c00196f9:	31 d2                	xor    edx,edx
c00196fb:	83 c4 0c             	add    esp,0xc
c00196fe:	89 d0                	mov    eax,edx
c0019700:	5b                   	pop    ebx
c0019701:	5e                   	pop    esi
c0019702:	5f                   	pop    edi
c0019703:	5d                   	pop    ebp
c0019704:	c3                   	ret    
c0019705:	90                   	nop

c0019706 <ISO9660::close(void*)>:
c0019706:	83 ec 0c             	sub    esp,0xc
c0019709:	b8 04 00 00 00       	mov    eax,0x4
c001970e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019712:	85 d2                	test   edx,edx
c0019714:	74 1b                	je     c0019731 <ISO9660::close(void*)+0x2b>
c0019716:	89 d0                	mov    eax,edx
c0019718:	b9 02 00 00 00       	mov    ecx,0x2
c001971d:	99                   	cdq    
c001971e:	83 ec 0c             	sub    esp,0xc
c0019721:	f7 f9                	idiv   ecx
c0019723:	83 e8 32             	sub    eax,0x32
c0019726:	50                   	push   eax
c0019727:	e8 88 ce fe ff       	call   c00065b4 <iso_close>
c001972c:	83 c4 10             	add    esp,0x10
c001972f:	31 c0                	xor    eax,eax
c0019731:	83 c4 0c             	add    esp,0xc
c0019734:	c3                   	ret    
c0019735:	90                   	nop

c0019736 <ISO9660::openDir(char const*, void**)>:
c0019736:	56                   	push   esi
c0019737:	53                   	push   ebx
c0019738:	50                   	push   eax
c0019739:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001973d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019741:	85 db                	test   ebx,ebx
c0019743:	0f 84 bd 00 00 00    	je     c0019806 <ISO9660::openDir(char const*, void**)+0xd0>
c0019749:	85 f6                	test   esi,esi
c001974b:	0f 84 b5 00 00 00    	je     c0019806 <ISO9660::openDir(char const*, void**)+0xd0>
c0019751:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019753:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019759:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019760:	74 1b                	je     c001977d <ISO9660::openDir(char const*, void**)+0x47>
c0019762:	85 c0                	test   eax,eax
c0019764:	74 10                	je     c0019776 <ISO9660::openDir(char const*, void**)+0x40>
c0019766:	83 ec 0c             	sub    esp,0xc
c0019769:	68 a1 17 02 c0       	push   0xc00217a1
c001976e:	e8 f6 70 ff ff       	call   c0010869 <KePanic(char const*)>
c0019773:	83 c4 10             	add    esp,0x10
c0019776:	8a 03                	mov    al,BYTE PTR [ebx]
c0019778:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001977d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019780:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019787:	85 c0                	test   eax,eax
c0019789:	74 10                	je     c001979b <ISO9660::openDir(char const*, void**)+0x65>
c001978b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019792:	74 1a                	je     c00197ae <ISO9660::openDir(char const*, void**)+0x78>
c0019794:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001979b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197a2:	83 ec 0c             	sub    esp,0xc
c00197a5:	50                   	push   eax
c00197a6:	e8 bc d2 fe ff       	call   c0006a67 <init_percd>
c00197ab:	83 c4 10             	add    esp,0x10
c00197ae:	50                   	push   eax
c00197af:	83 c3 03             	add    ebx,0x3
c00197b2:	50                   	push   eax
c00197b3:	6a 01                	push   0x1
c00197b5:	53                   	push   ebx
c00197b6:	e8 6f cd fe ff       	call   c000652a <iso_open>
c00197bb:	83 c4 10             	add    esp,0x10
c00197be:	83 f8 ff             	cmp    eax,0xffffffff
c00197c1:	89 c3                	mov    ebx,eax
c00197c3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197c8:	75 1c                	jne    c00197e6 <ISO9660::openDir(char const*, void**)+0xb0>
c00197ca:	53                   	push   ebx
c00197cb:	53                   	push   ebx
c00197cc:	68 49 18 02 c0       	push   0xc0021849
c00197d1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197d7:	e8 ba f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197dc:	83 c4 10             	add    esp,0x10
c00197df:	b8 01 00 00 00       	mov    eax,0x1
c00197e4:	eb 25                	jmp    c001980b <ISO9660::openDir(char const*, void**)+0xd5>
c00197e6:	51                   	push   ecx
c00197e7:	01 db                	add    ebx,ebx
c00197e9:	51                   	push   ecx
c00197ea:	83 c3 65             	add    ebx,0x65
c00197ed:	68 5c 18 02 c0       	push   0xc002185c
c00197f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197f8:	e8 99 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197fd:	83 c4 10             	add    esp,0x10
c0019800:	31 c0                	xor    eax,eax
c0019802:	89 1e                	mov    DWORD PTR [esi],ebx
c0019804:	eb 05                	jmp    c001980b <ISO9660::openDir(char const*, void**)+0xd5>
c0019806:	b8 04 00 00 00       	mov    eax,0x4
c001980b:	5a                   	pop    edx
c001980c:	5b                   	pop    ebx
c001980d:	5e                   	pop    esi
c001980e:	c3                   	ret    
c001980f:	90                   	nop

c0019810 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019810:	55                   	push   ebp
c0019811:	57                   	push   edi
c0019812:	56                   	push   esi
c0019813:	53                   	push   ebx
c0019814:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001981a:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019821:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019828:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001982f:	85 db                	test   ebx,ebx
c0019831:	0f 84 e4 00 00 00    	je     c001991b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019837:	85 ed                	test   ebp,ebp
c0019839:	0f 84 dc 00 00 00    	je     c001991b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001983f:	83 ec 0c             	sub    esp,0xc
c0019842:	68 6f 18 02 c0       	push   0xc002186f
c0019847:	e8 52 11 ff ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001984c:	89 d8                	mov    eax,ebx
c001984e:	b9 02 00 00 00       	mov    ecx,0x2
c0019853:	99                   	cdq    
c0019854:	f7 f9                	idiv   ecx
c0019856:	83 e8 32             	sub    eax,0x32
c0019859:	89 04 24             	mov    DWORD PTR [esp],eax
c001985c:	e8 8e cf fe ff       	call   c00067ef <iso_readdir>
c0019861:	83 c4 10             	add    esp,0x10
c0019864:	85 c0                	test   eax,eax
c0019866:	89 c3                	mov    ebx,eax
c0019868:	75 38                	jne    c00198a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001986a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001986f:	53                   	push   ebx
c0019870:	53                   	push   ebx
c0019871:	68 7a 18 02 c0       	push   0xc002187a
c0019876:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001987c:	e8 15 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019881:	83 c4 0c             	add    esp,0xc
c0019884:	68 10 01 00 00       	push   0x110
c0019889:	6a 00                	push   0x0
c001988b:	57                   	push   edi
c001988c:	e8 5f 6c fe ff       	call   c00004f0 <memset>
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	b8 01 00 00 00       	mov    eax,0x1
c0019899:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00198a0:	eb 7e                	jmp    c0019920 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00198a2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00198a8:	8d 70 08             	lea    esi,[eax+0x8]
c00198ab:	83 ec 0c             	sub    esp,0xc
c00198ae:	56                   	push   esi
c00198af:	e8 cc 6c fe ff       	call   c0000580 <strlen>
c00198b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00198bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198c0:	83 c4 10             	add    esp,0x10
c00198c3:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c00198c7:	75 0a                	jne    c00198d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c00198c9:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c00198cc:	b8 02 00 00 00       	mov    eax,0x2
c00198d1:	74 05                	je     c00198d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c00198d3:	b8 01 00 00 00       	mov    eax,0x1
c00198d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198dc:	50                   	push   eax
c00198dd:	50                   	push   eax
c00198de:	56                   	push   esi
c00198df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198e3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00198e7:	50                   	push   eax
c00198e8:	e8 63 6d fe ff       	call   c0000650 <strcpy>
c00198ed:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00198f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198f6:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00198fd:	5a                   	pop    edx
c00198fe:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019903:	59                   	pop    ecx
c0019904:	68 8d 18 02 c0       	push   0xc002188d
c0019909:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001990f:	e8 82 f1 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019914:	83 c4 10             	add    esp,0x10
c0019917:	31 c0                	xor    eax,eax
c0019919:	eb 05                	jmp    c0019920 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001991b:	b8 04 00 00 00       	mov    eax,0x4
c0019920:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019926:	5b                   	pop    ebx
c0019927:	5e                   	pop    esi
c0019928:	5f                   	pop    edi
c0019929:	5d                   	pop    ebp
c001992a:	c3                   	ret    

c001992b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001992b:	57                   	push   edi
c001992c:	56                   	push   esi
c001992d:	53                   	push   ebx
c001992e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019932:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019936:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c001993c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019940:	0f be cb             	movsx  ecx,bl
c0019943:	75 0b                	jne    c0019950 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019945:	0f be 05 e4 23 02 c0 	movsx  eax,BYTE PTR ds:0xc00223e4
c001994c:	39 c8                	cmp    eax,ecx
c001994e:	74 47                	je     c0019997 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019950:	83 ec 0c             	sub    esp,0xc
c0019953:	31 d2                	xor    edx,edx
c0019955:	68 40 83 02 c0       	push   0xc0028340
c001995a:	6a 01                	push   0x1
c001995c:	52                   	push   edx
c001995d:	56                   	push   esi
c001995e:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019965:	e8 80 38 ff ff       	call   c000d1ea <LogicalDisk::read(unsigned long long, int, void*)>
c001996a:	83 c4 20             	add    esp,0x20
c001996d:	85 c0                	test   eax,eax
c001996f:	75 0e                	jne    c001997f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019971:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019977:	88 1d e4 23 02 c0    	mov    BYTE PTR ds:0xc00223e4,bl
c001997d:	eb 18                	jmp    c0019997 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001997f:	50                   	push   eax
c0019980:	68 00 08 00 00       	push   0x800
c0019985:	6a 00                	push   0x0
c0019987:	57                   	push   edi
c0019988:	e8 63 6b fe ff       	call   c00004f0 <memset>
c001998d:	83 c4 10             	add    esp,0x10
c0019990:	b8 01 00 00 00       	mov    eax,0x1
c0019995:	eb 0e                	jmp    c00199a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019997:	be 40 83 02 c0       	mov    esi,0xc0028340
c001999c:	b9 00 08 00 00       	mov    ecx,0x800
c00199a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199a3:	31 c0                	xor    eax,eax
c00199a5:	5b                   	pop    ebx
c00199a6:	5e                   	pop    esi
c00199a7:	5f                   	pop    edi
c00199a8:	c3                   	ret    
c00199a9:	90                   	nop

c00199aa <ISO9660::tryMount(LogicalDisk*, int)>:
c00199aa:	53                   	push   ebx
c00199ab:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00199b1:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c00199bb:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00199c2:	8d 58 41             	lea    ebx,[eax+0x41]
c00199c5:	0f be db             	movsx  ebx,bl
c00199c8:	53                   	push   ebx
c00199c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199cd:	50                   	push   eax
c00199ce:	6a 10                	push   0x10
c00199d0:	e8 56 ff ff ff       	call   c001992b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00199d5:	83 c4 10             	add    esp,0x10
c00199d8:	31 d2                	xor    edx,edx
c00199da:	85 c0                	test   eax,eax
c00199dc:	75 33                	jne    c0019a11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199de:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00199e3:	75 2c                	jne    c0019a11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199e5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00199ea:	75 25                	jne    c0019a11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ec:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00199f1:	75 1e                	jne    c0019a11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199f3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00199f8:	75 17                	jne    c0019a11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199fa:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00199ff:	75 10                	jne    c0019a11 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a01:	83 ec 0c             	sub    esp,0xc
c0019a04:	53                   	push   ebx
c0019a05:	e8 5d d0 fe ff       	call   c0006a67 <init_percd>
c0019a0a:	83 c4 10             	add    esp,0x10
c0019a0d:	40                   	inc    eax
c0019a0e:	0f 95 c2             	setne  dl
c0019a11:	81 c4 08 08 00 00    	add    esp,0x808
c0019a17:	88 d0                	mov    al,dl
c0019a19:	5b                   	pop    ebx
c0019a1a:	c3                   	ret    
c0019a1b:	90                   	nop

c0019a1c <ISO9660::ISO9660()>:
c0019a1c:	83 ec 0c             	sub    esp,0xc
c0019a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a23:	83 ec 0c             	sub    esp,0xc
c0019a26:	50                   	push   eax
c0019a27:	e8 94 12 ff ff       	call   c000acc0 <Filesystem::Filesystem()>
c0019a2c:	83 c4 10             	add    esp,0x10
c0019a2f:	ba a8 18 02 c0       	mov    edx,0xc00218a8
c0019a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a38:	89 10                	mov    DWORD PTR [eax],edx
c0019a3a:	e8 3a d1 fe ff       	call   c0006b79 <fs_iso9660_init>
c0019a3f:	90                   	nop
c0019a40:	83 c4 0c             	add    esp,0xc
c0019a43:	c3                   	ret    

c0019a44 <SoundCard::beginPlayback()>:
c0019a44:	c7 44 24 04 08 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021908
c0019a4c:	e9 18 6e ff ff       	jmp    c0010869 <KePanic(char const*)>
c0019a51:	90                   	nop

c0019a52 <SoundCard::stopPlayback()>:
c0019a52:	c7 44 24 04 08 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021908
c0019a5a:	e9 0a 6e ff ff       	jmp    c0010869 <KePanic(char const*)>
c0019a5f:	90                   	nop

c0019a60 <SoundCard::SoundCard(char const*)>:
c0019a60:	83 ec 1c             	sub    esp,0x1c
c0019a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a67:	83 ec 08             	sub    esp,0x8
c0019a6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a6e:	50                   	push   eax
c0019a6f:	e8 24 25 ff ff       	call   c000bf98 <Device::Device(char const*)>
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	ba 54 19 02 c0       	mov    edx,0xc0021954
c0019a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a80:	89 10                	mov    DWORD PTR [eax],edx
c0019a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a86:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a91:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a9f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019aa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aad:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019ab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019abb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019ac5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019acd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019ad2:	7f 1a                	jg     c0019aee <SoundCard::SoundCard(char const*)+0x8e>
c0019ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019adc:	83 c2 54             	add    edx,0x54
c0019adf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019ae7:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019aec:	eb df                	jmp    c0019acd <SoundCard::SoundCard(char const*)+0x6d>
c0019aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019af9:	90                   	nop
c0019afa:	83 c4 1c             	add    esp,0x1c
c0019afd:	c3                   	ret    

c0019afe <SoundCard::~SoundCard()>:
c0019afe:	83 ec 0c             	sub    esp,0xc
c0019b01:	ba 54 19 02 c0       	mov    edx,0xc0021954
c0019b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b0a:	89 10                	mov    DWORD PTR [eax],edx
c0019b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b10:	83 ec 0c             	sub    esp,0xc
c0019b13:	50                   	push   eax
c0019b14:	e8 e9 21 ff ff       	call   c000bd02 <Device::~Device()>
c0019b19:	83 c4 10             	add    esp,0x10
c0019b1c:	90                   	nop
c0019b1d:	83 c4 0c             	add    esp,0xc
c0019b20:	c3                   	ret    
c0019b21:	90                   	nop

c0019b22 <SoundCard::~SoundCard()>:
c0019b22:	83 ec 0c             	sub    esp,0xc
c0019b25:	83 ec 0c             	sub    esp,0xc
c0019b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b2c:	e8 cd ff ff ff       	call   c0019afe <SoundCard::~SoundCard()>
c0019b31:	83 c4 10             	add    esp,0x10
c0019b34:	83 ec 08             	sub    esp,0x8
c0019b37:	68 e8 01 00 00       	push   0x1e8
c0019b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b40:	e8 5b 0d ff ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c0019b45:	83 c4 10             	add    esp,0x10
c0019b48:	83 c4 0c             	add    esp,0xc
c0019b4b:	c3                   	ret    

c0019b4c <SoundCard::configureRates(int, int, int)>:
c0019b4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b50:	31 c0                	xor    eax,eax
c0019b52:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b59:	75 20                	jne    c0019b7b <SoundCard::configureRates(int, int, int)+0x2f>
c0019b5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b5f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b69:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b73:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b79:	b0 01                	mov    al,0x1
c0019b7b:	c3                   	ret    

c0019b7c <SoundCard::getSamples16(int, short*)>:
c0019b7c:	55                   	push   ebp
c0019b7d:	57                   	push   edi
c0019b7e:	31 ff                	xor    edi,edi
c0019b80:	56                   	push   esi
c0019b81:	53                   	push   ebx
c0019b82:	31 db                	xor    ebx,ebx
c0019b84:	83 ec 10             	sub    esp,0x10
c0019b87:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b8b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b8f:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b92:	50                   	push   eax
c0019b93:	6a 00                	push   0x0
c0019b95:	55                   	push   ebp
c0019b96:	e8 55 69 fe ff       	call   c00004f0 <memset>
c0019b9b:	83 c4 10             	add    esp,0x10
c0019b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ba2:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019ba9:	85 c0                	test   eax,eax
c0019bab:	74 1a                	je     c0019bc7 <SoundCard::getSamples16(int, short*)+0x4b>
c0019bad:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bb1:	75 14                	jne    c0019bc7 <SoundCard::getSamples16(int, short*)+0x4b>
c0019bb3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019bb7:	55                   	push   ebp
c0019bb8:	56                   	push   esi
c0019bb9:	50                   	push   eax
c0019bba:	e8 f1 02 00 00       	call   c0019eb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019bbf:	83 c4 10             	add    esp,0x10
c0019bc2:	39 c3                	cmp    ebx,eax
c0019bc4:	0f 4c d8             	cmovl  ebx,eax
c0019bc7:	47                   	inc    edi
c0019bc8:	83 ff 20             	cmp    edi,0x20
c0019bcb:	75 d1                	jne    c0019b9e <SoundCard::getSamples16(int, short*)+0x22>
c0019bcd:	83 c4 0c             	add    esp,0xc
c0019bd0:	89 d8                	mov    eax,ebx
c0019bd2:	5b                   	pop    ebx
c0019bd3:	5e                   	pop    esi
c0019bd4:	5f                   	pop    edi
c0019bd5:	5d                   	pop    ebp
c0019bd6:	c3                   	ret    
c0019bd7:	90                   	nop

c0019bd8 <SoundCard::getSamples32(int, int*)>:
c0019bd8:	55                   	push   ebp
c0019bd9:	57                   	push   edi
c0019bda:	31 ff                	xor    edi,edi
c0019bdc:	56                   	push   esi
c0019bdd:	31 f6                	xor    esi,esi
c0019bdf:	53                   	push   ebx
c0019be0:	83 ec 10             	sub    esp,0x10
c0019be3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019be7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019beb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019bef:	c1 e0 02             	shl    eax,0x2
c0019bf2:	50                   	push   eax
c0019bf3:	6a 00                	push   0x0
c0019bf5:	55                   	push   ebp
c0019bf6:	e8 f5 68 fe ff       	call   c00004f0 <memset>
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019c05:	85 c0                	test   eax,eax
c0019c07:	74 1a                	je     c0019c23 <SoundCard::getSamples32(int, int*)+0x4b>
c0019c09:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c0d:	75 14                	jne    c0019c23 <SoundCard::getSamples32(int, int*)+0x4b>
c0019c0f:	53                   	push   ebx
c0019c10:	55                   	push   ebp
c0019c11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c15:	50                   	push   eax
c0019c16:	e8 65 03 00 00       	call   c0019f80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019c1b:	83 c4 10             	add    esp,0x10
c0019c1e:	39 c6                	cmp    esi,eax
c0019c20:	0f 4c f0             	cmovl  esi,eax
c0019c23:	47                   	inc    edi
c0019c24:	83 ff 20             	cmp    edi,0x20
c0019c27:	75 d5                	jne    c0019bfe <SoundCard::getSamples32(int, int*)+0x26>
c0019c29:	85 f6                	test   esi,esi
c0019c2b:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019c32:	75 0f                	jne    c0019c43 <SoundCard::getSamples32(int, int*)+0x6b>
c0019c34:	85 c0                	test   eax,eax
c0019c36:	74 1b                	je     c0019c53 <SoundCard::getSamples32(int, int*)+0x7b>
c0019c38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c3a:	83 ec 0c             	sub    esp,0xc
c0019c3d:	53                   	push   ebx
c0019c3e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019c41:	eb 0d                	jmp    c0019c50 <SoundCard::getSamples32(int, int*)+0x78>
c0019c43:	85 c0                	test   eax,eax
c0019c45:	75 0c                	jne    c0019c53 <SoundCard::getSamples32(int, int*)+0x7b>
c0019c47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c49:	83 ec 0c             	sub    esp,0xc
c0019c4c:	53                   	push   ebx
c0019c4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019c50:	83 c4 10             	add    esp,0x10
c0019c53:	83 c4 0c             	add    esp,0xc
c0019c56:	89 f0                	mov    eax,esi
c0019c58:	5b                   	pop    ebx
c0019c59:	5e                   	pop    esi
c0019c5a:	5f                   	pop    edi
c0019c5b:	5d                   	pop    ebp
c0019c5c:	c3                   	ret    
c0019c5d:	90                   	nop

c0019c5e <SoundCard::addChannel(SoundPort*)>:
c0019c5e:	83 ec 0c             	sub    esp,0xc
c0019c61:	31 c0                	xor    eax,eax
c0019c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c67:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c6f:	74 1b                	je     c0019c8c <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c71:	40                   	inc    eax
c0019c72:	83 f8 20             	cmp    eax,0x20
c0019c75:	75 f0                	jne    c0019c67 <SoundCard::addChannel(SoundPort*)+0x9>
c0019c77:	83 ec 0c             	sub    esp,0xc
c0019c7a:	68 2d 19 02 c0       	push   0xc002192d
c0019c7f:	e8 e5 6b ff ff       	call   c0010869 <KePanic(char const*)>
c0019c84:	83 c4 10             	add    esp,0x10
c0019c87:	83 c8 ff             	or     eax,0xffffffff
c0019c8a:	eb 0b                	jmp    c0019c97 <SoundCard::addChannel(SoundPort*)+0x39>
c0019c8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c90:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c97:	83 c4 0c             	add    esp,0xc
c0019c9a:	c3                   	ret    
c0019c9b:	90                   	nop

c0019c9c <SoundCard::removeChannel(int)>:
c0019c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ca4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019caf:	c3                   	ret    

c0019cb0 <SoundPort::SoundPort(int, int, int, int)>:
c0019cb0:	83 ec 0c             	sub    esp,0xc
c0019cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019cce:	89 10                	mov    DWORD PTR [eax],edx
c0019cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ce3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019ce6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019ceb:	75 13                	jne    c0019d00 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cf3:	05 a0 0f 00 00       	add    eax,0xfa0
c0019cf8:	d1 e0                	shl    eax,1
c0019cfa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019cfe:	66 90                	xchg   ax,ax
c0019d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019d08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d0f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d1d:	c1 e0 02             	shl    eax,0x2
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	50                   	push   eax
c0019d24:	e8 a2 dd fe ff       	call   c0007acb <malloc>
c0019d29:	83 c4 10             	add    esp,0x10
c0019d2c:	89 c2                	mov    edx,eax
c0019d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019d35:	90                   	nop
c0019d36:	83 c4 0c             	add    esp,0xc
c0019d39:	c3                   	ret    
c0019d3a:	66 90                	xchg   ax,ax

c0019d3c <SoundPort::~SoundPort()>:
c0019d3c:	83 ec 0c             	sub    esp,0xc
c0019d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d46:	85 c0                	test   eax,eax
c0019d48:	74 1e                	je     c0019d68 <SoundPort::~SoundPort()+0x2c>
c0019d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d51:	83 ec 0c             	sub    esp,0xc
c0019d54:	50                   	push   eax
c0019d55:	e8 81 dd fe ff       	call   c0007adb <free>
c0019d5a:	83 c4 10             	add    esp,0x10
c0019d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d61:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d68:	90                   	nop
c0019d69:	83 c4 0c             	add    esp,0xc
c0019d6c:	c3                   	ret    
c0019d6d:	90                   	nop
c0019d6e:	66 90                	xchg   ax,ax

c0019d70 <SoundPort::unpause()>:
c0019d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d74:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d78:	c3                   	ret    
c0019d79:	90                   	nop
c0019d7a:	66 90                	xchg   ax,ax

c0019d7c <SoundPort::pause()>:
c0019d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d80:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d84:	c3                   	ret    
c0019d85:	90                   	nop
c0019d86:	66 90                	xchg   ax,ax

c0019d88 <SoundPort::getBufferUsed()>:
c0019d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d8f:	c3                   	ret    

c0019d90 <SoundPort::getBufferSize()>:
c0019d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d97:	c3                   	ret    

c0019d98 <SoundPort::buffer16(short*, int)>:
c0019d98:	55                   	push   ebp
c0019d99:	57                   	push   edi
c0019d9a:	56                   	push   esi
c0019d9b:	53                   	push   ebx
c0019d9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019da0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019da4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019da7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019daa:	74 68                	je     c0019e14 <SoundPort::buffer16(short*, int)+0x7c>
c0019dac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019db0:	85 c9                	test   ecx,ecx
c0019db2:	7e 60                	jle    c0019e14 <SoundPort::buffer16(short*, int)+0x7c>
c0019db4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019db8:	8d 70 01             	lea    esi,[eax+0x1]
c0019dbb:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019dbe:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019dc1:	c1 e1 0f             	shl    ecx,0xf
c0019dc4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019dc7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dcd:	74 4d                	je     c0019e1c <SoundPort::buffer16(short*, int)+0x84>
c0019dcf:	31 f6                	xor    esi,esi
c0019dd1:	eb 21                	jmp    c0019df4 <SoundPort::buffer16(short*, int)+0x5c>
c0019dd3:	90                   	nop
c0019dd4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019dd9:	8d 79 01             	lea    edi,[ecx+0x1]
c0019ddc:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019ddf:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019de2:	c1 e3 0f             	shl    ebx,0xf
c0019de5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019de8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019deb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dee:	74 1c                	je     c0019e0c <SoundPort::buffer16(short*, int)+0x74>
c0019df0:	89 c6                	mov    esi,eax
c0019df2:	66 90                	xchg   ax,ax
c0019df4:	8d 46 01             	lea    eax,[esi+0x1]
c0019df7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019dfb:	75 d7                	jne    c0019dd4 <SoundPort::buffer16(short*, int)+0x3c>
c0019dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e01:	8d 76 00             	lea    esi,[esi+0x0]
c0019e04:	5b                   	pop    ebx
c0019e05:	5e                   	pop    esi
c0019e06:	5f                   	pop    edi
c0019e07:	5d                   	pop    ebp
c0019e08:	c3                   	ret    
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	5b                   	pop    ebx
c0019e0d:	8d 46 02             	lea    eax,[esi+0x2]
c0019e10:	5e                   	pop    esi
c0019e11:	5f                   	pop    edi
c0019e12:	5d                   	pop    ebp
c0019e13:	c3                   	ret    
c0019e14:	5b                   	pop    ebx
c0019e15:	31 c0                	xor    eax,eax
c0019e17:	5e                   	pop    esi
c0019e18:	5f                   	pop    edi
c0019e19:	5d                   	pop    ebp
c0019e1a:	c3                   	ret    
c0019e1b:	90                   	nop
c0019e1c:	b8 01 00 00 00       	mov    eax,0x1
c0019e21:	eb e1                	jmp    c0019e04 <SoundPort::buffer16(short*, int)+0x6c>
c0019e23:	90                   	nop

c0019e24 <SoundPort::buffer32(int*, int)>:
c0019e24:	55                   	push   ebp
c0019e25:	57                   	push   edi
c0019e26:	56                   	push   esi
c0019e27:	53                   	push   ebx
c0019e28:	83 ec 04             	sub    esp,0x4
c0019e2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e3a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e40:	74 5a                	je     c0019e9c <SoundPort::buffer32(int*, int)+0x78>
c0019e42:	85 c0                	test   eax,eax
c0019e44:	7e 56                	jle    c0019e9c <SoundPort::buffer32(int*, int)+0x78>
c0019e46:	8d 71 01             	lea    esi,[ecx+0x1]
c0019e49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e4c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e4f:	8b 37                	mov    esi,DWORD PTR [edi]
c0019e51:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e54:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e57:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e5a:	74 4c                	je     c0019ea8 <SoundPort::buffer32(int*, int)+0x84>
c0019e5c:	31 f6                	xor    esi,esi
c0019e5e:	eb 1c                	jmp    c0019e7c <SoundPort::buffer32(int*, int)+0x58>
c0019e60:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e63:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e66:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e69:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e6c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e70:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e73:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e76:	74 18                	je     c0019e90 <SoundPort::buffer32(int*, int)+0x6c>
c0019e78:	89 de                	mov    esi,ebx
c0019e7a:	66 90                	xchg   ax,ax
c0019e7c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e7f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e82:	75 dc                	jne    c0019e60 <SoundPort::buffer32(int*, int)+0x3c>
c0019e84:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e87:	90                   	nop
c0019e88:	83 c4 04             	add    esp,0x4
c0019e8b:	5b                   	pop    ebx
c0019e8c:	5e                   	pop    esi
c0019e8d:	5f                   	pop    edi
c0019e8e:	5d                   	pop    ebp
c0019e8f:	c3                   	ret    
c0019e90:	8d 46 02             	lea    eax,[esi+0x2]
c0019e93:	83 c4 04             	add    esp,0x4
c0019e96:	5b                   	pop    ebx
c0019e97:	5e                   	pop    esi
c0019e98:	5f                   	pop    edi
c0019e99:	5d                   	pop    ebp
c0019e9a:	c3                   	ret    
c0019e9b:	90                   	nop
c0019e9c:	83 c4 04             	add    esp,0x4
c0019e9f:	31 c0                	xor    eax,eax
c0019ea1:	5b                   	pop    ebx
c0019ea2:	5e                   	pop    esi
c0019ea3:	5f                   	pop    edi
c0019ea4:	5d                   	pop    ebp
c0019ea5:	c3                   	ret    
c0019ea6:	66 90                	xchg   ax,ax
c0019ea8:	b8 01 00 00 00       	mov    eax,0x1
c0019ead:	eb d9                	jmp    c0019e88 <SoundPort::buffer32(int*, int)+0x64>
c0019eaf:	90                   	nop

c0019eb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019eb0:	55                   	push   ebp
c0019eb1:	57                   	push   edi
c0019eb2:	56                   	push   esi
c0019eb3:	53                   	push   ebx
c0019eb4:	83 ec 0c             	sub    esp,0xc
c0019eb7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ebb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019ebf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019ec3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ec7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019ecd:	39 03                	cmp    DWORD PTR [ebx],eax
c0019ecf:	74 13                	je     c0019ee4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019ed1:	83 ec 0c             	sub    esp,0xc
c0019ed4:	68 80 19 02 c0       	push   0xc0021980
c0019ed9:	e8 8b 69 ff ff       	call   c0010869 <KePanic(char const*)>
c0019ede:	83 c4 10             	add    esp,0x10
c0019ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019eea:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019eed:	74 11                	je     c0019f00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019eef:	83 ec 0c             	sub    esp,0xc
c0019ef2:	68 bf 19 02 c0       	push   0xc00219bf
c0019ef7:	e8 6d 69 ff ff       	call   c0010869 <KePanic(char const*)>
c0019efc:	83 c4 10             	add    esp,0x10
c0019eff:	90                   	nop
c0019f00:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019f06:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f09:	74 11                	je     c0019f1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019f0b:	83 ec 0c             	sub    esp,0xc
c0019f0e:	68 bf 19 02 c0       	push   0xc00219bf
c0019f13:	e8 51 69 ff ff       	call   c0010869 <KePanic(char const*)>
c0019f18:	83 c4 10             	add    esp,0x10
c0019f1b:	90                   	nop
c0019f1c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019f1f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019f23:	85 f6                	test   esi,esi
c0019f25:	7e 2d                	jle    c0019f54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019f27:	31 c0                	xor    eax,eax
c0019f29:	8d 76 00             	lea    esi,[esi+0x0]
c0019f2c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f2f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019f32:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019f38:	85 c9                	test   ecx,ecx
c0019f3a:	0f 49 d1             	cmovns edx,ecx
c0019f3d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019f41:	c1 fa 0f             	sar    edx,0xf
c0019f44:	01 d1                	add    ecx,edx
c0019f46:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019f4a:	83 c0 01             	add    eax,0x1
c0019f4d:	39 f0                	cmp    eax,esi
c0019f4f:	75 db                	jne    c0019f2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f57:	83 ec 04             	sub    esp,0x4
c0019f5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f5d:	29 f0                	sub    eax,esi
c0019f5f:	c1 e0 02             	shl    eax,0x2
c0019f62:	50                   	push   eax
c0019f63:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f66:	50                   	push   eax
c0019f67:	52                   	push   edx
c0019f68:	e8 63 64 fe ff       	call   c00003d0 <memmove>
c0019f6d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f70:	29 f0                	sub    eax,esi
c0019f72:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f75:	83 c4 1c             	add    esp,0x1c
c0019f78:	89 f0                	mov    eax,esi
c0019f7a:	5b                   	pop    ebx
c0019f7b:	5e                   	pop    esi
c0019f7c:	5f                   	pop    edi
c0019f7d:	5d                   	pop    ebp
c0019f7e:	c3                   	ret    
c0019f7f:	90                   	nop

c0019f80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f80:	55                   	push   ebp
c0019f81:	57                   	push   edi
c0019f82:	56                   	push   esi
c0019f83:	53                   	push   ebx
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f8b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f8f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019f93:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f97:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019f9d:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f9f:	74 13                	je     c0019fb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019fa1:	83 ec 0c             	sub    esp,0xc
c0019fa4:	68 a0 19 02 c0       	push   0xc00219a0
c0019fa9:	e8 bb 68 ff ff       	call   c0010869 <KePanic(char const*)>
c0019fae:	83 c4 10             	add    esp,0x10
c0019fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019fba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019fbd:	74 11                	je     c0019fd0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019fbf:	83 ec 0c             	sub    esp,0xc
c0019fc2:	68 db 19 02 c0       	push   0xc00219db
c0019fc7:	e8 9d 68 ff ff       	call   c0010869 <KePanic(char const*)>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	90                   	nop
c0019fd0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019fd6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019fd9:	74 11                	je     c0019fec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019fdb:	83 ec 0c             	sub    esp,0xc
c0019fde:	68 db 19 02 c0       	push   0xc00219db
c0019fe3:	e8 81 68 ff ff       	call   c0010869 <KePanic(char const*)>
c0019fe8:	83 c4 10             	add    esp,0x10
c0019feb:	90                   	nop
c0019fec:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019fef:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019ff3:	85 ff                	test   edi,edi
c0019ff5:	7e 21                	jle    c001a018 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019ff7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019ffe:	31 c0                	xor    eax,eax
c001a000:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a003:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001a006:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a009:	01 d5                	add    ebp,edx
c001a00b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001a00e:	83 c0 04             	add    eax,0x4
c001a011:	39 c1                	cmp    ecx,eax
c001a013:	75 eb                	jne    c001a000 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a01b:	83 ec 04             	sub    esp,0x4
c001a01e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a021:	29 f8                	sub    eax,edi
c001a023:	c1 e0 02             	shl    eax,0x2
c001a026:	50                   	push   eax
c001a027:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a02a:	50                   	push   eax
c001a02b:	52                   	push   edx
c001a02c:	e8 9f 63 fe ff       	call   c00003d0 <memmove>
c001a031:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a034:	29 f8                	sub    eax,edi
c001a036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a039:	83 c4 1c             	add    esp,0x1c
c001a03c:	89 f8                	mov    eax,edi
c001a03e:	5b                   	pop    ebx
c001a03f:	5e                   	pop    esi
c001a040:	5f                   	pop    edi
c001a041:	5d                   	pop    ebp
c001a042:	c3                   	ret    
c001a043:	90                   	nop

c001a044 <PCI::open(int, int, void*)>:
c001a044:	83 ec 18             	sub    esp,0x18
c001a047:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a04b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a04f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a055:	8b 10                	mov    edx,DWORD PTR [eax]
c001a057:	50                   	push   eax
c001a058:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a05b:	31 c0                	xor    eax,eax
c001a05d:	83 c4 1c             	add    esp,0x1c
c001a060:	c3                   	ret    
c001a061:	90                   	nop

c001a062 <PCI::close(int, int, void*)>:
c001a062:	31 c0                	xor    eax,eax
c001a064:	c3                   	ret    
c001a065:	90                   	nop

c001a066 <PCI::PCI()>:
c001a066:	83 ec 0c             	sub    esp,0xc
c001a069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06d:	83 ec 08             	sub    esp,0x8
c001a070:	68 f7 19 02 c0       	push   0xc00219f7
c001a075:	50                   	push   eax
c001a076:	e8 e1 16 ff ff       	call   c000b75c <Bus::Bus(char const*)>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	ba a0 1a 02 c0       	mov    edx,0xc0021aa0
c001a083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a087:	89 10                	mov    DWORD PTR [eax],edx
c001a089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a09b:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0aa:	0f b6 d0             	movzx  edx,al
c001a0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0c2:	0f b6 d0             	movzx  edx,al
c001a0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0c9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0d8:	8d 50 01             	lea    edx,[eax+0x1]
c001a0db:	88 d1                	mov    cl,dl
c001a0dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0e1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a0e7:	0f b6 d0             	movzx  edx,al
c001a0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a0f2:	83 c9 c0             	or     ecx,0xffffffc0
c001a0f5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a0f9:	90                   	nop
c001a0fa:	83 c4 0c             	add    esp,0xc
c001a0fd:	c3                   	ret    

c001a0fe <PCI::readBAR8(unsigned int, int)>:
c001a0fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a106:	f6 c2 01             	test   dl,0x1
c001a109:	74 07                	je     c001a112 <PCI::readBAR8(unsigned int, int)+0x14>
c001a10b:	83 e2 fc             	and    edx,0xfffffffc
c001a10e:	01 c2                	add    edx,eax
c001a110:	ec                   	in     al,dx
c001a111:	c3                   	ret    
c001a112:	83 e2 f0             	and    edx,0xfffffff0
c001a115:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a118:	c3                   	ret    
c001a119:	90                   	nop

c001a11a <PCI::readBAR16(unsigned int, int)>:
c001a11a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a11e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a122:	f6 c2 01             	test   dl,0x1
c001a125:	74 08                	je     c001a12f <PCI::readBAR16(unsigned int, int)+0x15>
c001a127:	83 e2 fc             	and    edx,0xfffffffc
c001a12a:	01 c2                	add    edx,eax
c001a12c:	66 ed                	in     ax,dx
c001a12e:	c3                   	ret    
c001a12f:	83 e2 f0             	and    edx,0xfffffff0
c001a132:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a136:	c3                   	ret    
c001a137:	90                   	nop

c001a138 <PCI::readBAR32(unsigned int, int)>:
c001a138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a13c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a140:	f6 c2 01             	test   dl,0x1
c001a143:	74 07                	je     c001a14c <PCI::readBAR32(unsigned int, int)+0x14>
c001a145:	83 e2 fc             	and    edx,0xfffffffc
c001a148:	01 c2                	add    edx,eax
c001a14a:	ed                   	in     eax,dx
c001a14b:	c3                   	ret    
c001a14c:	83 e2 f0             	and    edx,0xfffffff0
c001a14f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a152:	c3                   	ret    
c001a153:	90                   	nop

c001a154 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a154:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a15c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a160:	f6 c2 01             	test   dl,0x1
c001a163:	74 07                	je     c001a16c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a165:	83 e2 fc             	and    edx,0xfffffffc
c001a168:	01 ca                	add    edx,ecx
c001a16a:	ee                   	out    dx,al
c001a16b:	c3                   	ret    
c001a16c:	83 e2 f0             	and    edx,0xfffffff0
c001a16f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a172:	c3                   	ret    
c001a173:	90                   	nop

c001a174 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a174:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a17c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a180:	f6 c2 01             	test   dl,0x1
c001a183:	74 08                	je     c001a18d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a185:	83 e2 fc             	and    edx,0xfffffffc
c001a188:	01 ca                	add    edx,ecx
c001a18a:	66 ef                	out    dx,ax
c001a18c:	c3                   	ret    
c001a18d:	83 e2 f0             	and    edx,0xfffffff0
c001a190:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a194:	c3                   	ret    
c001a195:	90                   	nop

c001a196 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a19a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a19e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1a2:	f6 c2 01             	test   dl,0x1
c001a1a5:	74 07                	je     c001a1ae <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a1a7:	83 e2 fc             	and    edx,0xfffffffc
c001a1aa:	01 ca                	add    edx,ecx
c001a1ac:	ef                   	out    dx,eax
c001a1ad:	c3                   	ret    
c001a1ae:	83 e2 f0             	and    edx,0xfffffff0
c001a1b1:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a1b4:	c3                   	ret    
c001a1b5:	90                   	nop

c001a1b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1b6:	55                   	push   ebp
c001a1b7:	57                   	push   edi
c001a1b8:	56                   	push   esi
c001a1b9:	53                   	push   ebx
c001a1ba:	83 ec 0c             	sub    esp,0xc
c001a1bd:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a1c2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a1c6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a1ca:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a1ce:	83 fe 07             	cmp    esi,0x7
c001a1d1:	76 10                	jbe    c001a1e3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a1d3:	83 ec 0c             	sub    esp,0xc
c001a1d6:	68 ff 19 02 c0       	push   0xc00219ff
c001a1db:	e8 89 66 ff ff       	call   c0010869 <KePanic(char const*)>
c001a1e0:	83 c4 10             	add    esp,0x10
c001a1e3:	0f b6 db             	movzx  ebx,bl
c001a1e6:	83 fb 0f             	cmp    ebx,0xf
c001a1e9:	76 10                	jbe    c001a1fb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a1eb:	83 ec 0c             	sub    esp,0xc
c001a1ee:	68 2f 1a 02 c0       	push   0xc0021a2f
c001a1f3:	e8 71 66 ff ff       	call   c0010869 <KePanic(char const*)>
c001a1f8:	83 c4 10             	add    esp,0x10
c001a1fb:	8d 04 36             	lea    eax,[esi+esi*1]
c001a1fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a203:	83 c8 f0             	or     eax,0xfffffff0
c001a206:	ee                   	out    dx,al
c001a207:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a20c:	89 e8                	mov    eax,ebp
c001a20e:	ee                   	out    dx,al
c001a20f:	89 f9                	mov    ecx,edi
c001a211:	89 d8                	mov    eax,ebx
c001a213:	0f b6 d9             	movzx  ebx,cl
c001a216:	83 c4 0c             	add    esp,0xc
c001a219:	c1 e0 08             	shl    eax,0x8
c001a21c:	83 e3 fc             	and    ebx,0xfffffffc
c001a21f:	09 d8                	or     eax,ebx
c001a221:	5b                   	pop    ebx
c001a222:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a227:	5e                   	pop    esi
c001a228:	5f                   	pop    edi
c001a229:	5d                   	pop    ebp
c001a22a:	c3                   	ret    
c001a22b:	90                   	nop

c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a22c:	57                   	push   edi
c001a22d:	56                   	push   esi
c001a22e:	53                   	push   ebx
c001a22f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a233:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a237:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a23b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a23f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a245:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a249:	83 ff 01             	cmp    edi,0x1
c001a24c:	75 3f                	jne    c001a28d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a24e:	89 de                	mov    esi,ebx
c001a250:	0f b6 c0             	movzx  eax,al
c001a253:	c1 e0 10             	shl    eax,0x10
c001a256:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a25c:	0f b6 c9             	movzx  ecx,cl
c001a25f:	09 f0                	or     eax,esi
c001a261:	c1 e1 08             	shl    ecx,0x8
c001a264:	0f b6 d2             	movzx  edx,dl
c001a267:	c1 e2 0b             	shl    edx,0xb
c001a26a:	09 c8                	or     eax,ecx
c001a26c:	09 d0                	or     eax,edx
c001a26e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a273:	0d 00 00 00 80       	or     eax,0x80000000
c001a278:	ef                   	out    dx,eax
c001a279:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a27e:	ed                   	in     eax,dx
c001a27f:	83 e3 02             	and    ebx,0x2
c001a282:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a289:	d3 e8                	shr    eax,cl
c001a28b:	eb 44                	jmp    c001a2d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a28d:	83 ff 02             	cmp    edi,0x2
c001a290:	75 2d                	jne    c001a2bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a292:	83 ec 0c             	sub    esp,0xc
c001a295:	0f b6 fb             	movzx  edi,bl
c001a298:	57                   	push   edi
c001a299:	0f b6 c9             	movzx  ecx,cl
c001a29c:	51                   	push   ecx
c001a29d:	0f b6 d2             	movzx  edx,dl
c001a2a0:	52                   	push   edx
c001a2a1:	0f b6 c0             	movzx  eax,al
c001a2a4:	50                   	push   eax
c001a2a5:	56                   	push   esi
c001a2a6:	e8 0b ff ff ff       	call   c001a1b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2ab:	89 c2                	mov    edx,eax
c001a2ad:	ed                   	in     eax,dx
c001a2ae:	83 e3 02             	and    ebx,0x2
c001a2b1:	83 c4 20             	add    esp,0x20
c001a2b4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a2bb:	d3 e8                	shr    eax,cl
c001a2bd:	eb 12                	jmp    c001a2d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2bf:	83 ec 0c             	sub    esp,0xc
c001a2c2:	68 5f 1a 02 c0       	push   0xc0021a5f
c001a2c7:	e8 9d 65 ff ff       	call   c0010869 <KePanic(char const*)>
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	31 c0                	xor    eax,eax
c001a2d1:	5b                   	pop    ebx
c001a2d2:	5e                   	pop    esi
c001a2d3:	5f                   	pop    edi
c001a2d4:	c3                   	ret    
c001a2d5:	90                   	nop

c001a2d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a2d6:	83 ec 18             	sub    esp,0x18
c001a2d9:	6a 00                	push   0x0
c001a2db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2e0:	50                   	push   eax
c001a2e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2e6:	50                   	push   eax
c001a2e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ec:	50                   	push   eax
c001a2ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2f1:	e8 36 ff ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2f6:	83 c4 2c             	add    esp,0x2c
c001a2f9:	c3                   	ret    

c001a2fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a2fa:	83 ec 18             	sub    esp,0x18
c001a2fd:	6a 0e                	push   0xe
c001a2ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a304:	50                   	push   eax
c001a305:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a30a:	50                   	push   eax
c001a30b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a310:	50                   	push   eax
c001a311:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a315:	e8 12 ff ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a31a:	83 c4 2c             	add    esp,0x2c
c001a31d:	0f b6 c0             	movzx  eax,al
c001a320:	c3                   	ret    
c001a321:	90                   	nop

c001a322 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a322:	55                   	push   ebp
c001a323:	57                   	push   edi
c001a324:	56                   	push   esi
c001a325:	53                   	push   ebx
c001a326:	83 ec 18             	sub    esp,0x18
c001a329:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a32e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a333:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a338:	6a 0a                	push   0xa
c001a33a:	56                   	push   esi
c001a33b:	55                   	push   ebp
c001a33c:	57                   	push   edi
c001a33d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a341:	e8 e6 fe ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a346:	83 c4 14             	add    esp,0x14
c001a349:	6a 0a                	push   0xa
c001a34b:	56                   	push   esi
c001a34c:	55                   	push   ebp
c001a34d:	57                   	push   edi
c001a34e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a352:	89 c3                	mov    ebx,eax
c001a354:	0f b6 db             	movzx  ebx,bl
c001a357:	e8 d0 fe ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a35c:	83 c4 2c             	add    esp,0x2c
c001a35f:	25 00 ff 00 00       	and    eax,0xff00
c001a364:	09 d8                	or     eax,ebx
c001a366:	5b                   	pop    ebx
c001a367:	5e                   	pop    esi
c001a368:	5f                   	pop    edi
c001a369:	5d                   	pop    ebp
c001a36a:	c3                   	ret    
c001a36b:	90                   	nop

c001a36c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a36c:	83 ec 18             	sub    esp,0x18
c001a36f:	6a 08                	push   0x8
c001a371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a376:	50                   	push   eax
c001a377:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a37c:	50                   	push   eax
c001a37d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a382:	50                   	push   eax
c001a383:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a387:	e8 a0 fe ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a38c:	83 c4 2c             	add    esp,0x2c
c001a38f:	0f b6 c4             	movzx  eax,ah
c001a392:	c3                   	ret    
c001a393:	90                   	nop

c001a394 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a394:	83 ec 18             	sub    esp,0x18
c001a397:	6a 08                	push   0x8
c001a399:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a39e:	50                   	push   eax
c001a39f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3a4:	50                   	push   eax
c001a3a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3aa:	50                   	push   eax
c001a3ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3af:	e8 78 fe ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3b4:	83 c4 2c             	add    esp,0x2c
c001a3b7:	c3                   	ret    

c001a3b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a3b8:	83 ec 18             	sub    esp,0x18
c001a3bb:	6a 3c                	push   0x3c
c001a3bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3c2:	50                   	push   eax
c001a3c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3c8:	50                   	push   eax
c001a3c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3ce:	50                   	push   eax
c001a3cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d3:	e8 54 fe ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3d8:	83 c4 2c             	add    esp,0x2c
c001a3db:	c3                   	ret    

c001a3dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a3dc:	83 ec 18             	sub    esp,0x18
c001a3df:	6a 18                	push   0x18
c001a3e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3e6:	50                   	push   eax
c001a3e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3ec:	50                   	push   eax
c001a3ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3f2:	50                   	push   eax
c001a3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f7:	e8 30 fe ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3fc:	83 c4 2c             	add    esp,0x2c
c001a3ff:	0f b6 c4             	movzx  eax,ah
c001a402:	c3                   	ret    
c001a403:	90                   	nop

c001a404 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a404:	55                   	push   ebp
c001a405:	57                   	push   edi
c001a406:	56                   	push   esi
c001a407:	53                   	push   ebx
c001a408:	83 ec 28             	sub    esp,0x28
c001a40b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a40f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a414:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a419:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a41e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a425:	8d 43 12             	lea    eax,[ebx+0x12]
c001a428:	83 c3 10             	add    ebx,0x10
c001a42b:	0f b6 c0             	movzx  eax,al
c001a42e:	0f b6 db             	movzx  ebx,bl
c001a431:	50                   	push   eax
c001a432:	51                   	push   ecx
c001a433:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a437:	57                   	push   edi
c001a438:	55                   	push   ebp
c001a439:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a43d:	e8 ea fd ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a442:	83 c4 14             	add    esp,0x14
c001a445:	53                   	push   ebx
c001a446:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a44a:	51                   	push   ecx
c001a44b:	89 c6                	mov    esi,eax
c001a44d:	57                   	push   edi
c001a44e:	55                   	push   ebp
c001a44f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a453:	c1 e6 10             	shl    esi,0x10
c001a456:	e8 d1 fd ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a45b:	83 c4 3c             	add    esp,0x3c
c001a45e:	5b                   	pop    ebx
c001a45f:	0f b7 c0             	movzx  eax,ax
c001a462:	09 f0                	or     eax,esi
c001a464:	5e                   	pop    esi
c001a465:	5f                   	pop    edi
c001a466:	5d                   	pop    ebp
c001a467:	c3                   	ret    

c001a468 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a468:	55                   	push   ebp
c001a469:	57                   	push   edi
c001a46a:	56                   	push   esi
c001a46b:	53                   	push   ebx
c001a46c:	83 ec 0c             	sub    esp,0xc
c001a46f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a473:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a477:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a47b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a47f:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a485:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a489:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a48d:	83 f9 01             	cmp    ecx,0x1
c001a490:	75 5d                	jne    c001a4ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a492:	0f b6 c8             	movzx  ecx,al
c001a495:	89 f0                	mov    eax,esi
c001a497:	25 fc 00 00 00       	and    eax,0xfc
c001a49c:	0f b6 d2             	movzx  edx,dl
c001a49f:	c1 e1 10             	shl    ecx,0x10
c001a4a2:	c1 e2 0b             	shl    edx,0xb
c001a4a5:	09 c1                	or     ecx,eax
c001a4a7:	89 f8                	mov    eax,edi
c001a4a9:	0f b6 f8             	movzx  edi,al
c001a4ac:	c1 e7 08             	shl    edi,0x8
c001a4af:	09 f9                	or     ecx,edi
c001a4b1:	09 d1                	or     ecx,edx
c001a4b3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a4b8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a4be:	89 c8                	mov    eax,ecx
c001a4c0:	ef                   	out    dx,eax
c001a4c1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4c6:	ed                   	in     eax,dx
c001a4c7:	83 e6 02             	and    esi,0x2
c001a4ca:	0f b7 db             	movzx  ebx,bx
c001a4cd:	74 0a                	je     c001a4d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a4cf:	c1 e3 10             	shl    ebx,0x10
c001a4d2:	0f b7 d0             	movzx  edx,ax
c001a4d5:	09 d3                	or     ebx,edx
c001a4d7:	eb 05                	jmp    c001a4de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a4d9:	66 31 c0             	xor    ax,ax
c001a4dc:	09 c3                	or     ebx,eax
c001a4de:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a4e3:	89 c8                	mov    eax,ecx
c001a4e5:	ef                   	out    dx,eax
c001a4e6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4eb:	89 d8                	mov    eax,ebx
c001a4ed:	eb 41                	jmp    c001a530 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a4ef:	83 f9 02             	cmp    ecx,0x2
c001a4f2:	75 45                	jne    c001a539 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a4f4:	89 f1                	mov    ecx,esi
c001a4f6:	83 ec 0c             	sub    esp,0xc
c001a4f9:	0f b6 f1             	movzx  esi,cl
c001a4fc:	89 f9                	mov    ecx,edi
c001a4fe:	56                   	push   esi
c001a4ff:	0f b6 f9             	movzx  edi,cl
c001a502:	57                   	push   edi
c001a503:	0f b6 d2             	movzx  edx,dl
c001a506:	52                   	push   edx
c001a507:	0f b6 c0             	movzx  eax,al
c001a50a:	50                   	push   eax
c001a50b:	55                   	push   ebp
c001a50c:	e8 a5 fc ff ff       	call   c001a1b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a511:	89 c2                	mov    edx,eax
c001a513:	ed                   	in     eax,dx
c001a514:	83 c4 20             	add    esp,0x20
c001a517:	f6 c2 02             	test   dl,0x2
c001a51a:	0f b7 db             	movzx  ebx,bx
c001a51d:	74 0c                	je     c001a52b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a51f:	0f b7 c8             	movzx  ecx,ax
c001a522:	89 d8                	mov    eax,ebx
c001a524:	c1 e0 10             	shl    eax,0x10
c001a527:	09 c8                	or     eax,ecx
c001a529:	eb 05                	jmp    c001a530 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a52b:	66 31 c0             	xor    ax,ax
c001a52e:	09 d8                	or     eax,ebx
c001a530:	ef                   	out    dx,eax
c001a531:	83 c4 0c             	add    esp,0xc
c001a534:	5b                   	pop    ebx
c001a535:	5e                   	pop    esi
c001a536:	5f                   	pop    edi
c001a537:	5d                   	pop    ebp
c001a538:	c3                   	ret    
c001a539:	c7 44 24 20 5f 1a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021a5f
c001a541:	83 c4 0c             	add    esp,0xc
c001a544:	5b                   	pop    ebx
c001a545:	5e                   	pop    esi
c001a546:	5f                   	pop    edi
c001a547:	5d                   	pop    ebp
c001a548:	e9 1c 63 ff ff       	jmp    c0010869 <KePanic(char const*)>
c001a54d:	90                   	nop

c001a54e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a54e:	55                   	push   ebp
c001a54f:	57                   	push   edi
c001a550:	56                   	push   esi
c001a551:	53                   	push   ebx
c001a552:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a558:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a55f:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a566:	0f 85 bd 00 00 00    	jne    c001a629 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a56c:	83 ec 0c             	sub    esp,0xc
c001a56f:	68 14 01 00 00       	push   0x114
c001a574:	e8 52 d5 fe ff       	call   c0007acb <malloc>
c001a579:	83 c4 0c             	add    esp,0xc
c001a57c:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a582:	68 65 1a 02 c0       	push   0xc0021a65
c001a587:	50                   	push   eax
c001a588:	89 c3                	mov    ebx,eax
c001a58a:	e8 b7 09 ff ff       	call   c000af46 <File::File(char const*, Process*)>
c001a58f:	83 c4 10             	add    esp,0x10
c001a592:	85 db                	test   ebx,ebx
c001a594:	0f 84 6b 02 00 00    	je     c001a805 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a59a:	57                   	push   edi
c001a59b:	57                   	push   edi
c001a59c:	6a 01                	push   0x1
c001a59e:	53                   	push   ebx
c001a59f:	e8 5e 0a ff ff       	call   c000b002 <File::open(FileOpenMode)>
c001a5a4:	83 c4 10             	add    esp,0x10
c001a5a7:	85 c0                	test   eax,eax
c001a5a9:	0f 85 56 02 00 00    	jne    c001a805 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5af:	52                   	push   edx
c001a5b0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a5b4:	50                   	push   eax
c001a5b5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a5b9:	50                   	push   eax
c001a5ba:	53                   	push   ebx
c001a5bb:	e8 ee 0c ff ff       	call   c000b2ae <File::stat(unsigned long long*, bool*)>
c001a5c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5c4:	40                   	inc    eax
c001a5c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5c8:	e8 fe d4 fe ff       	call   c0007acb <malloc>
c001a5cd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5d1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a5d5:	59                   	pop    ecx
c001a5d6:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a5db:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a5dd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a5e1:	51                   	push   ecx
c001a5e2:	50                   	push   eax
c001a5e3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5eb:	53                   	push   ebx
c001a5ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a5ef:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a5f3:	83 c4 20             	add    esp,0x20
c001a5f6:	89 c8                	mov    eax,ecx
c001a5f8:	99                   	cdq    
c001a5f9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a5fd:	0f 85 02 02 00 00    	jne    c001a805 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a603:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a607:	0f 85 f8 01 00 00    	jne    c001a805 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a60d:	83 ec 0c             	sub    esp,0xc
c001a610:	53                   	push   ebx
c001a611:	e8 4a 0a ff ff       	call   c000b060 <File::close()>
c001a616:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a624:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a629:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a631:	31 c9                	xor    ecx,ecx
c001a633:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a63a:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a640:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a647:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a64d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a652:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a65a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a65f:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a667:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a66b:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a673:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a677:	39 cd                	cmp    ebp,ecx
c001a679:	0f 8e 86 01 00 00    	jle    c001a805 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a67f:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a682:	d4 40                	aam    0x40
c001a684:	d5 39                	aad    0x39
c001a686:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a68a:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a68e:	d4 40                	aam    0x40
c001a690:	d5 39                	aad    0x39
c001a692:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a696:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a69a:	d4 40                	aam    0x40
c001a69c:	d5 39                	aad    0x39
c001a69e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a6a2:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a6a6:	d4 40                	aam    0x40
c001a6a8:	d5 39                	aad    0x39
c001a6aa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a6ae:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a6b2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a6b6:	3c 56                	cmp    al,0x56
c001a6b8:	74 47                	je     c001a701 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a6ba:	d4 40                	aam    0x40
c001a6bc:	d5 39                	aad    0x39
c001a6be:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a6c1:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a6c5:	0f b6 db             	movzx  ebx,bl
c001a6c8:	c1 e3 04             	shl    ebx,0x4
c001a6cb:	d4 40                	aam    0x40
c001a6cd:	d5 39                	aad    0x39
c001a6cf:	83 e8 30             	sub    eax,0x30
c001a6d2:	0f b6 c0             	movzx  eax,al
c001a6d5:	09 c3                	or     ebx,eax
c001a6d7:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a6db:	c1 e3 04             	shl    ebx,0x4
c001a6de:	d4 40                	aam    0x40
c001a6e0:	d5 39                	aad    0x39
c001a6e2:	83 e8 30             	sub    eax,0x30
c001a6e5:	0f b6 c0             	movzx  eax,al
c001a6e8:	09 c3                	or     ebx,eax
c001a6ea:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a6ee:	c1 e3 04             	shl    ebx,0x4
c001a6f1:	d4 40                	aam    0x40
c001a6f3:	d5 39                	aad    0x39
c001a6f5:	83 e8 30             	sub    eax,0x30
c001a6f8:	0f b6 c0             	movzx  eax,al
c001a6fb:	09 c3                	or     ebx,eax
c001a6fd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a701:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a705:	80 fb 58             	cmp    bl,0x58
c001a708:	74 49                	je     c001a753 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a70a:	88 d8                	mov    al,bl
c001a70c:	d4 40                	aam    0x40
c001a70e:	d5 39                	aad    0x39
c001a710:	83 e8 30             	sub    eax,0x30
c001a713:	0f b6 f8             	movzx  edi,al
c001a716:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a71a:	c1 e7 04             	shl    edi,0x4
c001a71d:	d4 40                	aam    0x40
c001a71f:	d5 39                	aad    0x39
c001a721:	83 e8 30             	sub    eax,0x30
c001a724:	0f b6 c0             	movzx  eax,al
c001a727:	09 c7                	or     edi,eax
c001a729:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a72d:	c1 e7 04             	shl    edi,0x4
c001a730:	d4 40                	aam    0x40
c001a732:	d5 39                	aad    0x39
c001a734:	83 e8 30             	sub    eax,0x30
c001a737:	0f b6 c0             	movzx  eax,al
c001a73a:	09 c7                	or     edi,eax
c001a73c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a740:	c1 e7 04             	shl    edi,0x4
c001a743:	d4 40                	aam    0x40
c001a745:	d5 39                	aad    0x39
c001a747:	83 e8 30             	sub    eax,0x30
c001a74a:	0f b6 c0             	movzx  eax,al
c001a74d:	09 c7                	or     edi,eax
c001a74f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a753:	8d 41 10             	lea    eax,[ecx+0x10]
c001a756:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a75a:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a75e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a762:	83 f9 0a             	cmp    ecx,0xa
c001a765:	74 07                	je     c001a76e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a767:	47                   	inc    edi
c001a768:	39 c5                	cmp    ebp,eax
c001a76a:	75 16                	jne    c001a782 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a76c:	89 e8                	mov    eax,ebp
c001a76e:	83 f9 0a             	cmp    ecx,0xa
c001a771:	0f 94 c1             	sete   cl
c001a774:	0f b6 c9             	movzx  ecx,cl
c001a777:	01 c1                	add    ecx,eax
c001a779:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a77e:	75 0f                	jne    c001a78f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a780:	eb 1c                	jmp    c001a79e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a782:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a785:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a789:	40                   	inc    eax
c001a78a:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a78d:	eb cb                	jmp    c001a75a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a78f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a793:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a798:	0f 85 d9 fe ff ff    	jne    c001a677 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a79e:	80 fb 58             	cmp    bl,0x58
c001a7a1:	74 10                	je     c001a7b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a7a3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a7a8:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a7ad:	0f 85 c4 fe ff ff    	jne    c001a677 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a7bb:	83 e8 30             	sub    eax,0x30
c001a7be:	c1 e0 04             	shl    eax,0x4
c001a7c1:	83 eb 30             	sub    ebx,0x30
c001a7c4:	09 d8                	or     eax,ebx
c001a7c6:	0f b6 c0             	movzx  eax,al
c001a7c9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a7cd:	0f 85 a4 fe ff ff    	jne    c001a677 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7db:	83 e8 30             	sub    eax,0x30
c001a7de:	c1 e0 04             	shl    eax,0x4
c001a7e1:	83 eb 30             	sub    ebx,0x30
c001a7e4:	09 d8                	or     eax,ebx
c001a7e6:	0f b6 c0             	movzx  eax,al
c001a7e9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a7ed:	0f 85 84 fe ff ff    	jne    c001a677 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7f3:	50                   	push   eax
c001a7f4:	50                   	push   eax
c001a7f5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a7f9:	50                   	push   eax
c001a7fa:	56                   	push   esi
c001a7fb:	e8 50 5e fe ff       	call   c0000650 <strcpy>
c001a800:	83 c4 10             	add    esp,0x10
c001a803:	eb 05                	jmp    c001a80a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a805:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a808:	31 f6                	xor    esi,esi
c001a80a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a810:	89 f0                	mov    eax,esi
c001a812:	5b                   	pop    ebx
c001a813:	5e                   	pop    esi
c001a814:	5f                   	pop    edi
c001a815:	5d                   	pop    ebp
c001a816:	c3                   	ret    
c001a817:	90                   	nop

c001a818 <PCI::checkBus(unsigned char)>:
c001a818:	56                   	push   esi
c001a819:	53                   	push   ebx
c001a81a:	31 db                	xor    ebx,ebx
c001a81c:	51                   	push   ecx
c001a81d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a822:	52                   	push   edx
c001a823:	53                   	push   ebx
c001a824:	43                   	inc    ebx
c001a825:	56                   	push   esi
c001a826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a82a:	e8 0f 03 00 00       	call   c001ab3e <PCI::checkDevice(unsigned char, unsigned char)>
c001a82f:	83 c4 10             	add    esp,0x10
c001a832:	83 fb 20             	cmp    ebx,0x20
c001a835:	75 eb                	jne    c001a822 <PCI::checkBus(unsigned char)+0xa>
c001a837:	58                   	pop    eax
c001a838:	5b                   	pop    ebx
c001a839:	5e                   	pop    esi
c001a83a:	c3                   	ret    
c001a83b:	90                   	nop

c001a83c <PCI::foundDevice(PCIDeviceInfo)>:
c001a83c:	55                   	push   ebp
c001a83d:	57                   	push   edi
c001a83e:	56                   	push   esi
c001a83f:	53                   	push   ebx
c001a840:	83 ec 1c             	sub    esp,0x1c
c001a843:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a848:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a84c:	3d ff ff 00 00       	cmp    eax,0xffff
c001a851:	0f 84 63 01 00 00    	je     c001a9ba <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a857:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a85c:	66 3d 06 04          	cmp    ax,0x406
c001a860:	75 2c                	jne    c001a88e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a862:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a867:	50                   	push   eax
c001a868:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a86d:	50                   	push   eax
c001a86e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a873:	50                   	push   eax
c001a874:	53                   	push   ebx
c001a875:	e8 62 fb ff ff       	call   c001a3dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a87a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a87e:	0f b6 c0             	movzx  eax,al
c001a881:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a885:	83 c4 2c             	add    esp,0x2c
c001a888:	5b                   	pop    ebx
c001a889:	5e                   	pop    esi
c001a88a:	5f                   	pop    edi
c001a88b:	5d                   	pop    ebp
c001a88c:	eb 8a                	jmp    c001a818 <PCI::checkBus(unsigned char)>
c001a88e:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001a893:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a899:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a89d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a8a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a8a5:	85 d2                	test   edx,edx
c001a8a7:	74 34                	je     c001a8dd <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a8a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a8ac:	85 c9                	test   ecx,ecx
c001a8ae:	74 29                	je     c001a8d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8b0:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001a8b6:	31 f5                	xor    ebp,esi
c001a8b8:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001a8be:	75 19                	jne    c001a8d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8c0:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001a8c6:	75 11                	jne    c001a8d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8c8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a8cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a8d3:	0f 84 e1 00 00 00    	je     c001a9ba <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a8d9:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8db:	eb c8                	jmp    c001a8a5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a8dd:	3d 01 06 00 00       	cmp    eax,0x601
c001a8e2:	75 19                	jne    c001a8fd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a8e4:	83 ec 0c             	sub    esp,0xc
c001a8e7:	68 64 01 00 00       	push   0x164
c001a8ec:	e8 da d1 fe ff       	call   c0007acb <malloc>
c001a8f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8f4:	89 c5                	mov    ebp,eax
c001a8f6:	e8 ab 0e 00 00       	call   c001b7a6 <SATABus::SATABus()>
c001a8fb:	eb 1e                	jmp    c001a91b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a8fd:	3d 01 01 00 00       	cmp    eax,0x101
c001a902:	75 62                	jne    c001a966 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001a904:	83 ec 0c             	sub    esp,0xc
c001a907:	68 70 02 00 00       	push   0x270
c001a90c:	e8 ba d1 fe ff       	call   c0007acb <malloc>
c001a911:	89 04 24             	mov    DWORD PTR [esp],eax
c001a914:	89 c5                	mov    ebp,eax
c001a916:	e8 f3 02 00 00       	call   c001ac0e <IDE::IDE()>
c001a91b:	58                   	pop    eax
c001a91c:	5a                   	pop    edx
c001a91d:	55                   	push   ebp
c001a91e:	53                   	push   ebx
c001a91f:	e8 dc 14 ff ff       	call   c000be00 <Device::addChild(Device*)>
c001a924:	83 ec 1c             	sub    esp,0x1c
c001a927:	b9 09 00 00 00       	mov    ecx,0x9
c001a92c:	fc                   	cld    
c001a92d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a931:	89 e7                	mov    edi,esp
c001a933:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a935:	55                   	push   ebp
c001a936:	e8 0b 14 ff ff       	call   c000bd46 <Device::preOpenPCI(PCIDeviceInfo)>
c001a93b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a93e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a942:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a94a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a952:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a95a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a95d:	83 c4 4c             	add    esp,0x4c
c001a960:	5b                   	pop    ebx
c001a961:	5e                   	pop    esi
c001a962:	5f                   	pop    edi
c001a963:	5d                   	pop    ebp
c001a964:	ff e0                	jmp    eax
c001a966:	83 ec 0c             	sub    esp,0xc
c001a969:	68 58 01 00 00       	push   0x158
c001a96e:	e8 58 d1 fe ff       	call   c0007acb <malloc>
c001a973:	5a                   	pop    edx
c001a974:	59                   	pop    ecx
c001a975:	68 7e 1a 02 c0       	push   0xc0021a7e
c001a97a:	50                   	push   eax
c001a97b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a97f:	e8 1a 17 ff ff       	call   c000c09e <DriverlessDevice::DriverlessDevice(char const*)>
c001a984:	5e                   	pop    esi
c001a985:	5f                   	pop    edi
c001a986:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a98a:	50                   	push   eax
c001a98b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a98f:	53                   	push   ebx
c001a990:	e8 6b 14 ff ff       	call   c000be00 <Device::addChild(Device*)>
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	b9 09 00 00 00       	mov    ecx,0x9
c001a99d:	fc                   	cld    
c001a99e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a9a2:	89 fe                	mov    esi,edi
c001a9a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a9a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9ae:	83 c4 1c             	add    esp,0x1c
c001a9b1:	5b                   	pop    ebx
c001a9b2:	5e                   	pop    esi
c001a9b3:	5f                   	pop    edi
c001a9b4:	5d                   	pop    ebp
c001a9b5:	e9 8c 13 ff ff       	jmp    c000bd46 <Device::preOpenPCI(PCIDeviceInfo)>
c001a9ba:	83 c4 1c             	add    esp,0x1c
c001a9bd:	5b                   	pop    ebx
c001a9be:	5e                   	pop    esi
c001a9bf:	5f                   	pop    edi
c001a9c0:	5d                   	pop    ebp
c001a9c1:	c3                   	ret    

c001a9c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a9c2:	55                   	push   ebp
c001a9c3:	57                   	push   edi
c001a9c4:	56                   	push   esi
c001a9c5:	53                   	push   ebx
c001a9c6:	83 ec 68             	sub    esp,0x68
c001a9c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9d0:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a9d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a9d8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9df:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a9e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9ef:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a9f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9f8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a9fd:	6a 0c                	push   0xc
c001a9ff:	57                   	push   edi
c001aa00:	53                   	push   ebx
c001aa01:	56                   	push   esi
c001aa02:	55                   	push   ebp
c001aa03:	e8 24 f8 ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa08:	83 c4 20             	add    esp,0x20
c001aa0b:	57                   	push   edi
c001aa0c:	53                   	push   ebx
c001aa0d:	56                   	push   esi
c001aa0e:	55                   	push   ebp
c001aa0f:	e8 0e f9 ff ff       	call   c001a322 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001aa14:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001aa19:	57                   	push   edi
c001aa1a:	53                   	push   ebx
c001aa1b:	56                   	push   esi
c001aa1c:	55                   	push   ebp
c001aa1d:	e8 96 f9 ff ff       	call   c001a3b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001aa22:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aa26:	83 c4 14             	add    esp,0x14
c001aa29:	6a 3c                	push   0x3c
c001aa2b:	57                   	push   edi
c001aa2c:	53                   	push   ebx
c001aa2d:	56                   	push   esi
c001aa2e:	55                   	push   ebp
c001aa2f:	e8 f8 f7 ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa34:	0f b6 c4             	movzx  eax,ah
c001aa37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa3b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa3f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aa43:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aa48:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aa4e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aa54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa58:	83 c4 20             	add    esp,0x20
c001aa5b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aa60:	74 30                	je     c001aa92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa62:	31 c0                	xor    eax,eax
c001aa64:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa68:	7e 28                	jle    c001aa92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa6a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa72:	39 cb                	cmp    ebx,ecx
c001aa74:	75 19                	jne    c001aa8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa76:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa7e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa82:	75 0b                	jne    c001aa8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa84:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa8b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa8f:	40                   	inc    eax
c001aa90:	eb d2                	jmp    c001aa64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa92:	31 d2                	xor    edx,edx
c001aa94:	83 ec 0c             	sub    esp,0xc
c001aa97:	57                   	push   edi
c001aa98:	53                   	push   ebx
c001aa99:	56                   	push   esi
c001aa9a:	52                   	push   edx
c001aa9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa9f:	55                   	push   ebp
c001aaa0:	e8 5f f9 ff ff       	call   c001a404 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aaa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aaa9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aaad:	42                   	inc    edx
c001aaae:	83 c4 20             	add    esp,0x20
c001aab1:	83 fa 06             	cmp    edx,0x6
c001aab4:	75 de                	jne    c001aa94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aaba:	83 ec 0c             	sub    esp,0xc
c001aabd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aac1:	c1 e2 08             	shl    edx,0x8
c001aac4:	0f b6 c4             	movzx  eax,ah
c001aac7:	09 d0                	or     eax,edx
c001aac9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aace:	6a 02                	push   0x2
c001aad0:	57                   	push   edi
c001aad1:	53                   	push   ebx
c001aad2:	56                   	push   esi
c001aad3:	55                   	push   ebp
c001aad4:	e8 53 f7 ff ff       	call   c001a22c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aad9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aade:	83 c4 20             	add    esp,0x20
c001aae1:	57                   	push   edi
c001aae2:	53                   	push   ebx
c001aae3:	56                   	push   esi
c001aae4:	55                   	push   ebp
c001aae5:	e8 82 f8 ff ff       	call   c001a36c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aaea:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aaee:	57                   	push   edi
c001aaef:	53                   	push   ebx
c001aaf0:	56                   	push   esi
c001aaf1:	55                   	push   ebp
c001aaf2:	e8 df f7 ff ff       	call   c001a2d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aaf7:	b9 09 00 00 00       	mov    ecx,0x9
c001aafc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ab01:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ab05:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ab09:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ab0d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ab11:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ab15:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ab19:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ab1d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ab21:	83 ec 0c             	sub    esp,0xc
c001ab24:	fc                   	cld    
c001ab25:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ab29:	89 e7                	mov    edi,esp
c001ab2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ab2d:	55                   	push   ebp
c001ab2e:	e8 09 fd ff ff       	call   c001a83c <PCI::foundDevice(PCIDeviceInfo)>
c001ab33:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab39:	5b                   	pop    ebx
c001ab3a:	5e                   	pop    esi
c001ab3b:	5f                   	pop    edi
c001ab3c:	5d                   	pop    ebp
c001ab3d:	c3                   	ret    

c001ab3e <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab3e:	55                   	push   ebp
c001ab3f:	57                   	push   edi
c001ab40:	56                   	push   esi
c001ab41:	53                   	push   ebx
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ab4a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ab4f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ab53:	6a 00                	push   0x0
c001ab55:	56                   	push   esi
c001ab56:	57                   	push   edi
c001ab57:	55                   	push   ebp
c001ab58:	e8 79 f7 ff ff       	call   c001a2d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab5d:	6a 00                	push   0x0
c001ab5f:	56                   	push   esi
c001ab60:	57                   	push   edi
c001ab61:	55                   	push   ebp
c001ab62:	e8 5b fe ff ff       	call   c001a9c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab67:	83 c4 20             	add    esp,0x20
c001ab6a:	6a 00                	push   0x0
c001ab6c:	56                   	push   esi
c001ab6d:	57                   	push   edi
c001ab6e:	55                   	push   ebp
c001ab6f:	e8 86 f7 ff ff       	call   c001a2fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	a8 80                	test   al,0x80
c001ab79:	74 2d                	je     c001aba8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab7b:	bb 01 00 00 00       	mov    ebx,0x1
c001ab80:	53                   	push   ebx
c001ab81:	56                   	push   esi
c001ab82:	57                   	push   edi
c001ab83:	55                   	push   ebp
c001ab84:	e8 4d f7 ff ff       	call   c001a2d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	0f b7 c0             	movzx  eax,ax
c001ab8f:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab94:	74 0c                	je     c001aba2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab96:	53                   	push   ebx
c001ab97:	56                   	push   esi
c001ab98:	57                   	push   edi
c001ab99:	55                   	push   ebp
c001ab9a:	e8 23 fe ff ff       	call   c001a9c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab9f:	83 c4 10             	add    esp,0x10
c001aba2:	43                   	inc    ebx
c001aba3:	83 fb 08             	cmp    ebx,0x8
c001aba6:	75 d8                	jne    c001ab80 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001aba8:	83 c4 0c             	add    esp,0xc
c001abab:	5b                   	pop    ebx
c001abac:	5e                   	pop    esi
c001abad:	5f                   	pop    edi
c001abae:	5d                   	pop    ebp
c001abaf:	c3                   	ret    

c001abb0 <PCI::detect()>:
c001abb0:	56                   	push   esi
c001abb1:	53                   	push   ebx
c001abb2:	53                   	push   ebx
c001abb3:	31 db                	xor    ebx,ebx
c001abb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abb9:	6a 00                	push   0x0
c001abbb:	6a 00                	push   0x0
c001abbd:	6a 00                	push   0x0
c001abbf:	56                   	push   esi
c001abc0:	e8 35 f7 ff ff       	call   c001a2fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001abc5:	83 c4 10             	add    esp,0x10
c001abc8:	a8 80                	test   al,0x80
c001abca:	75 21                	jne    c001abed <PCI::detect()+0x3d>
c001abcc:	51                   	push   ecx
c001abcd:	51                   	push   ecx
c001abce:	6a 00                	push   0x0
c001abd0:	56                   	push   esi
c001abd1:	e8 42 fc ff ff       	call   c001a818 <PCI::checkBus(unsigned char)>
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	eb 2a                	jmp    c001ac05 <PCI::detect()+0x55>
c001abdb:	52                   	push   edx
c001abdc:	52                   	push   edx
c001abdd:	53                   	push   ebx
c001abde:	43                   	inc    ebx
c001abdf:	56                   	push   esi
c001abe0:	e8 33 fc ff ff       	call   c001a818 <PCI::checkBus(unsigned char)>
c001abe5:	83 c4 10             	add    esp,0x10
c001abe8:	83 fb 08             	cmp    ebx,0x8
c001abeb:	74 18                	je     c001ac05 <PCI::detect()+0x55>
c001abed:	53                   	push   ebx
c001abee:	6a 00                	push   0x0
c001abf0:	6a 00                	push   0x0
c001abf2:	56                   	push   esi
c001abf3:	e8 de f6 ff ff       	call   c001a2d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abf8:	83 c4 10             	add    esp,0x10
c001abfb:	0f b7 c0             	movzx  eax,ax
c001abfe:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac03:	74 d6                	je     c001abdb <PCI::detect()+0x2b>
c001ac05:	58                   	pop    eax
c001ac06:	5b                   	pop    ebx
c001ac07:	5e                   	pop    esi
c001ac08:	c3                   	ret    
c001ac09:	90                   	nop

c001ac0a <IDE::close(int, int, void*)>:
c001ac0a:	83 c8 ff             	or     eax,0xffffffff
c001ac0d:	c3                   	ret    

c001ac0e <IDE::IDE()>:
c001ac0e:	83 ec 0c             	sub    esp,0xc
c001ac11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac15:	83 ec 08             	sub    esp,0x8
c001ac18:	68 c4 1a 02 c0       	push   0xc0021ac4
c001ac1d:	50                   	push   eax
c001ac1e:	e8 21 15 ff ff       	call   c000c144 <HardDiskController::HardDiskController(char const*)>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c001ac2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2f:	89 10                	mov    DWORD PTR [eax],edx
c001ac31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac35:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac3c:	90                   	nop
c001ac3d:	83 c4 0c             	add    esp,0xc
c001ac40:	c3                   	ret    
c001ac41:	90                   	nop

c001ac42 <IDE::prepareInterrupt(unsigned char)>:
c001ac42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac4b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ac53:	c3                   	ret    

c001ac54 <selectDrive(unsigned char, unsigned char)>:
c001ac54:	c3                   	ret    
c001ac55:	90                   	nop

c001ac56 <IDE::getBase(unsigned char)>:
c001ac56:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ac5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac5f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac67:	c3                   	ret    

c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac68:	55                   	push   ebp
c001ac69:	57                   	push   edi
c001ac6a:	56                   	push   esi
c001ac6b:	53                   	push   ebx
c001ac6c:	83 ec 1c             	sub    esp,0x1c
c001ac6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ac77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac7f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac82:	80 f9 03             	cmp    cl,0x3
c001ac85:	77 4f                	ja     c001acd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac8b:	0f b6 f2             	movzx  esi,dl
c001ac8e:	0f b6 db             	movzx  ebx,bl
c001ac91:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ac94:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ac99:	80 ca 80             	or     dl,0x80
c001ac9c:	52                   	push   edx
c001ac9d:	6a 0c                	push   0xc
c001ac9f:	56                   	push   esi
c001aca0:	57                   	push   edi
c001aca1:	e8 c2 ff ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aca6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001acab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acaf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001acb3:	ee                   	out    dx,al
c001acb4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001acb9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001acbd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001acc1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001acc9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001accd:	83 c4 2c             	add    esp,0x2c
c001acd0:	5b                   	pop    ebx
c001acd1:	5e                   	pop    esi
c001acd2:	5f                   	pop    edi
c001acd3:	5d                   	pop    ebp
c001acd4:	eb 92                	jmp    c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acd6:	0f b6 cb             	movzx  ecx,bl
c001acd9:	83 f9 07             	cmp    ecx,0x7
c001acdc:	77 12                	ja     c001acf0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001acde:	0f b6 d2             	movzx  edx,dl
c001ace1:	0f b6 db             	movzx  ebx,bl
c001ace4:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001acec:	01 da                	add    edx,ebx
c001acee:	eb 2f                	jmp    c001ad1f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001acf0:	83 f9 0d             	cmp    ecx,0xd
c001acf3:	77 13                	ja     c001ad08 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001acf5:	0f b6 d2             	movzx  edx,dl
c001acf8:	0f b6 db             	movzx  ebx,bl
c001acfb:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ad02:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ad06:	eb 17                	jmp    c001ad1f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad08:	83 f9 15             	cmp    ecx,0x15
c001ad0b:	77 13                	ja     c001ad20 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ad0d:	0f b6 d2             	movzx  edx,dl
c001ad10:	0f b6 db             	movzx  ebx,bl
c001ad13:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ad1b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ad1f:	ee                   	out    dx,al
c001ad20:	83 c4 1c             	add    esp,0x1c
c001ad23:	5b                   	pop    ebx
c001ad24:	5e                   	pop    esi
c001ad25:	5f                   	pop    edi
c001ad26:	5d                   	pop    ebp
c001ad27:	c3                   	ret    

c001ad28 <IDE::read(unsigned char, unsigned char)>:
c001ad28:	57                   	push   edi
c001ad29:	56                   	push   esi
c001ad2a:	53                   	push   ebx
c001ad2b:	83 ec 10             	sub    esp,0x10
c001ad2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad3a:	8d 42 f8             	lea    eax,[edx-0x8]
c001ad3d:	3c 03                	cmp    al,0x3
c001ad3f:	77 48                	ja     c001ad89 <IDE::read(unsigned char, unsigned char)+0x61>
c001ad41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad45:	0f b6 f1             	movzx  esi,cl
c001ad48:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ad4b:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ad50:	0c 80                	or     al,0x80
c001ad52:	50                   	push   eax
c001ad53:	6a 0c                	push   0xc
c001ad55:	56                   	push   esi
c001ad56:	53                   	push   ebx
c001ad57:	e8 0c ff ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad60:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ad65:	0f b6 d2             	movzx  edx,dl
c001ad68:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad6c:	ec                   	in     al,dx
c001ad6d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ad71:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ad76:	52                   	push   edx
c001ad77:	6a 0c                	push   0xc
c001ad79:	56                   	push   esi
c001ad7a:	53                   	push   ebx
c001ad7b:	e8 e8 fe ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad80:	83 c4 20             	add    esp,0x20
c001ad83:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad87:	eb 4c                	jmp    c001add5 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad89:	0f b6 f2             	movzx  esi,dl
c001ad8c:	83 fe 07             	cmp    esi,0x7
c001ad8f:	77 12                	ja     c001ada3 <IDE::read(unsigned char, unsigned char)+0x7b>
c001ad91:	0f b6 c9             	movzx  ecx,cl
c001ad94:	0f b6 d2             	movzx  edx,dl
c001ad97:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ad9f:	01 c2                	add    edx,eax
c001ada1:	eb 31                	jmp    c001add4 <IDE::read(unsigned char, unsigned char)+0xac>
c001ada3:	83 fe 0d             	cmp    esi,0xd
c001ada6:	77 13                	ja     c001adbb <IDE::read(unsigned char, unsigned char)+0x93>
c001ada8:	0f b6 c9             	movzx  ecx,cl
c001adab:	0f b6 d2             	movzx  edx,dl
c001adae:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001adb5:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001adb9:	eb 19                	jmp    c001add4 <IDE::read(unsigned char, unsigned char)+0xac>
c001adbb:	31 c0                	xor    eax,eax
c001adbd:	83 fe 15             	cmp    esi,0x15
c001adc0:	77 13                	ja     c001add5 <IDE::read(unsigned char, unsigned char)+0xad>
c001adc2:	0f b6 c9             	movzx  ecx,cl
c001adc5:	0f b6 d2             	movzx  edx,dl
c001adc8:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001add0:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001add4:	ec                   	in     al,dx
c001add5:	83 c4 10             	add    esp,0x10
c001add8:	5b                   	pop    ebx
c001add9:	5e                   	pop    esi
c001adda:	5f                   	pop    edi
c001addb:	c3                   	ret    

c001addc <IDE::waitInterrupt(unsigned char)>:
c001addc:	55                   	push   ebp
c001addd:	57                   	push   edi
c001adde:	56                   	push   esi
c001addf:	53                   	push   ebx
c001ade0:	31 db                	xor    ebx,ebx
c001ade2:	83 ec 0c             	sub    esp,0xc
c001ade5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ade9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001adee:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001adf6:	89 e8                	mov    eax,ebp
c001adf8:	84 c0                	test   al,al
c001adfa:	75 30                	jne    c001ae2c <IDE::waitInterrupt(unsigned char)+0x50>
c001adfc:	50                   	push   eax
c001adfd:	6a 0c                	push   0xc
c001adff:	56                   	push   esi
c001ae00:	57                   	push   edi
c001ae01:	e8 22 ff ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001ae06:	83 c4 10             	add    esp,0x10
c001ae09:	a8 01                	test   al,0x1
c001ae0b:	75 27                	jne    c001ae34 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae0d:	f6 c3 04             	test   bl,0x4
c001ae10:	75 12                	jne    c001ae24 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae12:	83 fb 32             	cmp    ebx,0x32
c001ae15:	7e 0d                	jle    c001ae24 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae17:	83 ec 0c             	sub    esp,0xc
c001ae1a:	6a 64                	push   0x64
c001ae1c:	e8 5f a5 ff ff       	call   c0015380 <milliTenthSleep(unsigned int)>
c001ae21:	83 c4 10             	add    esp,0x10
c001ae24:	83 fb 3c             	cmp    ebx,0x3c
c001ae27:	74 0b                	je     c001ae34 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae29:	43                   	inc    ebx
c001ae2a:	eb c2                	jmp    c001adee <IDE::waitInterrupt(unsigned char)+0x12>
c001ae2c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae34:	83 c4 0c             	add    esp,0xc
c001ae37:	89 e8                	mov    eax,ebp
c001ae39:	5b                   	pop    ebx
c001ae3a:	5e                   	pop    esi
c001ae3b:	5f                   	pop    edi
c001ae3c:	5d                   	pop    ebp
c001ae3d:	c3                   	ret    

c001ae3e <ideChannel0IRQHandler(regs*, void*)>:
c001ae3e:	83 ec 10             	sub    esp,0x10
c001ae41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae45:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae4c:	6a 07                	push   0x7
c001ae4e:	6a 00                	push   0x0
c001ae50:	50                   	push   eax
c001ae51:	e8 d2 fe ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001ae56:	83 c4 1c             	add    esp,0x1c
c001ae59:	c3                   	ret    

c001ae5a <ideChannel1IRQHandler(regs*, void*)>:
c001ae5a:	83 ec 10             	sub    esp,0x10
c001ae5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae61:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ae68:	6a 07                	push   0x7
c001ae6a:	6a 01                	push   0x1
c001ae6c:	50                   	push   eax
c001ae6d:	e8 b6 fe ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001ae72:	83 c4 1c             	add    esp,0x1c
c001ae75:	c3                   	ret    

c001ae76 <IDE::enableIRQs(unsigned char, bool)>:
c001ae76:	57                   	push   edi
c001ae77:	b8 02 00 00 00       	mov    eax,0x2
c001ae7c:	56                   	push   esi
c001ae7d:	53                   	push   ebx
c001ae7e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae87:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae8b:	74 02                	je     c001ae8f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae8d:	31 c0                	xor    eax,eax
c001ae8f:	0f b6 db             	movzx  ebx,bl
c001ae92:	bf 04 00 00 00       	mov    edi,0x4
c001ae97:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae9e:	50                   	push   eax
c001ae9f:	6a 0c                	push   0xc
c001aea1:	53                   	push   ebx
c001aea2:	56                   	push   esi
c001aea3:	e8 c0 fd ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	50                   	push   eax
c001aeac:	6a 0c                	push   0xc
c001aeae:	53                   	push   ebx
c001aeaf:	56                   	push   esi
c001aeb0:	e8 73 fe ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001aeb5:	83 c4 10             	add    esp,0x10
c001aeb8:	4f                   	dec    edi
c001aeb9:	75 f0                	jne    c001aeab <IDE::enableIRQs(unsigned char, bool)+0x35>
c001aebb:	5b                   	pop    ebx
c001aebc:	5e                   	pop    esi
c001aebd:	5f                   	pop    edi
c001aebe:	c3                   	ret    
c001aebf:	90                   	nop

c001aec0 <IDE::open(int, int, void*)>:
c001aec0:	55                   	push   ebp
c001aec1:	57                   	push   edi
c001aec2:	56                   	push   esi
c001aec3:	53                   	push   ebx
c001aec4:	83 ec 1c             	sub    esp,0x1c
c001aec7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aecb:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001aed2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001aedb:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001aee4:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001aeeb:	0f 85 da 02 00 00    	jne    c001b1cb <IDE::open(int, int, void*)+0x30b>
c001aef1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001aef7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001aefb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeff:	83 e0 7f             	and    eax,0x7f
c001af02:	83 f8 05             	cmp    eax,0x5
c001af05:	74 05                	je     c001af0c <IDE::open(int, int, void*)+0x4c>
c001af07:	83 f8 0f             	cmp    eax,0xf
c001af0a:	75 32                	jne    c001af3e <IDE::open(int, int, void*)+0x7e>
c001af0c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001af12:	83 e0 fc             	and    eax,0xfffffffc
c001af15:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af1c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001af22:	83 e0 fc             	and    eax,0xfffffffc
c001af25:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af2c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af32:	83 e0 fc             	and    eax,0xfffffffc
c001af35:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af3c:	eb 14                	jmp    c001af52 <IDE::open(int, int, void*)+0x92>
c001af3e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001af48:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001af52:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001af59:	bf f8 0c 00 00       	mov    edi,0xcf8
c001af5e:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001af65:	89 fa                	mov    edx,edi
c001af67:	89 f1                	mov    ecx,esi
c001af69:	c1 e1 10             	shl    ecx,0x10
c001af6c:	89 e8                	mov    eax,ebp
c001af6e:	c1 e0 0b             	shl    eax,0xb
c001af71:	09 c1                	or     ecx,eax
c001af73:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af7a:	c1 e0 08             	shl    eax,0x8
c001af7d:	09 c1                	or     ecx,eax
c001af7f:	89 c8                	mov    eax,ecx
c001af81:	0d 08 00 00 80       	or     eax,0x80000008
c001af86:	ef                   	out    dx,eax
c001af87:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af8c:	ed                   	in     eax,dx
c001af8d:	c1 e8 10             	shr    eax,0x10
c001af90:	3d ff ff 00 00       	cmp    eax,0xffff
c001af95:	0f 84 f9 00 00 00    	je     c001b094 <IDE::open(int, int, void*)+0x1d4>
c001af9b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001afa1:	89 fa                	mov    edx,edi
c001afa3:	89 c8                	mov    eax,ecx
c001afa5:	ef                   	out    dx,eax
c001afa6:	b0 fe                	mov    al,0xfe
c001afa8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afad:	ee                   	out    dx,al
c001afae:	89 c8                	mov    eax,ecx
c001afb0:	89 fa                	mov    edx,edi
c001afb2:	ef                   	out    dx,eax
c001afb3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afb8:	ed                   	in     eax,dx
c001afb9:	3c fe                	cmp    al,0xfe
c001afbb:	0f 85 a4 00 00 00    	jne    c001b065 <IDE::open(int, int, void*)+0x1a5>
c001afc1:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001afc7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001afce:	74 30                	je     c001b000 <IDE::open(int, int, void*)+0x140>
c001afd0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001afd6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	40                   	inc    eax
c001afde:	0f b6 c0             	movzx  eax,al
c001afe1:	50                   	push   eax
c001afe2:	55                   	push   ebp
c001afe3:	56                   	push   esi
c001afe4:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001afea:	51                   	push   ecx
c001afeb:	e8 ac 3d ff ff       	call   c000ed9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001aff0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001aff5:	83 c4 1c             	add    esp,0x1c
c001aff8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001affe:	eb 0a                	jmp    c001b00a <IDE::open(int, int, void*)+0x14a>
c001b000:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b00a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b011:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001b016:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b01d:	89 ea                	mov    edx,ebp
c001b01f:	c1 e1 10             	shl    ecx,0x10
c001b022:	c1 e0 08             	shl    eax,0x8
c001b025:	09 c1                	or     ecx,eax
c001b027:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b02e:	c1 e0 0b             	shl    eax,0xb
c001b031:	09 c1                	or     ecx,eax
c001b033:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b039:	89 c8                	mov    eax,ecx
c001b03b:	ef                   	out    dx,eax
c001b03c:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001b042:	be fc 0c 00 00       	mov    esi,0xcfc
c001b047:	89 f2                	mov    edx,esi
c001b049:	89 f8                	mov    eax,edi
c001b04b:	ee                   	out    dx,al
c001b04c:	89 c8                	mov    eax,ecx
c001b04e:	89 ea                	mov    edx,ebp
c001b050:	ef                   	out    dx,eax
c001b051:	89 f2                	mov    edx,esi
c001b053:	ed                   	in     eax,dx
c001b054:	0f b6 c0             	movzx  eax,al
c001b057:	39 f8                	cmp    eax,edi
c001b059:	74 49                	je     c001b0a4 <IDE::open(int, int, void*)+0x1e4>
c001b05b:	83 ec 0c             	sub    esp,0xc
c001b05e:	68 dc 1a 02 c0       	push   0xc0021adc
c001b063:	eb 37                	jmp    c001b09c <IDE::open(int, int, void*)+0x1dc>
c001b065:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b06e:	75 1a                	jne    c001b08a <IDE::open(int, int, void*)+0x1ca>
c001b070:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b075:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b07a:	74 05                	je     c001b081 <IDE::open(int, int, void*)+0x1c1>
c001b07c:	83 c0 80             	add    eax,0xffffff80
c001b07f:	75 09                	jne    c001b08a <IDE::open(int, int, void*)+0x1ca>
c001b081:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b088:	eb 1a                	jmp    c001b0a4 <IDE::open(int, int, void*)+0x1e4>
c001b08a:	83 ec 0c             	sub    esp,0xc
c001b08d:	68 e4 1a 02 c0       	push   0xc0021ae4
c001b092:	eb 08                	jmp    c001b09c <IDE::open(int, int, void*)+0x1dc>
c001b094:	83 ec 0c             	sub    esp,0xc
c001b097:	68 15 1b 02 c0       	push   0xc0021b15
c001b09c:	e8 c8 57 ff ff       	call   c0010869 <KePanic(char const*)>
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b0ab:	74 1a                	je     c001b0c7 <IDE::open(int, int, void*)+0x207>
c001b0ad:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b0b3:	83 e0 fc             	and    eax,0xfffffffc
c001b0b6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b0bd:	83 c0 08             	add    eax,0x8
c001b0c0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b0c7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b0cd:	89 c2                	mov    edx,eax
c001b0cf:	83 e2 0f             	and    edx,0xf
c001b0d2:	83 fa 08             	cmp    edx,0x8
c001b0d5:	75 0a                	jne    c001b0e1 <IDE::open(int, int, void*)+0x221>
c001b0d7:	83 e8 02             	sub    eax,0x2
c001b0da:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b0e1:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b0e7:	89 c2                	mov    edx,eax
c001b0e9:	83 e2 0f             	and    edx,0xf
c001b0ec:	83 fa 08             	cmp    edx,0x8
c001b0ef:	75 0a                	jne    c001b0fb <IDE::open(int, int, void*)+0x23b>
c001b0f1:	83 e8 02             	sub    eax,0x2
c001b0f4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b0fb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b102:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b109:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b10c:	89 d0                	mov    eax,edx
c001b10e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b112:	8d 7a 01             	lea    edi,[edx+0x1]
c001b115:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b119:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b11d:	83 e1 3f             	and    ecx,0x3f
c001b120:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b124:	89 f9                	mov    ecx,edi
c001b126:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b12d:	8d 78 02             	lea    edi,[eax+0x2]
c001b130:	0f b6 c9             	movzx  ecx,cl
c001b133:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b136:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b13a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b13e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b142:	83 e2 3f             	and    edx,0x3f
c001b145:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b149:	89 f9                	mov    ecx,edi
c001b14b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b151:	8d 78 03             	lea    edi,[eax+0x3]
c001b154:	0f b6 d1             	movzx  edx,cl
c001b157:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b15a:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b15e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b162:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b166:	83 e1 3f             	and    ecx,0x3f
c001b169:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b16d:	89 f9                	mov    ecx,edi
c001b16f:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b175:	8d 78 04             	lea    edi,[eax+0x4]
c001b178:	0f b6 c9             	movzx  ecx,cl
c001b17b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b17e:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b182:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b186:	89 fa                	mov    edx,edi
c001b188:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b18e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b192:	83 e2 3f             	and    edx,0x3f
c001b195:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b199:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b1a0:	66 85 f6             	test   si,si
c001b1a3:	74 65                	je     c001b20a <IDE::open(int, int, void*)+0x34a>
c001b1a5:	89 f9                	mov    ecx,edi
c001b1a7:	83 c0 05             	add    eax,0x5
c001b1aa:	0f b6 d1             	movzx  edx,cl
c001b1ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b1b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b1b4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b1b8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b1be:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b1c2:	83 e0 3f             	and    eax,0x3f
c001b1c5:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b1c9:	eb 3f                	jmp    c001b20a <IDE::open(int, int, void*)+0x34a>
c001b1cb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b1d2:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b1d8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b1df:	05 06 02 00 00       	add    eax,0x206
c001b1e4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b1eb:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b1f2:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b1f9:	05 06 02 00 00       	add    eax,0x206
c001b1fe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b205:	e9 bd fe ff ff       	jmp    c001b0c7 <IDE::open(int, int, void*)+0x207>
c001b20a:	50                   	push   eax
c001b20b:	50                   	push   eax
c001b20c:	6a 00                	push   0x0
c001b20e:	53                   	push   ebx
c001b20f:	e8 2e fa ff ff       	call   c001ac42 <IDE::prepareInterrupt(unsigned char)>
c001b214:	5a                   	pop    edx
c001b215:	59                   	pop    ecx
c001b216:	6a 01                	push   0x1
c001b218:	53                   	push   ebx
c001b219:	e8 24 fa ff ff       	call   c001ac42 <IDE::prepareInterrupt(unsigned char)>
c001b21e:	83 c4 0c             	add    esp,0xc
c001b221:	6a 00                	push   0x0
c001b223:	6a 00                	push   0x0
c001b225:	53                   	push   ebx
c001b226:	e8 4b fc ff ff       	call   c001ae76 <IDE::enableIRQs(unsigned char, bool)>
c001b22b:	83 c4 0c             	add    esp,0xc
c001b22e:	6a 00                	push   0x0
c001b230:	6a 01                	push   0x1
c001b232:	53                   	push   ebx
c001b233:	e8 3e fc ff ff       	call   c001ae76 <IDE::enableIRQs(unsigned char, bool)>
c001b238:	83 c4 10             	add    esp,0x10
c001b23b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b242:	74 34                	je     c001b278 <IDE::open(int, int, void*)+0x3b8>
c001b244:	83 ec 0c             	sub    esp,0xc
c001b247:	53                   	push   ebx
c001b248:	6a 01                	push   0x1
c001b24a:	68 3e ae 01 c0       	push   0xc001ae3e
c001b24f:	6a 0e                	push   0xe
c001b251:	53                   	push   ebx
c001b252:	e8 55 0b ff ff       	call   c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b257:	83 c4 14             	add    esp,0x14
c001b25a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b260:	53                   	push   ebx
c001b261:	6a 01                	push   0x1
c001b263:	68 5a ae 01 c0       	push   0xc001ae5a
c001b268:	6a 0f                	push   0xf
c001b26a:	53                   	push   ebx
c001b26b:	e8 3c 0b ff ff       	call   c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b270:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b276:	eb 38                	jmp    c001b2b0 <IDE::open(int, int, void*)+0x3f0>
c001b278:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b282:	83 ec 0c             	sub    esp,0xc
c001b285:	53                   	push   ebx
c001b286:	6a 00                	push   0x0
c001b288:	68 3e ae 01 c0       	push   0xc001ae3e
c001b28d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b293:	53                   	push   ebx
c001b294:	e8 13 0b ff ff       	call   c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b299:	83 c4 14             	add    esp,0x14
c001b29c:	53                   	push   ebx
c001b29d:	6a 00                	push   0x0
c001b29f:	68 5a ae 01 c0       	push   0xc001ae5a
c001b2a4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b2aa:	53                   	push   ebx
c001b2ab:	e8 fc 0a ff ff       	call   c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b2:	83 c4 20             	add    esp,0x20
c001b2b5:	83 ec 0c             	sub    esp,0xc
c001b2b8:	53                   	push   ebx
c001b2b9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b2bc:	83 c4 0c             	add    esp,0xc
c001b2bf:	6a 07                	push   0x7
c001b2c1:	6a 00                	push   0x0
c001b2c3:	53                   	push   ebx
c001b2c4:	e8 5f fa ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b2c9:	83 c4 0c             	add    esp,0xc
c001b2cc:	6a 07                	push   0x7
c001b2ce:	6a 01                	push   0x1
c001b2d0:	53                   	push   ebx
c001b2d1:	e8 52 fa ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b2d6:	83 c4 0c             	add    esp,0xc
c001b2d9:	6a 01                	push   0x1
c001b2db:	6a 00                	push   0x0
c001b2dd:	53                   	push   ebx
c001b2de:	e8 93 fb ff ff       	call   c001ae76 <IDE::enableIRQs(unsigned char, bool)>
c001b2e3:	83 c4 0c             	add    esp,0xc
c001b2e6:	6a 01                	push   0x1
c001b2e8:	6a 01                	push   0x1
c001b2ea:	53                   	push   ebx
c001b2eb:	e8 86 fb ff ff       	call   c001ae76 <IDE::enableIRQs(unsigned char, bool)>
c001b2f0:	83 c4 2c             	add    esp,0x2c
c001b2f3:	31 c0                	xor    eax,eax
c001b2f5:	5b                   	pop    ebx
c001b2f6:	5e                   	pop    esi
c001b2f7:	5f                   	pop    edi
c001b2f8:	5d                   	pop    ebp
c001b2f9:	c3                   	ret    

c001b2fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b2fa:	55                   	push   ebp
c001b2fb:	57                   	push   edi
c001b2fc:	56                   	push   esi
c001b2fd:	53                   	push   ebx
c001b2fe:	83 ec 1c             	sub    esp,0x1c
c001b301:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b305:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b309:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b30d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b311:	8d 42 f8             	lea    eax,[edx-0x8]
c001b314:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b318:	3c 03                	cmp    al,0x3
c001b31a:	77 5a                	ja     c001b376 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b31c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b320:	0f b6 db             	movzx  ebx,bl
c001b323:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b327:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b32a:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b32f:	0c 80                	or     al,0x80
c001b331:	50                   	push   eax
c001b332:	6a 0c                	push   0xc
c001b334:	53                   	push   ebx
c001b335:	56                   	push   esi
c001b336:	e8 2d f9 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b33b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b33f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b344:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b348:	0f b6 d2             	movzx  edx,dl
c001b34b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b34f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b351:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b356:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b35a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b35e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b366:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b36a:	83 c4 2c             	add    esp,0x2c
c001b36d:	5b                   	pop    ebx
c001b36e:	5e                   	pop    esi
c001b36f:	5f                   	pop    edi
c001b370:	5d                   	pop    ebp
c001b371:	e9 f2 f8 ff ff       	jmp    c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b376:	0f b6 c2             	movzx  eax,dl
c001b379:	83 f8 07             	cmp    eax,0x7
c001b37c:	77 12                	ja     c001b390 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b37e:	0f b6 db             	movzx  ebx,bl
c001b381:	0f b6 c2             	movzx  eax,dl
c001b384:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b38c:	01 c2                	add    edx,eax
c001b38e:	eb 2f                	jmp    c001b3bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b390:	83 f8 0d             	cmp    eax,0xd
c001b393:	77 13                	ja     c001b3a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b395:	0f b6 db             	movzx  ebx,bl
c001b398:	0f b6 d2             	movzx  edx,dl
c001b39b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b3a2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b3a6:	eb 17                	jmp    c001b3bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3a8:	83 f8 15             	cmp    eax,0x15
c001b3ab:	77 14                	ja     c001b3c1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b3ad:	0f b6 db             	movzx  ebx,bl
c001b3b0:	0f b6 d2             	movzx  edx,dl
c001b3b3:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b3bb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b3bf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b3c1:	83 c4 1c             	add    esp,0x1c
c001b3c4:	5b                   	pop    ebx
c001b3c5:	5e                   	pop    esi
c001b3c6:	5f                   	pop    edi
c001b3c7:	5d                   	pop    ebp
c001b3c8:	c3                   	ret    
c001b3c9:	90                   	nop

c001b3ca <IDE::detect()>:
c001b3ca:	55                   	push   ebp
c001b3cb:	57                   	push   edi
c001b3cc:	56                   	push   esi
c001b3cd:	53                   	push   ebx
c001b3ce:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b3d4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b3db:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b3e2:	0f 85 9e 02 00 00    	jne    c001b686 <IDE::detect()+0x2bc>
c001b3e8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b3ef:	31 f6                	xor    esi,esi
c001b3f1:	31 ff                	xor    edi,edi
c001b3f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b3fb:	89 f8                	mov    eax,edi
c001b3fd:	c1 e0 06             	shl    eax,0x6
c001b400:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b408:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b40c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b414:	c1 e0 04             	shl    eax,0x4
c001b417:	83 c8 a0             	or     eax,0xffffffa0
c001b41a:	0f b6 c0             	movzx  eax,al
c001b41d:	50                   	push   eax
c001b41e:	6a 06                	push   0x6
c001b420:	56                   	push   esi
c001b421:	53                   	push   ebx
c001b422:	e8 41 f8 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b427:	83 c4 0c             	add    esp,0xc
c001b42a:	6a 0c                	push   0xc
c001b42c:	56                   	push   esi
c001b42d:	53                   	push   ebx
c001b42e:	e8 f5 f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b433:	83 c4 0c             	add    esp,0xc
c001b436:	6a 0c                	push   0xc
c001b438:	56                   	push   esi
c001b439:	53                   	push   ebx
c001b43a:	e8 e9 f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b43f:	83 c4 0c             	add    esp,0xc
c001b442:	6a 0c                	push   0xc
c001b444:	56                   	push   esi
c001b445:	53                   	push   ebx
c001b446:	e8 dd f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b44b:	83 c4 0c             	add    esp,0xc
c001b44e:	6a 0c                	push   0xc
c001b450:	56                   	push   esi
c001b451:	53                   	push   ebx
c001b452:	e8 d1 f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b457:	68 ec 00 00 00       	push   0xec
c001b45c:	6a 07                	push   0x7
c001b45e:	56                   	push   esi
c001b45f:	53                   	push   ebx
c001b460:	e8 03 f8 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b465:	83 c4 1c             	add    esp,0x1c
c001b468:	6a 0c                	push   0xc
c001b46a:	56                   	push   esi
c001b46b:	53                   	push   ebx
c001b46c:	e8 b7 f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b471:	83 c4 0c             	add    esp,0xc
c001b474:	6a 0c                	push   0xc
c001b476:	56                   	push   esi
c001b477:	53                   	push   ebx
c001b478:	e8 ab f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b47d:	83 c4 0c             	add    esp,0xc
c001b480:	6a 0c                	push   0xc
c001b482:	56                   	push   esi
c001b483:	53                   	push   ebx
c001b484:	e8 9f f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b489:	83 c4 0c             	add    esp,0xc
c001b48c:	6a 0c                	push   0xc
c001b48e:	56                   	push   esi
c001b48f:	53                   	push   ebx
c001b490:	e8 93 f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b495:	83 c4 0c             	add    esp,0xc
c001b498:	6a 0c                	push   0xc
c001b49a:	56                   	push   esi
c001b49b:	53                   	push   ebx
c001b49c:	e8 87 f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b4a1:	83 c4 10             	add    esp,0x10
c001b4a4:	84 c0                	test   al,al
c001b4a6:	0f 84 61 01 00 00    	je     c001b60d <IDE::detect()+0x243>
c001b4ac:	31 ed                	xor    ebp,ebp
c001b4ae:	50                   	push   eax
c001b4af:	6a 0c                	push   0xc
c001b4b1:	56                   	push   esi
c001b4b2:	53                   	push   ebx
c001b4b3:	e8 70 f8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b4b8:	83 c4 10             	add    esp,0x10
c001b4bb:	a8 01                	test   al,0x1
c001b4bd:	0f 85 6b 01 00 00    	jne    c001b62e <IDE::detect()+0x264>
c001b4c3:	a8 80                	test   al,0x80
c001b4c5:	75 04                	jne    c001b4cb <IDE::detect()+0x101>
c001b4c7:	a8 08                	test   al,0x8
c001b4c9:	75 23                	jne    c001b4ee <IDE::detect()+0x124>
c001b4cb:	45                   	inc    ebp
c001b4cc:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b4d2:	7e da                	jle    c001b4ae <IDE::detect()+0xe4>
c001b4d4:	83 ec 0c             	sub    esp,0xc
c001b4d7:	6a 32                	push   0x32
c001b4d9:	e8 a2 9e ff ff       	call   c0015380 <milliTenthSleep(unsigned int)>
c001b4de:	83 c4 10             	add    esp,0x10
c001b4e1:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b4e7:	75 c5                	jne    c001b4ae <IDE::detect()+0xe4>
c001b4e9:	e9 40 01 00 00       	jmp    c001b62e <IDE::detect()+0x264>
c001b4ee:	31 c9                	xor    ecx,ecx
c001b4f0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b4f4:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b4f8:	83 ec 0c             	sub    esp,0xc
c001b4fb:	68 80 00 00 00       	push   0x80
c001b500:	55                   	push   ebp
c001b501:	6a 00                	push   0x0
c001b503:	56                   	push   esi
c001b504:	53                   	push   ebx
c001b505:	e8 f0 fd ff ff       	call   c001b2fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b50a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b50f:	89 f8                	mov    eax,edi
c001b511:	c1 e0 06             	shl    eax,0x6
c001b514:	01 d8                	add    eax,ebx
c001b516:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b51d:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b524:	89 d1                	mov    ecx,edx
c001b526:	89 f2                	mov    edx,esi
c001b528:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b52e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b532:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b53c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b543:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b54b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b552:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b55a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b560:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b567:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b56d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b571:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b575:	83 c4 20             	add    esp,0x20
c001b578:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b57b:	83 c5 02             	add    ebp,0x2
c001b57e:	83 c0 02             	add    eax,0x2
c001b581:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b587:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b58a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b590:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b594:	75 e2                	jne    c001b578 <IDE::detect()+0x1ae>
c001b596:	89 f8                	mov    eax,edi
c001b598:	c1 e0 06             	shl    eax,0x6
c001b59b:	01 d8                	add    eax,ebx
c001b59d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b5a4:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b5ab:	c1 ea 09             	shr    edx,0x9
c001b5ae:	83 e2 01             	and    edx,0x1
c001b5b1:	80 e1 01             	and    cl,0x1
c001b5b4:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b5ba:	75 22                	jne    c001b5de <IDE::detect()+0x214>
c001b5bc:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b5c3:	74 47                	je     c001b60c <IDE::detect()+0x242>
c001b5c5:	83 ec 0c             	sub    esp,0xc
c001b5c8:	68 7c 01 00 00       	push   0x17c
c001b5cd:	e8 f9 c4 fe ff       	call   c0007acb <malloc>
c001b5d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5d5:	89 c5                	mov    ebp,eax
c001b5d7:	e8 16 05 00 00       	call   c001baf2 <ATA::ATA()>
c001b5dc:	eb 17                	jmp    c001b5f5 <IDE::detect()+0x22b>
c001b5de:	83 ec 0c             	sub    esp,0xc
c001b5e1:	68 84 01 00 00       	push   0x184
c001b5e6:	e8 e0 c4 fe ff       	call   c0007acb <malloc>
c001b5eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5ee:	89 c5                	mov    ebp,eax
c001b5f0:	e8 6f 0e 00 00       	call   c001c464 <ATAPI::ATAPI()>
c001b5f5:	5a                   	pop    edx
c001b5f6:	59                   	pop    ecx
c001b5f7:	55                   	push   ebp
c001b5f8:	53                   	push   ebx
c001b5f9:	e8 02 08 ff ff       	call   c000be00 <Device::addChild(Device*)>
c001b5fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b601:	53                   	push   ebx
c001b602:	57                   	push   edi
c001b603:	6a 00                	push   0x0
c001b605:	55                   	push   ebp
c001b606:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b609:	83 c4 20             	add    esp,0x20
c001b60c:	47                   	inc    edi
c001b60d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b612:	74 0d                	je     c001b621 <IDE::detect()+0x257>
c001b614:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b61c:	e9 da fd ff ff       	jmp    c001b3fb <IDE::detect()+0x31>
c001b621:	4e                   	dec    esi
c001b622:	74 62                	je     c001b686 <IDE::detect()+0x2bc>
c001b624:	be 01 00 00 00       	mov    esi,0x1
c001b629:	e9 c5 fd ff ff       	jmp    c001b3f3 <IDE::detect()+0x29>
c001b62e:	50                   	push   eax
c001b62f:	6a 04                	push   0x4
c001b631:	56                   	push   esi
c001b632:	53                   	push   ebx
c001b633:	e8 f0 f6 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b638:	83 c4 0c             	add    esp,0xc
c001b63b:	6a 05                	push   0x5
c001b63d:	56                   	push   esi
c001b63e:	53                   	push   ebx
c001b63f:	89 c5                	mov    ebp,eax
c001b641:	e8 e2 f6 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b646:	89 e9                	mov    ecx,ebp
c001b648:	83 c4 10             	add    esp,0x10
c001b64b:	0f b6 e9             	movzx  ebp,cl
c001b64e:	83 fd 14             	cmp    ebp,0x14
c001b651:	74 2d                	je     c001b680 <IDE::detect()+0x2b6>
c001b653:	83 fd 69             	cmp    ebp,0x69
c001b656:	75 b5                	jne    c001b60d <IDE::detect()+0x243>
c001b658:	3c 96                	cmp    al,0x96
c001b65a:	75 b1                	jne    c001b60d <IDE::detect()+0x243>
c001b65c:	68 a1 00 00 00       	push   0xa1
c001b661:	6a 07                	push   0x7
c001b663:	56                   	push   esi
c001b664:	53                   	push   ebx
c001b665:	e8 fe f5 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b66a:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b671:	e8 0a 9d ff ff       	call   c0015380 <milliTenthSleep(unsigned int)>
c001b676:	83 c4 10             	add    esp,0x10
c001b679:	b1 01                	mov    cl,0x1
c001b67b:	e9 70 fe ff ff       	jmp    c001b4f0 <IDE::detect()+0x126>
c001b680:	3c eb                	cmp    al,0xeb
c001b682:	75 cf                	jne    c001b653 <IDE::detect()+0x289>
c001b684:	eb d6                	jmp    c001b65c <IDE::detect()+0x292>
c001b686:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b68c:	5b                   	pop    ebx
c001b68d:	5e                   	pop    esi
c001b68e:	5f                   	pop    edi
c001b68f:	5d                   	pop    ebp
c001b690:	c3                   	ret    
c001b691:	90                   	nop

c001b692 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b692:	55                   	push   ebp
c001b693:	57                   	push   edi
c001b694:	56                   	push   esi
c001b695:	53                   	push   ebx
c001b696:	83 ec 1c             	sub    esp,0x1c
c001b699:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b69d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b6a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b6a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b6ad:	88 c3                	mov    bl,al
c001b6af:	25 ff 00 00 00       	and    eax,0xff
c001b6b4:	0f 84 88 00 00 00    	je     c001b742 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6ba:	83 ec 0c             	sub    esp,0xc
c001b6bd:	89 c7                	mov    edi,eax
c001b6bf:	68 3f 1b 02 c0       	push   0xc0021b3f
c001b6c4:	e8 d5 f2 fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001b6c9:	83 c4 10             	add    esp,0x10
c001b6cc:	83 ff 01             	cmp    edi,0x1
c001b6cf:	74 6b                	je     c001b73c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b6d1:	83 ff 02             	cmp    edi,0x2
c001b6d4:	75 58                	jne    c001b72e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b6d6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b6db:	50                   	push   eax
c001b6dc:	6a 01                	push   0x1
c001b6de:	01 ff                	add    edi,edi
c001b6e0:	09 fe                	or     esi,edi
c001b6e2:	89 f0                	mov    eax,esi
c001b6e4:	0f b6 f0             	movzx  esi,al
c001b6e7:	c1 e6 06             	shl    esi,0x6
c001b6ea:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b6f2:	50                   	push   eax
c001b6f3:	55                   	push   ebp
c001b6f4:	e8 2f f6 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b6f9:	83 c4 10             	add    esp,0x10
c001b6fc:	a8 01                	test   al,0x1
c001b6fe:	74 02                	je     c001b702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b700:	b3 07                	mov    bl,0x7
c001b702:	a8 02                	test   al,0x2
c001b704:	74 02                	je     c001b708 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b706:	b3 03                	mov    bl,0x3
c001b708:	a8 04                	test   al,0x4
c001b70a:	74 02                	je     c001b70e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b70c:	b3 14                	mov    bl,0x14
c001b70e:	a8 08                	test   al,0x8
c001b710:	74 02                	je     c001b714 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b712:	b3 03                	mov    bl,0x3
c001b714:	a8 10                	test   al,0x10
c001b716:	74 02                	je     c001b71a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b718:	b3 15                	mov    bl,0x15
c001b71a:	a8 20                	test   al,0x20
c001b71c:	74 02                	je     c001b720 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b71e:	b3 03                	mov    bl,0x3
c001b720:	a8 40                	test   al,0x40
c001b722:	74 02                	je     c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b724:	b3 16                	mov    bl,0x16
c001b726:	a8 80                	test   al,0x80
c001b728:	74 18                	je     c001b742 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b72a:	b3 0d                	mov    bl,0xd
c001b72c:	eb 14                	jmp    c001b742 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b72e:	83 ff 03             	cmp    edi,0x3
c001b731:	74 0d                	je     c001b740 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b733:	83 ff 04             	cmp    edi,0x4
c001b736:	75 0a                	jne    c001b742 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b738:	b3 08                	mov    bl,0x8
c001b73a:	eb 06                	jmp    c001b742 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b73c:	b3 13                	mov    bl,0x13
c001b73e:	eb 02                	jmp    c001b742 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b740:	b3 17                	mov    bl,0x17
c001b742:	83 c4 1c             	add    esp,0x1c
c001b745:	88 d8                	mov    al,bl
c001b747:	5b                   	pop    ebx
c001b748:	5e                   	pop    esi
c001b749:	5f                   	pop    edi
c001b74a:	5d                   	pop    ebp
c001b74b:	c3                   	ret    

c001b74c <IDE::polling(unsigned char, unsigned int)>:
c001b74c:	57                   	push   edi
c001b74d:	56                   	push   esi
c001b74e:	53                   	push   ebx
c001b74f:	bb 04 00 00 00       	mov    ebx,0x4
c001b754:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b758:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b75d:	52                   	push   edx
c001b75e:	6a 0c                	push   0xc
c001b760:	56                   	push   esi
c001b761:	57                   	push   edi
c001b762:	e8 c1 f5 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b767:	83 c4 10             	add    esp,0x10
c001b76a:	4b                   	dec    ebx
c001b76b:	75 f0                	jne    c001b75d <IDE::polling(unsigned char, unsigned int)+0x11>
c001b76d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b772:	50                   	push   eax
c001b773:	6a 0c                	push   0xc
c001b775:	56                   	push   esi
c001b776:	57                   	push   edi
c001b777:	e8 ac f5 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001b77c:	83 c4 10             	add    esp,0x10
c001b77f:	a8 01                	test   al,0x1
c001b781:	75 17                	jne    c001b79a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b783:	a8 20                	test   al,0x20
c001b785:	75 0f                	jne    c001b796 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b787:	4b                   	dec    ebx
c001b788:	74 10                	je     c001b79a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b78a:	a8 80                	test   al,0x80
c001b78c:	75 e4                	jne    c001b772 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b78e:	a8 08                	test   al,0x8
c001b790:	74 e0                	je     c001b772 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b792:	31 c0                	xor    eax,eax
c001b794:	eb 06                	jmp    c001b79c <IDE::polling(unsigned char, unsigned int)+0x50>
c001b796:	b0 01                	mov    al,0x1
c001b798:	eb 02                	jmp    c001b79c <IDE::polling(unsigned char, unsigned int)+0x50>
c001b79a:	b0 02                	mov    al,0x2
c001b79c:	5b                   	pop    ebx
c001b79d:	5e                   	pop    esi
c001b79e:	5f                   	pop    edi
c001b79f:	c3                   	ret    

c001b7a0 <SATABus::close(int, int, void*)>:
c001b7a0:	31 c0                	xor    eax,eax
c001b7a2:	c3                   	ret    
c001b7a3:	90                   	nop

c001b7a4 <SATABus::detect()>:
c001b7a4:	c3                   	ret    
c001b7a5:	90                   	nop

c001b7a6 <SATABus::SATABus()>:
c001b7a6:	83 ec 0c             	sub    esp,0xc
c001b7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ad:	83 ec 08             	sub    esp,0x8
c001b7b0:	68 78 1b 02 c0       	push   0xc0021b78
c001b7b5:	50                   	push   eax
c001b7b6:	e8 89 09 ff ff       	call   c000c144 <HardDiskController::HardDiskController(char const*)>
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001b7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c7:	89 10                	mov    DWORD PTR [eax],edx
c001b7c9:	83 ec 0c             	sub    esp,0xc
c001b7cc:	6a 50                	push   0x50
c001b7ce:	e8 d2 c6 fe ff       	call   c0007ea5 <Phys::allocateContiguousPages(int)>
c001b7d3:	83 c4 10             	add    esp,0x10
c001b7d6:	89 c2                	mov    edx,eax
c001b7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b7e2:	83 ec 0c             	sub    esp,0xc
c001b7e5:	6a 50                	push   0x50
c001b7e7:	e8 19 de fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001b7ec:	83 c4 10             	add    esp,0x10
c001b7ef:	89 c2                	mov    edx,eax
c001b7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b7fb:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b800:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b804:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b80a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b80e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b814:	83 ec 0c             	sub    esp,0xc
c001b817:	6a 03                	push   0x3
c001b819:	6a 50                	push   0x50
c001b81b:	51                   	push   ecx
c001b81c:	52                   	push   edx
c001b81d:	50                   	push   eax
c001b81e:	e8 db e7 fe ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b823:	83 c4 20             	add    esp,0x20
c001b826:	90                   	nop
c001b827:	83 c4 0c             	add    esp,0xc
c001b82a:	c3                   	ret    
c001b82b:	90                   	nop

c001b82c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b82c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b830:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b833:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b836:	09 c2                	or     edx,eax
c001b838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b83c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b842:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b844:	31 c0                	xor    eax,eax
c001b846:	c1 e9 08             	shr    ecx,0x8
c001b849:	83 e1 0f             	and    ecx,0xf
c001b84c:	39 c8                	cmp    eax,ecx
c001b84e:	74 0a                	je     c001b85a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b850:	f6 c2 01             	test   dl,0x1
c001b853:	74 08                	je     c001b85d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b855:	d1 ea                	shr    edx,1
c001b857:	40                   	inc    eax
c001b858:	eb f2                	jmp    c001b84c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b85a:	83 c8 ff             	or     eax,0xffffffff
c001b85d:	c3                   	ret    

c001b85e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b85e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b862:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b865:	89 c2                	mov    edx,eax
c001b867:	c1 ea 08             	shr    edx,0x8
c001b86a:	83 e2 0f             	and    edx,0xf
c001b86d:	4a                   	dec    edx
c001b86e:	75 32                	jne    c001b8a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b870:	83 e0 0f             	and    eax,0xf
c001b873:	83 f8 03             	cmp    eax,0x3
c001b876:	75 2a                	jne    c001b8a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b878:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b87b:	b8 02 00 00 00       	mov    eax,0x2
c001b880:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b886:	74 1c                	je     c001b8a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b888:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b88e:	b8 04 00 00 00       	mov    eax,0x4
c001b893:	74 0f                	je     c001b8a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b895:	31 c0                	xor    eax,eax
c001b897:	83 fa 03             	cmp    edx,0x3
c001b89a:	0f 94 c0             	sete   al
c001b89d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b8a1:	c3                   	ret    
c001b8a2:	31 c0                	xor    eax,eax
c001b8a4:	c3                   	ret    
c001b8a5:	90                   	nop

c001b8a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8ad:	0f ba e2 0f          	bt     edx,0xf
c001b8b1:	72 f7                	jb     c001b8aa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b8b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8b6:	83 ca 10             	or     edx,0x10
c001b8b9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8bf:	83 ca 01             	or     edx,0x1
c001b8c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8c5:	c3                   	ret    

c001b8c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8cd:	83 e2 fe             	and    edx,0xfffffffe
c001b8d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8d6:	83 e2 ef             	and    edx,0xffffffef
c001b8d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8df:	0f ba e2 0e          	bt     edx,0xe
c001b8e3:	72 f7                	jb     c001b8dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8e8:	0f ba e2 0f          	bt     edx,0xf
c001b8ec:	72 ee                	jb     c001b8dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8ee:	c3                   	ret    
c001b8ef:	90                   	nop

c001b8f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b8f0:	55                   	push   ebp
c001b8f1:	57                   	push   edi
c001b8f2:	56                   	push   esi
c001b8f3:	53                   	push   ebx
c001b8f4:	83 ec 1c             	sub    esp,0x1c
c001b8f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b8fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8ff:	53                   	push   ebx
c001b900:	57                   	push   edi
c001b901:	e8 c0 ff ff ff       	call   c001b8c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b906:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b90a:	83 ec 0c             	sub    esp,0xc
c001b90d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b913:	c1 e5 0a             	shl    ebp,0xa
c001b916:	01 e8                	add    eax,ebp
c001b918:	89 03                	mov    DWORD PTR [ebx],eax
c001b91a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b91c:	68 00 04 00 00       	push   0x400
c001b921:	6a 00                	push   0x0
c001b923:	50                   	push   eax
c001b924:	e8 c7 4b fe ff       	call   c00004f0 <memset>
c001b929:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b92f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b933:	83 c4 1c             	add    esp,0x1c
c001b936:	01 e8                	add    eax,ebp
c001b938:	89 03                	mov    DWORD PTR [ebx],eax
c001b93a:	c1 e6 08             	shl    esi,0x8
c001b93d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b944:	81 c6 00 80 00 00    	add    esi,0x8000
c001b94a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b950:	01 f0                	add    eax,esi
c001b952:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b955:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b958:	68 00 01 00 00       	push   0x100
c001b95d:	6a 00                	push   0x0
c001b95f:	50                   	push   eax
c001b960:	e8 8b 4b fe ff       	call   c00004f0 <memset>
c001b965:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b96b:	31 d2                	xor    edx,edx
c001b96d:	01 f0                	add    eax,esi
c001b96f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b972:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b979:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b97f:	01 ee                	add    esi,ebp
c001b981:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	c1 e5 0d             	shl    ebp,0xd
c001b98b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b991:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b997:	83 c6 20             	add    esi,0x20
c001b99a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b99e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b9a4:	01 e8                	add    eax,ebp
c001b9a6:	01 d0                	add    eax,edx
c001b9a8:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b9ab:	52                   	push   edx
c001b9ac:	68 00 01 00 00       	push   0x100
c001b9b1:	6a 00                	push   0x0
c001b9b3:	50                   	push   eax
c001b9b4:	e8 37 4b fe ff       	call   c00004f0 <memset>
c001b9b9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b9bf:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b9c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9ca:	83 c4 10             	add    esp,0x10
c001b9cd:	01 e8                	add    eax,ebp
c001b9cf:	01 d0                	add    eax,edx
c001b9d1:	81 c2 00 01 00 00    	add    edx,0x100
c001b9d7:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b9da:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b9e0:	75 af                	jne    c001b991 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b9e2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9e9:	50                   	push   eax
c001b9ea:	50                   	push   eax
c001b9eb:	53                   	push   ebx
c001b9ec:	57                   	push   edi
c001b9ed:	e8 b4 fe ff ff       	call   c001b8a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b9f2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9f9:	83 c4 2c             	add    esp,0x2c
c001b9fc:	5b                   	pop    ebx
c001b9fd:	5e                   	pop    esi
c001b9fe:	5f                   	pop    edi
c001b9ff:	5d                   	pop    ebp
c001ba00:	c3                   	ret    
c001ba01:	90                   	nop

c001ba02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ba02:	55                   	push   ebp
c001ba03:	57                   	push   edi
c001ba04:	56                   	push   esi
c001ba05:	53                   	push   ebx
c001ba06:	31 db                	xor    ebx,ebx
c001ba08:	83 ec 0c             	sub    esp,0xc
c001ba0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba0f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ba13:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ba16:	f7 c7 01 00 00 00    	test   edi,0x1
c001ba1c:	74 7a                	je     c001ba98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba1e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba22:	89 d8                	mov    eax,ebx
c001ba24:	c1 e0 07             	shl    eax,0x7
c001ba27:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ba2e:	55                   	push   ebp
c001ba2f:	56                   	push   esi
c001ba30:	e8 29 fe ff ff       	call   c001b85e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba35:	5a                   	pop    edx
c001ba36:	59                   	pop    ecx
c001ba37:	83 f8 01             	cmp    eax,0x1
c001ba3a:	75 21                	jne    c001ba5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba3c:	50                   	push   eax
c001ba3d:	53                   	push   ebx
c001ba3e:	55                   	push   ebp
c001ba3f:	56                   	push   esi
c001ba40:	e8 ab fe ff ff       	call   c001b8f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba45:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ba4c:	e8 7a c0 fe ff       	call   c0007acb <malloc>
c001ba51:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba54:	89 c5                	mov    ebp,eax
c001ba56:	e8 c1 10 00 00       	call   c001cb1c <SATA::SATA()>
c001ba5b:	eb 24                	jmp    c001ba81 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ba5d:	83 f8 04             	cmp    eax,0x4
c001ba60:	75 36                	jne    c001ba98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba62:	51                   	push   ecx
c001ba63:	53                   	push   ebx
c001ba64:	55                   	push   ebp
c001ba65:	56                   	push   esi
c001ba66:	e8 85 fe ff ff       	call   c001b8f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba6b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba72:	e8 54 c0 fe ff       	call   c0007acb <malloc>
c001ba77:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba7a:	89 c5                	mov    ebp,eax
c001ba7c:	e8 f5 17 00 00       	call   c001d276 <SATAPI::SATAPI()>
c001ba81:	58                   	pop    eax
c001ba82:	5a                   	pop    edx
c001ba83:	55                   	push   ebp
c001ba84:	56                   	push   esi
c001ba85:	e8 76 03 ff ff       	call   c000be00 <Device::addChild(Device*)>
c001ba8a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba8d:	56                   	push   esi
c001ba8e:	6a 00                	push   0x0
c001ba90:	53                   	push   ebx
c001ba91:	55                   	push   ebp
c001ba92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba95:	83 c4 20             	add    esp,0x20
c001ba98:	d1 ef                	shr    edi,1
c001ba9a:	43                   	inc    ebx
c001ba9b:	83 fb 20             	cmp    ebx,0x20
c001ba9e:	0f 85 72 ff ff ff    	jne    c001ba16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001baa4:	83 c4 0c             	add    esp,0xc
c001baa7:	5b                   	pop    ebx
c001baa8:	5e                   	pop    esi
c001baa9:	5f                   	pop    edi
c001baaa:	5d                   	pop    ebp
c001baab:	c3                   	ret    

c001baac <SATABus::open(int, int, void*)>:
c001baac:	83 ec 14             	sub    esp,0x14
c001baaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bab3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bab9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001babf:	52                   	push   edx
c001bac0:	50                   	push   eax
c001bac1:	e8 3c ff ff ff       	call   c001ba02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bac6:	31 c0                	xor    eax,eax
c001bac8:	83 c4 1c             	add    esp,0x1c
c001bacb:	c3                   	ret    

c001bacc <ATA::close(int, int, void*)>:
c001bacc:	83 ec 0c             	sub    esp,0xc
c001bacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bad9:	85 c0                	test   eax,eax
c001badb:	74 0c                	je     c001bae9 <ATA::close(int, int, void*)+0x1d>
c001badd:	8b 10                	mov    edx,DWORD PTR [eax]
c001badf:	83 ec 0c             	sub    esp,0xc
c001bae2:	50                   	push   eax
c001bae3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bae6:	83 c4 10             	add    esp,0x10
c001bae9:	31 c0                	xor    eax,eax
c001baeb:	83 c4 0c             	add    esp,0xc
c001baee:	c3                   	ret    
c001baef:	90                   	nop

c001baf0 <ATA::powerSaving(PowerSavingLevel)>:
c001baf0:	c3                   	ret    
c001baf1:	90                   	nop

c001baf2 <ATA::ATA()>:
c001baf2:	83 ec 0c             	sub    esp,0xc
c001baf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf9:	83 ec 04             	sub    esp,0x4
c001bafc:	68 00 02 00 00       	push   0x200
c001bb01:	68 71 1c 02 c0       	push   0xc0021c71
c001bb06:	50                   	push   eax
c001bb07:	e8 c2 06 ff ff       	call   c000c1ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001bb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb18:	89 10                	mov    DWORD PTR [eax],edx
c001bb1a:	90                   	nop
c001bb1b:	83 c4 0c             	add    esp,0xc
c001bb1e:	c3                   	ret    
c001bb1f:	90                   	nop

c001bb20 <ATA::flush(bool)>:
c001bb20:	53                   	push   ebx
c001bb21:	83 ec 08             	sub    esp,0x8
c001bb24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb2d:	83 f8 01             	cmp    eax,0x1
c001bb30:	19 c0                	sbb    eax,eax
c001bb32:	83 e0 fd             	and    eax,0xfffffffd
c001bb35:	05 ea 00 00 00       	add    eax,0xea
c001bb3a:	50                   	push   eax
c001bb3b:	6a 07                	push   0x7
c001bb3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb44:	50                   	push   eax
c001bb45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb4b:	e8 18 f1 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb50:	83 c4 0c             	add    esp,0xc
c001bb53:	6a 00                	push   0x0
c001bb55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb5c:	50                   	push   eax
c001bb5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb63:	e8 e4 fb ff ff       	call   c001b74c <IDE::polling(unsigned char, unsigned int)>
c001bb68:	83 c4 18             	add    esp,0x18
c001bb6b:	5b                   	pop    ebx
c001bb6c:	c3                   	ret    
c001bb6d:	90                   	nop

c001bb6e <ATA::readyForCommand()>:
c001bb6e:	56                   	push   esi
c001bb6f:	53                   	push   ebx
c001bb70:	53                   	push   ebx
c001bb71:	31 db                	xor    ebx,ebx
c001bb73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb77:	51                   	push   ecx
c001bb78:	6a 0c                	push   0xc
c001bb7a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb81:	50                   	push   eax
c001bb82:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb88:	e8 9b f1 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001bb8d:	83 c4 10             	add    esp,0x10
c001bb90:	a8 88                	test   al,0x88
c001bb92:	74 1f                	je     c001bbb3 <ATA::readyForCommand()+0x45>
c001bb94:	43                   	inc    ebx
c001bb95:	83 fb 63             	cmp    ebx,0x63
c001bb98:	7e dd                	jle    c001bb77 <ATA::readyForCommand()+0x9>
c001bb9a:	83 ec 0c             	sub    esp,0xc
c001bb9d:	6a 0a                	push   0xa
c001bb9f:	e8 dc 97 ff ff       	call   c0015380 <milliTenthSleep(unsigned int)>
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bbad:	75 c8                	jne    c001bb77 <ATA::readyForCommand()+0x9>
c001bbaf:	31 c0                	xor    eax,eax
c001bbb1:	eb 02                	jmp    c001bbb5 <ATA::readyForCommand()+0x47>
c001bbb3:	b0 01                	mov    al,0x1
c001bbb5:	5a                   	pop    edx
c001bbb6:	5b                   	pop    ebx
c001bbb7:	5e                   	pop    esi
c001bbb8:	c3                   	ret    
c001bbb9:	90                   	nop

c001bbba <ATA::access(unsigned long long, int, void*, bool)>:
c001bbba:	55                   	push   ebp
c001bbbb:	57                   	push   edi
c001bbbc:	56                   	push   esi
c001bbbd:	53                   	push   ebx
c001bbbe:	83 ec 2c             	sub    esp,0x2c
c001bbc1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bbc5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bbc9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bbcd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bbd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbd5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bbd9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bbdd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bbe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbe7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bbed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbf1:	c1 e0 06             	shl    eax,0x6
c001bbf4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bbfc:	74 5b                	je     c001bc59 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bbfe:	89 fa                	mov    edx,edi
c001bc00:	89 f0                	mov    eax,esi
c001bc02:	c1 ea 1c             	shr    edx,0x1c
c001bc05:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bc09:	89 d1                	mov    ecx,edx
c001bc0b:	09 c1                	or     ecx,eax
c001bc0d:	74 25                	je     c001bc34 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bc0f:	31 ed                	xor    ebp,ebp
c001bc11:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bc18:	89 fa                	mov    edx,edi
c001bc1a:	89 f0                	mov    eax,esi
c001bc1c:	0f ad d0             	shrd   eax,edx,cl
c001bc1f:	d3 ea                	shr    edx,cl
c001bc21:	f6 c1 20             	test   cl,0x20
c001bc24:	74 02                	je     c001bc28 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bc26:	89 d0                	mov    eax,edx
c001bc28:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bc2c:	45                   	inc    ebp
c001bc2d:	83 fd 06             	cmp    ebp,0x6
c001bc30:	75 df                	jne    c001bc11 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc32:	eb 71                	jmp    c001bca5 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bc34:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc39:	89 f0                	mov    eax,esi
c001bc3b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc42:	0f ac f8 10          	shrd   eax,edi,0x10
c001bc46:	bf 01 00 00 00       	mov    edi,0x1
c001bc4b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bc4f:	c1 ee 18             	shr    esi,0x18
c001bc52:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc57:	eb 53                	jmp    c001bcac <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc59:	6a 00                	push   0x0
c001bc5b:	6a 3f                	push   0x3f
c001bc5d:	57                   	push   edi
c001bc5e:	56                   	push   esi
c001bc5f:	e8 cc 2a 00 00       	call   c001e730 <__umoddi3>
c001bc64:	83 c4 10             	add    esp,0x10
c001bc67:	40                   	inc    eax
c001bc68:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc6c:	6a 00                	push   0x0
c001bc6e:	68 f0 03 00 00       	push   0x3f0
c001bc73:	57                   	push   edi
c001bc74:	56                   	push   esi
c001bc75:	e8 b6 29 00 00       	call   c001e630 <__udivdi3>
c001bc7a:	83 c4 10             	add    esp,0x10
c001bc7d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc82:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc89:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc8e:	6a 00                	push   0x0
c001bc90:	6a 3f                	push   0x3f
c001bc92:	57                   	push   edi
c001bc93:	31 ff                	xor    edi,edi
c001bc95:	56                   	push   esi
c001bc96:	e8 95 29 00 00       	call   c001e630 <__udivdi3>
c001bc9b:	83 c4 10             	add    esp,0x10
c001bc9e:	83 e0 0f             	and    eax,0xf
c001bca1:	89 c6                	mov    esi,eax
c001bca3:	eb 07                	jmp    c001bcac <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bca5:	31 f6                	xor    esi,esi
c001bca7:	bf 02 00 00 00       	mov    edi,0x2
c001bcac:	50                   	push   eax
c001bcad:	6a 00                	push   0x0
c001bcaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcb6:	50                   	push   eax
c001bcb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bcbb:	e8 b6 f1 ff ff       	call   c001ae76 <IDE::enableIRQs(unsigned char, bool)>
c001bcc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcc3:	e8 a6 fe ff ff       	call   c001bb6e <ATA::readyForCommand()>
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	84 c0                	test   al,al
c001bccd:	75 0a                	jne    c001bcd9 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bccf:	be 01 00 00 00       	mov    esi,0x1
c001bcd4:	e9 9b 02 00 00       	jmp    c001bf74 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bcd9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bcdf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bce5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bcec:	c1 e0 04             	shl    eax,0x4
c001bcef:	09 c6                	or     esi,eax
c001bcf1:	f7 c7 03 00 00 00    	test   edi,0x3
c001bcf7:	75 05                	jne    c001bcfe <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bcf9:	83 ce a0             	or     esi,0xffffffa0
c001bcfc:	eb 03                	jmp    c001bd01 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bcfe:	83 ce e0             	or     esi,0xffffffe0
c001bd01:	89 f0                	mov    eax,esi
c001bd03:	0f b6 f0             	movzx  esi,al
c001bd06:	56                   	push   esi
c001bd07:	6a 06                	push   0x6
c001bd09:	51                   	push   ecx
c001bd0a:	52                   	push   edx
c001bd0b:	e8 58 ef ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd10:	83 c4 10             	add    esp,0x10
c001bd13:	6a 00                	push   0x0
c001bd15:	6a 01                	push   0x1
c001bd17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd1e:	50                   	push   eax
c001bd1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd25:	e8 3e ef ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd2a:	89 f8                	mov    eax,edi
c001bd2c:	83 c4 10             	add    esp,0x10
c001bd2f:	0f b6 f0             	movzx  esi,al
c001bd32:	83 fe 02             	cmp    esi,0x2
c001bd35:	75 6e                	jne    c001bda5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bd37:	6a 00                	push   0x0
c001bd39:	6a 08                	push   0x8
c001bd3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd42:	50                   	push   eax
c001bd43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd49:	e8 1a ef ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd4e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bd53:	50                   	push   eax
c001bd54:	6a 09                	push   0x9
c001bd56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd5d:	50                   	push   eax
c001bd5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd64:	e8 ff ee ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd69:	83 c4 20             	add    esp,0x20
c001bd6c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd71:	50                   	push   eax
c001bd72:	6a 0a                	push   0xa
c001bd74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd7b:	50                   	push   eax
c001bd7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd82:	e8 e1 ee ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd87:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd8c:	50                   	push   eax
c001bd8d:	6a 0b                	push   0xb
c001bd8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd96:	50                   	push   eax
c001bd97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd9d:	e8 c6 ee ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda2:	83 c4 20             	add    esp,0x20
c001bda5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bdaa:	50                   	push   eax
c001bdab:	6a 02                	push   0x2
c001bdad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdb4:	50                   	push   eax
c001bdb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdbb:	e8 a8 ee ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bdc5:	50                   	push   eax
c001bdc6:	6a 03                	push   0x3
c001bdc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdcf:	50                   	push   eax
c001bdd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdd6:	e8 8d ee ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bddb:	83 c4 20             	add    esp,0x20
c001bdde:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bde3:	50                   	push   eax
c001bde4:	6a 04                	push   0x4
c001bde6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bded:	50                   	push   eax
c001bdee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdf4:	e8 6f ee ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bdfe:	50                   	push   eax
c001bdff:	6a 05                	push   0x5
c001be01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be08:	50                   	push   eax
c001be09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be0f:	e8 54 ee ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be14:	83 c4 20             	add    esp,0x20
c001be17:	83 fe 02             	cmp    esi,0x2
c001be1a:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001be1f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001be24:	85 c9                	test   ecx,ecx
c001be26:	74 07                	je     c001be2f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001be28:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be2d:	75 47                	jne    c001be76 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001be2f:	89 f8                	mov    eax,edi
c001be31:	0f b6 f8             	movzx  edi,al
c001be34:	31 c0                	xor    eax,eax
c001be36:	83 ff 02             	cmp    edi,0x2
c001be39:	0f 95 c0             	setne  al
c001be3c:	89 c6                	mov    esi,eax
c001be3e:	74 0c                	je     c001be4c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001be40:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be45:	b8 30 00 00 00       	mov    eax,0x30
c001be4a:	75 2f                	jne    c001be7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be50:	83 f2 01             	xor    edx,0x1
c001be53:	85 c9                	test   ecx,ecx
c001be55:	74 09                	je     c001be60 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001be57:	84 d2                	test   dl,dl
c001be59:	b8 24 00 00 00       	mov    eax,0x24
c001be5e:	75 1b                	jne    c001be7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be60:	85 f6                	test   esi,esi
c001be62:	0f 84 67 fe ff ff    	je     c001bccf <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be68:	84 d2                	test   dl,dl
c001be6a:	b8 20 00 00 00       	mov    eax,0x20
c001be6f:	75 0a                	jne    c001be7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be71:	e9 59 fe ff ff       	jmp    c001bccf <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be76:	b8 34 00 00 00       	mov    eax,0x34
c001be7b:	50                   	push   eax
c001be7c:	6a 07                	push   0x7
c001be7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be85:	50                   	push   eax
c001be86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be8c:	e8 d7 ed ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be91:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001be95:	83 c4 10             	add    esp,0x10
c001be98:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001be9d:	85 f6                	test   esi,esi
c001be9f:	0f 84 b5 00 00 00    	je     c001bf5a <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001bea5:	50                   	push   eax
c001bea6:	6a 01                	push   0x1
c001bea8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001beaf:	50                   	push   eax
c001beb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001beb6:	e8 91 f8 ff ff       	call   c001b74c <IDE::polling(unsigned char, unsigned int)>
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bec4:	0f b6 c0             	movzx  eax,al
c001bec7:	85 c0                	test   eax,eax
c001bec9:	74 1f                	je     c001beea <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001becb:	50                   	push   eax
c001becc:	89 c6                	mov    esi,eax
c001bece:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001bed5:	0f b6 d2             	movzx  edx,dl
c001bed8:	50                   	push   eax
c001bed9:	52                   	push   edx
c001beda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bee0:	e8 ad f7 ff ff       	call   c001b692 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bee5:	e9 87 00 00 00       	jmp    c001bf71 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001beea:	85 ed                	test   ebp,ebp
c001beec:	74 3b                	je     c001bf29 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001beee:	31 ff                	xor    edi,edi
c001bef0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bef4:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001bef8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001befd:	50                   	push   eax
c001befe:	50                   	push   eax
c001beff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf06:	50                   	push   eax
c001bf07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf0d:	e8 44 ed ff ff       	call   c001ac56 <IDE::getBase(unsigned char)>
c001bf12:	89 c2                	mov    edx,eax
c001bf14:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bf19:	66 ef                	out    dx,ax
c001bf1b:	47                   	inc    edi
c001bf1c:	83 c4 10             	add    esp,0x10
c001bf1f:	81 ff 00 01 00 00    	cmp    edi,0x100
c001bf25:	75 c9                	jne    c001bef0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001bf27:	eb 23                	jmp    c001bf4c <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bf29:	51                   	push   ecx
c001bf2a:	0f b6 d2             	movzx  edx,dl
c001bf2d:	51                   	push   ecx
c001bf2e:	52                   	push   edx
c001bf2f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf35:	e8 1c ed ff ff       	call   c001ac56 <IDE::getBase(unsigned char)>
c001bf3a:	b9 00 01 00 00       	mov    ecx,0x100
c001bf3f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf43:	89 c2                	mov    edx,eax
c001bf45:	fc                   	cld    
c001bf46:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf54:	4e                   	dec    esi
c001bf55:	e9 43 ff ff ff       	jmp    c001be9d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001bf5a:	31 f6                	xor    esi,esi
c001bf5c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf61:	74 11                	je     c001bf74 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bf63:	50                   	push   eax
c001bf64:	50                   	push   eax
c001bf65:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf6a:	50                   	push   eax
c001bf6b:	53                   	push   ebx
c001bf6c:	e8 af fb ff ff       	call   c001bb20 <ATA::flush(bool)>
c001bf71:	83 c4 10             	add    esp,0x10
c001bf74:	83 c4 2c             	add    esp,0x2c
c001bf77:	89 f0                	mov    eax,esi
c001bf79:	5b                   	pop    ebx
c001bf7a:	5e                   	pop    esi
c001bf7b:	5f                   	pop    edi
c001bf7c:	5d                   	pop    ebp
c001bf7d:	c3                   	ret    

c001bf7e <ATA::detectCHS()>:
c001bf7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf82:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf88:	c1 e0 06             	shl    eax,0x6
c001bf8b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf91:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf9b:	c7 44 24 04 c8 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bc8
c001bfa3:	e9 c1 48 ff ff       	jmp    c0010869 <KePanic(char const*)>

c001bfa8 <ATA::open(int, int, void*)>:
c001bfa8:	53                   	push   ebx
c001bfa9:	83 ec 08             	sub    esp,0x8
c001bfac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfb8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bfbe:	c1 e0 06             	shl    eax,0x6
c001bfc1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bfc7:	01 d0                	add    eax,edx
c001bfc9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bfd0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bfd6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bfdd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bfe7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bfee:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bff4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bffb:	75 0c                	jne    c001c009 <ATA::open(int, int, void*)+0x61>
c001bffd:	83 ec 0c             	sub    esp,0xc
c001c000:	53                   	push   ebx
c001c001:	e8 78 ff ff ff       	call   c001bf7e <ATA::detectCHS()>
c001c006:	83 c4 10             	add    esp,0x10
c001c009:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c00f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c015:	c1 e0 06             	shl    eax,0x6
c001c018:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c01f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c029:	d1 e8                	shr    eax,1
c001c02b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c031:	6a 04                	push   0x4
c001c033:	6a 0c                	push   0xc
c001c035:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c03c:	50                   	push   eax
c001c03d:	52                   	push   edx
c001c03e:	e8 25 ec ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c043:	90                   	nop
c001c044:	90                   	nop
c001c045:	6a 00                	push   0x0
c001c047:	6a 0c                	push   0xc
c001c049:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c050:	50                   	push   eax
c001c051:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c057:	e8 0c ec ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c05c:	83 c4 14             	add    esp,0x14
c001c05f:	53                   	push   ebx
c001c060:	e8 d1 01 ff ff       	call   c000c236 <PhysicalDisk::startCache()>
c001c065:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c068:	e8 15 14 ff ff       	call   c000d482 <createPartitionsForDisk(PhysicalDisk*)>
c001c06d:	83 c4 18             	add    esp,0x18
c001c070:	31 c0                	xor    eax,eax
c001c072:	5b                   	pop    ebx
c001c073:	c3                   	ret    

c001c074 <combineCharAndColour(char, unsigned char)>:
c001c074:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c079:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c07f:	c1 e0 08             	shl    eax,0x8
c001c082:	09 d0                	or     eax,edx
c001c084:	c3                   	ret    

c001c085 <combineColours(unsigned char, unsigned char)>:
c001c085:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c08a:	c1 e0 04             	shl    eax,0x4
c001c08d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c091:	c3                   	ret    

c001c092 <ATA::read(unsigned long long, int, void*)>:
c001c092:	55                   	push   ebp
c001c093:	57                   	push   edi
c001c094:	56                   	push   esi
c001c095:	be 04 00 00 00       	mov    esi,0x4
c001c09a:	53                   	push   ebx
c001c09b:	83 ec 0c             	sub    esp,0xc
c001c09e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c0a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0aa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c0ae:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c0b1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c0b7:	0f 87 a1 01 00 00    	ja     c001c25e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0bd:	85 c9                	test   ecx,ecx
c001c0bf:	be 06 00 00 00       	mov    esi,0x6
c001c0c4:	0f 84 94 01 00 00    	je     c001c25e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0ca:	55                   	push   ebp
c001c0cb:	55                   	push   ebp
c001c0cc:	6a 00                	push   0x0
c001c0ce:	51                   	push   ecx
c001c0cf:	53                   	push   ebx
c001c0d0:	52                   	push   edx
c001c0d1:	50                   	push   eax
c001c0d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0d6:	e8 df fa ff ff       	call   c001bbba <ATA::access(unsigned long long, int, void*, bool)>
c001c0db:	83 c4 20             	add    esp,0x20
c001c0de:	85 c0                	test   eax,eax
c001c0e0:	89 c6                	mov    esi,eax
c001c0e2:	0f 85 71 01 00 00    	jne    c001c259 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c0e8:	50                   	push   eax
c001c0e9:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0ee:	50                   	push   eax
c001c0ef:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c0f5:	6a 0f                	push   0xf
c001c0f7:	6a 00                	push   0x0
c001c0f9:	89 da                	mov    edx,ebx
c001c0fb:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c101:	e8 7f ff ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001c106:	59                   	pop    ecx
c001c107:	b9 0a 00 00 00       	mov    ecx,0xa
c001c10c:	5b                   	pop    ebx
c001c10d:	0f b6 d8             	movzx  ebx,al
c001c110:	89 d0                	mov    eax,edx
c001c112:	53                   	push   ebx
c001c113:	99                   	cdq    
c001c114:	f7 fd                	idiv   ebp
c001c116:	99                   	cdq    
c001c117:	f7 f9                	idiv   ecx
c001c119:	83 c2 30             	add    edx,0x30
c001c11c:	0f b6 d2             	movzx  edx,dl
c001c11f:	52                   	push   edx
c001c120:	e8 4f ff ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c125:	5f                   	pop    edi
c001c126:	bf e8 03 00 00       	mov    edi,0x3e8
c001c12b:	5a                   	pop    edx
c001c12c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c132:	53                   	push   ebx
c001c133:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c138:	99                   	cdq    
c001c139:	f7 ff                	idiv   edi
c001c13b:	99                   	cdq    
c001c13c:	f7 f9                	idiv   ecx
c001c13e:	8d 42 30             	lea    eax,[edx+0x30]
c001c141:	0f b6 c0             	movzx  eax,al
c001c144:	50                   	push   eax
c001c145:	e8 2a ff ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c14a:	5f                   	pop    edi
c001c14b:	bf 64 00 00 00       	mov    edi,0x64
c001c150:	5a                   	pop    edx
c001c151:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c157:	53                   	push   ebx
c001c158:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c15d:	99                   	cdq    
c001c15e:	f7 ff                	idiv   edi
c001c160:	99                   	cdq    
c001c161:	f7 f9                	idiv   ecx
c001c163:	8d 42 30             	lea    eax,[edx+0x30]
c001c166:	0f b6 c0             	movzx  eax,al
c001c169:	50                   	push   eax
c001c16a:	e8 05 ff ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c16f:	5a                   	pop    edx
c001c170:	5a                   	pop    edx
c001c171:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c177:	53                   	push   ebx
c001c178:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c17d:	99                   	cdq    
c001c17e:	f7 f9                	idiv   ecx
c001c180:	99                   	cdq    
c001c181:	f7 f9                	idiv   ecx
c001c183:	8d 42 30             	lea    eax,[edx+0x30]
c001c186:	0f b6 c0             	movzx  eax,al
c001c189:	50                   	push   eax
c001c18a:	e8 e5 fe ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c18f:	5a                   	pop    edx
c001c190:	5a                   	pop    edx
c001c191:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c197:	53                   	push   ebx
c001c198:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c19d:	99                   	cdq    
c001c19e:	f7 f9                	idiv   ecx
c001c1a0:	83 c2 30             	add    edx,0x30
c001c1a3:	0f b6 d2             	movzx  edx,dl
c001c1a6:	52                   	push   edx
c001c1a7:	e8 c8 fe ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c1ac:	5a                   	pop    edx
c001c1ad:	5a                   	pop    edx
c001c1ae:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1b4:	53                   	push   ebx
c001c1b5:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1ba:	99                   	cdq    
c001c1bb:	f7 fd                	idiv   ebp
c001c1bd:	99                   	cdq    
c001c1be:	f7 f9                	idiv   ecx
c001c1c0:	8d 42 30             	lea    eax,[edx+0x30]
c001c1c3:	0f b6 c0             	movzx  eax,al
c001c1c6:	50                   	push   eax
c001c1c7:	e8 a8 fe ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c1cc:	5d                   	pop    ebp
c001c1cd:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1d2:	5a                   	pop    edx
c001c1d3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1d9:	53                   	push   ebx
c001c1da:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1df:	99                   	cdq    
c001c1e0:	f7 fd                	idiv   ebp
c001c1e2:	99                   	cdq    
c001c1e3:	f7 f9                	idiv   ecx
c001c1e5:	8d 42 30             	lea    eax,[edx+0x30]
c001c1e8:	0f b6 c0             	movzx  eax,al
c001c1eb:	50                   	push   eax
c001c1ec:	e8 83 fe ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c1f1:	5d                   	pop    ebp
c001c1f2:	5a                   	pop    edx
c001c1f3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c1f9:	53                   	push   ebx
c001c1fa:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1ff:	99                   	cdq    
c001c200:	f7 ff                	idiv   edi
c001c202:	99                   	cdq    
c001c203:	f7 f9                	idiv   ecx
c001c205:	8d 42 30             	lea    eax,[edx+0x30]
c001c208:	0f b6 c0             	movzx  eax,al
c001c20b:	50                   	push   eax
c001c20c:	e8 63 fe ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c211:	5f                   	pop    edi
c001c212:	5d                   	pop    ebp
c001c213:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c219:	53                   	push   ebx
c001c21a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c21f:	99                   	cdq    
c001c220:	f7 f9                	idiv   ecx
c001c222:	99                   	cdq    
c001c223:	f7 f9                	idiv   ecx
c001c225:	8d 42 30             	lea    eax,[edx+0x30]
c001c228:	0f b6 c0             	movzx  eax,al
c001c22b:	50                   	push   eax
c001c22c:	e8 43 fe ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c231:	5a                   	pop    edx
c001c232:	5f                   	pop    edi
c001c233:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c239:	53                   	push   ebx
c001c23a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c23f:	99                   	cdq    
c001c240:	f7 f9                	idiv   ecx
c001c242:	83 c2 30             	add    edx,0x30
c001c245:	0f b6 d2             	movzx  edx,dl
c001c248:	52                   	push   edx
c001c249:	e8 26 fe ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c257:	eb 05                	jmp    c001c25e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c259:	be 01 00 00 00       	mov    esi,0x1
c001c25e:	83 c4 0c             	add    esp,0xc
c001c261:	89 f0                	mov    eax,esi
c001c263:	5b                   	pop    ebx
c001c264:	5e                   	pop    esi
c001c265:	5f                   	pop    edi
c001c266:	5d                   	pop    ebp
c001c267:	c3                   	ret    

c001c268 <ATA::write(unsigned long long, int, void*)>:
c001c268:	55                   	push   ebp
c001c269:	57                   	push   edi
c001c26a:	56                   	push   esi
c001c26b:	be 04 00 00 00       	mov    esi,0x4
c001c270:	53                   	push   ebx
c001c271:	83 ec 0c             	sub    esp,0xc
c001c274:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c278:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c27c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c280:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c284:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c287:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c28d:	0f 87 9c 01 00 00    	ja     c001c42f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c293:	85 c9                	test   ecx,ecx
c001c295:	be 06 00 00 00       	mov    esi,0x6
c001c29a:	0f 84 8f 01 00 00    	je     c001c42f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2a0:	55                   	push   ebp
c001c2a1:	55                   	push   ebp
c001c2a2:	6a 01                	push   0x1
c001c2a4:	51                   	push   ecx
c001c2a5:	53                   	push   ebx
c001c2a6:	52                   	push   edx
c001c2a7:	50                   	push   eax
c001c2a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2ac:	e8 09 f9 ff ff       	call   c001bbba <ATA::access(unsigned long long, int, void*, bool)>
c001c2b1:	83 c4 20             	add    esp,0x20
c001c2b4:	85 c0                	test   eax,eax
c001c2b6:	89 c6                	mov    esi,eax
c001c2b8:	0f 85 6c 01 00 00    	jne    c001c42a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c2be:	50                   	push   eax
c001c2bf:	bd 10 27 00 00       	mov    ebp,0x2710
c001c2c4:	50                   	push   eax
c001c2c5:	6a 0f                	push   0xf
c001c2c7:	6a 00                	push   0x0
c001c2c9:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c2cf:	e8 b1 fd ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001c2d4:	5a                   	pop    edx
c001c2d5:	59                   	pop    ecx
c001c2d6:	b9 0a 00 00 00       	mov    ecx,0xa
c001c2db:	0f b6 d8             	movzx  ebx,al
c001c2de:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2e3:	53                   	push   ebx
c001c2e4:	99                   	cdq    
c001c2e5:	f7 fd                	idiv   ebp
c001c2e7:	99                   	cdq    
c001c2e8:	f7 f9                	idiv   ecx
c001c2ea:	8d 42 30             	lea    eax,[edx+0x30]
c001c2ed:	0f b6 c0             	movzx  eax,al
c001c2f0:	50                   	push   eax
c001c2f1:	e8 7e fd ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c2f6:	5f                   	pop    edi
c001c2f7:	bf e8 03 00 00       	mov    edi,0x3e8
c001c2fc:	5a                   	pop    edx
c001c2fd:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c303:	53                   	push   ebx
c001c304:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c309:	99                   	cdq    
c001c30a:	f7 ff                	idiv   edi
c001c30c:	99                   	cdq    
c001c30d:	f7 f9                	idiv   ecx
c001c30f:	8d 42 30             	lea    eax,[edx+0x30]
c001c312:	0f b6 c0             	movzx  eax,al
c001c315:	50                   	push   eax
c001c316:	e8 59 fd ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c31b:	5f                   	pop    edi
c001c31c:	bf 64 00 00 00       	mov    edi,0x64
c001c321:	5a                   	pop    edx
c001c322:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c328:	53                   	push   ebx
c001c329:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c32e:	99                   	cdq    
c001c32f:	f7 ff                	idiv   edi
c001c331:	99                   	cdq    
c001c332:	f7 f9                	idiv   ecx
c001c334:	8d 42 30             	lea    eax,[edx+0x30]
c001c337:	0f b6 c0             	movzx  eax,al
c001c33a:	50                   	push   eax
c001c33b:	e8 34 fd ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c340:	5a                   	pop    edx
c001c341:	5a                   	pop    edx
c001c342:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c348:	53                   	push   ebx
c001c349:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c34e:	99                   	cdq    
c001c34f:	f7 f9                	idiv   ecx
c001c351:	99                   	cdq    
c001c352:	f7 f9                	idiv   ecx
c001c354:	8d 42 30             	lea    eax,[edx+0x30]
c001c357:	0f b6 c0             	movzx  eax,al
c001c35a:	50                   	push   eax
c001c35b:	e8 14 fd ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c360:	5a                   	pop    edx
c001c361:	5a                   	pop    edx
c001c362:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c368:	53                   	push   ebx
c001c369:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c36e:	99                   	cdq    
c001c36f:	f7 f9                	idiv   ecx
c001c371:	83 c2 30             	add    edx,0x30
c001c374:	0f b6 d2             	movzx  edx,dl
c001c377:	52                   	push   edx
c001c378:	e8 f7 fc ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c37d:	5a                   	pop    edx
c001c37e:	5a                   	pop    edx
c001c37f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c385:	53                   	push   ebx
c001c386:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c38b:	99                   	cdq    
c001c38c:	f7 fd                	idiv   ebp
c001c38e:	99                   	cdq    
c001c38f:	f7 f9                	idiv   ecx
c001c391:	8d 42 30             	lea    eax,[edx+0x30]
c001c394:	0f b6 c0             	movzx  eax,al
c001c397:	50                   	push   eax
c001c398:	e8 d7 fc ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c39d:	5d                   	pop    ebp
c001c39e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c3a3:	5a                   	pop    edx
c001c3a4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3aa:	53                   	push   ebx
c001c3ab:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3b0:	99                   	cdq    
c001c3b1:	f7 fd                	idiv   ebp
c001c3b3:	99                   	cdq    
c001c3b4:	f7 f9                	idiv   ecx
c001c3b6:	8d 42 30             	lea    eax,[edx+0x30]
c001c3b9:	0f b6 c0             	movzx  eax,al
c001c3bc:	50                   	push   eax
c001c3bd:	e8 b2 fc ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c3c2:	5d                   	pop    ebp
c001c3c3:	5a                   	pop    edx
c001c3c4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3ca:	53                   	push   ebx
c001c3cb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3d0:	99                   	cdq    
c001c3d1:	f7 ff                	idiv   edi
c001c3d3:	99                   	cdq    
c001c3d4:	f7 f9                	idiv   ecx
c001c3d6:	8d 42 30             	lea    eax,[edx+0x30]
c001c3d9:	0f b6 c0             	movzx  eax,al
c001c3dc:	50                   	push   eax
c001c3dd:	e8 92 fc ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c3e2:	5f                   	pop    edi
c001c3e3:	5d                   	pop    ebp
c001c3e4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c3ea:	53                   	push   ebx
c001c3eb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3f0:	99                   	cdq    
c001c3f1:	f7 f9                	idiv   ecx
c001c3f3:	99                   	cdq    
c001c3f4:	f7 f9                	idiv   ecx
c001c3f6:	8d 42 30             	lea    eax,[edx+0x30]
c001c3f9:	0f b6 c0             	movzx  eax,al
c001c3fc:	50                   	push   eax
c001c3fd:	e8 72 fc ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c402:	5a                   	pop    edx
c001c403:	5f                   	pop    edi
c001c404:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c40a:	53                   	push   ebx
c001c40b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c410:	99                   	cdq    
c001c411:	f7 f9                	idiv   ecx
c001c413:	83 c2 30             	add    edx,0x30
c001c416:	0f b6 d2             	movzx  edx,dl
c001c419:	52                   	push   edx
c001c41a:	e8 55 fc ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c428:	eb 05                	jmp    c001c42f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c42a:	be 01 00 00 00       	mov    esi,0x1
c001c42f:	83 c4 0c             	add    esp,0xc
c001c432:	89 f0                	mov    eax,esi
c001c434:	5b                   	pop    ebx
c001c435:	5e                   	pop    esi
c001c436:	5f                   	pop    edi
c001c437:	5d                   	pop    ebp
c001c438:	c3                   	ret    
c001c439:	90                   	nop

c001c43a <ATAPI::write(unsigned long long, int, void*)>:
c001c43a:	b8 03 00 00 00       	mov    eax,0x3
c001c43f:	c3                   	ret    

c001c440 <ATAPI::close(int, int, void*)>:
c001c440:	83 ec 0c             	sub    esp,0xc
c001c443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c447:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c44d:	85 c0                	test   eax,eax
c001c44f:	74 0c                	je     c001c45d <ATAPI::close(int, int, void*)+0x1d>
c001c451:	8b 10                	mov    edx,DWORD PTR [eax]
c001c453:	83 ec 0c             	sub    esp,0xc
c001c456:	50                   	push   eax
c001c457:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c45a:	83 c4 10             	add    esp,0x10
c001c45d:	31 c0                	xor    eax,eax
c001c45f:	83 c4 0c             	add    esp,0xc
c001c462:	c3                   	ret    
c001c463:	90                   	nop

c001c464 <ATAPI::ATAPI()>:
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46b:	83 ec 04             	sub    esp,0x4
c001c46e:	68 00 08 00 00       	push   0x800
c001c473:	68 11 1d 02 c0       	push   0xc0021d11
c001c478:	50                   	push   eax
c001c479:	e8 50 fd fe ff       	call   c000c1ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c47e:	83 c4 10             	add    esp,0x10
c001c481:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c001c486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48a:	89 10                	mov    DWORD PTR [eax],edx
c001c48c:	90                   	nop
c001c48d:	83 c4 0c             	add    esp,0xc
c001c490:	c3                   	ret    
c001c491:	90                   	nop

c001c492 <ATAPI::readyForCommand()>:
c001c492:	56                   	push   esi
c001c493:	53                   	push   ebx
c001c494:	53                   	push   ebx
c001c495:	31 db                	xor    ebx,ebx
c001c497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c49b:	51                   	push   ecx
c001c49c:	6a 0c                	push   0xc
c001c49e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4a5:	50                   	push   eax
c001c4a6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4ac:	e8 77 e8 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	a8 88                	test   al,0x88
c001c4b6:	74 25                	je     c001c4dd <ATAPI::readyForCommand()+0x4b>
c001c4b8:	43                   	inc    ebx
c001c4b9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c4bf:	7e da                	jle    c001c49b <ATAPI::readyForCommand()+0x9>
c001c4c1:	83 ec 0c             	sub    esp,0xc
c001c4c4:	68 5e 01 00 00       	push   0x15e
c001c4c9:	e8 b2 8e ff ff       	call   c0015380 <milliTenthSleep(unsigned int)>
c001c4ce:	83 c4 10             	add    esp,0x10
c001c4d1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c4d7:	75 c2                	jne    c001c49b <ATAPI::readyForCommand()+0x9>
c001c4d9:	31 c0                	xor    eax,eax
c001c4db:	eb 02                	jmp    c001c4df <ATAPI::readyForCommand()+0x4d>
c001c4dd:	b0 01                	mov    al,0x1
c001c4df:	5a                   	pop    edx
c001c4e0:	5b                   	pop    ebx
c001c4e1:	5e                   	pop    esi
c001c4e2:	c3                   	ret    
c001c4e3:	90                   	nop

c001c4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c4e4:	55                   	push   ebp
c001c4e5:	57                   	push   edi
c001c4e6:	56                   	push   esi
c001c4e7:	53                   	push   ebx
c001c4e8:	83 ec 20             	sub    esp,0x20
c001c4eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c4ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c4f3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c4f7:	6a 01                	push   0x1
c001c4f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c500:	50                   	push   eax
c001c501:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c507:	e8 6a e9 ff ff       	call   c001ae76 <IDE::enableIRQs(unsigned char, bool)>
c001c50c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c513:	59                   	pop    ecx
c001c514:	5e                   	pop    esi
c001c515:	50                   	push   eax
c001c516:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c51c:	e8 21 e7 ff ff       	call   c001ac42 <IDE::prepareInterrupt(unsigned char)>
c001c521:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c524:	e8 69 ff ff ff       	call   c001c492 <ATAPI::readyForCommand()>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	84 c0                	test   al,al
c001c52e:	75 0a                	jne    c001c53a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c530:	bb 01 00 00 00       	mov    ebx,0x1
c001c535:	e9 5f 02 00 00       	jmp    c001c799 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c53a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c540:	c1 e0 04             	shl    eax,0x4
c001c543:	0f b6 c0             	movzx  eax,al
c001c546:	50                   	push   eax
c001c547:	6a 06                	push   0x6
c001c549:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c550:	50                   	push   eax
c001c551:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c557:	e8 0c e7 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c55c:	6a 00                	push   0x0
c001c55e:	6a 01                	push   0x1
c001c560:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c567:	50                   	push   eax
c001c568:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c56e:	e8 f5 e6 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c573:	83 c4 20             	add    esp,0x20
c001c576:	0f b6 c3             	movzx  eax,bl
c001c579:	50                   	push   eax
c001c57a:	0f b6 df             	movzx  ebx,bh
c001c57d:	6a 04                	push   0x4
c001c57f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c586:	50                   	push   eax
c001c587:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c58d:	e8 d6 e6 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c592:	53                   	push   ebx
c001c593:	6a 05                	push   0x5
c001c595:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c59c:	50                   	push   eax
c001c59d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5a3:	e8 c0 e6 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a8:	83 c4 20             	add    esp,0x20
c001c5ab:	68 a0 00 00 00       	push   0xa0
c001c5b0:	6a 07                	push   0x7
c001c5b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5b9:	50                   	push   eax
c001c5ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5c0:	e8 a3 e6 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5c5:	83 c4 0c             	add    esp,0xc
c001c5c8:	6a 01                	push   0x1
c001c5ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5d1:	50                   	push   eax
c001c5d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5d8:	e8 6f f1 ff ff       	call   c001b74c <IDE::polling(unsigned char, unsigned int)>
c001c5dd:	83 c4 10             	add    esp,0x10
c001c5e0:	0f b6 d8             	movzx  ebx,al
c001c5e3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c5e9:	85 db                	test   ebx,ebx
c001c5eb:	74 20                	je     c001c60d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c5ed:	53                   	push   ebx
c001c5ee:	0f b6 c0             	movzx  eax,al
c001c5f1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c5f8:	52                   	push   edx
c001c5f9:	50                   	push   eax
c001c5fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c600:	e8 8d f0 ff ff       	call   c001b692 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c605:	83 c4 10             	add    esp,0x10
c001c608:	e9 8c 01 00 00       	jmp    c001c799 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c60d:	52                   	push   edx
c001c60e:	0f b6 c0             	movzx  eax,al
c001c611:	52                   	push   edx
c001c612:	50                   	push   eax
c001c613:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c619:	e8 38 e6 ff ff       	call   c001ac56 <IDE::getBase(unsigned char)>
c001c61e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c622:	b9 06 00 00 00       	mov    ecx,0x6
c001c627:	89 c2                	mov    edx,eax
c001c629:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c62c:	89 e8                	mov    eax,ebp
c001c62e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c632:	83 c4 10             	add    esp,0x10
c001c635:	0f b6 c0             	movzx  eax,al
c001c638:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c63c:	85 db                	test   ebx,ebx
c001c63e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c644:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c64b:	0f 84 eb 00 00 00    	je     c001c73c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c651:	55                   	push   ebp
c001c652:	55                   	push   ebp
c001c653:	52                   	push   edx
c001c654:	50                   	push   eax
c001c655:	e8 82 e7 ff ff       	call   c001addc <IDE::waitInterrupt(unsigned char)>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	84 c0                	test   al,al
c001c65f:	0f 84 cb fe ff ff    	je     c001c530 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c665:	56                   	push   esi
c001c666:	56                   	push   esi
c001c667:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c66e:	50                   	push   eax
c001c66f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c675:	e8 c8 e5 ff ff       	call   c001ac42 <IDE::prepareInterrupt(unsigned char)>
c001c67a:	83 c4 0c             	add    esp,0xc
c001c67d:	6a 04                	push   0x4
c001c67f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c686:	50                   	push   eax
c001c687:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c68d:	e8 96 e6 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001c692:	83 c4 0c             	add    esp,0xc
c001c695:	6a 05                	push   0x5
c001c697:	89 c6                	mov    esi,eax
c001c699:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6a0:	50                   	push   eax
c001c6a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6a7:	e8 7c e6 ff ff       	call   c001ad28 <IDE::read(unsigned char, unsigned char)>
c001c6ac:	83 c4 10             	add    esp,0x10
c001c6af:	0f b6 e8             	movzx  ebp,al
c001c6b2:	89 f0                	mov    eax,esi
c001c6b4:	c1 e5 08             	shl    ebp,0x8
c001c6b7:	0f b6 f0             	movzx  esi,al
c001c6ba:	09 f5                	or     ebp,esi
c001c6bc:	31 f6                	xor    esi,esi
c001c6be:	d1 fd                	sar    ebp,1
c001c6c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c6c5:	74 5c                	je     c001c723 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c6c7:	39 ee                	cmp    esi,ebp
c001c6c9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6cf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6d6:	75 0d                	jne    c001c6e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c6d8:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c6db:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c6df:	4b                   	dec    ebx
c001c6e0:	e9 57 ff ff ff       	jmp    c001c63c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c6e5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c6e9:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c6ed:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c6f2:	51                   	push   ecx
c001c6f3:	51                   	push   ecx
c001c6f4:	52                   	push   edx
c001c6f5:	50                   	push   eax
c001c6f6:	e8 5b e5 ff ff       	call   c001ac56 <IDE::getBase(unsigned char)>
c001c6fb:	89 c2                	mov    edx,eax
c001c6fd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c702:	66 ef                	out    dx,ax
c001c704:	46                   	inc    esi
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	eb bd                	jmp    c001c6c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c70a:	51                   	push   ecx
c001c70b:	51                   	push   ecx
c001c70c:	52                   	push   edx
c001c70d:	50                   	push   eax
c001c70e:	e8 43 e5 ff ff       	call   c001ac56 <IDE::getBase(unsigned char)>
c001c713:	89 c2                	mov    edx,eax
c001c715:	66 ed                	in     ax,dx
c001c717:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c71b:	83 c4 10             	add    esp,0x10
c001c71e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c722:	46                   	inc    esi
c001c723:	39 ee                	cmp    esi,ebp
c001c725:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c72b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c732:	75 d6                	jne    c001c70a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c734:	01 f6                	add    esi,esi
c001c736:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c73a:	eb a3                	jmp    c001c6df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c73c:	51                   	push   ecx
c001c73d:	51                   	push   ecx
c001c73e:	52                   	push   edx
c001c73f:	50                   	push   eax
c001c740:	e8 97 e6 ff ff       	call   c001addc <IDE::waitInterrupt(unsigned char)>
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	84 c0                	test   al,al
c001c74a:	0f 84 e0 fd ff ff    	je     c001c530 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c750:	52                   	push   edx
c001c751:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c756:	52                   	push   edx
c001c757:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c75e:	50                   	push   eax
c001c75f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c765:	e8 d8 e4 ff ff       	call   c001ac42 <IDE::prepareInterrupt(unsigned char)>
c001c76a:	83 c4 10             	add    esp,0x10
c001c76d:	50                   	push   eax
c001c76e:	50                   	push   eax
c001c76f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c776:	50                   	push   eax
c001c777:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c77d:	e8 d4 e4 ff ff       	call   c001ac56 <IDE::getBase(unsigned char)>
c001c782:	8d 50 07             	lea    edx,[eax+0x7]
c001c785:	ec                   	in     al,dx
c001c786:	83 c4 10             	add    esp,0x10
c001c789:	a8 88                	test   al,0x88
c001c78b:	74 0a                	je     c001c797 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c78d:	4b                   	dec    ebx
c001c78e:	75 dd                	jne    c001c76d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c790:	bb 02 00 00 00       	mov    ebx,0x2
c001c795:	eb 02                	jmp    c001c799 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c797:	31 db                	xor    ebx,ebx
c001c799:	83 c4 1c             	add    esp,0x1c
c001c79c:	89 d8                	mov    eax,ebx
c001c79e:	5b                   	pop    ebx
c001c79f:	5e                   	pop    esi
c001c7a0:	5f                   	pop    edi
c001c7a1:	5d                   	pop    ebp
c001c7a2:	c3                   	ret    
c001c7a3:	90                   	nop

c001c7a4 <ATAPI::diskRemoved()>:
c001c7a4:	53                   	push   ebx
c001c7a5:	83 ec 14             	sub    esp,0x14
c001c7a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c7ac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7b3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c7b9:	e8 b2 09 ff ff       	call   c000d170 <LogicalDisk::unmount()>
c001c7be:	58                   	pop    eax
c001c7bf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c7c5:	e8 8a 13 ff ff       	call   c000db54 <VCache::writeWriteBuffer()>
c001c7ca:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c7d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7d4:	83 c4 18             	add    esp,0x18
c001c7d7:	5b                   	pop    ebx
c001c7d8:	e9 67 13 ff ff       	jmp    c000db44 <VCache::invalidateReadBuffer()>
c001c7dd:	90                   	nop

c001c7de <ATAPI::eject()>:
c001c7de:	57                   	push   edi
c001c7df:	b9 03 00 00 00       	mov    ecx,0x3
c001c7e4:	53                   	push   ebx
c001c7e5:	83 ec 14             	sub    esp,0x14
c001c7e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7f0:	fc                   	cld    
c001c7f1:	31 c0                	xor    eax,eax
c001c7f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7f5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c7fa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c7ff:	50                   	push   eax
c001c800:	50                   	push   eax
c001c801:	6a 00                	push   0x0
c001c803:	6a 00                	push   0x0
c001c805:	6a 00                	push   0x0
c001c807:	6a 02                	push   0x2
c001c809:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c80d:	50                   	push   eax
c001c80e:	53                   	push   ebx
c001c80f:	e8 d0 fc ff ff       	call   c001c4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c814:	83 c4 14             	add    esp,0x14
c001c817:	53                   	push   ebx
c001c818:	e8 87 ff ff ff       	call   c001c7a4 <ATAPI::diskRemoved()>
c001c81d:	83 c4 24             	add    esp,0x24
c001c820:	31 c0                	xor    eax,eax
c001c822:	5b                   	pop    ebx
c001c823:	5f                   	pop    edi
c001c824:	c3                   	ret    
c001c825:	90                   	nop

c001c826 <ATAPI::diskInserted()>:
c001c826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c82a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c831:	c3                   	ret    

c001c832 <ATAPI::detectMedia()>:
c001c832:	56                   	push   esi
c001c833:	53                   	push   ebx
c001c834:	83 ec 28             	sub    esp,0x28
c001c837:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c83b:	6a 0c                	push   0xc
c001c83d:	6a 00                	push   0x0
c001c83f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c843:	56                   	push   esi
c001c844:	e8 a7 3c fe ff       	call   c00004f0 <memset>
c001c849:	58                   	pop    eax
c001c84a:	5a                   	pop    edx
c001c84b:	6a 00                	push   0x0
c001c84d:	6a 00                	push   0x0
c001c84f:	6a 00                	push   0x0
c001c851:	6a 00                	push   0x0
c001c853:	56                   	push   esi
c001c854:	53                   	push   ebx
c001c855:	e8 8a fc ff ff       	call   c001c4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c85a:	83 c4 1c             	add    esp,0x1c
c001c85d:	6a 0c                	push   0xc
c001c85f:	6a 00                	push   0x0
c001c861:	56                   	push   esi
c001c862:	e8 89 3c fe ff       	call   c00004f0 <memset>
c001c867:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c86c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c871:	59                   	pop    ecx
c001c872:	58                   	pop    eax
c001c873:	6a 01                	push   0x1
c001c875:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c879:	50                   	push   eax
c001c87a:	6a 00                	push   0x0
c001c87c:	6a 12                	push   0x12
c001c87e:	56                   	push   esi
c001c87f:	53                   	push   ebx
c001c880:	e8 5f fc ff ff       	call   c001c4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c885:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c889:	83 c4 20             	add    esp,0x20
c001c88c:	83 e0 7f             	and    eax,0x7f
c001c88f:	83 f8 70             	cmp    eax,0x70
c001c892:	74 15                	je     c001c8a9 <ATAPI::detectMedia()+0x77>
c001c894:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c89b:	75 0c                	jne    c001c8a9 <ATAPI::detectMedia()+0x77>
c001c89d:	83 ec 0c             	sub    esp,0xc
c001c8a0:	53                   	push   ebx
c001c8a1:	e8 80 ff ff ff       	call   c001c826 <ATAPI::diskInserted()>
c001c8a6:	83 c4 10             	add    esp,0x10
c001c8a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c8ad:	83 e0 0f             	and    eax,0xf
c001c8b0:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c8b5:	0f b6 c0             	movzx  eax,al
c001c8b8:	75 19                	jne    c001c8d3 <ATAPI::detectMedia()+0xa1>
c001c8ba:	83 f8 02             	cmp    eax,0x2
c001c8bd:	75 14                	jne    c001c8d3 <ATAPI::detectMedia()+0xa1>
c001c8bf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8c6:	74 24                	je     c001c8ec <ATAPI::detectMedia()+0xba>
c001c8c8:	83 ec 0c             	sub    esp,0xc
c001c8cb:	53                   	push   ebx
c001c8cc:	e8 d3 fe ff ff       	call   c001c7a4 <ATAPI::diskRemoved()>
c001c8d1:	eb 16                	jmp    c001c8e9 <ATAPI::detectMedia()+0xb7>
c001c8d3:	85 c0                	test   eax,eax
c001c8d5:	75 15                	jne    c001c8ec <ATAPI::detectMedia()+0xba>
c001c8d7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8de:	75 0c                	jne    c001c8ec <ATAPI::detectMedia()+0xba>
c001c8e0:	83 ec 0c             	sub    esp,0xc
c001c8e3:	53                   	push   ebx
c001c8e4:	e8 3d ff ff ff       	call   c001c826 <ATAPI::diskInserted()>
c001c8e9:	83 c4 10             	add    esp,0x10
c001c8ec:	83 c4 24             	add    esp,0x24
c001c8ef:	5b                   	pop    ebx
c001c8f0:	5e                   	pop    esi
c001c8f1:	c3                   	ret    

c001c8f2 <ATAPI::open(int, int, void*)>:
c001c8f2:	56                   	push   esi
c001c8f3:	53                   	push   ebx
c001c8f4:	50                   	push   eax
c001c8f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c901:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c907:	c1 e0 06             	shl    eax,0x6
c001c90a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c910:	01 d0                	add    eax,edx
c001c912:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c919:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c91f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c926:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c930:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c937:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c93d:	6a 04                	push   0x4
c001c93f:	6a 0c                	push   0xc
c001c941:	51                   	push   ecx
c001c942:	52                   	push   edx
c001c943:	e8 20 e3 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c948:	90                   	nop
c001c949:	90                   	nop
c001c94a:	6a 00                	push   0x0
c001c94c:	6a 0c                	push   0xc
c001c94e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c955:	50                   	push   eax
c001c956:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c95c:	e8 07 e3 ff ff       	call   c001ac68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c961:	83 c4 14             	add    esp,0x14
c001c964:	68 78 01 00 00       	push   0x178
c001c969:	e8 5d b1 fe ff       	call   c0007acb <malloc>
c001c96e:	83 c4 0c             	add    esp,0xc
c001c971:	6a 00                	push   0x0
c001c973:	68 ff ff ff 7f       	push   0x7fffffff
c001c978:	6a 00                	push   0x0
c001c97a:	6a 00                	push   0x0
c001c97c:	53                   	push   ebx
c001c97d:	68 c3 1d 02 c0       	push   0xc0021dc3
c001c982:	89 c6                	mov    esi,eax
c001c984:	50                   	push   eax
c001c985:	e8 24 06 ff ff       	call   c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c98a:	83 c4 14             	add    esp,0x14
c001c98d:	56                   	push   esi
c001c98e:	e8 db 06 ff ff       	call   c000d06e <LogicalDisk::assignDriveLetter()>
c001c993:	5a                   	pop    edx
c001c994:	59                   	pop    ecx
c001c995:	0f be c0             	movsx  eax,al
c001c998:	50                   	push   eax
c001c999:	68 14 1c 02 c0       	push   0xc0021c14
c001c99e:	e8 fb df fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001c9a3:	58                   	pop    eax
c001c9a4:	5a                   	pop    edx
c001c9a5:	56                   	push   esi
c001c9a6:	53                   	push   ebx
c001c9a7:	e8 54 f4 fe ff       	call   c000be00 <Device::addChild(Device*)>
c001c9ac:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c9b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9b5:	e8 7c f8 fe ff       	call   c000c236 <PhysicalDisk::startCache()>
c001c9ba:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c9c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9c4:	e8 69 fe ff ff       	call   c001c832 <ATAPI::detectMedia()>
c001c9c9:	83 c4 14             	add    esp,0x14
c001c9cc:	31 c0                	xor    eax,eax
c001c9ce:	5b                   	pop    ebx
c001c9cf:	5e                   	pop    esi
c001c9d0:	c3                   	ret    
c001c9d1:	90                   	nop

c001c9d2 <ATAPI::read(unsigned long long, int, void*)>:
c001c9d2:	55                   	push   ebp
c001c9d3:	57                   	push   edi
c001c9d4:	56                   	push   esi
c001c9d5:	53                   	push   ebx
c001c9d6:	83 ec 1c             	sub    esp,0x1c
c001c9d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c9e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c9e5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9ec:	74 3c                	je     c001ca2a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c9ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c9f2:	b9 03 00 00 00       	mov    ecx,0x3
c001c9f7:	fc                   	cld    
c001c9f8:	31 c0                	xor    eax,eax
c001c9fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c9fc:	89 e8                	mov    eax,ebp
c001c9fe:	0f ce                	bswap  esi
c001ca00:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ca04:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ca09:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ca0d:	50                   	push   eax
c001ca0e:	50                   	push   eax
c001ca0f:	55                   	push   ebp
c001ca10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca14:	c1 e5 0b             	shl    ebp,0xb
c001ca17:	6a 00                	push   0x0
c001ca19:	55                   	push   ebp
c001ca1a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca1e:	50                   	push   eax
c001ca1f:	53                   	push   ebx
c001ca20:	e8 bf fa ff ff       	call   c001c4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca25:	83 c4 20             	add    esp,0x20
c001ca28:	eb 1a                	jmp    c001ca44 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ca2a:	83 ec 0c             	sub    esp,0xc
c001ca2d:	53                   	push   ebx
c001ca2e:	e8 ff fd ff ff       	call   c001c832 <ATAPI::detectMedia()>
c001ca33:	83 c4 10             	add    esp,0x10
c001ca36:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca3d:	75 af                	jne    c001c9ee <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca3f:	b8 02 00 00 00       	mov    eax,0x2
c001ca44:	83 c4 1c             	add    esp,0x1c
c001ca47:	5b                   	pop    ebx
c001ca48:	5e                   	pop    esi
c001ca49:	5f                   	pop    edi
c001ca4a:	5d                   	pop    ebp
c001ca4b:	c3                   	ret    

c001ca4c <SATA::close(int, int, void*)>:
c001ca4c:	83 ec 0c             	sub    esp,0xc
c001ca4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca59:	85 c0                	test   eax,eax
c001ca5b:	74 0c                	je     c001ca69 <SATA::close(int, int, void*)+0x1d>
c001ca5d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca5f:	83 ec 0c             	sub    esp,0xc
c001ca62:	50                   	push   eax
c001ca63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca66:	83 c4 10             	add    esp,0x10
c001ca69:	31 c0                	xor    eax,eax
c001ca6b:	83 c4 0c             	add    esp,0xc
c001ca6e:	c3                   	ret    
c001ca6f:	90                   	nop

c001ca70 <SATA::powerSaving(PowerSavingLevel)>:
c001ca70:	c3                   	ret    
c001ca71:	90                   	nop

c001ca72 <SATA::open(int, int, void*)>:
c001ca72:	56                   	push   esi
c001ca73:	53                   	push   ebx
c001ca74:	50                   	push   eax
c001ca75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca7d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca87:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca91:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca9b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001caa5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001caac:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cab2:	e8 1f b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001cab7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cabd:	89 c6                	mov    esi,eax
c001cabf:	e8 12 b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001cac4:	81 c6 00 10 00 00    	add    esi,0x1000
c001caca:	39 c6                	cmp    esi,eax
c001cacc:	74 10                	je     c001cade <SATA::open(int, int, void*)+0x6c>
c001cace:	83 ec 0c             	sub    esp,0xc
c001cad1:	68 5c 1c 02 c0       	push   0xc0021c5c
c001cad6:	e8 8e 3d ff ff       	call   c0010869 <KePanic(char const*)>
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	83 ec 0c             	sub    esp,0xc
c001cae1:	6a 02                	push   0x2
c001cae3:	e8 1d cb fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001cae8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001caee:	6a 03                	push   0x3
c001caf0:	50                   	push   eax
c001caf1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001caf7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cafd:	e8 e2 d1 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb02:	83 c4 14             	add    esp,0x14
c001cb05:	53                   	push   ebx
c001cb06:	e8 2b f7 fe ff       	call   c000c236 <PhysicalDisk::startCache()>
c001cb0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb0e:	e8 6f 09 ff ff       	call   c000d482 <createPartitionsForDisk(PhysicalDisk*)>
c001cb13:	83 c4 14             	add    esp,0x14
c001cb16:	31 c0                	xor    eax,eax
c001cb18:	5b                   	pop    ebx
c001cb19:	5e                   	pop    esi
c001cb1a:	c3                   	ret    
c001cb1b:	90                   	nop

c001cb1c <SATA::SATA()>:
c001cb1c:	83 ec 0c             	sub    esp,0xc
c001cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb23:	83 ec 04             	sub    esp,0x4
c001cb26:	68 00 02 00 00       	push   0x200
c001cb2b:	68 70 1c 02 c0       	push   0xc0021c70
c001cb30:	50                   	push   eax
c001cb31:	e8 98 f6 fe ff       	call   c000c1ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb36:	83 c4 10             	add    esp,0x10
c001cb39:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c001cb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb42:	89 10                	mov    DWORD PTR [eax],edx
c001cb44:	90                   	nop
c001cb45:	83 c4 0c             	add    esp,0xc
c001cb48:	c3                   	ret    
c001cb49:	90                   	nop

c001cb4a <SATA::access(unsigned long long, int, void*, bool)>:
c001cb4a:	55                   	push   ebp
c001cb4b:	57                   	push   edi
c001cb4c:	56                   	push   esi
c001cb4d:	53                   	push   ebx
c001cb4e:	83 ec 2c             	sub    esp,0x2c
c001cb51:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cb55:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb5a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb62:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb6a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb72:	7e 10                	jle    c001cb84 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cb74:	83 ec 0c             	sub    esp,0xc
c001cb77:	68 80 1c 02 c0       	push   0xc0021c80
c001cb7c:	e8 e8 3c ff ff       	call   c0010869 <KePanic(char const*)>
c001cb81:	83 c4 10             	add    esp,0x10
c001cb84:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb8a:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cb90:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cb96:	89 e8                	mov    eax,ebp
c001cb98:	c1 e0 07             	shl    eax,0x7
c001cb9b:	01 d0                	add    eax,edx
c001cb9d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cba7:	8d 45 02             	lea    eax,[ebp+0x2]
c001cbaa:	51                   	push   ecx
c001cbab:	c1 e0 07             	shl    eax,0x7
c001cbae:	51                   	push   ecx
c001cbaf:	01 d0                	add    eax,edx
c001cbb1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cbb5:	50                   	push   eax
c001cbb6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cbbc:	e8 6b ec ff ff       	call   c001b82c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbc5:	83 c4 10             	add    esp,0x10
c001cbc8:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cbcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cbd1:	0f 84 5b 01 00 00    	je     c001cd32 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cbd7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cbdb:	c1 e0 09             	shl    eax,0x9
c001cbde:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cbe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbe7:	74 0e                	je     c001cbf7 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cbe9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cbef:	89 c1                	mov    ecx,eax
c001cbf1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cbf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbf7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbfb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc01:	8d 45 02             	lea    eax,[ebp+0x2]
c001cc04:	c1 e0 07             	shl    eax,0x7
c001cc07:	01 d0                	add    eax,edx
c001cc09:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc0b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc11:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc1b:	c1 e1 05             	shl    ecx,0x5
c001cc1e:	01 c8                	add    eax,ecx
c001cc20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc24:	83 e1 01             	and    ecx,0x1
c001cc27:	89 ce                	mov    esi,ecx
c001cc29:	8a 08                	mov    cl,BYTE PTR [eax]
c001cc2b:	c1 e6 06             	shl    esi,0x6
c001cc2e:	83 e1 bf             	and    ecx,0xffffffbf
c001cc31:	09 f1                	or     ecx,esi
c001cc33:	88 08                	mov    BYTE PTR [eax],cl
c001cc35:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc37:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc3d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc43:	89 08                	mov    DWORD PTR [eax],ecx
c001cc45:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc4b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc51:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc57:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc5a:	50                   	push   eax
c001cc5b:	68 90 00 00 00       	push   0x90
c001cc60:	6a 00                	push   0x0
c001cc62:	56                   	push   esi
c001cc63:	e8 88 38 fe ff       	call   c00004f0 <memset>
c001cc68:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc6e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc78:	83 c4 10             	add    esp,0x10
c001cc7b:	48                   	dec    eax
c001cc7c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc81:	89 c1                	mov    ecx,eax
c001cc83:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc89:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc8e:	09 c8                	or     eax,ecx
c001cc90:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc96:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc9c:	83 c8 80             	or     eax,0xffffff80
c001cc9f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cca5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cca8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccac:	25 00 7f 00 00       	and    eax,0x7f00
c001ccb1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ccb6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ccbb:	66 89 06             	mov    WORD PTR [esi],ax
c001ccbe:	b0 35                	mov    al,0x35
c001ccc0:	75 02                	jne    c001ccc4 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001ccc2:	b0 25                	mov    al,0x25
c001ccc4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ccc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cccb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cccf:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ccd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccd7:	c1 e8 10             	shr    eax,0x10
c001ccda:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ccdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cce1:	c1 e8 18             	shr    eax,0x18
c001cce4:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cce7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cceb:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ccee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccf2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ccf5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ccf9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ccfd:	89 ee                	mov    esi,ebp
c001ccff:	31 c0                	xor    eax,eax
c001cd01:	c1 e6 07             	shl    esi,0x7
c001cd04:	01 d6                	add    esi,edx
c001cd06:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cd0c:	80 e1 88             	and    cl,0x88
c001cd0f:	74 0a                	je     c001cd1b <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cd11:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd16:	74 0a                	je     c001cd22 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cd18:	40                   	inc    eax
c001cd19:	eb eb                	jmp    c001cd06 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cd1b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd20:	75 17                	jne    c001cd39 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cd22:	83 ec 0c             	sub    esp,0xc
c001cd25:	68 b9 1c 02 c0       	push   0xc0021cb9
c001cd2a:	e8 6f dc fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	b8 01 00 00 00       	mov    eax,0x1
c001cd37:	eb 5b                	jmp    c001cd94 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd39:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cd3d:	c1 e5 07             	shl    ebp,0x7
c001cd40:	b8 01 00 00 00       	mov    eax,0x1
c001cd45:	01 ea                	add    edx,ebp
c001cd47:	d3 e0                	shl    eax,cl
c001cd49:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd4f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd55:	85 c8                	test   eax,ecx
c001cd57:	74 16                	je     c001cd6f <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001cd59:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd5f:	0f ba e1 1e          	bt     ecx,0x1e
c001cd63:	73 ea                	jae    c001cd4f <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001cd65:	83 ec 0c             	sub    esp,0xc
c001cd68:	68 c7 1c 02 c0       	push   0xc0021cc7
c001cd6d:	eb bb                	jmp    c001cd2a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd6f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd75:	0f ba e0 1e          	bt     eax,0x1e
c001cd79:	72 b7                	jb     c001cd32 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd7b:	31 c0                	xor    eax,eax
c001cd7d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cd82:	75 10                	jne    c001cd94 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd84:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd8a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cd92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd94:	83 c4 2c             	add    esp,0x2c
c001cd97:	5b                   	pop    ebx
c001cd98:	5e                   	pop    esi
c001cd99:	5f                   	pop    edi
c001cd9a:	5d                   	pop    ebp
c001cd9b:	c3                   	ret    

c001cd9c <SATA::read(unsigned long long, int, void*)>:
c001cd9c:	55                   	push   ebp
c001cd9d:	57                   	push   edi
c001cd9e:	56                   	push   esi
c001cd9f:	be 04 00 00 00       	mov    esi,0x4
c001cda4:	53                   	push   ebx
c001cda5:	83 ec 0c             	sub    esp,0xc
c001cda8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdb4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdb8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdbb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdc1:	0f 87 1a 02 00 00    	ja     c001cfe1 <SATA::read(unsigned long long, int, void*)+0x245>
c001cdc7:	85 c9                	test   ecx,ecx
c001cdc9:	be 06 00 00 00       	mov    esi,0x6
c001cdce:	0f 84 0d 02 00 00    	je     c001cfe1 <SATA::read(unsigned long long, int, void*)+0x245>
c001cdd4:	56                   	push   esi
c001cdd5:	56                   	push   esi
c001cdd6:	6a 00                	push   0x0
c001cdd8:	51                   	push   ecx
c001cdd9:	53                   	push   ebx
c001cdda:	52                   	push   edx
c001cddb:	50                   	push   eax
c001cddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cde0:	e8 65 fd ff ff       	call   c001cb4a <SATA::access(unsigned long long, int, void*, bool)>
c001cde5:	83 c4 20             	add    esp,0x20
c001cde8:	85 c0                	test   eax,eax
c001cdea:	89 c6                	mov    esi,eax
c001cdec:	0f 85 ea 01 00 00    	jne    c001cfdc <SATA::read(unsigned long long, int, void*)+0x240>
c001cdf2:	50                   	push   eax
c001cdf3:	50                   	push   eax
c001cdf4:	6a 0f                	push   0xf
c001cdf6:	6a 00                	push   0x0
c001cdf8:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cdfe:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce03:	e8 7d f2 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001ce08:	5a                   	pop    edx
c001ce09:	59                   	pop    ecx
c001ce0a:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce0f:	0f b6 c0             	movzx  eax,al
c001ce12:	50                   	push   eax
c001ce13:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce18:	99                   	cdq    
c001ce19:	f7 f9                	idiv   ecx
c001ce1b:	99                   	cdq    
c001ce1c:	f7 fb                	idiv   ebx
c001ce1e:	8d 42 30             	lea    eax,[edx+0x30]
c001ce21:	0f b6 c0             	movzx  eax,al
c001ce24:	50                   	push   eax
c001ce25:	e8 4a f2 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001ce2a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce30:	5f                   	pop    edi
c001ce31:	5d                   	pop    ebp
c001ce32:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce37:	6a 0f                	push   0xf
c001ce39:	6a 00                	push   0x0
c001ce3b:	e8 45 f2 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001ce40:	5a                   	pop    edx
c001ce41:	59                   	pop    ecx
c001ce42:	0f b6 c0             	movzx  eax,al
c001ce45:	50                   	push   eax
c001ce46:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce4b:	99                   	cdq    
c001ce4c:	f7 fd                	idiv   ebp
c001ce4e:	99                   	cdq    
c001ce4f:	f7 fb                	idiv   ebx
c001ce51:	8d 42 30             	lea    eax,[edx+0x30]
c001ce54:	0f b6 c0             	movzx  eax,al
c001ce57:	50                   	push   eax
c001ce58:	e8 17 f2 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001ce5d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce63:	5f                   	pop    edi
c001ce64:	bf 64 00 00 00       	mov    edi,0x64
c001ce69:	58                   	pop    eax
c001ce6a:	6a 0f                	push   0xf
c001ce6c:	6a 00                	push   0x0
c001ce6e:	e8 12 f2 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001ce73:	5a                   	pop    edx
c001ce74:	59                   	pop    ecx
c001ce75:	0f b6 c0             	movzx  eax,al
c001ce78:	50                   	push   eax
c001ce79:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce7e:	99                   	cdq    
c001ce7f:	f7 ff                	idiv   edi
c001ce81:	99                   	cdq    
c001ce82:	f7 fb                	idiv   ebx
c001ce84:	8d 42 30             	lea    eax,[edx+0x30]
c001ce87:	0f b6 c0             	movzx  eax,al
c001ce8a:	50                   	push   eax
c001ce8b:	e8 e4 f1 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001ce90:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce96:	58                   	pop    eax
c001ce97:	5a                   	pop    edx
c001ce98:	6a 0f                	push   0xf
c001ce9a:	6a 00                	push   0x0
c001ce9c:	e8 e4 f1 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001cea1:	59                   	pop    ecx
c001cea2:	5a                   	pop    edx
c001cea3:	0f b6 c0             	movzx  eax,al
c001cea6:	50                   	push   eax
c001cea7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceac:	99                   	cdq    
c001cead:	f7 fb                	idiv   ebx
c001ceaf:	99                   	cdq    
c001ceb0:	f7 fb                	idiv   ebx
c001ceb2:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb5:	0f b6 c0             	movzx  eax,al
c001ceb8:	50                   	push   eax
c001ceb9:	e8 b6 f1 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001cebe:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cec4:	59                   	pop    ecx
c001cec5:	58                   	pop    eax
c001cec6:	6a 0f                	push   0xf
c001cec8:	6a 00                	push   0x0
c001ceca:	e8 b6 f1 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001cecf:	5a                   	pop    edx
c001ced0:	59                   	pop    ecx
c001ced1:	0f b6 c0             	movzx  eax,al
c001ced4:	50                   	push   eax
c001ced5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceda:	99                   	cdq    
c001cedb:	f7 fb                	idiv   ebx
c001cedd:	83 c2 30             	add    edx,0x30
c001cee0:	0f b6 d2             	movzx  edx,dl
c001cee3:	52                   	push   edx
c001cee4:	e8 8b f1 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001cee9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ceef:	58                   	pop    eax
c001cef0:	5a                   	pop    edx
c001cef1:	6a 0f                	push   0xf
c001cef3:	6a 00                	push   0x0
c001cef5:	e8 8b f1 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001cefa:	59                   	pop    ecx
c001cefb:	b9 10 27 00 00       	mov    ecx,0x2710
c001cf00:	5a                   	pop    edx
c001cf01:	0f b6 c0             	movzx  eax,al
c001cf04:	50                   	push   eax
c001cf05:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf0a:	99                   	cdq    
c001cf0b:	f7 f9                	idiv   ecx
c001cf0d:	99                   	cdq    
c001cf0e:	f7 fb                	idiv   ebx
c001cf10:	8d 42 30             	lea    eax,[edx+0x30]
c001cf13:	0f b6 c0             	movzx  eax,al
c001cf16:	50                   	push   eax
c001cf17:	e8 58 f1 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001cf1c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf22:	59                   	pop    ecx
c001cf23:	58                   	pop    eax
c001cf24:	6a 0f                	push   0xf
c001cf26:	6a 00                	push   0x0
c001cf28:	e8 58 f1 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001cf2d:	5a                   	pop    edx
c001cf2e:	59                   	pop    ecx
c001cf2f:	0f b6 c0             	movzx  eax,al
c001cf32:	50                   	push   eax
c001cf33:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf38:	99                   	cdq    
c001cf39:	f7 fd                	idiv   ebp
c001cf3b:	99                   	cdq    
c001cf3c:	f7 fb                	idiv   ebx
c001cf3e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf41:	0f b6 c0             	movzx  eax,al
c001cf44:	50                   	push   eax
c001cf45:	e8 2a f1 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001cf4a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf50:	5d                   	pop    ebp
c001cf51:	58                   	pop    eax
c001cf52:	6a 0f                	push   0xf
c001cf54:	6a 00                	push   0x0
c001cf56:	e8 2a f1 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001cf5b:	5a                   	pop    edx
c001cf5c:	59                   	pop    ecx
c001cf5d:	0f b6 c0             	movzx  eax,al
c001cf60:	50                   	push   eax
c001cf61:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf66:	99                   	cdq    
c001cf67:	f7 ff                	idiv   edi
c001cf69:	99                   	cdq    
c001cf6a:	f7 fb                	idiv   ebx
c001cf6c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf6f:	0f b6 c0             	movzx  eax,al
c001cf72:	50                   	push   eax
c001cf73:	e8 fc f0 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001cf78:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf7e:	5f                   	pop    edi
c001cf7f:	5d                   	pop    ebp
c001cf80:	6a 0f                	push   0xf
c001cf82:	6a 00                	push   0x0
c001cf84:	e8 fc f0 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001cf89:	5a                   	pop    edx
c001cf8a:	59                   	pop    ecx
c001cf8b:	0f b6 c0             	movzx  eax,al
c001cf8e:	50                   	push   eax
c001cf8f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf94:	99                   	cdq    
c001cf95:	f7 fb                	idiv   ebx
c001cf97:	99                   	cdq    
c001cf98:	f7 fb                	idiv   ebx
c001cf9a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf9d:	0f b6 c0             	movzx  eax,al
c001cfa0:	50                   	push   eax
c001cfa1:	e8 ce f0 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001cfa6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfac:	5f                   	pop    edi
c001cfad:	5d                   	pop    ebp
c001cfae:	6a 0f                	push   0xf
c001cfb0:	6a 00                	push   0x0
c001cfb2:	e8 ce f0 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001cfb7:	5a                   	pop    edx
c001cfb8:	59                   	pop    ecx
c001cfb9:	0f b6 c0             	movzx  eax,al
c001cfbc:	50                   	push   eax
c001cfbd:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfc2:	99                   	cdq    
c001cfc3:	f7 fb                	idiv   ebx
c001cfc5:	83 c2 30             	add    edx,0x30
c001cfc8:	0f b6 d2             	movzx  edx,dl
c001cfcb:	52                   	push   edx
c001cfcc:	e8 a3 f0 ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001cfd1:	83 c4 10             	add    esp,0x10
c001cfd4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cfda:	eb 05                	jmp    c001cfe1 <SATA::read(unsigned long long, int, void*)+0x245>
c001cfdc:	be 01 00 00 00       	mov    esi,0x1
c001cfe1:	83 c4 0c             	add    esp,0xc
c001cfe4:	89 f0                	mov    eax,esi
c001cfe6:	5b                   	pop    ebx
c001cfe7:	5e                   	pop    esi
c001cfe8:	5f                   	pop    edi
c001cfe9:	5d                   	pop    ebp
c001cfea:	c3                   	ret    
c001cfeb:	90                   	nop

c001cfec <SATA::write(unsigned long long, int, void*)>:
c001cfec:	55                   	push   ebp
c001cfed:	57                   	push   edi
c001cfee:	56                   	push   esi
c001cfef:	53                   	push   ebx
c001cff0:	83 ec 0c             	sub    esp,0xc
c001cff3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cff7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cffb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d003:	8d 70 ff             	lea    esi,[eax-0x1]
c001d006:	b8 04 00 00 00       	mov    eax,0x4
c001d00b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d011:	0f 87 2c 02 00 00    	ja     c001d243 <SATA::write(unsigned long long, int, void*)+0x257>
c001d017:	85 db                	test   ebx,ebx
c001d019:	b8 06 00 00 00       	mov    eax,0x6
c001d01e:	0f 84 1f 02 00 00    	je     c001d243 <SATA::write(unsigned long long, int, void*)+0x257>
c001d024:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d028:	c1 e6 09             	shl    esi,0x9
c001d02b:	01 de                	add    esi,ebx
c001d02d:	50                   	push   eax
c001d02e:	89 d7                	mov    edi,edx
c001d030:	50                   	push   eax
c001d031:	83 c7 01             	add    edi,0x1
c001d034:	6a 01                	push   0x1
c001d036:	89 cd                	mov    ebp,ecx
c001d038:	53                   	push   ebx
c001d039:	83 d5 00             	adc    ebp,0x0
c001d03c:	6a 01                	push   0x1
c001d03e:	81 c3 00 02 00 00    	add    ebx,0x200
c001d044:	51                   	push   ecx
c001d045:	52                   	push   edx
c001d046:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d04a:	e8 fb fa ff ff       	call   c001cb4a <SATA::access(unsigned long long, int, void*, bool)>
c001d04f:	83 c4 20             	add    esp,0x20
c001d052:	39 f3                	cmp    ebx,esi
c001d054:	89 fa                	mov    edx,edi
c001d056:	89 e9                	mov    ecx,ebp
c001d058:	75 d3                	jne    c001d02d <SATA::write(unsigned long long, int, void*)+0x41>
c001d05a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d05e:	bd 10 27 00 00       	mov    ebp,0x2710
c001d063:	bb 0a 00 00 00       	mov    ebx,0xa
c001d068:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d06e:	50                   	push   eax
c001d06f:	50                   	push   eax
c001d070:	6a 0f                	push   0xf
c001d072:	6a 00                	push   0x0
c001d074:	e8 0c f0 ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d079:	5a                   	pop    edx
c001d07a:	59                   	pop    ecx
c001d07b:	0f b6 c0             	movzx  eax,al
c001d07e:	50                   	push   eax
c001d07f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d084:	99                   	cdq    
c001d085:	f7 fd                	idiv   ebp
c001d087:	99                   	cdq    
c001d088:	f7 fb                	idiv   ebx
c001d08a:	8d 42 30             	lea    eax,[edx+0x30]
c001d08d:	0f b6 c0             	movzx  eax,al
c001d090:	50                   	push   eax
c001d091:	e8 de ef ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d096:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d09c:	5e                   	pop    esi
c001d09d:	5f                   	pop    edi
c001d09e:	bf e8 03 00 00       	mov    edi,0x3e8
c001d0a3:	6a 0f                	push   0xf
c001d0a5:	6a 00                	push   0x0
c001d0a7:	e8 d9 ef ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d0ac:	5a                   	pop    edx
c001d0ad:	59                   	pop    ecx
c001d0ae:	0f b6 c0             	movzx  eax,al
c001d0b1:	50                   	push   eax
c001d0b2:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0b7:	99                   	cdq    
c001d0b8:	f7 ff                	idiv   edi
c001d0ba:	99                   	cdq    
c001d0bb:	f7 fb                	idiv   ebx
c001d0bd:	8d 42 30             	lea    eax,[edx+0x30]
c001d0c0:	0f b6 c0             	movzx  eax,al
c001d0c3:	50                   	push   eax
c001d0c4:	e8 ab ef ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d0c9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d0cf:	5e                   	pop    esi
c001d0d0:	be 64 00 00 00       	mov    esi,0x64
c001d0d5:	58                   	pop    eax
c001d0d6:	6a 0f                	push   0xf
c001d0d8:	6a 00                	push   0x0
c001d0da:	e8 a6 ef ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d0df:	5a                   	pop    edx
c001d0e0:	59                   	pop    ecx
c001d0e1:	0f b6 c0             	movzx  eax,al
c001d0e4:	50                   	push   eax
c001d0e5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0ea:	99                   	cdq    
c001d0eb:	f7 fe                	idiv   esi
c001d0ed:	99                   	cdq    
c001d0ee:	f7 fb                	idiv   ebx
c001d0f0:	8d 42 30             	lea    eax,[edx+0x30]
c001d0f3:	0f b6 c0             	movzx  eax,al
c001d0f6:	50                   	push   eax
c001d0f7:	e8 78 ef ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d0fc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d102:	58                   	pop    eax
c001d103:	5a                   	pop    edx
c001d104:	6a 0f                	push   0xf
c001d106:	6a 00                	push   0x0
c001d108:	e8 78 ef ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d10d:	59                   	pop    ecx
c001d10e:	5a                   	pop    edx
c001d10f:	0f b6 c0             	movzx  eax,al
c001d112:	50                   	push   eax
c001d113:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d118:	99                   	cdq    
c001d119:	f7 fb                	idiv   ebx
c001d11b:	99                   	cdq    
c001d11c:	f7 fb                	idiv   ebx
c001d11e:	8d 42 30             	lea    eax,[edx+0x30]
c001d121:	0f b6 c0             	movzx  eax,al
c001d124:	50                   	push   eax
c001d125:	e8 4a ef ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d12a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d130:	59                   	pop    ecx
c001d131:	58                   	pop    eax
c001d132:	6a 0f                	push   0xf
c001d134:	6a 00                	push   0x0
c001d136:	e8 4a ef ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d13b:	5a                   	pop    edx
c001d13c:	59                   	pop    ecx
c001d13d:	0f b6 c0             	movzx  eax,al
c001d140:	50                   	push   eax
c001d141:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d146:	99                   	cdq    
c001d147:	f7 fb                	idiv   ebx
c001d149:	83 c2 30             	add    edx,0x30
c001d14c:	0f b6 d2             	movzx  edx,dl
c001d14f:	52                   	push   edx
c001d150:	e8 1f ef ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d155:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d15b:	58                   	pop    eax
c001d15c:	5a                   	pop    edx
c001d15d:	6a 0f                	push   0xf
c001d15f:	6a 00                	push   0x0
c001d161:	e8 1f ef ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d166:	59                   	pop    ecx
c001d167:	5a                   	pop    edx
c001d168:	0f b6 c0             	movzx  eax,al
c001d16b:	50                   	push   eax
c001d16c:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d171:	99                   	cdq    
c001d172:	f7 fd                	idiv   ebp
c001d174:	99                   	cdq    
c001d175:	f7 fb                	idiv   ebx
c001d177:	8d 42 30             	lea    eax,[edx+0x30]
c001d17a:	0f b6 c0             	movzx  eax,al
c001d17d:	50                   	push   eax
c001d17e:	e8 f1 ee ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d183:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d189:	59                   	pop    ecx
c001d18a:	5d                   	pop    ebp
c001d18b:	6a 0f                	push   0xf
c001d18d:	6a 00                	push   0x0
c001d18f:	e8 f1 ee ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d194:	5a                   	pop    edx
c001d195:	59                   	pop    ecx
c001d196:	0f b6 c0             	movzx  eax,al
c001d199:	50                   	push   eax
c001d19a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d19f:	99                   	cdq    
c001d1a0:	f7 ff                	idiv   edi
c001d1a2:	99                   	cdq    
c001d1a3:	f7 fb                	idiv   ebx
c001d1a5:	8d 42 30             	lea    eax,[edx+0x30]
c001d1a8:	0f b6 c0             	movzx  eax,al
c001d1ab:	50                   	push   eax
c001d1ac:	e8 c3 ee ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d1b1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1b7:	5f                   	pop    edi
c001d1b8:	5d                   	pop    ebp
c001d1b9:	6a 0f                	push   0xf
c001d1bb:	6a 00                	push   0x0
c001d1bd:	e8 c3 ee ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d1c2:	5a                   	pop    edx
c001d1c3:	59                   	pop    ecx
c001d1c4:	0f b6 c0             	movzx  eax,al
c001d1c7:	50                   	push   eax
c001d1c8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1cd:	99                   	cdq    
c001d1ce:	f7 fe                	idiv   esi
c001d1d0:	99                   	cdq    
c001d1d1:	f7 fb                	idiv   ebx
c001d1d3:	8d 42 30             	lea    eax,[edx+0x30]
c001d1d6:	0f b6 c0             	movzx  eax,al
c001d1d9:	50                   	push   eax
c001d1da:	e8 95 ee ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d1df:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d1e5:	5e                   	pop    esi
c001d1e6:	5f                   	pop    edi
c001d1e7:	6a 0f                	push   0xf
c001d1e9:	6a 00                	push   0x0
c001d1eb:	e8 95 ee ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d1f0:	5d                   	pop    ebp
c001d1f1:	5a                   	pop    edx
c001d1f2:	0f b6 c0             	movzx  eax,al
c001d1f5:	50                   	push   eax
c001d1f6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1fb:	99                   	cdq    
c001d1fc:	f7 fb                	idiv   ebx
c001d1fe:	99                   	cdq    
c001d1ff:	f7 fb                	idiv   ebx
c001d201:	8d 42 30             	lea    eax,[edx+0x30]
c001d204:	0f b6 c0             	movzx  eax,al
c001d207:	50                   	push   eax
c001d208:	e8 67 ee ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d20d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d213:	59                   	pop    ecx
c001d214:	5e                   	pop    esi
c001d215:	6a 0f                	push   0xf
c001d217:	6a 00                	push   0x0
c001d219:	e8 67 ee ff ff       	call   c001c085 <combineColours(unsigned char, unsigned char)>
c001d21e:	5f                   	pop    edi
c001d21f:	5d                   	pop    ebp
c001d220:	0f b6 c0             	movzx  eax,al
c001d223:	50                   	push   eax
c001d224:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d229:	99                   	cdq    
c001d22a:	f7 fb                	idiv   ebx
c001d22c:	83 c2 30             	add    edx,0x30
c001d22f:	0f b6 d2             	movzx  edx,dl
c001d232:	52                   	push   edx
c001d233:	e8 3c ee ff ff       	call   c001c074 <combineCharAndColour(char, unsigned char)>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d241:	31 c0                	xor    eax,eax
c001d243:	83 c4 0c             	add    esp,0xc
c001d246:	5b                   	pop    ebx
c001d247:	5e                   	pop    esi
c001d248:	5f                   	pop    edi
c001d249:	5d                   	pop    ebp
c001d24a:	c3                   	ret    
c001d24b:	90                   	nop

c001d24c <SATAPI::write(unsigned long long, int, void*)>:
c001d24c:	b8 03 00 00 00       	mov    eax,0x3
c001d251:	c3                   	ret    

c001d252 <SATAPI::close(int, int, void*)>:
c001d252:	83 ec 0c             	sub    esp,0xc
c001d255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d259:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d25f:	85 c0                	test   eax,eax
c001d261:	74 0c                	je     c001d26f <SATAPI::close(int, int, void*)+0x1d>
c001d263:	8b 10                	mov    edx,DWORD PTR [eax]
c001d265:	83 ec 0c             	sub    esp,0xc
c001d268:	50                   	push   eax
c001d269:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d26c:	83 c4 10             	add    esp,0x10
c001d26f:	31 c0                	xor    eax,eax
c001d271:	83 c4 0c             	add    esp,0xc
c001d274:	c3                   	ret    
c001d275:	90                   	nop

c001d276 <SATAPI::SATAPI()>:
c001d276:	83 ec 0c             	sub    esp,0xc
c001d279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d27d:	83 ec 04             	sub    esp,0x4
c001d280:	68 00 08 00 00       	push   0x800
c001d285:	68 10 1d 02 c0       	push   0xc0021d10
c001d28a:	50                   	push   eax
c001d28b:	e8 3e ef fe ff       	call   c000c1ce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d290:	83 c4 10             	add    esp,0x10
c001d293:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c001d298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d29c:	89 10                	mov    DWORD PTR [eax],edx
c001d29e:	90                   	nop
c001d29f:	83 c4 0c             	add    esp,0xc
c001d2a2:	c3                   	ret    
c001d2a3:	90                   	nop

c001d2a4 <SATAPI::diskRemoved()>:
c001d2a4:	c3                   	ret    
c001d2a5:	90                   	nop

c001d2a6 <SATAPI::diskInserted()>:
c001d2a6:	83 ec 18             	sub    esp,0x18
c001d2a9:	68 1c 1d 02 c0       	push   0xc0021d1c
c001d2ae:	e8 eb d6 fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001d2b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d2be:	83 c4 1c             	add    esp,0x1c
c001d2c1:	c3                   	ret    

c001d2c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d2c2:	55                   	push   ebp
c001d2c3:	57                   	push   edi
c001d2c4:	56                   	push   esi
c001d2c5:	53                   	push   ebx
c001d2c6:	83 ec 34             	sub    esp,0x34
c001d2c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d2cd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d2d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2d5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d2d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2dd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d2e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2ed:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d2f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2f7:	83 c0 02             	add    eax,0x2
c001d2fa:	c1 e0 07             	shl    eax,0x7
c001d2fd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d305:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d309:	c1 e0 07             	shl    eax,0x7
c001d30c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d310:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d314:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d31e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d322:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d328:	e8 ff e4 ff ff       	call   c001b82c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d32d:	83 c4 10             	add    esp,0x10
c001d330:	89 c2                	mov    edx,eax
c001d332:	b8 01 00 00 00       	mov    eax,0x1
c001d337:	83 fa ff             	cmp    edx,0xffffffff
c001d33a:	0f 84 5f 02 00 00    	je     c001d59f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d340:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d348:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d34e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d350:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d356:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d35c:	89 d1                	mov    ecx,edx
c001d35e:	c1 e1 05             	shl    ecx,0x5
c001d361:	01 c8                	add    eax,ecx
c001d363:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d365:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d36b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d371:	89 08                	mov    DWORD PTR [eax],ecx
c001d373:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d379:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d37f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d385:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d388:	50                   	push   eax
c001d389:	68 90 00 00 00       	push   0x90
c001d38e:	6a 00                	push   0x0
c001d390:	53                   	push   ebx
c001d391:	e8 5a 31 fe ff       	call   c00004f0 <memset>
c001d396:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d399:	b9 0c 00 00 00       	mov    ecx,0xc
c001d39e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d3a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3a4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d3aa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d3ae:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d3b2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d3b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d3bc:	48                   	dec    eax
c001d3bd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d3c2:	89 c1                	mov    ecx,eax
c001d3c4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d3ca:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d3cf:	09 c8                	or     eax,ecx
c001d3d1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d3d7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d3dd:	83 c8 80             	or     eax,0xffffff80
c001d3e0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d3e6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d3e9:	25 00 7f 00 00       	and    eax,0x7f00
c001d3ee:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d3f3:	66 89 03             	mov    WORD PTR [ebx],ax
c001d3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fa:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d3fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d402:	c1 e8 10             	shr    eax,0x10
c001d405:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d40c:	c1 e8 18             	shr    eax,0x18
c001d40f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d412:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d416:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d419:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d41d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d420:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d424:	83 c4 10             	add    esp,0x10
c001d427:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d42b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d42f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d433:	31 c0                	xor    eax,eax
c001d435:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d43b:	80 e1 88             	and    cl,0x88
c001d43e:	74 0a                	je     c001d44a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d440:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d445:	74 0a                	je     c001d451 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d447:	40                   	inc    eax
c001d448:	eb eb                	jmp    c001d435 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d44a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d44f:	75 43                	jne    c001d494 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d451:	83 ec 0c             	sub    esp,0xc
c001d454:	68 34 1d 02 c0       	push   0xc0021d34
c001d459:	e8 40 d5 fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001d45e:	58                   	pop    eax
c001d45f:	5a                   	pop    edx
c001d460:	68 49 1d 02 c0       	push   0xc0021d49
c001d465:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d46b:	e8 26 b6 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c001d470:	59                   	pop    ecx
c001d471:	5b                   	pop    ebx
c001d472:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d476:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d47c:	e8 45 e4 ff ff       	call   c001b8c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d481:	5e                   	pop    esi
c001d482:	5f                   	pop    edi
c001d483:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d487:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d48d:	e8 14 e4 ff ff       	call   c001b8a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d492:	eb 48                	jmp    c001d4dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d494:	b8 01 00 00 00       	mov    eax,0x1
c001d499:	88 d1                	mov    cl,dl
c001d49b:	d3 e0                	shl    eax,cl
c001d49d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d4a2:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d4a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d4ac:	89 c7                	mov    edi,eax
c001d4ae:	c1 e3 07             	shl    ebx,0x7
c001d4b1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d4b5:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d4bb:	85 c7                	test   edi,eax
c001d4bd:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d4c3:	0f 84 a3 00 00 00    	je     c001d56c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d4c9:	0f ba e0 1e          	bt     eax,0x1e
c001d4cd:	73 1a                	jae    c001d4e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d4cf:	83 ec 0c             	sub    esp,0xc
c001d4d2:	68 5b 1d 02 c0       	push   0xc0021d5b
c001d4d7:	e8 c2 d4 fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	b8 01 00 00 00       	mov    eax,0x1
c001d4e4:	e9 b6 00 00 00       	jmp    c001d59f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d4e9:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d4ef:	83 f8 0d             	cmp    eax,0xd
c001d4f2:	77 0a                	ja     c001d4fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d4f4:	83 ec 0c             	sub    esp,0xc
c001d4f7:	68 c8 00 00 00       	push   0xc8
c001d4fc:	eb 28                	jmp    c001d526 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4fe:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d504:	83 f8 0d             	cmp    eax,0xd
c001d507:	77 0a                	ja     c001d513 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d509:	83 ec 0c             	sub    esp,0xc
c001d50c:	68 58 02 00 00       	push   0x258
c001d511:	eb 13                	jmp    c001d526 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d513:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d519:	83 f8 06             	cmp    eax,0x6
c001d51c:	77 10                	ja     c001d52e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d51e:	83 ec 0c             	sub    esp,0xc
c001d521:	68 dc 05 00 00       	push   0x5dc
c001d526:	e8 55 7e ff ff       	call   c0015380 <milliTenthSleep(unsigned int)>
c001d52b:	83 c4 10             	add    esp,0x10
c001d52e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d532:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d535:	75 06                	jne    c001d53d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d537:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d53b:	74 15                	je     c001d552 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d53d:	83 fe 06             	cmp    esi,0x6
c001d540:	77 10                	ja     c001d552 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	68 c4 09 00 00       	push   0x9c4
c001d54a:	e8 31 7e ff ff       	call   c0015380 <milliTenthSleep(unsigned int)>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	46                   	inc    esi
c001d553:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d559:	0f 85 56 ff ff ff    	jne    c001d4b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d55f:	83 ec 0c             	sub    esp,0xc
c001d562:	68 6e 1d 02 c0       	push   0xc0021d6e
c001d567:	e9 6b ff ff ff       	jmp    c001d4d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d56c:	0f ba e0 1e          	bt     eax,0x1e
c001d570:	73 0d                	jae    c001d57f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d572:	83 ec 0c             	sub    esp,0xc
c001d575:	68 82 1d 02 c0       	push   0xc0021d82
c001d57a:	e9 58 ff ff ff       	jmp    c001d4d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d57f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d584:	74 17                	je     c001d59d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d586:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d58b:	74 10                	je     c001d59d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d58d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d593:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d597:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d59b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d59d:	31 c0                	xor    eax,eax
c001d59f:	83 c4 2c             	add    esp,0x2c
c001d5a2:	5b                   	pop    ebx
c001d5a3:	5e                   	pop    esi
c001d5a4:	5f                   	pop    edi
c001d5a5:	5d                   	pop    ebp
c001d5a6:	c3                   	ret    
c001d5a7:	90                   	nop

c001d5a8 <SATAPI::eject()>:
c001d5a8:	57                   	push   edi
c001d5a9:	b9 03 00 00 00       	mov    ecx,0x3
c001d5ae:	83 ec 18             	sub    esp,0x18
c001d5b1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5b5:	fc                   	cld    
c001d5b6:	31 c0                	xor    eax,eax
c001d5b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5ba:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5bf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5c4:	50                   	push   eax
c001d5c5:	6a 00                	push   0x0
c001d5c7:	6a 00                	push   0x0
c001d5c9:	6a 00                	push   0x0
c001d5cb:	6a 00                	push   0x0
c001d5cd:	6a 02                	push   0x2
c001d5cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5d3:	50                   	push   eax
c001d5d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5d8:	e8 e5 fc ff ff       	call   c001d2c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5dd:	83 c4 38             	add    esp,0x38
c001d5e0:	31 c0                	xor    eax,eax
c001d5e2:	5f                   	pop    edi
c001d5e3:	c3                   	ret    

c001d5e4 <SATAPI::detectMedia()>:
c001d5e4:	53                   	push   ebx
c001d5e5:	83 ec 14             	sub    esp,0x14
c001d5e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5f2:	e8 5d 05 ff ff       	call   c000db54 <VCache::writeWriteBuffer()>
c001d5f7:	59                   	pop    ecx
c001d5f8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5fe:	e8 41 05 ff ff       	call   c000db44 <VCache::invalidateReadBuffer()>
c001d603:	c7 04 24 97 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d97
c001d60a:	e8 8f d3 fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001d60f:	83 c4 10             	add    esp,0x10
c001d612:	31 c0                	xor    eax,eax
c001d614:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d61b:	85 d2                	test   edx,edx
c001d61d:	74 0f                	je     c001d62e <SATAPI::detectMedia()+0x4a>
c001d61f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d625:	75 07                	jne    c001d62e <SATAPI::detectMedia()+0x4a>
c001d627:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d62e:	40                   	inc    eax
c001d62f:	83 f8 1a             	cmp    eax,0x1a
c001d632:	75 e0                	jne    c001d614 <SATAPI::detectMedia()+0x30>
c001d634:	83 c4 08             	add    esp,0x8
c001d637:	5b                   	pop    ebx
c001d638:	c3                   	ret    
c001d639:	90                   	nop

c001d63a <SATAPI::open(int, int, void*)>:
c001d63a:	56                   	push   esi
c001d63b:	53                   	push   ebx
c001d63c:	51                   	push   ecx
c001d63d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d641:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d645:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d64f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d655:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d659:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d663:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d66d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d674:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d67a:	e8 57 a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d67f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d685:	89 c6                	mov    esi,eax
c001d687:	e8 4a a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d68c:	81 c6 00 10 00 00    	add    esi,0x1000
c001d692:	39 c6                	cmp    esi,eax
c001d694:	74 10                	je     c001d6a6 <SATAPI::open(int, int, void*)+0x6c>
c001d696:	83 ec 0c             	sub    esp,0xc
c001d699:	68 ac 1d 02 c0       	push   0xc0021dac
c001d69e:	e8 c6 31 ff ff       	call   c0010869 <KePanic(char const*)>
c001d6a3:	83 c4 10             	add    esp,0x10
c001d6a6:	83 ec 0c             	sub    esp,0xc
c001d6a9:	6a 02                	push   0x2
c001d6ab:	e8 55 bf fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001d6b0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d6b6:	6a 03                	push   0x3
c001d6b8:	50                   	push   eax
c001d6b9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d6bf:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d6c5:	e8 1a c6 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6ca:	83 c4 14             	add    esp,0x14
c001d6cd:	68 78 01 00 00       	push   0x178
c001d6d2:	e8 f4 a3 fe ff       	call   c0007acb <malloc>
c001d6d7:	83 c4 0c             	add    esp,0xc
c001d6da:	6a 00                	push   0x0
c001d6dc:	68 ff ff ff 7f       	push   0x7fffffff
c001d6e1:	6a 00                	push   0x0
c001d6e3:	6a 00                	push   0x0
c001d6e5:	53                   	push   ebx
c001d6e6:	68 c2 1d 02 c0       	push   0xc0021dc2
c001d6eb:	89 c6                	mov    esi,eax
c001d6ed:	50                   	push   eax
c001d6ee:	e8 bb f8 fe ff       	call   c000cfae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6f3:	83 c4 14             	add    esp,0x14
c001d6f6:	56                   	push   esi
c001d6f7:	e8 72 f9 fe ff       	call   c000d06e <LogicalDisk::assignDriveLetter()>
c001d6fc:	5a                   	pop    edx
c001d6fd:	59                   	pop    ecx
c001d6fe:	0f be c0             	movsx  eax,al
c001d701:	50                   	push   eax
c001d702:	68 14 1c 02 c0       	push   0xc0021c14
c001d707:	e8 92 d2 fe ff       	call   c000a99e <Dbg::kprintf(char const*, ...)>
c001d70c:	58                   	pop    eax
c001d70d:	5a                   	pop    edx
c001d70e:	56                   	push   esi
c001d70f:	53                   	push   ebx
c001d710:	e8 eb e6 fe ff       	call   c000be00 <Device::addChild(Device*)>
c001d715:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d71b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d71e:	e8 13 eb fe ff       	call   c000c236 <PhysicalDisk::startCache()>
c001d723:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d72a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d72d:	e8 b2 fe ff ff       	call   c001d5e4 <SATAPI::detectMedia()>
c001d732:	83 c4 14             	add    esp,0x14
c001d735:	31 c0                	xor    eax,eax
c001d737:	5b                   	pop    ebx
c001d738:	5e                   	pop    esi
c001d739:	c3                   	ret    

c001d73a <SATAPI::read(unsigned long long, int, void*)>:
c001d73a:	55                   	push   ebp
c001d73b:	57                   	push   edi
c001d73c:	56                   	push   esi
c001d73d:	53                   	push   ebx
c001d73e:	83 ec 3c             	sub    esp,0x3c
c001d741:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d745:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d749:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d74d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d751:	83 fd 04             	cmp    ebp,0x4
c001d754:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d758:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d75c:	7e 10                	jle    c001d76e <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	68 d0 1d 02 c0       	push   0xc0021dd0
c001d766:	e8 fe 30 ff ff       	call   c0010869 <KePanic(char const*)>
c001d76b:	83 c4 10             	add    esp,0x10
c001d76e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d774:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d77a:	51                   	push   ecx
c001d77b:	50                   	push   eax
c001d77c:	83 c0 02             	add    eax,0x2
c001d77f:	c1 e0 07             	shl    eax,0x7
c001d782:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d788:	50                   	push   eax
c001d789:	52                   	push   edx
c001d78a:	e8 61 e1 ff ff       	call   c001b8f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d78f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d793:	b9 03 00 00 00       	mov    ecx,0x3
c001d798:	fc                   	cld    
c001d799:	31 c0                	xor    eax,eax
c001d79b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d79d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d7a2:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d7a7:	83 c4 0c             	add    esp,0xc
c001d7aa:	6a 00                	push   0x0
c001d7ac:	6a 00                	push   0x0
c001d7ae:	6a 00                	push   0x0
c001d7b0:	6a 00                	push   0x0
c001d7b2:	6a 02                	push   0x2
c001d7b4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d7b8:	50                   	push   eax
c001d7b9:	53                   	push   ebx
c001d7ba:	e8 03 fb ff ff       	call   c001d2c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7bf:	83 c4 20             	add    esp,0x20
c001d7c2:	85 c0                	test   eax,eax
c001d7c4:	89 c6                	mov    esi,eax
c001d7c6:	75 46                	jne    c001d80e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d7c8:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d7cc:	b9 03 00 00 00       	mov    ecx,0x3
c001d7d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7d7:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d7dc:	0f c8                	bswap  eax
c001d7de:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d7e2:	89 e8                	mov    eax,ebp
c001d7e4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d7e8:	50                   	push   eax
c001d7e9:	55                   	push   ebp
c001d7ea:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d7ee:	c1 e5 0b             	shl    ebp,0xb
c001d7f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7f9:	55                   	push   ebp
c001d7fa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d7fe:	50                   	push   eax
c001d7ff:	53                   	push   ebx
c001d800:	e8 bd fa ff ff       	call   c001d2c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d805:	83 c4 20             	add    esp,0x20
c001d808:	85 c0                	test   eax,eax
c001d80a:	89 c6                	mov    esi,eax
c001d80c:	74 0c                	je     c001d81a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d80e:	83 ec 0c             	sub    esp,0xc
c001d811:	53                   	push   ebx
c001d812:	e8 cd fd ff ff       	call   c001d5e4 <SATAPI::detectMedia()>
c001d817:	83 c4 10             	add    esp,0x10
c001d81a:	83 c4 3c             	add    esp,0x3c
c001d81d:	89 f0                	mov    eax,esi
c001d81f:	5b                   	pop    ebx
c001d820:	5e                   	pop    esi
c001d821:	5f                   	pop    edi
c001d822:	5d                   	pop    ebp
c001d823:	c3                   	ret    

c001d824 <IOAPIC::close(int, int, void*)>:
c001d824:	b8 00 00 00 00       	mov    eax,0x0
c001d829:	c3                   	ret    

c001d82a <apicGetBase()>:
c001d82a:	55                   	push   ebp
c001d82b:	89 e5                	mov    ebp,esp
c001d82d:	83 ec 18             	sub    esp,0x18
c001d830:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d835:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d83b:	83 e0 08             	and    eax,0x8
c001d83e:	0f b6 c0             	movzx  eax,al
c001d841:	85 c0                	test   eax,eax
c001d843:	75 07                	jne    c001d84c <apicGetBase()+0x22>
c001d845:	b8 00 00 00 00       	mov    eax,0x0
c001d84a:	eb 21                	jmp    c001d86d <apicGetBase()+0x43>
c001d84c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d851:	83 ec 08             	sub    esp,0x8
c001d854:	6a 1b                	push   0x1b
c001d856:	50                   	push   eax
c001d857:	e8 7e 98 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d862:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d865:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d868:	25 00 00 ff ff       	and    eax,0xffff0000
c001d86d:	c9                   	leave  
c001d86e:	c3                   	ret    
c001d86f:	90                   	nop

c001d870 <IOAPIC::IOAPIC()>:
c001d870:	83 ec 0c             	sub    esp,0xc
c001d873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d877:	83 ec 08             	sub    esp,0x8
c001d87a:	68 34 1e 02 c0       	push   0xc0021e34
c001d87f:	50                   	push   eax
c001d880:	e8 13 e7 fe ff       	call   c000bf98 <Device::Device(char const*)>
c001d885:	83 c4 10             	add    esp,0x10
c001d888:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001d88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d891:	89 10                	mov    DWORD PTR [eax],edx
c001d893:	90                   	nop
c001d894:	83 c4 0c             	add    esp,0xc
c001d897:	c3                   	ret    

c001d898 <apicOpen()>:
c001d898:	55                   	push   ebp
c001d899:	89 e5                	mov    ebp,esp
c001d89b:	53                   	push   ebx
c001d89c:	83 ec 34             	sub    esp,0x34
c001d89f:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d8a4:	83 f0 01             	xor    eax,0x1
c001d8a7:	0f b6 c0             	movzx  eax,al
c001d8aa:	85 c0                	test   eax,eax
c001d8ac:	0f 84 a3 00 00 00    	je     c001d955 <apicOpen()+0xbd>
c001d8b2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d8b6:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d8bb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8bf:	0f b6 c0             	movzx  eax,al
c001d8c2:	39 c2                	cmp    edx,eax
c001d8c4:	0f 83 84 00 00 00    	jae    c001d94e <apicOpen()+0xb6>
c001d8ca:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d8d1:	83 ec 0c             	sub    esp,0xc
c001d8d4:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d8d7:	e8 ef a1 fe ff       	call   c0007acb <malloc>
c001d8dc:	83 c4 10             	add    esp,0x10
c001d8df:	89 c3                	mov    ebx,eax
c001d8e1:	83 ec 0c             	sub    esp,0xc
c001d8e4:	53                   	push   ebx
c001d8e5:	e8 86 ff ff ff       	call   c001d870 <IOAPIC::IOAPIC()>
c001d8ea:	83 c4 10             	add    esp,0x10
c001d8ed:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d8f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d8f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8f7:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d8fe:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d903:	83 c0 01             	add    eax,0x1
c001d906:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d90b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d910:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d916:	83 ec 08             	sub    esp,0x8
c001d919:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d91c:	50                   	push   eax
c001d91d:	e8 de e4 fe ff       	call   c000be00 <Device::addChild(Device*)>
c001d922:	83 c4 10             	add    esp,0x10
c001d925:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d928:	8b 00                	mov    eax,DWORD PTR [eax]
c001d92a:	83 c0 08             	add    eax,0x8
c001d92d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d92f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d933:	6a 00                	push   0x0
c001d935:	6a 00                	push   0x0
c001d937:	52                   	push   edx
c001d938:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d93b:	ff d0                	call   eax
c001d93d:	83 c4 10             	add    esp,0x10
c001d940:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d943:	83 c0 01             	add    eax,0x1
c001d946:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d949:	e9 68 ff ff ff       	jmp    c001d8b6 <apicOpen()+0x1e>
c001d94e:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d955:	e8 d0 fe ff ff       	call   c001d82a <apicGetBase()>
c001d95a:	05 f0 00 00 00       	add    eax,0xf0
c001d95f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d962:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d965:	8b 00                	mov    eax,DWORD PTR [eax]
c001d967:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d96a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d971:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d978:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d97b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d97e:	89 10                	mov    DWORD PTR [eax],edx
c001d980:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d987:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d98c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d98f:	7d 7c                	jge    c001da0d <apicOpen()+0x175>
c001d991:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d994:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d99b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d99e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9a1:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9a8:	c1 e8 08             	shr    eax,0x8
c001d9ab:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d9af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9b2:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9b9:	c1 e8 18             	shr    eax,0x18
c001d9bc:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d9bf:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d9c3:	3d ff 00 00 00       	cmp    eax,0xff
c001d9c8:	75 3a                	jne    c001da04 <apicOpen()+0x16c>
c001d9ca:	e8 5b fe ff ff       	call   c001d82a <apicGetBase()>
c001d9cf:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d9d3:	83 fa 01             	cmp    edx,0x1
c001d9d6:	75 07                	jne    c001d9df <apicOpen()+0x147>
c001d9d8:	ba 60 03 00 00       	mov    edx,0x360
c001d9dd:	eb 05                	jmp    c001d9e4 <apicOpen()+0x14c>
c001d9df:	ba 50 03 00 00       	mov    edx,0x350
c001d9e4:	01 d0                	add    eax,edx
c001d9e6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d9e9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9ee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d9f1:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d9f8:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d9fc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9ff:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da02:	89 10                	mov    DWORD PTR [eax],edx
c001da04:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001da08:	e9 7a ff ff ff       	jmp    c001d987 <apicOpen()+0xef>
c001da0d:	90                   	nop
c001da0e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001da11:	c9                   	leave  
c001da12:	c3                   	ret    
c001da13:	90                   	nop

c001da14 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001da14:	55                   	push   ebp
c001da15:	89 e5                	mov    ebp,esp
c001da17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da20:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da23:	72 1d                	jb     c001da42 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da28:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001da2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da31:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da37:	01 d0                	add    eax,edx
c001da39:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da3c:	73 04                	jae    c001da42 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da3e:	b0 01                	mov    al,0x1
c001da40:	eb 02                	jmp    c001da44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da42:	b0 00                	mov    al,0x0
c001da44:	5d                   	pop    ebp
c001da45:	c3                   	ret    

c001da46 <IOAPIC::read(int)>:
c001da46:	55                   	push   ebp
c001da47:	89 e5                	mov    ebp,esp
c001da49:	83 ec 10             	sub    esp,0x10
c001da4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da4f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da55:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da5b:	0f b6 d0             	movzx  edx,al
c001da5e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da61:	89 10                	mov    DWORD PTR [eax],edx
c001da63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da66:	83 c0 10             	add    eax,0x10
c001da69:	8b 00                	mov    eax,DWORD PTR [eax]
c001da6b:	c9                   	leave  
c001da6c:	c3                   	ret    
c001da6d:	90                   	nop

c001da6e <IOAPIC::open(int, int, void*)>:
c001da6e:	55                   	push   ebp
c001da6f:	89 e5                	mov    ebp,esp
c001da71:	57                   	push   edi
c001da72:	56                   	push   esi
c001da73:	53                   	push   ebx
c001da74:	83 ec 04             	sub    esp,0x4
c001da77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da86:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da8c:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da96:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da9f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001daa5:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001daac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daaf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001dabe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dac7:	0f b6 f0             	movzx  esi,al
c001daca:	89 d0                	mov    eax,edx
c001dacc:	ba 00 00 00 00       	mov    edx,0x0
c001dad1:	89 c7                	mov    edi,eax
c001dad3:	83 e7 ff             	and    edi,0xffffffff
c001dad6:	89 f9                	mov    ecx,edi
c001dad8:	0f b6 da             	movzx  ebx,dl
c001dadb:	89 c8                	mov    eax,ecx
c001dadd:	89 da                	mov    edx,ebx
c001dadf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dae2:	8d 5e 08             	lea    ebx,[esi+0x8]
c001dae5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dae9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001daed:	83 e0 00             	and    eax,0x0
c001daf0:	09 d0                	or     eax,edx
c001daf2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001daf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daf9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daff:	8d 50 01             	lea    edx,[eax+0x1]
c001db02:	88 d1                	mov    cl,dl
c001db04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001db07:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001db0d:	0f b6 d0             	movzx  edx,al
c001db10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db13:	83 c2 08             	add    edx,0x8
c001db16:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db1a:	0f b6 c9             	movzx  ecx,cl
c001db1d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001db23:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db27:	6a 01                	push   0x1
c001db29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db2c:	e8 15 ff ff ff       	call   c001da46 <IOAPIC::read(int)>
c001db31:	83 c4 08             	add    esp,0x8
c001db34:	c1 f8 10             	sar    eax,0x10
c001db37:	0f b6 c0             	movzx  eax,al
c001db3a:	8d 50 01             	lea    edx,[eax+0x1]
c001db3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db40:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db46:	b8 00 00 00 00       	mov    eax,0x0
c001db4b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db4e:	5b                   	pop    ebx
c001db4f:	5e                   	pop    esi
c001db50:	5f                   	pop    edi
c001db51:	5d                   	pop    ebp
c001db52:	c3                   	ret    
c001db53:	90                   	nop

c001db54 <IOAPIC::write(int, int)>:
c001db54:	55                   	push   ebp
c001db55:	89 e5                	mov    ebp,esp
c001db57:	83 ec 10             	sub    esp,0x10
c001db5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db69:	0f b6 d0             	movzx  edx,al
c001db6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db6f:	89 10                	mov    DWORD PTR [eax],edx
c001db71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db74:	8d 50 10             	lea    edx,[eax+0x10]
c001db77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db7a:	89 02                	mov    DWORD PTR [edx],eax
c001db7c:	90                   	nop
c001db7d:	c9                   	leave  
c001db7e:	c3                   	ret    
c001db7f:	90                   	nop

c001db80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db80:	55                   	push   ebp
c001db81:	89 e5                	mov    ebp,esp
c001db83:	53                   	push   ebx
c001db84:	83 ec 2c             	sub    esp,0x2c
c001db87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db8a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db8d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db90:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db93:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db96:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db99:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db9c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001db9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dba2:	88 d8                	mov    al,bl
c001dba4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dba7:	88 c8                	mov    al,cl
c001dba9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dbac:	88 d0                	mov    al,dl
c001dbae:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dbb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbb5:	83 c0 08             	add    eax,0x8
c001dbb8:	d1 e0                	shl    eax,1
c001dbba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbbd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbc1:	83 c0 08             	add    eax,0x8
c001dbc4:	d1 e0                	shl    eax,1
c001dbc6:	83 c0 01             	add    eax,0x1
c001dbc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dbcc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbcf:	50                   	push   eax
c001dbd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbd3:	e8 6e fe ff ff       	call   c001da46 <IOAPIC::read(int)>
c001dbd8:	83 c4 08             	add    esp,0x8
c001dbdb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dbde:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dbe5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dbe8:	c1 e0 18             	shl    eax,0x18
c001dbeb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dbee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dbf1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbf4:	52                   	push   edx
c001dbf5:	50                   	push   eax
c001dbf6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbf9:	e8 56 ff ff ff       	call   c001db54 <IOAPIC::write(int, int)>
c001dbfe:	83 c4 0c             	add    esp,0xc
c001dc01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc04:	50                   	push   eax
c001dc05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc08:	e8 39 fe ff ff       	call   c001da46 <IOAPIC::read(int)>
c001dc0d:	83 c4 08             	add    esp,0x8
c001dc10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dc13:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dc1a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dc21:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dc28:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dc2c:	85 c0                	test   eax,eax
c001dc2e:	74 09                	je     c001dc39 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc30:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc37:	eb 07                	jmp    c001dc40 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc39:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc40:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc44:	85 c0                	test   eax,eax
c001dc46:	74 09                	je     c001dc51 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc48:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc4f:	eb 07                	jmp    c001dc58 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc51:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc58:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc5f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc63:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc6c:	52                   	push   edx
c001dc6d:	50                   	push   eax
c001dc6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc71:	e8 de fe ff ff       	call   c001db54 <IOAPIC::write(int, int)>
c001dc76:	83 c4 0c             	add    esp,0xc
c001dc79:	90                   	nop
c001dc7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc7d:	c9                   	leave  
c001dc7e:	c3                   	ret    
c001dc7f:	90                   	nop

c001dc80 <APICTimer::close(int, int, void*)>:
c001dc80:	b8 00 00 00 00       	mov    eax,0x0
c001dc85:	c3                   	ret    
c001dc86:	66 90                	xchg   ax,ax

c001dc88 <apicTimerHandler(regs*, void*)>:
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc91:	b8 10 27 00 00       	mov    eax,0x2710
c001dc96:	ba 00 00 00 00       	mov    edx,0x0
c001dc9b:	f7 f1                	div    ecx
c001dc9d:	83 ec 0c             	sub    esp,0xc
c001dca0:	50                   	push   eax
c001dca1:	e8 c6 fb fe ff       	call   c000d86c <timerHandler(unsigned int)>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	90                   	nop
c001dcaa:	83 c4 0c             	add    esp,0xc
c001dcad:	c3                   	ret    
c001dcae:	66 90                	xchg   ax,ax

c001dcb0 <APICTimer::open(int, int, void*)>:
c001dcb0:	83 ec 0c             	sub    esp,0xc
c001dcb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcb9:	83 c0 24             	add    eax,0x24
c001dcbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcbe:	83 ec 08             	sub    esp,0x8
c001dcc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcc9:	ff d0                	call   eax
c001dccb:	83 c4 10             	add    esp,0x10
c001dcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dce4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dcea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dcf4:	83 ec 0c             	sub    esp,0xc
c001dcf7:	51                   	push   ecx
c001dcf8:	6a 01                	push   0x1
c001dcfa:	68 88 dc 01 c0       	push   0xc001dc88
c001dcff:	52                   	push   edx
c001dd00:	50                   	push   eax
c001dd01:	e8 a6 e0 fe ff       	call   c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd06:	83 c4 20             	add    esp,0x20
c001dd09:	89 c2                	mov    edx,eax
c001dd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd15:	b8 00 00 00 00       	mov    eax,0x0
c001dd1a:	83 c4 0c             	add    esp,0xc
c001dd1d:	c3                   	ret    
c001dd1e:	66 90                	xchg   ax,ax

c001dd20 <APICTimer::write(int)>:
c001dd20:	83 ec 0c             	sub    esp,0xc
c001dd23:	83 ec 0c             	sub    esp,0xc
c001dd26:	68 68 1e 02 c0       	push   0xc0021e68
c001dd2b:	e8 39 2b ff ff       	call   c0010869 <KePanic(char const*)>
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd41:	90                   	nop
c001dd42:	83 c4 0c             	add    esp,0xc
c001dd45:	c3                   	ret    
c001dd46:	66 90                	xchg   ax,ax

c001dd48 <APICTimer::APICTimer()>:
c001dd48:	83 ec 0c             	sub    esp,0xc
c001dd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4f:	83 ec 08             	sub    esp,0x8
c001dd52:	68 78 1e 02 c0       	push   0xc0021e78
c001dd57:	50                   	push   eax
c001dd58:	e8 43 fa fe ff       	call   c000d7a0 <Timer::Timer(char const*)>
c001dd5d:	83 c4 10             	add    esp,0x10
c001dd60:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c001dd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd69:	89 10                	mov    DWORD PTR [eax],edx
c001dd6b:	90                   	nop
c001dd6c:	83 c4 0c             	add    esp,0xc
c001dd6f:	c3                   	ret    

c001dd70 <PIT::write(int)>:
c001dd70:	83 ec 10             	sub    esp,0x10
c001dd73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd85:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd8a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd8f:	89 c2                	mov    edx,eax
c001dd91:	c1 fa 1f             	sar    edx,0x1f
c001dd94:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd9c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dda3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dda8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ddac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ddb1:	ee                   	out    dx,al
c001ddb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddb6:	0f b6 c0             	movzx  eax,al
c001ddb9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ddc0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ddc4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ddc8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ddcd:	ee                   	out    dx,al
c001ddce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddd2:	c1 f8 08             	sar    eax,0x8
c001ddd5:	0f b6 c0             	movzx  eax,al
c001ddd8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dddf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dde3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dde7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ddec:	ee                   	out    dx,al
c001dded:	90                   	nop
c001ddee:	83 c4 10             	add    esp,0x10
c001ddf1:	c3                   	ret    
c001ddf2:	66 90                	xchg   ax,ax

c001ddf4 <pitHandler(regs*, void*)>:
c001ddf4:	83 ec 0c             	sub    esp,0xc
c001ddf7:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001ddfd:	b8 10 27 00 00       	mov    eax,0x2710
c001de02:	89 c2                	mov    edx,eax
c001de04:	c1 fa 1f             	sar    edx,0x1f
c001de07:	f7 f9                	idiv   ecx
c001de09:	83 ec 0c             	sub    esp,0xc
c001de0c:	50                   	push   eax
c001de0d:	e8 5a fa fe ff       	call   c000d86c <timerHandler(unsigned int)>
c001de12:	83 c4 10             	add    esp,0x10
c001de15:	90                   	nop
c001de16:	83 c4 0c             	add    esp,0xc
c001de19:	c3                   	ret    
c001de1a:	66 90                	xchg   ax,ax

c001de1c <PIT::open(int, int, void*)>:
c001de1c:	83 ec 0c             	sub    esp,0xc
c001de1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de23:	8b 00                	mov    eax,DWORD PTR [eax]
c001de25:	83 c0 24             	add    eax,0x24
c001de28:	8b 00                	mov    eax,DWORD PTR [eax]
c001de2a:	83 ec 08             	sub    esp,0x8
c001de2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de35:	ff d0                	call   eax
c001de37:	83 c4 10             	add    esp,0x10
c001de3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3e:	83 ec 0c             	sub    esp,0xc
c001de41:	6a 00                	push   0x0
c001de43:	6a 01                	push   0x1
c001de45:	68 f4 dd 01 c0       	push   0xc001ddf4
c001de4a:	6a 00                	push   0x0
c001de4c:	50                   	push   eax
c001de4d:	e8 5a df fe ff       	call   c000bdac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de52:	83 c4 20             	add    esp,0x20
c001de55:	89 c2                	mov    edx,eax
c001de57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de5b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de61:	b8 00 00 00 00       	mov    eax,0x0
c001de66:	83 c4 0c             	add    esp,0xc
c001de69:	c3                   	ret    
c001de6a:	66 90                	xchg   ax,ax

c001de6c <PIT::close(int, int, void*)>:
c001de6c:	83 ec 0c             	sub    esp,0xc
c001de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de73:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de81:	6a 01                	push   0x1
c001de83:	68 f4 dd 01 c0       	push   0xc001ddf4
c001de88:	6a 00                	push   0x0
c001de8a:	50                   	push   eax
c001de8b:	e8 52 df fe ff       	call   c000bde2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de90:	83 c4 10             	add    esp,0x10
c001de93:	b8 00 00 00 00       	mov    eax,0x0
c001de98:	83 c4 0c             	add    esp,0xc
c001de9b:	c3                   	ret    

c001de9c <PIT::PIT()>:
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea3:	83 ec 08             	sub    esp,0x8
c001dea6:	68 b4 1e 02 c0       	push   0xc0021eb4
c001deab:	50                   	push   eax
c001deac:	e8 ef f8 fe ff       	call   c000d7a0 <Timer::Timer(char const*)>
c001deb1:	83 c4 10             	add    esp,0x10
c001deb4:	ba dc 1e 02 c0       	mov    edx,0xc0021edc
c001deb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001debd:	89 10                	mov    DWORD PTR [eax],edx
c001debf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dec9:	0f b6 d0             	movzx  edx,al
c001decc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ded7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dee1:	0f b6 d0             	movzx  edx,al
c001dee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001deed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001def7:	8d 50 01             	lea    edx,[eax+0x1]
c001defa:	88 d1                	mov    cl,dl
c001defc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df00:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001df06:	0f b6 d0             	movzx  edx,al
c001df09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df11:	83 e1 3f             	and    ecx,0x3f
c001df14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df18:	90                   	nop
c001df19:	83 c4 0c             	add    esp,0xc
c001df1c:	c3                   	ret    
c001df1d:	66 90                	xchg   ax,ax
c001df1f:	90                   	nop

c001df20 <avxDetect>:
c001df20:	b8 01 00 00 00       	mov    eax,0x1
c001df25:	0f a2                	cpuid  
c001df27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001df2d:	74 15                	je     c001df44 <avxDetect.noAVX>
c001df2f:	b8 01 00 00 00       	mov    eax,0x1
c001df34:	0f a2                	cpuid  
c001df36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df3c:	74 06                	je     c001df44 <avxDetect.noAVX>
c001df3e:	b8 01 00 00 00       	mov    eax,0x1
c001df43:	c3                   	ret    

c001df44 <avxDetect.noAVX>:
c001df44:	b8 00 00 00 00       	mov    eax,0x0
c001df49:	c3                   	ret    

c001df4a <avxSave>:
c001df4a:	53                   	push   ebx
c001df4b:	52                   	push   edx
c001df4c:	31 c0                	xor    eax,eax
c001df4e:	48                   	dec    eax
c001df4f:	89 c2                	mov    edx,eax
c001df51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df55:	0f ae 23             	xsave  [ebx]
c001df58:	5a                   	pop    edx
c001df59:	5b                   	pop    ebx
c001df5a:	c3                   	ret    

c001df5b <avxLoad>:
c001df5b:	53                   	push   ebx
c001df5c:	52                   	push   edx
c001df5d:	31 c0                	xor    eax,eax
c001df5f:	48                   	dec    eax
c001df60:	89 c2                	mov    edx,eax
c001df62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df66:	0f ae 2b             	xrstor [ebx]
c001df69:	5a                   	pop    edx
c001df6a:	5b                   	pop    ebx
c001df6b:	c3                   	ret    

c001df6c <avxInit>:
c001df6c:	e8 67 03 00 00       	call   c001e2d8 <sseInit>
c001df71:	50                   	push   eax
c001df72:	51                   	push   ecx
c001df73:	0f 20 e0             	mov    eax,cr4
c001df76:	0d 00 00 04 00       	or     eax,0x40000
c001df7b:	0f 22 e0             	mov    cr4,eax
c001df7e:	31 c9                	xor    ecx,ecx
c001df80:	0f 01 d0             	xgetbv 
c001df83:	0d 07 00 00 00       	or     eax,0x7
c001df88:	0f 01 d1             	xsetbv 
c001df8b:	59                   	pop    ecx
c001df8c:	58                   	pop    eax
c001df8d:	c3                   	ret    

c001df8e <avxClose>:
c001df8e:	c3                   	ret    

c001df8f <wouldSheSayYes>:
c001df8f:	c3                   	ret    
c001df90:	49                   	dec    ecx
c001df91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001df95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001df99:	75 20                	jne    c001dfbb <isr0+0xb>
c001df9b:	4e                   	dec    esi
c001df9c:	79 61                	jns    c001dfff <isr7+0x3>
c001df9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dfa3:	66 90                	xchg   ax,ax
c001dfa5:	66 90                	xchg   ax,ax
c001dfa7:	66 90                	xchg   ax,ax
c001dfa9:	66 90                	xchg   ax,ax
c001dfab:	66 90                	xchg   ax,ax
c001dfad:	66 90                	xchg   ax,ax
c001dfaf:	90                   	nop

c001dfb0 <isr0>:
c001dfb0:	fa                   	cli    
c001dfb1:	68 00 00 00 00       	push   0x0
c001dfb6:	68 00 00 00 00       	push   0x0
c001dfbb:	e9 56 01 00 00       	jmp    c001e116 <int_common_stub>

c001dfc0 <isr1>:
c001dfc0:	fa                   	cli    
c001dfc1:	6a 00                	push   0x0
c001dfc3:	6a 01                	push   0x1
c001dfc5:	e9 4c 01 00 00       	jmp    c001e116 <int_common_stub>

c001dfca <isr2>:
c001dfca:	fa                   	cli    
c001dfcb:	6a 00                	push   0x0
c001dfcd:	6a 02                	push   0x2
c001dfcf:	e9 42 01 00 00       	jmp    c001e116 <int_common_stub>

c001dfd4 <isr3>:
c001dfd4:	fa                   	cli    
c001dfd5:	6a 00                	push   0x0
c001dfd7:	6a 03                	push   0x3
c001dfd9:	e9 38 01 00 00       	jmp    c001e116 <int_common_stub>

c001dfde <isr4>:
c001dfde:	fa                   	cli    
c001dfdf:	6a 00                	push   0x0
c001dfe1:	6a 04                	push   0x4
c001dfe3:	e9 2e 01 00 00       	jmp    c001e116 <int_common_stub>

c001dfe8 <isr5>:
c001dfe8:	fa                   	cli    
c001dfe9:	6a 00                	push   0x0
c001dfeb:	6a 05                	push   0x5
c001dfed:	e9 24 01 00 00       	jmp    c001e116 <int_common_stub>

c001dff2 <isr6>:
c001dff2:	fa                   	cli    
c001dff3:	6a 00                	push   0x0
c001dff5:	6a 06                	push   0x6
c001dff7:	e9 1a 01 00 00       	jmp    c001e116 <int_common_stub>

c001dffc <isr7>:
c001dffc:	fa                   	cli    
c001dffd:	6a 00                	push   0x0
c001dfff:	6a 07                	push   0x7
c001e001:	e9 10 01 00 00       	jmp    c001e116 <int_common_stub>

c001e006 <isr8>:
c001e006:	fa                   	cli    
c001e007:	6a 08                	push   0x8
c001e009:	e9 08 01 00 00       	jmp    c001e116 <int_common_stub>

c001e00e <isr9>:
c001e00e:	fa                   	cli    
c001e00f:	6a 00                	push   0x0
c001e011:	6a 09                	push   0x9
c001e013:	e9 fe 00 00 00       	jmp    c001e116 <int_common_stub>

c001e018 <isr10>:
c001e018:	fa                   	cli    
c001e019:	6a 0a                	push   0xa
c001e01b:	e9 f6 00 00 00       	jmp    c001e116 <int_common_stub>

c001e020 <isr11>:
c001e020:	fa                   	cli    
c001e021:	6a 0b                	push   0xb
c001e023:	e9 ee 00 00 00       	jmp    c001e116 <int_common_stub>

c001e028 <isr12>:
c001e028:	fa                   	cli    
c001e029:	6a 0c                	push   0xc
c001e02b:	e9 e6 00 00 00       	jmp    c001e116 <int_common_stub>

c001e030 <isr13>:
c001e030:	fa                   	cli    
c001e031:	6a 0d                	push   0xd
c001e033:	53                   	push   ebx
c001e034:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e038:	81 fb 06 e2 01 c0    	cmp    ebx,0xc001e206
c001e03e:	5b                   	pop    ebx
c001e03f:	0f 84 c3 01 00 00    	je     c001e208 <finishSignal2>
c001e045:	e9 cc 00 00 00       	jmp    c001e116 <int_common_stub>

c001e04a <isr14>:
c001e04a:	fa                   	cli    
c001e04b:	6a 0e                	push   0xe
c001e04d:	e9 c4 00 00 00       	jmp    c001e116 <int_common_stub>

c001e052 <isr15>:
c001e052:	fa                   	cli    
c001e053:	6a 00                	push   0x0
c001e055:	6a 0f                	push   0xf
c001e057:	e9 ba 00 00 00       	jmp    c001e116 <int_common_stub>

c001e05c <isr16>:
c001e05c:	fa                   	cli    
c001e05d:	6a 00                	push   0x0
c001e05f:	6a 10                	push   0x10
c001e061:	e9 b0 00 00 00       	jmp    c001e116 <int_common_stub>

c001e066 <isr17>:
c001e066:	fa                   	cli    
c001e067:	6a 00                	push   0x0
c001e069:	6a 11                	push   0x11
c001e06b:	e9 a6 00 00 00       	jmp    c001e116 <int_common_stub>

c001e070 <isr18>:
c001e070:	fa                   	cli    
c001e071:	6a 00                	push   0x0
c001e073:	6a 12                	push   0x12
c001e075:	e9 9c 00 00 00       	jmp    c001e116 <int_common_stub>

c001e07a <irq3>:
c001e07a:	fa                   	cli    
c001e07b:	6a 00                	push   0x0
c001e07d:	6a 23                	push   0x23
c001e07f:	e9 92 00 00 00       	jmp    c001e116 <int_common_stub>

c001e084 <irq4>:
c001e084:	fa                   	cli    
c001e085:	6a 00                	push   0x0
c001e087:	6a 24                	push   0x24
c001e089:	e9 88 00 00 00       	jmp    c001e116 <int_common_stub>

c001e08e <irq5>:
c001e08e:	fa                   	cli    
c001e08f:	6a 00                	push   0x0
c001e091:	6a 25                	push   0x25
c001e093:	e9 7e 00 00 00       	jmp    c001e116 <int_common_stub>

c001e098 <irq6>:
c001e098:	fa                   	cli    
c001e099:	6a 00                	push   0x0
c001e09b:	6a 26                	push   0x26
c001e09d:	e9 74 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0a2 <irq7>:
c001e0a2:	fa                   	cli    
c001e0a3:	6a 00                	push   0x0
c001e0a5:	6a 27                	push   0x27
c001e0a7:	e9 6a 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0ac <irq8>:
c001e0ac:	fa                   	cli    
c001e0ad:	6a 00                	push   0x0
c001e0af:	6a 28                	push   0x28
c001e0b1:	e9 60 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0b6 <irq9>:
c001e0b6:	fa                   	cli    
c001e0b7:	6a 00                	push   0x0
c001e0b9:	6a 29                	push   0x29
c001e0bb:	e9 56 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0c0 <irq10>:
c001e0c0:	fa                   	cli    
c001e0c1:	6a 00                	push   0x0
c001e0c3:	6a 2a                	push   0x2a
c001e0c5:	e9 4c 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0ca <irq11>:
c001e0ca:	fa                   	cli    
c001e0cb:	6a 00                	push   0x0
c001e0cd:	6a 2b                	push   0x2b
c001e0cf:	e9 42 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0d4 <irq12>:
c001e0d4:	fa                   	cli    
c001e0d5:	6a 00                	push   0x0
c001e0d7:	6a 2c                	push   0x2c
c001e0d9:	e9 38 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0de <irq13>:
c001e0de:	fa                   	cli    
c001e0df:	6a 00                	push   0x0
c001e0e1:	6a 2d                	push   0x2d
c001e0e3:	e9 2e 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0e8 <irq14>:
c001e0e8:	fa                   	cli    
c001e0e9:	6a 00                	push   0x0
c001e0eb:	6a 2e                	push   0x2e
c001e0ed:	e9 24 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0f2 <irq15>:
c001e0f2:	fa                   	cli    
c001e0f3:	6a 00                	push   0x0
c001e0f5:	6a 2f                	push   0x2f
c001e0f7:	e9 1a 00 00 00       	jmp    c001e116 <int_common_stub>

c001e0fc <irq1>:
c001e0fc:	fa                   	cli    
c001e0fd:	6a 00                	push   0x0
c001e0ff:	6a 21                	push   0x21
c001e101:	eb 13                	jmp    c001e116 <int_common_stub>

c001e103 <irq2>:
c001e103:	fa                   	cli    
c001e104:	6a 00                	push   0x0
c001e106:	6a 22                	push   0x22
c001e108:	eb 0c                	jmp    c001e116 <int_common_stub>

c001e10a <isr96>:
c001e10a:	6a 00                	push   0x0
c001e10c:	6a 60                	push   0x60
c001e10e:	fb                   	sti    
c001e10f:	eb 37                	jmp    c001e148 <syscall_common_stub>

c001e111 <irq0>:
c001e111:	fa                   	cli    
c001e112:	6a 00                	push   0x0
c001e114:	6a 20                	push   0x20

c001e116 <int_common_stub>:
c001e116:	60                   	pusha  
c001e117:	1e                   	push   ds
c001e118:	06                   	push   es
c001e119:	0f a0                	push   fs
c001e11b:	0f a8                	push   gs
c001e11d:	66 b8 10 00          	mov    ax,0x10
c001e121:	66 8e d8             	mov    ds,ax
c001e124:	66 8e c0             	mov    es,ax
c001e127:	66 8e e0             	mov    fs,ax
c001e12a:	66 8e e8             	mov    gs,ax
c001e12d:	54                   	push   esp
c001e12e:	fc                   	cld    
c001e12f:	e8 78 e1 fe ff       	call   c000c2ac <int_handler>
c001e134:	81 c4 04 00 00 00    	add    esp,0x4
c001e13a:	0f a9                	pop    gs
c001e13c:	0f a1                	pop    fs
c001e13e:	07                   	pop    es
c001e13f:	1f                   	pop    ds
c001e140:	61                   	popa   
c001e141:	81 c4 08 00 00 00    	add    esp,0x8
c001e147:	cf                   	iret   

c001e148 <syscall_common_stub>:
c001e148:	60                   	pusha  
c001e149:	1e                   	push   ds
c001e14a:	06                   	push   es
c001e14b:	0f a0                	push   fs
c001e14d:	0f a8                	push   gs
c001e14f:	66 b8 10 00          	mov    ax,0x10
c001e153:	66 8e d8             	mov    ds,ax
c001e156:	66 8e c0             	mov    es,ax
c001e159:	66 8e e0             	mov    fs,ax
c001e15c:	66 8e e8             	mov    gs,ax
c001e15f:	54                   	push   esp
c001e160:	fc                   	cld    
c001e161:	e8 46 e1 fe ff       	call   c000c2ac <int_handler>
c001e166:	81 c4 04 00 00 00    	add    esp,0x4
c001e16c:	0f a9                	pop    gs
c001e16e:	0f a1                	pop    fs
c001e170:	07                   	pop    es
c001e171:	1f                   	pop    ds
c001e172:	e8 f8 2c ff ff       	call   c0010e6f <KiCheckSignalZ>
c001e177:	3d 00 00 00 00       	cmp    eax,0x0
c001e17c:	0f 84 c0 00 00 00    	je     c001e242 <skipSignals>
c001e182:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e187:	61                   	popa   
c001e188:	53                   	push   ebx
c001e189:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e18f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e192:	5b                   	pop    ebx
c001e193:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e198:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e19b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e19e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1a1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e1a4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e1a7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e1aa:	81 c4 08 00 00 00    	add    esp,0x8
c001e1b0:	5e                   	pop    esi
c001e1b1:	5b                   	pop    ebx
c001e1b2:	59                   	pop    ecx
c001e1b3:	5a                   	pop    edx
c001e1b4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e1b7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e1ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e1bd:	52                   	push   edx
c001e1be:	51                   	push   ecx
c001e1bf:	53                   	push   ebx
c001e1c0:	56                   	push   esi
c001e1c1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e1c7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e1ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e1cd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e1d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e1d6:	60                   	pusha  
c001e1d7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e1dd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e1e0:	89 e3                	mov    ebx,esp
c001e1e2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e1e5:	52                   	push   edx
c001e1e6:	68 06 e2 01 c0       	push   0xc001e206
c001e1eb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e1ee:	89 dc                	mov    esp,ebx
c001e1f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e1f3:	68 23 00 00 00       	push   0x23
c001e1f8:	51                   	push   ecx
c001e1f9:	68 02 02 00 00       	push   0x202
c001e1fe:	68 1b 00 00 00       	push   0x1b
c001e203:	ff 36                	push   DWORD PTR [esi]
c001e205:	cf                   	iret   

c001e206 <finishSignal>:
c001e206:	cd 0f                	int    0xf

c001e208 <finishSignal2>:
c001e208:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e20e:	e8 d9 2c ff ff       	call   c0010eec <KiFinishSignalZ>
c001e213:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e219:	68 23 00 00 00       	push   0x23
c001e21e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e221:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e224:	68 1b 00 00 00       	push   0x1b
c001e229:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e22c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e22f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e232:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e235:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e238:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e23b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e23e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e241:	cf                   	iret   

c001e242 <skipSignals>:
c001e242:	61                   	popa   
c001e243:	81 c4 08 00 00 00    	add    esp,0x8
c001e249:	cf                   	iret   
c001e24a:	90                   	nop
c001e24b:	90                   	nop

c001e24c <irq16>:
c001e24c:	fa                   	cli    
c001e24d:	6a 00                	push   0x0
c001e24f:	6a 30                	push   0x30
c001e251:	e9 c0 fe ff ff       	jmp    c001e116 <int_common_stub>

c001e256 <irq17>:
c001e256:	fa                   	cli    
c001e257:	6a 00                	push   0x0
c001e259:	6a 31                	push   0x31
c001e25b:	e9 b6 fe ff ff       	jmp    c001e116 <int_common_stub>

c001e260 <irq18>:
c001e260:	fa                   	cli    
c001e261:	6a 00                	push   0x0
c001e263:	6a 32                	push   0x32
c001e265:	e9 ac fe ff ff       	jmp    c001e116 <int_common_stub>

c001e26a <irq19>:
c001e26a:	fa                   	cli    
c001e26b:	6a 00                	push   0x0
c001e26d:	6a 33                	push   0x33
c001e26f:	e9 a2 fe ff ff       	jmp    c001e116 <int_common_stub>

c001e274 <irq20>:
c001e274:	fa                   	cli    
c001e275:	6a 00                	push   0x0
c001e277:	6a 34                	push   0x34
c001e279:	e9 98 fe ff ff       	jmp    c001e116 <int_common_stub>

c001e27e <irq21>:
c001e27e:	fa                   	cli    
c001e27f:	6a 00                	push   0x0
c001e281:	6a 35                	push   0x35
c001e283:	e9 8e fe ff ff       	jmp    c001e116 <int_common_stub>

c001e288 <irq22>:
c001e288:	fa                   	cli    
c001e289:	6a 00                	push   0x0
c001e28b:	6a 36                	push   0x36
c001e28d:	e9 84 fe ff ff       	jmp    c001e116 <int_common_stub>

c001e292 <irq23>:
c001e292:	fa                   	cli    
c001e293:	6a 00                	push   0x0
c001e295:	6a 37                	push   0x37
c001e297:	e9 7a fe ff ff       	jmp    c001e116 <int_common_stub>
c001e29c:	66 90                	xchg   ax,ax
c001e29e:	66 90                	xchg   ax,ax

c001e2a0 <i386GetRDRAND>:
c001e2a0:	b9 64 00 00 00       	mov    ecx,0x64

c001e2a5 <retry>:
c001e2a5:	0f c7 f0             	rdrand eax
c001e2a8:	72 05                	jb     c001e2af <retry.done>
c001e2aa:	e2 f9                	loop   c001e2a5 <retry>

c001e2ac <retry.fail>:
c001e2ac:	31 c0                	xor    eax,eax
c001e2ae:	c3                   	ret    

c001e2af <retry.done>:
c001e2af:	c3                   	ret    

c001e2b0 <absolutelyNoChanceInHell>:
c001e2b0:	b8 01 00 00 00       	mov    eax,0x1
c001e2b5:	0f a2                	cpuid  
c001e2b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2bd:	74 06                	je     c001e2c5 <sseDetect.noSSE>
c001e2bf:	b8 01 00 00 00       	mov    eax,0x1
c001e2c4:	c3                   	ret    

c001e2c5 <sseDetect.noSSE>:
c001e2c5:	31 c0                	xor    eax,eax
c001e2c7:	c3                   	ret    

c001e2c8 <sseSave>:
c001e2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2cc:	0f ae 00             	fxsave [eax]
c001e2cf:	c3                   	ret    

c001e2d0 <sseLoad>:
c001e2d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2d4:	0f ae 08             	fxrstor [eax]
c001e2d7:	c3                   	ret    

c001e2d8 <sseInit>:
c001e2d8:	e8 42 00 00 00       	call   c001e31f <x87Init>
c001e2dd:	0f 20 e0             	mov    eax,cr4
c001e2e0:	66 0d 00 06          	or     ax,0x600
c001e2e4:	0f 22 e0             	mov    cr4,eax
c001e2e7:	c3                   	ret    

c001e2e8 <sseClose>:
c001e2e8:	c3                   	ret    
c001e2e9:	66 90                	xchg   ax,ax
c001e2eb:	66 90                	xchg   ax,ax
c001e2ed:	66 90                	xchg   ax,ax
c001e2ef:	90                   	nop

c001e2f0 <value_37F>:
c001e2f0:	7f 03                	jg     c001e2f5 <value_37A+0x1>

c001e2f2 <value_37E>:
c001e2f2:	7e 03                	jle    c001e2f7 <x87Detect+0x1>

c001e2f4 <value_37A>:
c001e2f4:	7a 03                	jp     c001e2f9 <x87Detect+0x3>

c001e2f6 <x87Detect>:
c001e2f6:	b8 01 00 00 00       	mov    eax,0x1
c001e2fb:	0f a2                	cpuid  
c001e2fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e303:	74 06                	je     c001e30b <x87Detect.nox87>
c001e305:	b8 01 00 00 00       	mov    eax,0x1
c001e30a:	c3                   	ret    

c001e30b <x87Detect.nox87>:
c001e30b:	b8 00 00 00 00       	mov    eax,0x0
c001e310:	c3                   	ret    

c001e311 <x87Save>:
c001e311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e315:	dd 30                	fnsave [eax]
c001e317:	c3                   	ret    

c001e318 <x87Load>:
c001e318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e31c:	dd 20                	frstor [eax]
c001e31e:	c3                   	ret    

c001e31f <x87Init>:
c001e31f:	0f 20 c0             	mov    eax,cr0
c001e322:	66 25 fb ff          	and    ax,0xfffb
c001e326:	66 0d 22 00          	or     ax,0x22
c001e32a:	0f 22 c0             	mov    cr0,eax
c001e32d:	db e3                	fninit 
c001e32f:	0f 06                	clts   
c001e331:	d9 2d f4 e2 01 c0    	fldcw  WORD PTR ds:0xc001e2f4
c001e337:	c3                   	ret    

c001e338 <x87Close>:
c001e338:	c3                   	ret    
c001e339:	66 90                	xchg   ax,ax
c001e33b:	90                   	nop

c001e33c <__do_global_ctors_aux>:
c001e33c:	a1 f0 f2 01 c0       	mov    eax,ds:0xc001f2f0
c001e341:	83 f8 ff             	cmp    eax,0xffffffff
c001e344:	74 1a                	je     c001e360 <__do_global_ctors_aux+0x24>
c001e346:	55                   	push   ebp
c001e347:	89 e5                	mov    ebp,esp
c001e349:	53                   	push   ebx
c001e34a:	52                   	push   edx
c001e34b:	bb f0 f2 01 c0       	mov    ebx,0xc001f2f0
c001e350:	ff d0                	call   eax
c001e352:	83 eb 04             	sub    ebx,0x4
c001e355:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e357:	83 f8 ff             	cmp    eax,0xffffffff
c001e35a:	75 f4                	jne    c001e350 <__do_global_ctors_aux+0x14>
c001e35c:	58                   	pop    eax
c001e35d:	5b                   	pop    ebx
c001e35e:	5d                   	pop    ebp
c001e35f:	c3                   	ret    
c001e360:	c3                   	ret    
c001e361:	66 90                	xchg   ax,ax
c001e363:	90                   	nop

c001e364 <__divdi3>:
c001e364:	55                   	push   ebp
c001e365:	57                   	push   edi
c001e366:	56                   	push   esi
c001e367:	53                   	push   ebx
c001e368:	83 ec 1c             	sub    esp,0x1c
c001e36b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e36f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e373:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e376:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e37a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e37e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e382:	85 db                	test   ebx,ebx
c001e384:	0f 88 8e 00 00 00    	js     c001e418 <__divdi3+0xb4>
c001e38a:	89 dd                	mov    ebp,ebx
c001e38c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e394:	89 d3                	mov    ebx,edx
c001e396:	85 d2                	test   edx,edx
c001e398:	79 0d                	jns    c001e3a7 <__divdi3+0x43>
c001e39a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e39e:	f7 d8                	neg    eax
c001e3a0:	83 d2 00             	adc    edx,0x0
c001e3a3:	f7 da                	neg    edx
c001e3a5:	89 d3                	mov    ebx,edx
c001e3a7:	89 c7                	mov    edi,eax
c001e3a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3ac:	85 db                	test   ebx,ebx
c001e3ae:	75 48                	jne    c001e3f8 <__divdi3+0x94>
c001e3b0:	39 ef                	cmp    edi,ebp
c001e3b2:	76 24                	jbe    c001e3d8 <__divdi3+0x74>
c001e3b4:	89 ea                	mov    edx,ebp
c001e3b6:	f7 f7                	div    edi
c001e3b8:	89 c1                	mov    ecx,eax
c001e3ba:	31 f6                	xor    esi,esi
c001e3bc:	89 c8                	mov    eax,ecx
c001e3be:	89 f2                	mov    edx,esi
c001e3c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3c4:	85 c9                	test   ecx,ecx
c001e3c6:	74 07                	je     c001e3cf <__divdi3+0x6b>
c001e3c8:	f7 d8                	neg    eax
c001e3ca:	83 d2 00             	adc    edx,0x0
c001e3cd:	f7 da                	neg    edx
c001e3cf:	83 c4 1c             	add    esp,0x1c
c001e3d2:	5b                   	pop    ebx
c001e3d3:	5e                   	pop    esi
c001e3d4:	5f                   	pop    edi
c001e3d5:	5d                   	pop    ebp
c001e3d6:	c3                   	ret    
c001e3d7:	90                   	nop
c001e3d8:	85 ff                	test   edi,edi
c001e3da:	75 0b                	jne    c001e3e7 <__divdi3+0x83>
c001e3dc:	b8 01 00 00 00       	mov    eax,0x1
c001e3e1:	31 d2                	xor    edx,edx
c001e3e3:	f7 f3                	div    ebx
c001e3e5:	89 c7                	mov    edi,eax
c001e3e7:	31 d2                	xor    edx,edx
c001e3e9:	89 e8                	mov    eax,ebp
c001e3eb:	f7 f7                	div    edi
c001e3ed:	89 c6                	mov    esi,eax
c001e3ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3f2:	f7 f7                	div    edi
c001e3f4:	89 c1                	mov    ecx,eax
c001e3f6:	eb c4                	jmp    c001e3bc <__divdi3+0x58>
c001e3f8:	39 eb                	cmp    ebx,ebp
c001e3fa:	77 3c                	ja     c001e438 <__divdi3+0xd4>
c001e3fc:	0f bd f3             	bsr    esi,ebx
c001e3ff:	83 f6 1f             	xor    esi,0x1f
c001e402:	75 40                	jne    c001e444 <__divdi3+0xe0>
c001e404:	39 eb                	cmp    ebx,ebp
c001e406:	72 09                	jb     c001e411 <__divdi3+0xad>
c001e408:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e40b:	0f 87 97 00 00 00    	ja     c001e4a8 <__divdi3+0x144>
c001e411:	b9 01 00 00 00       	mov    ecx,0x1
c001e416:	eb a4                	jmp    c001e3bc <__divdi3+0x58>
c001e418:	f7 d9                	neg    ecx
c001e41a:	83 d3 00             	adc    ebx,0x0
c001e41d:	f7 db                	neg    ebx
c001e41f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e422:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e426:	89 dd                	mov    ebp,ebx
c001e428:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e430:	e9 5f ff ff ff       	jmp    c001e394 <__divdi3+0x30>
c001e435:	8d 76 00             	lea    esi,[esi+0x0]
c001e438:	31 f6                	xor    esi,esi
c001e43a:	31 c9                	xor    ecx,ecx
c001e43c:	e9 7b ff ff ff       	jmp    c001e3bc <__divdi3+0x58>
c001e441:	8d 76 00             	lea    esi,[esi+0x0]
c001e444:	b8 20 00 00 00       	mov    eax,0x20
c001e449:	29 f0                	sub    eax,esi
c001e44b:	89 f1                	mov    ecx,esi
c001e44d:	d3 e3                	shl    ebx,cl
c001e44f:	89 fa                	mov    edx,edi
c001e451:	88 c1                	mov    cl,al
c001e453:	d3 ea                	shr    edx,cl
c001e455:	09 da                	or     edx,ebx
c001e457:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e45b:	89 f1                	mov    ecx,esi
c001e45d:	d3 e7                	shl    edi,cl
c001e45f:	89 eb                	mov    ebx,ebp
c001e461:	88 c1                	mov    cl,al
c001e463:	d3 eb                	shr    ebx,cl
c001e465:	89 f1                	mov    ecx,esi
c001e467:	d3 e5                	shl    ebp,cl
c001e469:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e46c:	88 c1                	mov    cl,al
c001e46e:	d3 ea                	shr    edx,cl
c001e470:	09 d5                	or     ebp,edx
c001e472:	89 e8                	mov    eax,ebp
c001e474:	89 da                	mov    edx,ebx
c001e476:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e47a:	89 d3                	mov    ebx,edx
c001e47c:	89 c5                	mov    ebp,eax
c001e47e:	f7 e7                	mul    edi
c001e480:	39 d3                	cmp    ebx,edx
c001e482:	72 18                	jb     c001e49c <__divdi3+0x138>
c001e484:	74 0a                	je     c001e490 <__divdi3+0x12c>
c001e486:	89 e9                	mov    ecx,ebp
c001e488:	31 f6                	xor    esi,esi
c001e48a:	e9 2d ff ff ff       	jmp    c001e3bc <__divdi3+0x58>
c001e48f:	90                   	nop
c001e490:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e493:	89 f1                	mov    ecx,esi
c001e495:	d3 e7                	shl    edi,cl
c001e497:	39 c7                	cmp    edi,eax
c001e499:	73 eb                	jae    c001e486 <__divdi3+0x122>
c001e49b:	90                   	nop
c001e49c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e49f:	31 f6                	xor    esi,esi
c001e4a1:	e9 16 ff ff ff       	jmp    c001e3bc <__divdi3+0x58>
c001e4a6:	66 90                	xchg   ax,ax
c001e4a8:	31 c9                	xor    ecx,ecx
c001e4aa:	e9 0d ff ff ff       	jmp    c001e3bc <__divdi3+0x58>
c001e4af:	90                   	nop

c001e4b0 <__moddi3>:
c001e4b0:	55                   	push   ebp
c001e4b1:	57                   	push   edi
c001e4b2:	56                   	push   esi
c001e4b3:	53                   	push   ebx
c001e4b4:	83 ec 2c             	sub    esp,0x2c
c001e4b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e4c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e4c7:	85 db                	test   ebx,ebx
c001e4c9:	0f 88 85 00 00 00    	js     c001e554 <__moddi3+0xa4>
c001e4cf:	89 de                	mov    esi,ebx
c001e4d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e4d9:	89 d7                	mov    edi,edx
c001e4db:	85 d2                	test   edx,edx
c001e4dd:	79 09                	jns    c001e4e8 <__moddi3+0x38>
c001e4df:	f7 d8                	neg    eax
c001e4e1:	83 d2 00             	adc    edx,0x0
c001e4e4:	f7 da                	neg    edx
c001e4e6:	89 d7                	mov    edi,edx
c001e4e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4ec:	89 cd                	mov    ebp,ecx
c001e4ee:	85 ff                	test   edi,edi
c001e4f0:	75 52                	jne    c001e544 <__moddi3+0x94>
c001e4f2:	89 c3                	mov    ebx,eax
c001e4f4:	39 f0                	cmp    eax,esi
c001e4f6:	76 24                	jbe    c001e51c <__moddi3+0x6c>
c001e4f8:	89 c8                	mov    eax,ecx
c001e4fa:	89 f2                	mov    edx,esi
c001e4fc:	f7 f3                	div    ebx
c001e4fe:	89 d6                	mov    esi,edx
c001e500:	89 f0                	mov    eax,esi
c001e502:	31 d2                	xor    edx,edx
c001e504:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e508:	85 c9                	test   ecx,ecx
c001e50a:	74 07                	je     c001e513 <__moddi3+0x63>
c001e50c:	f7 d8                	neg    eax
c001e50e:	83 d2 00             	adc    edx,0x0
c001e511:	f7 da                	neg    edx
c001e513:	83 c4 2c             	add    esp,0x2c
c001e516:	5b                   	pop    ebx
c001e517:	5e                   	pop    esi
c001e518:	5f                   	pop    edi
c001e519:	5d                   	pop    ebp
c001e51a:	c3                   	ret    
c001e51b:	90                   	nop
c001e51c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e520:	85 db                	test   ebx,ebx
c001e522:	75 0d                	jne    c001e531 <__moddi3+0x81>
c001e524:	b8 01 00 00 00       	mov    eax,0x1
c001e529:	31 d2                	xor    edx,edx
c001e52b:	f7 f7                	div    edi
c001e52d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e531:	89 f0                	mov    eax,esi
c001e533:	31 d2                	xor    edx,edx
c001e535:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e539:	f7 f7                	div    edi
c001e53b:	89 e8                	mov    eax,ebp
c001e53d:	f7 f7                	div    edi
c001e53f:	89 d6                	mov    esi,edx
c001e541:	eb bd                	jmp    c001e500 <__moddi3+0x50>
c001e543:	90                   	nop
c001e544:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e548:	39 f7                	cmp    edi,esi
c001e54a:	76 20                	jbe    c001e56c <__moddi3+0xbc>
c001e54c:	89 c8                	mov    eax,ecx
c001e54e:	89 f2                	mov    edx,esi
c001e550:	eb b2                	jmp    c001e504 <__moddi3+0x54>
c001e552:	66 90                	xchg   ax,ax
c001e554:	f7 d9                	neg    ecx
c001e556:	83 d3 00             	adc    ebx,0x0
c001e559:	f7 db                	neg    ebx
c001e55b:	89 de                	mov    esi,ebx
c001e55d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e565:	e9 6f ff ff ff       	jmp    c001e4d9 <__moddi3+0x29>
c001e56a:	66 90                	xchg   ax,ax
c001e56c:	0f bd c7             	bsr    eax,edi
c001e56f:	83 f0 1f             	xor    eax,0x1f
c001e572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e576:	75 24                	jne    c001e59c <__moddi3+0xec>
c001e578:	39 f7                	cmp    edi,esi
c001e57a:	72 06                	jb     c001e582 <__moddi3+0xd2>
c001e57c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e580:	77 0c                	ja     c001e58e <__moddi3+0xde>
c001e582:	89 e9                	mov    ecx,ebp
c001e584:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e588:	19 fe                	sbb    esi,edi
c001e58a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e58e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e592:	89 f2                	mov    edx,esi
c001e594:	e9 6b ff ff ff       	jmp    c001e504 <__moddi3+0x54>
c001e599:	8d 76 00             	lea    esi,[esi+0x0]
c001e59c:	b8 20 00 00 00       	mov    eax,0x20
c001e5a1:	89 c2                	mov    edx,eax
c001e5a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5a7:	29 da                	sub    edx,ebx
c001e5a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5ad:	88 d9                	mov    cl,bl
c001e5af:	d3 e7                	shl    edi,cl
c001e5b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5b5:	88 d1                	mov    cl,dl
c001e5b7:	d3 e8                	shr    eax,cl
c001e5b9:	09 c7                	or     edi,eax
c001e5bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5c3:	89 d8                	mov    eax,ebx
c001e5c5:	88 d9                	mov    cl,bl
c001e5c7:	d3 e7                	shl    edi,cl
c001e5c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5cd:	89 f3                	mov    ebx,esi
c001e5cf:	88 d1                	mov    cl,dl
c001e5d1:	d3 eb                	shr    ebx,cl
c001e5d3:	89 c7                	mov    edi,eax
c001e5d5:	88 c1                	mov    cl,al
c001e5d7:	d3 e6                	shl    esi,cl
c001e5d9:	89 e8                	mov    eax,ebp
c001e5db:	88 d1                	mov    cl,dl
c001e5dd:	d3 e8                	shr    eax,cl
c001e5df:	09 f0                	or     eax,esi
c001e5e1:	89 f9                	mov    ecx,edi
c001e5e3:	d3 e5                	shl    ebp,cl
c001e5e5:	89 da                	mov    edx,ebx
c001e5e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e5eb:	89 d3                	mov    ebx,edx
c001e5ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e5f1:	89 c6                	mov    esi,eax
c001e5f3:	89 d1                	mov    ecx,edx
c001e5f5:	39 d3                	cmp    ebx,edx
c001e5f7:	72 27                	jb     c001e620 <__moddi3+0x170>
c001e5f9:	74 21                	je     c001e61c <__moddi3+0x16c>
c001e5fb:	29 f5                	sub    ebp,esi
c001e5fd:	19 cb                	sbb    ebx,ecx
c001e5ff:	89 de                	mov    esi,ebx
c001e601:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e605:	d3 e6                	shl    esi,cl
c001e607:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e60b:	89 f9                	mov    ecx,edi
c001e60d:	d3 ed                	shr    ebp,cl
c001e60f:	09 ee                	or     esi,ebp
c001e611:	89 f0                	mov    eax,esi
c001e613:	d3 eb                	shr    ebx,cl
c001e615:	89 da                	mov    edx,ebx
c001e617:	e9 e8 fe ff ff       	jmp    c001e504 <__moddi3+0x54>
c001e61c:	39 c5                	cmp    ebp,eax
c001e61e:	73 db                	jae    c001e5fb <__moddi3+0x14b>
c001e620:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e624:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e628:	89 d1                	mov    ecx,edx
c001e62a:	89 c6                	mov    esi,eax
c001e62c:	eb cd                	jmp    c001e5fb <__moddi3+0x14b>
c001e62e:	66 90                	xchg   ax,ax

c001e630 <__udivdi3>:
c001e630:	55                   	push   ebp
c001e631:	57                   	push   edi
c001e632:	56                   	push   esi
c001e633:	53                   	push   ebx
c001e634:	83 ec 1c             	sub    esp,0x1c
c001e637:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e63b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e63f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e643:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e647:	85 d2                	test   edx,edx
c001e649:	75 41                	jne    c001e68c <__udivdi3+0x5c>
c001e64b:	39 f7                	cmp    edi,esi
c001e64d:	76 15                	jbe    c001e664 <__udivdi3+0x34>
c001e64f:	89 e8                	mov    eax,ebp
c001e651:	89 f2                	mov    edx,esi
c001e653:	f7 f7                	div    edi
c001e655:	31 db                	xor    ebx,ebx
c001e657:	89 da                	mov    edx,ebx
c001e659:	83 c4 1c             	add    esp,0x1c
c001e65c:	5b                   	pop    ebx
c001e65d:	5e                   	pop    esi
c001e65e:	5f                   	pop    edi
c001e65f:	5d                   	pop    ebp
c001e660:	c3                   	ret    
c001e661:	8d 76 00             	lea    esi,[esi+0x0]
c001e664:	89 f9                	mov    ecx,edi
c001e666:	85 ff                	test   edi,edi
c001e668:	75 0b                	jne    c001e675 <__udivdi3+0x45>
c001e66a:	b8 01 00 00 00       	mov    eax,0x1
c001e66f:	31 d2                	xor    edx,edx
c001e671:	f7 f7                	div    edi
c001e673:	89 c1                	mov    ecx,eax
c001e675:	31 d2                	xor    edx,edx
c001e677:	89 f0                	mov    eax,esi
c001e679:	f7 f1                	div    ecx
c001e67b:	89 c3                	mov    ebx,eax
c001e67d:	89 e8                	mov    eax,ebp
c001e67f:	f7 f1                	div    ecx
c001e681:	89 da                	mov    edx,ebx
c001e683:	83 c4 1c             	add    esp,0x1c
c001e686:	5b                   	pop    ebx
c001e687:	5e                   	pop    esi
c001e688:	5f                   	pop    edi
c001e689:	5d                   	pop    ebp
c001e68a:	c3                   	ret    
c001e68b:	90                   	nop
c001e68c:	39 f2                	cmp    edx,esi
c001e68e:	77 1c                	ja     c001e6ac <__udivdi3+0x7c>
c001e690:	0f bd da             	bsr    ebx,edx
c001e693:	83 f3 1f             	xor    ebx,0x1f
c001e696:	75 24                	jne    c001e6bc <__udivdi3+0x8c>
c001e698:	39 f2                	cmp    edx,esi
c001e69a:	72 08                	jb     c001e6a4 <__udivdi3+0x74>
c001e69c:	39 ef                	cmp    edi,ebp
c001e69e:	0f 87 84 00 00 00    	ja     c001e728 <__udivdi3+0xf8>
c001e6a4:	b8 01 00 00 00       	mov    eax,0x1
c001e6a9:	eb ac                	jmp    c001e657 <__udivdi3+0x27>
c001e6ab:	90                   	nop
c001e6ac:	31 db                	xor    ebx,ebx
c001e6ae:	31 c0                	xor    eax,eax
c001e6b0:	89 da                	mov    edx,ebx
c001e6b2:	83 c4 1c             	add    esp,0x1c
c001e6b5:	5b                   	pop    ebx
c001e6b6:	5e                   	pop    esi
c001e6b7:	5f                   	pop    edi
c001e6b8:	5d                   	pop    ebp
c001e6b9:	c3                   	ret    
c001e6ba:	66 90                	xchg   ax,ax
c001e6bc:	b8 20 00 00 00       	mov    eax,0x20
c001e6c1:	29 d8                	sub    eax,ebx
c001e6c3:	88 d9                	mov    cl,bl
c001e6c5:	d3 e2                	shl    edx,cl
c001e6c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e6cb:	89 fa                	mov    edx,edi
c001e6cd:	88 c1                	mov    cl,al
c001e6cf:	d3 ea                	shr    edx,cl
c001e6d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6d5:	09 d1                	or     ecx,edx
c001e6d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6db:	88 d9                	mov    cl,bl
c001e6dd:	d3 e7                	shl    edi,cl
c001e6df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6e3:	89 f7                	mov    edi,esi
c001e6e5:	88 c1                	mov    cl,al
c001e6e7:	d3 ef                	shr    edi,cl
c001e6e9:	88 d9                	mov    cl,bl
c001e6eb:	d3 e6                	shl    esi,cl
c001e6ed:	89 ea                	mov    edx,ebp
c001e6ef:	88 c1                	mov    cl,al
c001e6f1:	d3 ea                	shr    edx,cl
c001e6f3:	09 d6                	or     esi,edx
c001e6f5:	89 f0                	mov    eax,esi
c001e6f7:	89 fa                	mov    edx,edi
c001e6f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e6fd:	89 d7                	mov    edi,edx
c001e6ff:	89 c6                	mov    esi,eax
c001e701:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e705:	39 d7                	cmp    edi,edx
c001e707:	72 13                	jb     c001e71c <__udivdi3+0xec>
c001e709:	74 09                	je     c001e714 <__udivdi3+0xe4>
c001e70b:	89 f0                	mov    eax,esi
c001e70d:	31 db                	xor    ebx,ebx
c001e70f:	e9 43 ff ff ff       	jmp    c001e657 <__udivdi3+0x27>
c001e714:	88 d9                	mov    cl,bl
c001e716:	d3 e5                	shl    ebp,cl
c001e718:	39 c5                	cmp    ebp,eax
c001e71a:	73 ef                	jae    c001e70b <__udivdi3+0xdb>
c001e71c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e71f:	31 db                	xor    ebx,ebx
c001e721:	e9 31 ff ff ff       	jmp    c001e657 <__udivdi3+0x27>
c001e726:	66 90                	xchg   ax,ax
c001e728:	31 c0                	xor    eax,eax
c001e72a:	e9 28 ff ff ff       	jmp    c001e657 <__udivdi3+0x27>
c001e72f:	90                   	nop

c001e730 <__umoddi3>:
c001e730:	55                   	push   ebp
c001e731:	57                   	push   edi
c001e732:	56                   	push   esi
c001e733:	53                   	push   ebx
c001e734:	83 ec 1c             	sub    esp,0x1c
c001e737:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e73b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e73f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e743:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e747:	89 da                	mov    edx,ebx
c001e749:	85 c0                	test   eax,eax
c001e74b:	75 37                	jne    c001e784 <__umoddi3+0x54>
c001e74d:	39 df                	cmp    edi,ebx
c001e74f:	76 13                	jbe    c001e764 <__umoddi3+0x34>
c001e751:	89 f0                	mov    eax,esi
c001e753:	f7 f7                	div    edi
c001e755:	89 d0                	mov    eax,edx
c001e757:	31 d2                	xor    edx,edx
c001e759:	83 c4 1c             	add    esp,0x1c
c001e75c:	5b                   	pop    ebx
c001e75d:	5e                   	pop    esi
c001e75e:	5f                   	pop    edi
c001e75f:	5d                   	pop    ebp
c001e760:	c3                   	ret    
c001e761:	8d 76 00             	lea    esi,[esi+0x0]
c001e764:	89 fd                	mov    ebp,edi
c001e766:	85 ff                	test   edi,edi
c001e768:	75 0b                	jne    c001e775 <__umoddi3+0x45>
c001e76a:	b8 01 00 00 00       	mov    eax,0x1
c001e76f:	31 d2                	xor    edx,edx
c001e771:	f7 f7                	div    edi
c001e773:	89 c5                	mov    ebp,eax
c001e775:	89 d8                	mov    eax,ebx
c001e777:	31 d2                	xor    edx,edx
c001e779:	f7 f5                	div    ebp
c001e77b:	89 f0                	mov    eax,esi
c001e77d:	f7 f5                	div    ebp
c001e77f:	89 d0                	mov    eax,edx
c001e781:	eb d4                	jmp    c001e757 <__umoddi3+0x27>
c001e783:	90                   	nop
c001e784:	89 f1                	mov    ecx,esi
c001e786:	39 d8                	cmp    eax,ebx
c001e788:	76 0a                	jbe    c001e794 <__umoddi3+0x64>
c001e78a:	89 f0                	mov    eax,esi
c001e78c:	83 c4 1c             	add    esp,0x1c
c001e78f:	5b                   	pop    ebx
c001e790:	5e                   	pop    esi
c001e791:	5f                   	pop    edi
c001e792:	5d                   	pop    ebp
c001e793:	c3                   	ret    
c001e794:	0f bd e8             	bsr    ebp,eax
c001e797:	83 f5 1f             	xor    ebp,0x1f
c001e79a:	75 1c                	jne    c001e7b8 <__umoddi3+0x88>
c001e79c:	39 d8                	cmp    eax,ebx
c001e79e:	72 04                	jb     c001e7a4 <__umoddi3+0x74>
c001e7a0:	39 f7                	cmp    edi,esi
c001e7a2:	77 08                	ja     c001e7ac <__umoddi3+0x7c>
c001e7a4:	89 da                	mov    edx,ebx
c001e7a6:	29 fe                	sub    esi,edi
c001e7a8:	19 c2                	sbb    edx,eax
c001e7aa:	89 f1                	mov    ecx,esi
c001e7ac:	89 c8                	mov    eax,ecx
c001e7ae:	83 c4 1c             	add    esp,0x1c
c001e7b1:	5b                   	pop    ebx
c001e7b2:	5e                   	pop    esi
c001e7b3:	5f                   	pop    edi
c001e7b4:	5d                   	pop    ebp
c001e7b5:	c3                   	ret    
c001e7b6:	66 90                	xchg   ax,ax
c001e7b8:	ba 20 00 00 00       	mov    edx,0x20
c001e7bd:	29 ea                	sub    edx,ebp
c001e7bf:	89 e9                	mov    ecx,ebp
c001e7c1:	d3 e0                	shl    eax,cl
c001e7c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7c7:	89 f8                	mov    eax,edi
c001e7c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e7cd:	88 d1                	mov    cl,dl
c001e7cf:	d3 e8                	shr    eax,cl
c001e7d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7d5:	09 c1                	or     ecx,eax
c001e7d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7db:	89 e9                	mov    ecx,ebp
c001e7dd:	d3 e7                	shl    edi,cl
c001e7df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7e3:	89 d8                	mov    eax,ebx
c001e7e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7e9:	88 d1                	mov    cl,dl
c001e7eb:	d3 e8                	shr    eax,cl
c001e7ed:	89 c7                	mov    edi,eax
c001e7ef:	89 e9                	mov    ecx,ebp
c001e7f1:	d3 e3                	shl    ebx,cl
c001e7f3:	89 f0                	mov    eax,esi
c001e7f5:	88 d1                	mov    cl,dl
c001e7f7:	d3 e8                	shr    eax,cl
c001e7f9:	09 d8                	or     eax,ebx
c001e7fb:	89 e9                	mov    ecx,ebp
c001e7fd:	d3 e6                	shl    esi,cl
c001e7ff:	89 f3                	mov    ebx,esi
c001e801:	89 fa                	mov    edx,edi
c001e803:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e807:	89 d1                	mov    ecx,edx
c001e809:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e80d:	89 c6                	mov    esi,eax
c001e80f:	89 d7                	mov    edi,edx
c001e811:	39 d1                	cmp    ecx,edx
c001e813:	72 27                	jb     c001e83c <__umoddi3+0x10c>
c001e815:	74 21                	je     c001e838 <__umoddi3+0x108>
c001e817:	89 ca                	mov    edx,ecx
c001e819:	29 f3                	sub    ebx,esi
c001e81b:	19 fa                	sbb    edx,edi
c001e81d:	89 d0                	mov    eax,edx
c001e81f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e823:	d3 e0                	shl    eax,cl
c001e825:	89 e9                	mov    ecx,ebp
c001e827:	d3 eb                	shr    ebx,cl
c001e829:	09 d8                	or     eax,ebx
c001e82b:	d3 ea                	shr    edx,cl
c001e82d:	83 c4 1c             	add    esp,0x1c
c001e830:	5b                   	pop    ebx
c001e831:	5e                   	pop    esi
c001e832:	5f                   	pop    edi
c001e833:	5d                   	pop    ebp
c001e834:	c3                   	ret    
c001e835:	8d 76 00             	lea    esi,[esi+0x0]
c001e838:	39 c3                	cmp    ebx,eax
c001e83a:	73 db                	jae    c001e817 <__umoddi3+0xe7>
c001e83c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e840:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e844:	89 d7                	mov    edi,edx
c001e846:	89 c6                	mov    esi,eax
c001e848:	eb cd                	jmp    c001e817 <__umoddi3+0xe7>

Disassembly of section .init:

c001e84a <_init>:
c001e84a:	55                   	push   ebp
c001e84b:	89 e5                	mov    ebp,esp
c001e84d:	e8 a2 18 fe ff       	call   c00000f4 <frame_dummy>
c001e852:	e8 e5 fa ff ff       	call   c001e33c <__do_global_ctors_aux>
c001e857:	5d                   	pop    ebp
c001e858:	c3                   	ret    

Disassembly of section .fini:

c001e859 <_fini>:
c001e859:	55                   	push   ebp
c001e85a:	89 e5                	mov    ebp,esp
c001e85c:	e8 23 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e861:	5d                   	pop    ebp
c001e862:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e864 <Computer::~Computer()>:
c001e864:	83 ec 0c             	sub    esp,0xc
c001e867:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c001e86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e870:	89 10                	mov    DWORD PTR [eax],edx
c001e872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e876:	83 ec 0c             	sub    esp,0xc
c001e879:	50                   	push   eax
c001e87a:	e8 83 d4 fe ff       	call   c000bd02 <Device::~Device()>
c001e87f:	83 c4 10             	add    esp,0x10
c001e882:	90                   	nop
c001e883:	83 c4 0c             	add    esp,0xc
c001e886:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e888 <Computer::~Computer()>:
c001e888:	83 ec 0c             	sub    esp,0xc
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e892:	e8 cd ff ff ff       	call   c001e864 <Computer::~Computer()>
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	83 ec 08             	sub    esp,0x8
c001e89d:	68 70 01 00 00       	push   0x170
c001e8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a6:	e8 f5 bf fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001e8ab:	83 c4 10             	add    esp,0x10
c001e8ae:	83 c4 0c             	add    esp,0xc
c001e8b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e8b2 <idleCommon()>:
c001e8b2:	83 ec 0c             	sub    esp,0xc
c001e8b5:	fa                   	cli    
c001e8b6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e8bc:	e8 a3 67 ff ff       	call   c0015064 <schedule()>
c001e8c1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e8c6:	48                   	dec    eax
c001e8c7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e8cc:	75 01                	jne    c001e8cf <idleCommon()+0x1d>
c001e8ce:	fb                   	sti    
c001e8cf:	83 c4 0c             	add    esp,0xc
c001e8d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e8d4 <LinkedList<UnixFile>::~LinkedList()>:
c001e8d4:	90                   	nop
c001e8d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e8d6 <LinkedList<UnixFile>::LinkedList()>:
c001e8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e90b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e916:	90                   	nop
c001e917:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e918 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e920:	75 10                	jne    c001e932 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e922:	83 ec 0c             	sub    esp,0xc
c001e925:	68 88 fd 01 c0       	push   0xc001fd88
c001e92a:	e8 3a 1f ff ff       	call   c0010869 <KePanic(char const*)>
c001e92f:	83 c4 10             	add    esp,0x10
c001e932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e936:	8b 00                	mov    eax,DWORD PTR [eax]
c001e938:	85 c0                	test   eax,eax
c001e93a:	74 34                	je     c001e970 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e940:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e943:	85 c0                	test   eax,eax
c001e945:	74 29                	je     c001e970 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e94e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e952:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e95d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e964:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e967:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e96e:	eb 65                	jmp    c001e9d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e974:	8b 00                	mov    eax,DWORD PTR [eax]
c001e976:	85 c0                	test   eax,eax
c001e978:	75 4b                	jne    c001e9c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e981:	85 c0                	test   eax,eax
c001e983:	75 40                	jne    c001e9c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e989:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e98d:	89 10                	mov    DWORD PTR [eax],edx
c001e98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e993:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e997:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9af:	85 c0                	test   eax,eax
c001e9b1:	74 22                	je     c001e9d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9b3:	83 ec 0c             	sub    esp,0xc
c001e9b6:	68 aa fd 01 c0       	push   0xc001fdaa
c001e9bb:	e8 a9 1e ff ff       	call   c0010869 <KePanic(char const*)>
c001e9c0:	83 c4 10             	add    esp,0x10
c001e9c3:	eb 10                	jmp    c001e9d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9c5:	83 ec 0c             	sub    esp,0xc
c001e9c8:	68 b4 fd 01 c0       	push   0xc001fdb4
c001e9cd:	e8 97 1e ff ff       	call   c0010869 <KePanic(char const*)>
c001e9d2:	83 c4 10             	add    esp,0x10
c001e9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9dc:	8d 50 01             	lea    edx,[eax+0x1]
c001e9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9e6:	90                   	nop
c001e9e7:	83 c4 0c             	add    esp,0xc
c001e9ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9ec <LinkedList<UnixFile>::getFirstElement()>:
c001e9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e9f4 <LinkedList<UnixFile>::removeFirst()>:
c001e9f4:	83 ec 0c             	sub    esp,0xc
c001e9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9fd:	85 c0                	test   eax,eax
c001e9ff:	75 12                	jne    c001ea13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ea01:	83 ec 0c             	sub    esp,0xc
c001ea04:	68 c0 fd 01 c0       	push   0xc001fdc0
c001ea09:	e8 5b 1e ff ff       	call   c0010869 <KePanic(char const*)>
c001ea0e:	83 c4 10             	add    esp,0x10
c001ea11:	eb 7e                	jmp    c001ea91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea1d:	85 c0                	test   eax,eax
c001ea1f:	74 10                	je     c001ea31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea21:	83 ec 0c             	sub    esp,0xc
c001ea24:	68 0b fe 01 c0       	push   0xc001fe0b
c001ea29:	e8 3b 1e ff ff       	call   c0010869 <KePanic(char const*)>
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea35:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea3a:	85 c0                	test   eax,eax
c001ea3c:	75 33                	jne    c001ea71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea5a:	83 f8 01             	cmp    eax,0x1
c001ea5d:	74 21                	je     c001ea80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	68 e4 fd 01 c0       	push   0xc001fde4
c001ea67:	e8 fd 1d ff ff       	call   c0010869 <KePanic(char const*)>
c001ea6c:	83 c4 10             	add    esp,0x10
c001ea6f:	eb 0f                	jmp    c001ea80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7e:	89 10                	mov    DWORD PTR [eax],edx
c001ea80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea87:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea91:	83 c4 0c             	add    esp,0xc
c001ea94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ea9e <DriverlessDevice::~DriverlessDevice()>:
c001ea9e:	ba 9c 04 02 c0       	mov    edx,0xc002049c
c001eaa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaa7:	89 10                	mov    DWORD PTR [eax],edx
c001eaa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaad:	50                   	push   eax
c001eaae:	e8 4f d2 fe ff       	call   c000bd02 <Device::~Device()>
c001eab3:	83 c4 04             	add    esp,0x4
c001eab6:	90                   	nop
c001eab7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eab8 <DriverlessDevice::~DriverlessDevice()>:
c001eab8:	83 ec 0c             	sub    esp,0xc
c001eabb:	83 ec 0c             	sub    esp,0xc
c001eabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac2:	e8 d7 ff ff ff       	call   c001ea9e <DriverlessDevice::~DriverlessDevice()>
c001eac7:	83 c4 10             	add    esp,0x10
c001eaca:	83 ec 08             	sub    esp,0x8
c001eacd:	68 58 01 00 00       	push   0x158
c001ead2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead6:	e8 c5 bd fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	83 c4 0c             	add    esp,0xc
c001eae1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eae2 <LinkedList<Device>::addElement(Device*)>:
c001eae2:	83 ec 0c             	sub    esp,0xc
c001eae5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eaea:	75 10                	jne    c001eafc <LinkedList<Device>::addElement(Device*)+0x1a>
c001eaec:	83 ec 0c             	sub    esp,0xc
c001eaef:	68 88 fd 01 c0       	push   0xc001fd88
c001eaf4:	e8 70 1d ff ff       	call   c0010869 <KePanic(char const*)>
c001eaf9:	83 c4 10             	add    esp,0x10
c001eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb00:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb02:	85 c0                	test   eax,eax
c001eb04:	74 3a                	je     c001eb40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb0d:	85 c0                	test   eax,eax
c001eb0f:	74 2f                	je     c001eb40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb3e:	eb 68                	jmp    c001eba8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb44:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb46:	85 c0                	test   eax,eax
c001eb48:	75 4e                	jne    c001eb98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb51:	85 c0                	test   eax,eax
c001eb53:	75 43                	jne    c001eb98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5d:	89 10                	mov    DWORD PTR [eax],edx
c001eb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb82:	85 c0                	test   eax,eax
c001eb84:	74 22                	je     c001eba8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb86:	83 ec 0c             	sub    esp,0xc
c001eb89:	68 aa fd 01 c0       	push   0xc001fdaa
c001eb8e:	e8 d6 1c ff ff       	call   c0010869 <KePanic(char const*)>
c001eb93:	83 c4 10             	add    esp,0x10
c001eb96:	eb 10                	jmp    c001eba8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	68 b4 fd 01 c0       	push   0xc001fdb4
c001eba0:	e8 c4 1c ff ff       	call   c0010869 <KePanic(char const*)>
c001eba5:	83 c4 10             	add    esp,0x10
c001eba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebaf:	8d 50 01             	lea    edx,[eax+0x1]
c001ebb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebb9:	90                   	nop
c001ebba:	83 c4 0c             	add    esp,0xc
c001ebbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebbe <LinkedList<Device>::LinkedList()>:
c001ebbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebfe:	90                   	nop
c001ebff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ec00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ec00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec06:	85 c0                	test   eax,eax
c001ec08:	75 0e                	jne    c001ec18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec11:	85 c0                	test   eax,eax
c001ec13:	75 03                	jne    c001ec18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec15:	b0 01                	mov    al,0x1
c001ec17:	c3                   	ret    
c001ec18:	b0 00                	mov    al,0x0
c001ec1a:	90                   	nop
c001ec1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ec24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ec24:	83 ec 0c             	sub    esp,0xc
c001ec27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec2d:	85 c0                	test   eax,eax
c001ec2f:	75 17                	jne    c001ec48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec31:	83 ec 0c             	sub    esp,0xc
c001ec34:	68 c0 fd 01 c0       	push   0xc001fdc0
c001ec39:	e8 2b 1c ff ff       	call   c0010869 <KePanic(char const*)>
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	e9 96 00 00 00       	jmp    c001ecdc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec46:	66 90                	xchg   ax,ax
c001ec48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec52:	85 c0                	test   eax,eax
c001ec54:	0f 95 c0             	setne  al
c001ec57:	0f b6 c0             	movzx  eax,al
c001ec5a:	85 c0                	test   eax,eax
c001ec5c:	74 12                	je     c001ec70 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec5e:	83 ec 0c             	sub    esp,0xc
c001ec61:	68 0b fe 01 c0       	push   0xc001fe0b
c001ec66:	e8 fe 1b ff ff       	call   c0010869 <KePanic(char const*)>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	66 90                	xchg   ax,ax
c001ec70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec79:	85 c0                	test   eax,eax
c001ec7b:	0f 94 c0             	sete   al
c001ec7e:	0f b6 c0             	movzx  eax,al
c001ec81:	85 c0                	test   eax,eax
c001ec83:	74 33                	je     c001ecb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eca1:	83 f8 01             	cmp    eax,0x1
c001eca4:	74 22                	je     c001ecc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001eca6:	83 ec 0c             	sub    esp,0xc
c001eca9:	68 e4 fd 01 c0       	push   0xc001fde4
c001ecae:	e8 b6 1b ff ff       	call   c0010869 <KePanic(char const*)>
c001ecb3:	83 c4 10             	add    esp,0x10
c001ecb6:	eb 10                	jmp    c001ecc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecbe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ecc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc5:	89 10                	mov    DWORD PTR [eax],edx
c001ecc7:	90                   	nop
c001ecc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eccf:	8d 50 ff             	lea    edx,[eax-0x1]
c001ecd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ecd9:	8d 76 00             	lea    esi,[esi+0x0]
c001ecdc:	83 c4 0c             	add    esp,0xc
c001ecdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ece0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ece0:	83 ec 0c             	sub    esp,0xc
c001ece3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ece8:	75 12                	jne    c001ecfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	68 88 fd 01 c0       	push   0xc001fd88
c001ecf2:	e8 72 1b ff ff       	call   c0010869 <KePanic(char const*)>
c001ecf7:	83 c4 10             	add    esp,0x10
c001ecfa:	66 90                	xchg   ax,ax
c001ecfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed02:	85 c0                	test   eax,eax
c001ed04:	74 36                	je     c001ed3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed0d:	85 c0                	test   eax,eax
c001ed0f:	74 2b                	je     c001ed3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ed1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed38:	eb 6a                	jmp    c001eda4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed3a:	66 90                	xchg   ax,ax
c001ed3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed42:	85 c0                	test   eax,eax
c001ed44:	75 4e                	jne    c001ed94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed4d:	85 c0                	test   eax,eax
c001ed4f:	75 43                	jne    c001ed94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed59:	89 10                	mov    DWORD PTR [eax],edx
c001ed5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed7b:	85 c0                	test   eax,eax
c001ed7d:	74 25                	je     c001eda4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed7f:	83 ec 0c             	sub    esp,0xc
c001ed82:	68 aa fd 01 c0       	push   0xc001fdaa
c001ed87:	e8 dd 1a ff ff       	call   c0010869 <KePanic(char const*)>
c001ed8c:	83 c4 10             	add    esp,0x10
c001ed8f:	eb 13                	jmp    c001eda4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed91:	8d 76 00             	lea    esi,[esi+0x0]
c001ed94:	83 ec 0c             	sub    esp,0xc
c001ed97:	68 b4 fd 01 c0       	push   0xc001fdb4
c001ed9c:	e8 c8 1a ff ff       	call   c0010869 <KePanic(char const*)>
c001eda1:	83 c4 10             	add    esp,0x10
c001eda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edab:	8d 50 01             	lea    edx,[eax+0x1]
c001edae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edb5:	90                   	nop
c001edb6:	83 c4 0c             	add    esp,0xc
c001edb9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edbc <ACPI::~ACPI()>:
c001edbc:	83 ec 0c             	sub    esp,0xc
c001edbf:	ba a0 0a 02 c0       	mov    edx,0xc0020aa0
c001edc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc8:	89 10                	mov    DWORD PTR [eax],edx
c001edca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edce:	83 ec 0c             	sub    esp,0xc
c001edd1:	50                   	push   eax
c001edd2:	e8 2b cf fe ff       	call   c000bd02 <Device::~Device()>
c001edd7:	83 c4 10             	add    esp,0x10
c001edda:	90                   	nop
c001eddb:	83 c4 0c             	add    esp,0xc
c001edde:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ede0 <ACPI::~ACPI()>:
c001ede0:	83 ec 0c             	sub    esp,0xc
c001ede3:	83 ec 0c             	sub    esp,0xc
c001ede6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edea:	e8 cd ff ff ff       	call   c001edbc <ACPI::~ACPI()>
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	83 ec 08             	sub    esp,0x8
c001edf5:	68 64 12 00 00       	push   0x1264
c001edfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edfe:	e8 9d ba fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001ee03:	83 c4 10             	add    esp,0x10
c001ee06:	83 c4 0c             	add    esp,0xc
c001ee09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ee0c <LinkedList<Device>::~LinkedList()>:
c001ee0c:	90                   	nop
c001ee0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ee10 <LinkedList<Device>::isEmpty()>:
c001ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee16:	85 c0                	test   eax,eax
c001ee18:	75 0e                	jne    c001ee28 <LinkedList<Device>::isEmpty()+0x18>
c001ee1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee21:	85 c0                	test   eax,eax
c001ee23:	75 03                	jne    c001ee28 <LinkedList<Device>::isEmpty()+0x18>
c001ee25:	b0 01                	mov    al,0x1
c001ee27:	c3                   	ret    
c001ee28:	b0 00                	mov    al,0x0
c001ee2a:	90                   	nop
c001ee2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ee2c <LinkedList<Device>::getFirstElement()>:
c001ee2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee34 <LinkedList<Device>::removeFirst()>:
c001ee34:	83 ec 0c             	sub    esp,0xc
c001ee37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee3d:	85 c0                	test   eax,eax
c001ee3f:	75 17                	jne    c001ee58 <LinkedList<Device>::removeFirst()+0x24>
c001ee41:	83 ec 0c             	sub    esp,0xc
c001ee44:	68 c0 fd 01 c0       	push   0xc001fdc0
c001ee49:	e8 1b 1a ff ff       	call   c0010869 <KePanic(char const*)>
c001ee4e:	83 c4 10             	add    esp,0x10
c001ee51:	e9 92 00 00 00       	jmp    c001eee8 <LinkedList<Device>::removeFirst()+0xb4>
c001ee56:	66 90                	xchg   ax,ax
c001ee58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee5f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee65:	85 c0                	test   eax,eax
c001ee67:	74 13                	je     c001ee7c <LinkedList<Device>::removeFirst()+0x48>
c001ee69:	83 ec 0c             	sub    esp,0xc
c001ee6c:	68 0b fe 01 c0       	push   0xc001fe0b
c001ee71:	e8 f3 19 ff ff       	call   c0010869 <KePanic(char const*)>
c001ee76:	83 c4 10             	add    esp,0x10
c001ee79:	8d 76 00             	lea    esi,[esi+0x0]
c001ee7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee82:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee88:	85 c0                	test   eax,eax
c001ee8a:	75 34                	jne    c001eec0 <LinkedList<Device>::removeFirst()+0x8c>
c001ee8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eea8:	83 f8 01             	cmp    eax,0x1
c001eeab:	74 27                	je     c001eed4 <LinkedList<Device>::removeFirst()+0xa0>
c001eead:	83 ec 0c             	sub    esp,0xc
c001eeb0:	68 e4 fd 01 c0       	push   0xc001fde4
c001eeb5:	e8 af 19 ff ff       	call   c0010869 <KePanic(char const*)>
c001eeba:	83 c4 10             	add    esp,0x10
c001eebd:	eb 15                	jmp    c001eed4 <LinkedList<Device>::removeFirst()+0xa0>
c001eebf:	90                   	nop
c001eec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001eecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed0:	89 10                	mov    DWORD PTR [eax],edx
c001eed2:	66 90                	xchg   ax,ax
c001eed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eedb:	8d 50 ff             	lea    edx,[eax-0x1]
c001eede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eee5:	8d 76 00             	lea    esi,[esi+0x0]
c001eee8:	83 c4 0c             	add    esp,0xc
c001eeeb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eeec <CPU::~CPU()>:
c001eeec:	83 ec 0c             	sub    esp,0xc
c001eeef:	ba 3c 0c 02 c0       	mov    edx,0xc0020c3c
c001eef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef8:	89 10                	mov    DWORD PTR [eax],edx
c001eefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefe:	83 ec 0c             	sub    esp,0xc
c001ef01:	50                   	push   eax
c001ef02:	e8 fb cd fe ff       	call   c000bd02 <Device::~Device()>
c001ef07:	83 c4 10             	add    esp,0x10
c001ef0a:	90                   	nop
c001ef0b:	83 c4 0c             	add    esp,0xc
c001ef0e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ef10 <CPU::~CPU()>:
c001ef10:	83 ec 0c             	sub    esp,0xc
c001ef13:	83 ec 0c             	sub    esp,0xc
c001ef16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef1a:	e8 cd ff ff ff       	call   c001eeec <CPU::~CPU()>
c001ef1f:	83 c4 10             	add    esp,0x10
c001ef22:	83 ec 08             	sub    esp,0x8
c001ef25:	68 94 11 00 00       	push   0x1194
c001ef2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef2e:	e8 6d b9 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001ef33:	83 c4 10             	add    esp,0x10
c001ef36:	83 c4 0c             	add    esp,0xc
c001ef39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef44 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef44:	90                   	nop
c001ef45:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef48 <ThreadControlBlock::ThreadControlBlock()>:
c001ef48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef57:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef62:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef78:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef83:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef8f:	90                   	nop
c001ef90:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efcd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efd4:	90                   	nop
c001efd5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001efd6 <PCI::~PCI()>:
c001efd6:	83 ec 0c             	sub    esp,0xc
c001efd9:	ba a0 1a 02 c0       	mov    edx,0xc0021aa0
c001efde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe2:	89 10                	mov    DWORD PTR [eax],edx
c001efe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	50                   	push   eax
c001efec:	e8 a3 c7 fe ff       	call   c000b794 <Bus::~Bus()>
c001eff1:	83 c4 10             	add    esp,0x10
c001eff4:	90                   	nop
c001eff5:	83 c4 0c             	add    esp,0xc
c001eff8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001effa <PCI::~PCI()>:
c001effa:	83 ec 0c             	sub    esp,0xc
c001effd:	83 ec 0c             	sub    esp,0xc
c001f000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f004:	e8 cd ff ff ff       	call   c001efd6 <PCI::~PCI()>
c001f009:	83 c4 10             	add    esp,0x10
c001f00c:	83 ec 08             	sub    esp,0x8
c001f00f:	68 5c 01 00 00       	push   0x15c
c001f014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f018:	e8 83 b8 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f01d:	83 c4 10             	add    esp,0x10
c001f020:	83 c4 0c             	add    esp,0xc
c001f023:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f024 <IDE::~IDE()>:
c001f024:	83 ec 0c             	sub    esp,0xc
c001f027:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c001f02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f030:	89 10                	mov    DWORD PTR [eax],edx
c001f032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f036:	83 ec 0c             	sub    esp,0xc
c001f039:	50                   	push   eax
c001f03a:	e8 3d d1 fe ff       	call   c000c17c <HardDiskController::~HardDiskController()>
c001f03f:	83 c4 10             	add    esp,0x10
c001f042:	90                   	nop
c001f043:	83 c4 0c             	add    esp,0xc
c001f046:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f048 <IDE::~IDE()>:
c001f048:	83 ec 0c             	sub    esp,0xc
c001f04b:	83 ec 0c             	sub    esp,0xc
c001f04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f052:	e8 cd ff ff ff       	call   c001f024 <IDE::~IDE()>
c001f057:	83 c4 10             	add    esp,0x10
c001f05a:	83 ec 08             	sub    esp,0x8
c001f05d:	68 70 02 00 00       	push   0x270
c001f062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f066:	e8 35 b8 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f06b:	83 c4 10             	add    esp,0x10
c001f06e:	83 c4 0c             	add    esp,0xc
c001f071:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f072 <SATABus::~SATABus()>:
c001f072:	83 ec 0c             	sub    esp,0xc
c001f075:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001f07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07e:	89 10                	mov    DWORD PTR [eax],edx
c001f080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	50                   	push   eax
c001f088:	e8 ef d0 fe ff       	call   c000c17c <HardDiskController::~HardDiskController()>
c001f08d:	83 c4 10             	add    esp,0x10
c001f090:	90                   	nop
c001f091:	83 c4 0c             	add    esp,0xc
c001f094:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f096 <SATABus::~SATABus()>:
c001f096:	83 ec 0c             	sub    esp,0xc
c001f099:	83 ec 0c             	sub    esp,0xc
c001f09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a0:	e8 cd ff ff ff       	call   c001f072 <SATABus::~SATABus()>
c001f0a5:	83 c4 10             	add    esp,0x10
c001f0a8:	83 ec 08             	sub    esp,0x8
c001f0ab:	68 64 01 00 00       	push   0x164
c001f0b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b4:	e8 e7 b7 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f0b9:	83 c4 10             	add    esp,0x10
c001f0bc:	83 c4 0c             	add    esp,0xc
c001f0bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f0c0 <ATA::~ATA()>:
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001f0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0cc:	89 10                	mov    DWORD PTR [eax],edx
c001f0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d2:	83 ec 0c             	sub    esp,0xc
c001f0d5:	50                   	push   eax
c001f0d6:	e8 83 d1 fe ff       	call   c000c25e <PhysicalDisk::~PhysicalDisk()>
c001f0db:	83 c4 10             	add    esp,0x10
c001f0de:	90                   	nop
c001f0df:	83 c4 0c             	add    esp,0xc
c001f0e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f0e4 <ATA::~ATA()>:
c001f0e4:	83 ec 0c             	sub    esp,0xc
c001f0e7:	83 ec 0c             	sub    esp,0xc
c001f0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ee:	e8 cd ff ff ff       	call   c001f0c0 <ATA::~ATA()>
c001f0f3:	83 c4 10             	add    esp,0x10
c001f0f6:	83 ec 08             	sub    esp,0x8
c001f0f9:	68 7c 01 00 00       	push   0x17c
c001f0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f102:	e8 99 b7 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f107:	83 c4 10             	add    esp,0x10
c001f10a:	83 c4 0c             	add    esp,0xc
c001f10d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f10e <ATAPI::~ATAPI()>:
c001f10e:	83 ec 0c             	sub    esp,0xc
c001f111:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c001f116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11a:	89 10                	mov    DWORD PTR [eax],edx
c001f11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	50                   	push   eax
c001f124:	e8 35 d1 fe ff       	call   c000c25e <PhysicalDisk::~PhysicalDisk()>
c001f129:	83 c4 10             	add    esp,0x10
c001f12c:	90                   	nop
c001f12d:	83 c4 0c             	add    esp,0xc
c001f130:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f132 <ATAPI::~ATAPI()>:
c001f132:	83 ec 0c             	sub    esp,0xc
c001f135:	83 ec 0c             	sub    esp,0xc
c001f138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13c:	e8 cd ff ff ff       	call   c001f10e <ATAPI::~ATAPI()>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	83 ec 08             	sub    esp,0x8
c001f147:	68 84 01 00 00       	push   0x184
c001f14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f150:	e8 4b b7 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f155:	83 c4 10             	add    esp,0x10
c001f158:	83 c4 0c             	add    esp,0xc
c001f15b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f15c <SATA::~SATA()>:
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c001f164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f168:	89 10                	mov    DWORD PTR [eax],edx
c001f16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f16e:	83 ec 0c             	sub    esp,0xc
c001f171:	50                   	push   eax
c001f172:	e8 e7 d0 fe ff       	call   c000c25e <PhysicalDisk::~PhysicalDisk()>
c001f177:	83 c4 10             	add    esp,0x10
c001f17a:	90                   	nop
c001f17b:	83 c4 0c             	add    esp,0xc
c001f17e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f180 <SATA::~SATA()>:
c001f180:	83 ec 0c             	sub    esp,0xc
c001f183:	83 ec 0c             	sub    esp,0xc
c001f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18a:	e8 cd ff ff ff       	call   c001f15c <SATA::~SATA()>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	83 ec 08             	sub    esp,0x8
c001f195:	68 7c 01 00 00       	push   0x17c
c001f19a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f19e:	e8 fd b6 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f1a3:	83 c4 10             	add    esp,0x10
c001f1a6:	83 c4 0c             	add    esp,0xc
c001f1a9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f1aa <SATAPI::~SATAPI()>:
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c001f1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b6:	89 10                	mov    DWORD PTR [eax],edx
c001f1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	50                   	push   eax
c001f1c0:	e8 99 d0 fe ff       	call   c000c25e <PhysicalDisk::~PhysicalDisk()>
c001f1c5:	83 c4 10             	add    esp,0x10
c001f1c8:	90                   	nop
c001f1c9:	83 c4 0c             	add    esp,0xc
c001f1cc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f1ce <SATAPI::~SATAPI()>:
c001f1ce:	83 ec 0c             	sub    esp,0xc
c001f1d1:	83 ec 0c             	sub    esp,0xc
c001f1d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d8:	e8 cd ff ff ff       	call   c001f1aa <SATAPI::~SATAPI()>
c001f1dd:	83 c4 10             	add    esp,0x10
c001f1e0:	83 ec 08             	sub    esp,0x8
c001f1e3:	68 84 01 00 00       	push   0x184
c001f1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ec:	e8 af b6 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f1f1:	83 c4 10             	add    esp,0x10
c001f1f4:	83 c4 0c             	add    esp,0xc
c001f1f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f1f8 <IOAPIC::~IOAPIC()>:
c001f1f8:	83 ec 0c             	sub    esp,0xc
c001f1fb:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001f200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f204:	89 10                	mov    DWORD PTR [eax],edx
c001f206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20a:	83 ec 0c             	sub    esp,0xc
c001f20d:	50                   	push   eax
c001f20e:	e8 ef ca fe ff       	call   c000bd02 <Device::~Device()>
c001f213:	83 c4 10             	add    esp,0x10
c001f216:	90                   	nop
c001f217:	83 c4 0c             	add    esp,0xc
c001f21a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f21c <IOAPIC::~IOAPIC()>:
c001f21c:	83 ec 0c             	sub    esp,0xc
c001f21f:	83 ec 0c             	sub    esp,0xc
c001f222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f226:	e8 cd ff ff ff       	call   c001f1f8 <IOAPIC::~IOAPIC()>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	83 ec 08             	sub    esp,0x8
c001f231:	68 68 01 00 00       	push   0x168
c001f236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f23a:	e8 61 b6 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f23f:	83 c4 10             	add    esp,0x10
c001f242:	83 c4 0c             	add    esp,0xc
c001f245:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f248 <APICTimer::~APICTimer()>:
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c001f250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f254:	89 10                	mov    DWORD PTR [eax],edx
c001f256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25a:	83 ec 0c             	sub    esp,0xc
c001f25d:	50                   	push   eax
c001f25e:	e8 75 e5 fe ff       	call   c000d7d8 <Timer::~Timer()>
c001f263:	83 c4 10             	add    esp,0x10
c001f266:	90                   	nop
c001f267:	83 c4 0c             	add    esp,0xc
c001f26a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f26c <APICTimer::~APICTimer()>:
c001f26c:	83 ec 0c             	sub    esp,0xc
c001f26f:	83 ec 0c             	sub    esp,0xc
c001f272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f276:	e8 cd ff ff ff       	call   c001f248 <APICTimer::~APICTimer()>
c001f27b:	83 c4 10             	add    esp,0x10
c001f27e:	83 ec 08             	sub    esp,0x8
c001f281:	68 60 01 00 00       	push   0x160
c001f286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f28a:	e8 11 b6 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f28f:	83 c4 10             	add    esp,0x10
c001f292:	83 c4 0c             	add    esp,0xc
c001f295:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f298 <PIT::~PIT()>:
c001f298:	83 ec 0c             	sub    esp,0xc
c001f29b:	ba dc 1e 02 c0       	mov    edx,0xc0021edc
c001f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a4:	89 10                	mov    DWORD PTR [eax],edx
c001f2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2aa:	83 ec 0c             	sub    esp,0xc
c001f2ad:	50                   	push   eax
c001f2ae:	e8 25 e5 fe ff       	call   c000d7d8 <Timer::~Timer()>
c001f2b3:	83 c4 10             	add    esp,0x10
c001f2b6:	90                   	nop
c001f2b7:	83 c4 0c             	add    esp,0xc
c001f2ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f2bc <PIT::~PIT()>:
c001f2bc:	83 ec 0c             	sub    esp,0xc
c001f2bf:	83 ec 0c             	sub    esp,0xc
c001f2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c6:	e8 cd ff ff ff       	call   c001f298 <PIT::~PIT()>
c001f2cb:	83 c4 10             	add    esp,0x10
c001f2ce:	83 ec 08             	sub    esp,0x8
c001f2d1:	68 5c 01 00 00       	push   0x15c
c001f2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2da:	e8 c1 b5 fe ff       	call   c000a8a0 <operator delete(void*, unsigned long)>
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	83 c4 0c             	add    esp,0xc
c001f2e5:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 2d 0d 02 c0       	mov    esi,0xc0020d2d
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 49 0d 02 c0       	mov    esi,0xc0020d49
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
