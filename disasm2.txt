
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 38 02 c0       	mov    eax,0xc00238a4
c0000025:	3d a4 38 02 c0       	cmp    eax,0xc00238a4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 38 02 c0       	push   0xc00238a4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 38 02 c0       	mov    eax,0xc00238a4
c0000051:	2d a4 38 02 c0       	sub    eax,0xc00238a4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 38 02 c0       	push   0xc00238a4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 6c ff 01 c0       	mov    ebx,0xc001ff6c
c0000097:	81 eb 68 ff 01 c0    	sub    ebx,0xc001ff68
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 68 ff 01 c0       	mov    esi,0xc001ff68
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 38 02 c0       	push   0xc00238a4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 a4 38 02 c0       	push   0xc00238a4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 6b 51 01 00       	call   c0015418 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 49 51 01 00       	call   c0015418 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 56 56 01 00       	call   c0015944 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f1 5c 01 00       	call   c0015fe8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 4d 0f 01 00       	jmp    c00112cc <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0080],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0080],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0080],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0080],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0080],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0080],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 84 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff7c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 da 77 01 00       	jmp    c00195b4 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 04 78 01 00       	jmp    c00195f4 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 25 78 01 00       	jmp    c0019634 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 e0 01 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfe20]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 e0 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe20]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba c4 28 02 c0       	mov    edx,0xc00228c4
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 9c 00 02 c0       	mov    edx,0xc002009c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 a2 00 02 c0       	mov    eax,0xc00200a2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 60 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfea0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 ab 00 02 c0       	mov    eax,0xc00200ab
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 e0 01 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfe20]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 30 01 02 c0       	mov    eax,0xc0020130
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 20 01 02 c0       	mov    ebx,0xc0020120
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 00 01 02 c0       	mov    eax,0xc0020100
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 10 01 02 c0       	mov    eax,0xc0020110
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba b2 00 02 c0       	mov    edx,0xc00200b2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba be 00 02 c0       	mov    edx,0xc00200be
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba d2 00 02 c0       	mov    edx,0xc00200d2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 00 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020500
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 00 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020500
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 00 03 02 c0       	mov    eax,0xc0020300
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 40 02 02 c0       	mov    eax,0xc0020240
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 00 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfe00]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 00 06 02 c0       	push   0xc0020600
c0006147:	e8 0c 3e 01 00       	call   c0019f58 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 0e 06 02 c0       	push   0xc002060e
c000617f:	e8 d4 3d 01 00       	call   c0019f58 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 3d 3d 01 00       	call   c0019efc <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 1d 06 02 c0       	push   0xc002061d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 20 06 02 c0       	push   0xc0020620
c000682f:	e8 24 37 01 00       	call   c0019f58 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 32 37 01 00       	call   c0019f74 <iso_kprintfd>
c0006842:	c7 04 24 25 06 02 c0 	mov    DWORD PTR [esp],0xc0020625
c0006849:	e8 0a 37 01 00       	call   c0019f58 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 1a 37 01 00       	call   c0019f74 <iso_kprintfd>
c000685a:	c7 04 24 2b 06 02 c0 	mov    DWORD PTR [esp],0xc002062b
c0006861:	e8 f2 36 01 00       	call   c0019f58 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 02 37 01 00       	call   c0019f74 <iso_kprintfd>
c0006872:	c7 04 24 31 06 02 c0 	mov    DWORD PTR [esp],0xc0020631
c0006879:	e8 da 36 01 00       	call   c0019f58 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 ea 36 01 00       	call   c0019f74 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 1d 06 02 c0       	push   0xc002061d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 3a 06 02 c0       	push   0xc002063a
c0006a52:	e8 01 35 01 00       	call   c0019f58 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 45 06 02 c0       	push   0xc0020645
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 4c 06 02 c0       	push   0xc002064c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 53 06 02 c0       	push   0xc0020653
c0006b69:	e8 ea 33 01 00       	call   c0019f58 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 5e 06 02 c0       	push   0xc002065e
c0006b84:	e8 cf 33 01 00       	call   c0019f58 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 9a 9e 00 00       	call   c0010b2e <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 bf 5b 00 00       	call   c000c862 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 6f 06 02 c0       	push   0xc002066f
c0006cd4:	e8 34 9f 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 88 06 02 c0       	push   0xc0020688
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 6f ea 00 00       	call   c0015770 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 7e ec 00 00       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 58 64 01 c0       	push   0xc0016458
c0006d25:	52                   	push   edx
c0006d26:	e8 69 ec 00 00       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 84 07 02 c0       	push   0xc0020784
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 d0 9e 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 4f a7 00 00       	call   c0011498 <KeInitRand()>
c0006d49:	e8 2d fb 00 00       	call   c001687b <Vm::initialise8086()>
c0006d4e:	e8 2f 48 00 00       	call   c000b582 <Fs::initVFS()>
c0006d53:	c7 04 24 95 06 02 c0 	mov    DWORD PTR [esp],0xc0020695
c0006d5a:	e8 ae 9e 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 84 07 02 c0       	push   0xc0020784
c0006d7e:	e8 8a 9e 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0006d83:	e8 d7 44 00 00       	call   c000b25f <KeInitialiseSymlinks()>
c0006d88:	e8 b7 a3 00 00       	call   c0011144 <KeLoadSystemEnv()>
c0006d8d:	e8 14 a6 00 00       	call   c00113a6 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 af 06 02 c0       	push   0xc00206af
c0006d9c:	68 b8 06 02 c0       	push   0xc00206b8
c0006da1:	e8 f8 cb 00 00       	call   c001399e <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 0e 54 00 00       	call   c000c1bc <User::loadClockSettings(int)>
c0006dae:	c7 04 24 a8 07 02 c0 	mov    DWORD PTR [esp],0xc00207a8
c0006db5:	e8 53 9e 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 94 5a 00 00       	call   c000c860 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 c0 06 02 c0 	mov    DWORD PTR [esp],0xc00206c0
c0006dd3:	e8 35 9e 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 d1 06 02 c0       	push   0xc00206d1
c0006de7:	e8 88 e3 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 bf e5 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 de ef 00 00       	call   c0015de0 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 ed 06 02 c0       	push   0xc00206ed
c0006e17:	50                   	push   eax
c0006e18:	e8 bf 5a 00 00       	call   c000c8dc <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba f4 07 02 c0       	mov    edx,0xc00207f4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 4f 80 01 00       	call   c001ef66 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 f1 90 00 00       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 ca 90 00 00       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 a8 90 00 00       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 86 90 00 00       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 93 8f 00 00       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 6e 8f 00 00       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 ae 7e 01 00       	call   c001ef20 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 fc 7a 01 00       	call   c001eb90 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 84 8f 00 00       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 f6 06 02 c0       	push   0xc00206f6
c0007104:	e8 d8 a1 00 00       	call   c00112e1 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 fc 06 02 c0       	push   0xc00206fc
c0007140:	e8 9c a1 00 00       	call   c00112e1 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 8b 89 00 00       	jmp    c000fb18 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 02 07 02 c0       	push   0xc0020702
c00071e3:	0f 94 05 00 31 02 c0 	sete   BYTE PTR ds:0xc0023100
c00071ea:	e8 1e 9a 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 87 84 00 00       	call   c000f68c <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 30 55 00 00       	call   c000c744 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 1a 07 02 c0 	mov    DWORD PTR [esp],0xc002071a
c000722d:	e8 db 99 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 b6 8e 00 00       	call   c00100fe <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 ed 54 00 00       	call   c000c744 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 c8 07 02 c0       	push   0xc00207c8
c0007274:	e8 94 99 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0007279:	e8 44 08 01 00       	call   c0017ac2 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 34 07 02 c0 	mov    DWORD PTR [esp],0xc0020734
c0007285:	e8 83 99 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 26 e8 00 00       	call   c0015abc <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 4f 07 02 c0       	push   0xc002074f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 60 07 02 c0       	push   0xc0020760
c000730d:	e8 cf 9f 00 00       	call   c00112e1 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 6d 07 02 c0       	push   0xc002076d
c0007322:	e8 ba 9f 00 00       	call   c00112e1 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 77 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020777
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 a0 9f 00 00       	jmp    c00112e1 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 5b 02 01 00       	call   c001778e <HalSystemIdle()>
c0007533:	e8 ea 7f 01 00       	call   c001f522 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 20 ec 01 c0       	push   0xc001ec20
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 30 ec 01 c0       	push   0xc001ec30
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 3a ec 01 c0       	push   0xc001ec3a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 44 ec 01 c0       	push   0xc001ec44
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 4e ec 01 c0       	push   0xc001ec4e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 58 ec 01 c0       	push   0xc001ec58
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 62 ec 01 c0       	push   0xc001ec62
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 6c ec 01 c0       	push   0xc001ec6c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 76 ec 01 c0       	push   0xc001ec76
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 7e ec 01 c0       	push   0xc001ec7e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 88 ec 01 c0       	push   0xc001ec88
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 90 ec 01 c0       	push   0xc001ec90
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 98 ec 01 c0       	push   0xc001ec98
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 a0 ec 01 c0       	push   0xc001eca0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 ba ec 01 c0       	push   0xc001ecba
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 c2 ec 01 c0       	push   0xc001ecc2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 cc ec 01 c0       	push   0xc001eccc
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 d6 ec 01 c0       	push   0xc001ecd6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 e0 ec 01 c0       	push   0xc001ece0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 7a ed 01 c0       	push   0xc001ed7a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 81 ed 01 c0       	push   0xc001ed81
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 6c ed 01 c0       	push   0xc001ed6c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 73 ed 01 c0       	push   0xc001ed73
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 ea ec 01 c0       	push   0xc001ecea
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 f4 ec 01 c0       	push   0xc001ecf4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 fe ec 01 c0       	push   0xc001ecfe
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 08 ed 01 c0       	push   0xc001ed08
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 12 ed 01 c0       	push   0xc001ed12
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 1c ed 01 c0       	push   0xc001ed1c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 26 ed 01 c0       	push   0xc001ed26
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 30 ed 01 c0       	push   0xc001ed30
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 3a ed 01 c0       	push   0xc001ed3a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 44 ed 01 c0       	push   0xc001ed44
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 4e ed 01 c0       	push   0xc001ed4e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 58 ed 01 c0       	push   0xc001ed58
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 62 ed 01 c0       	push   0xc001ed62
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 bc ee 01 c0       	push   0xc001eebc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 c6 ee 01 c0       	push   0xc001eec6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 d0 ee 01 c0       	push   0xc001eed0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 da ee 01 c0       	push   0xc001eeda
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 e4 ee 01 c0       	push   0xc001eee4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 ee ee 01 c0       	push   0xc001eeee
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 f8 ee 01 c0       	push   0xc001eef8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 02 ef 01 c0       	push   0xc001ef02
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 76 ec 01 c0       	push   0xc001ec76
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 f4 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230f4
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d f4 30 02 c0    	mov    edi,DWORD PTR ds:0xc00230f4
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 f4 30 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00230f4,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 f4 30 02 c0       	mov    eax,ds:0xc00230f4
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 18 08 02 c0       	push   0xc0020818
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 48 08 02 c0       	push   0xc0020848
c0007a44:	e8 98 98 00 00       	call   c00112e1 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 4d 08 02 c0       	push   0xc002084d
c0007a5a:	e8 82 98 00 00       	call   c00112e1 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 54 08 02 c0       	push   0xc0020854
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 0b 90 00 00       	call   c0010b91 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 34 8f 00 00       	call   c0010adb <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 fd 78 01 00       	call   c001f4ba <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 6c 08 02 c0       	push   0xc002086c
c0007c4b:	e8 91 96 00 00       	call   c00112e1 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 6c 08 02 c0       	push   0xc002086c
c0007cc5:	e8 17 96 00 00       	call   c00112e1 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 f8 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230f8
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d f8 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230f8
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 f8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230f8
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 11 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020911
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 11 95 00 00       	jmp    c00112e1 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 94 08 02 c0       	push   0xc0020894
c0007e54:	e8 88 94 00 00       	call   c00112e1 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 27 09 02 c0       	push   0xc0020927
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 c4 08 02 c0       	push   0xc00208c4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 3f 09 02 c0       	push   0xc002093f
c000810a:	e8 d2 91 00 00       	call   c00112e1 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 e8 08 02 c0       	push   0xc00208e8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 4d 09 02 c0       	push   0xc002094d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba ac 09 02 c0       	mov    edx,0xc00209ac
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 69 09 02 c0       	push   0xc0020969
c0008331:	e8 ab 8f 00 00       	call   c00112e1 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 61 d8 00 00       	call   c0015be0 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 93 6f 01 00       	call   c001f3a0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 86 09 02 c0       	push   0xc0020986
c0008422:	e8 ba 8e 00 00       	call   c00112e1 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba ac 09 02 c0       	mov    edx,0xc00209ac
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba f4 09 02 c0       	mov    edx,0xc00209f4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 1a 51 00 00       	call   c000d626 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 4e 04 01 00       	call   c0018980 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 20 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcee0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 20 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcee0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 d8 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd028]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 b0 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd050]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 80 01 01 00       	call   c0018814 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 dd 01 01 00       	jmp    c001891c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 c0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209c0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 55 8b 00 00       	jmp    c00112e1 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 7a 38 00 00       	jmp    c000c163 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ce 09 02 c0       	mov    esi,0xc00209ce
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 f4 fc 00 00       	call   c001891c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba f4 09 02 c0       	mov    edx,0xc00209f4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 df 09 02 c0       	push   0xc00209df
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 e5 09 02 c0       	push   0xc00209e5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba bc 0a 02 c0       	mov    edx,0xc0020abc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 60 31 02 c0       	mov    eax,ds:0xc0023160
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 60 31 02 c0    	mov    DWORD PTR ds:0xc0023160,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 9f 63 01 00       	call   c001f588 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba d8 0a 02 c0       	mov    edx,0xc0020ad8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba bc 0a 02 c0       	mov    edx,0xc0020abc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 9f 62 01 00       	call   c001f65c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 93 62 01 00       	call   c001f664 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 99 61 01 00       	call   c001f588 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 94 0a 02 c0       	push   0xc0020a94
c0009414:	e8 c8 7e 00 00       	call   c00112e1 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba d8 0a 02 c0       	mov    edx,0xc0020ad8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 9e 61 01 00       	call   c001f65c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 2b 62 01 00       	call   c001f706 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 e9 5f 01 00       	call   c001f546 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 f0 30 02 c0       	push   0xc00230f0
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 44 f5 01 c0       	push   0xc001f544
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 68 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023168
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 68 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023168
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 64 31 02 c0    	mov    ebp,DWORD PTR ds:0xc0023164
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 64 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023164,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 64 31 02 c0    	mov    DWORD PTR ds:0xc0023164,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 ec 0a 02 c0       	push   0xc0020aec
c0009674:	e8 68 7c 00 00       	call   c00112e1 <KePanic(char const*)>
c0009679:	8b 2d 64 31 02 c0    	mov    ebp,DWORD PTR ds:0xc0023164
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 64 31 02 c0    	mov    DWORD PTR ds:0xc0023164,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 64 31 02 c0    	mov    DWORD PTR ds:0xc0023164,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 64 31 02 c0       	mov    ds:0xc0023164,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 6c 31 02 c0    	mov    edx,DWORD PTR ds:0xc002316c
c000973e:	8b 0d 74 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023174
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 70 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023170
c0009759:	8b 0d 6c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002316c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 80 0d 02 c0       	push   0xc0020d80
c000979e:	e8 3e 7b 00 00       	call   c00112e1 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 97 0d 02 c0       	push   0xc0020d97
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 70 31 02 c0    	mov    DWORD PTR ds:0xc0023170,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 78 31 02 c0 43 	mov    BYTE PTR ds:0xc0023178,0x43
c000984f:	c7 05 6c 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002316c,0x8
c0009859:	a3 74 31 02 c0       	mov    ds:0xc0023174,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 70 31 02 c0       	mov    eax,ds:0xc0023170
c0009874:	f7 35 6c 31 02 c0    	div    DWORD PTR ds:0xc002316c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 0c 0b 02 c0       	push   0xc0020b0c
c00098af:	e8 2d 7a 00 00       	call   c00112e1 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ae 0d 02 c0       	push   0xc0020dae
c0009981:	e8 5b 79 00 00       	call   c00112e1 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 30 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020b30
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 f8 78 00 00       	jmp    c00112e1 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ca 0d 02 c0       	push   0xc0020dca
c00099f6:	e8 e6 78 00 00       	call   c00112e1 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 e6 0d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020de6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 9c 78 00 00       	jmp    c00112e1 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 54 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b54
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 78 0b 02 c0       	push   0xc0020b78
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 e0 0b 02 c0       	push   0xc0020be0
c0009d87:	e8 55 75 00 00       	call   c00112e1 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 04 0c 02 c0       	push   0xc0020c04
c0009e7b:	e8 61 74 00 00       	call   c00112e1 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 30 0c 02 c0       	push   0xc0020c30
c0009fd9:	e8 03 73 00 00       	call   c00112e1 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 ca 27 00 00       	call   c000c9d8 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 00 0e 02 c0       	push   0xc0020e00
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 6c 31 02 c0       	mov    eax,ds:0xc002316c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 78 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023178
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 a6 38 00 00       	call   c000db9a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 6c 31 02 c0    	cmp    DWORD PTR ds:0xc002316c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 54 0c 02 c0       	push   0xc0020c54
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 0e 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020e0e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 31 0e 02 c0       	push   0xc0020e31
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 1f 0e 02 c0       	push   0xc0020e1f
c000a413:	e8 c9 6e 00 00       	call   c00112e1 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 84 0c 02 c0       	push   0xc0020c84
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 6c 31 02 c0       	mov    eax,ds:0xc002316c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 78 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023178
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 62 36 00 00       	call   c000db2e <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 6c 31 02 c0    	cmp    DWORD PTR ds:0xc002316c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 44 0e 02 c0       	push   0xc0020e44
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 a4 0c 02 c0       	push   0xc0020ca4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 04 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d04
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 59 0e 02 c0       	push   0xc0020e59
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 6d 0e 02 c0       	push   0xc0020e6d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 80 0e 02 c0       	push   0xc0020e80
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 8d 0e 02 c0       	push   0xc0020e8d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 a6 0e 02 c0       	push   0xc0020ea6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 a6 0e 02 c0       	push   0xc0020ea6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ae 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eae
c000a7ec:	e8 f0 6a 00 00       	call   c00112e1 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7fe:	e8 de 6a 00 00       	call   c00112e1 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 dc 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf124]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 2c 10 02 c0       	push   0xc002102c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 40 10 02 c0       	push   0xc0021040
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 4a 10 02 c0       	push   0xc002104a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 54 10 02 c0       	push   0xc0021054
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 98 11 02 c0       	push   0xc0021198
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 5e 10 02 c0       	push   0xc002105e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 b8 11 02 c0       	push   0xc00211b8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 73 10 02 c0       	push   0xc0021073
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 8d 10 02 c0       	push   0xc002108d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 80 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce80]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 e0 11 02 c0       	push   0xc00211e0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 98 11 02 c0       	push   0xc0021198
c000ab78:	e8 64 67 00 00       	call   c00112e1 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 28 12 02 c0       	push   0xc0021228
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 28 12 02 c0       	push   0xc0021228
c000aba7:	e8 35 67 00 00       	call   c00112e1 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 98 10 02 c0       	push   0xc0021098
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 98 10 02 c0       	push   0xc0021098
c000abd3:	e8 09 67 00 00       	call   c00112e1 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 b5 10 02 c0       	push   0xc00210b5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 b5 10 02 c0       	push   0xc00210b5
c000abff:	e8 dd 66 00 00       	call   c00112e1 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 48 12 02 c0       	push   0xc0021248
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 48 12 02 c0       	push   0xc0021248
c000ac2b:	e8 b1 66 00 00       	call   c00112e1 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 6c 12 02 c0       	push   0xc002126c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 6c 12 02 c0       	push   0xc002126c
c000ac57:	e8 85 66 00 00       	call   c00112e1 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 d1 10 02 c0       	push   0xc00210d1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 d1 10 02 c0       	push   0xc00210d1
c000ac83:	e8 59 66 00 00       	call   c00112e1 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 ed 10 02 c0       	push   0xc00210ed
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 ed 10 02 c0       	push   0xc00210ed
c000acaf:	e8 2d 66 00 00       	call   c00112e1 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 8c 12 02 c0       	push   0xc002128c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 8c 12 02 c0       	push   0xc002128c
c000acdb:	e8 01 66 00 00       	call   c00112e1 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 b0 12 02 c0       	push   0xc00212b0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 b0 12 02 c0       	push   0xc00212b0
c000ad07:	e8 d5 65 00 00       	call   c00112e1 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 0d 67 00 00       	call   c001142f <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 cf 12 02 c0       	push   0xc00212cf
c000ad57:	e8 85 65 00 00       	call   c00112e1 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 d8 12 02 c0       	push   0xc00212d8
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 78 0a 00 00       	call   c000b81c <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 f6 12 02 c0       	push   0xc00212f6
c000adb3:	e8 29 65 00 00       	call   c00112e1 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 1f 0b 00 00       	call   c000b8e4 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 10 13 02 c0       	push   0xc0021310
c000add4:	e8 08 65 00 00       	call   c00112e1 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 2a 13 02 c0       	push   0xc002132a
c000ae1b:	e8 c1 64 00 00       	call   c00112e1 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 09 0b 00 00       	call   c000b942 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 44             	sub    esp,0x44
c000af14:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af18:	56                   	push   esi
c000af19:	68 44 13 02 c0       	push   0xc0021344
c000af1e:	e8 e7 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af23:	89 34 24             	mov    DWORD PTR [esp],esi
c000af26:	e8 9b ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 c7                	mov    edi,eax
c000af30:	89 d0                	mov    eax,edx
c000af32:	09 f8                	or     eax,edi
c000af34:	0f 84 de 01 00 00    	je     c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af3a:	53                   	push   ebx
c000af3b:	89 d5                	mov    ebp,edx
c000af3d:	53                   	push   ebx
c000af3e:	57                   	push   edi
c000af3f:	68 5e 13 02 c0       	push   0xc002135e
c000af44:	e8 c1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af49:	58                   	pop    eax
c000af4a:	5a                   	pop    edx
c000af4b:	55                   	push   ebp
c000af4c:	68 6c 13 02 c0       	push   0xc002136c
c000af51:	e8 b4 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af5d:	e8 71 cb ff ff       	call   c0007ad3 <malloc>
c000af62:	83 c4 0c             	add    esp,0xc
c000af65:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af6b:	56                   	push   esi
c000af6c:	50                   	push   eax
c000af6d:	89 c3                	mov    ebx,eax
c000af6f:	e8 a8 08 00 00       	call   c000b81c <File::File(char const*, Process*)>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	85 db                	test   ebx,ebx
c000af79:	0f 84 68 01 00 00    	je     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	68 60 1f 02 c0       	push   0xc0021f60
c000af87:	e8 7e f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8c:	5a                   	pop    edx
c000af8d:	59                   	pop    ecx
c000af8e:	6a 01                	push   0x1
c000af90:	53                   	push   ebx
c000af91:	e8 4e 09 00 00       	call   c000b8e4 <File::open(FileOpenMode)>
c000af96:	83 c4 10             	add    esp,0x10
c000af99:	85 c0                	test   eax,eax
c000af9b:	74 0b                	je     c000afa8 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000af9d:	83 ec 0c             	sub    esp,0xc
c000afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa2:	53                   	push   ebx
c000afa3:	e9 39 01 00 00       	jmp    c000b0e1 <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	68 66 09 02 c0       	push   0xc0020966
c000afb0:	e8 55 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb5:	58                   	pop    eax
c000afb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afbc:	56                   	push   esi
c000afbd:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afc1:	52                   	push   edx
c000afc2:	6a 00                	push   0x0
c000afc4:	6a 08                	push   0x8
c000afc6:	53                   	push   ebx
c000afc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afca:	83 c4 20             	add    esp,0x20
c000afcd:	85 c0                	test   eax,eax
c000afcf:	0f 85 fe 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afd5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afda:	0f 85 f3 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	68 92 1f 02 c0       	push   0xc0021f92
c000afe8:	e8 1d f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afed:	8d 54 24 20          	lea    edx,[esp+0x20]
c000aff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff3:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff6:	52                   	push   edx
c000aff7:	6a 00                	push   0x0
c000aff9:	6a 08                	push   0x8
c000affb:	53                   	push   ebx
c000affc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afff:	83 c4 20             	add    esp,0x20
c000b002:	85 c0                	test   eax,eax
c000b004:	0f 85 c9 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b00a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b00f:	0f 85 be 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b015:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b019:	0f 85 f9 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b01f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b023:	0f 85 ef 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	68 7a 13 02 c0       	push   0xc002137a
c000b031:	e8 d4 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b036:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b03e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b046:	83 c4 0c             	add    esp,0xc
c000b049:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b04d:	50                   	push   eax
c000b04e:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b052:	50                   	push   eax
c000b053:	53                   	push   ebx
c000b054:	e8 8d 0b 00 00       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b061:	75 70                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b063:	b8 0f 00 00 00       	mov    eax,0xf
c000b068:	31 ff                	xor    edi,edi
c000b06a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b06e:	89 f8                	mov    eax,edi
c000b070:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b074:	73 5d                	jae    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	68 7a 13 02 c0       	push   0xc002137a
c000b07e:	e8 87 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b087:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b090:	83 c0 f0             	add    eax,0xfffffff0
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	83 d2 ff             	adc    edx,0xffffffff
c000b09a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	39 c1                	cmp    ecx,eax
c000b0a3:	19 d7                	sbb    edi,edx
c000b0a5:	72 40                	jb     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ac:	56                   	push   esi
c000b0ad:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0b1:	52                   	push   edx
c000b0b2:	50                   	push   eax
c000b0b3:	53                   	push   ebx
c000b0b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0b7:	83 c4 20             	add    esp,0x20
c000b0ba:	85 c0                	test   eax,eax
c000b0bc:	75 15                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c2:	89 c7                	mov    edi,eax
c000b0c4:	c1 ff 1f             	sar    edi,0x1f
c000b0c7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0cb:	75 06                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0cd:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0d1:	74 19                	je     c000b0ec <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	53                   	push   ebx
c000b0d7:	e8 66 08 00 00       	call   c000b942 <File::close()>
c000b0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	83 c8 ff             	or     eax,0xffffffff
c000b0ea:	eb 2e                	jmp    c000b11a <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	68 72 2a 02 c0       	push   0xc0022a72
c000b0f4:	e8 11 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0fc:	e8 41 08 00 00       	call   c000b942 <File::close()>
c000b101:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b109:	c7 04 24 7d 13 02 c0 	mov    DWORD PTR [esp],0xc002137d
c000b110:	e8 f5 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	31 c0                	xor    eax,eax
c000b11a:	83 c4 3c             	add    esp,0x3c
c000b11d:	5b                   	pop    ebx
c000b11e:	5e                   	pop    esi
c000b11f:	5f                   	pop    edi
c000b120:	5d                   	pop    ebp
c000b121:	c3                   	ret    

c000b122 <KeCreateSymlink(char const*, char const*)>:
c000b122:	55                   	push   ebp
c000b123:	57                   	push   edi
c000b124:	56                   	push   esi
c000b125:	53                   	push   ebx
c000b126:	83 ec 38             	sub    esp,0x38
c000b129:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b12d:	68 14 01 00 00       	push   0x114
c000b132:	e8 9c c9 ff ff       	call   c0007ad3 <malloc>
c000b137:	83 c4 0c             	add    esp,0xc
c000b13a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b140:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b144:	89 c3                	mov    ebx,eax
c000b146:	50                   	push   eax
c000b147:	e8 d0 06 00 00       	call   c000b81c <File::File(char const*, Process*)>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	85 db                	test   ebx,ebx
c000b151:	b8 01 00 00 00       	mov    eax,0x1
c000b156:	0f 84 fb 00 00 00    	je     c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b15c:	52                   	push   edx
c000b15d:	52                   	push   edx
c000b15e:	6a 12                	push   0x12
c000b160:	53                   	push   ebx
c000b161:	e8 7e 07 00 00       	call   c000b8e4 <File::open(FileOpenMode)>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	85 c0                	test   eax,eax
c000b16b:	74 0b                	je     c000b178 <KeCreateSymlink(char const*, char const*)+0x56>
c000b16d:	83 ec 0c             	sub    esp,0xc
c000b170:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b172:	53                   	push   ebx
c000b173:	e9 d4 00 00 00       	jmp    c000b24c <KeCreateSymlink(char const*, char const*)+0x12a>
c000b178:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b17c:	be 80 13 02 c0       	mov    esi,0xc0021380
c000b181:	b9 09 00 00 00       	mov    ecx,0x9
c000b186:	fc                   	cld    
c000b187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b189:	83 ec 0c             	sub    esp,0xc
c000b18c:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b190:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b192:	56                   	push   esi
c000b193:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b197:	52                   	push   edx
c000b198:	6a 00                	push   0x0
c000b19a:	6a 08                	push   0x8
c000b19c:	53                   	push   ebx
c000b19d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a0:	83 c4 20             	add    esp,0x20
c000b1a3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1a8:	0f 85 90 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	0f 85 88 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1b6:	e8 59 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c8:	56                   	push   esi
c000b1c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1cd:	52                   	push   edx
c000b1ce:	6a 00                	push   0x0
c000b1d0:	6a 08                	push   0x8
c000b1d2:	53                   	push   ebx
c000b1d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1d6:	83 c4 20             	add    esp,0x20
c000b1d9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1de:	75 5e                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e0:	85 c0                	test   eax,eax
c000b1e2:	75 5a                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1ec:	55                   	push   ebp
c000b1ed:	e8 8e 53 ff ff       	call   c0000580 <strlen>
c000b1f2:	31 d2                	xor    edx,edx
c000b1f4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1f7:	55                   	push   ebp
c000b1f8:	52                   	push   edx
c000b1f9:	50                   	push   eax
c000b1fa:	53                   	push   ebx
c000b1fb:	ff d7                	call   edi
c000b1fd:	83 c4 14             	add    esp,0x14
c000b200:	55                   	push   ebp
c000b201:	89 c6                	mov    esi,eax
c000b203:	e8 78 53 ff ff       	call   c0000580 <strlen>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b20f:	75 2d                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b211:	85 f6                	test   esi,esi
c000b213:	75 29                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b215:	50                   	push   eax
c000b216:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b222:	e8 30 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22a:	e8 13 07 00 00       	call   c000b942 <File::close()>
c000b22f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b237:	83 c4 10             	add    esp,0x10
c000b23a:	31 c0                	xor    eax,eax
c000b23c:	eb 19                	jmp    c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	53                   	push   ebx
c000b242:	e8 fb 06 00 00       	call   c000b942 <File::close()>
c000b247:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b249:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24f:	83 c4 10             	add    esp,0x10
c000b252:	b8 01 00 00 00       	mov    eax,0x1
c000b257:	83 c4 2c             	add    esp,0x2c
c000b25a:	5b                   	pop    ebx
c000b25b:	5e                   	pop    esi
c000b25c:	5f                   	pop    edi
c000b25d:	5d                   	pop    ebp
c000b25e:	c3                   	ret    

c000b25f <KeInitialiseSymlinks()>:
c000b25f:	53                   	push   ebx
c000b260:	83 ec 10             	sub    esp,0x10
c000b263:	6a 00                	push   0x0
c000b265:	68 52 ae 00 c0       	push   0xc000ae52
c000b26a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b274:	e8 81 58 00 00       	call   c0010afa <KeRegisterAtexit(void (*)(void*), void*)>
c000b279:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b280:	e8 4e c8 ff ff       	call   c0007ad3 <malloc>
c000b285:	83 c4 0c             	add    esp,0xc
c000b288:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b28e:	68 d8 12 02 c0       	push   0xc00212d8
c000b293:	50                   	push   eax
c000b294:	89 c3                	mov    ebx,eax
c000b296:	e8 81 05 00 00       	call   c000b81c <File::File(char const*, Process*)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	85 db                	test   ebx,ebx
c000b2a0:	75 10                	jne    c000b2b2 <KeInitialiseSymlinks()+0x53>
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	68 89 13 02 c0       	push   0xc0021389
c000b2aa:	e8 32 60 00 00       	call   c00112e1 <KePanic(char const*)>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	83 ec 0c             	sub    esp,0xc
c000b2b5:	53                   	push   ebx
c000b2b6:	e8 ed 08 00 00       	call   c000bba8 <File::exists()>
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	84 c0                	test   al,al
c000b2c0:	75 2d                	jne    c000b2ef <KeInitialiseSymlinks()+0x90>
c000b2c2:	52                   	push   edx
c000b2c3:	52                   	push   edx
c000b2c4:	6a 12                	push   0x12
c000b2c6:	53                   	push   ebx
c000b2c7:	e8 18 06 00 00       	call   c000b8e4 <File::open(FileOpenMode)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	85 c0                	test   eax,eax
c000b2d1:	74 10                	je     c000b2e3 <KeInitialiseSymlinks()+0x84>
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	68 a6 13 02 c0       	push   0xc00213a6
c000b2db:	e8 01 60 00 00       	call   c00112e1 <KePanic(char const*)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	83 ec 0c             	sub    esp,0xc
c000b2e6:	53                   	push   ebx
c000b2e7:	e8 56 06 00 00       	call   c000b942 <File::close()>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	85 db                	test   ebx,ebx
c000b2f1:	74 0c                	je     c000b2ff <KeInitialiseSymlinks()+0xa0>
c000b2f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f5:	83 ec 0c             	sub    esp,0xc
c000b2f8:	53                   	push   ebx
c000b2f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	50                   	push   eax
c000b300:	50                   	push   eax
c000b301:	68 c3 13 02 c0       	push   0xc00213c3
c000b306:	68 d1 13 02 c0       	push   0xc00213d1
c000b30b:	e8 12 fe ff ff       	call   c000b122 <KeCreateSymlink(char const*, char const*)>
c000b310:	83 c4 18             	add    esp,0x18
c000b313:	5b                   	pop    ebx
c000b314:	c3                   	ret    
c000b315:	90                   	nop

c000b316 <File::read(unsigned long long, void*, int*)>:
c000b316:	53                   	push   ebx
c000b317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b31b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b326:	83 f8 19             	cmp    eax,0x19
c000b329:	77 35                	ja     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b32b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b332:	85 c0                	test   eax,eax
c000b334:	74 2a                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b336:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33c:	85 c0                	test   eax,eax
c000b33e:	74 20                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b340:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b344:	74 21                	je     c000b367 <File::read(unsigned long long, void*, int*)+0x51>
c000b346:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b348:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b352:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b356:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b35a:	5b                   	pop    ebx
c000b35b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b35e:	ff e0                	jmp    eax
c000b360:	b8 0b 00 00 00       	mov    eax,0xb
c000b365:	eb 05                	jmp    c000b36c <File::read(unsigned long long, void*, int*)+0x56>
c000b367:	b8 05 00 00 00       	mov    eax,0x5
c000b36c:	5b                   	pop    ebx
c000b36d:	c3                   	ret    

c000b36e <File::write(unsigned long long, void*, int*)>:
c000b36e:	53                   	push   ebx
c000b36f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b373:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b377:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37e:	83 f8 19             	cmp    eax,0x19
c000b381:	77 35                	ja     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b383:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b38a:	85 c0                	test   eax,eax
c000b38c:	74 2a                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b38e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b394:	85 c0                	test   eax,eax
c000b396:	74 20                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b398:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b39c:	74 21                	je     c000b3bf <File::write(unsigned long long, void*, int*)+0x51>
c000b39e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b2:	5b                   	pop    ebx
c000b3b3:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3b6:	ff e0                	jmp    eax
c000b3b8:	b8 0b 00 00 00       	mov    eax,0xb
c000b3bd:	eb 05                	jmp    c000b3c4 <File::write(unsigned long long, void*, int*)+0x56>
c000b3bf:	b8 05 00 00 00       	mov    eax,0x5
c000b3c4:	5b                   	pop    ebx
c000b3c5:	c3                   	ret    

c000b3c6 <Directory::read(unsigned long long, void*, int*)>:
c000b3c6:	53                   	push   ebx
c000b3c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3d6:	83 f8 19             	cmp    eax,0x19
c000b3d9:	77 35                	ja     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3db:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3e2:	85 c0                	test   eax,eax
c000b3e4:	74 2a                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3e6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	74 20                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f4:	74 21                	je     c000b417 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3fc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b406:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40a:	5b                   	pop    ebx
c000b40b:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b40e:	ff e0                	jmp    eax
c000b410:	b8 0b 00 00 00       	mov    eax,0xb
c000b415:	eb 05                	jmp    c000b41c <Directory::read(unsigned long long, void*, int*)+0x56>
c000b417:	b8 05 00 00 00       	mov    eax,0x5
c000b41c:	5b                   	pop    ebx
c000b41d:	c3                   	ret    

c000b41e <Directory::write(unsigned long long, void*, int*)>:
c000b41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b422:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b429:	b8 0b 00 00 00       	mov    eax,0xb
c000b42e:	83 fa 19             	cmp    edx,0x19
c000b431:	77 18                	ja     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b433:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b43a:	85 d2                	test   edx,edx
c000b43c:	74 0d                	je     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b43e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b445:	19 c0                	sbb    eax,eax
c000b447:	83 e0 0a             	and    eax,0xa
c000b44a:	40                   	inc    eax
c000b44b:	c3                   	ret    

c000b44c <File::isAtty()>:
c000b44c:	31 c0                	xor    eax,eax
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Directory::isAtty()>:
c000b450:	31 c0                	xor    eax,eax
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b454:	b8 0a 00 00 00       	mov    eax,0xa
c000b459:	c3                   	ret    

c000b45a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b45a:	b8 0a 00 00 00       	mov    eax,0xa
c000b45f:	c3                   	ret    

c000b460 <Filesystem::allocateSwapfile(char const*, int)>:
c000b460:	31 c0                	xor    eax,eax
c000b462:	31 d2                	xor    edx,edx
c000b464:	c3                   	ret    
c000b465:	90                   	nop

c000b466 <File::~File()>:
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	ba a0 14 02 c0       	mov    edx,0xc00214a0
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	89 10                	mov    DWORD PTR [eax],edx
c000b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	50                   	push   eax
c000b47c:	e8 0b df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	90                   	nop
c000b485:	83 c4 0c             	add    esp,0xc
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <File::~File()>:
c000b48a:	83 ec 0c             	sub    esp,0xc
c000b48d:	83 ec 0c             	sub    esp,0xc
c000b490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b494:	e8 cd ff ff ff       	call   c000b466 <File::~File()>
c000b499:	83 c4 10             	add    esp,0x10
c000b49c:	83 ec 08             	sub    esp,0x8
c000b49f:	68 14 01 00 00       	push   0x114
c000b4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a8:	e8 5f f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4ad:	83 c4 10             	add    esp,0x10
c000b4b0:	83 c4 0c             	add    esp,0xc
c000b4b3:	c3                   	ret    

c000b4b4 <Directory::~Directory()>:
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c000b4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c0:	89 10                	mov    DWORD PTR [eax],edx
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	50                   	push   eax
c000b4ca:	e8 bd de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	90                   	nop
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <Directory::~Directory()>:
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	83 ec 0c             	sub    esp,0xc
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 cd ff ff ff       	call   c000b4b4 <Directory::~Directory()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 ec 08             	sub    esp,0x8
c000b4ed:	68 14 01 00 00       	push   0x114
c000b4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f6:	e8 11 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 c4 0c             	add    esp,0xc
c000b501:	c3                   	ret    

c000b502 <Filesystem::Filesystem()>:
c000b502:	ba 34 14 02 c0       	mov    edx,0xc0021434
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	89 10                	mov    DWORD PTR [eax],edx
c000b50d:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b51a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51e:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b523:	90                   	nop
c000b524:	c3                   	ret    
c000b525:	90                   	nop

c000b526 <Filesystem::~Filesystem()>:
c000b526:	ba 34 14 02 c0       	mov    edx,0xc0021434
c000b52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52f:	89 10                	mov    DWORD PTR [eax],edx
c000b531:	90                   	nop
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Filesystem::~Filesystem()>:
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b53b:	e8 e6 ff ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c000b540:	83 c4 04             	add    esp,0x4
c000b543:	83 ec 08             	sub    esp,0x8
c000b546:	6a 08                	push   0x8
c000b548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54c:	e8 bb f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	83 c4 0c             	add    esp,0xc
c000b557:	c3                   	ret    

c000b558 <Fs::getcwd(Process*, char*, int)>:
c000b558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b55c:	31 c0                	xor    eax,eax
c000b55e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b562:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b565:	7d 15                	jge    c000b57c <Fs::getcwd(Process*, char*, int)+0x24>
c000b567:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b56b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b572:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b575:	84 c9                	test   cl,cl
c000b577:	74 06                	je     c000b57f <Fs::getcwd(Process*, char*, int)+0x27>
c000b579:	40                   	inc    eax
c000b57a:	eb e2                	jmp    c000b55e <Fs::getcwd(Process*, char*, int)+0x6>
c000b57c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b57f:	31 c0                	xor    eax,eax
c000b581:	c3                   	ret    

c000b582 <Fs::initVFS()>:
c000b582:	83 ec 18             	sub    esp,0x18
c000b585:	6a 08                	push   0x8
c000b587:	e8 47 c5 ff ff       	call   c0007ad3 <malloc>
c000b58c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58f:	e8 c0 e1 00 00       	call   c0019754 <FAT::FAT()>
c000b594:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b59b:	e8 33 c5 ff ff       	call   c0007ad3 <malloc>
c000b5a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a3:	e8 da f0 00 00       	call   c001a682 <ISO9660::ISO9660()>
c000b5a8:	83 c4 1c             	add    esp,0x1c
c000b5ab:	c3                   	ret    

c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ac:	55                   	push   ebp
c000b5ad:	57                   	push   edi
c000b5ae:	56                   	push   esi
c000b5af:	53                   	push   ebx
c000b5b0:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5b6:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b5bd:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b5c4:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5cb:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5d2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b5d6:	68 00 04 00 00       	push   0x400
c000b5db:	6a 00                	push   0x0
c000b5dd:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b5e1:	57                   	push   edi
c000b5e2:	e8 09 4f ff ff       	call   c00004f0 <memset>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b5ee:	75 0b                	jne    c000b5fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b5f0:	50                   	push   eax
c000b5f1:	50                   	push   eax
c000b5f2:	56                   	push   esi
c000b5f3:	57                   	push   edi
c000b5f4:	e8 57 50 ff ff       	call   c0000650 <strcpy>
c000b5f9:	eb 45                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b5fb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b5fe:	83 f8 2f             	cmp    eax,0x2f
c000b601:	74 05                	je     c000b608 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b603:	83 f8 5c             	cmp    eax,0x5c
c000b606:	75 19                	jne    c000b621 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b608:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b60b:	3c 60                	cmp    al,0x60
c000b60d:	7e 03                	jle    c000b612 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b60f:	83 e8 20             	sub    eax,0x20
c000b612:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b616:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b61d:	50                   	push   eax
c000b61e:	50                   	push   eax
c000b61f:	eb 18                	jmp    c000b639 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b621:	50                   	push   eax
c000b622:	50                   	push   eax
c000b623:	55                   	push   ebp
c000b624:	57                   	push   edi
c000b625:	e8 26 50 ff ff       	call   c0000650 <strcpy>
c000b62a:	58                   	pop    eax
c000b62b:	5a                   	pop    edx
c000b62c:	68 e3 23 02 c0       	push   0xc00223e3
c000b631:	57                   	push   edi
c000b632:	e8 39 52 ff ff       	call   c0000870 <strcat>
c000b637:	59                   	pop    ecx
c000b638:	5d                   	pop    ebp
c000b639:	56                   	push   esi
c000b63a:	57                   	push   edi
c000b63b:	e8 30 52 ff ff       	call   c0000870 <strcat>
c000b640:	83 c4 10             	add    esp,0x10
c000b643:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b647:	3c 60                	cmp    al,0x60
c000b649:	7e 03                	jle    c000b64e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b64b:	83 e8 20             	sub    eax,0x20
c000b64e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b652:	be 03 00 00 00       	mov    esi,0x3
c000b657:	88 03                	mov    BYTE PTR [ebx],al
c000b659:	b8 03 00 00 00       	mov    eax,0x3
c000b65e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b665:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b66b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b66f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b674:	89 fa                	mov    edx,edi
c000b676:	0f be ea             	movsx  ebp,dl
c000b679:	85 ed                	test   ebp,ebp
c000b67b:	0f 84 a1 00 00 00    	je     c000b722 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b681:	8d 56 01             	lea    edx,[esi+0x1]
c000b684:	83 fd 2f             	cmp    ebp,0x2f
c000b687:	74 05                	je     c000b68e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b689:	83 fd 5c             	cmp    ebp,0x5c
c000b68c:	75 12                	jne    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b68e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b693:	89 c5                	mov    ebp,eax
c000b695:	74 09                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b697:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b69b:	40                   	inc    eax
c000b69c:	89 d6                	mov    esi,edx
c000b69e:	eb cf                	jmp    c000b66f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6a0:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b6a5:	89 f9                	mov    ecx,edi
c000b6a7:	0f be e9             	movsx  ebp,cl
c000b6aa:	75 61                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6ac:	83 fd 2e             	cmp    ebp,0x2e
c000b6af:	75 5c                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6b1:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6b6:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b6bb:	74 19                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b6bd:	83 fd 2e             	cmp    ebp,0x2e
c000b6c0:	74 55                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6c2:	89 f2                	mov    edx,esi
c000b6c4:	42                   	inc    edx
c000b6c5:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6ca:	83 f9 2f             	cmp    ecx,0x2f
c000b6cd:	74 f5                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6cf:	83 f9 5c             	cmp    ecx,0x5c
c000b6d2:	74 f0                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d4:	eb c6                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d6:	83 fd 2e             	cmp    ebp,0x2e
c000b6d9:	74 3c                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6db:	83 f8 03             	cmp    eax,0x3
c000b6de:	74 bc                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6e0:	42                   	inc    edx
c000b6e1:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6e6:	83 f9 2f             	cmp    ecx,0x2f
c000b6e9:	74 f5                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6eb:	83 f9 5c             	cmp    ecx,0x5c
c000b6ee:	74 f0                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6f0:	48                   	dec    eax
c000b6f1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6f5:	75 06                	jne    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b6f7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6fb:	eb f3                	jmp    c000b6f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b6fd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b701:	74 07                	je     c000b70a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b703:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b707:	48                   	dec    eax
c000b708:	eb f3                	jmp    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b70a:	40                   	inc    eax
c000b70b:	eb 8f                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b70d:	83 fd 2f             	cmp    ebp,0x2f
c000b710:	74 8a                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b712:	83 fd 5c             	cmp    ebp,0x5c
c000b715:	74 85                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b717:	89 f9                	mov    ecx,edi
c000b719:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b71c:	40                   	inc    eax
c000b71d:	e9 7a ff ff ff       	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b722:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	53                   	push   ebx
c000b72a:	e8 51 4e ff ff       	call   c0000580 <strlen>
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b737:	75 26                	jne    c000b75f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1b3>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	53                   	push   ebx
c000b73d:	e8 3e 4e ff ff       	call   c0000580 <strlen>
c000b742:	83 c4 10             	add    esp,0x10
c000b745:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b74a:	74 26                	je     c000b772 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1c6>
c000b74c:	83 ec 0c             	sub    esp,0xc
c000b74f:	53                   	push   ebx
c000b750:	e8 2b 4e ff ff       	call   c0000580 <strlen>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b75d:	eb c7                	jmp    c000b726 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b75f:	83 ec 0c             	sub    esp,0xc
c000b762:	53                   	push   ebx
c000b763:	e8 18 4e ff ff       	call   c0000580 <strlen>
c000b768:	83 c4 10             	add    esp,0x10
c000b76b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b770:	74 c7                	je     c000b739 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x18d>
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	53                   	push   ebx
c000b776:	e8 05 4e ff ff       	call   c0000580 <strlen>
c000b77b:	83 c4 10             	add    esp,0x10
c000b77e:	80 7c 03 ff 40       	cmp    BYTE PTR [ebx+eax*1-0x1],0x40
c000b783:	74 09                	je     c000b78e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b785:	31 ff                	xor    edi,edi
c000b787:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b78c:	eb 66                	jmp    c000b7f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x248>
c000b78e:	83 ec 0c             	sub    esp,0xc
c000b791:	53                   	push   ebx
c000b792:	e8 e9 4d ff ff       	call   c0000580 <strlen>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	80 7c 03 fe 40       	cmp    BYTE PTR [ebx+eax*1-0x2],0x40
c000b79f:	75 e4                	jne    c000b785 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1d9>
c000b7a1:	83 ec 0c             	sub    esp,0xc
c000b7a4:	53                   	push   ebx
c000b7a5:	e8 d6 4d ff ff       	call   c0000580 <strlen>
c000b7aa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b7af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b7b2:	e8 c9 4d ff ff       	call   c0000580 <strlen>
c000b7b7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b7bc:	5e                   	pop    esi
c000b7bd:	5f                   	pop    edi
c000b7be:	53                   	push   ebx
c000b7bf:	68 ef 13 02 c0       	push   0xc00213ef
c000b7c4:	e8 41 f1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b7c9:	83 c4 10             	add    esp,0x10
c000b7cc:	eb 43                	jmp    c000b811 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x265>
c000b7ce:	50                   	push   eax
c000b7cf:	50                   	push   eax
c000b7d0:	53                   	push   ebx
c000b7d1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b7d5:	55                   	push   ebp
c000b7d6:	e8 75 4e ff ff       	call   c0000650 <strcpy>
c000b7db:	5a                   	pop    edx
c000b7dc:	59                   	pop    ecx
c000b7dd:	53                   	push   ebx
c000b7de:	55                   	push   ebp
c000b7df:	e8 29 f7 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b7e4:	83 c4 10             	add    esp,0x10
c000b7e7:	48                   	dec    eax
c000b7e8:	75 27                	jne    c000b811 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x265>
c000b7ea:	8d 47 01             	lea    eax,[edi+0x1]
c000b7ed:	83 ff 14             	cmp    edi,0x14
c000b7f0:	74 08                	je     c000b7fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x24e>
c000b7f2:	89 c7                	mov    edi,eax
c000b7f4:	85 f6                	test   esi,esi
c000b7f6:	75 d6                	jne    c000b7ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000b7f8:	eb 17                	jmp    c000b811 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x265>
c000b7fa:	83 ec 0c             	sub    esp,0xc
c000b7fd:	bf 15 00 00 00       	mov    edi,0x15
c000b802:	68 04 14 02 c0       	push   0xc0021404
c000b807:	e8 d5 5a 00 00       	call   c00112e1 <KePanic(char const*)>
c000b80c:	83 c4 10             	add    esp,0x10
c000b80f:	eb e3                	jmp    c000b7f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x248>
c000b811:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b817:	5b                   	pop    ebx
c000b818:	5e                   	pop    esi
c000b819:	5f                   	pop    edi
c000b81a:	5d                   	pop    ebp
c000b81b:	c3                   	ret    

c000b81c <File::File(char const*, Process*)>:
c000b81c:	83 ec 0c             	sub    esp,0xc
c000b81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b823:	83 ec 08             	sub    esp,0x8
c000b826:	6a 00                	push   0x0
c000b828:	50                   	push   eax
c000b829:	e8 78 d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b82e:	83 c4 10             	add    esp,0x10
c000b831:	ba a0 14 02 c0       	mov    edx,0xc00214a0
c000b836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b83a:	89 10                	mov    DWORD PTR [eax],edx
c000b83c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b841:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b845:	0f 95 c0             	setne  al
c000b848:	0f b6 c0             	movzx  eax,al
c000b84b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b84f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b855:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b859:	83 c2 0d             	add    edx,0xd
c000b85c:	50                   	push   eax
c000b85d:	51                   	push   ecx
c000b85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b862:	52                   	push   edx
c000b863:	e8 44 fd ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b868:	83 c4 10             	add    esp,0x10
c000b86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b86f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b872:	83 e8 41             	sub    eax,0x41
c000b875:	88 c2                	mov    dl,al
c000b877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b87b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b885:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b893:	0f b6 c0             	movzx  eax,al
c000b896:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b89d:	85 c0                	test   eax,eax
c000b89f:	74 3e                	je     c000b8df <File::File(char const*, Process*)+0xc3>
c000b8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8ab:	0f b6 c0             	movzx  eax,al
c000b8ae:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8b5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8bb:	85 c0                	test   eax,eax
c000b8bd:	75 20                	jne    c000b8df <File::File(char const*, Process*)+0xc3>
c000b8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8c9:	0f b6 c0             	movzx  eax,al
c000b8cc:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8d3:	83 ec 0c             	sub    esp,0xc
c000b8d6:	50                   	push   eax
c000b8d7:	e8 90 21 00 00       	call   c000da6c <LogicalDisk::mount()>
c000b8dc:	83 c4 10             	add    esp,0x10
c000b8df:	90                   	nop
c000b8e0:	83 c4 0c             	add    esp,0xc
c000b8e3:	c3                   	ret    

c000b8e4 <File::open(FileOpenMode)>:
c000b8e4:	53                   	push   ebx
c000b8e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ea:	83 ec 08             	sub    esp,0x8
c000b8ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8f1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8f8:	83 fa 19             	cmp    edx,0x19
c000b8fb:	77 40                	ja     c000b93d <File::open(FileOpenMode)+0x59>
c000b8fd:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b904:	85 d2                	test   edx,edx
c000b906:	74 35                	je     c000b93d <File::open(FileOpenMode)+0x59>
c000b908:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b90e:	85 d2                	test   edx,edx
c000b910:	74 2b                	je     c000b93d <File::open(FileOpenMode)+0x59>
c000b912:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b916:	b8 06 00 00 00       	mov    eax,0x6
c000b91b:	75 20                	jne    c000b93d <File::open(FileOpenMode)+0x59>
c000b91d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b91f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	51                   	push   ecx
c000b92a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b92d:	51                   	push   ecx
c000b92e:	52                   	push   edx
c000b92f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	85 c0                	test   eax,eax
c000b937:	75 04                	jne    c000b93d <File::open(FileOpenMode)+0x59>
c000b939:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b93d:	83 c4 08             	add    esp,0x8
c000b940:	5b                   	pop    ebx
c000b941:	c3                   	ret    

c000b942 <File::close()>:
c000b942:	53                   	push   ebx
c000b943:	b8 0b 00 00 00       	mov    eax,0xb
c000b948:	83 ec 08             	sub    esp,0x8
c000b94b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b94f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b956:	83 f9 19             	cmp    ecx,0x19
c000b959:	77 41                	ja     c000b99c <File::close()+0x5a>
c000b95b:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b962:	85 db                	test   ebx,ebx
c000b964:	74 36                	je     c000b99c <File::close()+0x5a>
c000b966:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b96d:	74 2d                	je     c000b99c <File::close()+0x5a>
c000b96f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b973:	b8 05 00 00 00       	mov    eax,0x5
c000b978:	74 22                	je     c000b99c <File::close()+0x5a>
c000b97a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b97e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b985:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b98b:	53                   	push   ebx
c000b98c:	53                   	push   ebx
c000b98d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b98f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b995:	50                   	push   eax
c000b996:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b999:	83 c4 10             	add    esp,0x10
c000b99c:	83 c4 08             	add    esp,0x8
c000b99f:	5b                   	pop    ebx
c000b9a0:	c3                   	ret    
c000b9a1:	90                   	nop

c000b9a2 <File::seek(unsigned long long)>:
c000b9a2:	56                   	push   esi
c000b9a3:	b8 0b 00 00 00       	mov    eax,0xb
c000b9a8:	53                   	push   ebx
c000b9a9:	51                   	push   ecx
c000b9aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9b6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9bd:	83 fa 19             	cmp    edx,0x19
c000b9c0:	77 31                	ja     c000b9f3 <File::seek(unsigned long long)+0x51>
c000b9c2:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9c9:	85 d2                	test   edx,edx
c000b9cb:	74 26                	je     c000b9f3 <File::seek(unsigned long long)+0x51>
c000b9cd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9d3:	85 d2                	test   edx,edx
c000b9d5:	74 1c                	je     c000b9f3 <File::seek(unsigned long long)+0x51>
c000b9d7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9db:	b8 05 00 00 00       	mov    eax,0x5
c000b9e0:	74 11                	je     c000b9f3 <File::seek(unsigned long long)+0x51>
c000b9e2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9e4:	53                   	push   ebx
c000b9e5:	51                   	push   ecx
c000b9e6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9ec:	52                   	push   edx
c000b9ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9f0:	83 c4 10             	add    esp,0x10
c000b9f3:	5a                   	pop    edx
c000b9f4:	5b                   	pop    ebx
c000b9f5:	5e                   	pop    esi
c000b9f6:	c3                   	ret    
c000b9f7:	90                   	nop

c000b9f8 <File::truncate(unsigned long long)>:
c000b9f8:	56                   	push   esi
c000b9f9:	b8 0b 00 00 00       	mov    eax,0xb
c000b9fe:	53                   	push   ebx
c000b9ff:	51                   	push   ecx
c000ba00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba04:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba0c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba13:	83 fa 19             	cmp    edx,0x19
c000ba16:	77 31                	ja     c000ba49 <File::truncate(unsigned long long)+0x51>
c000ba18:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba1f:	85 d2                	test   edx,edx
c000ba21:	74 26                	je     c000ba49 <File::truncate(unsigned long long)+0x51>
c000ba23:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba29:	85 d2                	test   edx,edx
c000ba2b:	74 1c                	je     c000ba49 <File::truncate(unsigned long long)+0x51>
c000ba2d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba31:	b8 05 00 00 00       	mov    eax,0x5
c000ba36:	74 11                	je     c000ba49 <File::truncate(unsigned long long)+0x51>
c000ba38:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba3a:	53                   	push   ebx
c000ba3b:	51                   	push   ecx
c000ba3c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba42:	52                   	push   edx
c000ba43:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba46:	83 c4 10             	add    esp,0x10
c000ba49:	5a                   	pop    edx
c000ba4a:	5b                   	pop    ebx
c000ba4b:	5e                   	pop    esi
c000ba4c:	c3                   	ret    
c000ba4d:	90                   	nop

c000ba4e <File::tell(unsigned long long*)>:
c000ba4e:	83 ec 0c             	sub    esp,0xc
c000ba51:	b8 0b 00 00 00       	mov    eax,0xb
c000ba56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba5a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba61:	83 fa 19             	cmp    edx,0x19
c000ba64:	77 34                	ja     c000ba9a <File::tell(unsigned long long*)+0x4c>
c000ba66:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba6d:	85 d2                	test   edx,edx
c000ba6f:	74 29                	je     c000ba9a <File::tell(unsigned long long*)+0x4c>
c000ba71:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba77:	85 d2                	test   edx,edx
c000ba79:	74 1f                	je     c000ba9a <File::tell(unsigned long long*)+0x4c>
c000ba7b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba7f:	b8 05 00 00 00       	mov    eax,0x5
c000ba84:	74 14                	je     c000ba9a <File::tell(unsigned long long*)+0x4c>
c000ba86:	50                   	push   eax
c000ba87:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba8d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba93:	52                   	push   edx
c000ba94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba97:	83 c4 10             	add    esp,0x10
c000ba9a:	83 c4 0c             	add    esp,0xc
c000ba9d:	c3                   	ret    

c000ba9e <File::rewind()>:
c000ba9e:	83 ec 10             	sub    esp,0x10
c000baa1:	6a 00                	push   0x0
c000baa3:	6a 00                	push   0x0
c000baa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baa9:	e8 f4 fe ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c000baae:	83 c4 1c             	add    esp,0x1c
c000bab1:	c3                   	ret    

c000bab2 <File::unlink()>:
c000bab2:	83 ec 0c             	sub    esp,0xc
c000bab5:	b8 0b 00 00 00       	mov    eax,0xb
c000baba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000babe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bac5:	83 f9 19             	cmp    ecx,0x19
c000bac8:	77 2f                	ja     c000baf9 <File::unlink()+0x47>
c000baca:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bad1:	85 c9                	test   ecx,ecx
c000bad3:	74 24                	je     c000baf9 <File::unlink()+0x47>
c000bad5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000badb:	85 c9                	test   ecx,ecx
c000badd:	74 1a                	je     c000baf9 <File::unlink()+0x47>
c000badf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bae3:	b8 06 00 00 00       	mov    eax,0x6
c000bae8:	75 0f                	jne    c000baf9 <File::unlink()+0x47>
c000baea:	50                   	push   eax
c000baeb:	83 c2 0d             	add    edx,0xd
c000baee:	50                   	push   eax
c000baef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baf1:	52                   	push   edx
c000baf2:	51                   	push   ecx
c000baf3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	83 c4 0c             	add    esp,0xc
c000bafc:	c3                   	ret    
c000bafd:	90                   	nop

c000bafe <File::rename(char const*)>:
c000bafe:	83 ec 0c             	sub    esp,0xc
c000bb01:	b8 0b 00 00 00       	mov    eax,0xb
c000bb06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb0a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb11:	83 f9 19             	cmp    ecx,0x19
c000bb14:	77 32                	ja     c000bb48 <File::rename(char const*)+0x4a>
c000bb16:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb1d:	85 c9                	test   ecx,ecx
c000bb1f:	74 27                	je     c000bb48 <File::rename(char const*)+0x4a>
c000bb21:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb27:	85 c9                	test   ecx,ecx
c000bb29:	74 1d                	je     c000bb48 <File::rename(char const*)+0x4a>
c000bb2b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb2f:	b8 06 00 00 00       	mov    eax,0x6
c000bb34:	75 12                	jne    c000bb48 <File::rename(char const*)+0x4a>
c000bb36:	50                   	push   eax
c000bb37:	83 c2 0d             	add    edx,0xd
c000bb3a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb40:	52                   	push   edx
c000bb41:	51                   	push   ecx
c000bb42:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb45:	83 c4 10             	add    esp,0x10
c000bb48:	83 c4 0c             	add    esp,0xc
c000bb4b:	c3                   	ret    

c000bb4c <File::chfatattr(unsigned char, unsigned char)>:
c000bb4c:	57                   	push   edi
c000bb4d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb52:	56                   	push   esi
c000bb53:	53                   	push   ebx
c000bb54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb58:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb60:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb67:	83 f9 19             	cmp    ecx,0x19
c000bb6a:	77 37                	ja     c000bba3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb6c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb73:	85 c9                	test   ecx,ecx
c000bb75:	74 2c                	je     c000bba3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb77:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb7d:	85 c9                	test   ecx,ecx
c000bb7f:	74 22                	je     c000bba3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb81:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb85:	b8 06 00 00 00       	mov    eax,0x6
c000bb8a:	75 17                	jne    c000bba3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb8c:	89 f0                	mov    eax,esi
c000bb8e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb90:	0f b6 db             	movzx  ebx,bl
c000bb93:	0f b6 f0             	movzx  esi,al
c000bb96:	83 c2 0d             	add    edx,0xd
c000bb99:	56                   	push   esi
c000bb9a:	53                   	push   ebx
c000bb9b:	52                   	push   edx
c000bb9c:	51                   	push   ecx
c000bb9d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bba0:	83 c4 10             	add    esp,0x10
c000bba3:	5b                   	pop    ebx
c000bba4:	5e                   	pop    esi
c000bba5:	5f                   	pop    edi
c000bba6:	c3                   	ret    
c000bba7:	90                   	nop

c000bba8 <File::exists()>:
c000bba8:	83 ec 0c             	sub    esp,0xc
c000bbab:	31 c0                	xor    eax,eax
c000bbad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbb1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbb8:	83 f9 19             	cmp    ecx,0x19
c000bbbb:	77 24                	ja     c000bbe1 <File::exists()+0x39>
c000bbbd:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbc4:	85 c9                	test   ecx,ecx
c000bbc6:	74 19                	je     c000bbe1 <File::exists()+0x39>
c000bbc8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbce:	85 c9                	test   ecx,ecx
c000bbd0:	74 0f                	je     c000bbe1 <File::exists()+0x39>
c000bbd2:	50                   	push   eax
c000bbd3:	83 c2 0d             	add    edx,0xd
c000bbd6:	50                   	push   eax
c000bbd7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbd9:	52                   	push   edx
c000bbda:	51                   	push   ecx
c000bbdb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbde:	83 c4 10             	add    esp,0x10
c000bbe1:	83 c4 0c             	add    esp,0xc
c000bbe4:	c3                   	ret    
c000bbe5:	90                   	nop

c000bbe6 <File::stat(unsigned long long*, bool*)>:
c000bbe6:	56                   	push   esi
c000bbe7:	53                   	push   ebx
c000bbe8:	50                   	push   eax
c000bbe9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbf2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbf6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbfa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc01:	83 f9 19             	cmp    ecx,0x19
c000bc04:	77 3d                	ja     c000bc43 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc06:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc0d:	85 c9                	test   ecx,ecx
c000bc0f:	74 32                	je     c000bc43 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc11:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc17:	85 c9                	test   ecx,ecx
c000bc19:	74 28                	je     c000bc43 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc1f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc21:	74 13                	je     c000bc36 <File::stat(unsigned long long*, bool*)+0x50>
c000bc23:	83 ec 04             	sub    esp,0x4
c000bc26:	56                   	push   esi
c000bc27:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc2d:	51                   	push   ecx
c000bc2e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc31:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc34:	eb 0a                	jmp    c000bc40 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc36:	53                   	push   ebx
c000bc37:	83 c2 0d             	add    edx,0xd
c000bc3a:	56                   	push   esi
c000bc3b:	52                   	push   edx
c000bc3c:	51                   	push   ecx
c000bc3d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	5a                   	pop    edx
c000bc44:	5b                   	pop    ebx
c000bc45:	5e                   	pop    esi
c000bc46:	c3                   	ret    

c000bc47 <Fs::setcwd(Process*, char*)>:
c000bc47:	55                   	push   ebp
c000bc48:	57                   	push   edi
c000bc49:	56                   	push   esi
c000bc4a:	53                   	push   ebx
c000bc4b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc51:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc58:	6a 00                	push   0x0
c000bc5a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc60:	57                   	push   edi
c000bc61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc68:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc6c:	56                   	push   esi
c000bc6d:	e8 3a f9 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc72:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc75:	e8 06 49 ff ff       	call   c0000580 <strlen>
c000bc7a:	83 c4 10             	add    esp,0x10
c000bc7d:	83 f8 02             	cmp    eax,0x2
c000bc80:	77 15                	ja     c000bc97 <Fs::setcwd(Process*, char*)+0x50>
c000bc82:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc87:	83 eb 41             	sub    ebx,0x41
c000bc8a:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc91:	85 c0                	test   eax,eax
c000bc93:	75 1c                	jne    c000bcb1 <Fs::setcwd(Process*, char*)+0x6a>
c000bc95:	eb 2f                	jmp    c000bcc6 <Fs::setcwd(Process*, char*)+0x7f>
c000bc97:	83 ec 0c             	sub    esp,0xc
c000bc9a:	56                   	push   esi
c000bc9b:	e8 e0 48 ff ff       	call   c0000580 <strlen>
c000bca0:	83 c4 10             	add    esp,0x10
c000bca3:	83 f8 03             	cmp    eax,0x3
c000bca6:	75 57                	jne    c000bcff <Fs::setcwd(Process*, char*)+0xb8>
c000bca8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bcad:	75 50                	jne    c000bcff <Fs::setcwd(Process*, char*)+0xb8>
c000bcaf:	eb d1                	jmp    c000bc82 <Fs::setcwd(Process*, char*)+0x3b>
c000bcb1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bcb8:	75 0c                	jne    c000bcc6 <Fs::setcwd(Process*, char*)+0x7f>
c000bcba:	83 ec 0c             	sub    esp,0xc
c000bcbd:	50                   	push   eax
c000bcbe:	e8 a9 1d 00 00       	call   c000da6c <LogicalDisk::mount()>
c000bcc3:	83 c4 10             	add    esp,0x10
c000bcc6:	83 fb 19             	cmp    ebx,0x19
c000bcc9:	b8 03 00 00 00       	mov    eax,0x3
c000bcce:	0f 87 c6 00 00 00    	ja     c000bd9a <Fs::setcwd(Process*, char*)+0x153>
c000bcd4:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bcdb:	b8 05 00 00 00       	mov    eax,0x5
c000bce0:	85 d2                	test   edx,edx
c000bce2:	0f 84 b2 00 00 00    	je     c000bd9a <Fs::setcwd(Process*, char*)+0x153>
c000bce8:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bcef:	b8 06 00 00 00       	mov    eax,0x6
c000bcf4:	0f 85 92 00 00 00    	jne    c000bd8c <Fs::setcwd(Process*, char*)+0x145>
c000bcfa:	e9 9b 00 00 00       	jmp    c000bd9a <Fs::setcwd(Process*, char*)+0x153>
c000bcff:	83 ec 0c             	sub    esp,0xc
c000bd02:	68 14 01 00 00       	push   0x114
c000bd07:	e8 c7 bd ff ff       	call   c0007ad3 <malloc>
c000bd0c:	83 c4 0c             	add    esp,0xc
c000bd0f:	55                   	push   ebp
c000bd10:	56                   	push   esi
c000bd11:	50                   	push   eax
c000bd12:	89 c3                	mov    ebx,eax
c000bd14:	e8 03 fb ff ff       	call   c000b81c <File::File(char const*, Process*)>
c000bd19:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd1e:	83 c4 0c             	add    esp,0xc
c000bd21:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd25:	50                   	push   eax
c000bd26:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd2a:	50                   	push   eax
c000bd2b:	53                   	push   ebx
c000bd2c:	e8 b5 fe ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	83 f8 02             	cmp    eax,0x2
c000bd37:	74 27                	je     c000bd60 <Fs::setcwd(Process*, char*)+0x119>
c000bd39:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd3e:	75 1c                	jne    c000bd5c <Fs::setcwd(Process*, char*)+0x115>
c000bd40:	85 db                	test   ebx,ebx
c000bd42:	b8 02 00 00 00       	mov    eax,0x2
c000bd47:	74 51                	je     c000bd9a <Fs::setcwd(Process*, char*)+0x153>
c000bd49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd4b:	83 ec 0c             	sub    esp,0xc
c000bd4e:	53                   	push   ebx
c000bd4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd52:	83 c4 10             	add    esp,0x10
c000bd55:	b8 02 00 00 00       	mov    eax,0x2
c000bd5a:	eb 3e                	jmp    c000bd9a <Fs::setcwd(Process*, char*)+0x153>
c000bd5c:	85 c0                	test   eax,eax
c000bd5e:	74 1c                	je     c000bd7c <Fs::setcwd(Process*, char*)+0x135>
c000bd60:	85 db                	test   ebx,ebx
c000bd62:	b8 01 00 00 00       	mov    eax,0x1
c000bd67:	74 31                	je     c000bd9a <Fs::setcwd(Process*, char*)+0x153>
c000bd69:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd6b:	83 ec 0c             	sub    esp,0xc
c000bd6e:	53                   	push   ebx
c000bd6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd72:	83 c4 10             	add    esp,0x10
c000bd75:	b8 01 00 00 00       	mov    eax,0x1
c000bd7a:	eb 1e                	jmp    c000bd9a <Fs::setcwd(Process*, char*)+0x153>
c000bd7c:	85 db                	test   ebx,ebx
c000bd7e:	74 0c                	je     c000bd8c <Fs::setcwd(Process*, char*)+0x145>
c000bd80:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd82:	83 ec 0c             	sub    esp,0xc
c000bd85:	53                   	push   ebx
c000bd86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd89:	83 c4 10             	add    esp,0x10
c000bd8c:	50                   	push   eax
c000bd8d:	50                   	push   eax
c000bd8e:	56                   	push   esi
c000bd8f:	57                   	push   edi
c000bd90:	e8 bb 48 ff ff       	call   c0000650 <strcpy>
c000bd95:	83 c4 10             	add    esp,0x10
c000bd98:	31 c0                	xor    eax,eax
c000bd9a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bda0:	5b                   	pop    ebx
c000bda1:	5e                   	pop    esi
c000bda2:	5f                   	pop    edi
c000bda3:	5d                   	pop    ebp
c000bda4:	c3                   	ret    
c000bda5:	90                   	nop

c000bda6 <Directory::Directory(char const*, Process*)>:
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdad:	83 ec 08             	sub    esp,0x8
c000bdb0:	6a 00                	push   0x0
c000bdb2:	50                   	push   eax
c000bdb3:	e8 ee d3 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bdb8:	83 c4 10             	add    esp,0x10
c000bdbb:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c000bdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc4:	89 10                	mov    DWORD PTR [eax],edx
c000bdc6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdcb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdcf:	0f 95 c0             	setne  al
c000bdd2:	0f b6 c0             	movzx  eax,al
c000bdd5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdd9:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bddf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde3:	83 c2 0d             	add    edx,0xd
c000bde6:	50                   	push   eax
c000bde7:	51                   	push   ecx
c000bde8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdec:	52                   	push   edx
c000bded:	e8 ba f7 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf9:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bdfc:	83 e8 41             	sub    eax,0x41
c000bdff:	88 c2                	mov    dl,al
c000be01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be05:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be17:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be1d:	0f b6 c0             	movzx  eax,al
c000be20:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be27:	85 c0                	test   eax,eax
c000be29:	74 3e                	je     c000be69 <Directory::Directory(char const*, Process*)+0xc3>
c000be2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be35:	0f b6 c0             	movzx  eax,al
c000be38:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be3f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be45:	85 c0                	test   eax,eax
c000be47:	75 20                	jne    c000be69 <Directory::Directory(char const*, Process*)+0xc3>
c000be49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be53:	0f b6 c0             	movzx  eax,al
c000be56:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be5d:	83 ec 0c             	sub    esp,0xc
c000be60:	50                   	push   eax
c000be61:	e8 06 1c 00 00       	call   c000da6c <LogicalDisk::mount()>
c000be66:	83 c4 10             	add    esp,0x10
c000be69:	90                   	nop
c000be6a:	83 c4 0c             	add    esp,0xc
c000be6d:	c3                   	ret    

c000be6e <Directory::open()>:
c000be6e:	53                   	push   ebx
c000be6f:	b8 0b 00 00 00       	mov    eax,0xb
c000be74:	83 ec 08             	sub    esp,0x8
c000be77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be7b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be82:	83 fa 19             	cmp    edx,0x19
c000be85:	77 3d                	ja     c000bec4 <Directory::open()+0x56>
c000be87:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be8e:	85 d2                	test   edx,edx
c000be90:	74 32                	je     c000bec4 <Directory::open()+0x56>
c000be92:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be98:	85 d2                	test   edx,edx
c000be9a:	74 28                	je     c000bec4 <Directory::open()+0x56>
c000be9c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bea0:	b8 06 00 00 00       	mov    eax,0x6
c000bea5:	75 1d                	jne    c000bec4 <Directory::open()+0x56>
c000bea7:	50                   	push   eax
c000bea8:	8b 02                	mov    eax,DWORD PTR [edx]
c000beaa:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000beb0:	51                   	push   ecx
c000beb1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000beb4:	51                   	push   ecx
c000beb5:	52                   	push   edx
c000beb6:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000beb9:	83 c4 10             	add    esp,0x10
c000bebc:	85 c0                	test   eax,eax
c000bebe:	75 04                	jne    c000bec4 <Directory::open()+0x56>
c000bec0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bec4:	83 c4 08             	add    esp,0x8
c000bec7:	5b                   	pop    ebx
c000bec8:	c3                   	ret    
c000bec9:	90                   	nop

c000beca <Directory::close()>:
c000beca:	53                   	push   ebx
c000becb:	b8 0b 00 00 00       	mov    eax,0xb
c000bed0:	83 ec 08             	sub    esp,0x8
c000bed3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bed7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bede:	83 f9 19             	cmp    ecx,0x19
c000bee1:	77 41                	ja     c000bf24 <Directory::close()+0x5a>
c000bee3:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000beea:	85 db                	test   ebx,ebx
c000beec:	74 36                	je     c000bf24 <Directory::close()+0x5a>
c000beee:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bef5:	74 2d                	je     c000bf24 <Directory::close()+0x5a>
c000bef7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000befb:	b8 05 00 00 00       	mov    eax,0x5
c000bf00:	74 22                	je     c000bf24 <Directory::close()+0x5a>
c000bf02:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf06:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf0d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf13:	53                   	push   ebx
c000bf14:	53                   	push   ebx
c000bf15:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf17:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf1d:	50                   	push   eax
c000bf1e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	83 c4 08             	add    esp,0x8
c000bf27:	5b                   	pop    ebx
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <Directory::unlink()>:
c000bf2a:	83 ec 0c             	sub    esp,0xc
c000bf2d:	b8 0b 00 00 00       	mov    eax,0xb
c000bf32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf3d:	83 f9 19             	cmp    ecx,0x19
c000bf40:	77 2f                	ja     c000bf71 <Directory::unlink()+0x47>
c000bf42:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf49:	85 c9                	test   ecx,ecx
c000bf4b:	74 24                	je     c000bf71 <Directory::unlink()+0x47>
c000bf4d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf53:	85 c9                	test   ecx,ecx
c000bf55:	74 1a                	je     c000bf71 <Directory::unlink()+0x47>
c000bf57:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf5b:	b8 06 00 00 00       	mov    eax,0x6
c000bf60:	75 0f                	jne    c000bf71 <Directory::unlink()+0x47>
c000bf62:	50                   	push   eax
c000bf63:	83 c2 0d             	add    edx,0xd
c000bf66:	50                   	push   eax
c000bf67:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf69:	52                   	push   edx
c000bf6a:	51                   	push   ecx
c000bf6b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf6e:	83 c4 10             	add    esp,0x10
c000bf71:	83 c4 0c             	add    esp,0xc
c000bf74:	c3                   	ret    
c000bf75:	90                   	nop

c000bf76 <Directory::rename(char const*)>:
c000bf76:	83 ec 0c             	sub    esp,0xc
c000bf79:	b8 0b 00 00 00       	mov    eax,0xb
c000bf7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf89:	83 f9 19             	cmp    ecx,0x19
c000bf8c:	77 32                	ja     c000bfc0 <Directory::rename(char const*)+0x4a>
c000bf8e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf95:	85 c9                	test   ecx,ecx
c000bf97:	74 27                	je     c000bfc0 <Directory::rename(char const*)+0x4a>
c000bf99:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf9f:	85 c9                	test   ecx,ecx
c000bfa1:	74 1d                	je     c000bfc0 <Directory::rename(char const*)+0x4a>
c000bfa3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfa7:	b8 06 00 00 00       	mov    eax,0x6
c000bfac:	75 12                	jne    c000bfc0 <Directory::rename(char const*)+0x4a>
c000bfae:	50                   	push   eax
c000bfaf:	83 c2 0d             	add    edx,0xd
c000bfb2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb8:	52                   	push   edx
c000bfb9:	51                   	push   ecx
c000bfba:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfbd:	83 c4 10             	add    esp,0x10
c000bfc0:	83 c4 0c             	add    esp,0xc
c000bfc3:	c3                   	ret    

c000bfc4 <Directory::exists()>:
c000bfc4:	83 ec 0c             	sub    esp,0xc
c000bfc7:	31 c0                	xor    eax,eax
c000bfc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfcd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfd4:	83 f9 19             	cmp    ecx,0x19
c000bfd7:	77 24                	ja     c000bffd <Directory::exists()+0x39>
c000bfd9:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfe0:	85 c9                	test   ecx,ecx
c000bfe2:	74 19                	je     c000bffd <Directory::exists()+0x39>
c000bfe4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfea:	85 c9                	test   ecx,ecx
c000bfec:	74 0f                	je     c000bffd <Directory::exists()+0x39>
c000bfee:	50                   	push   eax
c000bfef:	83 c2 0d             	add    edx,0xd
c000bff2:	50                   	push   eax
c000bff3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bff5:	52                   	push   edx
c000bff6:	51                   	push   ecx
c000bff7:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bffa:	83 c4 10             	add    esp,0x10
c000bffd:	83 c4 0c             	add    esp,0xc
c000c000:	c3                   	ret    
c000c001:	90                   	nop

c000c002 <Directory::read(dirent*)>:
c000c002:	83 ec 1c             	sub    esp,0x1c
c000c005:	b8 0b 00 00 00       	mov    eax,0xb
c000c00a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c00e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c015:	83 f9 19             	cmp    ecx,0x19
c000c018:	77 30                	ja     c000c04a <Directory::read(dirent*)+0x48>
c000c01a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c021:	85 c9                	test   ecx,ecx
c000c023:	74 25                	je     c000c04a <Directory::read(dirent*)+0x48>
c000c025:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c02c:	74 1c                	je     c000c04a <Directory::read(dirent*)+0x48>
c000c02e:	83 ec 0c             	sub    esp,0xc
c000c031:	8b 02                	mov    eax,DWORD PTR [edx]
c000c033:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c037:	51                   	push   ecx
c000c038:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03c:	6a 00                	push   0x0
c000c03e:	68 10 01 00 00       	push   0x110
c000c043:	52                   	push   edx
c000c044:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c047:	83 c4 20             	add    esp,0x20
c000c04a:	83 c4 1c             	add    esp,0x1c
c000c04d:	c3                   	ret    

c000c04e <Directory::create()>:
c000c04e:	83 ec 0c             	sub    esp,0xc
c000c051:	b8 0b 00 00 00       	mov    eax,0xb
c000c056:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c05a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c061:	83 f9 19             	cmp    ecx,0x19
c000c064:	77 2f                	ja     c000c095 <Directory::create()+0x47>
c000c066:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c06d:	85 c9                	test   ecx,ecx
c000c06f:	74 24                	je     c000c095 <Directory::create()+0x47>
c000c071:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c077:	85 c9                	test   ecx,ecx
c000c079:	74 1a                	je     c000c095 <Directory::create()+0x47>
c000c07b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c07f:	b8 06 00 00 00       	mov    eax,0x6
c000c084:	75 0f                	jne    c000c095 <Directory::create()+0x47>
c000c086:	50                   	push   eax
c000c087:	83 c2 0d             	add    edx,0xd
c000c08a:	50                   	push   eax
c000c08b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c08d:	52                   	push   edx
c000c08e:	51                   	push   ecx
c000c08f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	83 c4 0c             	add    esp,0xc
c000c098:	c3                   	ret    
c000c099:	90                   	nop

c000c09a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c09a:	b8 0a 00 00 00       	mov    eax,0xa
c000c09f:	c3                   	ret    

c000c0a0 <Bus::Bus(char const*)>:
c000c0a0:	83 ec 0c             	sub    esp,0xc
c000c0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a7:	83 ec 08             	sub    esp,0x8
c000c0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ae:	50                   	push   eax
c000c0af:	e8 28 08 00 00       	call   c000c8dc <Device::Device(char const*)>
c000c0b4:	83 c4 10             	add    esp,0x10
c000c0b7:	ba d8 14 02 c0       	mov    edx,0xc00214d8
c000c0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c0:	89 10                	mov    DWORD PTR [eax],edx
c000c0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0d0:	90                   	nop
c000c0d1:	83 c4 0c             	add    esp,0xc
c000c0d4:	c3                   	ret    
c000c0d5:	90                   	nop
c000c0d6:	66 90                	xchg   ax,ax

c000c0d8 <Bus::~Bus()>:
c000c0d8:	83 ec 0c             	sub    esp,0xc
c000c0db:	ba d8 14 02 c0       	mov    edx,0xc00214d8
c000c0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e4:	89 10                	mov    DWORD PTR [eax],edx
c000c0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ea:	83 ec 0c             	sub    esp,0xc
c000c0ed:	50                   	push   eax
c000c0ee:	e8 53 05 00 00       	call   c000c646 <Device::~Device()>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	90                   	nop
c000c0f7:	83 c4 0c             	add    esp,0xc
c000c0fa:	c3                   	ret    
c000c0fb:	90                   	nop

c000c0fc <Bus::~Bus()>:
c000c0fc:	83 ec 0c             	sub    esp,0xc
c000c0ff:	83 ec 0c             	sub    esp,0xc
c000c102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c106:	e8 cd ff ff ff       	call   c000c0d8 <Bus::~Bus()>
c000c10b:	83 c4 10             	add    esp,0x10
c000c10e:	83 ec 08             	sub    esp,0x8
c000c111:	68 58 01 00 00       	push   0x158
c000c116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11a:	e8 ed e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c11f:	83 c4 10             	add    esp,0x10
c000c122:	83 c4 0c             	add    esp,0xc
c000c125:	c3                   	ret    

c000c126 <beepThread(void*)>:
c000c126:	83 ec 0c             	sub    esp,0xc
c000c129:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c12e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c132:	48                   	dec    eax
c000c133:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c138:	75 01                	jne    c000c13b <beepThread(void*)+0x15>
c000c13a:	fb                   	sti    
c000c13b:	6b c2 0a             	imul   eax,edx,0xa
c000c13e:	83 ec 0c             	sub    esp,0xc
c000c141:	50                   	push   eax
c000c142:	e8 b5 9d 00 00       	call   c0015efc <milliTenthSleep(unsigned int)>
c000c147:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c14e:	e8 02 bd 00 00       	call   c0017e55 <HalMakeBeep(int)>
c000c153:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c15b:	83 c4 1c             	add    esp,0x1c
c000c15e:	e9 7d 9c 00 00       	jmp    c0015de0 <blockTask(TaskState)>

c000c163 <Krnl::beep(int, int, bool)>:
c000c163:	56                   	push   esi
c000c164:	53                   	push   ebx
c000c165:	83 ec 10             	sub    esp,0x10
c000c168:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c16c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c174:	e8 dc bc 00 00       	call   c0017e55 <HalMakeBeep(int)>
c000c179:	89 f0                	mov    eax,esi
c000c17b:	83 c4 10             	add    esp,0x10
c000c17e:	84 c0                	test   al,al
c000c180:	74 1e                	je     c000c1a0 <Krnl::beep(int, int, bool)+0x3d>
c000c182:	6b db 0a             	imul   ebx,ebx,0xa
c000c185:	83 ec 0c             	sub    esp,0xc
c000c188:	53                   	push   ebx
c000c189:	e8 6e 9d 00 00       	call   c0015efc <milliTenthSleep(unsigned int)>
c000c18e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c196:	83 c4 14             	add    esp,0x14
c000c199:	5b                   	pop    ebx
c000c19a:	5e                   	pop    esi
c000c19b:	e9 b5 bc 00 00       	jmp    c0017e55 <HalMakeBeep(int)>
c000c1a0:	68 e6 00 00 00       	push   0xe6
c000c1a5:	53                   	push   ebx
c000c1a6:	68 26 c1 00 c0       	push   0xc000c126
c000c1ab:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1b1:	e8 de 97 00 00       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c000c1b6:	83 c4 14             	add    esp,0x14
c000c1b9:	5b                   	pop    ebx
c000c1ba:	5e                   	pop    esi
c000c1bb:	c3                   	ret    

c000c1bc <User::loadClockSettings(int)>:
c000c1bc:	53                   	push   ebx
c000c1bd:	83 ec 14             	sub    esp,0x14
c000c1c0:	68 14 01 00 00       	push   0x114
c000c1c5:	e8 09 b9 ff ff       	call   c0007ad3 <malloc>
c000c1ca:	83 c4 0c             	add    esp,0xc
c000c1cd:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1d3:	68 fc 14 02 c0       	push   0xc00214fc
c000c1d8:	50                   	push   eax
c000c1d9:	89 c3                	mov    ebx,eax
c000c1db:	e8 3c f6 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c000c1e0:	58                   	pop    eax
c000c1e1:	5a                   	pop    edx
c000c1e2:	6a 01                	push   0x1
c000c1e4:	53                   	push   ebx
c000c1e5:	e8 fa f6 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c000c1ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1ed:	e8 50 f7 ff ff       	call   c000b942 <File::close()>
c000c1f2:	83 c4 10             	add    esp,0x10
c000c1f5:	85 db                	test   ebx,ebx
c000c1f7:	74 0f                	je     c000c208 <User::loadClockSettings(int)+0x4c>
c000c1f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c1ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c202:	83 c4 08             	add    esp,0x8
c000c205:	5b                   	pop    ebx
c000c206:	ff e0                	jmp    eax
c000c208:	83 c4 08             	add    esp,0x8
c000c20b:	5b                   	pop    ebx
c000c20c:	c3                   	ret    
c000c20d:	90                   	nop

c000c20e <Clock::Clock(char const*)>:
c000c20e:	83 ec 0c             	sub    esp,0xc
c000c211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c215:	83 ec 08             	sub    esp,0x8
c000c218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c21c:	50                   	push   eax
c000c21d:	e8 ba 06 00 00       	call   c000c8dc <Device::Device(char const*)>
c000c222:	83 c4 10             	add    esp,0x10
c000c225:	ba 24 15 02 c0       	mov    edx,0xc0021524
c000c22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c22e:	89 10                	mov    DWORD PTR [eax],edx
c000c230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c234:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c23e:	90                   	nop
c000c23f:	83 c4 0c             	add    esp,0xc
c000c242:	c3                   	ret    
c000c243:	90                   	nop

c000c244 <Clock::~Clock()>:
c000c244:	83 ec 0c             	sub    esp,0xc
c000c247:	ba 24 15 02 c0       	mov    edx,0xc0021524
c000c24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c250:	89 10                	mov    DWORD PTR [eax],edx
c000c252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c256:	83 ec 0c             	sub    esp,0xc
c000c259:	50                   	push   eax
c000c25a:	e8 e7 03 00 00       	call   c000c646 <Device::~Device()>
c000c25f:	83 c4 10             	add    esp,0x10
c000c262:	90                   	nop
c000c263:	83 c4 0c             	add    esp,0xc
c000c266:	c3                   	ret    
c000c267:	90                   	nop

c000c268 <Clock::~Clock()>:
c000c268:	83 ec 0c             	sub    esp,0xc
c000c26b:	83 ec 0c             	sub    esp,0xc
c000c26e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c272:	e8 cd ff ff ff       	call   c000c244 <Clock::~Clock()>
c000c277:	83 c4 10             	add    esp,0x10
c000c27a:	83 ec 08             	sub    esp,0x8
c000c27d:	68 58 01 00 00       	push   0x158
c000c282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c286:	e8 81 e5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c28b:	83 c4 10             	add    esp,0x10
c000c28e:	83 c4 0c             	add    esp,0xc
c000c291:	c3                   	ret    

c000c292 <Clock::timeInSecondsLocal()>:
c000c292:	53                   	push   ebx
c000c293:	83 ec 14             	sub    esp,0x14
c000c296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c29a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c29c:	50                   	push   eax
c000c29d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2a0:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2a7:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c2ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c2b3:	89 cb                	mov    ebx,ecx
c000c2b5:	c1 fb 1f             	sar    ebx,0x1f
c000c2b8:	01 c8                	add    eax,ecx
c000c2ba:	11 da                	adc    edx,ebx
c000c2bc:	83 c4 10             	add    esp,0x10
c000c2bf:	31 c9                	xor    ecx,ecx
c000c2c1:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2c8:	74 05                	je     c000c2cf <Clock::timeInSecondsLocal()+0x3d>
c000c2ca:	b9 08 07 00 00       	mov    ecx,0x708
c000c2cf:	31 db                	xor    ebx,ebx
c000c2d1:	01 c8                	add    eax,ecx
c000c2d3:	11 da                	adc    edx,ebx
c000c2d5:	83 c4 08             	add    esp,0x8
c000c2d8:	5b                   	pop    ebx
c000c2d9:	c3                   	ret    

c000c2da <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2da:	57                   	push   edi
c000c2db:	56                   	push   esi
c000c2dc:	53                   	push   ebx
c000c2dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2e5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2eb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2ee:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2f5:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c2fb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c301:	99                   	cdq    
c000c302:	29 c6                	sub    esi,eax
c000c304:	19 d7                	sbb    edi,edx
c000c306:	89 f0                	mov    eax,esi
c000c308:	31 f6                	xor    esi,esi
c000c30a:	89 fa                	mov    edx,edi
c000c30c:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c313:	74 05                	je     c000c31a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c315:	be 08 07 00 00       	mov    esi,0x708
c000c31a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c31e:	31 ff                	xor    edi,edi
c000c320:	29 f0                	sub    eax,esi
c000c322:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c326:	19 fa                	sbb    edx,edi
c000c328:	89 d8                	mov    eax,ebx
c000c32a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c32e:	5b                   	pop    ebx
c000c32f:	5e                   	pop    esi
c000c330:	5f                   	pop    edi
c000c331:	ff e0                	jmp    eax

c000c333 <datetimeToSeconds(datetime_t)>:
c000c333:	55                   	push   ebp
c000c334:	57                   	push   edi
c000c335:	56                   	push   esi
c000c336:	53                   	push   ebx
c000c337:	83 ec 0c             	sub    esp,0xc
c000c33a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c342:	89 f7                	mov    edi,esi
c000c344:	89 f0                	mov    eax,esi
c000c346:	0f b6 cf             	movzx  ecx,bh
c000c349:	0f b6 c4             	movzx  eax,ah
c000c34c:	c1 ef 10             	shr    edi,0x10
c000c34f:	89 da                	mov    edx,ebx
c000c351:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c354:	89 f9                	mov    ecx,edi
c000c356:	0f b6 f9             	movzx  edi,cl
c000c359:	89 f1                	mov    ecx,esi
c000c35b:	6b c0 3c             	imul   eax,eax,0x3c
c000c35e:	0f b6 f1             	movzx  esi,cl
c000c361:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c367:	0f b6 db             	movzx  ebx,bl
c000c36a:	c1 ea 10             	shr    edx,0x10
c000c36d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c373:	01 f8                	add    eax,edi
c000c375:	01 f0                	add    eax,esi
c000c377:	89 04 24             	mov    DWORD PTR [esp],eax
c000c37a:	c1 f8 1f             	sar    eax,0x1f
c000c37d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c381:	89 e8                	mov    eax,ebp
c000c383:	0f b6 c0             	movzx  eax,al
c000c386:	8b 0c 85 60 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeaa0]
c000c38d:	83 f8 01             	cmp    eax,0x1
c000c390:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c394:	0f b7 da             	movzx  ebx,dx
c000c397:	76 27                	jbe    c000c3c0 <datetimeToSeconds(datetime_t)+0x8d>
c000c399:	80 e2 03             	and    dl,0x3
c000c39c:	75 22                	jne    c000c3c0 <datetimeToSeconds(datetime_t)+0x8d>
c000c39e:	31 d2                	xor    edx,edx
c000c3a0:	be 64 00 00 00       	mov    esi,0x64
c000c3a5:	89 d8                	mov    eax,ebx
c000c3a7:	f7 f6                	div    esi
c000c3a9:	85 d2                	test   edx,edx
c000c3ab:	75 12                	jne    c000c3bf <datetimeToSeconds(datetime_t)+0x8c>
c000c3ad:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c3b3:	be 90 01 00 00       	mov    esi,0x190
c000c3b8:	99                   	cdq    
c000c3b9:	f7 fe                	idiv   esi
c000c3bb:	85 d2                	test   edx,edx
c000c3bd:	75 01                	jne    c000c3c0 <datetimeToSeconds(datetime_t)+0x8d>
c000c3bf:	41                   	inc    ecx
c000c3c0:	83 fb 46             	cmp    ebx,0x46
c000c3c3:	76 48                	jbe    c000c40d <datetimeToSeconds(datetime_t)+0xda>
c000c3c5:	be 46 00 00 00       	mov    esi,0x46
c000c3ca:	bf 64 00 00 00       	mov    edi,0x64
c000c3cf:	bd 90 01 00 00       	mov    ebp,0x190
c000c3d4:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3da:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3df:	75 23                	jne    c000c404 <datetimeToSeconds(datetime_t)+0xd1>
c000c3e1:	89 f0                	mov    eax,esi
c000c3e3:	99                   	cdq    
c000c3e4:	f7 ff                	idiv   edi
c000c3e6:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3eb:	85 d2                	test   edx,edx
c000c3ed:	75 15                	jne    c000c404 <datetimeToSeconds(datetime_t)+0xd1>
c000c3ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3f5:	99                   	cdq    
c000c3f6:	f7 fd                	idiv   ebp
c000c3f8:	83 fa 01             	cmp    edx,0x1
c000c3fb:	19 c0                	sbb    eax,eax
c000c3fd:	f7 d0                	not    eax
c000c3ff:	05 6e 01 00 00       	add    eax,0x16e
c000c404:	46                   	inc    esi
c000c405:	01 c1                	add    ecx,eax
c000c407:	39 de                	cmp    esi,ebx
c000c409:	7c c9                	jl     c000c3d4 <datetimeToSeconds(datetime_t)+0xa1>
c000c40b:	eb 34                	jmp    c000c441 <datetimeToSeconds(datetime_t)+0x10e>
c000c40d:	74 32                	je     c000c441 <datetimeToSeconds(datetime_t)+0x10e>
c000c40f:	b8 45 00 00 00       	mov    eax,0x45
c000c414:	89 c2                	mov    edx,eax
c000c416:	83 e2 03             	and    edx,0x3
c000c419:	39 d8                	cmp    eax,ebx
c000c41b:	7e 0f                	jle    c000c42c <datetimeToSeconds(datetime_t)+0xf9>
c000c41d:	83 fa 01             	cmp    edx,0x1
c000c420:	19 d2                	sbb    edx,edx
c000c422:	48                   	dec    eax
c000c423:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c42a:	eb e8                	jmp    c000c414 <datetimeToSeconds(datetime_t)+0xe1>
c000c42c:	85 d2                	test   edx,edx
c000c42e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c433:	75 0a                	jne    c000c43f <datetimeToSeconds(datetime_t)+0x10c>
c000c435:	83 fb 01             	cmp    ebx,0x1
c000c438:	19 c0                	sbb    eax,eax
c000c43a:	05 6e 01 00 00       	add    eax,0x16e
c000c43f:	29 c1                	sub    ecx,eax
c000c441:	b8 80 51 01 00       	mov    eax,0x15180
c000c446:	f7 e9                	imul   ecx
c000c448:	03 04 24             	add    eax,DWORD PTR [esp]
c000c44b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c44f:	83 c4 0c             	add    esp,0xc
c000c452:	5b                   	pop    ebx
c000c453:	5e                   	pop    esi
c000c454:	5f                   	pop    edi
c000c455:	5d                   	pop    ebp
c000c456:	c3                   	ret    
c000c457:	90                   	nop

c000c458 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c458:	57                   	push   edi
c000c459:	56                   	push   esi
c000c45a:	53                   	push   ebx
c000c45b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c45f:	8b 06                	mov    eax,DWORD PTR [esi]
c000c461:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c464:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c46c:	e8 c2 fe ff ff       	call   c000c333 <datetimeToSeconds(datetime_t)>
c000c471:	59                   	pop    ecx
c000c472:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c479:	5b                   	pop    ebx
c000c47a:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c480:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c486:	89 cb                	mov    ebx,ecx
c000c488:	c1 fb 1f             	sar    ebx,0x1f
c000c48b:	29 c8                	sub    eax,ecx
c000c48d:	19 da                	sbb    edx,ebx
c000c48f:	31 c9                	xor    ecx,ecx
c000c491:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c498:	74 05                	je     c000c49f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c49a:	b9 08 07 00 00       	mov    ecx,0x708
c000c49f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4a3:	31 db                	xor    ebx,ebx
c000c4a5:	29 c8                	sub    eax,ecx
c000c4a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4ab:	19 da                	sbb    edx,ebx
c000c4ad:	89 f8                	mov    eax,edi
c000c4af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4b3:	5b                   	pop    ebx
c000c4b4:	5e                   	pop    esi
c000c4b5:	5f                   	pop    edi
c000c4b6:	ff e0                	jmp    eax

c000c4b8 <secondsToDatetime(unsigned long long)>:
c000c4b8:	55                   	push   ebp
c000c4b9:	57                   	push   edi
c000c4ba:	56                   	push   esi
c000c4bb:	53                   	push   ebx
c000c4bc:	83 ec 1c             	sub    esp,0x1c
c000c4bf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4cb:	6a 00                	push   0x0
c000c4cd:	68 80 51 01 00       	push   0x15180
c000c4d2:	55                   	push   ebp
c000c4d3:	57                   	push   edi
c000c4d4:	e8 c7 2d 01 00       	call   c001f2a0 <__udivdi3>
c000c4d9:	83 c4 10             	add    esp,0x10
c000c4dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4e0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4e6:	6a 00                	push   0x0
c000c4e8:	68 80 51 01 00       	push   0x15180
c000c4ed:	55                   	push   ebp
c000c4ee:	57                   	push   edi
c000c4ef:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4f4:	e8 a7 2e 01 00       	call   c001f3a0 <__umoddi3>
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	99                   	cdq    
c000c4fd:	f7 ff                	idiv   edi
c000c4ff:	bf 3c 00 00 00       	mov    edi,0x3c
c000c504:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c507:	89 d0                	mov    eax,edx
c000c509:	99                   	cdq    
c000c50a:	f7 ff                	idiv   edi
c000c50c:	85 db                	test   ebx,ebx
c000c50e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c511:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c514:	79 11                	jns    c000c527 <secondsToDatetime(unsigned long long)+0x6f>
c000c516:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c51a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c520:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c525:	eb 07                	jmp    c000c52e <secondsToDatetime(unsigned long long)+0x76>
c000c527:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c52c:	89 d8                	mov    eax,ebx
c000c52e:	99                   	cdq    
c000c52f:	bf b4 05 00 00       	mov    edi,0x5b4
c000c534:	f7 f9                	idiv   ecx
c000c536:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c53b:	31 d2                	xor    edx,edx
c000c53d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c542:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c546:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c54e:	01 c3                	add    ebx,eax
c000c550:	89 d8                	mov    eax,ebx
c000c552:	f7 f1                	div    ecx
c000c554:	31 d2                	xor    edx,edx
c000c556:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c559:	89 d8                	mov    eax,ebx
c000c55b:	f7 f7                	div    edi
c000c55d:	31 d2                	xor    edx,edx
c000c55f:	29 c1                	sub    ecx,eax
c000c561:	89 d8                	mov    eax,ebx
c000c563:	f7 f5                	div    ebp
c000c565:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c56a:	31 d2                	xor    edx,edx
c000c56c:	29 c1                	sub    ecx,eax
c000c56e:	89 c8                	mov    eax,ecx
c000c570:	f7 f5                	div    ebp
c000c572:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c577:	31 d2                	xor    edx,edx
c000c579:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c57d:	89 c8                	mov    eax,ecx
c000c57f:	f7 f5                	div    ebp
c000c581:	31 d2                	xor    edx,edx
c000c583:	01 c3                	add    ebx,eax
c000c585:	89 c8                	mov    eax,ecx
c000c587:	f7 f7                	div    edi
c000c589:	bf 99 00 00 00       	mov    edi,0x99
c000c58e:	31 d2                	xor    edx,edx
c000c590:	29 c3                	sub    ebx,eax
c000c592:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c59a:	29 c3                	sub    ebx,eax
c000c59c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c59f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5a2:	83 c1 02             	add    ecx,0x2
c000c5a5:	89 c8                	mov    eax,ecx
c000c5a7:	bb 05 00 00 00       	mov    ebx,0x5
c000c5ac:	f7 f7                	div    edi
c000c5ae:	31 d2                	xor    edx,edx
c000c5b0:	89 c7                	mov    edi,eax
c000c5b2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5b8:	83 c0 02             	add    eax,0x2
c000c5bb:	f7 f3                	div    ebx
c000c5bd:	89 eb                	mov    ebx,ebp
c000c5bf:	29 c3                	sub    ebx,eax
c000c5c1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5c7:	88 1e                	mov    BYTE PTR [esi],bl
c000c5c9:	19 c0                	sbb    eax,eax
c000c5cb:	31 d2                	xor    edx,edx
c000c5cd:	83 e0 0c             	and    eax,0xc
c000c5d0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5d4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5dc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5e0:	83 f9 01             	cmp    ecx,0x1
c000c5e3:	0f 96 c2             	setbe  dl
c000c5e6:	41                   	inc    ecx
c000c5e7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5ea:	01 d0                	add    eax,edx
c000c5ec:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5f0:	83 c4 1c             	add    esp,0x1c
c000c5f3:	89 f0                	mov    eax,esi
c000c5f5:	5b                   	pop    ebx
c000c5f6:	5e                   	pop    esi
c000c5f7:	5f                   	pop    edi
c000c5f8:	5d                   	pop    ebp
c000c5f9:	c2 04 00             	ret    0x4

c000c5fc <Clock::timeInDatetimeLocal()>:
c000c5fc:	53                   	push   ebx
c000c5fd:	83 ec 14             	sub    esp,0x14
c000c600:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c608:	e8 85 fc ff ff       	call   c000c292 <Clock::timeInSecondsLocal()>
c000c60d:	83 c4 0c             	add    esp,0xc
c000c610:	52                   	push   edx
c000c611:	50                   	push   eax
c000c612:	53                   	push   ebx
c000c613:	e8 a0 fe ff ff       	call   c000c4b8 <secondsToDatetime(unsigned long long)>
c000c618:	89 d8                	mov    eax,ebx
c000c61a:	83 c4 14             	add    esp,0x14
c000c61d:	5b                   	pop    ebx
c000c61e:	c2 04 00             	ret    0x4
c000c621:	90                   	nop

c000c622 <Device::hibernate()>:
c000c622:	c3                   	ret    
c000c623:	90                   	nop

c000c624 <Device::wake()>:
c000c624:	c3                   	ret    
c000c625:	90                   	nop

c000c626 <Device::detect()>:
c000c626:	c3                   	ret    
c000c627:	90                   	nop

c000c628 <Device::disableLegacy()>:
c000c628:	c3                   	ret    
c000c629:	90                   	nop

c000c62a <Device::powerSaving(PowerSavingLevel)>:
c000c62a:	c3                   	ret    
c000c62b:	90                   	nop

c000c62c <DriverlessDevice::close(int, int, void*)>:
c000c62c:	31 c0                	xor    eax,eax
c000c62e:	c3                   	ret    
c000c62f:	90                   	nop

c000c630 <DriverlessDevice::detect()>:
c000c630:	c3                   	ret    
c000c631:	90                   	nop

c000c632 <DriverlessDevice::open(int, int, void*)>:
c000c632:	83 ec 18             	sub    esp,0x18
c000c635:	68 90 15 02 c0       	push   0xc0021590
c000c63a:	e8 a2 4c 00 00       	call   c00112e1 <KePanic(char const*)>
c000c63f:	83 c8 ff             	or     eax,0xffffffff
c000c642:	83 c4 1c             	add    esp,0x1c
c000c645:	c3                   	ret    

c000c646 <Device::~Device()>:
c000c646:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c000c64b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c64f:	89 10                	mov    DWORD PTR [eax],edx
c000c651:	90                   	nop
c000c652:	c3                   	ret    
c000c653:	90                   	nop

c000c654 <Device::~Device()>:
c000c654:	83 ec 0c             	sub    esp,0xc
c000c657:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c65b:	e8 e6 ff ff ff       	call   c000c646 <Device::~Device()>
c000c660:	83 c4 04             	add    esp,0x4
c000c663:	83 ec 08             	sub    esp,0x8
c000c666:	68 58 01 00 00       	push   0x158
c000c66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c66f:	e8 98 e1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c674:	83 c4 10             	add    esp,0x10
c000c677:	83 c4 0c             	add    esp,0xc
c000c67a:	c3                   	ret    
c000c67b:	90                   	nop

c000c67c <Device::findAndLoadDriver()>:
c000c67c:	c7 44 24 04 ae 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215ae
c000c684:	e9 81 e2 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c689:	90                   	nop

c000c68a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c68a:	57                   	push   edi
c000c68b:	b9 09 00 00 00       	mov    ecx,0x9
c000c690:	56                   	push   esi
c000c691:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c695:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c699:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6a3:	81 c7 18 01 00 00    	add    edi,0x118
c000c6a9:	fc                   	cld    
c000c6aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6ac:	5e                   	pop    esi
c000c6ad:	5f                   	pop    edi
c000c6ae:	c3                   	ret    
c000c6af:	90                   	nop

c000c6b0 <Device::preOpenACPI(void*, char*, char*)>:
c000c6b0:	57                   	push   edi
c000c6b1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c6b6:	56                   	push   esi
c000c6b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6c3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6cd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6d3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6db:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6e5:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6ec:	5e                   	pop    esi
c000c6ed:	5f                   	pop    edi
c000c6ee:	c3                   	ret    
c000c6ef:	90                   	nop

c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6f0:	53                   	push   ebx
c000c6f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c701:	0f b6 c0             	movzx  eax,al
c000c704:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c708:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c70c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c710:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c714:	5b                   	pop    ebx
c000c715:	e9 aa 05 00 00       	jmp    c000ccc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c71a <Device::getParent()>:
c000c71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c71e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c724:	c3                   	ret    
c000c725:	90                   	nop

c000c726 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c72a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c72e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c737:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c73b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c73f:	e9 f7 06 00 00       	jmp    c000ce3b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c744 <Device::addChild(Device*)>:
c000c744:	53                   	push   ebx
c000c745:	83 ec 08             	sub    esp,0x8
c000c748:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c74c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c750:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c756:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c75c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c75e:	85 d2                	test   edx,edx
c000c760:	74 04                	je     c000c766 <Device::addChild(Device*)+0x22>
c000c762:	89 d3                	mov    ebx,edx
c000c764:	eb f6                	jmp    c000c75c <Device::addChild(Device*)+0x18>
c000c766:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c769:	83 ec 0c             	sub    esp,0xc
c000c76c:	6a 08                	push   0x8
c000c76e:	e8 60 b3 ff ff       	call   c0007ad3 <malloc>
c000c773:	89 03                	mov    DWORD PTR [ebx],eax
c000c775:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c77b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c782:	83 c4 18             	add    esp,0x18
c000c785:	5b                   	pop    ebx
c000c786:	c3                   	ret    
c000c787:	90                   	nop

c000c788 <Device::removeAllChildren()>:
c000c788:	56                   	push   esi
c000c789:	53                   	push   ebx
c000c78a:	52                   	push   edx
c000c78b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c78f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c795:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c798:	74 17                	je     c000c7b1 <Device::removeAllChildren()+0x29>
c000c79a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c79d:	85 c0                	test   eax,eax
c000c79f:	74 0c                	je     c000c7ad <Device::removeAllChildren()+0x25>
c000c7a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7a3:	83 ec 0c             	sub    esp,0xc
c000c7a6:	50                   	push   eax
c000c7a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7af:	eb e4                	jmp    c000c795 <Device::removeAllChildren()+0xd>
c000c7b1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7bd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7ca:	58                   	pop    eax
c000c7cb:	5b                   	pop    ebx
c000c7cc:	5e                   	pop    esi
c000c7cd:	c3                   	ret    

c000c7ce <Device::hibernateAll()>:
c000c7ce:	53                   	push   ebx
c000c7cf:	83 ec 14             	sub    esp,0x14
c000c7d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7d8:	53                   	push   ebx
c000c7d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7e2:	83 c4 10             	add    esp,0x10
c000c7e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7e8:	74 0f                	je     c000c7f9 <Device::hibernateAll()+0x2b>
c000c7ea:	83 ec 0c             	sub    esp,0xc
c000c7ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7f0:	e8 d9 ff ff ff       	call   c000c7ce <Device::hibernateAll()>
c000c7f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7f7:	eb e9                	jmp    c000c7e2 <Device::hibernateAll()+0x14>
c000c7f9:	83 c4 08             	add    esp,0x8
c000c7fc:	5b                   	pop    ebx
c000c7fd:	c3                   	ret    

c000c7fe <Device::wakeAll()>:
c000c7fe:	53                   	push   ebx
c000c7ff:	83 ec 14             	sub    esp,0x14
c000c802:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c806:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c808:	53                   	push   ebx
c000c809:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c80c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c812:	83 c4 10             	add    esp,0x10
c000c815:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c818:	74 0f                	je     c000c829 <Device::wakeAll()+0x2b>
c000c81a:	83 ec 0c             	sub    esp,0xc
c000c81d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c820:	e8 d9 ff ff ff       	call   c000c7fe <Device::wakeAll()>
c000c825:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c827:	eb e9                	jmp    c000c812 <Device::wakeAll()+0x14>
c000c829:	83 c4 08             	add    esp,0x8
c000c82c:	5b                   	pop    ebx
c000c82d:	c3                   	ret    

c000c82e <Device::detectAll()>:
c000c82e:	53                   	push   ebx
c000c82f:	83 ec 14             	sub    esp,0x14
c000c832:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c836:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c838:	53                   	push   ebx
c000c839:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c83c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c848:	74 0f                	je     c000c859 <Device::detectAll()+0x2b>
c000c84a:	83 ec 0c             	sub    esp,0xc
c000c84d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c850:	e8 d9 ff ff ff       	call   c000c82e <Device::detectAll()>
c000c855:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c857:	eb e9                	jmp    c000c842 <Device::detectAll()+0x14>
c000c859:	83 c4 08             	add    esp,0x8
c000c85c:	5b                   	pop    ebx
c000c85d:	c3                   	ret    

c000c85e <Device::disableLegacyAll()>:
c000c85e:	c3                   	ret    
c000c85f:	90                   	nop

c000c860 <Device::loadDriversForAll()>:
c000c860:	c3                   	ret    
c000c861:	90                   	nop

c000c862 <Device::closeAll()>:
c000c862:	53                   	push   ebx
c000c863:	83 ec 08             	sub    esp,0x8
c000c866:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c86a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c86c:	6a 00                	push   0x0
c000c86e:	6a 00                	push   0x0
c000c870:	6a 00                	push   0x0
c000c872:	53                   	push   ebx
c000c873:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c876:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c87c:	83 c4 10             	add    esp,0x10
c000c87f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c882:	74 0f                	je     c000c893 <Device::closeAll()+0x31>
c000c884:	83 ec 0c             	sub    esp,0xc
c000c887:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c88a:	e8 d3 ff ff ff       	call   c000c862 <Device::closeAll()>
c000c88f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c891:	eb e9                	jmp    c000c87c <Device::closeAll()+0x1a>
c000c893:	83 c4 08             	add    esp,0x8
c000c896:	5b                   	pop    ebx
c000c897:	c3                   	ret    

c000c898 <Device::powerSavingAll(PowerSavingLevel)>:
c000c898:	56                   	push   esi
c000c899:	53                   	push   ebx
c000c89a:	83 ec 0c             	sub    esp,0xc
c000c89d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8a1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8a7:	56                   	push   esi
c000c8a8:	53                   	push   ebx
c000c8a9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8ac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8b2:	83 c4 10             	add    esp,0x10
c000c8b5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8b8:	74 0f                	je     c000c8c9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8ba:	52                   	push   edx
c000c8bb:	52                   	push   edx
c000c8bc:	56                   	push   esi
c000c8bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8c0:	e8 d3 ff ff ff       	call   c000c898 <Device::powerSavingAll(PowerSavingLevel)>
c000c8c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8c7:	eb e9                	jmp    c000c8b2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8c9:	58                   	pop    eax
c000c8ca:	5b                   	pop    ebx
c000c8cb:	5e                   	pop    esi
c000c8cc:	c3                   	ret    
c000c8cd:	90                   	nop

c000c8ce <Device::setName(char const*)>:
c000c8ce:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8d6:	e9 75 3d ff ff       	jmp    c0000650 <strcpy>
c000c8db:	90                   	nop

c000c8dc <Device::Device(char const*)>:
c000c8dc:	83 ec 1c             	sub    esp,0x1c
c000c8df:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c000c8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e8:	89 10                	mov    DWORD PTR [eax],edx
c000c8ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ee:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8fc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c90a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c918:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c922:	83 ec 08             	sub    esp,0x8
c000c925:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c929:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c92d:	e8 9c ff ff ff       	call   c000c8ce <Device::setName(char const*)>
c000c932:	83 c4 10             	add    esp,0x10
c000c935:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c93d:	83 ec 0c             	sub    esp,0xc
c000c940:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c944:	e8 8a b1 ff ff       	call   c0007ad3 <malloc>
c000c949:	83 c4 10             	add    esp,0x10
c000c94c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c952:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c959:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c95d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c967:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c96d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c973:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c977:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c97d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c988:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c993:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9d2:	90                   	nop
c000c9d3:	83 c4 1c             	add    esp,0x1c
c000c9d6:	c3                   	ret    
c000c9d7:	90                   	nop

c000c9d8 <Device::getName()>:
c000c9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9dc:	05 d0 00 00 00       	add    eax,0xd0
c000c9e1:	c3                   	ret    

c000c9e2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9e2:	83 ec 0c             	sub    esp,0xc
c000c9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e9:	83 ec 08             	sub    esp,0x8
c000c9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f0:	50                   	push   eax
c000c9f1:	e8 e6 fe ff ff       	call   c000c8dc <Device::Device(char const*)>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	ba 1c 16 02 c0       	mov    edx,0xc002161c
c000c9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca02:	89 10                	mov    DWORD PTR [eax],edx
c000ca04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca08:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca12:	90                   	nop
c000ca13:	83 c4 0c             	add    esp,0xc
c000ca16:	c3                   	ret    
c000ca17:	90                   	nop

c000ca18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca18:	57                   	push   edi
c000ca19:	56                   	push   esi
c000ca1a:	53                   	push   ebx
c000ca1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca27:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca2d:	75 0c                	jne    c000ca3b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca2f:	52                   	push   edx
c000ca30:	52                   	push   edx
c000ca31:	53                   	push   ebx
c000ca32:	56                   	push   esi
c000ca33:	e8 1a 2d 01 00       	call   c001f752 <LinkedList<Device>::addElement(Device*)>
c000ca38:	83 c4 10             	add    esp,0x10
c000ca3b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca44:	74 12                	je     c000ca58 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca46:	50                   	push   eax
c000ca47:	57                   	push   edi
c000ca48:	56                   	push   esi
c000ca49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca4c:	e8 c7 ff ff ff       	call   c000ca18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca53:	83 c4 10             	add    esp,0x10
c000ca56:	eb e9                	jmp    c000ca41 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca58:	5b                   	pop    ebx
c000ca59:	5e                   	pop    esi
c000ca5a:	5f                   	pop    edi
c000ca5b:	c3                   	ret    

c000ca5c <getDevicesOfType(DeviceType)>:
c000ca5c:	53                   	push   ebx
c000ca5d:	83 ec 14             	sub    esp,0x14
c000ca60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca64:	53                   	push   ebx
c000ca65:	e8 c4 2d 01 00       	call   c001f82e <LinkedList<Device>::LinkedList()>
c000ca6a:	83 c4 0c             	add    esp,0xc
c000ca6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca71:	53                   	push   ebx
c000ca72:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca78:	e8 9b ff ff ff       	call   c000ca18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca7d:	83 c4 18             	add    esp,0x18
c000ca80:	89 d8                	mov    eax,ebx
c000ca82:	5b                   	pop    ebx
c000ca83:	c2 04 00             	ret    0x4
c000ca86:	66 90                	xchg   ax,ax

c000ca88 <HardDiskController::HardDiskController(char const*)>:
c000ca88:	83 ec 0c             	sub    esp,0xc
c000ca8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8f:	83 ec 08             	sub    esp,0x8
c000ca92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca96:	50                   	push   eax
c000ca97:	e8 40 fe ff ff       	call   c000c8dc <Device::Device(char const*)>
c000ca9c:	83 c4 10             	add    esp,0x10
c000ca9f:	ba 48 16 02 c0       	mov    edx,0xc0021648
c000caa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa8:	89 10                	mov    DWORD PTR [eax],edx
c000caaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cab8:	90                   	nop
c000cab9:	83 c4 0c             	add    esp,0xc
c000cabc:	c3                   	ret    
c000cabd:	90                   	nop
c000cabe:	66 90                	xchg   ax,ax

c000cac0 <HardDiskController::~HardDiskController()>:
c000cac0:	83 ec 0c             	sub    esp,0xc
c000cac3:	ba 48 16 02 c0       	mov    edx,0xc0021648
c000cac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cacc:	89 10                	mov    DWORD PTR [eax],edx
c000cace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad2:	83 ec 0c             	sub    esp,0xc
c000cad5:	50                   	push   eax
c000cad6:	e8 6b fb ff ff       	call   c000c646 <Device::~Device()>
c000cadb:	83 c4 10             	add    esp,0x10
c000cade:	90                   	nop
c000cadf:	83 c4 0c             	add    esp,0xc
c000cae2:	c3                   	ret    
c000cae3:	90                   	nop

c000cae4 <HardDiskController::~HardDiskController()>:
c000cae4:	83 ec 0c             	sub    esp,0xc
c000cae7:	83 ec 0c             	sub    esp,0xc
c000caea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caee:	e8 cd ff ff ff       	call   c000cac0 <HardDiskController::~HardDiskController()>
c000caf3:	83 c4 10             	add    esp,0x10
c000caf6:	83 ec 08             	sub    esp,0x8
c000caf9:	68 58 01 00 00       	push   0x158
c000cafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb02:	e8 05 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cb07:	83 c4 10             	add    esp,0x10
c000cb0a:	83 c4 0c             	add    esp,0xc
c000cb0d:	c3                   	ret    

c000cb0e <PhysicalDisk::eject()>:
c000cb0e:	83 c8 ff             	or     eax,0xffffffff
c000cb11:	c3                   	ret    

c000cb12 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb12:	83 ec 0c             	sub    esp,0xc
c000cb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb19:	83 ec 08             	sub    esp,0x8
c000cb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb20:	50                   	push   eax
c000cb21:	e8 b6 fd ff ff       	call   c000c8dc <Device::Device(char const*)>
c000cb26:	83 c4 10             	add    esp,0x10
c000cb29:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000cb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb32:	89 10                	mov    DWORD PTR [eax],edx
c000cb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb38:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb43:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb74:	90                   	nop
c000cb75:	83 c4 0c             	add    esp,0xc
c000cb78:	c3                   	ret    
c000cb79:	90                   	nop

c000cb7a <PhysicalDisk::startCache()>:
c000cb7a:	56                   	push   esi
c000cb7b:	53                   	push   ebx
c000cb7c:	83 ec 10             	sub    esp,0x10
c000cb7f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb83:	6a 44                	push   0x44
c000cb85:	e8 49 af ff ff       	call   c0007ad3 <malloc>
c000cb8a:	89 c6                	mov    esi,eax
c000cb8c:	58                   	pop    eax
c000cb8d:	5a                   	pop    edx
c000cb8e:	53                   	push   ebx
c000cb8f:	56                   	push   esi
c000cb90:	e8 83 17 00 00       	call   c000e318 <VCache::VCache(PhysicalDisk*)>
c000cb95:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb9b:	83 c4 14             	add    esp,0x14
c000cb9e:	5b                   	pop    ebx
c000cb9f:	5e                   	pop    esi
c000cba0:	c3                   	ret    
c000cba1:	90                   	nop

c000cba2 <PhysicalDisk::~PhysicalDisk()>:
c000cba2:	83 ec 0c             	sub    esp,0xc
c000cba5:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000cbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbae:	89 10                	mov    DWORD PTR [eax],edx
c000cbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb4:	83 ec 0c             	sub    esp,0xc
c000cbb7:	50                   	push   eax
c000cbb8:	e8 89 fa ff ff       	call   c000c646 <Device::~Device()>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	90                   	nop
c000cbc1:	83 c4 0c             	add    esp,0xc
c000cbc4:	c3                   	ret    
c000cbc5:	90                   	nop

c000cbc6 <PhysicalDisk::~PhysicalDisk()>:
c000cbc6:	83 ec 0c             	sub    esp,0xc
c000cbc9:	83 ec 0c             	sub    esp,0xc
c000cbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbd0:	e8 cd ff ff ff       	call   c000cba2 <PhysicalDisk::~PhysicalDisk()>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	83 ec 08             	sub    esp,0x8
c000cbdb:	68 6c 01 00 00       	push   0x16c
c000cbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe4:	e8 23 dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	83 c4 0c             	add    esp,0xc
c000cbef:	c3                   	ret    

c000cbf0 <int_handler>:
c000cbf0:	55                   	push   ebp
c000cbf1:	57                   	push   edi
c000cbf2:	56                   	push   esi
c000cbf3:	53                   	push   ebx
c000cbf4:	83 ec 0c             	sub    esp,0xc
c000cbf7:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbfe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cc02:	74 0b                	je     c000cc0f <int_handler+0x1f>
c000cc04:	fa                   	cli    
c000cc05:	f4                   	hlt    
c000cc06:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc0d:	75 f5                	jne    c000cc04 <int_handler+0x14>
c000cc0f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc12:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc15:	83 f8 17             	cmp    eax,0x17
c000cc18:	76 40                	jbe    c000cc5a <int_handler+0x6a>
c000cc1a:	c1 e6 04             	shl    esi,0x4
c000cc1d:	31 db                	xor    ebx,ebx
c000cc1f:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc25:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc2b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc2f:	85 c0                	test   eax,eax
c000cc31:	74 13                	je     c000cc46 <int_handler+0x56>
c000cc33:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc37:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc3a:	74 2c                	je     c000cc68 <int_handler+0x78>
c000cc3c:	83 ec 08             	sub    esp,0x8
c000cc3f:	52                   	push   edx
c000cc40:	57                   	push   edi
c000cc41:	ff d0                	call   eax
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	83 c3 01             	add    ebx,0x1
c000cc49:	83 fb 04             	cmp    ebx,0x4
c000cc4c:	75 dd                	jne    c000cc2b <int_handler+0x3b>
c000cc4e:	83 c4 0c             	add    esp,0xc
c000cc51:	31 c0                	xor    eax,eax
c000cc53:	5b                   	pop    ebx
c000cc54:	31 d2                	xor    edx,edx
c000cc56:	5e                   	pop    esi
c000cc57:	5f                   	pop    edi
c000cc58:	5d                   	pop    ebp
c000cc59:	c3                   	ret    
c000cc5a:	83 ec 0c             	sub    esp,0xc
c000cc5d:	50                   	push   eax
c000cc5e:	e8 2f b2 00 00       	call   c0017e92 <HalEndOfInterrupt(int)>
c000cc63:	83 c4 10             	add    esp,0x10
c000cc66:	eb b2                	jmp    c000cc1a <int_handler+0x2a>
c000cc68:	83 ec 08             	sub    esp,0x8
c000cc6b:	52                   	push   edx
c000cc6c:	57                   	push   edi
c000cc6d:	ff d0                	call   eax
c000cc6f:	83 c4 10             	add    esp,0x10
c000cc72:	83 c4 0c             	add    esp,0xc
c000cc75:	5b                   	pop    ebx
c000cc76:	5e                   	pop    esi
c000cc77:	5f                   	pop    edi
c000cc78:	5d                   	pop    ebp
c000cc79:	c3                   	ret    

c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc7a:	56                   	push   esi
c000cc7b:	31 c0                	xor    eax,eax
c000cc7d:	53                   	push   ebx
c000cc7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc8a:	89 ca                	mov    edx,ecx
c000cc8c:	c1 e2 04             	shl    edx,0x4
c000cc8f:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc97:	74 17                	je     c000ccb0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc99:	83 c0 01             	add    eax,0x1
c000cc9c:	83 f8 04             	cmp    eax,0x4
c000cc9f:	75 ee                	jne    c000cc8f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cca1:	c7 44 24 0c a4 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc00216a4
c000cca9:	5b                   	pop    ebx
c000ccaa:	5e                   	pop    esi
c000ccab:	e9 31 46 00 00       	jmp    c00112e1 <KePanic(char const*)>
c000ccb0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccb3:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000ccba:	5b                   	pop    ebx
c000ccbb:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000ccc2:	5e                   	pop    esi
c000ccc3:	c3                   	ret    

c000ccc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ccc4:	55                   	push   ebp
c000ccc5:	57                   	push   edi
c000ccc6:	56                   	push   esi
c000ccc7:	53                   	push   ebx
c000ccc8:	83 ec 0c             	sub    esp,0xc
c000cccb:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccd1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccd9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cce0:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cce3:	74 57                	je     c000cd3c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cce5:	84 c0                	test   al,al
c000cce7:	89 c7                	mov    edi,eax
c000cce9:	74 1d                	je     c000cd08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cceb:	83 fe 0f             	cmp    esi,0xf
c000ccee:	0f 8f d9 00 00 00    	jg     c000cdcd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000ccf4:	0f b6 b6 a8 31 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdce58]
c000ccfb:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd03:	d1 ef                	shr    edi,1
c000cd05:	83 e7 01             	and    edi,0x1
c000cd08:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd0d:	83 ec 08             	sub    esp,0x8
c000cd10:	31 db                	xor    ebx,ebx
c000cd12:	50                   	push   eax
c000cd13:	68 b1 16 02 c0       	push   0xc00216b1
c000cd18:	e8 ed db ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cd1d:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd22:	83 c4 10             	add    esp,0x10
c000cd25:	85 c0                	test   eax,eax
c000cd27:	7f 59                	jg     c000cd82 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cd29:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd2c:	83 ec 0c             	sub    esp,0xc
c000cd2f:	68 c8 16 02 c0       	push   0xc00216c8
c000cd34:	e8 a8 45 00 00       	call   c00112e1 <KePanic(char const*)>
c000cd39:	83 c4 10             	add    esp,0x10
c000cd3c:	89 e8                	mov    eax,ebp
c000cd3e:	31 d2                	xor    edx,edx
c000cd40:	c1 e0 04             	shl    eax,0x4
c000cd43:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd4a:	85 c9                	test   ecx,ecx
c000cd4c:	0f 84 92 00 00 00    	je     c000cde4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cd52:	83 c2 01             	add    edx,0x1
c000cd55:	83 fa 04             	cmp    edx,0x4
c000cd58:	75 e9                	jne    c000cd43 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cd5a:	83 ec 0c             	sub    esp,0xc
c000cd5d:	68 1c 17 02 c0       	push   0xc002171c
c000cd62:	e8 7a 45 00 00       	call   c00112e1 <KePanic(char const*)>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	5b                   	pop    ebx
c000cd73:	5e                   	pop    esi
c000cd74:	5f                   	pop    edi
c000cd75:	5d                   	pop    ebp
c000cd76:	c3                   	ret    
c000cd77:	83 c3 01             	add    ebx,0x1
c000cd7a:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd80:	7e a7                	jle    c000cd29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cd82:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd89:	83 ec 08             	sub    esp,0x8
c000cd8c:	56                   	push   esi
c000cd8d:	55                   	push   ebp
c000cd8e:	e8 e9 18 01 00       	call   c001e67c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd93:	83 c4 10             	add    esp,0x10
c000cd96:	84 c0                	test   al,al
c000cd98:	74 dd                	je     c000cd77 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd9a:	89 f8                	mov    eax,edi
c000cd9c:	83 ec 04             	sub    esp,0x4
c000cd9f:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cda6:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cda9:	0f b6 f8             	movzx  edi,al
c000cdac:	57                   	push   edi
c000cdad:	89 e8                	mov    eax,ebp
c000cdaf:	6a 00                	push   0x0
c000cdb1:	0f b6 c0             	movzx  eax,al
c000cdb4:	50                   	push   eax
c000cdb5:	89 f0                	mov    eax,esi
c000cdb7:	6a 00                	push   0x0
c000cdb9:	0f b6 c0             	movzx  eax,al
c000cdbc:	6a 00                	push   0x0
c000cdbe:	50                   	push   eax
c000cdbf:	53                   	push   ebx
c000cdc0:	e8 23 1a 01 00       	call   c001e7e8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cdc5:	83 c4 20             	add    esp,0x20
c000cdc8:	e9 6f ff ff ff       	jmp    c000cd3c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cdcd:	83 ec 0c             	sub    esp,0xc
c000cdd0:	31 ff                	xor    edi,edi
c000cdd2:	68 e4 16 02 c0       	push   0xc00216e4
c000cdd7:	e8 05 45 00 00       	call   c00112e1 <KePanic(char const*)>
c000cddc:	83 c4 10             	add    esp,0x10
c000cddf:	e9 24 ff ff ff       	jmp    c000cd08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cde4:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cde7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cdeb:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdf2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cdf6:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cdfd:	83 c4 0c             	add    esp,0xc
c000ce00:	89 f0                	mov    eax,esi
c000ce02:	5b                   	pop    ebx
c000ce03:	5e                   	pop    esi
c000ce04:	5f                   	pop    edi
c000ce05:	5d                   	pop    ebp
c000ce06:	c3                   	ret    

c000ce07 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ce07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce0f:	c1 e0 04             	shl    eax,0x4
c000ce12:	8d 50 10             	lea    edx,[eax+0x10]
c000ce15:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce1b:	74 08                	je     c000ce25 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce1d:	83 c0 04             	add    eax,0x4
c000ce20:	39 d0                	cmp    eax,edx
c000ce22:	75 f1                	jne    c000ce15 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce24:	c3                   	ret    
c000ce25:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce2f:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce39:	eb e2                	jmp    c000ce1d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce3b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce3b:	56                   	push   esi
c000ce3c:	53                   	push   ebx
c000ce3d:	83 ec 04             	sub    esp,0x4
c000ce40:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce4d:	74 0e                	je     c000ce5d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce4f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce54:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce5b:	75 34                	jne    c000ce91 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ce5d:	8d 43 20             	lea    eax,[ebx+0x20]
c000ce60:	c1 e0 04             	shl    eax,0x4
c000ce63:	8d 50 10             	lea    edx,[eax+0x10]
c000ce66:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000ce6c:	74 0d                	je     c000ce7b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ce6e:	83 c0 04             	add    eax,0x4
c000ce71:	39 d0                	cmp    eax,edx
c000ce73:	75 f1                	jne    c000ce66 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ce75:	83 c4 04             	add    esp,0x4
c000ce78:	5b                   	pop    ebx
c000ce79:	5e                   	pop    esi
c000ce7a:	c3                   	ret    
c000ce7b:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce85:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce8f:	eb dd                	jmp    c000ce6e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000ce91:	83 fb 0f             	cmp    ebx,0xf
c000ce94:	7f 09                	jg     c000ce9f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000ce96:	0f b6 9b a8 31 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdce58]
c000ce9d:	eb be                	jmp    c000ce5d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce9f:	83 ec 0c             	sub    esp,0xc
c000cea2:	68 d5 16 02 c0       	push   0xc00216d5
c000cea7:	e8 35 44 00 00       	call   c00112e1 <KePanic(char const*)>
c000ceac:	83 c4 10             	add    esp,0x10
c000ceaf:	eb ac                	jmp    c000ce5d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ceb1 <setupINTS()>:
c000ceb1:	31 c0                	xor    eax,eax
c000ceb3:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cebd:	83 c0 10             	add    eax,0x10
c000cec0:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000ceca:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000ced4:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cede:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cee8:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000cef2:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cefc:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cf06:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf0b:	75 a6                	jne    c000ceb3 <setupINTS()+0x2>
c000cf0d:	c3                   	ret    

c000cf0e <convertLegacyIRQNumber(int)>:
c000cf0e:	83 ec 0c             	sub    esp,0xc
c000cf11:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf1b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf22:	74 0c                	je     c000cf30 <convertLegacyIRQNumber(int)+0x22>
c000cf24:	83 f8 0f             	cmp    eax,0xf
c000cf27:	7f 0b                	jg     c000cf34 <convertLegacyIRQNumber(int)+0x26>
c000cf29:	0f b6 80 a8 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce58]
c000cf30:	83 c4 0c             	add    esp,0xc
c000cf33:	c3                   	ret    
c000cf34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	68 e4 16 02 c0       	push   0xc00216e4
c000cf40:	e8 9c 43 00 00       	call   c00112e1 <KePanic(char const*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf4c:	83 c4 0c             	add    esp,0xc
c000cf4f:	c3                   	ret    

c000cf50 <startGUI(void*)>:
c000cf50:	55                   	push   ebp
c000cf51:	89 e5                	mov    ebp,esp
c000cf53:	53                   	push   ebx
c000cf54:	83 ec 04             	sub    esp,0x4
c000cf57:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf5c:	83 e8 01             	sub    eax,0x1
c000cf5f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf64:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf69:	85 c0                	test   eax,eax
c000cf6b:	75 01                	jne    c000cf6e <startGUI(void*)+0x1e>
c000cf6d:	fb                   	sti    
c000cf6e:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf74:	83 ec 08             	sub    esp,0x8
c000cf77:	6a 01                	push   0x1
c000cf79:	68 41 17 02 c0       	push   0xc0021741
c000cf7e:	e8 f1 81 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	83 ec 08             	sub    esp,0x8
c000cf89:	53                   	push   ebx
c000cf8a:	50                   	push   eax
c000cf8b:	e8 24 84 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf99:	83 ec 08             	sub    esp,0x8
c000cf9c:	6a 01                	push   0x1
c000cf9e:	68 5b 17 02 c0       	push   0xc002175b
c000cfa3:	e8 cc 81 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c000cfa8:	83 c4 10             	add    esp,0x10
c000cfab:	83 ec 08             	sub    esp,0x8
c000cfae:	53                   	push   ebx
c000cfaf:	50                   	push   eax
c000cfb0:	e8 ff 83 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	90                   	nop
c000cfb9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfbc:	c9                   	leave  
c000cfbd:	c3                   	ret    

c000cfbe <startGUIVESA(void*)>:
c000cfbe:	55                   	push   ebp
c000cfbf:	89 e5                	mov    ebp,esp
c000cfc1:	53                   	push   ebx
c000cfc2:	83 ec 04             	sub    esp,0x4
c000cfc5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfca:	83 e8 01             	sub    eax,0x1
c000cfcd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfd2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfd7:	85 c0                	test   eax,eax
c000cfd9:	75 01                	jne    c000cfdc <startGUIVESA(void*)+0x1e>
c000cfdb:	fb                   	sti    
c000cfdc:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfe2:	83 ec 08             	sub    esp,0x8
c000cfe5:	6a 01                	push   0x1
c000cfe7:	68 79 17 02 c0       	push   0xc0021779
c000cfec:	e8 83 81 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c000cff1:	83 c4 10             	add    esp,0x10
c000cff4:	83 ec 08             	sub    esp,0x8
c000cff7:	53                   	push   ebx
c000cff8:	50                   	push   eax
c000cff9:	e8 b6 83 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c000cffe:	83 c4 10             	add    esp,0x10
c000d001:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d007:	83 ec 08             	sub    esp,0x8
c000d00a:	6a 01                	push   0x1
c000d00c:	68 5b 17 02 c0       	push   0xc002175b
c000d011:	e8 5e 81 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c000d016:	83 c4 10             	add    esp,0x10
c000d019:	83 ec 08             	sub    esp,0x8
c000d01c:	53                   	push   ebx
c000d01d:	50                   	push   eax
c000d01e:	e8 91 83 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c000d023:	83 c4 10             	add    esp,0x10
c000d026:	90                   	nop
c000d027:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d02a:	c9                   	leave  
c000d02b:	c3                   	ret    

c000d02c <sendKeyToTerminal(unsigned char)>:
c000d02c:	55                   	push   ebp
c000d02d:	89 e5                	mov    ebp,esp
c000d02f:	83 ec 28             	sub    esp,0x28
c000d032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d035:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d038:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d03d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d041:	83 ec 08             	sub    esp,0x8
c000d044:	52                   	push   edx
c000d045:	50                   	push   eax
c000d046:	e8 71 bd ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d052:	83 f8 0a             	cmp    eax,0xa
c000d055:	74 16                	je     c000d06d <sendKeyToTerminal(unsigned char)+0x41>
c000d057:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d05b:	83 f8 03             	cmp    eax,0x3
c000d05e:	74 0d                	je     c000d06d <sendKeyToTerminal(unsigned char)+0x41>
c000d060:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d064:	83 f8 1c             	cmp    eax,0x1c
c000d067:	0f 85 97 00 00 00    	jne    c000d104 <sendKeyToTerminal(unsigned char)+0xd8>
c000d06d:	fa                   	cli    
c000d06e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d073:	83 c0 01             	add    eax,0x1
c000d076:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d07b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d080:	83 c0 01             	add    eax,0x1
c000d083:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d088:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d08d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d090:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d09a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d09e:	74 1f                	je     c000d0bf <sendKeyToTerminal(unsigned char)+0x93>
c000d0a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0af:	83 ec 0c             	sub    esp,0xc
c000d0b2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0b5:	e8 1e 90 00 00       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c000d0ba:	83 c4 10             	add    esp,0x10
c000d0bd:	eb db                	jmp    c000d09a <sendKeyToTerminal(unsigned char)+0x6e>
c000d0bf:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0c4:	83 e8 01             	sub    eax,0x1
c000d0c7:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0cc:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0d1:	85 c0                	test   eax,eax
c000d0d3:	75 18                	jne    c000d0ed <sendKeyToTerminal(unsigned char)+0xc1>
c000d0d5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0da:	85 c0                	test   eax,eax
c000d0dc:	74 0f                	je     c000d0ed <sendKeyToTerminal(unsigned char)+0xc1>
c000d0de:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0e8:	e8 f3 8a 00 00       	call   c0015be0 <schedule()>
c000d0ed:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0f2:	83 e8 01             	sub    eax,0x1
c000d0f5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0fa:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0ff:	85 c0                	test   eax,eax
c000d101:	75 01                	jne    c000d104 <sendKeyToTerminal(unsigned char)+0xd8>
c000d103:	fb                   	sti    
c000d104:	90                   	nop
c000d105:	c9                   	leave  
c000d106:	c3                   	ret    

c000d107 <sendKeyboardToken(KeyboardToken)>:
c000d107:	55                   	push   ebp
c000d108:	89 e5                	mov    ebp,esp
c000d10a:	83 ec 18             	sub    esp,0x18
c000d10d:	e8 1f 42 00 00       	call   c0011331 <KeUserIOReceived()>
c000d112:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d118:	0f b7 c0             	movzx  eax,ax
c000d11b:	83 f2 01             	xor    edx,0x1
c000d11e:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d124:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d129:	85 c0                	test   eax,eax
c000d12b:	74 24                	je     c000d151 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d12d:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d133:	83 ec 04             	sub    esp,0x4
c000d136:	68 40 84 02 c0       	push   0xc0028440
c000d13b:	83 ec 08             	sub    esp,0x8
c000d13e:	89 e0                	mov    eax,esp
c000d140:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d143:	89 08                	mov    DWORD PTR [eax],ecx
c000d145:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d148:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d14c:	ff d2                	call   edx
c000d14e:	83 c4 10             	add    esp,0x10
c000d151:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d155:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d158:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d15d:	0f b6 d2             	movzx  edx,dl
c000d160:	0f b6 c0             	movzx  eax,al
c000d163:	39 c2                	cmp    edx,eax
c000d165:	74 1c                	je     c000d183 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d167:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d16a:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d16f:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d174:	0f b6 c0             	movzx  eax,al
c000d177:	83 ec 0c             	sub    esp,0xc
c000d17a:	50                   	push   eax
c000d17b:	e8 98 b3 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d180:	83 c4 10             	add    esp,0x10
c000d183:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d186:	0f b6 c0             	movzx  eax,al
c000d189:	85 c0                	test   eax,eax
c000d18b:	0f 84 da 00 00 00    	je     c000d26b <sendKeyboardToken(KeyboardToken)+0x164>
c000d191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d194:	0f b7 c0             	movzx  eax,ax
c000d197:	3d 18 03 00 00       	cmp    eax,0x318
c000d19c:	75 06                	jne    c000d1a4 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d19e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a7:	0f b7 c0             	movzx  eax,ax
c000d1aa:	3d 19 03 00 00       	cmp    eax,0x319
c000d1af:	75 06                	jne    c000d1b7 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1b1:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ba:	0f b7 c0             	movzx  eax,ax
c000d1bd:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1c2:	75 06                	jne    c000d1ca <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1c4:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cd:	0f b7 c0             	movzx  eax,ax
c000d1d0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1d5:	75 06                	jne    c000d1dd <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1d7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e0:	0f b7 c0             	movzx  eax,ax
c000d1e3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1e8:	75 06                	jne    c000d1f0 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1ea:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f3:	0f b7 c0             	movzx  eax,ax
c000d1f6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1fb:	75 06                	jne    c000d203 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1fd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d206:	0f b7 c0             	movzx  eax,ax
c000d209:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d20e:	75 06                	jne    c000d216 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d210:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d219:	0f b7 c0             	movzx  eax,ax
c000d21c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d221:	75 06                	jne    c000d229 <sendKeyboardToken(KeyboardToken)+0x122>
c000d223:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22c:	0f b7 c0             	movzx  eax,ax
c000d22f:	3d 20 03 00 00       	cmp    eax,0x320
c000d234:	75 06                	jne    c000d23c <sendKeyboardToken(KeyboardToken)+0x135>
c000d236:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d23c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d23f:	0f b7 c0             	movzx  eax,ax
c000d242:	3d 21 03 00 00       	cmp    eax,0x321
c000d247:	75 06                	jne    c000d24f <sendKeyboardToken(KeyboardToken)+0x148>
c000d249:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d24f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d252:	0f b7 c0             	movzx  eax,ax
c000d255:	3d 22 03 00 00       	cmp    eax,0x322
c000d25a:	0f 85 f1 00 00 00    	jne    c000d351 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d260:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d266:	e9 e6 00 00 00       	jmp    c000d351 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d26b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26e:	0f b7 c0             	movzx  eax,ax
c000d271:	3d 18 03 00 00       	cmp    eax,0x318
c000d276:	75 0a                	jne    c000d282 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d278:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d27e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d285:	0f b7 c0             	movzx  eax,ax
c000d288:	3d 19 03 00 00       	cmp    eax,0x319
c000d28d:	75 0a                	jne    c000d299 <sendKeyboardToken(KeyboardToken)+0x192>
c000d28f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d295:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d29c:	0f b7 c0             	movzx  eax,ax
c000d29f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2a4:	75 0a                	jne    c000d2b0 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2a6:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b3:	0f b7 c0             	movzx  eax,ax
c000d2b6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2bb:	75 0a                	jne    c000d2c7 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2bd:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ca:	0f b7 c0             	movzx  eax,ax
c000d2cd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2d2:	75 0a                	jne    c000d2de <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2d4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e1:	0f b7 c0             	movzx  eax,ax
c000d2e4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2e9:	75 0a                	jne    c000d2f5 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f8:	0f b7 c0             	movzx  eax,ax
c000d2fb:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d300:	75 0a                	jne    c000d30c <sendKeyboardToken(KeyboardToken)+0x205>
c000d302:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d308:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d30f:	0f b7 c0             	movzx  eax,ax
c000d312:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d317:	75 0a                	jne    c000d323 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d319:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d31f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d326:	0f b7 c0             	movzx  eax,ax
c000d329:	3d 20 03 00 00       	cmp    eax,0x320
c000d32e:	75 0a                	jne    c000d33a <sendKeyboardToken(KeyboardToken)+0x233>
c000d330:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d336:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d33d:	0f b7 c0             	movzx  eax,ax
c000d340:	3d 21 03 00 00       	cmp    eax,0x321
c000d345:	75 0a                	jne    c000d351 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d347:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d34d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d354:	0f b7 c0             	movzx  eax,ax
c000d357:	3d 00 02 00 00       	cmp    eax,0x200
c000d35c:	75 2f                	jne    c000d38d <sendKeyboardToken(KeyboardToken)+0x286>
c000d35e:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d363:	83 f0 01             	xor    eax,0x1
c000d366:	0f b6 c0             	movzx  eax,al
c000d369:	85 c0                	test   eax,eax
c000d36b:	74 20                	je     c000d38d <sendKeyboardToken(KeyboardToken)+0x286>
c000d36d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d372:	6a 01                	push   0x1
c000d374:	6a 00                	push   0x0
c000d376:	68 50 cf 00 c0       	push   0xc000cf50
c000d37b:	50                   	push   eax
c000d37c:	e8 13 86 00 00       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c000d381:	83 c4 10             	add    esp,0x10
c000d384:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d38b:	eb 3a                	jmp    c000d3c7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d390:	0f b7 c0             	movzx  eax,ax
c000d393:	3d 01 02 00 00       	cmp    eax,0x201
c000d398:	75 2d                	jne    c000d3c7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d39a:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d39f:	83 f0 01             	xor    eax,0x1
c000d3a2:	0f b6 c0             	movzx  eax,al
c000d3a5:	85 c0                	test   eax,eax
c000d3a7:	74 1e                	je     c000d3c7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3a9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3ae:	6a 01                	push   0x1
c000d3b0:	6a 00                	push   0x0
c000d3b2:	68 be cf 00 c0       	push   0xc000cfbe
c000d3b7:	50                   	push   eax
c000d3b8:	e8 d7 85 00 00       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ca:	0f b7 c0             	movzx  eax,ax
c000d3cd:	3d 25 03 00 00       	cmp    eax,0x325
c000d3d2:	75 06                	jne    c000d3da <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3d4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3dd:	0f b7 c0             	movzx  eax,ax
c000d3e0:	3d 24 03 00 00       	cmp    eax,0x324
c000d3e5:	75 06                	jne    c000d3ed <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3e7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f0:	0f b7 c0             	movzx  eax,ax
c000d3f3:	3d 23 03 00 00       	cmp    eax,0x323
c000d3f8:	75 06                	jne    c000d400 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3fa:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d403:	0f b7 c0             	movzx  eax,ax
c000d406:	3d 26 03 00 00       	cmp    eax,0x326
c000d40b:	75 06                	jne    c000d413 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d40d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d416:	0f b7 c0             	movzx  eax,ax
c000d419:	3d 27 03 00 00       	cmp    eax,0x327
c000d41e:	75 06                	jne    c000d426 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d420:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d429:	0f b7 c0             	movzx  eax,ax
c000d42c:	3d 22 03 00 00       	cmp    eax,0x322
c000d431:	75 06                	jne    c000d439 <sendKeyboardToken(KeyboardToken)+0x332>
c000d433:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d439:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d43d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d440:	83 f0 01             	xor    eax,0x1
c000d443:	0f b6 c0             	movzx  eax,al
c000d446:	85 c0                	test   eax,eax
c000d448:	74 7c                	je     c000d4c6 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d44a:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d44f:	0f b6 c0             	movzx  eax,al
c000d452:	85 c0                	test   eax,eax
c000d454:	74 43                	je     c000d499 <sendKeyboardToken(KeyboardToken)+0x392>
c000d456:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d45a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d45e:	85 c0                	test   eax,eax
c000d460:	74 2b                	je     c000d48d <sendKeyboardToken(KeyboardToken)+0x386>
c000d462:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d468:	89 d0                	mov    eax,edx
c000d46a:	c1 e0 02             	shl    eax,0x2
c000d46d:	01 d0                	add    eax,edx
c000d46f:	d1 e0                	shl    eax,1
c000d471:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d479:	0f b7 c0             	movzx  eax,ax
c000d47c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d47f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d484:	01 d0                	add    eax,edx
c000d486:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d48b:	eb 71                	jmp    c000d4fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d48d:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d497:	eb 65                	jmp    c000d4fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d499:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d49e:	85 c0                	test   eax,eax
c000d4a0:	74 18                	je     c000d4ba <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4a2:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a7:	0f b6 c0             	movzx  eax,al
c000d4aa:	83 ec 0c             	sub    esp,0xc
c000d4ad:	50                   	push   eax
c000d4ae:	e8 79 fb ff ff       	call   c000d02c <sendKeyToTerminal(unsigned char)>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4ba:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4c4:	eb 38                	jmp    c000d4fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c9:	0f b7 c0             	movzx  eax,ax
c000d4cc:	3d 01 01 00 00       	cmp    eax,0x101
c000d4d1:	75 2b                	jne    c000d4fe <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4d3:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4d8:	85 c0                	test   eax,eax
c000d4da:	74 18                	je     c000d4f4 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4dc:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4e1:	0f b6 c0             	movzx  eax,al
c000d4e4:	83 ec 0c             	sub    esp,0xc
c000d4e7:	50                   	push   eax
c000d4e8:	e8 3f fb ff ff       	call   c000d02c <sendKeyToTerminal(unsigned char)>
c000d4ed:	83 c4 10             	add    esp,0x10
c000d4f0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4f4:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4fe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d501:	83 f0 01             	xor    eax,0x1
c000d504:	0f b6 c0             	movzx  eax,al
c000d507:	85 c0                	test   eax,eax
c000d509:	74 5a                	je     c000d565 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d50b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d50e:	83 f0 01             	xor    eax,0x1
c000d511:	0f b6 c0             	movzx  eax,al
c000d514:	85 c0                	test   eax,eax
c000d516:	74 4d                	je     c000d565 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d518:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d51d:	83 f0 01             	xor    eax,0x1
c000d520:	0f b6 c0             	movzx  eax,al
c000d523:	85 c0                	test   eax,eax
c000d525:	74 3e                	je     c000d565 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52a:	0f b7 c0             	movzx  eax,ax
c000d52d:	83 f8 1f             	cmp    eax,0x1f
c000d530:	76 0b                	jbe    c000d53d <sendKeyboardToken(KeyboardToken)+0x436>
c000d532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d535:	0f b7 c0             	movzx  eax,ax
c000d538:	83 f8 7e             	cmp    eax,0x7e
c000d53b:	76 16                	jbe    c000d553 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d540:	0f b7 c0             	movzx  eax,ax
c000d543:	83 f8 0a             	cmp    eax,0xa
c000d546:	74 0b                	je     c000d553 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d54b:	0f b7 c0             	movzx  eax,ax
c000d54e:	83 f8 08             	cmp    eax,0x8
c000d551:	75 12                	jne    c000d565 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d556:	0f b6 c0             	movzx  eax,al
c000d559:	83 ec 0c             	sub    esp,0xc
c000d55c:	50                   	push   eax
c000d55d:	e8 ca fa ff ff       	call   c000d02c <sendKeyToTerminal(unsigned char)>
c000d562:	83 c4 10             	add    esp,0x10
c000d565:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d568:	83 f0 01             	xor    eax,0x1
c000d56b:	0f b6 c0             	movzx  eax,al
c000d56e:	85 c0                	test   eax,eax
c000d570:	74 5d                	je     c000d5cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d572:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d575:	83 f0 01             	xor    eax,0x1
c000d578:	0f b6 c0             	movzx  eax,al
c000d57b:	85 c0                	test   eax,eax
c000d57d:	74 50                	je     c000d5cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d57f:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d584:	0f b6 c0             	movzx  eax,al
c000d587:	85 c0                	test   eax,eax
c000d589:	74 44                	je     c000d5cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58e:	0f b7 c0             	movzx  eax,ax
c000d591:	83 f8 3f             	cmp    eax,0x3f
c000d594:	76 39                	jbe    c000d5cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d599:	0f b7 c0             	movzx  eax,ax
c000d59c:	83 f8 7f             	cmp    eax,0x7f
c000d59f:	77 2e                	ja     c000d5cf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a4:	88 c2                	mov    dl,al
c000d5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a9:	0f b7 c0             	movzx  eax,ax
c000d5ac:	83 f8 5f             	cmp    eax,0x5f
c000d5af:	76 04                	jbe    c000d5b5 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5b1:	b0 20                	mov    al,0x20
c000d5b3:	eb 02                	jmp    c000d5b7 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5b5:	b0 00                	mov    al,0x0
c000d5b7:	89 d1                	mov    ecx,edx
c000d5b9:	29 c1                	sub    ecx,eax
c000d5bb:	89 c8                	mov    eax,ecx
c000d5bd:	83 e8 40             	sub    eax,0x40
c000d5c0:	0f b6 c0             	movzx  eax,al
c000d5c3:	83 ec 0c             	sub    esp,0xc
c000d5c6:	50                   	push   eax
c000d5c7:	e8 60 fa ff ff       	call   c000d02c <sendKeyToTerminal(unsigned char)>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d2:	0f b7 c0             	movzx  eax,ax
c000d5d5:	3d 00 03 00 00       	cmp    eax,0x300
c000d5da:	75 12                	jne    c000d5ee <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5dc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5df:	83 f0 01             	xor    eax,0x1
c000d5e2:	0f b6 c0             	movzx  eax,al
c000d5e5:	85 c0                	test   eax,eax
c000d5e7:	74 05                	je     c000d5ee <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5e9:	e8 2b af ff ff       	call   c0008519 <doTerminalCycle()>
c000d5ee:	90                   	nop
c000d5ef:	c9                   	leave  
c000d5f0:	c3                   	ret    

c000d5f1 <clearInternalKeybuffer(VgaText*)>:
c000d5f1:	55                   	push   ebp
c000d5f2:	89 e5                	mov    ebp,esp
c000d5f4:	83 ec 08             	sub    esp,0x8
c000d5f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fa:	05 02 01 00 00       	add    eax,0x102
c000d5ff:	83 ec 0c             	sub    esp,0xc
c000d602:	50                   	push   eax
c000d603:	e8 78 2f ff ff       	call   c0000580 <strlen>
c000d608:	83 c4 10             	add    esp,0x10
c000d60b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d60e:	81 c2 02 01 00 00    	add    edx,0x102
c000d614:	83 ec 04             	sub    esp,0x4
c000d617:	50                   	push   eax
c000d618:	6a 00                	push   0x0
c000d61a:	52                   	push   edx
c000d61b:	e8 d0 2e ff ff       	call   c00004f0 <memset>
c000d620:	83 c4 10             	add    esp,0x10
c000d623:	90                   	nop
c000d624:	c9                   	leave  
c000d625:	c3                   	ret    

c000d626 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d626:	55                   	push   ebp
c000d627:	89 e5                	mov    ebp,esp
c000d629:	83 ec 18             	sub    esp,0x18
c000d62c:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d631:	85 c0                	test   eax,eax
c000d633:	74 2a                	je     c000d65f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d635:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d63b:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d641:	83 ec 04             	sub    esp,0x4
c000d644:	68 40 84 02 c0       	push   0xc0028440
c000d649:	83 ec 08             	sub    esp,0x8
c000d64c:	89 e0                	mov    eax,esp
c000d64e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d651:	89 08                	mov    DWORD PTR [eax],ecx
c000d653:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d656:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d65a:	ff d2                	call   edx
c000d65c:	83 c4 10             	add    esp,0x10
c000d65f:	fb                   	sti    
c000d660:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d667:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d66b:	0f 84 0d 01 00 00    	je     c000d77e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d674:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d67a:	0f be c0             	movsx  eax,al
c000d67d:	85 c0                	test   eax,eax
c000d67f:	75 2c                	jne    c000d6ad <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d681:	fa                   	cli    
c000d682:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d687:	83 c0 01             	add    eax,0x1
c000d68a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d68f:	e8 4c 85 00 00       	call   c0015be0 <schedule()>
c000d694:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d699:	83 e8 01             	sub    eax,0x1
c000d69c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6a1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6a6:	85 c0                	test   eax,eax
c000d6a8:	75 c7                	jne    c000d671 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6aa:	fb                   	sti    
c000d6ab:	eb c4                	jmp    c000d671 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6b0:	8d 50 01             	lea    edx,[eax+0x1]
c000d6b3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6b9:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6bf:	88 10                	mov    BYTE PTR [eax],dl
c000d6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6ca:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6cd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6d1:	83 f8 03             	cmp    eax,0x3
c000d6d4:	75 1e                	jne    c000d6f4 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6d6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6db:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6e0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6e6:	83 ec 08             	sub    esp,0x8
c000d6e9:	6a 02                	push   0x2
c000d6eb:	50                   	push   eax
c000d6ec:	e8 8e 40 00 00       	call   c001177f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6f8:	83 f8 1c             	cmp    eax,0x1c
c000d6fb:	75 1e                	jne    c000d71b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6fd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d702:	8b 00                	mov    eax,DWORD PTR [eax]
c000d704:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d707:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d70d:	83 ec 08             	sub    esp,0x8
c000d710:	6a 09                	push   0x9
c000d712:	50                   	push   eax
c000d713:	e8 67 40 00 00       	call   c001177f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d718:	83 c4 10             	add    esp,0x10
c000d71b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71e:	05 02 01 00 00       	add    eax,0x102
c000d723:	83 ec 0c             	sub    esp,0xc
c000d726:	50                   	push   eax
c000d727:	e8 54 2e ff ff       	call   c0000580 <strlen>
c000d72c:	83 c4 10             	add    esp,0x10
c000d72f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d732:	81 c2 02 01 00 00    	add    edx,0x102
c000d738:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d73b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d73e:	81 c2 02 01 00 00    	add    edx,0x102
c000d744:	83 ec 04             	sub    esp,0x4
c000d747:	50                   	push   eax
c000d748:	51                   	push   ecx
c000d749:	52                   	push   edx
c000d74a:	e8 81 2c ff ff       	call   c00003d0 <memmove>
c000d74f:	83 c4 10             	add    esp,0x10
c000d752:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d756:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d75a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d75e:	83 f8 0a             	cmp    eax,0xa
c000d761:	74 16                	je     c000d779 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d763:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d767:	83 f8 03             	cmp    eax,0x3
c000d76a:	74 0d                	je     c000d779 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d76c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d770:	83 f8 1c             	cmp    eax,0x1c
c000d773:	0f 85 ee fe ff ff    	jne    c000d667 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d779:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d77c:	eb 03                	jmp    c000d781 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d77e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d781:	c9                   	leave  
c000d782:	c3                   	ret    
c000d783:	90                   	nop

c000d784 <Keyboard::Keyboard(char const*)>:
c000d784:	83 ec 0c             	sub    esp,0xc
c000d787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78b:	83 ec 08             	sub    esp,0x8
c000d78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d792:	50                   	push   eax
c000d793:	e8 44 f1 ff ff       	call   c000c8dc <Device::Device(char const*)>
c000d798:	83 c4 10             	add    esp,0x10
c000d79b:	ba 9c 17 02 c0       	mov    edx,0xc002179c
c000d7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a4:	89 10                	mov    DWORD PTR [eax],edx
c000d7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7aa:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7b4:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7bb:	90                   	nop
c000d7bc:	83 c4 0c             	add    esp,0xc
c000d7bf:	c3                   	ret    

c000d7c0 <Keyboard::~Keyboard()>:
c000d7c0:	83 ec 0c             	sub    esp,0xc
c000d7c3:	ba 9c 17 02 c0       	mov    edx,0xc002179c
c000d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cc:	89 10                	mov    DWORD PTR [eax],edx
c000d7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d2:	83 ec 0c             	sub    esp,0xc
c000d7d5:	50                   	push   eax
c000d7d6:	e8 6b ee ff ff       	call   c000c646 <Device::~Device()>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	90                   	nop
c000d7df:	83 c4 0c             	add    esp,0xc
c000d7e2:	c3                   	ret    
c000d7e3:	90                   	nop

c000d7e4 <Keyboard::~Keyboard()>:
c000d7e4:	83 ec 0c             	sub    esp,0xc
c000d7e7:	83 ec 0c             	sub    esp,0xc
c000d7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ee:	e8 cd ff ff ff       	call   c000d7c0 <Keyboard::~Keyboard()>
c000d7f3:	83 c4 10             	add    esp,0x10
c000d7f6:	83 ec 08             	sub    esp,0x8
c000d7f9:	68 5c 01 00 00       	push   0x15c
c000d7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d802:	e8 05 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	83 c4 0c             	add    esp,0xc
c000d80d:	c3                   	ret    

c000d80e <LogicalDisk::close(int, int, void*)>:
c000d80e:	83 c8 ff             	or     eax,0xffffffff
c000d811:	c3                   	ret    

c000d812 <LogicalDisk::~LogicalDisk()>:
c000d812:	83 ec 0c             	sub    esp,0xc
c000d815:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000d81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81e:	89 10                	mov    DWORD PTR [eax],edx
c000d820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d824:	83 ec 0c             	sub    esp,0xc
c000d827:	50                   	push   eax
c000d828:	e8 19 ee ff ff       	call   c000c646 <Device::~Device()>
c000d82d:	83 c4 10             	add    esp,0x10
c000d830:	90                   	nop
c000d831:	83 c4 0c             	add    esp,0xc
c000d834:	c3                   	ret    
c000d835:	90                   	nop

c000d836 <LogicalDisk::~LogicalDisk()>:
c000d836:	83 ec 0c             	sub    esp,0xc
c000d839:	83 ec 0c             	sub    esp,0xc
c000d83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d840:	e8 cd ff ff ff       	call   c000d812 <LogicalDisk::~LogicalDisk()>
c000d845:	83 c4 10             	add    esp,0x10
c000d848:	83 ec 08             	sub    esp,0x8
c000d84b:	68 78 01 00 00       	push   0x178
c000d850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d854:	e8 b3 cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d859:	83 c4 10             	add    esp,0x10
c000d85c:	83 c4 0c             	add    esp,0xc
c000d85f:	c3                   	ret    

c000d860 <LogicalDisk::open(int, int, void*)>:
c000d860:	83 ec 18             	sub    esp,0x18
c000d863:	68 c8 17 02 c0       	push   0xc00217c8
c000d868:	e8 74 3a 00 00       	call   c00112e1 <KePanic(char const*)>
c000d86d:	83 c8 ff             	or     eax,0xffffffff
c000d870:	83 c4 1c             	add    esp,0x1c
c000d873:	c3                   	ret    

c000d874 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d874:	53                   	push   ebx
c000d875:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d87d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d881:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d887:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d88d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d893:	77 10                	ja     c000d8a5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d895:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d89b:	89 d3                	mov    ebx,edx
c000d89d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8a3:	72 05                	jb     c000d8aa <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8a5:	83 c8 ff             	or     eax,0xffffffff
c000d8a8:	89 c2                	mov    edx,eax
c000d8aa:	5b                   	pop    ebx
c000d8ab:	c3                   	ret    

c000d8ac <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8ac:	56                   	push   esi
c000d8ad:	83 c8 ff             	or     eax,0xffffffff
c000d8b0:	53                   	push   ebx
c000d8b1:	89 c2                	mov    edx,eax
c000d8b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8b7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8bf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8c5:	77 27                	ja     c000d8ee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8c7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8cd:	89 d8                	mov    eax,ebx
c000d8cf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8da:	89 c2                	mov    edx,eax
c000d8dc:	73 10                	jae    c000d8ee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8de:	89 c8                	mov    eax,ecx
c000d8e0:	89 da                	mov    edx,ebx
c000d8e2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8e8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8ee:	5b                   	pop    ebx
c000d8ef:	5e                   	pop    esi
c000d8f0:	c3                   	ret    
c000d8f1:	90                   	nop

c000d8f2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8f2:	83 ec 1c             	sub    esp,0x1c
c000d8f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d905:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d909:	89 04 24             	mov    DWORD PTR [esp],eax
c000d90c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d910:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d918:	83 ec 08             	sub    esp,0x8
c000d91b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d91f:	50                   	push   eax
c000d920:	e8 b7 ef ff ff       	call   c000c8dc <Device::Device(char const*)>
c000d925:	83 c4 10             	add    esp,0x10
c000d928:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000d92d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d931:	89 10                	mov    DWORD PTR [eax],edx
c000d933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d937:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d942:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d958:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d962:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d96a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d96e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d974:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d97a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d97e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d981:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d985:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d98b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d995:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d999:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d99f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9ad:	90                   	nop
c000d9ae:	83 c4 1c             	add    esp,0x1c
c000d9b1:	c3                   	ret    

c000d9b2 <LogicalDisk::assignDriveLetter()>:
c000d9b2:	55                   	push   ebp
c000d9b3:	57                   	push   edi
c000d9b4:	56                   	push   esi
c000d9b5:	53                   	push   ebx
c000d9b6:	83 ec 14             	sub    esp,0x14
c000d9b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9bd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9c3:	b0 41                	mov    al,0x41
c000d9c5:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9cb:	84 d2                	test   dl,dl
c000d9cd:	75 02                	jne    c000d9d1 <LogicalDisk::assignDriveLetter()+0x1f>
c000d9cf:	b0 43                	mov    al,0x43
c000d9d1:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9d7:	0f b6 ca             	movzx  ecx,dl
c000d9da:	0f be e8             	movsx  ebp,al
c000d9dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9e1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9e5:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9eb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9ef:	3c 43                	cmp    al,0x43
c000d9f1:	75 10                	jne    c000da03 <LogicalDisk::assignDriveLetter()+0x51>
c000d9f3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9fa:	75 5a                	jne    c000da56 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000da01:	75 53                	jne    c000da56 <LogicalDisk::assignDriveLetter()+0xa4>
c000da03:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da06:	ba 01 00 00 00       	mov    edx,0x1
c000da0b:	89 34 24             	mov    DWORD PTR [esp],esi
c000da0e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da11:	d3 e2                	shl    edx,cl
c000da13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da17:	89 d7                	mov    edi,edx
c000da19:	89 d6                	mov    esi,edx
c000da1b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da1f:	c1 ff 1f             	sar    edi,0x1f
c000da22:	21 f9                	and    ecx,edi
c000da24:	09 d1                	or     ecx,edx
c000da26:	75 2e                	jne    c000da56 <LogicalDisk::assignDriveLetter()+0xa4>
c000da28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da2c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da30:	09 f2                	or     edx,esi
c000da32:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da35:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da3f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da45:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da4c:	09 fa                	or     edx,edi
c000da4e:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da54:	eb 0d                	jmp    c000da63 <LogicalDisk::assignDriveLetter()+0xb1>
c000da56:	8d 50 01             	lea    edx,[eax+0x1]
c000da59:	45                   	inc    ebp
c000da5a:	80 fa 5b             	cmp    dl,0x5b
c000da5d:	88 d0                	mov    al,dl
c000da5f:	75 8e                	jne    c000d9ef <LogicalDisk::assignDriveLetter()+0x3d>
c000da61:	31 c0                	xor    eax,eax
c000da63:	83 c4 14             	add    esp,0x14
c000da66:	5b                   	pop    ebx
c000da67:	5e                   	pop    esi
c000da68:	5f                   	pop    edi
c000da69:	5d                   	pop    ebp
c000da6a:	c3                   	ret    
c000da6b:	90                   	nop

c000da6c <LogicalDisk::mount()>:
c000da6c:	56                   	push   esi
c000da6d:	53                   	push   ebx
c000da6e:	53                   	push   ebx
c000da6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da73:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da79:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da83:	85 db                	test   ebx,ebx
c000da85:	74 27                	je     c000daae <LogicalDisk::mount()+0x42>
c000da87:	51                   	push   ecx
c000da88:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da91:	83 e8 41             	sub    eax,0x41
c000da94:	50                   	push   eax
c000da95:	56                   	push   esi
c000da96:	53                   	push   ebx
c000da97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da9a:	83 c4 10             	add    esp,0x10
c000da9d:	84 c0                	test   al,al
c000da9f:	74 08                	je     c000daa9 <LogicalDisk::mount()+0x3d>
c000daa1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000daa7:	eb 07                	jmp    c000dab0 <LogicalDisk::mount()+0x44>
c000daa9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000daac:	eb d5                	jmp    c000da83 <LogicalDisk::mount()+0x17>
c000daae:	31 c0                	xor    eax,eax
c000dab0:	5a                   	pop    edx
c000dab1:	5b                   	pop    ebx
c000dab2:	5e                   	pop    esi
c000dab3:	c3                   	ret    

c000dab4 <LogicalDisk::unmount()>:
c000dab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dab8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dac2:	c3                   	ret    
c000dac3:	90                   	nop

c000dac4 <LogicalDisk::eject()>:
c000dac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dace:	8b 10                	mov    edx,DWORD PTR [eax]
c000dad0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dad4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dad7:	90                   	nop

c000dad8 <LogicalDisk::unassignDriveLetter()>:
c000dad8:	57                   	push   edi
c000dad9:	56                   	push   esi
c000dada:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dade:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dae5:	85 c9                	test   ecx,ecx
c000dae7:	75 0f                	jne    c000daf8 <LogicalDisk::unassignDriveLetter()+0x20>
c000dae9:	c7 44 24 0c ec 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc00217ec
c000daf1:	5e                   	pop    esi
c000daf2:	5f                   	pop    edi
c000daf3:	e9 e9 37 00 00       	jmp    c00112e1 <KePanic(char const*)>
c000daf8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000daff:	83 e9 41             	sub    ecx,0x41
c000db02:	b8 01 00 00 00       	mov    eax,0x1
c000db07:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db12:	d3 e0                	shl    eax,cl
c000db14:	89 c7                	mov    edi,eax
c000db16:	f7 d0                	not    eax
c000db18:	c1 ff 1f             	sar    edi,0x1f
c000db1b:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db21:	89 fe                	mov    esi,edi
c000db23:	f7 d6                	not    esi
c000db25:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db2b:	5e                   	pop    esi
c000db2c:	5f                   	pop    edi
c000db2d:	c3                   	ret    

c000db2e <LogicalDisk::read(unsigned long long, int, void*)>:
c000db2e:	57                   	push   edi
c000db2f:	56                   	push   esi
c000db30:	53                   	push   ebx
c000db31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db41:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db47:	77 41                	ja     c000db8a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db49:	99                   	cdq    
c000db4a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db50:	01 c8                	add    eax,ecx
c000db52:	11 da                	adc    edx,ebx
c000db54:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db5a:	19 d7                	sbb    edi,edx
c000db5c:	72 33                	jb     c000db91 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db5e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db64:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db6e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db72:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db82:	5b                   	pop    ebx
c000db83:	5e                   	pop    esi
c000db84:	5f                   	pop    edi
c000db85:	e9 d4 0a 00 00       	jmp    c000e65e <VCache::read(unsigned long long, int, void*)>
c000db8a:	b8 05 00 00 00       	mov    eax,0x5
c000db8f:	eb 05                	jmp    c000db96 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db91:	b8 07 00 00 00       	mov    eax,0x7
c000db96:	5b                   	pop    ebx
c000db97:	5e                   	pop    esi
c000db98:	5f                   	pop    edi
c000db99:	c3                   	ret    

c000db9a <LogicalDisk::write(unsigned long long, int, void*)>:
c000db9a:	57                   	push   edi
c000db9b:	56                   	push   esi
c000db9c:	53                   	push   ebx
c000db9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dba1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dba5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dba9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbb3:	77 41                	ja     c000dbf6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbb5:	99                   	cdq    
c000dbb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dbbc:	01 c8                	add    eax,ecx
c000dbbe:	11 da                	adc    edx,ebx
c000dbc0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbc6:	19 d7                	sbb    edi,edx
c000dbc8:	72 33                	jb     c000dbfd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbd0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbde:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbe4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbee:	5b                   	pop    ebx
c000dbef:	5e                   	pop    esi
c000dbf0:	5f                   	pop    edi
c000dbf1:	e9 6e 09 00 00       	jmp    c000e564 <VCache::write(unsigned long long, int, void*)>
c000dbf6:	b8 05 00 00 00       	mov    eax,0x5
c000dbfb:	eb 05                	jmp    c000dc02 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbfd:	b8 07 00 00 00       	mov    eax,0x7
c000dc02:	5b                   	pop    ebx
c000dc03:	5e                   	pop    esi
c000dc04:	5f                   	pop    edi
c000dc05:	c3                   	ret    
c000dc06:	66 90                	xchg   ax,ax

c000dc08 <Mouse::Mouse(char const*)>:
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0f:	83 ec 08             	sub    esp,0x8
c000dc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc16:	50                   	push   eax
c000dc17:	e8 c0 ec ff ff       	call   c000c8dc <Device::Device(char const*)>
c000dc1c:	83 c4 10             	add    esp,0x10
c000dc1f:	ba 40 18 02 c0       	mov    edx,0xc0021840
c000dc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc28:	89 10                	mov    DWORD PTR [eax],edx
c000dc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc38:	90                   	nop
c000dc39:	83 c4 0c             	add    esp,0xc
c000dc3c:	c3                   	ret    
c000dc3d:	90                   	nop
c000dc3e:	66 90                	xchg   ax,ax

c000dc40 <Mouse::~Mouse()>:
c000dc40:	83 ec 0c             	sub    esp,0xc
c000dc43:	ba 40 18 02 c0       	mov    edx,0xc0021840
c000dc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4c:	89 10                	mov    DWORD PTR [eax],edx
c000dc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc52:	83 ec 0c             	sub    esp,0xc
c000dc55:	50                   	push   eax
c000dc56:	e8 eb e9 ff ff       	call   c000c646 <Device::~Device()>
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	90                   	nop
c000dc5f:	83 c4 0c             	add    esp,0xc
c000dc62:	c3                   	ret    
c000dc63:	90                   	nop

c000dc64 <Mouse::~Mouse()>:
c000dc64:	83 ec 0c             	sub    esp,0xc
c000dc67:	83 ec 0c             	sub    esp,0xc
c000dc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6e:	e8 cd ff ff ff       	call   c000dc40 <Mouse::~Mouse()>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	83 ec 08             	sub    esp,0x8
c000dc79:	68 58 01 00 00       	push   0x158
c000dc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc82:	e8 85 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc87:	83 c4 10             	add    esp,0x10
c000dc8a:	83 c4 0c             	add    esp,0xc
c000dc8d:	c3                   	ret    

c000dc8e <NIC::getMAC()>:
c000dc8e:	31 c0                	xor    eax,eax
c000dc90:	31 d2                	xor    edx,edx
c000dc92:	c3                   	ret    
c000dc93:	90                   	nop

c000dc94 <NIC::write(int, unsigned char*, int*)>:
c000dc94:	b8 01 00 00 00       	mov    eax,0x1
c000dc99:	c3                   	ret    

c000dc9a <NIC::NIC(char const*)>:
c000dc9a:	83 ec 0c             	sub    esp,0xc
c000dc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca1:	83 ec 08             	sub    esp,0x8
c000dca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca8:	50                   	push   eax
c000dca9:	e8 2e ec ff ff       	call   c000c8dc <Device::Device(char const*)>
c000dcae:	83 c4 10             	add    esp,0x10
c000dcb1:	ba 6c 18 02 c0       	mov    edx,0xc002186c
c000dcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcba:	89 10                	mov    DWORD PTR [eax],edx
c000dcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcca:	90                   	nop
c000dccb:	83 c4 0c             	add    esp,0xc
c000dcce:	c3                   	ret    
c000dccf:	90                   	nop

c000dcd0 <NIC::~NIC()>:
c000dcd0:	83 ec 0c             	sub    esp,0xc
c000dcd3:	ba 6c 18 02 c0       	mov    edx,0xc002186c
c000dcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcdc:	89 10                	mov    DWORD PTR [eax],edx
c000dcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce2:	83 ec 0c             	sub    esp,0xc
c000dce5:	50                   	push   eax
c000dce6:	e8 5b e9 ff ff       	call   c000c646 <Device::~Device()>
c000dceb:	83 c4 10             	add    esp,0x10
c000dcee:	90                   	nop
c000dcef:	83 c4 0c             	add    esp,0xc
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <NIC::~NIC()>:
c000dcf4:	83 ec 0c             	sub    esp,0xc
c000dcf7:	83 ec 0c             	sub    esp,0xc
c000dcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcfe:	e8 cd ff ff ff       	call   c000dcd0 <NIC::~NIC()>
c000dd03:	83 c4 10             	add    esp,0x10
c000dd06:	83 ec 08             	sub    esp,0x8
c000dd09:	68 58 01 00 00       	push   0x158
c000dd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd12:	e8 f5 ca ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dd17:	83 c4 10             	add    esp,0x10
c000dd1a:	83 c4 0c             	add    esp,0xc
c000dd1d:	c3                   	ret    

c000dd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd1e:	55                   	push   ebp
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd28:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dd2f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dd36:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dd3d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dd44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd48:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd4c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd53:	e8 80 ec ff ff       	call   c000c9d8 <Device::getName()>
c000dd58:	5a                   	pop    edx
c000dd59:	59                   	pop    ecx
c000dd5a:	50                   	push   eax
c000dd5b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd5f:	55                   	push   ebp
c000dd60:	e8 eb 28 ff ff       	call   c0000650 <strcpy>
c000dd65:	5b                   	pop    ebx
c000dd66:	58                   	pop    eax
c000dd67:	68 98 18 02 c0       	push   0xc0021898
c000dd6c:	55                   	push   ebp
c000dd6d:	e8 fe 2a ff ff       	call   c0000870 <strcat>
c000dd72:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd79:	e8 55 9d ff ff       	call   c0007ad3 <malloc>
c000dd7e:	83 c4 0c             	add    esp,0xc
c000dd81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd85:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd89:	89 c3                	mov    ebx,eax
c000dd8b:	57                   	push   edi
c000dd8c:	56                   	push   esi
c000dd8d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd94:	55                   	push   ebp
c000dd95:	50                   	push   eax
c000dd96:	e8 57 fb ff ff       	call   c000d8f2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd9b:	83 c4 14             	add    esp,0x14
c000dd9e:	53                   	push   ebx
c000dd9f:	e8 0e fc ff ff       	call   c000d9b2 <LogicalDisk::assignDriveLetter()>
c000dda4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dda7:	e8 c0 fc ff ff       	call   c000da6c <LogicalDisk::mount()>
c000ddac:	58                   	pop    eax
c000ddad:	5a                   	pop    edx
c000ddae:	53                   	push   ebx
c000ddaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddb6:	e8 89 e9 ff ff       	call   c000c744 <Device::addChild(Device*)>
c000ddbb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ddc1:	5b                   	pop    ebx
c000ddc2:	5e                   	pop    esi
c000ddc3:	5f                   	pop    edi
c000ddc4:	5d                   	pop    ebp
c000ddc5:	c3                   	ret    

c000ddc6 <createPartitionsForDisk(PhysicalDisk*)>:
c000ddc6:	55                   	push   ebp
c000ddc7:	57                   	push   edi
c000ddc8:	56                   	push   esi
c000ddc9:	53                   	push   ebx
c000ddca:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddd0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddd7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dddd:	3d 00 02 00 00       	cmp    eax,0x200
c000dde2:	74 27                	je     c000de0b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dde4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddea:	83 ec 10             	sub    esp,0x10
c000dded:	99                   	cdq    
c000ddee:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddf4:	52                   	push   edx
c000ddf5:	50                   	push   eax
c000ddf6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddfa:	c1 e6 0a             	shl    esi,0xa
c000ddfd:	89 fd                	mov    ebp,edi
c000ddff:	55                   	push   ebp
c000de00:	56                   	push   esi
c000de01:	e8 9a 14 01 00       	call   c001f2a0 <__udivdi3>
c000de06:	e9 b9 00 00 00       	jmp    c000dec4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de0b:	83 ec 0c             	sub    esp,0xc
c000de0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de10:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de14:	56                   	push   esi
c000de15:	6a 01                	push   0x1
c000de17:	6a 00                	push   0x0
c000de19:	6a 00                	push   0x0
c000de1b:	53                   	push   ebx
c000de1c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de1f:	83 c4 20             	add    esp,0x20
c000de22:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de2a:	75 0a                	jne    c000de36 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de2c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de34:	74 2c                	je     c000de62 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de36:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de3c:	83 ec 10             	sub    esp,0x10
c000de3f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de45:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de4b:	89 f7                	mov    edi,esi
c000de4d:	c1 ff 1f             	sar    edi,0x1f
c000de50:	57                   	push   edi
c000de51:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de55:	56                   	push   esi
c000de56:	c1 e0 0a             	shl    eax,0xa
c000de59:	52                   	push   edx
c000de5a:	50                   	push   eax
c000de5b:	e8 40 14 01 00       	call   c001f2a0 <__udivdi3>
c000de60:	eb 62                	jmp    c000dec4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de62:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de69:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de70:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de77:	89 cf                	mov    edi,ecx
c000de79:	83 e2 7f             	and    edx,0x7f
c000de7c:	83 e7 7f             	and    edi,0x7f
c000de7f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de82:	83 e0 7f             	and    eax,0x7f
c000de85:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de88:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de8f:	83 e0 7f             	and    eax,0x7f
c000de92:	01 d0                	add    eax,edx
c000de94:	84 c0                	test   al,al
c000de96:	89 c5                	mov    ebp,eax
c000de98:	74 41                	je     c000dedb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de9a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dea0:	83 ec 10             	sub    esp,0x10
c000dea3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dea9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000deaf:	89 f7                	mov    edi,esi
c000deb1:	c1 ff 1f             	sar    edi,0x1f
c000deb4:	57                   	push   edi
c000deb5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000deb9:	56                   	push   esi
c000deba:	c1 e0 0a             	shl    eax,0xa
c000debd:	52                   	push   edx
c000debe:	50                   	push   eax
c000debf:	e8 dc 13 01 00       	call   c001f2a0 <__udivdi3>
c000dec4:	83 c4 14             	add    esp,0x14
c000dec7:	52                   	push   edx
c000dec8:	50                   	push   eax
c000dec9:	6a 00                	push   0x0
c000decb:	6a 00                	push   0x0
c000decd:	53                   	push   ebx
c000dece:	e8 4b fe ff ff       	call   c000dd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ded3:	83 c4 20             	add    esp,0x20
c000ded6:	e9 73 01 00 00       	jmp    c000e04e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dedb:	89 f0                	mov    eax,esi
c000dedd:	31 c9                	xor    ecx,ecx
c000dedf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dee6:	75 02                	jne    c000deea <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dee8:	89 cd                	mov    ebp,ecx
c000deea:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000def2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000def9:	83 c0 10             	add    eax,0x10
c000defc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df04:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000df0b:	c1 e2 08             	shl    edx,0x8
c000df0e:	c1 e6 10             	shl    esi,0x10
c000df11:	09 f2                	or     edx,esi
c000df13:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000df1a:	09 f2                	or     edx,esi
c000df1c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df23:	c1 e6 18             	shl    esi,0x18
c000df26:	09 f2                	or     edx,esi
c000df28:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df2f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df33:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df3a:	c1 e6 10             	shl    esi,0x10
c000df3d:	c1 e2 08             	shl    edx,0x8
c000df40:	09 f2                	or     edx,esi
c000df42:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df49:	09 f2                	or     edx,esi
c000df4b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df52:	c1 e6 18             	shl    esi,0x18
c000df55:	09 f2                	or     edx,esi
c000df57:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df5b:	41                   	inc    ecx
c000df5c:	83 f9 04             	cmp    ecx,0x4
c000df5f:	0f 85 7a ff ff ff    	jne    c000dedf <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df69:	83 f0 01             	xor    eax,0x1
c000df6c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df70:	75 4f                	jne    c000dfc1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df76:	83 f0 01             	xor    eax,0x1
c000df79:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df7d:	75 42                	jne    c000dfc1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df7f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df8d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df9b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dfa1:	89 f7                	mov    edi,esi
c000dfa3:	c1 ff 1f             	sar    edi,0x1f
c000dfa6:	57                   	push   edi
c000dfa7:	56                   	push   esi
c000dfa8:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfac:	52                   	push   edx
c000dfad:	c1 e0 0a             	shl    eax,0xa
c000dfb0:	50                   	push   eax
c000dfb1:	e8 ea 12 01 00       	call   c001f2a0 <__udivdi3>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfbd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfc1:	89 e8                	mov    eax,ebp
c000dfc3:	0f b6 e8             	movzx  ebp,al
c000dfc6:	85 ed                	test   ebp,ebp
c000dfc8:	74 50                	je     c000e01a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfd2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfd6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfde:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfe2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfe6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dff2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dffa:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dffe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e002:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e006:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e00a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e00e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e012:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e016:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e01a:	31 ed                	xor    ebp,ebp
c000e01c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e020:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e024:	89 f8                	mov    eax,edi
c000e026:	09 f0                	or     eax,esi
c000e028:	74 1e                	je     c000e048 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e02a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e02e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e032:	89 d1                	mov    ecx,edx
c000e034:	09 c1                	or     ecx,eax
c000e036:	74 10                	je     c000e048 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e038:	83 ec 0c             	sub    esp,0xc
c000e03b:	57                   	push   edi
c000e03c:	56                   	push   esi
c000e03d:	52                   	push   edx
c000e03e:	50                   	push   eax
c000e03f:	53                   	push   ebx
c000e040:	e8 d9 fc ff ff       	call   c000dd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e045:	83 c4 20             	add    esp,0x20
c000e048:	45                   	inc    ebp
c000e049:	83 fd 04             	cmp    ebp,0x4
c000e04c:	75 ce                	jne    c000e01c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e04e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e054:	5b                   	pop    ebx
c000e055:	5e                   	pop    esi
c000e056:	5f                   	pop    edi
c000e057:	5d                   	pop    ebp
c000e058:	c3                   	ret    
c000e059:	66 90                	xchg   ax,ax
c000e05b:	90                   	nop

c000e05c <Serial::Serial(char const*)>:
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e063:	83 ec 08             	sub    esp,0x8
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	50                   	push   eax
c000e06b:	e8 6c e8 ff ff       	call   c000c8dc <Device::Device(char const*)>
c000e070:	83 c4 10             	add    esp,0x10
c000e073:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000e078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07c:	89 10                	mov    DWORD PTR [eax],edx
c000e07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e082:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e08c:	90                   	nop
c000e08d:	83 c4 0c             	add    esp,0xc
c000e090:	c3                   	ret    
c000e091:	90                   	nop
c000e092:	66 90                	xchg   ax,ax

c000e094 <Serial::~Serial()>:
c000e094:	83 ec 0c             	sub    esp,0xc
c000e097:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000e09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a0:	89 10                	mov    DWORD PTR [eax],edx
c000e0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	50                   	push   eax
c000e0aa:	e8 97 e5 ff ff       	call   c000c646 <Device::~Device()>
c000e0af:	83 c4 10             	add    esp,0x10
c000e0b2:	90                   	nop
c000e0b3:	83 c4 0c             	add    esp,0xc
c000e0b6:	c3                   	ret    
c000e0b7:	90                   	nop

c000e0b8 <Serial::~Serial()>:
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	83 ec 0c             	sub    esp,0xc
c000e0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0c2:	e8 cd ff ff ff       	call   c000e094 <Serial::~Serial()>
c000e0c7:	83 c4 10             	add    esp,0x10
c000e0ca:	83 ec 08             	sub    esp,0x8
c000e0cd:	68 58 01 00 00       	push   0x158
c000e0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0d6:	e8 31 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	83 c4 0c             	add    esp,0xc
c000e0e1:	c3                   	ret    
c000e0e2:	66 90                	xchg   ax,ax

c000e0e4 <Timer::Timer(char const*)>:
c000e0e4:	83 ec 0c             	sub    esp,0xc
c000e0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0eb:	83 ec 08             	sub    esp,0x8
c000e0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0f2:	50                   	push   eax
c000e0f3:	e8 e4 e7 ff ff       	call   c000c8dc <Device::Device(char const*)>
c000e0f8:	83 c4 10             	add    esp,0x10
c000e0fb:	ba f0 18 02 c0       	mov    edx,0xc00218f0
c000e100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e104:	89 10                	mov    DWORD PTR [eax],edx
c000e106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e10a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e114:	90                   	nop
c000e115:	83 c4 0c             	add    esp,0xc
c000e118:	c3                   	ret    
c000e119:	90                   	nop
c000e11a:	66 90                	xchg   ax,ax

c000e11c <Timer::~Timer()>:
c000e11c:	83 ec 0c             	sub    esp,0xc
c000e11f:	ba f0 18 02 c0       	mov    edx,0xc00218f0
c000e124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e128:	89 10                	mov    DWORD PTR [eax],edx
c000e12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12e:	83 ec 0c             	sub    esp,0xc
c000e131:	50                   	push   eax
c000e132:	e8 0f e5 ff ff       	call   c000c646 <Device::~Device()>
c000e137:	83 c4 10             	add    esp,0x10
c000e13a:	90                   	nop
c000e13b:	83 c4 0c             	add    esp,0xc
c000e13e:	c3                   	ret    
c000e13f:	90                   	nop

c000e140 <Timer::~Timer()>:
c000e140:	83 ec 0c             	sub    esp,0xc
c000e143:	83 ec 0c             	sub    esp,0xc
c000e146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e14a:	e8 cd ff ff ff       	call   c000e11c <Timer::~Timer()>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	83 ec 08             	sub    esp,0x8
c000e155:	68 5c 01 00 00       	push   0x15c
c000e15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e15e:	e8 a9 c6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e163:	83 c4 10             	add    esp,0x10
c000e166:	83 c4 0c             	add    esp,0xc
c000e169:	c3                   	ret    

c000e16a <Timer::read()>:
c000e16a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e16e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e174:	c3                   	ret    

c000e175 <setupTimer(int)>:
c000e175:	53                   	push   ebx
c000e176:	83 ec 14             	sub    esp,0x14
c000e179:	68 5c 01 00 00       	push   0x15c
c000e17e:	e8 50 99 ff ff       	call   c0007ad3 <malloc>
c000e183:	89 04 24             	mov    DWORD PTR [esp],eax
c000e186:	89 c3                	mov    ebx,eax
c000e188:	e8 77 09 01 00       	call   c001eb04 <PIT::PIT()>
c000e18d:	58                   	pop    eax
c000e18e:	5a                   	pop    edx
c000e18f:	53                   	push   ebx
c000e190:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e196:	e8 a9 e5 ff ff       	call   c000c744 <Device::addChild(Device*)>
c000e19b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e19d:	6a 00                	push   0x0
c000e19f:	6a 00                	push   0x0
c000e1a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1a5:	53                   	push   ebx
c000e1a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1a9:	83 c4 28             	add    esp,0x28
c000e1ac:	89 d8                	mov    eax,ebx
c000e1ae:	5b                   	pop    ebx
c000e1af:	c3                   	ret    

c000e1b0 <timerHandler(unsigned int)>:
c000e1b0:	56                   	push   esi
c000e1b1:	53                   	push   ebx
c000e1b2:	51                   	push   ecx
c000e1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1b7:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1bd:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1c4:	0f 84 4a 01 00 00    	je     c000e314 <timerHandler(unsigned int)+0x164>
c000e1ca:	fa                   	cli    
c000e1cb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1d1:	83 ec 0c             	sub    esp,0xc
c000e1d4:	68 d8 96 02 c0       	push   0xc00296d8
c000e1d9:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1df:	e8 8c 16 01 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1e4:	83 c4 10             	add    esp,0x10
c000e1e7:	84 c0                	test   al,al
c000e1e9:	0f 85 a1 00 00 00    	jne    c000e290 <timerHandler(unsigned int)+0xe0>
c000e1ef:	83 ec 0c             	sub    esp,0xc
c000e1f2:	68 d8 96 02 c0       	push   0xc00296d8
c000e1f7:	e8 90 16 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1fc:	83 c4 10             	add    esp,0x10
c000e1ff:	89 c6                	mov    esi,eax
c000e201:	8d 76 00             	lea    esi,[esi+0x0]
c000e204:	83 ec 0c             	sub    esp,0xc
c000e207:	68 d8 96 02 c0       	push   0xc00296d8
c000e20c:	e8 7b 16 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e211:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e218:	89 c3                	mov    ebx,eax
c000e21a:	e8 75 16 01 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e21f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e222:	83 c4 10             	add    esp,0x10
c000e225:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e22b:	77 23                	ja     c000e250 <timerHandler(unsigned int)+0xa0>
c000e22d:	83 ec 0c             	sub    esp,0xc
c000e230:	53                   	push   ebx
c000e231:	e8 a2 7e 00 00       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c000e236:	83 c4 10             	add    esp,0x10
c000e239:	39 de                	cmp    esi,ebx
c000e23b:	75 27                	jne    c000e264 <timerHandler(unsigned int)+0xb4>
c000e23d:	83 ec 0c             	sub    esp,0xc
c000e240:	68 d8 96 02 c0       	push   0xc00296d8
c000e245:	e8 42 16 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e24a:	89 c6                	mov    esi,eax
c000e24c:	eb 12                	jmp    c000e260 <timerHandler(unsigned int)+0xb0>
c000e24e:	66 90                	xchg   ax,ax
c000e250:	52                   	push   edx
c000e251:	52                   	push   edx
c000e252:	53                   	push   ebx
c000e253:	68 d8 96 02 c0       	push   0xc00296d8
c000e258:	e8 f3 16 01 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e25d:	8d 76 00             	lea    esi,[esi+0x0]
c000e260:	83 c4 10             	add    esp,0x10
c000e263:	90                   	nop
c000e264:	83 ec 0c             	sub    esp,0xc
c000e267:	68 d8 96 02 c0       	push   0xc00296d8
c000e26c:	e8 ff 15 01 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e271:	83 c4 10             	add    esp,0x10
c000e274:	84 c0                	test   al,al
c000e276:	75 18                	jne    c000e290 <timerHandler(unsigned int)+0xe0>
c000e278:	83 ec 0c             	sub    esp,0xc
c000e27b:	68 d8 96 02 c0       	push   0xc00296d8
c000e280:	e8 07 16 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e285:	83 c4 10             	add    esp,0x10
c000e288:	39 f0                	cmp    eax,esi
c000e28a:	0f 85 74 ff ff ff    	jne    c000e204 <timerHandler(unsigned int)+0x54>
c000e290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e295:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e299:	74 41                	je     c000e2dc <timerHandler(unsigned int)+0x12c>
c000e29b:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e2a2:	74 38                	je     c000e2dc <timerHandler(unsigned int)+0x12c>
c000e2a4:	fa                   	cli    
c000e2a5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2ab:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2b6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2bf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2c2:	72 08                	jb     c000e2cc <timerHandler(unsigned int)+0x11c>
c000e2c4:	e8 17 79 00 00       	call   c0015be0 <schedule()>
c000e2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2cc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2d1:	48                   	dec    eax
c000e2d2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2d7:	75 03                	jne    c000e2dc <timerHandler(unsigned int)+0x12c>
c000e2d9:	fb                   	sti    
c000e2da:	66 90                	xchg   ax,ax
c000e2dc:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2e1:	48                   	dec    eax
c000e2e2:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2e7:	75 1b                	jne    c000e304 <timerHandler(unsigned int)+0x154>
c000e2e9:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2f0:	74 12                	je     c000e304 <timerHandler(unsigned int)+0x154>
c000e2f2:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2fc:	e8 df 78 00 00       	call   c0015be0 <schedule()>
c000e301:	8d 76 00             	lea    esi,[esi+0x0]
c000e304:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e309:	48                   	dec    eax
c000e30a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e30f:	75 03                	jne    c000e314 <timerHandler(unsigned int)+0x164>
c000e311:	fb                   	sti    
c000e312:	66 90                	xchg   ax,ax
c000e314:	58                   	pop    eax
c000e315:	5b                   	pop    ebx
c000e316:	5e                   	pop    esi
c000e317:	c3                   	ret    

c000e318 <VCache::VCache(PhysicalDisk*)>:
c000e318:	53                   	push   ebx
c000e319:	83 ec 18             	sub    esp,0x18
c000e31c:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000e321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e325:	89 10                	mov    DWORD PTR [eax],edx
c000e327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e336:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e341:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e348:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e34f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e353:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e35a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e365:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e36c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e370:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e378:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e37f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e392:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3a9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3b1:	83 ec 0c             	sub    esp,0xc
c000e3b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3b8:	e8 16 97 ff ff       	call   c0007ad3 <malloc>
c000e3bd:	83 c4 10             	add    esp,0x10
c000e3c0:	89 c3                	mov    ebx,eax
c000e3c2:	83 ec 0c             	sub    esp,0xc
c000e3c5:	53                   	push   ebx
c000e3c6:	e8 b5 75 00 00       	call   c0015980 <Mutex::Mutex()>
c000e3cb:	83 c4 10             	add    esp,0x10
c000e3ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3dd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3ef:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e400:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e406:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e40c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e410:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e413:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e41e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e422:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e428:	05 00 02 00 00       	add    eax,0x200
c000e42d:	c1 e0 03             	shl    eax,0x3
c000e430:	83 ec 0c             	sub    esp,0xc
c000e433:	50                   	push   eax
c000e434:	e8 9a 96 ff ff       	call   c0007ad3 <malloc>
c000e439:	83 c4 10             	add    esp,0x10
c000e43c:	89 c2                	mov    edx,eax
c000e43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e442:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e449:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e454:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e458:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e45c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e462:	89 d0                	mov    eax,edx
c000e464:	c1 e0 02             	shl    eax,0x2
c000e467:	01 d0                	add    eax,edx
c000e469:	c1 e0 04             	shl    eax,0x4
c000e46c:	83 ec 0c             	sub    esp,0xc
c000e46f:	50                   	push   eax
c000e470:	e8 5e 96 ff ff       	call   c0007ad3 <malloc>
c000e475:	83 c4 10             	add    esp,0x10
c000e478:	89 c2                	mov    edx,eax
c000e47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e481:	90                   	nop
c000e482:	83 c4 18             	add    esp,0x18
c000e485:	5b                   	pop    ebx
c000e486:	c3                   	ret    
c000e487:	90                   	nop

c000e488 <VCache::invalidateReadBuffer()>:
c000e488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e492:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e496:	c3                   	ret    
c000e497:	90                   	nop

c000e498 <VCache::writeWriteBuffer()>:
c000e498:	53                   	push   ebx
c000e499:	83 ec 08             	sub    esp,0x8
c000e49c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4a4:	74 1e                	je     c000e4c4 <VCache::writeWriteBuffer()+0x2c>
c000e4a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4b4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4b7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4ba:	50                   	push   eax
c000e4bb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4be:	83 c4 20             	add    esp,0x20
c000e4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4cb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4d2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4d6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4dd:	83 c4 08             	add    esp,0x8
c000e4e0:	5b                   	pop    ebx
c000e4e1:	c3                   	ret    
c000e4e2:	66 90                	xchg   ax,ax

c000e4e4 <VCache::~VCache()>:
c000e4e4:	83 ec 0c             	sub    esp,0xc
c000e4e7:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000e4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f0:	89 10                	mov    DWORD PTR [eax],edx
c000e4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4f9:	0f b6 c0             	movzx  eax,al
c000e4fc:	85 c0                	test   eax,eax
c000e4fe:	74 10                	je     c000e510 <VCache::~VCache()+0x2c>
c000e500:	83 ec 0c             	sub    esp,0xc
c000e503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e507:	e8 8c ff ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	90                   	nop
c000e510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e514:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e517:	83 ec 0c             	sub    esp,0xc
c000e51a:	50                   	push   eax
c000e51b:	e8 c3 95 ff ff       	call   c0007ae3 <free>
c000e520:	83 c4 10             	add    esp,0x10
c000e523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e527:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e52a:	83 ec 0c             	sub    esp,0xc
c000e52d:	50                   	push   eax
c000e52e:	e8 b0 95 ff ff       	call   c0007ae3 <free>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	90                   	nop
c000e537:	83 c4 0c             	add    esp,0xc
c000e53a:	c3                   	ret    
c000e53b:	90                   	nop

c000e53c <VCache::~VCache()>:
c000e53c:	83 ec 0c             	sub    esp,0xc
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e546:	e8 99 ff ff ff       	call   c000e4e4 <VCache::~VCache()>
c000e54b:	83 c4 10             	add    esp,0x10
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	6a 44                	push   0x44
c000e553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e557:	e8 b0 c2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e55c:	83 c4 10             	add    esp,0x10
c000e55f:	83 c4 0c             	add    esp,0xc
c000e562:	c3                   	ret    
c000e563:	90                   	nop

c000e564 <VCache::write(unsigned long long, int, void*)>:
c000e564:	55                   	push   ebp
c000e565:	57                   	push   edi
c000e566:	56                   	push   esi
c000e567:	53                   	push   ebx
c000e568:	83 ec 1c             	sub    esp,0x1c
c000e56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e56f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e573:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e577:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e57b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e57f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e583:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e587:	74 0f                	je     c000e598 <VCache::write(unsigned long long, int, void*)+0x34>
c000e589:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e58d:	53                   	push   ebx
c000e58e:	e8 f5 fe ff ff       	call   c000e488 <VCache::invalidateReadBuffer()>
c000e593:	58                   	pop    eax
c000e594:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e598:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e59c:	74 66                	je     c000e604 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e59e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a5:	99                   	cdq    
c000e5a6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5a9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5ac:	89 c6                	mov    esi,eax
c000e5ae:	31 ce                	xor    esi,ecx
c000e5b0:	89 d0                	mov    eax,edx
c000e5b2:	31 e8                	xor    eax,ebp
c000e5b4:	09 c6                	or     esi,eax
c000e5b6:	75 38                	jne    c000e5f0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5b8:	83 ff 01             	cmp    edi,0x1
c000e5bb:	75 33                	jne    c000e5f0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e5c4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5c8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5ce:	0f af f9             	imul   edi,ecx
c000e5d1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e5d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5d9:	40                   	inc    eax
c000e5da:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5dd:	83 f8 50             	cmp    eax,0x50
c000e5e0:	75 72                	jne    c000e654 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5e2:	83 ec 0c             	sub    esp,0xc
c000e5e5:	53                   	push   ebx
c000e5e6:	e8 ad fe ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e5eb:	83 c4 10             	add    esp,0x10
c000e5ee:	eb 64                	jmp    c000e654 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e5f4:	83 ec 0c             	sub    esp,0xc
c000e5f7:	53                   	push   ebx
c000e5f8:	e8 9b fe ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e5fd:	83 c4 10             	add    esp,0x10
c000e600:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e604:	83 ff 4f             	cmp    edi,0x4f
c000e607:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e60a:	7f 20                	jg     c000e62c <VCache::write(unsigned long long, int, void*)+0xc8>
c000e60c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e60f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e613:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e616:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e619:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e61c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e620:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e626:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e628:	eb 2a                	jmp    c000e654 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e62a:	66 90                	xchg   ax,ax
c000e62c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e630:	8b 10                	mov    edx,DWORD PTR [eax]
c000e632:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e636:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e63a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e63e:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e642:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e646:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e649:	83 c4 1c             	add    esp,0x1c
c000e64c:	5b                   	pop    ebx
c000e64d:	5e                   	pop    esi
c000e64e:	5f                   	pop    edi
c000e64f:	5d                   	pop    ebp
c000e650:	ff e0                	jmp    eax
c000e652:	66 90                	xchg   ax,ax
c000e654:	83 c4 1c             	add    esp,0x1c
c000e657:	31 c0                	xor    eax,eax
c000e659:	5b                   	pop    ebx
c000e65a:	5e                   	pop    esi
c000e65b:	5f                   	pop    edi
c000e65c:	5d                   	pop    ebp
c000e65d:	c3                   	ret    

c000e65e <VCache::read(unsigned long long, int, void*)>:
c000e65e:	55                   	push   ebp
c000e65f:	57                   	push   edi
c000e660:	56                   	push   esi
c000e661:	53                   	push   ebx
c000e662:	83 ec 1c             	sub    esp,0x1c
c000e665:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e669:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e66d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e671:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e675:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e679:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e67d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e681:	74 0d                	je     c000e690 <VCache::read(unsigned long long, int, void*)+0x32>
c000e683:	83 ec 0c             	sub    esp,0xc
c000e686:	57                   	push   edi
c000e687:	e8 0c fe ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e68c:	83 c4 10             	add    esp,0x10
c000e68f:	90                   	nop
c000e690:	83 fd 01             	cmp    ebp,0x1
c000e693:	0f 85 93 00 00 00    	jne    c000e72c <VCache::read(unsigned long long, int, void*)+0xce>
c000e699:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e69c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e6a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6a6:	0f 85 80 00 00 00    	jne    c000e72c <VCache::read(unsigned long long, int, void*)+0xce>
c000e6ac:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e6af:	89 cd                	mov    ebp,ecx
c000e6b1:	f7 dd                	neg    ebp
c000e6b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e6b7:	89 e8                	mov    eax,ebp
c000e6b9:	21 dd                	and    ebp,ebx
c000e6bb:	c1 f8 1f             	sar    eax,0x1f
c000e6be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6c2:	89 e8                	mov    eax,ebp
c000e6c4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e6c8:	21 f5                	and    ebp,esi
c000e6ca:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6ce:	89 ea                	mov    edx,ebp
c000e6d0:	74 2e                	je     c000e700 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6d2:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e6d5:	75 29                	jne    c000e700 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6d7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6da:	75 24                	jne    c000e700 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6df:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6e5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6e8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6eb:	21 f3                	and    ebx,esi
c000e6ed:	0f af d9             	imul   ebx,ecx
c000e6f0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6f3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6f7:	89 de                	mov    esi,ebx
c000e6f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6fb:	31 c0                	xor    eax,eax
c000e6fd:	eb 61                	jmp    c000e760 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6ff:	90                   	nop
c000e700:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e704:	83 ec 0c             	sub    esp,0xc
c000e707:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e70a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e70e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e711:	8b 36                	mov    esi,DWORD PTR [esi]
c000e713:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e716:	51                   	push   ecx
c000e717:	52                   	push   edx
c000e718:	50                   	push   eax
c000e719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e71d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e720:	83 c4 20             	add    esp,0x20
c000e723:	85 c0                	test   eax,eax
c000e725:	75 39                	jne    c000e760 <VCache::read(unsigned long long, int, void*)+0x102>
c000e727:	eb b3                	jmp    c000e6dc <VCache::read(unsigned long long, int, void*)+0x7e>
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	57                   	push   edi
c000e730:	e8 53 fd ff ff       	call   c000e488 <VCache::invalidateReadBuffer()>
c000e735:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e738:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e73c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e73e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e742:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e746:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e74a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e74e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e752:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e755:	83 c4 2c             	add    esp,0x2c
c000e758:	5b                   	pop    ebx
c000e759:	5e                   	pop    esi
c000e75a:	5f                   	pop    edi
c000e75b:	5d                   	pop    ebp
c000e75c:	ff e0                	jmp    eax
c000e75e:	66 90                	xchg   ax,ax
c000e760:	83 c4 1c             	add    esp,0x1c
c000e763:	5b                   	pop    ebx
c000e764:	5e                   	pop    esi
c000e765:	5f                   	pop    edi
c000e766:	5d                   	pop    ebp
c000e767:	c3                   	ret    

c000e768 <Video::putrect(int, int, int, int, unsigned int)>:
c000e768:	55                   	push   ebp
c000e769:	57                   	push   edi
c000e76a:	56                   	push   esi
c000e76b:	53                   	push   ebx
c000e76c:	83 ec 1c             	sub    esp,0x1c
c000e76f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e773:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e777:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e77b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e77f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e787:	01 df                	add    edi,ebx
c000e789:	39 fb                	cmp    ebx,edi
c000e78b:	7d 1f                	jge    c000e7ac <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e78d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e791:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e795:	7d 12                	jge    c000e7a9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e797:	8b 16                	mov    edx,DWORD PTR [esi]
c000e799:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e79d:	53                   	push   ebx
c000e79e:	55                   	push   ebp
c000e79f:	45                   	inc    ebp
c000e7a0:	56                   	push   esi
c000e7a1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e7a4:	83 c4 10             	add    esp,0x10
c000e7a7:	eb e8                	jmp    c000e791 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e7a9:	43                   	inc    ebx
c000e7aa:	eb dd                	jmp    c000e789 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e7ac:	83 c4 1c             	add    esp,0x1c
c000e7af:	5b                   	pop    ebx
c000e7b0:	5e                   	pop    esi
c000e7b1:	5f                   	pop    edi
c000e7b2:	5d                   	pop    ebp
c000e7b3:	c3                   	ret    

c000e7b4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7b4:	55                   	push   ebp
c000e7b5:	57                   	push   edi
c000e7b6:	31 ff                	xor    edi,edi
c000e7b8:	56                   	push   esi
c000e7b9:	53                   	push   ebx
c000e7ba:	83 ec 1c             	sub    esp,0x1c
c000e7bd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7c5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7cc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7d9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7dd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7e0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7e4:	01 f9                	add    ecx,edi
c000e7e6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7ea:	7d 2f                	jge    c000e81b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7ec:	31 f6                	xor    esi,esi
c000e7ee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7f2:	01 f2                	add    edx,esi
c000e7f4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7f8:	7d 1a                	jge    c000e814 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7fd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e800:	46                   	inc    esi
c000e801:	51                   	push   ecx
c000e802:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e806:	52                   	push   edx
c000e807:	55                   	push   ebp
c000e808:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e80b:	83 c4 10             	add    esp,0x10
c000e80e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e812:	eb da                	jmp    c000e7ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e814:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e818:	47                   	inc    edi
c000e819:	eb c5                	jmp    c000e7e0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e81b:	83 c4 1c             	add    esp,0x1c
c000e81e:	5b                   	pop    ebx
c000e81f:	5e                   	pop    esi
c000e820:	5f                   	pop    edi
c000e821:	5d                   	pop    ebp
c000e822:	c3                   	ret    
c000e823:	90                   	nop

c000e824 <Video::blit(unsigned int*, int, int, int, int)>:
c000e824:	55                   	push   ebp
c000e825:	ba 00 00 00 00       	mov    edx,0x0
c000e82a:	57                   	push   edi
c000e82b:	56                   	push   esi
c000e82c:	53                   	push   ebx
c000e82d:	83 ec 1c             	sub    esp,0x1c
c000e830:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e834:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e838:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e83c:	85 c0                	test   eax,eax
c000e83e:	0f 49 d0             	cmovns edx,eax
c000e841:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e848:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e84c:	89 eb                	mov    ebx,ebp
c000e84e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e852:	01 ea                	add    edx,ebp
c000e854:	39 da                	cmp    edx,ebx
c000e856:	7e 54                	jle    c000e8ac <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e858:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e85e:	7c 4c                	jl     c000e8ac <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e860:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e864:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e868:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e86c:	01 c1                	add    ecx,eax
c000e86e:	39 f9                	cmp    ecx,edi
c000e870:	7e 2f                	jle    c000e8a1 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e872:	83 c2 04             	add    edx,0x4
c000e875:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e87b:	7c 21                	jl     c000e89e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e87d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e881:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e883:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e88a:	55                   	push   ebp
c000e88b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e88f:	56                   	push   esi
c000e890:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e893:	83 c4 10             	add    esp,0x10
c000e896:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e89a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e89e:	47                   	inc    edi
c000e89f:	eb c7                	jmp    c000e868 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e8a1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e8a5:	43                   	inc    ebx
c000e8a6:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e8aa:	eb a2                	jmp    c000e84e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e8ac:	83 c4 1c             	add    esp,0x1c
c000e8af:	5b                   	pop    ebx
c000e8b0:	5e                   	pop    esi
c000e8b1:	5f                   	pop    edi
c000e8b2:	5d                   	pop    ebp
c000e8b3:	c3                   	ret    

c000e8b4 <Video::clearScreen(unsigned int)>:
c000e8b4:	57                   	push   edi
c000e8b5:	56                   	push   esi
c000e8b6:	53                   	push   ebx
c000e8b7:	31 db                	xor    ebx,ebx
c000e8b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8bd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8c3:	7e 1f                	jle    c000e8e4 <Video::clearScreen(unsigned int)+0x30>
c000e8c5:	31 ff                	xor    edi,edi
c000e8c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8cd:	7e 12                	jle    c000e8e1 <Video::clearScreen(unsigned int)+0x2d>
c000e8cf:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d5:	53                   	push   ebx
c000e8d6:	57                   	push   edi
c000e8d7:	47                   	inc    edi
c000e8d8:	56                   	push   esi
c000e8d9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8dc:	83 c4 10             	add    esp,0x10
c000e8df:	eb e6                	jmp    c000e8c7 <Video::clearScreen(unsigned int)+0x13>
c000e8e1:	43                   	inc    ebx
c000e8e2:	eb d9                	jmp    c000e8bd <Video::clearScreen(unsigned int)+0x9>
c000e8e4:	5b                   	pop    ebx
c000e8e5:	5e                   	pop    esi
c000e8e6:	5f                   	pop    edi
c000e8e7:	c3                   	ret    

c000e8e8 <Video::putpixel(int, int, unsigned int)>:
c000e8e8:	c7 44 24 04 28 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021928
c000e8f0:	e9 ec 29 00 00       	jmp    c00112e1 <KePanic(char const*)>
c000e8f5:	90                   	nop

c000e8f6 <Video::readPixelApprox(int, int)>:
c000e8f6:	83 ec 18             	sub    esp,0x18
c000e8f9:	68 49 19 02 c0       	push   0xc0021949
c000e8fe:	e8 de 29 00 00       	call   c00112e1 <KePanic(char const*)>
c000e903:	31 c0                	xor    eax,eax
c000e905:	83 c4 1c             	add    esp,0x1c
c000e908:	c3                   	ret    
c000e909:	90                   	nop

c000e90a <Video::Video(char const*)>:
c000e90a:	83 ec 0c             	sub    esp,0xc
c000e90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e911:	83 ec 08             	sub    esp,0x8
c000e914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e918:	50                   	push   eax
c000e919:	e8 be df ff ff       	call   c000c8dc <Device::Device(char const*)>
c000e91e:	83 c4 10             	add    esp,0x10
c000e921:	ba c4 19 02 c0       	mov    edx,0xc00219c4
c000e926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92a:	89 10                	mov    DWORD PTR [eax],edx
c000e92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e930:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e93a:	90                   	nop
c000e93b:	83 c4 0c             	add    esp,0xc
c000e93e:	c3                   	ret    
c000e93f:	90                   	nop

c000e940 <Video::~Video()>:
c000e940:	83 ec 0c             	sub    esp,0xc
c000e943:	ba c4 19 02 c0       	mov    edx,0xc00219c4
c000e948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94c:	89 10                	mov    DWORD PTR [eax],edx
c000e94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e952:	83 ec 0c             	sub    esp,0xc
c000e955:	50                   	push   eax
c000e956:	e8 eb dc ff ff       	call   c000c646 <Device::~Device()>
c000e95b:	83 c4 10             	add    esp,0x10
c000e95e:	90                   	nop
c000e95f:	83 c4 0c             	add    esp,0xc
c000e962:	c3                   	ret    
c000e963:	90                   	nop

c000e964 <Video::~Video()>:
c000e964:	83 ec 0c             	sub    esp,0xc
c000e967:	83 ec 0c             	sub    esp,0xc
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	e8 cd ff ff ff       	call   c000e940 <Video::~Video()>
c000e973:	83 c4 10             	add    esp,0x10
c000e976:	83 ec 08             	sub    esp,0x8
c000e979:	68 64 01 00 00       	push   0x164
c000e97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e982:	e8 85 be ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e987:	83 c4 10             	add    esp,0x10
c000e98a:	83 c4 0c             	add    esp,0xc
c000e98d:	c3                   	ret    

c000e98e <Video::isMonochrome()>:
c000e98e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e992:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e998:	c3                   	ret    
c000e999:	90                   	nop

c000e99a <Video::getWidth()>:
c000e99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e99e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e9a4:	c3                   	ret    
c000e9a5:	90                   	nop

c000e9a6 <Video::getHeight()>:
c000e9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e9b0:	c3                   	ret    
c000e9b1:	90                   	nop

c000e9b2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e9b2:	55                   	push   ebp
c000e9b3:	57                   	push   edi
c000e9b4:	56                   	push   esi
c000e9b5:	53                   	push   ebx
c000e9b6:	83 ec 2c             	sub    esp,0x2c
c000e9b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9bd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9c1:	83 f8 01             	cmp    eax,0x1
c000e9c4:	19 c9                	sbb    ecx,ecx
c000e9c6:	31 db                	xor    ebx,ebx
c000e9c8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9cc:	89 ce                	mov    esi,ecx
c000e9ce:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9d6:	f7 d6                	not    esi
c000e9d8:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e9de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9e2:	01 d8                	add    eax,ebx
c000e9e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9e8:	57                   	push   edi
c000e9e9:	e8 b8 ff ff ff       	call   c000e9a6 <Video::getHeight()>
c000e9ee:	59                   	pop    ecx
c000e9ef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9f3:	7e 70                	jle    c000ea65 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9f9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e9fd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ea00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea08:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ea0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea13:	89 e8                	mov    eax,ebp
c000ea15:	83 c0 20             	add    eax,0x20
c000ea18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea1c:	57                   	push   edi
c000ea1d:	e8 78 ff ff ff       	call   c000e99a <Video::getWidth()>
c000ea22:	5a                   	pop    edx
c000ea23:	39 c5                	cmp    ebp,eax
c000ea25:	7d 34                	jge    c000ea5b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea27:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea2c:	74 05                	je     c000ea33 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea2e:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea30:	56                   	push   esi
c000ea31:	eb 0d                	jmp    c000ea40 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea33:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea38:	74 12                	je     c000ea4c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea3a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea44:	55                   	push   ebp
c000ea45:	57                   	push   edi
c000ea46:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea49:	83 c4 10             	add    esp,0x10
c000ea4c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea50:	45                   	inc    ebp
c000ea51:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea55:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ea59:	75 c1                	jne    c000ea1c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea5b:	43                   	inc    ebx
c000ea5c:	83 fb 20             	cmp    ebx,0x20
c000ea5f:	0f 85 79 ff ff ff    	jne    c000e9de <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea65:	83 c4 2c             	add    esp,0x2c
c000ea68:	5b                   	pop    ebx
c000ea69:	5e                   	pop    esi
c000ea6a:	5f                   	pop    edi
c000ea6b:	5d                   	pop    ebp
c000ea6c:	c3                   	ret    
c000ea6d:	90                   	nop

c000ea6e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea6e:	55                   	push   ebp
c000ea6f:	57                   	push   edi
c000ea70:	56                   	push   esi
c000ea71:	53                   	push   ebx
c000ea72:	83 ec 28             	sub    esp,0x28
c000ea75:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea79:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ea7d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea81:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ea85:	c1 e7 08             	shl    edi,0x8
c000ea88:	01 c7                	add    edi,eax
c000ea8a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ea8e:	c1 e6 08             	shl    esi,0x8
c000ea91:	01 f0                	add    eax,esi
c000ea93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9b:	0f af c7             	imul   eax,edi
c000ea9e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eaa5:	50                   	push   eax
c000eaa6:	e8 28 90 ff ff       	call   c0007ad3 <malloc>
c000eaab:	83 c4 10             	add    esp,0x10
c000eaae:	85 c0                	test   eax,eax
c000eab0:	89 c5                	mov    ebp,eax
c000eab2:	75 10                	jne    c000eac4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eab4:	83 ec 0c             	sub    esp,0xc
c000eab7:	68 74 19 02 c0       	push   0xc0021974
c000eabc:	e8 20 28 00 00       	call   c00112e1 <KePanic(char const*)>
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eac8:	ba 12 00 00 00       	mov    edx,0x12
c000eacd:	85 c0                	test   eax,eax
c000eacf:	74 11                	je     c000eae2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ead1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ead5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ead9:	c1 fa 03             	sar    edx,0x3
c000eadc:	0f af d1             	imul   edx,ecx
c000eadf:	83 c2 12             	add    edx,0x12
c000eae2:	85 ff                	test   edi,edi
c000eae4:	74 06                	je     c000eaec <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eae6:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eaea:	75 12                	jne    c000eafe <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eaec:	83 ec 0c             	sub    esp,0xc
c000eaef:	68 84 19 02 c0       	push   0xc0021984
c000eaf4:	e8 11 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eaf9:	e9 b8 00 00 00       	jmp    c000ebb6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eafe:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eb02:	83 f9 02             	cmp    ecx,0x2
c000eb05:	0f 85 96 00 00 00    	jne    c000eba1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eb0b:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eb10:	75 0e                	jne    c000eb20 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb12:	85 c0                	test   eax,eax
c000eb14:	75 0a                	jne    c000eb20 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb16:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eb19:	83 e8 18             	sub    eax,0x18
c000eb1c:	a8 f7                	test   al,0xf7
c000eb1e:	74 0a                	je     c000eb2a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb20:	83 ec 0c             	sub    esp,0xc
c000eb23:	68 99 19 02 c0       	push   0xc0021999
c000eb28:	eb 7f                	jmp    c000eba9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb32:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb3a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eb3e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb4a:	75 0c                	jne    c000eb58 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb4c:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eb51:	c1 e1 18             	shl    ecx,0x18
c000eb54:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eb58:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb5d:	46                   	inc    esi
c000eb5e:	89 c8                	mov    eax,ecx
c000eb60:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb65:	c1 e0 10             	shl    eax,0x10
c000eb68:	c1 e1 08             	shl    ecx,0x8
c000eb6b:	09 c1                	or     ecx,eax
c000eb6d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb71:	09 c1                	or     ecx,eax
c000eb73:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb77:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eb7b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb7f:	c1 f8 03             	sar    eax,0x3
c000eb82:	01 c2                	add    edx,eax
c000eb84:	89 f0                	mov    eax,esi
c000eb86:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb8a:	39 c7                	cmp    edi,eax
c000eb8c:	7f b0                	jg     c000eb3e <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb8e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb96:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb99:	7e 22                	jle    c000ebbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb9b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000eb9f:	eb 99                	jmp    c000eb3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eba1:	50                   	push   eax
c000eba2:	50                   	push   eax
c000eba3:	51                   	push   ecx
c000eba4:	68 a7 19 02 c0       	push   0xc00219a7
c000eba9:	e8 5c bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ebae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ebb1:	e8 2d 8f ff ff       	call   c0007ae3 <free>
c000ebb6:	83 c4 10             	add    esp,0x10
c000ebb9:	31 ed                	xor    ebp,ebp
c000ebbb:	eb 0f                	jmp    c000ebcc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ebbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebc1:	89 38                	mov    DWORD PTR [eax],edi
c000ebc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebc7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ebca:	89 38                	mov    DWORD PTR [eax],edi
c000ebcc:	83 c4 1c             	add    esp,0x1c
c000ebcf:	89 e8                	mov    eax,ebp
c000ebd1:	5b                   	pop    ebx
c000ebd2:	5e                   	pop    esi
c000ebd3:	5f                   	pop    edi
c000ebd4:	5d                   	pop    ebp
c000ebd5:	c3                   	ret    

c000ebd6 <Video::putTGA(int, int, unsigned char*, int)>:
c000ebd6:	55                   	push   ebp
c000ebd7:	57                   	push   edi
c000ebd8:	56                   	push   esi
c000ebd9:	53                   	push   ebx
c000ebda:	83 ec 28             	sub    esp,0x28
c000ebdd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebe1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ebe5:	50                   	push   eax
c000ebe6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebea:	50                   	push   eax
c000ebeb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebf3:	57                   	push   edi
c000ebf4:	e8 75 fe ff ff       	call   c000ea6e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebf9:	83 c4 20             	add    esp,0x20
c000ebfc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec00:	85 c0                	test   eax,eax
c000ec02:	74 35                	je     c000ec39 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec04:	89 c6                	mov    esi,eax
c000ec06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec0a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ec0e:	39 d8                	cmp    eax,ebx
c000ec10:	7e 27                	jle    c000ec39 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec12:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ec16:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ec1a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ec1e:	39 e9                	cmp    ecx,ebp
c000ec20:	7e 14                	jle    c000ec36 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec22:	83 c6 04             	add    esi,0x4
c000ec25:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ec27:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ec2a:	53                   	push   ebx
c000ec2b:	55                   	push   ebp
c000ec2c:	45                   	inc    ebp
c000ec2d:	57                   	push   edi
c000ec2e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ec31:	83 c4 10             	add    esp,0x10
c000ec34:	eb e0                	jmp    c000ec16 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec36:	43                   	inc    ebx
c000ec37:	eb cd                	jmp    c000ec06 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec39:	83 c4 1c             	add    esp,0x1c
c000ec3c:	5b                   	pop    ebx
c000ec3d:	5e                   	pop    esi
c000ec3e:	5f                   	pop    edi
c000ec3f:	5d                   	pop    ebp
c000ec40:	c3                   	ret    
c000ec41:	66 90                	xchg   ax,ax
c000ec43:	90                   	nop

c000ec44 <ACPI::close(int, int, void*)>:
c000ec44:	83 ec 1c             	sub    esp,0x1c
c000ec47:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec4f:	74 0b                	je     c000ec5c <ACPI::close(int, int, void*)+0x18>
c000ec51:	b8 00 00 00 00       	mov    eax,0x0
c000ec56:	e9 99 00 00 00       	jmp    c000ecf4 <ACPI::close(int, int, void*)+0xb0>
c000ec5b:	90                   	nop
c000ec5c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec61:	75 29                	jne    c000ec8c <ACPI::close(int, int, void*)+0x48>
c000ec63:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec68:	85 c0                	test   eax,eax
c000ec6a:	74 08                	je     c000ec74 <ACPI::close(int, int, void*)+0x30>
c000ec6c:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec71:	ff d0                	call   eax
c000ec73:	90                   	nop
c000ec74:	83 ec 0c             	sub    esp,0xc
c000ec77:	68 08 1a 02 c0       	push   0xc0021a08
c000ec7c:	e8 60 26 00 00       	call   c00112e1 <KePanic(char const*)>
c000ec81:	83 c4 10             	add    esp,0x10
c000ec84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec89:	eb 69                	jmp    c000ecf4 <ACPI::close(int, int, void*)+0xb0>
c000ec8b:	90                   	nop
c000ec8c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec91:	75 59                	jne    c000ecec <ACPI::close(int, int, void*)+0xa8>
c000ec93:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec98:	85 c0                	test   eax,eax
c000ec9a:	74 08                	je     c000eca4 <ACPI::close(int, int, void*)+0x60>
c000ec9c:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eca1:	ff d0                	call   eax
c000eca3:	90                   	nop
c000eca4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ecb1:	83 e0 02             	and    eax,0x2
c000ecb4:	74 1e                	je     c000ecd4 <ACPI::close(int, int, void*)+0x90>
c000ecb6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ecbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecc1:	89 c2                	mov    edx,eax
c000ecc3:	ec                   	in     al,dx
c000ecc4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ecc8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eccc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecd0:	eb da                	jmp    c000ecac <ACPI::close(int, int, void*)+0x68>
c000ecd2:	66 90                	xchg   ax,ax
c000ecd4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecdb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ece0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ece4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ece8:	ee                   	out    dx,al
c000ece9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf4:	83 c4 1c             	add    esp,0x1c
c000ecf7:	c3                   	ret    

c000ecf8 <findRSDP()>:
c000ecf8:	83 ec 1c             	sub    esp,0x1c
c000ecfb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed00:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed06:	83 e0 04             	and    eax,0x4
c000ed09:	0f b6 c0             	movzx  eax,al
c000ed0c:	85 c0                	test   eax,eax
c000ed0e:	75 08                	jne    c000ed18 <findRSDP()+0x20>
c000ed10:	b8 00 00 00 00       	mov    eax,0x0
c000ed15:	eb 75                	jmp    c000ed8c <findRSDP()+0x94>
c000ed17:	90                   	nop
c000ed18:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ed1d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed22:	7f 1c                	jg     c000ed40 <findRSDP()+0x48>
c000ed24:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed2f:	83 e2 fb             	and    edx,0xfffffffb
c000ed32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed38:	b8 00 00 00 00       	mov    eax,0x0
c000ed3d:	eb 4d                	jmp    c000ed8c <findRSDP()+0x94>
c000ed3f:	90                   	nop
c000ed40:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed48:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed50:	77 32                	ja     c000ed84 <findRSDP()+0x8c>
c000ed52:	83 ec 04             	sub    esp,0x4
c000ed55:	6a 08                	push   0x8
c000ed57:	68 a3 1a 02 c0       	push   0xc0021aa3
c000ed5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed60:	e8 1b 16 ff ff       	call   c0000380 <memcmp>
c000ed65:	83 c4 10             	add    esp,0x10
c000ed68:	85 c0                	test   eax,eax
c000ed6a:	0f 94 c0             	sete   al
c000ed6d:	0f b6 c0             	movzx  eax,al
c000ed70:	85 c0                	test   eax,eax
c000ed72:	74 08                	je     c000ed7c <findRSDP()+0x84>
c000ed74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed78:	eb 12                	jmp    c000ed8c <findRSDP()+0x94>
c000ed7a:	66 90                	xchg   ax,ax
c000ed7c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed81:	eb c5                	jmp    c000ed48 <findRSDP()+0x50>
c000ed83:	90                   	nop
c000ed84:	b8 00 00 00 00       	mov    eax,0x0
c000ed89:	8d 76 00             	lea    esi,[esi+0x0]
c000ed8c:	83 c4 1c             	add    esp,0x1c
c000ed8f:	c3                   	ret    

c000ed90 <loadACPITables(unsigned char*)>:
c000ed90:	57                   	push   edi
c000ed91:	56                   	push   esi
c000ed92:	53                   	push   ebx
c000ed93:	83 ec 60             	sub    esp,0x60
c000ed96:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed9b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eda1:	83 e0 04             	and    eax,0x4
c000eda4:	0f b6 c0             	movzx  eax,al
c000eda7:	85 c0                	test   eax,eax
c000eda9:	0f 84 41 02 00 00    	je     c000eff0 <loadACPITables(unsigned char*)+0x260>
c000edaf:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000edb4:	0f b6 c0             	movzx  eax,al
c000edb7:	85 c0                	test   eax,eax
c000edb9:	74 79                	je     c000ee34 <loadACPITables(unsigned char*)+0xa4>
c000edbb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edbf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000edc3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000edc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edca:	83 e8 24             	sub    eax,0x24
c000edcd:	c1 e8 03             	shr    eax,0x3
c000edd0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edd4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000eddc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ede0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ede4:	0f 8d ba 00 00 00    	jge    c000eea4 <loadACPITables(unsigned char*)+0x114>
c000edea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edee:	83 c0 24             	add    eax,0x24
c000edf1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edf5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edf9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edfd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee01:	c1 e0 03             	shl    eax,0x3
c000ee04:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ee08:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee11:	89 c1                	mov    ecx,eax
c000ee13:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee18:	8d 50 01             	lea    edx,[eax+0x1]
c000ee1b:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee21:	89 ca                	mov    edx,ecx
c000ee23:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee2a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee2f:	eb ab                	jmp    c000eddc <loadACPITables(unsigned char*)+0x4c>
c000ee31:	8d 76 00             	lea    esi,[esi+0x0]
c000ee34:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee38:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee43:	83 e8 24             	sub    eax,0x24
c000ee46:	c1 e8 02             	shr    eax,0x2
c000ee49:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee4d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee55:	8d 76 00             	lea    esi,[esi+0x0]
c000ee58:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee5c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee60:	7d 42                	jge    c000eea4 <loadACPITables(unsigned char*)+0x114>
c000ee62:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee66:	83 c0 24             	add    eax,0x24
c000ee69:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee71:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee75:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee79:	c1 e0 02             	shl    eax,0x2
c000ee7c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee84:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee86:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee8b:	8d 50 01             	lea    edx,[eax+0x1]
c000ee8e:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee94:	89 ca                	mov    edx,ecx
c000ee96:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee9d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000eea2:	eb b4                	jmp    c000ee58 <loadACPITables(unsigned char*)+0xc8>
c000eea4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000eeac:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eeb1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000eeb5:	0f 8d 39 01 00 00    	jge    c000eff4 <loadACPITables(unsigned char*)+0x264>
c000eebb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eebf:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eec6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eece:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed6:	25 ff 0f 00 00       	and    eax,0xfff
c000eedb:	89 c6                	mov    esi,eax
c000eedd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eee3:	83 ec 0c             	sub    esp,0xc
c000eee6:	6a 01                	push   0x1
c000eee8:	e8 08 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000eeed:	83 c4 10             	add    esp,0x10
c000eef0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eef4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eefa:	83 ec 0c             	sub    esp,0xc
c000eefd:	6a 01                	push   0x1
c000eeff:	6a 01                	push   0x1
c000ef01:	50                   	push   eax
c000ef02:	52                   	push   edx
c000ef03:	53                   	push   ebx
c000ef04:	e8 ff af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef09:	83 c4 20             	add    esp,0x20
c000ef0c:	09 f0                	or     eax,esi
c000ef0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef12:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef16:	c1 e0 03             	shl    eax,0x3
c000ef19:	05 20 89 02 c0       	add    eax,0xc0028920
c000ef1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef2a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef46:	89 c6                	mov    esi,eax
c000ef48:	89 d7                	mov    edi,edx
c000ef4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef4c:	89 c8                	mov    eax,ecx
c000ef4e:	89 fa                	mov    edx,edi
c000ef50:	89 f3                	mov    ebx,esi
c000ef52:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef56:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef6d:	05 00 10 00 00       	add    eax,0x1000
c000ef72:	c1 e8 0c             	shr    eax,0xc
c000ef75:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef7d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef85:	25 ff 0f 00 00       	and    eax,0xfff
c000ef8a:	89 c6                	mov    esi,eax
c000ef8c:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef99:	e8 57 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000efa5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efab:	83 ec 0c             	sub    esp,0xc
c000efae:	6a 01                	push   0x1
c000efb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efb4:	50                   	push   eax
c000efb5:	52                   	push   edx
c000efb6:	53                   	push   ebx
c000efb7:	e8 4c af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efbc:	83 c4 20             	add    esp,0x20
c000efbf:	09 f0                	or     eax,esi
c000efc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc9:	83 ec 0c             	sub    esp,0xc
c000efcc:	50                   	push   eax
c000efcd:	e8 37 a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000efd2:	83 c4 10             	add    esp,0x10
c000efd5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efdd:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efe4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efe9:	e9 be fe ff ff       	jmp    c000eeac <loadACPITables(unsigned char*)+0x11c>
c000efee:	66 90                	xchg   ax,ax
c000eff0:	90                   	nop
c000eff1:	8d 76 00             	lea    esi,[esi+0x0]
c000eff4:	83 c4 60             	add    esp,0x60
c000eff7:	5b                   	pop    ebx
c000eff8:	5e                   	pop    esi
c000eff9:	5f                   	pop    edi
c000effa:	c3                   	ret    
c000effb:	90                   	nop

c000effc <findRSDT(unsigned char*)>:
c000effc:	57                   	push   edi
c000effd:	56                   	push   esi
c000effe:	53                   	push   ebx
c000efff:	83 ec 50             	sub    esp,0x50
c000f002:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f007:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f00d:	83 e0 04             	and    eax,0x4
c000f010:	0f b6 c0             	movzx  eax,al
c000f013:	85 c0                	test   eax,eax
c000f015:	75 0d                	jne    c000f024 <findRSDT(unsigned char*)+0x28>
c000f017:	b8 00 00 00 00       	mov    eax,0x0
c000f01c:	e9 2b 01 00 00       	jmp    c000f14c <findRSDT(unsigned char*)+0x150>
c000f021:	8d 76 00             	lea    esi,[esi+0x0]
c000f024:	89 e0                	mov    eax,esp
c000f026:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f02a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f02e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f032:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f03a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f03e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f042:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f046:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f04a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f04e:	89 c6                	mov    esi,eax
c000f050:	89 d7                	mov    edi,edx
c000f052:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f054:	89 c8                	mov    eax,ecx
c000f056:	89 fa                	mov    edx,edi
c000f058:	89 f3                	mov    ebx,esi
c000f05a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f05e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f062:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f066:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f06a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f06e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f076:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f07a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f07e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f086:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f08a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f08e:	25 ff 0f 00 00       	and    eax,0xfff
c000f093:	89 c6                	mov    esi,eax
c000f095:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f09b:	83 ec 0c             	sub    esp,0xc
c000f09e:	6a 02                	push   0x2
c000f0a0:	e8 50 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0a5:	83 c4 10             	add    esp,0x10
c000f0a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f0ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0b2:	83 ec 0c             	sub    esp,0xc
c000f0b5:	6a 01                	push   0x1
c000f0b7:	6a 02                	push   0x2
c000f0b9:	50                   	push   eax
c000f0ba:	52                   	push   edx
c000f0bb:	53                   	push   ebx
c000f0bc:	e8 47 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0c1:	83 c4 20             	add    esp,0x20
c000f0c4:	09 f0                	or     eax,esi
c000f0c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0ce:	25 ff 0f 00 00       	and    eax,0xfff
c000f0d3:	89 c6                	mov    esi,eax
c000f0d5:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0db:	83 ec 0c             	sub    esp,0xc
c000f0de:	6a 02                	push   0x2
c000f0e0:	e8 10 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0e5:	83 c4 10             	add    esp,0x10
c000f0e8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0f2:	83 ec 0c             	sub    esp,0xc
c000f0f5:	6a 01                	push   0x1
c000f0f7:	6a 02                	push   0x2
c000f0f9:	50                   	push   eax
c000f0fa:	52                   	push   edx
c000f0fb:	53                   	push   ebx
c000f0fc:	e8 07 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f101:	83 c4 20             	add    esp,0x20
c000f104:	09 f0                	or     eax,esi
c000f106:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f10a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f10f:	85 c0                	test   eax,eax
c000f111:	75 11                	jne    c000f124 <findRSDT(unsigned char*)+0x128>
c000f113:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f11a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f11e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f122:	eb 24                	jmp    c000f148 <findRSDT(unsigned char*)+0x14c>
c000f124:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f129:	83 f8 02             	cmp    eax,0x2
c000f12c:	75 12                	jne    c000f140 <findRSDT(unsigned char*)+0x144>
c000f12e:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f135:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f139:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f13d:	eb 09                	jmp    c000f148 <findRSDT(unsigned char*)+0x14c>
c000f13f:	90                   	nop
c000f140:	b8 00 00 00 00       	mov    eax,0x0
c000f145:	eb 05                	jmp    c000f14c <findRSDT(unsigned char*)+0x150>
c000f147:	90                   	nop
c000f148:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f14c:	83 c4 50             	add    esp,0x50
c000f14f:	5b                   	pop    ebx
c000f150:	5e                   	pop    esi
c000f151:	5f                   	pop    edi
c000f152:	c3                   	ret    
c000f153:	90                   	nop

c000f154 <findDataTable(unsigned char*, char*)>:
c000f154:	83 ec 1c             	sub    esp,0x1c
c000f157:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f15c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f162:	83 e0 04             	and    eax,0x4
c000f165:	0f b6 c0             	movzx  eax,al
c000f168:	85 c0                	test   eax,eax
c000f16a:	75 08                	jne    c000f174 <findDataTable(unsigned char*, char*)+0x20>
c000f16c:	b8 00 00 00 00       	mov    eax,0x0
c000f171:	eb 5d                	jmp    c000f1d0 <findDataTable(unsigned char*, char*)+0x7c>
c000f173:	90                   	nop
c000f174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f17c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f181:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f185:	7d 41                	jge    c000f1c8 <findDataTable(unsigned char*, char*)+0x74>
c000f187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f18b:	c1 e0 03             	shl    eax,0x3
c000f18e:	05 20 89 02 c0       	add    eax,0xc0028920
c000f193:	83 ec 04             	sub    esp,0x4
c000f196:	6a 04                	push   0x4
c000f198:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f19c:	50                   	push   eax
c000f19d:	e8 de 11 ff ff       	call   c0000380 <memcmp>
c000f1a2:	83 c4 10             	add    esp,0x10
c000f1a5:	85 c0                	test   eax,eax
c000f1a7:	0f 94 c0             	sete   al
c000f1aa:	0f b6 c0             	movzx  eax,al
c000f1ad:	85 c0                	test   eax,eax
c000f1af:	74 0f                	je     c000f1c0 <findDataTable(unsigned char*, char*)+0x6c>
c000f1b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1b5:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f1bc:	eb 12                	jmp    c000f1d0 <findDataTable(unsigned char*, char*)+0x7c>
c000f1be:	66 90                	xchg   ax,ax
c000f1c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1c5:	eb b5                	jmp    c000f17c <findDataTable(unsigned char*, char*)+0x28>
c000f1c7:	90                   	nop
c000f1c8:	b8 00 00 00 00       	mov    eax,0x0
c000f1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f1d0:	83 c4 1c             	add    esp,0x1c
c000f1d3:	c3                   	ret    

c000f1d4 <scanMADT()>:
c000f1d4:	53                   	push   ebx
c000f1d5:	83 ec 38             	sub    esp,0x38
c000f1d8:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1dd:	25 00 04 00 00       	and    eax,0x400
c000f1e2:	74 14                	je     c000f1f8 <scanMADT()+0x24>
c000f1e4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1e9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1ef:	83 e2 fb             	and    edx,0xfffffffb
c000f1f2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1f8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1fd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f203:	83 e0 04             	and    eax,0x4
c000f206:	0f b6 c0             	movzx  eax,al
c000f209:	85 c0                	test   eax,eax
c000f20b:	0f 84 6b 04 00 00    	je     c000f67c <scanMADT()+0x4a8>
c000f211:	e8 e2 fa ff ff       	call   c000ecf8 <findRSDP()>
c000f216:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f21b:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f220:	85 c0                	test   eax,eax
c000f222:	75 1c                	jne    c000f240 <scanMADT()+0x6c>
c000f224:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f229:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f22f:	83 e2 fb             	and    edx,0xfffffffb
c000f232:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f238:	e9 47 04 00 00       	jmp    c000f684 <scanMADT()+0x4b0>
c000f23d:	8d 76 00             	lea    esi,[esi+0x0]
c000f240:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f245:	83 ec 0c             	sub    esp,0xc
c000f248:	50                   	push   eax
c000f249:	e8 ae fd ff ff       	call   c000effc <findRSDT(unsigned char*)>
c000f24e:	83 c4 10             	add    esp,0x10
c000f251:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f256:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f25b:	85 c0                	test   eax,eax
c000f25d:	75 19                	jne    c000f278 <scanMADT()+0xa4>
c000f25f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f264:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f26a:	83 e2 fb             	and    edx,0xfffffffb
c000f26d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f273:	e9 0c 04 00 00       	jmp    c000f684 <scanMADT()+0x4b0>
c000f278:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f27d:	83 ec 0c             	sub    esp,0xc
c000f280:	50                   	push   eax
c000f281:	e8 0a fb ff ff       	call   c000ed90 <loadACPITables(unsigned char*)>
c000f286:	83 c4 10             	add    esp,0x10
c000f289:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f28e:	83 ec 08             	sub    esp,0x8
c000f291:	68 ac 1a 02 c0       	push   0xc0021aac
c000f296:	50                   	push   eax
c000f297:	e8 b8 fe ff ff       	call   c000f154 <findDataTable(unsigned char*, char*)>
c000f29c:	83 c4 10             	add    esp,0x10
c000f29f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f2a3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f2a8:	75 1a                	jne    c000f2c4 <scanMADT()+0xf0>
c000f2aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f2af:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f2b5:	83 e2 fe             	and    edx,0xfffffffe
c000f2b8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2be:	e9 c1 03 00 00       	jmp    c000f684 <scanMADT()+0x4b0>
c000f2c3:	90                   	nop
c000f2c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2d3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2d7:	0f 87 a7 03 00 00    	ja     c000f684 <scanMADT()+0x4b0>
c000f2dd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2e5:	0f 87 99 03 00 00    	ja     c000f684 <scanMADT()+0x4b0>
c000f2eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f7:	8d 50 01             	lea    edx,[eax+0x1]
c000f2fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f302:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f306:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f30a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f30e:	8d 50 01             	lea    edx,[eax+0x1]
c000f311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f315:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f319:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f31d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f321:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f326:	83 f8 02             	cmp    eax,0x2
c000f329:	0f 86 51 03 00 00    	jbe    c000f680 <scanMADT()+0x4ac>
c000f32f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f334:	85 c0                	test   eax,eax
c000f336:	75 58                	jne    c000f390 <scanMADT()+0x1bc>
c000f338:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f33c:	8d 50 01             	lea    edx,[eax+0x1]
c000f33f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f343:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f349:	0f b6 d2             	movzx  edx,dl
c000f34c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f350:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f354:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f35a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35e:	8d 50 01             	lea    edx,[eax+0x1]
c000f361:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f365:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f36b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f36e:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f374:	0f b6 d2             	movzx  edx,dl
c000f377:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f37b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f37f:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f385:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f38a:	e9 d9 02 00 00       	jmp    c000f668 <scanMADT()+0x494>
c000f38f:	90                   	nop
c000f390:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f395:	83 f8 01             	cmp    eax,0x1
c000f398:	0f 85 1a 01 00 00    	jne    c000f4b8 <scanMADT()+0x2e4>
c000f39e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f3a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3a9:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f3af:	0f b6 d2             	movzx  edx,dl
c000f3b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3ba:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3c0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3cd:	01 d0                	add    eax,edx
c000f3cf:	83 c0 2c             	add    eax,0x2c
c000f3d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f3d4:	0f b6 d0             	movzx  edx,al
c000f3d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3db:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3e6:	0f b6 c0             	movzx  eax,al
c000f3e9:	c1 e0 08             	shl    eax,0x8
c000f3ec:	89 d1                	mov    ecx,edx
c000f3ee:	09 c1                	or     ecx,eax
c000f3f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f4:	8d 50 02             	lea    edx,[eax+0x2]
c000f3f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3fb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3ff:	0f b6 c0             	movzx  eax,al
c000f402:	c1 e0 10             	shl    eax,0x10
c000f405:	09 c1                	or     ecx,eax
c000f407:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f40b:	8d 50 03             	lea    edx,[eax+0x3]
c000f40e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f412:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f416:	0f b6 c0             	movzx  eax,al
c000f419:	c1 e0 18             	shl    eax,0x18
c000f41c:	09 c1                	or     ecx,eax
c000f41e:	89 ca                	mov    edx,ecx
c000f420:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f425:	0f b6 c0             	movzx  eax,al
c000f428:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f42f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f434:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f438:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f43c:	01 d0                	add    eax,edx
c000f43e:	83 c0 2c             	add    eax,0x2c
c000f441:	8a 00                	mov    al,BYTE PTR [eax]
c000f443:	0f b6 d0             	movzx  edx,al
c000f446:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f44a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f44d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f451:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f455:	0f b6 c0             	movzx  eax,al
c000f458:	c1 e0 08             	shl    eax,0x8
c000f45b:	89 d1                	mov    ecx,edx
c000f45d:	09 c1                	or     ecx,eax
c000f45f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f463:	8d 50 02             	lea    edx,[eax+0x2]
c000f466:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f46a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f46e:	0f b6 c0             	movzx  eax,al
c000f471:	c1 e0 10             	shl    eax,0x10
c000f474:	09 c1                	or     ecx,eax
c000f476:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f47a:	8d 50 03             	lea    edx,[eax+0x3]
c000f47d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f481:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f485:	0f b6 c0             	movzx  eax,al
c000f488:	c1 e0 18             	shl    eax,0x18
c000f48b:	09 c1                	or     ecx,eax
c000f48d:	89 ca                	mov    edx,ecx
c000f48f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f494:	0f b6 c0             	movzx  eax,al
c000f497:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f49e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4a3:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4a8:	83 c0 01             	add    eax,0x1
c000f4ab:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f4b0:	e9 b3 01 00 00       	jmp    c000f668 <scanMADT()+0x494>
c000f4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4bd:	83 f8 02             	cmp    eax,0x2
c000f4c0:	0f 85 ea 00 00 00    	jne    c000f5b0 <scanMADT()+0x3dc>
c000f4c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ca:	8d 50 01             	lea    edx,[eax+0x1]
c000f4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4d9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e1:	8d 50 01             	lea    edx,[eax+0x1]
c000f4e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4ec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4f0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4fc:	01 d0                	add    eax,edx
c000f4fe:	83 c0 2c             	add    eax,0x2c
c000f501:	8a 00                	mov    al,BYTE PTR [eax]
c000f503:	0f b6 d0             	movzx  edx,al
c000f506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f50d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f511:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f515:	0f b6 c0             	movzx  eax,al
c000f518:	c1 e0 08             	shl    eax,0x8
c000f51b:	89 d1                	mov    ecx,edx
c000f51d:	09 c1                	or     ecx,eax
c000f51f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f523:	8d 50 02             	lea    edx,[eax+0x2]
c000f526:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f52a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f52e:	0f b6 c0             	movzx  eax,al
c000f531:	c1 e0 10             	shl    eax,0x10
c000f534:	09 c1                	or     ecx,eax
c000f536:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f53a:	8d 50 03             	lea    edx,[eax+0x3]
c000f53d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f541:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f545:	0f b6 c0             	movzx  eax,al
c000f548:	c1 e0 18             	shl    eax,0x18
c000f54b:	09 c8                	or     eax,ecx
c000f54d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f551:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f556:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f55a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55e:	01 d0                	add    eax,edx
c000f560:	83 c0 2c             	add    eax,0x2c
c000f563:	8a 00                	mov    al,BYTE PTR [eax]
c000f565:	0f b6 d0             	movzx  edx,al
c000f568:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f56c:	8d 48 01             	lea    ecx,[eax+0x1]
c000f56f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f573:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f577:	0f b6 c0             	movzx  eax,al
c000f57a:	c1 e0 08             	shl    eax,0x8
c000f57d:	09 d0                	or     eax,edx
c000f57f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f584:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f589:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f58e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f592:	88 90 a8 31 02 c0    	mov    BYTE PTR [eax-0x3ffdce58],dl
c000f598:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f59d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f5a2:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f5aa:	e9 b9 00 00 00       	jmp    c000f668 <scanMADT()+0x494>
c000f5af:	90                   	nop
c000f5b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5b5:	83 f8 04             	cmp    eax,0x4
c000f5b8:	0f 85 9a 00 00 00    	jne    c000f658 <scanMADT()+0x484>
c000f5be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5d1:	0f b6 c0             	movzx  eax,al
c000f5d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e0:	01 d0                	add    eax,edx
c000f5e2:	83 c0 2c             	add    eax,0x2c
c000f5e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f5e7:	0f b6 d0             	movzx  edx,al
c000f5ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ee:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5f5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5f9:	0f b6 c0             	movzx  eax,al
c000f5fc:	c1 e0 08             	shl    eax,0x8
c000f5ff:	09 d0                	or     eax,edx
c000f601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f605:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60e:	8d 50 01             	lea    edx,[eax+0x1]
c000f611:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f615:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f619:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f61d:	0f b6 c0             	movzx  eax,al
c000f620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f628:	c1 e0 08             	shl    eax,0x8
c000f62b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f62f:	89 c1                	mov    ecx,eax
c000f631:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f635:	c1 e0 18             	shl    eax,0x18
c000f638:	89 c3                	mov    ebx,eax
c000f63a:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f63f:	8d 50 01             	lea    edx,[eax+0x1]
c000f642:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f648:	09 d9                	or     ecx,ebx
c000f64a:	89 ca                	mov    edx,ecx
c000f64c:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f653:	eb 13                	jmp    c000f668 <scanMADT()+0x494>
c000f655:	8d 76 00             	lea    esi,[esi+0x0]
c000f658:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f65d:	83 f8 05             	cmp    eax,0x5
c000f660:	75 06                	jne    c000f668 <scanMADT()+0x494>
c000f662:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f667:	90                   	nop
c000f668:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f66d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f671:	01 d0                	add    eax,edx
c000f673:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f677:	e9 50 fc ff ff       	jmp    c000f2cc <scanMADT()+0xf8>
c000f67c:	90                   	nop
c000f67d:	eb 05                	jmp    c000f684 <scanMADT()+0x4b0>
c000f67f:	90                   	nop
c000f680:	90                   	nop
c000f681:	8d 76 00             	lea    esi,[esi+0x0]
c000f684:	83 c4 38             	add    esp,0x38
c000f687:	5b                   	pop    ebx
c000f688:	c3                   	ret    
c000f689:	90                   	nop
c000f68a:	66 90                	xchg   ax,ax

c000f68c <ACPI::ACPI()>:
c000f68c:	83 ec 0c             	sub    esp,0xc
c000f68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f693:	83 ec 08             	sub    esp,0x8
c000f696:	68 b1 1a 02 c0       	push   0xc0021ab1
c000f69b:	50                   	push   eax
c000f69c:	e8 3b d2 ff ff       	call   c000c8dc <Device::Device(char const*)>
c000f6a1:	83 c4 10             	add    esp,0x10
c000f6a4:	ba 04 1c 02 c0       	mov    edx,0xc0021c04
c000f6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ad:	89 10                	mov    DWORD PTR [eax],edx
c000f6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6be:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6cc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6d6:	e8 f9 fa ff ff       	call   c000f1d4 <scanMADT()>
c000f6db:	90                   	nop
c000f6dc:	83 c4 0c             	add    esp,0xc
c000f6df:	c3                   	ret    

c000f6e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6e0:	83 ec 2c             	sub    esp,0x2c
c000f6e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f6e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f6ef:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f6f3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6f8:	88 c8                	mov    al,cl
c000f6fa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6fe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f703:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f70b:	90                   	nop
c000f70c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f710:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f716:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f71a:	0f 8d b0 00 00 00    	jge    c000f7d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f720:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f724:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f728:	83 c2 2a             	add    edx,0x2a
c000f72b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f72f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f734:	0f b7 c0             	movzx  eax,ax
c000f737:	39 c2                	cmp    edx,eax
c000f739:	0f 85 85 00 00 00    	jne    c000f7c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f73f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f743:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f747:	83 c2 2a             	add    edx,0x2a
c000f74a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f74e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f753:	0f b6 c0             	movzx  eax,al
c000f756:	39 c2                	cmp    edx,eax
c000f758:	75 6a                	jne    c000f7c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f75a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f75f:	85 c0                	test   eax,eax
c000f761:	74 3d                	je     c000f7a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f763:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f767:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f76b:	83 c2 2a             	add    edx,0x2a
c000f76e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f772:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f779:	39 c2                	cmp    edx,eax
c000f77b:	74 13                	je     c000f790 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f77d:	83 ec 0c             	sub    esp,0xc
c000f780:	68 2c 1a 02 c0       	push   0xc0021a2c
c000f785:	e8 57 1b 00 00       	call   c00112e1 <KePanic(char const*)>
c000f78a:	83 c4 10             	add    esp,0x10
c000f78d:	8d 76 00             	lea    esi,[esi+0x0]
c000f790:	83 ec 0c             	sub    esp,0xc
c000f793:	68 b6 1a 02 c0       	push   0xc0021ab6
c000f798:	e8 44 1b 00 00       	call   c00112e1 <KePanic(char const*)>
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7ac:	83 c2 2a             	add    edx,0x2a
c000f7af:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f7b3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7b5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7b8:	89 01                	mov    DWORD PTR [ecx],eax
c000f7ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7bd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7c2:	66 90                	xchg   ax,ax
c000f7c4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7c9:	e9 3e ff ff ff       	jmp    c000f70c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7ce:	66 90                	xchg   ax,ax
c000f7d0:	90                   	nop
c000f7d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7d5:	83 c4 2c             	add    esp,0x2c
c000f7d8:	c2 04 00             	ret    0x4
c000f7db:	90                   	nop

c000f7dc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7dc:	83 ec 1c             	sub    esp,0x1c
c000f7df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7f0:	88 c8                	mov    al,cl
c000f7f2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7f6:	88 d0                	mov    al,dl
c000f7f8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f800:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f80a:	83 c2 2a             	add    edx,0x2a
c000f80d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f811:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f819:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f823:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f826:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f82a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f833:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f839:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f83d:	83 c0 01             	add    eax,0x1
c000f840:	88 c1                	mov    cl,al
c000f842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f846:	83 c2 2a             	add    edx,0x2a
c000f849:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f84d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f851:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f85b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f85e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f862:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f86a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f870:	8d 50 01             	lea    edx,[eax+0x1]
c000f873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f877:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f881:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f887:	3d 00 02 00 00       	cmp    eax,0x200
c000f88c:	75 12                	jne    c000f8a0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f88e:	83 ec 0c             	sub    esp,0xc
c000f891:	68 c5 1a 02 c0       	push   0xc0021ac5
c000f896:	e8 46 1a 00 00       	call   c00112e1 <KePanic(char const*)>
c000f89b:	83 c4 10             	add    esp,0x10
c000f89e:	66 90                	xchg   ax,ax
c000f8a0:	90                   	nop
c000f8a1:	83 c4 1c             	add    esp,0x1c
c000f8a4:	c3                   	ret    
c000f8a5:	90                   	nop
c000f8a6:	66 90                	xchg   ax,ax

c000f8a8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f8a8:	b8 00 00 00 00       	mov    eax,0x0
c000f8ad:	c3                   	ret    
c000f8ae:	66 90                	xchg   ax,ax

c000f8b0 <ACPI::detectPCI()>:
c000f8b0:	53                   	push   ebx
c000f8b1:	83 ec 28             	sub    esp,0x28
c000f8b4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8b9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f8be:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8c3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8c9:	83 e0 04             	and    eax,0x4
c000f8cc:	0f b6 c0             	movzx  eax,al
c000f8cf:	85 c0                	test   eax,eax
c000f8d1:	74 2d                	je     c000f900 <ACPI::detectPCI()+0x50>
c000f8d3:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8d8:	83 ec 08             	sub    esp,0x8
c000f8db:	68 e2 1a 02 c0       	push   0xc0021ae2
c000f8e0:	50                   	push   eax
c000f8e1:	e8 6e f8 ff ff       	call   c000f154 <findDataTable(unsigned char*, char*)>
c000f8e6:	83 c4 10             	add    esp,0x10
c000f8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8ed:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8f2:	74 0c                	je     c000f900 <ACPI::detectPCI()+0x50>
c000f8f4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8f9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8fe:	66 90                	xchg   ax,ax
c000f900:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f90c:	8a 00                	mov    al,BYTE PTR [eax]
c000f90e:	0f b6 c0             	movzx  eax,al
c000f911:	83 f8 01             	cmp    eax,0x1
c000f914:	75 0e                	jne    c000f924 <ACPI::detectPCI()+0x74>
c000f916:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f91b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f920:	eb 2e                	jmp    c000f950 <ACPI::detectPCI()+0xa0>
c000f922:	66 90                	xchg   ax,ax
c000f924:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f928:	8a 00                	mov    al,BYTE PTR [eax]
c000f92a:	0f b6 c0             	movzx  eax,al
c000f92d:	83 f8 02             	cmp    eax,0x2
c000f930:	75 1e                	jne    c000f950 <ACPI::detectPCI()+0xa0>
c000f932:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f937:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f93c:	85 c0                	test   eax,eax
c000f93e:	74 10                	je     c000f950 <ACPI::detectPCI()+0xa0>
c000f940:	83 ec 0c             	sub    esp,0xc
c000f943:	68 5c 1a 02 c0       	push   0xc0021a5c
c000f948:	e8 94 19 00 00       	call   c00112e1 <KePanic(char const*)>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f954:	83 f0 01             	xor    eax,0x1
c000f957:	0f b6 c0             	movzx  eax,al
c000f95a:	85 c0                	test   eax,eax
c000f95c:	74 46                	je     c000f9a4 <ACPI::detectPCI()+0xf4>
c000f95e:	e8 cd 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f963:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f967:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f96c:	75 0e                	jne    c000f97c <ACPI::detectPCI()+0xcc>
c000f96e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f973:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f978:	eb 2a                	jmp    c000f9a4 <ACPI::detectPCI()+0xf4>
c000f97a:	66 90                	xchg   ax,ax
c000f97c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f981:	75 21                	jne    c000f9a4 <ACPI::detectPCI()+0xf4>
c000f983:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f988:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f98d:	85 c0                	test   eax,eax
c000f98f:	74 13                	je     c000f9a4 <ACPI::detectPCI()+0xf4>
c000f991:	83 ec 0c             	sub    esp,0xc
c000f994:	68 5c 1a 02 c0       	push   0xc0021a5c
c000f999:	e8 43 19 00 00       	call   c00112e1 <KePanic(char const*)>
c000f99e:	83 c4 10             	add    esp,0x10
c000f9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9a4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9a9:	85 c0                	test   eax,eax
c000f9ab:	0f 84 87 00 00 00    	je     c000fa38 <ACPI::detectPCI()+0x188>
c000f9b1:	83 ec 0c             	sub    esp,0xc
c000f9b4:	68 e7 1a 02 c0       	push   0xc0021ae7
c000f9b9:	e8 4f 12 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c000f9be:	83 c4 10             	add    esp,0x10
c000f9c1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9c9:	83 ec 0c             	sub    esp,0xc
c000f9cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9d0:	e8 fe 80 ff ff       	call   c0007ad3 <malloc>
c000f9d5:	83 c4 10             	add    esp,0x10
c000f9d8:	89 c3                	mov    ebx,eax
c000f9da:	83 ec 0c             	sub    esp,0xc
c000f9dd:	53                   	push   ebx
c000f9de:	e8 eb b2 00 00       	call   c001acce <PCI::PCI()>
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ee:	83 ec 08             	sub    esp,0x8
c000f9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9f5:	50                   	push   eax
c000f9f6:	e8 49 cd ff ff       	call   c000c744 <Device::addChild(Device*)>
c000f9fb:	83 c4 10             	add    esp,0x10
c000f9fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa04:	83 c0 08             	add    eax,0x8
c000fa07:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa09:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fa0e:	85 d2                	test   edx,edx
c000fa10:	74 0a                	je     c000fa1c <ACPI::detectPCI()+0x16c>
c000fa12:	ba 01 00 00 00       	mov    edx,0x1
c000fa17:	eb 0b                	jmp    c000fa24 <ACPI::detectPCI()+0x174>
c000fa19:	8d 76 00             	lea    esi,[esi+0x0]
c000fa1c:	ba 02 00 00 00       	mov    edx,0x2
c000fa21:	8d 76 00             	lea    esi,[esi+0x0]
c000fa24:	6a 00                	push   0x0
c000fa26:	6a 00                	push   0x0
c000fa28:	52                   	push   edx
c000fa29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa2d:	ff d0                	call   eax
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	e9 91 00 00 00       	jmp    c000fac8 <ACPI::detectPCI()+0x218>
c000fa37:	90                   	nop
c000fa38:	83 ec 0c             	sub    esp,0xc
c000fa3b:	68 ff 1a 02 c0       	push   0xc0021aff
c000fa40:	e8 c8 11 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa4f:	83 ec 0c             	sub    esp,0xc
c000fa52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa56:	e8 78 80 ff ff       	call   c0007ad3 <malloc>
c000fa5b:	83 c4 10             	add    esp,0x10
c000fa5e:	89 c3                	mov    ebx,eax
c000fa60:	83 ec 0c             	sub    esp,0xc
c000fa63:	53                   	push   ebx
c000fa64:	e8 0d be 00 00       	call   c001b876 <IDE::IDE()>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa74:	83 ec 08             	sub    esp,0x8
c000fa77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa7b:	50                   	push   eax
c000fa7c:	e8 c3 cc ff ff       	call   c000c744 <Device::addChild(Device*)>
c000fa81:	83 c4 10             	add    esp,0x10
c000fa84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa88:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa96:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faa3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000faac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fab0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab2:	83 c0 08             	add    eax,0x8
c000fab5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab7:	6a 00                	push   0x0
c000fab9:	6a 00                	push   0x0
c000fabb:	6a 00                	push   0x0
c000fabd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fac1:	ff d0                	call   eax
c000fac3:	83 c4 10             	add    esp,0x10
c000fac6:	66 90                	xchg   ax,ax
c000fac8:	90                   	nop
c000fac9:	83 c4 28             	add    esp,0x28
c000facc:	5b                   	pop    ebx
c000facd:	c3                   	ret    
c000face:	66 90                	xchg   ax,ax

c000fad0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fad0:	83 ec 1c             	sub    esp,0x1c
c000fad3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fad7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fada:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fade:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fae3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fae8:	83 ec 08             	sub    esp,0x8
c000faeb:	52                   	push   edx
c000faec:	50                   	push   eax
c000faed:	e8 a8 76 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000faf2:	83 c4 10             	add    esp,0x10
c000faf5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000faf9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fafe:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb03:	83 ec 04             	sub    esp,0x4
c000fb06:	6a 01                	push   0x1
c000fb08:	52                   	push   edx
c000fb09:	50                   	push   eax
c000fb0a:	e8 a3 77 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fb0f:	83 c4 10             	add    esp,0x10
c000fb12:	90                   	nop
c000fb13:	83 c4 1c             	add    esp,0x1c
c000fb16:	c3                   	ret    
c000fb17:	90                   	nop

c000fb18 <ACPI::sleep()>:
c000fb18:	83 ec 0c             	sub    esp,0xc
c000fb1b:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb20:	85 c0                	test   eax,eax
c000fb22:	74 08                	je     c000fb2c <ACPI::sleep()+0x14>
c000fb24:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb29:	ff d0                	call   eax
c000fb2b:	90                   	nop
c000fb2c:	90                   	nop
c000fb2d:	83 c4 0c             	add    esp,0xc
c000fb30:	c3                   	ret    
c000fb31:	90                   	nop
c000fb32:	66 90                	xchg   ax,ax

c000fb34 <ACPI::open(int, int, void*)>:
c000fb34:	55                   	push   ebp
c000fb35:	89 e5                	mov    ebp,esp
c000fb37:	53                   	push   ebx
c000fb38:	81 ec 74 01 00 00    	sub    esp,0x174
c000fb3e:	83 ec 0c             	sub    esp,0xc
c000fb41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb44:	e8 67 fd ff ff       	call   c000f8b0 <ACPI::detectPCI()>
c000fb49:	83 c4 10             	add    esp,0x10
c000fb4c:	83 ec 0c             	sub    esp,0xc
c000fb4f:	68 84 1a 02 c0       	push   0xc0021a84
c000fb54:	e8 b4 10 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb61:	8a 00                	mov    al,BYTE PTR [eax]
c000fb63:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fb66:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb6a:	83 f8 01             	cmp    eax,0x1
c000fb6d:	75 15                	jne    c000fb84 <ACPI::open(int, int, void*)+0x50>
c000fb6f:	83 ec 0c             	sub    esp,0xc
c000fb72:	68 d1 13 02 c0       	push   0xc00213d1
c000fb77:	e8 76 4b 00 00       	call   c00146f2 <Thr::loadKernelSymbolTable(char const*)>
c000fb7c:	83 c4 10             	add    esp,0x10
c000fb7f:	eb 33                	jmp    c000fbb4 <ACPI::open(int, int, void*)+0x80>
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb88:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb8d:	75 15                	jne    c000fba4 <ACPI::open(int, int, void*)+0x70>
c000fb8f:	83 ec 0c             	sub    esp,0xc
c000fb92:	68 14 1b 02 c0       	push   0xc0021b14
c000fb97:	e8 56 4b 00 00       	call   c00146f2 <Thr::loadKernelSymbolTable(char const*)>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	eb 13                	jmp    c000fbb4 <ACPI::open(int, int, void*)+0x80>
c000fba1:	8d 76 00             	lea    esi,[esi+0x0]
c000fba4:	83 ec 0c             	sub    esp,0xc
c000fba7:	68 32 1b 02 c0       	push   0xc0021b32
c000fbac:	e8 30 17 00 00       	call   c00112e1 <KePanic(char const*)>
c000fbb1:	83 c4 10             	add    esp,0x10
c000fbb4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fbb8:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fbbf:	83 ec 0c             	sub    esp,0xc
c000fbc2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fbc5:	e8 09 7f ff ff       	call   c0007ad3 <malloc>
c000fbca:	83 c4 10             	add    esp,0x10
c000fbcd:	89 c3                	mov    ebx,eax
c000fbcf:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbd4:	83 ec 04             	sub    esp,0x4
c000fbd7:	50                   	push   eax
c000fbd8:	68 4c 1b 02 c0       	push   0xc0021b4c
c000fbdd:	53                   	push   ebx
c000fbde:	e8 39 bc ff ff       	call   c000b81c <File::File(char const*, Process*)>
c000fbe3:	83 c4 10             	add    esp,0x10
c000fbe6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fbe9:	83 ec 08             	sub    esp,0x8
c000fbec:	6a 01                	push   0x1
c000fbee:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbf1:	e8 ee bc ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c000fbf6:	83 c4 10             	add    esp,0x10
c000fbf9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fbfc:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fc00:	75 12                	jne    c000fc14 <ACPI::open(int, int, void*)+0xe0>
c000fc02:	83 ec 0c             	sub    esp,0xc
c000fc05:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc08:	e8 35 bd ff ff       	call   c000b942 <File::close()>
c000fc0d:	83 c4 10             	add    esp,0x10
c000fc10:	eb 06                	jmp    c000fc18 <ACPI::open(int, int, void*)+0xe4>
c000fc12:	66 90                	xchg   ax,ax
c000fc14:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc18:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fc1c:	74 16                	je     c000fc34 <ACPI::open(int, int, void*)+0x100>
c000fc1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc21:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc23:	83 c0 08             	add    eax,0x8
c000fc26:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc2e:	ff d0                	call   eax
c000fc30:	83 c4 10             	add    esp,0x10
c000fc33:	90                   	nop
c000fc34:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fc37:	83 f0 01             	xor    eax,0x1
c000fc3a:	0f b6 c0             	movzx  eax,al
c000fc3d:	85 c0                	test   eax,eax
c000fc3f:	74 3b                	je     c000fc7c <ACPI::open(int, int, void*)+0x148>
c000fc41:	83 ec 0c             	sub    esp,0xc
c000fc44:	68 6a 1b 02 c0       	push   0xc0021b6a
c000fc49:	e8 bf 0f 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c000fc4e:	83 c4 10             	add    esp,0x10
c000fc51:	83 ec 04             	sub    esp,0x4
c000fc54:	6a 0c                	push   0xc
c000fc56:	68 85 1b 02 c0       	push   0xc0021b85
c000fc5b:	68 96 1b 02 c0       	push   0xc0021b96
c000fc60:	e8 39 3d 00 00       	call   c001399e <Reg::readIntWithDefault(char*, char*, int)>
c000fc65:	83 c4 10             	add    esp,0x10
c000fc68:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fc6b:	83 ec 0c             	sub    esp,0xc
c000fc6e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fc71:	e8 a4 9b ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fc76:	83 c4 10             	add    esp,0x10
c000fc79:	8d 76 00             	lea    esi,[esi+0x0]
c000fc7c:	83 ec 0c             	sub    esp,0xc
c000fc7f:	68 95 06 02 c0       	push   0xc0020695
c000fc84:	e8 84 0f 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c000fc89:	83 c4 10             	add    esp,0x10
c000fc8c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc8f:	83 ec 08             	sub    esp,0x8
c000fc92:	6a 13                	push   0x13
c000fc94:	50                   	push   eax
c000fc95:	e8 c2 cd ff ff       	call   c000ca5c <getDevicesOfType(DeviceType)>
c000fc9a:	83 c4 0c             	add    esp,0xc
c000fc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fca6:	50                   	push   eax
c000fca7:	e8 d4 fd 00 00       	call   c001fa80 <LinkedList<Device>::isEmpty()>
c000fcac:	83 c4 10             	add    esp,0x10
c000fcaf:	83 f0 01             	xor    eax,0x1
c000fcb2:	0f b6 c0             	movzx  eax,al
c000fcb5:	85 c0                	test   eax,eax
c000fcb7:	0f 84 1f 01 00 00    	je     c000fddc <ACPI::open(int, int, void*)+0x2a8>
c000fcbd:	83 ec 0c             	sub    esp,0xc
c000fcc0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcc3:	50                   	push   eax
c000fcc4:	e8 d3 fd 00 00       	call   c001fa9c <LinkedList<Device>::getFirstElement()>
c000fcc9:	83 c4 10             	add    esp,0x10
c000fccc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fccf:	83 ec 0c             	sub    esp,0xc
c000fcd2:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcd5:	50                   	push   eax
c000fcd6:	e8 c9 fd 00 00       	call   c001faa4 <LinkedList<Device>::removeFirst()>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fce1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fce4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fce7:	b8 24 00 00 00       	mov    eax,0x24
c000fcec:	83 e0 fc             	and    eax,0xfffffffc
c000fcef:	89 c3                	mov    ebx,eax
c000fcf1:	b8 00 00 00 00       	mov    eax,0x0
c000fcf6:	66 90                	xchg   ax,ax
c000fcf8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fcff:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fd06:	83 c0 04             	add    eax,0x4
c000fd09:	39 d8                	cmp    eax,ebx
c000fd0b:	72 eb                	jb     c000fcf8 <ACPI::open(int, int, void*)+0x1c4>
c000fd0d:	83 ec 08             	sub    esp,0x8
c000fd10:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fd16:	50                   	push   eax
c000fd17:	83 ec 24             	sub    esp,0x24
c000fd1a:	89 e1                	mov    ecx,esp
c000fd1c:	b8 24 00 00 00       	mov    eax,0x24
c000fd21:	83 e0 fc             	and    eax,0xfffffffc
c000fd24:	89 c3                	mov    ebx,eax
c000fd26:	b8 00 00 00 00       	mov    eax,0x0
c000fd2b:	90                   	nop
c000fd2c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fd33:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fd36:	83 c0 04             	add    eax,0x4
c000fd39:	39 d8                	cmp    eax,ebx
c000fd3b:	72 ef                	jb     c000fd2c <ACPI::open(int, int, void*)+0x1f8>
c000fd3d:	e8 74 b4 00 00       	call   c001b1b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd42:	83 c4 30             	add    esp,0x30
c000fd45:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fd48:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fd4c:	0f 84 4e ff ff ff    	je     c000fca0 <ACPI::open(int, int, void*)+0x16c>
c000fd52:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fd59:	83 ec 0c             	sub    esp,0xc
c000fd5c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fd5f:	e8 6f 7d ff ff       	call   c0007ad3 <malloc>
c000fd64:	83 c4 10             	add    esp,0x10
c000fd67:	89 c3                	mov    ebx,eax
c000fd69:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd6e:	83 ec 04             	sub    esp,0x4
c000fd71:	50                   	push   eax
c000fd72:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd75:	53                   	push   ebx
c000fd76:	e8 a1 ba ff ff       	call   c000b81c <File::File(char const*, Process*)>
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fd81:	83 ec 0c             	sub    esp,0xc
c000fd84:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd87:	e8 1c be ff ff       	call   c000bba8 <File::exists()>
c000fd8c:	83 c4 10             	add    esp,0x10
c000fd8f:	0f b6 c0             	movzx  eax,al
c000fd92:	85 c0                	test   eax,eax
c000fd94:	74 22                	je     c000fdb8 <ACPI::open(int, int, void*)+0x284>
c000fd96:	83 ec 08             	sub    esp,0x8
c000fd99:	6a 01                	push   0x1
c000fd9b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd9e:	e8 d1 53 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	83 ec 08             	sub    esp,0x8
c000fda9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fdac:	50                   	push   eax
c000fdad:	e8 02 56 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c000fdb2:	83 c4 10             	add    esp,0x10
c000fdb5:	8d 76 00             	lea    esi,[esi+0x0]
c000fdb8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fdbc:	0f 84 de fe ff ff    	je     c000fca0 <ACPI::open(int, int, void*)+0x16c>
c000fdc2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fdc5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc7:	83 c0 08             	add    eax,0x8
c000fdca:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdcc:	83 ec 0c             	sub    esp,0xc
c000fdcf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fdd2:	ff d0                	call   eax
c000fdd4:	83 c4 10             	add    esp,0x10
c000fdd7:	e9 c4 fe ff ff       	jmp    c000fca0 <ACPI::open(int, int, void*)+0x16c>
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fde2:	50                   	push   eax
c000fde3:	e8 94 fc 00 00       	call   c001fa7c <LinkedList<Device>::~LinkedList()>
c000fde8:	83 c4 10             	add    esp,0x10
c000fdeb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fdf1:	83 ec 08             	sub    esp,0x8
c000fdf4:	6a 01                	push   0x1
c000fdf6:	68 9d 1b 02 c0       	push   0xc0021b9d
c000fdfb:	e8 74 53 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	83 ec 08             	sub    esp,0x8
c000fe06:	53                   	push   ebx
c000fe07:	50                   	push   eax
c000fe08:	e8 a7 55 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c000fe0d:	83 c4 10             	add    esp,0x10
c000fe10:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe15:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe1b:	83 e0 04             	and    eax,0x4
c000fe1e:	0f b6 c0             	movzx  eax,al
c000fe21:	85 c0                	test   eax,eax
c000fe23:	0f 84 e3 00 00 00    	je     c000ff0c <ACPI::open(int, int, void*)+0x3d8>
c000fe29:	83 ec 0c             	sub    esp,0xc
c000fe2c:	68 ba 1b 02 c0       	push   0xc0021bba
c000fe31:	e8 d7 0d 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c000fe36:	83 c4 10             	add    esp,0x10
c000fe39:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fe40:	83 ec 0c             	sub    esp,0xc
c000fe43:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fe46:	e8 88 7c ff ff       	call   c0007ad3 <malloc>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	89 c3                	mov    ebx,eax
c000fe50:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe55:	83 ec 04             	sub    esp,0x4
c000fe58:	50                   	push   eax
c000fe59:	68 d7 1b 02 c0       	push   0xc0021bd7
c000fe5e:	53                   	push   ebx
c000fe5f:	e8 b8 b9 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c000fe64:	83 c4 10             	add    esp,0x10
c000fe67:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fe6a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe6e:	74 1c                	je     c000fe8c <ACPI::open(int, int, void*)+0x358>
c000fe70:	83 ec 0c             	sub    esp,0xc
c000fe73:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe76:	e8 2d bd ff ff       	call   c000bba8 <File::exists()>
c000fe7b:	83 c4 10             	add    esp,0x10
c000fe7e:	0f b6 c0             	movzx  eax,al
c000fe81:	85 c0                	test   eax,eax
c000fe83:	74 07                	je     c000fe8c <ACPI::open(int, int, void*)+0x358>
c000fe85:	b0 01                	mov    al,0x1
c000fe87:	eb 07                	jmp    c000fe90 <ACPI::open(int, int, void*)+0x35c>
c000fe89:	8d 76 00             	lea    esi,[esi+0x0]
c000fe8c:	b0 00                	mov    al,0x0
c000fe8e:	66 90                	xchg   ax,ax
c000fe90:	0f b6 c0             	movzx  eax,al
c000fe93:	85 c0                	test   eax,eax
c000fe95:	74 21                	je     c000feb8 <ACPI::open(int, int, void*)+0x384>
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	6a 01                	push   0x1
c000fe9c:	68 d7 1b 02 c0       	push   0xc0021bd7
c000fea1:	e8 ce 52 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c000fea6:	83 c4 10             	add    esp,0x10
c000fea9:	83 ec 08             	sub    esp,0x8
c000feac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000feaf:	50                   	push   eax
c000feb0:	e8 ff 54 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000febc:	74 1e                	je     c000fedc <ACPI::open(int, int, void*)+0x3a8>
c000febe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fec2:	74 18                	je     c000fedc <ACPI::open(int, int, void*)+0x3a8>
c000fec4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fec7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec9:	83 c0 08             	add    eax,0x8
c000fecc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fece:	83 ec 0c             	sub    esp,0xc
c000fed1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fed4:	ff d0                	call   eax
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	8d 76 00             	lea    esi,[esi+0x0]
c000fedc:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fee1:	83 ec 08             	sub    esp,0x8
c000fee4:	68 f4 1b 02 c0       	push   0xc0021bf4
c000fee9:	50                   	push   eax
c000feea:	e8 65 f2 ff ff       	call   c000f154 <findDataTable(unsigned char*, char*)>
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fef5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fef9:	74 11                	je     c000ff0c <ACPI::open(int, int, void*)+0x3d8>
c000fefb:	83 ec 08             	sub    esp,0x8
c000fefe:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000ff01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ff04:	e8 c7 fb ff ff       	call   c000fad0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	b8 00 00 00 00       	mov    eax,0x0
c000ff11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff14:	c9                   	leave  
c000ff15:	c3                   	ret    

c000ff16 <CPU::close(int, int, void*)>:
c000ff16:	31 c0                	xor    eax,eax
c000ff18:	c3                   	ret    
c000ff19:	90                   	nop

c000ff1a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ff1a:	60                   	pusha  
c000ff1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff27:	9c                   	pushf  
c000ff28:	fa                   	cli    
c000ff29:	0f 09                	wbinvd 
c000ff2b:	0f 30                	wrmsr  
c000ff2d:	9d                   	popf   
c000ff2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff32:	89 02                	mov    DWORD PTR [edx],eax
c000ff34:	61                   	popa   
c000ff35:	c3                   	ret    

c000ff36 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ff36:	60                   	pusha  
c000ff37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff3b:	9c                   	pushf  
c000ff3c:	fa                   	cli    
c000ff3d:	0f 09                	wbinvd 
c000ff3f:	31 c0                	xor    eax,eax
c000ff41:	31 d2                	xor    edx,edx
c000ff43:	0f 32                	rdmsr  
c000ff45:	9d                   	popf   
c000ff46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff4a:	89 02                	mov    DWORD PTR [edx],eax
c000ff4c:	61                   	popa   
c000ff4d:	c3                   	ret    

c000ff4e <CPU::AMD_K6_writeback(int, int, int)>:
c000ff4e:	56                   	push   esi
c000ff4f:	53                   	push   ebx
c000ff50:	83 ec 10             	sub    esp,0x10
c000ff53:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff5c:	75 5d                	jne    c000ffbb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff5e:	83 f8 08             	cmp    eax,0x8
c000ff61:	75 09                	jne    c000ff6c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff63:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff68:	7e 13                	jle    c000ff7d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff6a:	eb 30                	jmp    c000ff9c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff6c:	83 f8 06             	cmp    eax,0x6
c000ff6f:	7c 4a                	jl     c000ffbb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff71:	83 f8 07             	cmp    eax,0x7
c000ff74:	7e 07                	jle    c000ff7d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff76:	83 f8 09             	cmp    eax,0x9
c000ff79:	74 21                	je     c000ff9c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff7b:	eb 3e                	jmp    c000ffbb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff7d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff83:	89 e6                	mov    esi,esp
c000ff85:	56                   	push   esi
c000ff86:	68 82 00 00 c0       	push   0xc0000082
c000ff8b:	e8 a6 ff ff ff       	call   c000ff36 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff90:	c1 eb 15             	shr    ebx,0x15
c000ff93:	56                   	push   esi
c000ff94:	83 e3 7e             	and    ebx,0x7e
c000ff97:	6a 00                	push   0x0
c000ff99:	53                   	push   ebx
c000ff9a:	eb 12                	jmp    c000ffae <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff9c:	89 e3                	mov    ebx,esp
c000ff9e:	53                   	push   ebx
c000ff9f:	68 82 00 00 c0       	push   0xc0000082
c000ffa4:	e8 8d ff ff ff       	call   c000ff36 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ffa9:	53                   	push   ebx
c000ffaa:	6a 00                	push   0x0
c000ffac:	6a 00                	push   0x0
c000ffae:	68 82 00 00 c0       	push   0xc0000082
c000ffb3:	e8 62 ff ff ff       	call   c000ff1a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ffb8:	83 c4 18             	add    esp,0x18
c000ffbb:	83 c4 10             	add    esp,0x10
c000ffbe:	5b                   	pop    ebx
c000ffbf:	5e                   	pop    esi
c000ffc0:	c3                   	ret    
c000ffc1:	90                   	nop

c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ffc2:	55                   	push   ebp
c000ffc3:	57                   	push   edi
c000ffc4:	56                   	push   esi
c000ffc5:	53                   	push   ebx
c000ffc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffca:	39 05 b8 31 02 c0    	cmp    DWORD PTR ds:0xc00231b8,eax
c000ffd0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ffd4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ffd8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ffdc:	75 23                	jne    c0010001 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ffde:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ffe3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffe7:	89 06                	mov    DWORD PTR [esi],eax
c000ffe9:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ffee:	89 07                	mov    DWORD PTR [edi],eax
c000fff0:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000fff5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fff8:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000fffd:	89 02                	mov    DWORD PTR [edx],eax
c000ffff:	eb 3f                	jmp    c0010040 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010001:	31 c9                	xor    ecx,ecx
c0010003:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010007:	0f a2                	cpuid  
c0010009:	89 06                	mov    DWORD PTR [esi],eax
c001000b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001000f:	89 1f                	mov    DWORD PTR [edi],ebx
c0010011:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010014:	89 10                	mov    DWORD PTR [eax],edx
c0010016:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001001a:	a3 b8 31 02 c0       	mov    ds:0xc00231b8,eax
c001001f:	8b 06                	mov    eax,DWORD PTR [esi]
c0010021:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c0010026:	8b 07                	mov    eax,DWORD PTR [edi]
c0010028:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c001002d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010030:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c0010035:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010039:	8b 00                	mov    eax,DWORD PTR [eax]
c001003b:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c0010040:	5b                   	pop    ebx
c0010041:	5e                   	pop    esi
c0010042:	5f                   	pop    edi
c0010043:	5d                   	pop    ebp
c0010044:	c3                   	ret    
c0010045:	90                   	nop

c0010046 <CPU::cpuidCheckEDX(unsigned int)>:
c0010046:	83 ec 10             	sub    esp,0x10
c0010049:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001004d:	50                   	push   eax
c001004e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010052:	50                   	push   eax
c0010053:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010057:	50                   	push   eax
c0010058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005c:	50                   	push   eax
c001005d:	6a 01                	push   0x1
c001005f:	e8 5e ff ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010064:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010068:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001006c:	0f 95 c0             	setne  al
c001006f:	83 c4 24             	add    esp,0x24
c0010072:	c3                   	ret    
c0010073:	90                   	nop

c0010074 <CPU::cpuidCheckECX(unsigned int)>:
c0010074:	83 ec 10             	sub    esp,0x10
c0010077:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001007b:	50                   	push   eax
c001007c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010080:	50                   	push   eax
c0010081:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010085:	50                   	push   eax
c0010086:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001008a:	50                   	push   eax
c001008b:	6a 01                	push   0x1
c001008d:	e8 30 ff ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010092:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010096:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001009a:	0f 95 c0             	setne  al
c001009d:	83 c4 24             	add    esp,0x24
c00100a0:	c3                   	ret    
c00100a1:	90                   	nop

c00100a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00100a2:	83 ec 10             	sub    esp,0x10
c00100a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100a9:	50                   	push   eax
c00100aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ae:	50                   	push   eax
c00100af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b3:	50                   	push   eax
c00100b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b8:	50                   	push   eax
c00100b9:	6a 07                	push   0x7
c00100bb:	e8 02 ff ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100c4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00100c8:	0f 95 c0             	setne  al
c00100cb:	83 c4 24             	add    esp,0x24
c00100ce:	c3                   	ret    
c00100cf:	90                   	nop

c00100d0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00100d0:	83 ec 10             	sub    esp,0x10
c00100d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100d7:	50                   	push   eax
c00100d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100dc:	50                   	push   eax
c00100dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e1:	50                   	push   eax
c00100e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e6:	50                   	push   eax
c00100e7:	6a 07                	push   0x7
c00100e9:	e8 d4 fe ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100f2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100f6:	0f 95 c0             	setne  al
c00100f9:	83 c4 24             	add    esp,0x24
c00100fc:	c3                   	ret    
c00100fd:	90                   	nop

c00100fe <CPU::CPU()>:
c00100fe:	83 ec 0c             	sub    esp,0xc
c0010101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010105:	83 ec 08             	sub    esp,0x8
c0010108:	68 19 1d 02 c0       	push   0xc0021d19
c001010d:	50                   	push   eax
c001010e:	e8 c9 c7 ff ff       	call   c000c8dc <Device::Device(char const*)>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c001011b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001011f:	89 10                	mov    DWORD PTR [eax],edx
c0010121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010125:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001012f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010133:	05 78 01 00 00       	add    eax,0x178
c0010138:	83 ec 0c             	sub    esp,0xc
c001013b:	50                   	push   eax
c001013c:	e8 3b 72 ff ff       	call   c000737c <GDT::GDT()>
c0010141:	83 c4 10             	add    esp,0x10
c0010144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010148:	05 7c 09 00 00       	add    eax,0x97c
c001014d:	83 ec 0c             	sub    esp,0xc
c0010150:	50                   	push   eax
c0010151:	e8 76 74 ff ff       	call   c00075cc <IDT::IDT()>
c0010156:	83 c4 10             	add    esp,0x10
c0010159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015d:	05 7c 11 00 00       	add    eax,0x117c
c0010162:	83 ec 0c             	sub    esp,0xc
c0010165:	50                   	push   eax
c0010166:	e8 c1 8d ff ff       	call   c0008f2c <TSS::TSS()>
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010172:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001017d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010187:	90                   	nop
c0010188:	83 c4 0c             	add    esp,0xc
c001018b:	c3                   	ret    

c001018c <CPU::displayFeatures()>:
c001018c:	c3                   	ret    
c001018d:	90                   	nop

c001018e <CPU::detectFeatures()>:
c001018e:	55                   	push   ebp
c001018f:	57                   	push   edi
c0010190:	56                   	push   esi
c0010191:	53                   	push   ebx
c0010192:	83 ec 30             	sub    esp,0x30
c0010195:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010199:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00101a3:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00101a9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00101b0:	6a 0d                	push   0xd
c00101b2:	6a 00                	push   0x0
c00101b4:	55                   	push   ebp
c00101b5:	e8 36 03 ff ff       	call   c00004f0 <memset>
c00101ba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00101bf:	83 c4 10             	add    esp,0x10
c00101c2:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00101c9:	0f 84 db 05 00 00    	je     c00107aa <CPU::detectFeatures()+0x61c>
c00101cf:	83 ec 0c             	sub    esp,0xc
c00101d2:	89 ef                	mov    edi,ebp
c00101d4:	6a 10                	push   0x10
c00101d6:	e8 6b fe ff ff       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c00101db:	83 e0 01             	and    eax,0x1
c00101de:	8d 14 00             	lea    edx,[eax+eax*1]
c00101e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101e7:	83 e0 fd             	and    eax,0xfffffffd
c00101ea:	09 d0                	or     eax,edx
c00101ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101f2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00101f9:	e8 48 fe ff ff       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c00101fe:	83 e0 01             	and    eax,0x1
c0010201:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010208:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001020e:	83 e0 fb             	and    eax,0xfffffffb
c0010211:	09 d0                	or     eax,edx
c0010213:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010219:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010220:	e8 21 fe ff ff       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c0010225:	83 e0 01             	and    eax,0x1
c0010228:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001022f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010235:	83 e0 f7             	and    eax,0xfffffff7
c0010238:	09 d0                	or     eax,edx
c001023a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010240:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010247:	e8 fa fd ff ff       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c001024c:	83 e0 01             	and    eax,0x1
c001024f:	c1 e0 04             	shl    eax,0x4
c0010252:	89 c2                	mov    edx,eax
c0010254:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001025a:	83 e0 ef             	and    eax,0xffffffef
c001025d:	09 d0                	or     eax,edx
c001025f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010265:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001026c:	e8 d5 fd ff ff       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c0010271:	83 e0 01             	and    eax,0x1
c0010274:	c1 e0 05             	shl    eax,0x5
c0010277:	89 c2                	mov    edx,eax
c0010279:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001027f:	83 e0 df             	and    eax,0xffffffdf
c0010282:	09 d0                	or     eax,edx
c0010284:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001028a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010291:	e8 b0 fd ff ff       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c0010296:	83 e0 01             	and    eax,0x1
c0010299:	8d 14 00             	lea    edx,[eax+eax*1]
c001029c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00102a2:	83 e0 fd             	and    eax,0xfffffffd
c00102a5:	09 d0                	or     eax,edx
c00102a7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00102ad:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00102b4:	e8 8d fd ff ff       	call   c0010046 <CPU::cpuidCheckEDX(unsigned int)>
c00102b9:	83 e0 01             	and    eax,0x1
c00102bc:	c1 e0 06             	shl    eax,0x6
c00102bf:	89 c2                	mov    edx,eax
c00102c1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00102c7:	83 e0 bf             	and    eax,0xffffffbf
c00102ca:	09 d0                	or     eax,edx
c00102cc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00102d2:	58                   	pop    eax
c00102d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102d7:	50                   	push   eax
c00102d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102dc:	50                   	push   eax
c00102dd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00102e1:	56                   	push   esi
c00102e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102e6:	50                   	push   eax
c00102e7:	6a 00                	push   0x0
c00102e9:	e8 d4 fc ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102ee:	b8 04 00 00 00       	mov    eax,0x4
c00102f3:	89 c1                	mov    ecx,eax
c00102f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102f7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00102fd:	89 c1                	mov    ecx,eax
c00102ff:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010303:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010305:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001030b:	89 c1                	mov    ecx,eax
c001030d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010311:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010313:	83 c4 18             	add    esp,0x18
c0010316:	68 28 1c 02 c0       	push   0xc0021c28
c001031b:	55                   	push   ebp
c001031c:	e8 5f 04 ff ff       	call   c0000780 <strcmp>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	85 c0                	test   eax,eax
c0010326:	75 0f                	jne    c0010337 <CPU::detectFeatures()+0x1a9>
c0010328:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010332:	e9 22 02 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c0010337:	50                   	push   eax
c0010338:	50                   	push   eax
c0010339:	68 35 1c 02 c0       	push   0xc0021c35
c001033e:	55                   	push   ebp
c001033f:	e8 3c 04 ff ff       	call   c0000780 <strcmp>
c0010344:	83 c4 10             	add    esp,0x10
c0010347:	85 c0                	test   eax,eax
c0010349:	74 dd                	je     c0010328 <CPU::detectFeatures()+0x19a>
c001034b:	50                   	push   eax
c001034c:	50                   	push   eax
c001034d:	68 42 1c 02 c0       	push   0xc0021c42
c0010352:	55                   	push   ebp
c0010353:	e8 28 04 ff ff       	call   c0000780 <strcmp>
c0010358:	83 c4 10             	add    esp,0x10
c001035b:	85 c0                	test   eax,eax
c001035d:	74 2a                	je     c0010389 <CPU::detectFeatures()+0x1fb>
c001035f:	50                   	push   eax
c0010360:	50                   	push   eax
c0010361:	68 4f 1c 02 c0       	push   0xc0021c4f
c0010366:	55                   	push   ebp
c0010367:	e8 14 04 ff ff       	call   c0000780 <strcmp>
c001036c:	83 c4 10             	add    esp,0x10
c001036f:	85 c0                	test   eax,eax
c0010371:	74 16                	je     c0010389 <CPU::detectFeatures()+0x1fb>
c0010373:	50                   	push   eax
c0010374:	50                   	push   eax
c0010375:	68 5c 1c 02 c0       	push   0xc0021c5c
c001037a:	55                   	push   ebp
c001037b:	e8 00 04 ff ff       	call   c0000780 <strcmp>
c0010380:	83 c4 10             	add    esp,0x10
c0010383:	85 c0                	test   eax,eax
c0010385:	74 48                	je     c00103cf <CPU::detectFeatures()+0x241>
c0010387:	eb 0f                	jmp    c0010398 <CPU::detectFeatures()+0x20a>
c0010389:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010393:	e9 c1 01 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c0010398:	50                   	push   eax
c0010399:	50                   	push   eax
c001039a:	68 69 1c 02 c0       	push   0xc0021c69
c001039f:	55                   	push   ebp
c00103a0:	e8 db 03 ff ff       	call   c0000780 <strcmp>
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	85 c0                	test   eax,eax
c00103aa:	74 23                	je     c00103cf <CPU::detectFeatures()+0x241>
c00103ac:	57                   	push   edi
c00103ad:	57                   	push   edi
c00103ae:	68 76 1c 02 c0       	push   0xc0021c76
c00103b3:	55                   	push   ebp
c00103b4:	e8 c7 03 ff ff       	call   c0000780 <strcmp>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	85 c0                	test   eax,eax
c00103be:	75 1e                	jne    c00103de <CPU::detectFeatures()+0x250>
c00103c0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00103ca:	e9 8a 01 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c00103cf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00103d9:	e9 7b 01 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c00103de:	56                   	push   esi
c00103df:	56                   	push   esi
c00103e0:	68 83 1c 02 c0       	push   0xc0021c83
c00103e5:	55                   	push   ebp
c00103e6:	e8 95 03 ff ff       	call   c0000780 <strcmp>
c00103eb:	83 c4 10             	add    esp,0x10
c00103ee:	85 c0                	test   eax,eax
c00103f0:	75 0f                	jne    c0010401 <CPU::detectFeatures()+0x273>
c00103f2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00103fc:	e9 58 01 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c0010401:	51                   	push   ecx
c0010402:	51                   	push   ecx
c0010403:	68 42 1c 02 c0       	push   0xc0021c42
c0010408:	55                   	push   ebp
c0010409:	e8 72 03 ff ff       	call   c0000780 <strcmp>
c001040e:	83 c4 10             	add    esp,0x10
c0010411:	85 c0                	test   eax,eax
c0010413:	75 0f                	jne    c0010424 <CPU::detectFeatures()+0x296>
c0010415:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001041f:	e9 35 01 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c0010424:	52                   	push   edx
c0010425:	52                   	push   edx
c0010426:	68 90 1c 02 c0       	push   0xc0021c90
c001042b:	55                   	push   ebp
c001042c:	e8 4f 03 ff ff       	call   c0000780 <strcmp>
c0010431:	83 c4 10             	add    esp,0x10
c0010434:	85 c0                	test   eax,eax
c0010436:	75 0f                	jne    c0010447 <CPU::detectFeatures()+0x2b9>
c0010438:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010442:	e9 12 01 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c0010447:	50                   	push   eax
c0010448:	50                   	push   eax
c0010449:	68 9d 1c 02 c0       	push   0xc0021c9d
c001044e:	55                   	push   ebp
c001044f:	e8 2c 03 ff ff       	call   c0000780 <strcmp>
c0010454:	83 c4 10             	add    esp,0x10
c0010457:	85 c0                	test   eax,eax
c0010459:	75 0f                	jne    c001046a <CPU::detectFeatures()+0x2dc>
c001045b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010465:	e9 ef 00 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c001046a:	50                   	push   eax
c001046b:	50                   	push   eax
c001046c:	68 aa 1c 02 c0       	push   0xc0021caa
c0010471:	55                   	push   ebp
c0010472:	e8 09 03 ff ff       	call   c0000780 <strcmp>
c0010477:	83 c4 10             	add    esp,0x10
c001047a:	85 c0                	test   eax,eax
c001047c:	75 0f                	jne    c001048d <CPU::detectFeatures()+0x2ff>
c001047e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010488:	e9 cc 00 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c001048d:	50                   	push   eax
c001048e:	50                   	push   eax
c001048f:	68 b7 1c 02 c0       	push   0xc0021cb7
c0010494:	55                   	push   ebp
c0010495:	e8 e6 02 ff ff       	call   c0000780 <strcmp>
c001049a:	83 c4 10             	add    esp,0x10
c001049d:	85 c0                	test   eax,eax
c001049f:	75 0f                	jne    c00104b0 <CPU::detectFeatures()+0x322>
c00104a1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00104ab:	e9 a9 00 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c00104b0:	50                   	push   eax
c00104b1:	50                   	push   eax
c00104b2:	68 c4 1c 02 c0       	push   0xc0021cc4
c00104b7:	55                   	push   ebp
c00104b8:	e8 c3 02 ff ff       	call   c0000780 <strcmp>
c00104bd:	83 c4 10             	add    esp,0x10
c00104c0:	85 c0                	test   eax,eax
c00104c2:	75 0f                	jne    c00104d3 <CPU::detectFeatures()+0x345>
c00104c4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00104ce:	e9 86 00 00 00       	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c00104d3:	50                   	push   eax
c00104d4:	50                   	push   eax
c00104d5:	68 d1 1c 02 c0       	push   0xc0021cd1
c00104da:	55                   	push   ebp
c00104db:	e8 a0 02 ff ff       	call   c0000780 <strcmp>
c00104e0:	83 c4 10             	add    esp,0x10
c00104e3:	85 c0                	test   eax,eax
c00104e5:	75 0c                	jne    c00104f3 <CPU::detectFeatures()+0x365>
c00104e7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00104f1:	eb 66                	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c00104f3:	50                   	push   eax
c00104f4:	50                   	push   eax
c00104f5:	68 de 1c 02 c0       	push   0xc0021cde
c00104fa:	55                   	push   ebp
c00104fb:	e8 80 02 ff ff       	call   c0000780 <strcmp>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	85 c0                	test   eax,eax
c0010505:	75 0c                	jne    c0010513 <CPU::detectFeatures()+0x385>
c0010507:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010511:	eb 46                	jmp    c0010559 <CPU::detectFeatures()+0x3cb>
c0010513:	57                   	push   edi
c0010514:	57                   	push   edi
c0010515:	68 eb 1c 02 c0       	push   0xc0021ceb
c001051a:	55                   	push   ebp
c001051b:	e8 60 02 ff ff       	call   c0000780 <strcmp>
c0010520:	83 c4 10             	add    esp,0x10
c0010523:	85 c0                	test   eax,eax
c0010525:	74 e0                	je     c0010507 <CPU::detectFeatures()+0x379>
c0010527:	56                   	push   esi
c0010528:	56                   	push   esi
c0010529:	68 f8 1c 02 c0       	push   0xc0021cf8
c001052e:	55                   	push   ebp
c001052f:	e8 4c 02 ff ff       	call   c0000780 <strcmp>
c0010534:	83 c4 10             	add    esp,0x10
c0010537:	85 c0                	test   eax,eax
c0010539:	74 cc                	je     c0010507 <CPU::detectFeatures()+0x379>
c001053b:	51                   	push   ecx
c001053c:	51                   	push   ecx
c001053d:	68 05 1d 02 c0       	push   0xc0021d05
c0010542:	55                   	push   ebp
c0010543:	e8 38 02 ff ff       	call   c0000780 <strcmp>
c0010548:	83 c4 10             	add    esp,0x10
c001054b:	85 c0                	test   eax,eax
c001054d:	74 b8                	je     c0010507 <CPU::detectFeatures()+0x379>
c001054f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010559:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001055e:	0f 86 be 00 00 00    	jbe    c0010622 <CPU::detectFeatures()+0x494>
c0010564:	83 ec 0c             	sub    esp,0xc
c0010567:	68 80 00 00 00       	push   0x80
c001056c:	e8 31 fb ff ff       	call   c00100a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010571:	83 e0 01             	and    eax,0x1
c0010574:	c1 e0 06             	shl    eax,0x6
c0010577:	89 c2                	mov    edx,eax
c0010579:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001057f:	83 e0 bf             	and    eax,0xffffffbf
c0010582:	09 d0                	or     eax,edx
c0010584:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001058a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010591:	e8 0c fb ff ff       	call   c00100a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010596:	83 e0 01             	and    eax,0x1
c0010599:	c1 e0 04             	shl    eax,0x4
c001059c:	89 c2                	mov    edx,eax
c001059e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105a4:	83 e0 ef             	and    eax,0xffffffef
c00105a7:	09 d0                	or     eax,edx
c00105a9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105af:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00105b6:	e8 e7 fa ff ff       	call   c00100a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105bb:	89 c2                	mov    edx,eax
c00105bd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105c3:	c1 e2 07             	shl    edx,0x7
c00105c6:	83 e0 7f             	and    eax,0x7f
c00105c9:	09 d0                	or     eax,edx
c00105cb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00105d8:	e8 f3 fa ff ff       	call   c00100d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105dd:	83 e0 01             	and    eax,0x1
c00105e0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105e7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105ed:	83 e0 f7             	and    eax,0xfffffff7
c00105f0:	09 d0                	or     eax,edx
c00105f2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105f8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00105ff:	e8 cc fa ff ff       	call   c00100d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010604:	83 c4 10             	add    esp,0x10
c0010607:	83 e0 01             	and    eax,0x1
c001060a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010611:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010617:	83 e0 fb             	and    eax,0xfffffffb
c001061a:	09 d0                	or     eax,edx
c001061c:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010622:	83 ec 0c             	sub    esp,0xc
c0010625:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010629:	50                   	push   eax
c001062a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001062e:	50                   	push   eax
c001062f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010633:	57                   	push   edi
c0010634:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010638:	56                   	push   esi
c0010639:	6a 01                	push   0x1
c001063b:	e8 82 f9 ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010644:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001064a:	89 c1                	mov    ecx,eax
c001064c:	83 e1 0f             	and    ecx,0xf
c001064f:	83 e2 f0             	and    edx,0xfffffff0
c0010652:	09 ca                	or     edx,ecx
c0010654:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001065a:	89 c2                	mov    edx,eax
c001065c:	c1 ea 04             	shr    edx,0x4
c001065f:	83 e2 0f             	and    edx,0xf
c0010662:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010666:	89 d1                	mov    ecx,edx
c0010668:	83 c4 20             	add    esp,0x20
c001066b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010671:	c1 e1 06             	shl    ecx,0x6
c0010674:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001067a:	09 ca                	or     edx,ecx
c001067c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010683:	89 c2                	mov    edx,eax
c0010685:	c1 ea 08             	shr    edx,0x8
c0010688:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001068e:	83 e2 0f             	and    edx,0xf
c0010691:	89 d5                	mov    ebp,edx
c0010693:	83 e5 03             	and    ebp,0x3
c0010696:	c1 e5 06             	shl    ebp,0x6
c0010699:	83 e1 3f             	and    ecx,0x3f
c001069c:	09 e9                	or     ecx,ebp
c001069e:	89 d5                	mov    ebp,edx
c00106a0:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00106a6:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00106ac:	c1 ed 02             	shr    ebp,0x2
c00106af:	83 e1 c0             	and    ecx,0xffffffc0
c00106b2:	09 e9                	or     ecx,ebp
c00106b4:	89 c5                	mov    ebp,eax
c00106b6:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00106bc:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00106c2:	c1 ed 08             	shr    ebp,0x8
c00106c5:	83 e5 30             	and    ebp,0x30
c00106c8:	83 e1 cf             	and    ecx,0xffffffcf
c00106cb:	09 e9                	or     ecx,ebp
c00106cd:	83 fa 06             	cmp    edx,0x6
c00106d0:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00106d6:	74 05                	je     c00106dd <CPU::detectFeatures()+0x54f>
c00106d8:	83 fa 0f             	cmp    edx,0xf
c00106db:	75 64                	jne    c0010741 <CPU::detectFeatures()+0x5b3>
c00106dd:	89 c1                	mov    ecx,eax
c00106df:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00106e5:	c1 e9 10             	shr    ecx,0x10
c00106e8:	c1 e1 04             	shl    ecx,0x4
c00106eb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00106ef:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00106f5:	0f b6 c9             	movzx  ecx,cl
c00106f8:	c1 e1 06             	shl    ecx,0x6
c00106fb:	09 e9                	or     ecx,ebp
c00106fd:	83 fa 0f             	cmp    edx,0xf
c0010700:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010707:	75 38                	jne    c0010741 <CPU::detectFeatures()+0x5b3>
c0010709:	c1 e8 14             	shr    eax,0x14
c001070c:	83 c0 0f             	add    eax,0xf
c001070f:	0f b6 c0             	movzx  eax,al
c0010712:	89 c2                	mov    edx,eax
c0010714:	c1 e8 02             	shr    eax,0x2
c0010717:	83 e2 03             	and    edx,0x3
c001071a:	89 d1                	mov    ecx,edx
c001071c:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010722:	c1 e1 06             	shl    ecx,0x6
c0010725:	83 e2 3f             	and    edx,0x3f
c0010728:	09 ca                	or     edx,ecx
c001072a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010730:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010736:	83 e2 c0             	and    edx,0xffffffc0
c0010739:	09 d0                	or     eax,edx
c001073b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010741:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010747:	83 ec 0c             	sub    esp,0xc
c001074a:	83 c8 07             	or     eax,0x7
c001074d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010753:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010757:	50                   	push   eax
c0010758:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001075c:	55                   	push   ebp
c001075d:	57                   	push   edi
c001075e:	56                   	push   esi
c001075f:	68 00 00 00 80       	push   0x80000000
c0010764:	e8 59 f8 ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010769:	83 c4 20             	add    esp,0x20
c001076c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010774:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010778:	76 1e                	jbe    c0010798 <CPU::detectFeatures()+0x60a>
c001077a:	83 ec 0c             	sub    esp,0xc
c001077d:	50                   	push   eax
c001077e:	55                   	push   ebp
c001077f:	57                   	push   edi
c0010780:	56                   	push   esi
c0010781:	68 01 00 00 80       	push   0x80000001
c0010786:	e8 37 f8 ff ff       	call   c000ffc2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001078b:	83 c4 20             	add    esp,0x20
c001078e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010798:	52                   	push   edx
c0010799:	52                   	push   edx
c001079a:	68 11 1d 02 c0       	push   0xc0021d11
c001079f:	53                   	push   ebx
c00107a0:	e8 29 c1 ff ff       	call   c000c8ce <Device::setName(char const*)>
c00107a5:	83 c4 10             	add    esp,0x10
c00107a8:	eb 69                	jmp    c0010813 <CPU::detectFeatures()+0x685>
c00107aa:	50                   	push   eax
c00107ab:	50                   	push   eax
c00107ac:	68 76 1c 02 c0       	push   0xc0021c76
c00107b1:	55                   	push   ebp
c00107b2:	e8 99 fe fe ff       	call   c0000650 <strcpy>
c00107b7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107c1:	e8 fd f9 fe ff       	call   c00001c3 <is486>
c00107c6:	83 c4 10             	add    esp,0x10
c00107c9:	85 c0                	test   eax,eax
c00107cb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107d1:	74 1f                	je     c00107f2 <CPU::detectFeatures()+0x664>
c00107d3:	83 c8 07             	or     eax,0x7
c00107d6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107dc:	0f 20 c0             	mov    eax,cr0
c00107df:	83 e0 14             	and    eax,0x14
c00107e2:	83 f8 04             	cmp    eax,0x4
c00107e5:	75 10                	jne    c00107f7 <CPU::detectFeatures()+0x669>
c00107e7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107ed:	83 e0 fd             	and    eax,0xfffffffd
c00107f0:	eb 1b                	jmp    c001080d <CPU::detectFeatures()+0x67f>
c00107f2:	83 e0 f8             	and    eax,0xfffffff8
c00107f5:	eb df                	jmp    c00107d6 <CPU::detectFeatures()+0x648>
c00107f7:	e8 a2 f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107fc:	83 e0 01             	and    eax,0x1
c00107ff:	8d 14 00             	lea    edx,[eax+eax*1]
c0010802:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010808:	83 e0 fd             	and    eax,0xfffffffd
c001080b:	09 d0                	or     eax,edx
c001080d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010813:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001081a:	74 17                	je     c0010833 <CPU::detectFeatures()+0x6a5>
c001081c:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010822:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010828:	83 c8 10             	or     eax,0x10
c001082b:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010831:	eb 20                	jmp    c0010853 <CPU::detectFeatures()+0x6c5>
c0010833:	e8 66 f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010838:	83 e0 01             	and    eax,0x1
c001083b:	8d 14 00             	lea    edx,[eax+eax*1]
c001083e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010844:	83 e0 fd             	and    eax,0xfffffffd
c0010847:	09 d0                	or     eax,edx
c0010849:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001084f:	a8 02                	test   al,0x2
c0010851:	75 c9                	jne    c001081c <CPU::detectFeatures()+0x68e>
c0010853:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001085a:	83 c4 2c             	add    esp,0x2c
c001085d:	5b                   	pop    ebx
c001085e:	5e                   	pop    esi
c001085f:	5f                   	pop    edi
c0010860:	5d                   	pop    ebp
c0010861:	c3                   	ret    

c0010862 <CPU::setupSMEP()>:
c0010862:	0f 20 e0             	mov    eax,cr4
c0010865:	0d 00 00 10 00       	or     eax,0x100000
c001086a:	0f 22 e0             	mov    cr4,eax
c001086d:	c3                   	ret    

c001086e <CPU::setupUMIP()>:
c001086e:	0f 20 e0             	mov    eax,cr4
c0010871:	80 cc 08             	or     ah,0x8
c0010874:	0f 22 e0             	mov    cr4,eax
c0010877:	c3                   	ret    

c0010878 <CPU::setupTSC()>:
c0010878:	0f 20 e0             	mov    eax,cr4
c001087b:	83 c8 04             	or     eax,0x4
c001087e:	0f 22 e0             	mov    cr4,eax
c0010881:	c3                   	ret    

c0010882 <CPU::setupLargePages()>:
c0010882:	0f 20 e0             	mov    eax,cr4
c0010885:	83 c8 10             	or     eax,0x10
c0010888:	0f 22 e0             	mov    cr4,eax
c001088b:	c3                   	ret    

c001088c <CPU::setupPAT()>:
c001088c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010891:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010898:	74 2c                	je     c00108c6 <CPU::setupPAT()+0x3a>
c001089a:	53                   	push   ebx
c001089b:	83 ec 10             	sub    esp,0x10
c001089e:	68 77 02 00 00       	push   0x277
c00108a3:	50                   	push   eax
c00108a4:	e8 39 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00108a9:	83 e2 f8             	and    edx,0xfffffff8
c00108ac:	83 ca 01             	or     edx,0x1
c00108af:	52                   	push   edx
c00108b0:	50                   	push   eax
c00108b1:	68 77 02 00 00       	push   0x277
c00108b6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00108bc:	e8 4d 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00108c1:	83 c4 28             	add    esp,0x28
c00108c4:	5b                   	pop    ebx
c00108c5:	c3                   	ret    
c00108c6:	c3                   	ret    
c00108c7:	90                   	nop

c00108c8 <CPU::setupMTRR()>:
c00108c8:	c3                   	ret    
c00108c9:	90                   	nop

c00108ca <CPU::setupGlobalPages()>:
c00108ca:	0f 20 e0             	mov    eax,cr4
c00108cd:	0c 80                	or     al,0x80
c00108cf:	0f 22 e0             	mov    cr4,eax
c00108d2:	c3                   	ret    
c00108d3:	90                   	nop

c00108d4 <CPU::allowUsermodeDataAccess()>:
c00108d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108df:	74 03                	je     c00108e4 <CPU::allowUsermodeDataAccess()+0x10>
c00108e1:	0f 01 cb             	stac   
c00108e4:	c3                   	ret    
c00108e5:	90                   	nop

c00108e6 <CPU::prohibitUsermodeDataAccess()>:
c00108e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ea:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108f1:	74 03                	je     c00108f6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00108f3:	0f 01 ca             	clac   
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <CPU::setupSMAP()>:
c00108f8:	0f 20 e0             	mov    eax,cr4
c00108fb:	0d 00 00 20 00       	or     eax,0x200000
c0010900:	0f 22 e0             	mov    cr4,eax
c0010903:	eb e1                	jmp    c00108e6 <CPU::prohibitUsermodeDataAccess()>
c0010905:	90                   	nop

c0010906 <CPU::setupFeatures()>:
c0010906:	53                   	push   ebx
c0010907:	83 ec 08             	sub    esp,0x8
c001090a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001090e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010915:	74 18                	je     c001092f <CPU::setupFeatures()+0x29>
c0010917:	83 ec 0c             	sub    esp,0xc
c001091a:	68 1d 1d 02 c0       	push   0xc0021d1d
c001091f:	e8 e6 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010924:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010927:	e8 42 ff ff ff       	call   c001086e <CPU::setupUMIP()>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010936:	74 18                	je     c0010950 <CPU::setupFeatures()+0x4a>
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	68 27 1d 02 c0       	push   0xc0021d27
c0010940:	e8 c5 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010945:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010948:	e8 2b ff ff ff       	call   c0010878 <CPU::setupTSC()>
c001094d:	83 c4 10             	add    esp,0x10
c0010950:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010957:	74 18                	je     c0010971 <CPU::setupFeatures()+0x6b>
c0010959:	83 ec 0c             	sub    esp,0xc
c001095c:	68 30 1d 02 c0       	push   0xc0021d30
c0010961:	e8 a4 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010966:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010969:	e8 14 ff ff ff       	call   c0010882 <CPU::setupLargePages()>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010978:	74 18                	je     c0010992 <CPU::setupFeatures()+0x8c>
c001097a:	83 ec 0c             	sub    esp,0xc
c001097d:	68 39 1d 02 c0       	push   0xc0021d39
c0010982:	e8 83 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010987:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001098a:	e8 3b ff ff ff       	call   c00108ca <CPU::setupGlobalPages()>
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010999:	74 18                	je     c00109b3 <CPU::setupFeatures()+0xad>
c001099b:	83 ec 0c             	sub    esp,0xc
c001099e:	68 4b 1d 02 c0       	push   0xc0021d4b
c00109a3:	e8 62 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00109a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ab:	e8 dc fe ff ff       	call   c001088c <CPU::setupPAT()>
c00109b0:	83 c4 10             	add    esp,0x10
c00109b3:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00109ba:	74 11                	je     c00109cd <CPU::setupFeatures()+0xc7>
c00109bc:	c7 44 24 10 54 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d54
c00109c4:	83 c4 08             	add    esp,0x8
c00109c7:	5b                   	pop    ebx
c00109c8:	e9 3d 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c00109cd:	83 c4 08             	add    esp,0x8
c00109d0:	5b                   	pop    ebx
c00109d1:	c3                   	ret    

c00109d2 <CPU::open(int, int, void*)>:
c00109d2:	55                   	push   ebp
c00109d3:	57                   	push   edi
c00109d4:	56                   	push   esi
c00109d5:	53                   	push   ebx
c00109d6:	83 ec 18             	sub    esp,0x18
c00109d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00109e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00109e5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00109eb:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00109f1:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00109f7:	50                   	push   eax
c00109f8:	e8 e1 69 ff ff       	call   c00073de <GDT::setup()>
c00109fd:	83 c4 0c             	add    esp,0xc
c0010a00:	6a 00                	push   0x0
c0010a02:	68 ef be ad de       	push   0xdeadbeef
c0010a07:	55                   	push   ebp
c0010a08:	e8 63 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010a0d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010a10:	e8 3b 85 ff ff       	call   c0008f50 <TSS::flush()>
c0010a15:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a1e:	e8 1f 6c ff ff       	call   c0007642 <IDT::setup()>
c0010a23:	b8 00 04 00 00       	mov    eax,0x400
c0010a28:	0f 23 f8             	mov    db7,eax
c0010a2b:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010a35:	e8 a8 73 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010a3a:	83 c4 10             	add    esp,0x10
c0010a3d:	85 f6                	test   esi,esi
c0010a3f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010a45:	89 38                	mov    DWORD PTR [eax],edi
c0010a47:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010a4d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a50:	74 10                	je     c0010a62 <CPU::open(int, int, void*)+0x90>
c0010a52:	50                   	push   eax
c0010a53:	50                   	push   eax
c0010a54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a5a:	56                   	push   esi
c0010a5b:	e8 2c 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010a60:	eb 0d                	jmp    c0010a6f <CPU::open(int, int, void*)+0x9d>
c0010a62:	83 ec 0c             	sub    esp,0xc
c0010a65:	68 5e 1d 02 c0       	push   0xc0021d5e
c0010a6a:	e8 72 08 00 00       	call   c00112e1 <KePanic(char const*)>
c0010a6f:	83 c4 10             	add    esp,0x10
c0010a72:	83 ec 0c             	sub    esp,0xc
c0010a75:	68 6c 1d 02 c0       	push   0xc0021d6c
c0010a7a:	e8 8e 01 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0010a7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a82:	e8 07 f7 ff ff       	call   c001018e <CPU::detectFeatures()>
c0010a87:	c7 04 24 8f 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d8f
c0010a8e:	e8 7a 01 00 00       	call   c0010c0d <KeSetBootMessage(char const*)>
c0010a93:	e8 07 72 00 00       	call   c0017c9f <HalInitialise()>
c0010a98:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a9d:	83 e0 10             	and    eax,0x10
c0010aa0:	83 f8 01             	cmp    eax,0x1
c0010aa3:	19 c0                	sbb    eax,eax
c0010aa5:	83 e0 46             	and    eax,0x46
c0010aa8:	83 c0 1e             	add    eax,0x1e
c0010aab:	89 04 24             	mov    DWORD PTR [esp],eax
c0010aae:	e8 c2 d6 ff ff       	call   c000e175 <setupTimer(int)>
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010abd:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010ac3:	74 0c                	je     c0010ad1 <CPU::open(int, int, void*)+0xff>
c0010ac5:	83 ec 0c             	sub    esp,0xc
c0010ac8:	53                   	push   ebx
c0010ac9:	e8 38 fe ff ff       	call   c0010906 <CPU::setupFeatures()>
c0010ace:	83 c4 10             	add    esp,0x10
c0010ad1:	83 c4 0c             	add    esp,0xc
c0010ad4:	31 c0                	xor    eax,eax
c0010ad6:	5b                   	pop    ebx
c0010ad7:	5e                   	pop    esi
c0010ad8:	5f                   	pop    edi
c0010ad9:	5d                   	pop    ebp
c0010ada:	c3                   	ret    

c0010adb <KeInitialiseAtexit()>:
c0010adb:	83 ec 10             	sub    esp,0x10
c0010ade:	6a 60                	push   0x60
c0010ae0:	6a 00                	push   0x0
c0010ae2:	68 20 8e 02 c0       	push   0xc0028e20
c0010ae7:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010af1:	e8 fa f9 fe ff       	call   c00004f0 <memset>
c0010af6:	83 c4 1c             	add    esp,0x1c
c0010af9:	c3                   	ret    

c0010afa <KeRegisterAtexit(void (*)(void*), void*)>:
c0010afa:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010aff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b03:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010b0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b0e:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010b15:	40                   	inc    eax
c0010b16:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010b1b:	83 f8 17             	cmp    eax,0x17
c0010b1e:	7e 0d                	jle    c0010b2d <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b20:	c7 44 24 04 d0 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021dd0
c0010b28:	e9 b4 07 00 00       	jmp    c00112e1 <KePanic(char const*)>
c0010b2d:	c3                   	ret    

c0010b2e <KeExecuteAtexit()>:
c0010b2e:	53                   	push   ebx
c0010b2f:	31 db                	xor    ebx,ebx
c0010b31:	83 ec 08             	sub    esp,0x8
c0010b34:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010b3a:	7e 50                	jle    c0010b8c <KeExecuteAtexit()+0x5e>
c0010b3c:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010b43:	85 c0                	test   eax,eax
c0010b45:	74 42                	je     c0010b89 <KeExecuteAtexit()+0x5b>
c0010b47:	51                   	push   ecx
c0010b48:	50                   	push   eax
c0010b49:	53                   	push   ebx
c0010b4a:	68 e9 1d 02 c0       	push   0xc0021de9
c0010b4f:	e8 b6 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b54:	58                   	pop    eax
c0010b55:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b5c:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b63:	c7 04 24 0b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e0b
c0010b6a:	e8 9b 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b6f:	c7 04 24 6b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f6b
c0010b76:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b81:	e8 84 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b86:	83 c4 10             	add    esp,0x10
c0010b89:	43                   	inc    ebx
c0010b8a:	eb a8                	jmp    c0010b34 <KeExecuteAtexit()+0x6>
c0010b8c:	83 c4 08             	add    esp,0x8
c0010b8f:	5b                   	pop    ebx
c0010b90:	c3                   	ret    

c0010b91 <KeDisplaySplashScreen()>:
c0010b91:	55                   	push   ebp
c0010b92:	bd 05 00 00 00       	mov    ebp,0x5
c0010b97:	57                   	push   edi
c0010b98:	bf 0a 00 00 00       	mov    edi,0xa
c0010b9d:	56                   	push   esi
c0010b9e:	31 f6                	xor    esi,esi
c0010ba0:	53                   	push   ebx
c0010ba1:	31 db                	xor    ebx,ebx
c0010ba3:	83 ec 0c             	sub    esp,0xc
c0010ba6:	0f b6 96 c0 31 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdce40]
c0010bad:	85 d2                	test   edx,edx
c0010baf:	89 d0                	mov    eax,edx
c0010bb1:	74 52                	je     c0010c05 <KeDisplaySplashScreen()+0x74>
c0010bb3:	80 bb f6 31 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdce0a],0xdb
c0010bba:	75 13                	jne    c0010bcf <KeDisplaySplashScreen()+0x3e>
c0010bbc:	0f b6 8b f5 31 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdce0b]
c0010bc3:	83 e1 fe             	and    ecx,0xfffffffe
c0010bc6:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010bcc:	75 01                	jne    c0010bcf <KeDisplaySplashScreen()+0x3e>
c0010bce:	47                   	inc    edi
c0010bcf:	83 fa 0d             	cmp    edx,0xd
c0010bd2:	74 28                	je     c0010bfc <KeDisplaySplashScreen()+0x6b>
c0010bd4:	83 fa 0a             	cmp    edx,0xa
c0010bd7:	75 0a                	jne    c0010be3 <KeDisplaySplashScreen()+0x52>
c0010bd9:	45                   	inc    ebp
c0010bda:	bf 0a 00 00 00       	mov    edi,0xa
c0010bdf:	31 db                	xor    ebx,ebx
c0010be1:	eb 19                	jmp    c0010bfc <KeDisplaySplashScreen()+0x6b>
c0010be3:	83 ec 0c             	sub    esp,0xc
c0010be6:	0f be c0             	movsx  eax,al
c0010be9:	55                   	push   ebp
c0010bea:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010bed:	43                   	inc    ebx
c0010bee:	52                   	push   edx
c0010bef:	6a 00                	push   0x0
c0010bf1:	6a 0e                	push   0xe
c0010bf3:	50                   	push   eax
c0010bf4:	e8 23 7d 00 00       	call   c001891c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010bf9:	83 c4 20             	add    esp,0x20
c0010bfc:	46                   	inc    esi
c0010bfd:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c03:	75 a1                	jne    c0010ba6 <KeDisplaySplashScreen()+0x15>
c0010c05:	83 c4 0c             	add    esp,0xc
c0010c08:	5b                   	pop    ebx
c0010c09:	5e                   	pop    esi
c0010c0a:	5f                   	pop    edi
c0010c0b:	5d                   	pop    ebp
c0010c0c:	c3                   	ret    

c0010c0d <KeSetBootMessage(char const*)>:
c0010c0d:	57                   	push   edi
c0010c0e:	56                   	push   esi
c0010c0f:	53                   	push   ebx
c0010c10:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010c16:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010c1d:	68 9e 00 00 00       	push   0x9e
c0010c22:	6a 00                	push   0x0
c0010c24:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c28:	56                   	push   esi
c0010c29:	e8 c2 f8 fe ff       	call   c00004f0 <memset>
c0010c2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c31:	e8 4a f9 fe ff       	call   c0000580 <strlen>
c0010c36:	ba 50 00 00 00       	mov    edx,0x50
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	31 c9                	xor    ecx,ecx
c0010c40:	29 c2                	sub    edx,eax
c0010c42:	83 e2 fe             	and    edx,0xfffffffe
c0010c45:	01 f2                	add    edx,esi
c0010c47:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010c4c:	84 c0                	test   al,al
c0010c4e:	74 0a                	je     c0010c5a <KeSetBootMessage(char const*)+0x4d>
c0010c50:	80 cc 0f             	or     ah,0xf
c0010c53:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c57:	41                   	inc    ecx
c0010c58:	eb ed                	jmp    c0010c47 <KeSetBootMessage(char const*)+0x3a>
c0010c5a:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c5f:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c66:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c6c:	5b                   	pop    ebx
c0010c6d:	5e                   	pop    esi
c0010c6e:	5f                   	pop    edi
c0010c6f:	c3                   	ret    

c0010c70 <Krnl::handlePowerButton()>:
c0010c70:	83 ec 0c             	sub    esp,0xc
c0010c73:	e8 c4 06 00 00       	call   c001133c <KeHandlePowerButton()>
c0010c78:	90                   	nop
c0010c79:	83 c4 0c             	add    esp,0xc
c0010c7c:	c3                   	ret    
c0010c7d:	8d 76 00             	lea    esi,[esi+0x0]

c0010c80 <Krnl::handleSleepButton()>:
c0010c80:	83 ec 0c             	sub    esp,0xc
c0010c83:	e8 e9 06 00 00       	call   c0011371 <KeHandleSleepButton()>
c0010c88:	90                   	nop
c0010c89:	83 c4 0c             	add    esp,0xc
c0010c8c:	c3                   	ret    
c0010c8d:	90                   	nop

c0010c8e <EnvVarContainer::getEnv(char const*)>:
c0010c8e:	57                   	push   edi
c0010c8f:	56                   	push   esi
c0010c90:	53                   	push   ebx
c0010c91:	31 db                	xor    ebx,ebx
c0010c93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c97:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c99:	7e 2b                	jle    c0010cc6 <EnvVarContainer::getEnv(char const*)+0x38>
c0010c9b:	50                   	push   eax
c0010c9c:	50                   	push   eax
c0010c9d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ca0:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010ca7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010caa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010cae:	e8 cd fa fe ff       	call   c0000780 <strcmp>
c0010cb3:	83 c4 10             	add    esp,0x10
c0010cb6:	85 c0                	test   eax,eax
c0010cb8:	75 09                	jne    c0010cc3 <EnvVarContainer::getEnv(char const*)+0x35>
c0010cba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010cbd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010cc1:	eb 05                	jmp    c0010cc8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010cc3:	43                   	inc    ebx
c0010cc4:	eb d1                	jmp    c0010c97 <EnvVarContainer::getEnv(char const*)+0x9>
c0010cc6:	31 c0                	xor    eax,eax
c0010cc8:	5b                   	pop    ebx
c0010cc9:	5e                   	pop    esi
c0010cca:	5f                   	pop    edi
c0010ccb:	c3                   	ret    

c0010ccc <EnvVarContainer::setEnv(char const*, char const*)>:
c0010ccc:	55                   	push   ebp
c0010ccd:	57                   	push   edi
c0010cce:	56                   	push   esi
c0010ccf:	53                   	push   ebx
c0010cd0:	83 ec 28             	sub    esp,0x28
c0010cd3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010cd7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010cdb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010cdf:	56                   	push   esi
c0010ce0:	e8 9b f8 fe ff       	call   c0000580 <strlen>
c0010ce5:	40                   	inc    eax
c0010ce6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ce9:	e8 e5 6d ff ff       	call   c0007ad3 <malloc>
c0010cee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010cf5:	e8 86 f8 fe ff       	call   c0000580 <strlen>
c0010cfa:	40                   	inc    eax
c0010cfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cfe:	e8 d0 6d ff ff       	call   c0007ad3 <malloc>
c0010d03:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d0a:	e8 71 f8 fe ff       	call   c0000580 <strlen>
c0010d0f:	83 c4 0c             	add    esp,0xc
c0010d12:	40                   	inc    eax
c0010d13:	50                   	push   eax
c0010d14:	6a 00                	push   0x0
c0010d16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010d1a:	e8 d1 f7 fe ff       	call   c00004f0 <memset>
c0010d1f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d22:	e8 59 f8 fe ff       	call   c0000580 <strlen>
c0010d27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d33:	89 de                	mov    esi,ebx
c0010d35:	e8 46 f8 fe ff       	call   c0000580 <strlen>
c0010d3a:	83 c4 0c             	add    esp,0xc
c0010d3d:	40                   	inc    eax
c0010d3e:	50                   	push   eax
c0010d3f:	6a 00                	push   0x0
c0010d41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d45:	e8 a6 f7 fe ff       	call   c00004f0 <memset>
c0010d4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d4d:	e8 2e f8 fe ff       	call   c0000580 <strlen>
c0010d52:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d56:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d5b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d5e:	40                   	inc    eax
c0010d5f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d62:	c1 e0 03             	shl    eax,0x3
c0010d65:	5a                   	pop    edx
c0010d66:	59                   	pop    ecx
c0010d67:	50                   	push   eax
c0010d68:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d6b:	e8 4f 6d ff ff       	call   c0007abf <realloc>
c0010d70:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d73:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d77:	b9 08 00 00 00       	mov    ecx,0x8
c0010d7c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d7f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d85:	83 c4 2c             	add    esp,0x2c
c0010d88:	5b                   	pop    ebx
c0010d89:	5e                   	pop    esi
c0010d8a:	5f                   	pop    edi
c0010d8b:	5d                   	pop    ebp
c0010d8c:	c3                   	ret    
c0010d8d:	90                   	nop

c0010d8e <EnvVarContainer::deleteEnv(char const*)>:
c0010d8e:	c3                   	ret    
c0010d8f:	90                   	nop

c0010d90 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d90:	55                   	push   ebp
c0010d91:	57                   	push   edi
c0010d92:	56                   	push   esi
c0010d93:	53                   	push   ebx
c0010d94:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d9a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010da1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010da8:	68 14 01 00 00       	push   0x114
c0010dad:	e8 21 6d ff ff       	call   c0007ad3 <malloc>
c0010db2:	83 c4 0c             	add    esp,0xc
c0010db5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010db8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010dbf:	89 c3                	mov    ebx,eax
c0010dc1:	50                   	push   eax
c0010dc2:	e8 55 aa ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0010dc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dca:	e8 d9 ad ff ff       	call   c000bba8 <File::exists()>
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	84 c0                	test   al,al
c0010dd4:	75 31                	jne    c0010e07 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010dd6:	50                   	push   eax
c0010dd7:	50                   	push   eax
c0010dd8:	6a 12                	push   0x12
c0010dda:	53                   	push   ebx
c0010ddb:	e8 04 ab ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c0010de0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010de2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010de5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010de8:	e8 93 f7 fe ff       	call   c0000580 <strlen>
c0010ded:	5a                   	pop    edx
c0010dee:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010df2:	52                   	push   edx
c0010df3:	31 d2                	xor    edx,edx
c0010df5:	56                   	push   esi
c0010df6:	52                   	push   edx
c0010df7:	50                   	push   eax
c0010df8:	53                   	push   ebx
c0010df9:	ff d7                	call   edi
c0010dfb:	83 c4 14             	add    esp,0x14
c0010dfe:	53                   	push   ebx
c0010dff:	e8 3e ab ff ff       	call   c000b942 <File::close()>
c0010e04:	83 c4 10             	add    esp,0x10
c0010e07:	56                   	push   esi
c0010e08:	31 f6                	xor    esi,esi
c0010e0a:	68 00 01 00 00       	push   0x100
c0010e0f:	6a 00                	push   0x0
c0010e11:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e15:	50                   	push   eax
c0010e16:	e8 d5 f6 fe ff       	call   c00004f0 <memset>
c0010e1b:	5f                   	pop    edi
c0010e1c:	58                   	pop    eax
c0010e1d:	6a 01                	push   0x1
c0010e1f:	53                   	push   ebx
c0010e20:	e8 bf aa ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e38:	83 ec 0c             	sub    esp,0xc
c0010e3b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010e3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e41:	52                   	push   edx
c0010e42:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010e46:	51                   	push   ecx
c0010e47:	6a 00                	push   0x0
c0010e49:	6a 01                	push   0x1
c0010e4b:	53                   	push   ebx
c0010e4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010e4f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e54:	83 c4 20             	add    esp,0x20
c0010e57:	85 c0                	test   eax,eax
c0010e59:	89 c1                	mov    ecx,eax
c0010e5b:	0f 84 36 01 00 00    	je     c0010f97 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e61:	83 f8 0d             	cmp    eax,0xd
c0010e64:	0f 84 22 01 00 00    	je     c0010f8c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e6a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e6f:	0f 84 f0 00 00 00    	je     c0010f65 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e75:	83 f8 0a             	cmp    eax,0xa
c0010e78:	74 13                	je     c0010e8d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e7a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e7f:	74 0c                	je     c0010e8d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e81:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e87:	0f 8e f6 00 00 00    	jle    c0010f83 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e91:	83 ec 0c             	sub    esp,0xc
c0010e94:	8d 78 01             	lea    edi,[eax+0x1]
c0010e97:	57                   	push   edi
c0010e98:	e8 36 6c ff ff       	call   c0007ad3 <malloc>
c0010e9d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010ea1:	8d 56 04             	lea    edx,[esi+0x4]
c0010ea4:	89 14 24             	mov    DWORD PTR [esp],edx
c0010ea7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010eab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010eaf:	e8 1f 6c ff ff       	call   c0007ad3 <malloc>
c0010eb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010eb8:	83 c4 0c             	add    esp,0xc
c0010ebb:	57                   	push   edi
c0010ebc:	6a 00                	push   0x0
c0010ebe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ec2:	e8 29 f6 fe ff       	call   c00004f0 <memset>
c0010ec7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ecb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ecf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010ed3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ed5:	83 c4 0c             	add    esp,0xc
c0010ed8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010edc:	52                   	push   edx
c0010edd:	6a 00                	push   0x0
c0010edf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ee3:	e8 08 f6 fe ff       	call   c00004f0 <memset>
c0010ee8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010eec:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010ef0:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ef3:	e8 88 f6 fe ff       	call   c0000580 <strlen>
c0010ef8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010efc:	89 c1                	mov    ecx,eax
c0010efe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010f09:	40                   	inc    eax
c0010f0a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f0d:	85 d2                	test   edx,edx
c0010f0f:	75 0c                	jne    c0010f1d <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010f11:	83 ec 0c             	sub    esp,0xc
c0010f14:	6a 08                	push   0x8
c0010f16:	e8 b8 6b ff ff       	call   c0007ad3 <malloc>
c0010f1b:	eb 0c                	jmp    c0010f29 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010f1d:	51                   	push   ecx
c0010f1e:	51                   	push   ecx
c0010f1f:	c1 e0 03             	shl    eax,0x3
c0010f22:	50                   	push   eax
c0010f23:	52                   	push   edx
c0010f24:	e8 96 6b ff ff       	call   c0007abf <realloc>
c0010f29:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f2c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010f35:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f39:	b9 08 00 00 00       	mov    ecx,0x8
c0010f3e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010f42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f44:	50                   	push   eax
c0010f45:	31 f6                	xor    esi,esi
c0010f47:	68 00 01 00 00       	push   0x100
c0010f4c:	6a 00                	push   0x0
c0010f4e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f52:	50                   	push   eax
c0010f53:	e8 98 f5 fe ff       	call   c00004f0 <memset>
c0010f58:	83 c4 10             	add    esp,0x10
c0010f5b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f63:	eb 27                	jmp    c0010f8c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f65:	83 f8 3d             	cmp    eax,0x3d
c0010f68:	74 1e                	je     c0010f88 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f6a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f70:	7f 07                	jg     c0010f79 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f72:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010f76:	46                   	inc    esi
c0010f77:	eb 13                	jmp    c0010f8c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f79:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f81:	eb 09                	jmp    c0010f8c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f83:	83 f8 3d             	cmp    eax,0x3d
c0010f86:	75 ea                	jne    c0010f72 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f88:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f8c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f91:	0f 85 99 fe ff ff    	jne    c0010e30 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f97:	83 ec 0c             	sub    esp,0xc
c0010f9a:	53                   	push   ebx
c0010f9b:	e8 a2 a9 ff ff       	call   c000b942 <File::close()>
c0010fa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fa5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fa8:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010fae:	5b                   	pop    ebx
c0010faf:	5e                   	pop    esi
c0010fb0:	5f                   	pop    edi
c0010fb1:	5d                   	pop    ebp
c0010fb2:	c3                   	ret    
c0010fb3:	90                   	nop

c0010fb4 <EnvVarContainer::__loadSystem()>:
c0010fb4:	83 ec 10             	sub    esp,0x10
c0010fb7:	68 20 33 02 c0       	push   0xc0023320
c0010fbc:	68 10 1e 02 c0       	push   0xc0021e10
c0010fc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fc5:	e8 c6 fd ff ff       	call   c0010d90 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010fca:	83 c4 1c             	add    esp,0x1c
c0010fcd:	c3                   	ret    

c0010fce <EnvVarContainer::__loadUser()>:
c0010fce:	c3                   	ret    
c0010fcf:	90                   	nop

c0010fd0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010fda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010fe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ff0:	90                   	nop
c0010ff1:	c3                   	ret    

c0010ff2 <EnvVarContainer::~EnvVarContainer()>:
c0010ff2:	83 ec 0c             	sub    esp,0xc
c0010ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ffc:	85 c0                	test   eax,eax
c0010ffe:	74 1d                	je     c001101d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011004:	8b 00                	mov    eax,DWORD PTR [eax]
c0011006:	85 c0                	test   eax,eax
c0011008:	74 13                	je     c001101d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001100a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011011:	83 ec 0c             	sub    esp,0xc
c0011014:	50                   	push   eax
c0011015:	e8 c9 6a ff ff       	call   c0007ae3 <free>
c001101a:	83 c4 10             	add    esp,0x10
c001101d:	90                   	nop
c001101e:	83 c4 0c             	add    esp,0xc
c0011021:	c3                   	ret    

c0011022 <KeGetEnv(Process*, char const*)>:
c0011022:	53                   	push   ebx
c0011023:	83 ec 08             	sub    esp,0x8
c0011026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102a:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011030:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011034:	74 04                	je     c001103a <KeGetEnv(Process*, char const*)+0x18>
c0011036:	85 c0                	test   eax,eax
c0011038:	75 0b                	jne    c0011045 <KeGetEnv(Process*, char const*)+0x23>
c001103a:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001103f:	85 c0                	test   eax,eax
c0011041:	75 19                	jne    c001105c <KeGetEnv(Process*, char const*)+0x3a>
c0011043:	eb 27                	jmp    c001106c <KeGetEnv(Process*, char const*)+0x4a>
c0011045:	52                   	push   edx
c0011046:	52                   	push   edx
c0011047:	53                   	push   ebx
c0011048:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001104e:	e8 3b fc ff ff       	call   c0010c8e <EnvVarContainer::getEnv(char const*)>
c0011053:	83 c4 10             	add    esp,0x10
c0011056:	85 c0                	test   eax,eax
c0011058:	75 28                	jne    c0011082 <KeGetEnv(Process*, char const*)+0x60>
c001105a:	eb de                	jmp    c001103a <KeGetEnv(Process*, char const*)+0x18>
c001105c:	52                   	push   edx
c001105d:	52                   	push   edx
c001105e:	53                   	push   ebx
c001105f:	50                   	push   eax
c0011060:	e8 29 fc ff ff       	call   c0010c8e <EnvVarContainer::getEnv(char const*)>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	85 c0                	test   eax,eax
c001106a:	75 16                	jne    c0011082 <KeGetEnv(Process*, char const*)+0x60>
c001106c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011070:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011075:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011079:	83 c4 08             	add    esp,0x8
c001107c:	5b                   	pop    ebx
c001107d:	e9 0c fc ff ff       	jmp    c0010c8e <EnvVarContainer::getEnv(char const*)>
c0011082:	83 c4 08             	add    esp,0x8
c0011085:	5b                   	pop    ebx
c0011086:	c3                   	ret    

c0011087 <KeSetEnvSystem(char const*, char const*)>:
c0011087:	83 ec 10             	sub    esp,0x10
c001108a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001108e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011092:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011098:	e8 2f fc ff ff       	call   c0010ccc <EnvVarContainer::setEnv(char const*, char const*)>
c001109d:	83 c4 1c             	add    esp,0x1c
c00110a0:	c3                   	ret    

c00110a1 <KeSetEnvUser(char const*, char const*)>:
c00110a1:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110a6:	85 c0                	test   eax,eax
c00110a8:	74 15                	je     c00110bf <KeSetEnvUser(char const*, char const*)+0x1e>
c00110aa:	83 ec 10             	sub    esp,0x10
c00110ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110b5:	50                   	push   eax
c00110b6:	e8 11 fc ff ff       	call   c0010ccc <EnvVarContainer::setEnv(char const*, char const*)>
c00110bb:	83 c4 1c             	add    esp,0x1c
c00110be:	c3                   	ret    
c00110bf:	c3                   	ret    

c00110c0 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00110c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00110ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110ce:	e9 f9 fb ff ff       	jmp    c0010ccc <EnvVarContainer::setEnv(char const*, char const*)>

c00110d3 <KeDeleteEnvSystem(char const*)>:
c00110d3:	c3                   	ret    

c00110d4 <KeDeleteEnvUser(char const*)>:
c00110d4:	c3                   	ret    

c00110d5 <KeDeleteEnvProcess(Process*, char const*)>:
c00110d5:	c3                   	ret    

c00110d6 <KeNewProcessEnv(Process*)>:
c00110d6:	83 ec 28             	sub    esp,0x28
c00110d9:	6a 0c                	push   0xc
c00110db:	e8 f3 69 ff ff       	call   c0007ad3 <malloc>
c00110e0:	5a                   	pop    edx
c00110e1:	59                   	pop    ecx
c00110e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110e6:	50                   	push   eax
c00110e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110eb:	e8 e0 fe ff ff       	call   c0010fd0 <EnvVarContainer::EnvVarContainer(Process*)>
c00110f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110f4:	83 c4 2c             	add    esp,0x2c
c00110f7:	c3                   	ret    

c00110f8 <KeCopyProcessEnv(Process*, Process*)>:
c00110f8:	57                   	push   edi
c00110f9:	56                   	push   esi
c00110fa:	53                   	push   ebx
c00110fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ff:	83 ec 0c             	sub    esp,0xc
c0011102:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011108:	6a 0c                	push   0xc
c001110a:	e8 c4 69 ff ff       	call   c0007ad3 <malloc>
c001110f:	89 c3                	mov    ebx,eax
c0011111:	58                   	pop    eax
c0011112:	5a                   	pop    edx
c0011113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011117:	53                   	push   ebx
c0011118:	e8 b3 fe ff ff       	call   c0010fd0 <EnvVarContainer::EnvVarContainer(Process*)>
c001111d:	8b 07                	mov    eax,DWORD PTR [edi]
c001111f:	89 03                	mov    DWORD PTR [ebx],eax
c0011121:	c1 e0 03             	shl    eax,0x3
c0011124:	89 04 24             	mov    DWORD PTR [esp],eax
c0011127:	e8 a7 69 ff ff       	call   c0007ad3 <malloc>
c001112c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001112f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011131:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011134:	89 c7                	mov    edi,eax
c0011136:	c1 e1 03             	shl    ecx,0x3
c0011139:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001113b:	83 c4 10             	add    esp,0x10
c001113e:	89 d8                	mov    eax,ebx
c0011140:	5b                   	pop    ebx
c0011141:	5e                   	pop    esi
c0011142:	5f                   	pop    edi
c0011143:	c3                   	ret    

c0011144 <KeLoadSystemEnv()>:
c0011144:	53                   	push   ebx
c0011145:	83 ec 14             	sub    esp,0x14
c0011148:	6a 0c                	push   0xc
c001114a:	e8 84 69 ff ff       	call   c0007ad3 <malloc>
c001114f:	89 c3                	mov    ebx,eax
c0011151:	58                   	pop    eax
c0011152:	5a                   	pop    edx
c0011153:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011159:	53                   	push   ebx
c001115a:	e8 71 fe ff ff       	call   c0010fd0 <EnvVarContainer::EnvVarContainer(Process*)>
c001115f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011162:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011168:	e8 47 fe ff ff       	call   c0010fb4 <EnvVarContainer::__loadSystem()>
c001116d:	83 c4 18             	add    esp,0x18
c0011170:	5b                   	pop    ebx
c0011171:	c3                   	ret    

c0011172 <KeLoadUserEnv()>:
c0011172:	53                   	push   ebx
c0011173:	83 ec 14             	sub    esp,0x14
c0011176:	6a 0c                	push   0xc
c0011178:	e8 56 69 ff ff       	call   c0007ad3 <malloc>
c001117d:	89 c3                	mov    ebx,eax
c001117f:	58                   	pop    eax
c0011180:	5a                   	pop    edx
c0011181:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011187:	53                   	push   ebx
c0011188:	e8 43 fe ff ff       	call   c0010fd0 <EnvVarContainer::EnvVarContainer(Process*)>
c001118d:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011193:	83 c4 18             	add    esp,0x18
c0011196:	5b                   	pop    ebx
c0011197:	c3                   	ret    

c0011198 <KeFlushEnv()>:
c0011198:	c3                   	ret    

c0011199 <KeGetProcessTotalEnvCount(Process*)>:
c0011199:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001119d:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c00111a3:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111a9:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c00111ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00111b0:	03 01                	add    eax,DWORD PTR [ecx]
c00111b2:	85 d2                	test   edx,edx
c00111b4:	74 02                	je     c00111b8 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00111b6:	03 02                	add    eax,DWORD PTR [edx]
c00111b8:	c3                   	ret    

c00111b9 <KeGetProcessEnvPair(Process*, int)>:
c00111b9:	57                   	push   edi
c00111ba:	56                   	push   esi
c00111bb:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00111c1:	53                   	push   ebx
c00111c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111ca:	85 f6                	test   esi,esi
c00111cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111d0:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00111d8:	75 16                	jne    c00111f0 <KeGetProcessEnvPair(Process*, int)+0x37>
c00111da:	39 c2                	cmp    edx,eax
c00111dc:	7c 16                	jl     c00111f4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111de:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00111e4:	8b 31                	mov    esi,DWORD PTR [ecx]
c00111e6:	01 c6                	add    esi,eax
c00111e8:	39 d6                	cmp    esi,edx
c00111ea:	7e 3c                	jle    c0011228 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111ec:	29 c2                	sub    edx,eax
c00111ee:	eb 04                	jmp    c00111f4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111f0:	39 c2                	cmp    edx,eax
c00111f2:	7d 05                	jge    c00111f9 <KeGetProcessEnvPair(Process*, int)+0x40>
c00111f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00111f7:	eb 20                	jmp    c0011219 <KeGetProcessEnvPair(Process*, int)+0x60>
c00111f9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00111fb:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00111fe:	39 d1                	cmp    ecx,edx
c0011200:	7e 04                	jle    c0011206 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011202:	29 c2                	sub    edx,eax
c0011204:	eb 10                	jmp    c0011216 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011206:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c001120c:	03 0e                	add    ecx,DWORD PTR [esi]
c001120e:	39 d1                	cmp    ecx,edx
c0011210:	7e 16                	jle    c0011228 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011212:	29 c2                	sub    edx,eax
c0011214:	29 fa                	sub    edx,edi
c0011216:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011219:	8d 14 d0             	lea    edx,[eax+edx*8]
c001121c:	8b 02                	mov    eax,DWORD PTR [edx]
c001121e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011221:	89 03                	mov    DWORD PTR [ebx],eax
c0011223:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011226:	eb 1d                	jmp    c0011245 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011228:	83 ec 0c             	sub    esp,0xc
c001122b:	68 32 1e 02 c0       	push   0xc0021e32
c0011230:	e8 ac 00 00 00       	call   c00112e1 <KePanic(char const*)>
c0011235:	83 c4 10             	add    esp,0x10
c0011238:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001123e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011245:	89 d8                	mov    eax,ebx
c0011247:	5b                   	pop    ebx
c0011248:	5e                   	pop    esi
c0011249:	5f                   	pop    edi
c001124a:	c2 04 00             	ret    0x4

c001124d <CPU::current()>:
c001124d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011258:	c3                   	ret    

c0011259 <operator new(unsigned long)>:
c0011259:	e9 75 68 ff ff       	jmp    c0007ad3 <malloc>

c001125e <operator delete(void*)>:
c001125e:	e9 90 68 ff ff       	jmp    c0007af3 <rfree>

c0011263 <disableIRQs()>:
c0011263:	fa                   	cli    
c0011264:	c3                   	ret    

c0011265 <enableIRQs()>:
c0011265:	fb                   	sti    
c0011266:	c3                   	ret    

c0011267 <lockScheduler()>:
c0011267:	fa                   	cli    
c0011268:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001126e:	c3                   	ret    

c001126f <unlockScheduler()>:
c001126f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011274:	48                   	dec    eax
c0011275:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001127a:	75 01                	jne    c001127d <unlockScheduler()+0xe>
c001127c:	fb                   	sti    
c001127d:	c3                   	ret    

c001127e <lockStuff()>:
c001127e:	fa                   	cli    
c001127f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011285:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c001128b:	c3                   	ret    

c001128c <unlockStuff()>:
c001128c:	83 ec 0c             	sub    esp,0xc
c001128f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011294:	48                   	dec    eax
c0011295:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001129a:	75 18                	jne    c00112b4 <unlockStuff()+0x28>
c001129c:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00112a3:	74 0f                	je     c00112b4 <unlockStuff()+0x28>
c00112a5:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00112af:	e8 2c 49 00 00       	call   c0015be0 <schedule()>
c00112b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112b9:	48                   	dec    eax
c00112ba:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112bf:	75 01                	jne    c00112c2 <unlockStuff()+0x36>
c00112c1:	fb                   	sti    
c00112c2:	83 c4 0c             	add    esp,0xc
c00112c5:	c3                   	ret    

c00112c6 <Virt::getAKernelVAS()>:
c00112c6:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00112cb:	c3                   	ret    

c00112cc <__not_memcpy>:
c00112cc:	57                   	push   edi
c00112cd:	56                   	push   esi
c00112ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00112da:	89 c7                	mov    edi,eax
c00112dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112de:	5e                   	pop    esi
c00112df:	5f                   	pop    edi
c00112e0:	c3                   	ret    

c00112e1 <KePanic(char const*)>:
c00112e1:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00112e8:	e9 83 68 00 00       	jmp    c0017b70 <HalPanic(char const*)>

c00112ed <KePowerThread(void*)>:
c00112ed:	83 ec 0c             	sub    esp,0xc
c00112f0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112f5:	48                   	dec    eax
c00112f6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112fb:	75 01                	jne    c00112fe <KePowerThread(void*)+0x11>
c00112fd:	fb                   	sti    
c00112fe:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011305:	83 ec 0c             	sub    esp,0xc
c0011308:	6a 0a                	push   0xa
c001130a:	e8 01 4c 00 00       	call   c0015f10 <sleep(unsigned int)>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011319:	eb e3                	jmp    c00112fe <KePowerThread(void*)+0x11>

c001131b <KeChangePowerSettings(PowerSettings)>:
c001131b:	57                   	push   edi
c001131c:	b9 09 00 00 00       	mov    ecx,0x9
c0011321:	56                   	push   esi
c0011322:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c0011327:	fc                   	cld    
c0011328:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001132c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001132e:	5e                   	pop    esi
c001132f:	5f                   	pop    edi
c0011330:	c3                   	ret    

c0011331 <KeUserIOReceived()>:
c0011331:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001133b:	c3                   	ret    

c001133c <KeHandlePowerButton()>:
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0011344:	83 f8 02             	cmp    eax,0x2
c0011347:	75 10                	jne    c0011359 <KeHandlePowerButton()+0x1d>
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011352:	e8 f3 5d ff ff       	call   c000714a <Computer::shutdown()>
c0011357:	eb 11                	jmp    c001136a <KeHandlePowerButton()+0x2e>
c0011359:	48                   	dec    eax
c001135a:	75 11                	jne    c001136d <KeHandlePowerButton()+0x31>
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011365:	e8 10 5e ff ff       	call   c000717a <Computer::sleep()>
c001136a:	83 c4 10             	add    esp,0x10
c001136d:	83 c4 0c             	add    esp,0xc
c0011370:	c3                   	ret    

c0011371 <KeHandleSleepButton()>:
c0011371:	83 ec 0c             	sub    esp,0xc
c0011374:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011379:	83 f8 02             	cmp    eax,0x2
c001137c:	75 10                	jne    c001138e <KeHandleSleepButton()+0x1d>
c001137e:	83 ec 0c             	sub    esp,0xc
c0011381:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011387:	e8 be 5d ff ff       	call   c000714a <Computer::shutdown()>
c001138c:	eb 11                	jmp    c001139f <KeHandleSleepButton()+0x2e>
c001138e:	48                   	dec    eax
c001138f:	75 11                	jne    c00113a2 <KeHandleSleepButton()+0x31>
c0011391:	83 ec 0c             	sub    esp,0xc
c0011394:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001139a:	e8 db 5d ff ff       	call   c000717a <Computer::sleep()>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	83 c4 0c             	add    esp,0xc
c00113a5:	c3                   	ret    

c00113a6 <KeSetupPowerManager()>:
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	68 f0 00 00 00       	push   0xf0
c00113ae:	6a 00                	push   0x0
c00113b0:	68 ed 12 01 c0       	push   0xc00112ed
c00113b5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00113bb:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113c5:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113cc:	e8 c3 45 00 00       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c00113d1:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00113db:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00113e5:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00113ef:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00113f9:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c0011403:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c001140d:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c0011417:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011421:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001142b:	83 c4 1c             	add    esp,0x1c
c001142e:	c3                   	ret    

c001142f <KeRand()>:
c001142f:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011439:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c0011443:	53                   	push   ebx
c0011444:	01 c1                	add    ecx,eax
c0011446:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001144b:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011451:	01 ca                	add    edx,ecx
c0011453:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011458:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001145d:	83 d2 00             	adc    edx,0x0
c0011460:	0f b7 da             	movzx  ebx,dx
c0011463:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011469:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001146d:	5b                   	pop    ebx
c001146e:	c3                   	ret    

c001146f <KeSeedRand(unsigned int)>:
c001146f:	53                   	push   ebx
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011477:	e8 13 6a 00 00       	call   c0017e8f <HalGetRand()>
c001147c:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011486:	31 d8                	xor    eax,ebx
c0011488:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001148d:	e8 9d ff ff ff       	call   c001142f <KeRand()>
c0011492:	83 c4 08             	add    esp,0x8
c0011495:	5b                   	pop    ebx
c0011496:	eb 97                	jmp    c001142f <KeRand()>

c0011498 <KeInitRand()>:
c0011498:	83 ec 0c             	sub    esp,0xc
c001149b:	e8 e4 67 00 00       	call   c0017c84 <HalQueryPerformanceCounter()>
c00114a0:	0f 20 da             	mov    edx,cr3
c00114a3:	0f 22 da             	mov    cr3,edx
c00114a6:	0f 20 da             	mov    edx,cr3
c00114a9:	0f 22 da             	mov    cr3,edx
c00114ac:	0f 20 da             	mov    edx,cr3
c00114af:	0f 22 da             	mov    cr3,edx
c00114b2:	0f 20 da             	mov    edx,cr3
c00114b5:	0f 22 da             	mov    cr3,edx
c00114b8:	83 ec 0c             	sub    esp,0xc
c00114bb:	35 03 8a 95 38       	xor    eax,0x38958a03
c00114c0:	50                   	push   eax
c00114c1:	e8 a9 ff ff ff       	call   c001146f <KeSeedRand(unsigned int)>
c00114c6:	83 c4 1c             	add    esp,0x1c
c00114c9:	c3                   	ret    
c00114ca:	66 90                	xchg   ax,ax

c00114cc <KeResolveCompatibilitySymbol(char*)>:
c00114cc:	83 ec 0c             	sub    esp,0xc
c00114cf:	83 ec 08             	sub    esp,0x8
c00114d2:	68 4c 1e 02 c0       	push   0xc0021e4c
c00114d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114db:	e8 a0 f2 fe ff       	call   c0000780 <strcmp>
c00114e0:	83 c4 10             	add    esp,0x10
c00114e3:	85 c0                	test   eax,eax
c00114e5:	0f 94 c0             	sete   al
c00114e8:	0f b6 c0             	movzx  eax,al
c00114eb:	85 c0                	test   eax,eax
c00114ed:	74 0d                	je     c00114fc <KeResolveCompatibilitySymbol(char*)+0x30>
c00114ef:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00114f4:	e9 8b 01 00 00       	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114f9:	8d 76 00             	lea    esi,[esi+0x0]
c00114fc:	83 ec 08             	sub    esp,0x8
c00114ff:	68 55 1e 02 c0       	push   0xc0021e55
c0011504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011508:	e8 73 f2 fe ff       	call   c0000780 <strcmp>
c001150d:	83 c4 10             	add    esp,0x10
c0011510:	85 c0                	test   eax,eax
c0011512:	0f 94 c0             	sete   al
c0011515:	0f b6 c0             	movzx  eax,al
c0011518:	85 c0                	test   eax,eax
c001151a:	74 0c                	je     c0011528 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001151c:	b8 a0 f2 01 c0       	mov    eax,0xc001f2a0
c0011521:	e9 5e 01 00 00       	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011526:	66 90                	xchg   ax,ax
c0011528:	83 ec 08             	sub    esp,0x8
c001152b:	68 5f 1e 02 c0       	push   0xc0021e5f
c0011530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011534:	e8 47 f2 fe ff       	call   c0000780 <strcmp>
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	85 c0                	test   eax,eax
c001153e:	0f 94 c0             	sete   al
c0011541:	0f b6 c0             	movzx  eax,al
c0011544:	85 c0                	test   eax,eax
c0011546:	74 0c                	je     c0011554 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011548:	b8 d4 ef 01 c0       	mov    eax,0xc001efd4
c001154d:	e9 32 01 00 00       	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011552:	66 90                	xchg   ax,ax
c0011554:	83 ec 08             	sub    esp,0x8
c0011557:	68 68 1e 02 c0       	push   0xc0021e68
c001155c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011560:	e8 1b f2 fe ff       	call   c0000780 <strcmp>
c0011565:	83 c4 10             	add    esp,0x10
c0011568:	85 c0                	test   eax,eax
c001156a:	0f 94 c0             	sete   al
c001156d:	0f b6 c0             	movzx  eax,al
c0011570:	85 c0                	test   eax,eax
c0011572:	74 0c                	je     c0011580 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011574:	b8 e1 12 01 c0       	mov    eax,0xc00112e1
c0011579:	e9 06 01 00 00       	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001157e:	66 90                	xchg   ax,ax
c0011580:	83 ec 08             	sub    esp,0x8
c0011583:	68 7b 1e 02 c0       	push   0xc0021e7b
c0011588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001158c:	e8 ef f1 fe ff       	call   c0000780 <strcmp>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	85 c0                	test   eax,eax
c0011596:	0f 94 c0             	sete   al
c0011599:	0f b6 c0             	movzx  eax,al
c001159c:	85 c0                	test   eax,eax
c001159e:	74 0c                	je     c00115ac <KeResolveCompatibilitySymbol(char*)+0xe0>
c00115a0:	b8 0d 0c 01 c0       	mov    eax,0xc0010c0d
c00115a5:	e9 da 00 00 00       	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115aa:	66 90                	xchg   ax,ax
c00115ac:	83 ec 08             	sub    esp,0x8
c00115af:	68 98 1e 02 c0       	push   0xc0021e98
c00115b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115b8:	e8 c3 f1 fe ff       	call   c0000780 <strcmp>
c00115bd:	83 c4 10             	add    esp,0x10
c00115c0:	85 c0                	test   eax,eax
c00115c2:	0f 94 c0             	sete   al
c00115c5:	0f b6 c0             	movzx  eax,al
c00115c8:	85 c0                	test   eax,eax
c00115ca:	74 0c                	je     c00115d8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00115cc:	b8 a0 f3 01 c0       	mov    eax,0xc001f3a0
c00115d1:	e9 ae 00 00 00       	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115d6:	66 90                	xchg   ax,ax
c00115d8:	83 ec 08             	sub    esp,0x8
c00115db:	68 a2 1e 02 c0       	push   0xc0021ea2
c00115e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e4:	e8 97 f1 fe ff       	call   c0000780 <strcmp>
c00115e9:	83 c4 10             	add    esp,0x10
c00115ec:	85 c0                	test   eax,eax
c00115ee:	0f 94 c0             	sete   al
c00115f1:	0f b6 c0             	movzx  eax,al
c00115f4:	85 c0                	test   eax,eax
c00115f6:	74 0c                	je     c0011604 <KeResolveCompatibilitySymbol(char*)+0x138>
c00115f8:	b8 20 f1 01 c0       	mov    eax,0xc001f120
c00115fd:	e9 82 00 00 00       	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011602:	66 90                	xchg   ax,ax
c0011604:	83 ec 08             	sub    esp,0x8
c0011607:	68 ab 1e 02 c0       	push   0xc0021eab
c001160c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011610:	e8 6b f1 fe ff       	call   c0000780 <strcmp>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	85 c0                	test   eax,eax
c001161a:	0f 94 c0             	sete   al
c001161d:	0f b6 c0             	movzx  eax,al
c0011620:	85 c0                	test   eax,eax
c0011622:	74 08                	je     c001162c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011624:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011629:	eb 59                	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001162b:	90                   	nop
c001162c:	83 ec 08             	sub    esp,0x8
c001162f:	68 c3 1e 02 c0       	push   0xc0021ec3
c0011634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011638:	e8 43 f1 fe ff       	call   c0000780 <strcmp>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	85 c0                	test   eax,eax
c0011642:	0f 94 c0             	sete   al
c0011645:	0f b6 c0             	movzx  eax,al
c0011648:	85 c0                	test   eax,eax
c001164a:	74 08                	je     c0011654 <KeResolveCompatibilitySymbol(char*)+0x188>
c001164c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011651:	eb 31                	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011653:	90                   	nop
c0011654:	83 ec 08             	sub    esp,0x8
c0011657:	68 d0 1e 02 c0       	push   0xc0021ed0
c001165c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011660:	e8 1b f1 fe ff       	call   c0000780 <strcmp>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	85 c0                	test   eax,eax
c001166a:	0f 94 c0             	sete   al
c001166d:	0f b6 c0             	movzx  eax,al
c0011670:	85 c0                	test   eax,eax
c0011672:	74 08                	je     c001167c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011674:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011679:	eb 09                	jmp    c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001167b:	90                   	nop
c001167c:	b8 00 00 00 00       	mov    eax,0x0
c0011681:	8d 76 00             	lea    esi,[esi+0x0]
c0011684:	83 c4 0c             	add    esp,0xc
c0011687:	c3                   	ret    

c0011688 <KiSigKill(int)>:
c0011688:	83 ec 0c             	sub    esp,0xc
c001168b:	6a 00                	push   0x0
c001168d:	6a 00                	push   0x0
c001168f:	6a ff                	push   0xffffffff
c0011691:	6a 01                	push   0x1
c0011693:	e8 ba 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011698:	83 c4 1c             	add    esp,0x1c
c001169b:	c3                   	ret    

c001169c <KiDefaultSignalHandlerIgnore(int)>:
c001169c:	c3                   	ret    

c001169d <KiDefaultSignalHandlerPause(int)>:
c001169d:	57                   	push   edi
c001169e:	b9 07 00 00 00       	mov    ecx,0x7
c00116a3:	56                   	push   esi
c00116a4:	be 19 1f 02 c0       	mov    esi,0xc0021f19
c00116a9:	83 ec 24             	sub    esp,0x24
c00116ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00116b0:	fc                   	cld    
c00116b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116b3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00116b7:	50                   	push   eax
c00116b8:	6a 00                	push   0x0
c00116ba:	6a 00                	push   0x0
c00116bc:	6a 27                	push   0x27
c00116be:	e8 8f 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116c3:	83 c4 34             	add    esp,0x34
c00116c6:	5e                   	pop    esi
c00116c7:	5f                   	pop    edi
c00116c8:	c3                   	ret    

c00116c9 <KiDefaultSignalHandlerResume(int)>:
c00116c9:	57                   	push   edi
c00116ca:	b9 1d 00 00 00       	mov    ecx,0x1d
c00116cf:	56                   	push   esi
c00116d0:	be 35 1f 02 c0       	mov    esi,0xc0021f35
c00116d5:	83 ec 24             	sub    esp,0x24
c00116d8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00116dc:	fc                   	cld    
c00116dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116df:	8d 44 24 03          	lea    eax,[esp+0x3]
c00116e3:	50                   	push   eax
c00116e4:	6a 00                	push   0x0
c00116e6:	6a 00                	push   0x0
c00116e8:	6a 27                	push   0x27
c00116ea:	e8 63 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116ef:	83 c4 34             	add    esp,0x34
c00116f2:	5e                   	pop    esi
c00116f3:	5f                   	pop    edi
c00116f4:	c3                   	ret    

c00116f5 <KeDeinitSignals(SigHandlerBlock*)>:
c00116f5:	e9 e9 63 ff ff       	jmp    c0007ae3 <free>

c00116fa <KeInitSignals()>:
c00116fa:	53                   	push   ebx
c00116fb:	83 ec 14             	sub    esp,0x14
c00116fe:	68 c8 00 00 00       	push   0xc8
c0011703:	e8 cb 63 ff ff       	call   c0007ad3 <malloc>
c0011708:	83 c4 0c             	add    esp,0xc
c001170b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011715:	89 c3                	mov    ebx,eax
c0011717:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011721:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011727:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c001172b:	6a 20                	push   0x20
c001172d:	6a 00                	push   0x0
c001172f:	50                   	push   eax
c0011730:	e8 bb ed fe ff       	call   c00004f0 <memset>
c0011735:	83 c4 0c             	add    esp,0xc
c0011738:	6a 44                	push   0x44
c001173a:	6a 00                	push   0x0
c001173c:	53                   	push   ebx
c001173d:	e8 ae ed fe ff       	call   c00004f0 <memset>
c0011742:	83 c4 18             	add    esp,0x18
c0011745:	89 d8                	mov    eax,ebx
c0011747:	5b                   	pop    ebx
c0011748:	c3                   	ret    

c0011749 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011749:	53                   	push   ebx
c001174a:	b8 01 00 00 00       	mov    eax,0x1
c001174f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011753:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011757:	83 f9 10             	cmp    ecx,0x10
c001175a:	7f 21                	jg     c001177d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001175c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011760:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011763:	89 03                	mov    DWORD PTR [ebx],eax
c0011765:	b8 01 00 00 00       	mov    eax,0x1
c001176a:	d3 e0                	shl    eax,cl
c001176c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011770:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011773:	31 c0                	xor    eax,eax
c0011775:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001177d:	5b                   	pop    ebx
c001177e:	c3                   	ret    

c001177f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001177f:	55                   	push   ebp
c0011780:	57                   	push   edi
c0011781:	bf 08 00 00 00       	mov    edi,0x8
c0011786:	56                   	push   esi
c0011787:	53                   	push   ebx
c0011788:	83 ec 18             	sub    esp,0x18
c001178b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001178f:	68 52 1f 02 c0       	push   0xc0021f52
c0011794:	e8 71 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	31 c9                	xor    ecx,ecx
c001179e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00117a5:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00117ab:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00117af:	99                   	cdq    
c00117b0:	f7 ff                	idiv   edi
c00117b2:	8d 42 24             	lea    eax,[edx+0x24]
c00117b5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00117b9:	85 f6                	test   esi,esi
c00117bb:	75 1a                	jne    c00117d7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00117bd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00117c1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00117c5:	50                   	push   eax
c00117c6:	50                   	push   eax
c00117c7:	52                   	push   edx
c00117c8:	68 63 1f 02 c0       	push   0xc0021f63
c00117cd:	e8 38 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117d2:	83 c4 10             	add    esp,0x10
c00117d5:	eb 1b                	jmp    c00117f2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00117d7:	41                   	inc    ecx
c00117d8:	83 f9 08             	cmp    ecx,0x8
c00117db:	75 ce                	jne    c00117ab <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00117dd:	83 ec 0c             	sub    esp,0xc
c00117e0:	be 01 00 00 00       	mov    esi,0x1
c00117e5:	68 84 1f 02 c0       	push   0xc0021f84
c00117ea:	e8 1b 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117ef:	83 c4 10             	add    esp,0x10
c00117f2:	83 c4 0c             	add    esp,0xc
c00117f5:	89 f0                	mov    eax,esi
c00117f7:	5b                   	pop    ebx
c00117f8:	5e                   	pop    esi
c00117f9:	5f                   	pop    edi
c00117fa:	5d                   	pop    ebp
c00117fb:	c3                   	ret    

c00117fc <KeCheckSignal(SigHandlerBlock*, int*)>:
c00117fc:	55                   	push   ebp
c00117fd:	57                   	push   edi
c00117fe:	56                   	push   esi
c00117ff:	53                   	push   ebx
c0011800:	51                   	push   ecx
c0011801:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011805:	85 db                	test   ebx,ebx
c0011807:	0f 84 bc 00 00 00    	je     c00118c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001180d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011814:	0f 84 af 00 00 00    	je     c00118c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001181a:	31 c9                	xor    ecx,ecx
c001181c:	bf 08 00 00 00       	mov    edi,0x8
c0011821:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011827:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001182a:	99                   	cdq    
c001182b:	f7 ff                	idiv   edi
c001182d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011834:	85 ed                	test   ebp,ebp
c0011836:	0f 84 9e 00 00 00    	je     c00118da <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001183c:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011842:	89 e9                	mov    ecx,ebp
c0011844:	bf 01 00 00 00       	mov    edi,0x1
c0011849:	d3 e7                	shl    edi,cl
c001184b:	31 c9                	xor    ecx,ecx
c001184d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011850:	b8 01 00 00 00       	mov    eax,0x1
c0011855:	d3 e0                	shl    eax,cl
c0011857:	85 04 24             	test   DWORD PTR [esp],eax
c001185a:	74 06                	je     c0011862 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001185c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011860:	75 67                	jne    c00118c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011862:	41                   	inc    ecx
c0011863:	83 f9 11             	cmp    ecx,0x11
c0011866:	75 e8                	jne    c0011850 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011868:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001186b:	46                   	inc    esi
c001186c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011872:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001187d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011884:	09 f8                	or     eax,edi
c0011886:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001188c:	31 c0                	xor    eax,eax
c001188e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011896:	74 09                	je     c00118a1 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011898:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001189f:	eb 06                	jmp    c00118a7 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00118a1:	40                   	inc    eax
c00118a2:	83 f8 08             	cmp    eax,0x8
c00118a5:	75 e7                	jne    c001188e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00118a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00118ab:	83 fd 09             	cmp    ebp,0x9
c00118ae:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00118b1:	89 2a                	mov    DWORD PTR [edx],ebp
c00118b3:	75 07                	jne    c00118bc <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00118b5:	b8 88 16 01 c0       	mov    eax,0xc0011688
c00118ba:	eb 31                	jmp    c00118ed <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118bc:	83 f8 01             	cmp    eax,0x1
c00118bf:	75 0c                	jne    c00118cd <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00118c1:	f7 d7                	not    edi
c00118c3:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00118c9:	31 c0                	xor    eax,eax
c00118cb:	eb 20                	jmp    c00118ed <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118cd:	85 c0                	test   eax,eax
c00118cf:	75 1c                	jne    c00118ed <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118d1:	8b 04 ad 80 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcc80]
c00118d8:	eb 13                	jmp    c00118ed <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118da:	41                   	inc    ecx
c00118db:	46                   	inc    esi
c00118dc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118e2:	83 f9 08             	cmp    ecx,0x8
c00118e5:	0f 85 36 ff ff ff    	jne    c0011821 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00118eb:	eb dc                	jmp    c00118c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118ed:	5a                   	pop    edx
c00118ee:	5b                   	pop    ebx
c00118ef:	5e                   	pop    esi
c00118f0:	5f                   	pop    edi
c00118f1:	5d                   	pop    ebp
c00118f2:	c3                   	ret    

c00118f3 <KiCheckSignalZ>:
c00118f3:	83 ec 10             	sub    esp,0x10
c00118f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00118fa:	50                   	push   eax
c00118fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011900:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011903:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011909:	e8 ee fe ff ff       	call   c00117fc <KeCheckSignal(SigHandlerBlock*, int*)>
c001190e:	5a                   	pop    edx
c001190f:	31 d2                	xor    edx,edx
c0011911:	59                   	pop    ecx
c0011912:	85 c0                	test   eax,eax
c0011914:	74 19                	je     c001192f <KiCheckSignalZ+0x3c>
c0011916:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001191c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001191f:	89 02                	mov    DWORD PTR [edx],eax
c0011921:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011928:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001192c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001192f:	89 d0                	mov    eax,edx
c0011931:	83 c4 10             	add    esp,0x10
c0011934:	c3                   	ret    

c0011935 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011935:	56                   	push   esi
c0011936:	53                   	push   ebx
c0011937:	bb 01 00 00 00       	mov    ebx,0x1
c001193c:	52                   	push   edx
c001193d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011941:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011945:	d3 e3                	shl    ebx,cl
c0011947:	83 f9 10             	cmp    ecx,0x10
c001194a:	7f 08                	jg     c0011954 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001194c:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011952:	75 10                	jne    c0011964 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011954:	83 ec 0c             	sub    esp,0xc
c0011957:	68 95 1f 02 c0       	push   0xc0021f95
c001195c:	e8 80 f9 ff ff       	call   c00112e1 <KePanic(char const*)>
c0011961:	83 c4 10             	add    esp,0x10
c0011964:	f7 d3                	not    ebx
c0011966:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001196c:	58                   	pop    eax
c001196d:	5b                   	pop    ebx
c001196e:	5e                   	pop    esi
c001196f:	c3                   	ret    

c0011970 <KiFinishSignalZ>:
c0011970:	53                   	push   ebx
c0011971:	83 ec 10             	sub    esp,0x10
c0011974:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011978:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001197b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011980:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011983:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011989:	e8 a7 ff ff ff       	call   c0011935 <KeCompleteSignal(SigHandlerBlock*, int)>
c001198e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011994:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001199b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00119a2:	83 c4 18             	add    esp,0x18
c00119a5:	5b                   	pop    ebx
c00119a6:	c3                   	ret    

c00119a7 <SysSeekDir(regs*)>:
c00119a7:	31 c0                	xor    eax,eax
c00119a9:	31 d2                	xor    edx,edx
c00119ab:	c3                   	ret    

c00119ac <SysTellDir(regs*)>:
c00119ac:	31 c0                	xor    eax,eax
c00119ae:	31 d2                	xor    edx,edx
c00119b0:	c3                   	ret    

c00119b1 <SysVerify(regs*)>:
c00119b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119b5:	31 d2                	xor    edx,edx
c00119b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119ba:	c3                   	ret    

c00119bb <SysGetArgc(regs*)>:
c00119bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00119c9:	89 c2                	mov    edx,eax
c00119cb:	c1 fa 1f             	sar    edx,0x1f
c00119ce:	c3                   	ret    

c00119cf <SysTTYName(regs*)>:
c00119cf:	b8 01 00 00 00       	mov    eax,0x1
c00119d4:	31 d2                	xor    edx,edx
c00119d6:	c3                   	ret    

c00119d7 <SysFormatDisk(regs*)>:
c00119d7:	56                   	push   esi
c00119d8:	53                   	push   ebx
c00119d9:	83 ec 04             	sub    esp,0x4
c00119dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119e0:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00119e6:	eb 2a                	jmp    c0011a12 <SysFormatDisk(regs*)+0x3b>
c00119e8:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00119eb:	83 ec 0c             	sub    esp,0xc
c00119ee:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119f3:	51                   	push   ecx
c00119f4:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00119f7:	51                   	push   ecx
c00119f8:	50                   	push   eax
c00119f9:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a00:	50                   	push   eax
c0011a01:	53                   	push   ebx
c0011a02:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a05:	83 c4 20             	add    esp,0x20
c0011a08:	83 f8 08             	cmp    eax,0x8
c0011a0b:	89 c1                	mov    ecx,eax
c0011a0d:	75 14                	jne    c0011a23 <SysFormatDisk(regs*)+0x4c>
c0011a0f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a12:	85 db                	test   ebx,ebx
c0011a14:	75 d2                	jne    c00119e8 <SysFormatDisk(regs*)+0x11>
c0011a16:	b8 03 00 00 00       	mov    eax,0x3
c0011a1b:	31 d2                	xor    edx,edx
c0011a1d:	83 c4 04             	add    esp,0x4
c0011a20:	5b                   	pop    ebx
c0011a21:	5e                   	pop    esi
c0011a22:	c3                   	ret    
c0011a23:	85 c0                	test   eax,eax
c0011a25:	74 13                	je     c0011a3a <SysFormatDisk(regs*)+0x63>
c0011a27:	31 d2                	xor    edx,edx
c0011a29:	83 f9 09             	cmp    ecx,0x9
c0011a2c:	b8 01 00 00 00       	mov    eax,0x1
c0011a31:	74 ea                	je     c0011a1d <SysFormatDisk(regs*)+0x46>
c0011a33:	b8 02 00 00 00       	mov    eax,0x2
c0011a38:	eb e1                	jmp    c0011a1b <SysFormatDisk(regs*)+0x44>
c0011a3a:	31 c0                	xor    eax,eax
c0011a3c:	eb dd                	jmp    c0011a1b <SysFormatDisk(regs*)+0x44>

c0011a3e <SysSetDiskVolumeLabel(regs*)>:
c0011a3e:	56                   	push   esi
c0011a3f:	53                   	push   ebx
c0011a40:	83 ec 04             	sub    esp,0x4
c0011a43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a47:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a4a:	83 f8 19             	cmp    eax,0x19
c0011a4d:	77 33                	ja     c0011a82 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a4f:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a56:	85 c9                	test   ecx,ecx
c0011a58:	74 28                	je     c0011a82 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a5a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a5d:	85 db                	test   ebx,ebx
c0011a5f:	74 21                	je     c0011a82 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a61:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a67:	85 d2                	test   edx,edx
c0011a69:	74 17                	je     c0011a82 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a6b:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a6d:	53                   	push   ebx
c0011a6e:	50                   	push   eax
c0011a6f:	51                   	push   ecx
c0011a70:	52                   	push   edx
c0011a71:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	83 c4 04             	add    esp,0x4
c0011a7a:	5b                   	pop    ebx
c0011a7b:	5e                   	pop    esi
c0011a7c:	89 c2                	mov    edx,eax
c0011a7e:	c1 fa 1f             	sar    edx,0x1f
c0011a81:	c3                   	ret    
c0011a82:	83 c4 04             	add    esp,0x4
c0011a85:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a8a:	5b                   	pop    ebx
c0011a8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a90:	5e                   	pop    esi
c0011a91:	c3                   	ret    

c0011a92 <SysGetDiskVolumeLabel(regs*)>:
c0011a92:	57                   	push   edi
c0011a93:	56                   	push   esi
c0011a94:	53                   	push   ebx
c0011a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a99:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a9c:	83 fa 19             	cmp    edx,0x19
c0011a9f:	77 3c                	ja     c0011add <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aa1:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011aa8:	85 c9                	test   ecx,ecx
c0011aaa:	74 31                	je     c0011add <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aac:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011aaf:	85 db                	test   ebx,ebx
c0011ab1:	74 2a                	je     c0011add <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ab3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ab6:	85 f6                	test   esi,esi
c0011ab8:	74 23                	je     c0011add <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aba:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ac0:	85 c0                	test   eax,eax
c0011ac2:	74 19                	je     c0011add <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ac4:	83 ec 0c             	sub    esp,0xc
c0011ac7:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ac9:	56                   	push   esi
c0011aca:	53                   	push   ebx
c0011acb:	52                   	push   edx
c0011acc:	51                   	push   ecx
c0011acd:	50                   	push   eax
c0011ace:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ad1:	83 c4 20             	add    esp,0x20
c0011ad4:	5b                   	pop    ebx
c0011ad5:	5e                   	pop    esi
c0011ad6:	89 c2                	mov    edx,eax
c0011ad8:	c1 fa 1f             	sar    edx,0x1f
c0011adb:	5f                   	pop    edi
c0011adc:	c3                   	ret    
c0011add:	5b                   	pop    ebx
c0011ade:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ae3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ae8:	5e                   	pop    esi
c0011ae9:	5f                   	pop    edi
c0011aea:	c3                   	ret    

c0011aeb <SysShutdown(regs*)>:
c0011aeb:	57                   	push   edi
c0011aec:	56                   	push   esi
c0011aed:	83 ec 04             	sub    esp,0x4
c0011af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011af7:	85 c0                	test   eax,eax
c0011af9:	74 1e                	je     c0011b19 <SysShutdown(regs*)+0x2e>
c0011afb:	83 f8 01             	cmp    eax,0x1
c0011afe:	74 5f                	je     c0011b5f <SysShutdown(regs*)+0x74>
c0011b00:	83 f8 02             	cmp    eax,0x2
c0011b03:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b08:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b0d:	74 32                	je     c0011b41 <SysShutdown(regs*)+0x56>
c0011b0f:	83 c4 04             	add    esp,0x4
c0011b12:	89 f0                	mov    eax,esi
c0011b14:	5e                   	pop    esi
c0011b15:	89 fa                	mov    edx,edi
c0011b17:	5f                   	pop    edi
c0011b18:	c3                   	ret    
c0011b19:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b1e:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b28:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b2a:	6a 00                	push   0x0
c0011b2c:	6a 00                	push   0x0
c0011b2e:	6a 00                	push   0x0
c0011b30:	50                   	push   eax
c0011b31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b34:	83 c4 10             	add    esp,0x10
c0011b37:	89 f0                	mov    eax,esi
c0011b39:	83 c4 04             	add    esp,0x4
c0011b3c:	89 fa                	mov    edx,edi
c0011b3e:	5e                   	pop    esi
c0011b3f:	5f                   	pop    edi
c0011b40:	c3                   	ret    
c0011b41:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b46:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b48:	6a 00                	push   0x0
c0011b4a:	6a 00                	push   0x0
c0011b4c:	6a 01                	push   0x1
c0011b4e:	50                   	push   eax
c0011b4f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b52:	83 c4 10             	add    esp,0x10
c0011b55:	89 f0                	mov    eax,esi
c0011b57:	83 c4 04             	add    esp,0x4
c0011b5a:	89 fa                	mov    edx,edi
c0011b5c:	5e                   	pop    esi
c0011b5d:	5f                   	pop    edi
c0011b5e:	c3                   	ret    
c0011b5f:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b64:	85 c0                	test   eax,eax
c0011b66:	74 02                	je     c0011b6a <SysShutdown(regs*)+0x7f>
c0011b68:	ff d0                	call   eax
c0011b6a:	31 f6                	xor    esi,esi
c0011b6c:	83 c4 04             	add    esp,0x4
c0011b6f:	89 f0                	mov    eax,esi
c0011b71:	31 ff                	xor    edi,edi
c0011b73:	5e                   	pop    esi
c0011b74:	89 fa                	mov    edx,edi
c0011b76:	5f                   	pop    edi
c0011b77:	c3                   	ret    

c0011b78 <SysRealpath(regs*)>:
c0011b78:	53                   	push   ebx
c0011b79:	83 ec 08             	sub    esp,0x8
c0011b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b80:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011b83:	85 c9                	test   ecx,ecx
c0011b85:	74 36                	je     c0011bbd <SysRealpath(regs*)+0x45>
c0011b87:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b8a:	31 d2                	xor    edx,edx
c0011b8c:	b8 01 00 00 00       	mov    eax,0x1
c0011b91:	85 db                	test   ebx,ebx
c0011b93:	75 05                	jne    c0011b9a <SysRealpath(regs*)+0x22>
c0011b95:	83 c4 08             	add    esp,0x8
c0011b98:	5b                   	pop    ebx
c0011b99:	c3                   	ret    
c0011b9a:	6a 00                	push   0x0
c0011b9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba4:	05 0c 01 00 00       	add    eax,0x10c
c0011ba9:	50                   	push   eax
c0011baa:	51                   	push   ecx
c0011bab:	53                   	push   ebx
c0011bac:	e8 fb 99 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011bb1:	83 c4 10             	add    esp,0x10
c0011bb4:	31 c0                	xor    eax,eax
c0011bb6:	31 d2                	xor    edx,edx
c0011bb8:	83 c4 08             	add    esp,0x8
c0011bbb:	5b                   	pop    ebx
c0011bbc:	c3                   	ret    
c0011bbd:	b8 01 00 00 00       	mov    eax,0x1
c0011bc2:	31 d2                	xor    edx,edx
c0011bc4:	eb f2                	jmp    c0011bb8 <SysRealpath(regs*)+0x40>

c0011bc6 <SysReadDir(regs*)>:
c0011bc6:	53                   	push   ebx
c0011bc7:	83 ec 18             	sub    esp,0x18
c0011bca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bce:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bd1:	83 f8 02             	cmp    eax,0x2
c0011bd4:	76 4f                	jbe    c0011c25 <SysReadDir(regs*)+0x5f>
c0011bd6:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011bdd:	77 52                	ja     c0011c31 <SysReadDir(regs*)+0x6b>
c0011bdf:	83 ec 0c             	sub    esp,0xc
c0011be2:	50                   	push   eax
c0011be3:	e8 b3 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011be8:	83 c4 10             	add    esp,0x10
c0011beb:	85 c0                	test   eax,eax
c0011bed:	74 42                	je     c0011c31 <SysReadDir(regs*)+0x6b>
c0011bef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bf7:	83 ec 0c             	sub    esp,0xc
c0011bfa:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bfe:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c00:	51                   	push   ecx
c0011c01:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c04:	51                   	push   ecx
c0011c05:	6a 00                	push   0x0
c0011c07:	68 10 01 00 00       	push   0x110
c0011c0c:	50                   	push   eax
c0011c0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c10:	83 c4 20             	add    esp,0x20
c0011c13:	85 c0                	test   eax,eax
c0011c15:	89 c1                	mov    ecx,eax
c0011c17:	74 27                	je     c0011c40 <SysReadDir(regs*)+0x7a>
c0011c19:	31 d2                	xor    edx,edx
c0011c1b:	83 f9 07             	cmp    ecx,0x7
c0011c1e:	b8 02 00 00 00       	mov    eax,0x2
c0011c23:	75 16                	jne    c0011c3b <SysReadDir(regs*)+0x75>
c0011c25:	b8 01 00 00 00       	mov    eax,0x1
c0011c2a:	31 d2                	xor    edx,edx
c0011c2c:	83 c4 18             	add    esp,0x18
c0011c2f:	5b                   	pop    ebx
c0011c30:	c3                   	ret    
c0011c31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c36:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c3b:	83 c4 18             	add    esp,0x18
c0011c3e:	5b                   	pop    ebx
c0011c3f:	c3                   	ret    
c0011c40:	31 c0                	xor    eax,eax
c0011c42:	31 d2                	xor    edx,edx
c0011c44:	eb e6                	jmp    c0011c2c <SysReadDir(regs*)+0x66>

c0011c46 <SysIsATTY(regs*)>:
c0011c46:	83 ec 0c             	sub    esp,0xc
c0011c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c50:	83 f8 02             	cmp    eax,0x2
c0011c53:	76 07                	jbe    c0011c5c <SysIsATTY(regs*)+0x16>
c0011c55:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c5a:	75 26                	jne    c0011c82 <SysIsATTY(regs*)+0x3c>
c0011c5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c64:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c6a:	85 c0                	test   eax,eax
c0011c6c:	74 24                	je     c0011c92 <SysIsATTY(regs*)+0x4c>
c0011c6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c70:	83 ec 0c             	sub    esp,0xc
c0011c73:	50                   	push   eax
c0011c74:	ff 12                	call   DWORD PTR [edx]
c0011c76:	83 c4 10             	add    esp,0x10
c0011c79:	31 d2                	xor    edx,edx
c0011c7b:	83 c4 0c             	add    esp,0xc
c0011c7e:	0f b6 c0             	movzx  eax,al
c0011c81:	c3                   	ret    
c0011c82:	83 ec 0c             	sub    esp,0xc
c0011c85:	50                   	push   eax
c0011c86:	e8 10 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	85 c0                	test   eax,eax
c0011c90:	75 dc                	jne    c0011c6e <SysIsATTY(regs*)+0x28>
c0011c92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c9c:	83 c4 0c             	add    esp,0xc
c0011c9f:	c3                   	ret    

c0011ca0 <SysSeek(regs*)>:
c0011ca0:	56                   	push   esi
c0011ca1:	53                   	push   ebx
c0011ca2:	83 ec 04             	sub    esp,0x4
c0011ca5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ca9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cac:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011caf:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011cb5:	77 33                	ja     c0011cea <SysSeek(regs*)+0x4a>
c0011cb7:	83 ec 0c             	sub    esp,0xc
c0011cba:	51                   	push   ecx
c0011cbb:	e8 db 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011cc0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011cc3:	83 c4 0c             	add    esp,0xc
c0011cc6:	31 db                	xor    ebx,ebx
c0011cc8:	53                   	push   ebx
c0011cc9:	51                   	push   ecx
c0011cca:	50                   	push   eax
c0011ccb:	e8 d2 9c ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	85 c0                	test   eax,eax
c0011cd5:	0f 95 c0             	setne  al
c0011cd8:	31 d2                	xor    edx,edx
c0011cda:	0f b6 c0             	movzx  eax,al
c0011cdd:	f7 d8                	neg    eax
c0011cdf:	83 d2 00             	adc    edx,0x0
c0011ce2:	83 c4 04             	add    esp,0x4
c0011ce5:	5b                   	pop    ebx
c0011ce6:	f7 da                	neg    edx
c0011ce8:	5e                   	pop    esi
c0011ce9:	c3                   	ret    
c0011cea:	83 c4 04             	add    esp,0x4
c0011ced:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cf2:	5b                   	pop    ebx
c0011cf3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cf8:	5e                   	pop    esi
c0011cf9:	c3                   	ret    

c0011cfa <SysTell(regs*)>:
c0011cfa:	53                   	push   ebx
c0011cfb:	83 ec 08             	sub    esp,0x8
c0011cfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d02:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d05:	83 f8 02             	cmp    eax,0x2
c0011d08:	76 4e                	jbe    c0011d58 <SysTell(regs*)+0x5e>
c0011d0a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d0f:	76 19                	jbe    c0011d2a <SysTell(regs*)+0x30>
c0011d11:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d14:	31 d2                	xor    edx,edx
c0011d16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d23:	83 c4 08             	add    esp,0x8
c0011d26:	31 c0                	xor    eax,eax
c0011d28:	5b                   	pop    ebx
c0011d29:	c3                   	ret    
c0011d2a:	83 ec 0c             	sub    esp,0xc
c0011d2d:	50                   	push   eax
c0011d2e:	e8 68 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d33:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d36:	5a                   	pop    edx
c0011d37:	59                   	pop    ecx
c0011d38:	53                   	push   ebx
c0011d39:	50                   	push   eax
c0011d3a:	e8 0f 9d ff ff       	call   c000ba4e <File::tell(unsigned long long*)>
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	85 c0                	test   eax,eax
c0011d44:	0f 95 c0             	setne  al
c0011d47:	31 d2                	xor    edx,edx
c0011d49:	0f b6 c0             	movzx  eax,al
c0011d4c:	f7 d8                	neg    eax
c0011d4e:	83 d2 00             	adc    edx,0x0
c0011d51:	83 c4 08             	add    esp,0x8
c0011d54:	5b                   	pop    ebx
c0011d55:	f7 da                	neg    edx
c0011d57:	c3                   	ret    
c0011d58:	83 c4 08             	add    esp,0x8
c0011d5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d60:	5b                   	pop    ebx
c0011d61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d66:	c3                   	ret    

c0011d67 <SysSize(regs*)>:
c0011d67:	53                   	push   ebx
c0011d68:	83 ec 18             	sub    esp,0x18
c0011d6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d72:	83 f8 02             	cmp    eax,0x2
c0011d75:	76 54                	jbe    c0011dcb <SysSize(regs*)+0x64>
c0011d77:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d7c:	76 19                	jbe    c0011d97 <SysSize(regs*)+0x30>
c0011d7e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d81:	31 d2                	xor    edx,edx
c0011d83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d90:	83 c4 18             	add    esp,0x18
c0011d93:	31 c0                	xor    eax,eax
c0011d95:	5b                   	pop    ebx
c0011d96:	c3                   	ret    
c0011d97:	83 ec 0c             	sub    esp,0xc
c0011d9a:	50                   	push   eax
c0011d9b:	e8 fb 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011da0:	83 c4 0c             	add    esp,0xc
c0011da3:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011da7:	52                   	push   edx
c0011da8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011dab:	52                   	push   edx
c0011dac:	50                   	push   eax
c0011dad:	e8 34 9e ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c0011db2:	83 c4 10             	add    esp,0x10
c0011db5:	85 c0                	test   eax,eax
c0011db7:	0f 95 c0             	setne  al
c0011dba:	31 d2                	xor    edx,edx
c0011dbc:	0f b6 c0             	movzx  eax,al
c0011dbf:	f7 d8                	neg    eax
c0011dc1:	83 d2 00             	adc    edx,0x0
c0011dc4:	83 c4 18             	add    esp,0x18
c0011dc7:	5b                   	pop    ebx
c0011dc8:	f7 da                	neg    edx
c0011dca:	c3                   	ret    
c0011dcb:	83 c4 18             	add    esp,0x18
c0011dce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dd3:	5b                   	pop    ebx
c0011dd4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dd9:	c3                   	ret    

c0011dda <SysSizeFromFilename(regs*)>:
c0011dda:	57                   	push   edi
c0011ddb:	56                   	push   esi
c0011ddc:	53                   	push   ebx
c0011ddd:	83 ec 10             	sub    esp,0x10
c0011de0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011de4:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011de7:	83 fb 02             	cmp    ebx,0x2
c0011dea:	0f 86 83 00 00 00    	jbe    c0011e73 <SysSizeFromFilename(regs*)+0x99>
c0011df0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011df6:	76 1b                	jbe    c0011e13 <SysSizeFromFilename(regs*)+0x39>
c0011df8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011dfb:	31 d2                	xor    edx,edx
c0011dfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	31 c0                	xor    eax,eax
c0011e0f:	5b                   	pop    ebx
c0011e10:	5e                   	pop    esi
c0011e11:	5f                   	pop    edi
c0011e12:	c3                   	ret    
c0011e13:	83 ec 0c             	sub    esp,0xc
c0011e16:	68 14 01 00 00       	push   0x114
c0011e1b:	e8 b3 5c ff ff       	call   c0007ad3 <malloc>
c0011e20:	83 c4 0c             	add    esp,0xc
c0011e23:	89 c7                	mov    edi,eax
c0011e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e2d:	50                   	push   eax
c0011e2e:	53                   	push   ebx
c0011e2f:	57                   	push   edi
c0011e30:	e8 e7 99 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0011e35:	83 c4 0c             	add    esp,0xc
c0011e38:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011e3c:	50                   	push   eax
c0011e3d:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011e40:	52                   	push   edx
c0011e41:	57                   	push   edi
c0011e42:	e8 9f 9d ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	85 ff                	test   edi,edi
c0011e4c:	89 c3                	mov    ebx,eax
c0011e4e:	74 0c                	je     c0011e5c <SysSizeFromFilename(regs*)+0x82>
c0011e50:	8b 07                	mov    eax,DWORD PTR [edi]
c0011e52:	83 ec 0c             	sub    esp,0xc
c0011e55:	57                   	push   edi
c0011e56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e59:	83 c4 10             	add    esp,0x10
c0011e5c:	31 c0                	xor    eax,eax
c0011e5e:	85 db                	test   ebx,ebx
c0011e60:	0f 95 c0             	setne  al
c0011e63:	31 d2                	xor    edx,edx
c0011e65:	f7 d8                	neg    eax
c0011e67:	83 d2 00             	adc    edx,0x0
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	5b                   	pop    ebx
c0011e6e:	f7 da                	neg    edx
c0011e70:	5e                   	pop    esi
c0011e71:	5f                   	pop    edi
c0011e72:	c3                   	ret    
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e7b:	5b                   	pop    ebx
c0011e7c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e81:	5e                   	pop    esi
c0011e82:	5f                   	pop    edi
c0011e83:	c3                   	ret    

c0011e84 <SysClose(regs*)>:
c0011e84:	53                   	push   ebx
c0011e85:	83 ec 08             	sub    esp,0x8
c0011e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e8f:	83 f8 02             	cmp    eax,0x2
c0011e92:	76 41                	jbe    c0011ed5 <SysClose(regs*)+0x51>
c0011e94:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011e9a:	83 fa 01             	cmp    edx,0x1
c0011e9d:	76 2d                	jbe    c0011ecc <SysClose(regs*)+0x48>
c0011e9f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ea4:	77 2f                	ja     c0011ed5 <SysClose(regs*)+0x51>
c0011ea6:	83 ec 0c             	sub    esp,0xc
c0011ea9:	50                   	push   eax
c0011eaa:	e8 ec 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011eaf:	89 04 24             	mov    DWORD PTR [esp],eax
c0011eb2:	89 c3                	mov    ebx,eax
c0011eb4:	e8 89 9a ff ff       	call   c000b942 <File::close()>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	85 db                	test   ebx,ebx
c0011ebe:	74 0c                	je     c0011ecc <SysClose(regs*)+0x48>
c0011ec0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ec2:	83 ec 0c             	sub    esp,0xc
c0011ec5:	53                   	push   ebx
c0011ec6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ec9:	83 c4 10             	add    esp,0x10
c0011ecc:	83 c4 08             	add    esp,0x8
c0011ecf:	31 c0                	xor    eax,eax
c0011ed1:	5b                   	pop    ebx
c0011ed2:	31 d2                	xor    edx,edx
c0011ed4:	c3                   	ret    
c0011ed5:	83 c4 08             	add    esp,0x8
c0011ed8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011edd:	5b                   	pop    ebx
c0011ede:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee3:	c3                   	ret    

c0011ee4 <SysOpenDir(regs*)>:
c0011ee4:	56                   	push   esi
c0011ee5:	53                   	push   ebx
c0011ee6:	83 ec 04             	sub    esp,0x4
c0011ee9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011eed:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ef0:	85 c9                	test   ecx,ecx
c0011ef2:	74 5d                	je     c0011f51 <SysOpenDir(regs*)+0x6d>
c0011ef4:	83 ec 0c             	sub    esp,0xc
c0011ef7:	68 14 01 00 00       	push   0x114
c0011efc:	e8 d2 5b ff ff       	call   c0007ad3 <malloc>
c0011f01:	83 c4 0c             	add    esp,0xc
c0011f04:	89 c6                	mov    esi,eax
c0011f06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f0e:	50                   	push   eax
c0011f0f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f12:	52                   	push   edx
c0011f13:	56                   	push   esi
c0011f14:	e8 8d 9e ff ff       	call   c000bda6 <Directory::Directory(char const*, Process*)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	85 f6                	test   esi,esi
c0011f1e:	74 31                	je     c0011f51 <SysOpenDir(regs*)+0x6d>
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	56                   	push   esi
c0011f24:	e8 45 9f ff ff       	call   c000be6e <Directory::open()>
c0011f29:	83 c4 10             	add    esp,0x10
c0011f2c:	85 c0                	test   eax,eax
c0011f2e:	75 21                	jne    c0011f51 <SysOpenDir(regs*)+0x6d>
c0011f30:	83 ec 0c             	sub    esp,0xc
c0011f33:	56                   	push   esi
c0011f34:	e8 65 72 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011f39:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f3c:	83 c4 10             	add    esp,0x10
c0011f3f:	89 02                	mov    DWORD PTR [edx],eax
c0011f41:	c1 f8 1f             	sar    eax,0x1f
c0011f44:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f47:	83 c4 04             	add    esp,0x4
c0011f4a:	31 c0                	xor    eax,eax
c0011f4c:	5b                   	pop    ebx
c0011f4d:	31 d2                	xor    edx,edx
c0011f4f:	5e                   	pop    esi
c0011f50:	c3                   	ret    
c0011f51:	83 c4 04             	add    esp,0x4
c0011f54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f59:	5b                   	pop    ebx
c0011f5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f5f:	5e                   	pop    esi
c0011f60:	c3                   	ret    

c0011f61 <SysMakeDir(regs*)>:
c0011f61:	56                   	push   esi
c0011f62:	53                   	push   ebx
c0011f63:	83 ec 10             	sub    esp,0x10
c0011f66:	68 14 01 00 00       	push   0x114
c0011f6b:	e8 63 5b ff ff       	call   c0007ad3 <malloc>
c0011f70:	83 c4 0c             	add    esp,0xc
c0011f73:	89 c3                	mov    ebx,eax
c0011f75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f7d:	50                   	push   eax
c0011f7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f82:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011f85:	52                   	push   edx
c0011f86:	53                   	push   ebx
c0011f87:	e8 1a 9e ff ff       	call   c000bda6 <Directory::Directory(char const*, Process*)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	85 db                	test   ebx,ebx
c0011f91:	74 2c                	je     c0011fbf <SysMakeDir(regs*)+0x5e>
c0011f93:	83 ec 0c             	sub    esp,0xc
c0011f96:	53                   	push   ebx
c0011f97:	e8 b2 a0 ff ff       	call   c000c04e <Directory::create()>
c0011f9c:	89 c6                	mov    esi,eax
c0011f9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fa3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	31 c0                	xor    eax,eax
c0011fab:	85 f6                	test   esi,esi
c0011fad:	0f 95 c0             	setne  al
c0011fb0:	31 d2                	xor    edx,edx
c0011fb2:	f7 d8                	neg    eax
c0011fb4:	83 d2 00             	adc    edx,0x0
c0011fb7:	83 c4 04             	add    esp,0x4
c0011fba:	5b                   	pop    ebx
c0011fbb:	f7 da                	neg    edx
c0011fbd:	5e                   	pop    esi
c0011fbe:	c3                   	ret    
c0011fbf:	83 c4 04             	add    esp,0x4
c0011fc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fc7:	5b                   	pop    ebx
c0011fc8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fcd:	5e                   	pop    esi
c0011fce:	c3                   	ret    

c0011fcf <SysCloseDir(regs*)>:
c0011fcf:	53                   	push   ebx
c0011fd0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fd5:	83 ec 08             	sub    esp,0x8
c0011fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fdc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011fdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fe4:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011fe7:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011fed:	77 2a                	ja     c0012019 <SysCloseDir(regs*)+0x4a>
c0011fef:	83 ec 0c             	sub    esp,0xc
c0011ff2:	51                   	push   ecx
c0011ff3:	e8 a3 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ff8:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ffb:	89 c3                	mov    ebx,eax
c0011ffd:	e8 c8 9e ff ff       	call   c000beca <Directory::close()>
c0012002:	83 c4 10             	add    esp,0x10
c0012005:	85 db                	test   ebx,ebx
c0012007:	74 0c                	je     c0012015 <SysCloseDir(regs*)+0x46>
c0012009:	8b 03                	mov    eax,DWORD PTR [ebx]
c001200b:	83 ec 0c             	sub    esp,0xc
c001200e:	53                   	push   ebx
c001200f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012012:	83 c4 10             	add    esp,0x10
c0012015:	31 c0                	xor    eax,eax
c0012017:	31 d2                	xor    edx,edx
c0012019:	83 c4 08             	add    esp,0x8
c001201c:	5b                   	pop    ebx
c001201d:	c3                   	ret    

c001201e <SysWait(regs*)>:
c001201e:	83 ec 10             	sub    esp,0x10
c0012021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012025:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012028:	52                   	push   edx
c0012029:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001202c:	51                   	push   ecx
c001202d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012030:	50                   	push   eax
c0012031:	e8 e2 3d 00 00       	call   c0015e18 <waitTask(int, int*, int)>
c0012036:	83 c4 1c             	add    esp,0x1c
c0012039:	89 c2                	mov    edx,eax
c001203b:	c1 fa 1f             	sar    edx,0x1f
c001203e:	c3                   	ret    

c001203f <SysNotImpl(regs*)>:
c001203f:	83 ec 18             	sub    esp,0x18
c0012042:	68 a6 1f 02 c0       	push   0xc0021fa6
c0012047:	e8 95 f2 ff ff       	call   c00112e1 <KePanic(char const*)>
c001204c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012051:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012056:	83 c4 1c             	add    esp,0x1c
c0012059:	c3                   	ret    

c001205a <SysPanic(regs*)>:
c001205a:	83 ec 18             	sub    esp,0x18
c001205d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012061:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012064:	50                   	push   eax
c0012065:	e8 77 f2 ff ff       	call   c00112e1 <KePanic(char const*)>
c001206a:	b8 01 00 00 00       	mov    eax,0x1
c001206f:	31 d2                	xor    edx,edx
c0012071:	83 c4 1c             	add    esp,0x1c
c0012074:	c3                   	ret    

c0012075 <SysRmdir(regs*)>:
c0012075:	56                   	push   esi
c0012076:	53                   	push   ebx
c0012077:	83 ec 10             	sub    esp,0x10
c001207a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001207e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012081:	68 14 01 00 00       	push   0x114
c0012086:	e8 48 5a ff ff       	call   c0007ad3 <malloc>
c001208b:	83 c4 0c             	add    esp,0xc
c001208e:	89 c3                	mov    ebx,eax
c0012090:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012095:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012098:	50                   	push   eax
c0012099:	56                   	push   esi
c001209a:	53                   	push   ebx
c001209b:	e8 7c 97 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c00120a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120a3:	e8 0a 9a ff ff       	call   c000bab2 <File::unlink()>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	85 db                	test   ebx,ebx
c00120ad:	89 c6                	mov    esi,eax
c00120af:	74 0c                	je     c00120bd <SysRmdir(regs*)+0x48>
c00120b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	53                   	push   ebx
c00120b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120ba:	83 c4 10             	add    esp,0x10
c00120bd:	31 c0                	xor    eax,eax
c00120bf:	85 f6                	test   esi,esi
c00120c1:	0f 95 c0             	setne  al
c00120c4:	31 d2                	xor    edx,edx
c00120c6:	f7 d8                	neg    eax
c00120c8:	83 d2 00             	adc    edx,0x0
c00120cb:	83 c4 04             	add    esp,0x4
c00120ce:	5b                   	pop    ebx
c00120cf:	f7 da                	neg    edx
c00120d1:	5e                   	pop    esi
c00120d2:	c3                   	ret    

c00120d3 <SysUnlink(regs*)>:
c00120d3:	56                   	push   esi
c00120d4:	53                   	push   ebx
c00120d5:	83 ec 10             	sub    esp,0x10
c00120d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00120dc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00120df:	68 14 01 00 00       	push   0x114
c00120e4:	e8 ea 59 ff ff       	call   c0007ad3 <malloc>
c00120e9:	83 c4 0c             	add    esp,0xc
c00120ec:	89 c3                	mov    ebx,eax
c00120ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120f6:	50                   	push   eax
c00120f7:	56                   	push   esi
c00120f8:	53                   	push   ebx
c00120f9:	e8 1e 97 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c00120fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012101:	e8 ac 99 ff ff       	call   c000bab2 <File::unlink()>
c0012106:	83 c4 10             	add    esp,0x10
c0012109:	85 db                	test   ebx,ebx
c001210b:	89 c6                	mov    esi,eax
c001210d:	74 0c                	je     c001211b <SysUnlink(regs*)+0x48>
c001210f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012111:	83 ec 0c             	sub    esp,0xc
c0012114:	53                   	push   ebx
c0012115:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	31 c0                	xor    eax,eax
c001211d:	85 f6                	test   esi,esi
c001211f:	0f 95 c0             	setne  al
c0012122:	31 d2                	xor    edx,edx
c0012124:	f7 d8                	neg    eax
c0012126:	83 d2 00             	adc    edx,0x0
c0012129:	83 c4 04             	add    esp,0x4
c001212c:	5b                   	pop    ebx
c001212d:	f7 da                	neg    edx
c001212f:	5e                   	pop    esi
c0012130:	c3                   	ret    

c0012131 <SysGetArgv(regs*)>:
c0012131:	83 ec 0c             	sub    esp,0xc
c0012134:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012138:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001213b:	85 c0                	test   eax,eax
c001213d:	78 2c                	js     c001216b <SysGetArgv(regs*)+0x3a>
c001213f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012145:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012148:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001214e:	7d 1b                	jge    c001216b <SysGetArgv(regs*)+0x3a>
c0012150:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012157:	85 c0                	test   eax,eax
c0012159:	74 18                	je     c0012173 <SysGetArgv(regs*)+0x42>
c001215b:	83 ec 08             	sub    esp,0x8
c001215e:	50                   	push   eax
c001215f:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012162:	50                   	push   eax
c0012163:	e8 e8 e4 fe ff       	call   c0000650 <strcpy>
c0012168:	83 c4 10             	add    esp,0x10
c001216b:	31 c0                	xor    eax,eax
c001216d:	31 d2                	xor    edx,edx
c001216f:	83 c4 0c             	add    esp,0xc
c0012172:	c3                   	ret    
c0012173:	b8 01 00 00 00       	mov    eax,0x1
c0012178:	31 d2                	xor    edx,edx
c001217a:	83 c4 0c             	add    esp,0xc
c001217d:	c3                   	ret    

c001217e <SysUSleep(regs*)>:
c001217e:	83 ec 1c             	sub    esp,0x1c
c0012181:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012185:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012188:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001218b:	6a 00                	push   0x0
c001218d:	6a 64                	push   0x64
c001218f:	52                   	push   edx
c0012190:	50                   	push   eax
c0012191:	e8 0a d1 00 00       	call   c001f2a0 <__udivdi3>
c0012196:	83 c4 14             	add    esp,0x14
c0012199:	50                   	push   eax
c001219a:	e8 5d 3d 00 00       	call   c0015efc <milliTenthSleep(unsigned int)>
c001219f:	31 c0                	xor    eax,eax
c00121a1:	31 d2                	xor    edx,edx
c00121a3:	83 c4 1c             	add    esp,0x1c
c00121a6:	c3                   	ret    

c00121a7 <SysSpawn(regs*)>:
c00121a7:	56                   	push   esi
c00121a8:	53                   	push   ebx
c00121a9:	83 ec 04             	sub    esp,0x4
c00121ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121b0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121b3:	85 f6                	test   esi,esi
c00121b5:	75 0a                	jne    c00121c1 <SysSpawn(regs*)+0x1a>
c00121b7:	83 c4 04             	add    esp,0x4
c00121ba:	31 c0                	xor    eax,eax
c00121bc:	5b                   	pop    ebx
c00121bd:	31 d2                	xor    edx,edx
c00121bf:	5e                   	pop    esi
c00121c0:	c3                   	ret    
c00121c1:	83 ec 0c             	sub    esp,0xc
c00121c4:	68 24 07 00 00       	push   0x724
c00121c9:	e8 05 59 ff ff       	call   c0007ad3 <malloc>
c00121ce:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121d7:	89 c6                	mov    esi,eax
c00121d9:	31 c0                	xor    eax,eax
c00121db:	85 c9                	test   ecx,ecx
c00121dd:	75 08                	jne    c00121e7 <SysSpawn(regs*)+0x40>
c00121df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121e7:	52                   	push   edx
c00121e8:	50                   	push   eax
c00121e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121ec:	50                   	push   eax
c00121ed:	56                   	push   esi
c00121ee:	e8 71 33 00 00       	call   c0015564 <Process::Process(char const*, Process*, char**)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00121fd:	75 b8                	jne    c00121b7 <SysSpawn(regs*)+0x10>
c00121ff:	83 ec 0c             	sub    esp,0xc
c0012202:	56                   	push   esi
c0012203:	e8 94 38 00 00       	call   c0015a9c <Process::createUserThread()>
c0012208:	8b 06                	mov    eax,DWORD PTR [esi]
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	83 c4 04             	add    esp,0x4
c0012210:	5b                   	pop    ebx
c0012211:	89 c2                	mov    edx,eax
c0012213:	c1 fa 1f             	sar    edx,0x1f
c0012216:	5e                   	pop    esi
c0012217:	c3                   	ret    

c0012218 <SysGetEnv(regs*)>:
c0012218:	57                   	push   edi
c0012219:	56                   	push   esi
c001221a:	53                   	push   ebx
c001221b:	83 ec 1c             	sub    esp,0x1c
c001221e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012223:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012227:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001222a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001222d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012230:	51                   	push   ecx
c0012231:	e8 63 ef ff ff       	call   c0011199 <KeGetProcessTotalEnvCount(Process*)>
c0012236:	83 c4 10             	add    esp,0x10
c0012239:	39 c7                	cmp    edi,eax
c001223b:	7c 12                	jl     c001224f <SysGetEnv(regs*)+0x37>
c001223d:	31 c0                	xor    eax,eax
c001223f:	31 d2                	xor    edx,edx
c0012241:	85 f6                	test   esi,esi
c0012243:	74 03                	je     c0012248 <SysGetEnv(regs*)+0x30>
c0012245:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	5b                   	pop    ebx
c001224c:	5e                   	pop    esi
c001224d:	5f                   	pop    edi
c001224e:	c3                   	ret    
c001224f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012253:	83 ec 04             	sub    esp,0x4
c0012256:	57                   	push   edi
c0012257:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001225d:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012260:	57                   	push   edi
c0012261:	50                   	push   eax
c0012262:	e8 52 ef ff ff       	call   c00111b9 <KeGetProcessEnvPair(Process*, int)>
c0012267:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001226a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001226e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012272:	83 c4 0c             	add    esp,0xc
c0012275:	85 d2                	test   edx,edx
c0012277:	75 23                	jne    c001229c <SysGetEnv(regs*)+0x84>
c0012279:	83 ec 0c             	sub    esp,0xc
c001227c:	50                   	push   eax
c001227d:	e8 fe e2 fe ff       	call   c0000580 <strlen>
c0012282:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012285:	89 c3                	mov    ebx,eax
c0012287:	e8 f4 e2 fe ff       	call   c0000580 <strlen>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	31 d2                	xor    edx,edx
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012298:	5b                   	pop    ebx
c0012299:	5e                   	pop    esi
c001229a:	5f                   	pop    edi
c001229b:	c3                   	ret    
c001229c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001229f:	83 ec 08             	sub    esp,0x8
c00122a2:	50                   	push   eax
c00122a3:	56                   	push   esi
c00122a4:	e8 a7 e3 fe ff       	call   c0000650 <strcpy>
c00122a9:	58                   	pop    eax
c00122aa:	5a                   	pop    edx
c00122ab:	68 c0 1f 02 c0       	push   0xc0021fc0
c00122b0:	56                   	push   esi
c00122b1:	e8 ba e5 fe ff       	call   c0000870 <strcat>
c00122b6:	59                   	pop    ecx
c00122b7:	5b                   	pop    ebx
c00122b8:	57                   	push   edi
c00122b9:	56                   	push   esi
c00122ba:	e8 b1 e5 fe ff       	call   c0000870 <strcat>
c00122bf:	83 c4 10             	add    esp,0x10
c00122c2:	31 c0                	xor    eax,eax
c00122c4:	83 c4 10             	add    esp,0x10
c00122c7:	31 d2                	xor    edx,edx
c00122c9:	5b                   	pop    ebx
c00122ca:	5e                   	pop    esi
c00122cb:	5f                   	pop    edi
c00122cc:	c3                   	ret    

c00122cd <SysSetFatAttrib(regs*)>:
c00122cd:	57                   	push   edi
c00122ce:	56                   	push   esi
c00122cf:	53                   	push   ebx
c00122d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122d4:	83 ec 0c             	sub    esp,0xc
c00122d7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00122da:	68 14 01 00 00       	push   0x114
c00122df:	e8 ef 57 ff ff       	call   c0007ad3 <malloc>
c00122e4:	83 c4 0c             	add    esp,0xc
c00122e7:	89 c3                	mov    ebx,eax
c00122e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122f1:	50                   	push   eax
c00122f2:	57                   	push   edi
c00122f3:	53                   	push   ebx
c00122f4:	e8 23 95 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c00122f9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00122fc:	83 c4 0c             	add    esp,0xc
c00122ff:	0f b6 d4             	movzx  edx,ah
c0012302:	0f b6 c0             	movzx  eax,al
c0012305:	52                   	push   edx
c0012306:	50                   	push   eax
c0012307:	53                   	push   ebx
c0012308:	e8 3f 98 ff ff       	call   c000bb4c <File::chfatattr(unsigned char, unsigned char)>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	85 db                	test   ebx,ebx
c0012312:	89 c6                	mov    esi,eax
c0012314:	74 0c                	je     c0012322 <SysSetFatAttrib(regs*)+0x55>
c0012316:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012318:	83 ec 0c             	sub    esp,0xc
c001231b:	53                   	push   ebx
c001231c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	5b                   	pop    ebx
c0012323:	31 c0                	xor    eax,eax
c0012325:	85 f6                	test   esi,esi
c0012327:	0f 95 c0             	setne  al
c001232a:	31 d2                	xor    edx,edx
c001232c:	5e                   	pop    esi
c001232d:	f7 d8                	neg    eax
c001232f:	83 d2 00             	adc    edx,0x0
c0012332:	f7 da                	neg    edx
c0012334:	5f                   	pop    edi
c0012335:	c3                   	ret    

c0012336 <SysPipe(regs*)>:
c0012336:	57                   	push   edi
c0012337:	56                   	push   esi
c0012338:	53                   	push   ebx
c0012339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001233d:	83 ec 0c             	sub    esp,0xc
c0012340:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012343:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012346:	6a 20                	push   0x20
c0012348:	e8 86 57 ff ff       	call   c0007ad3 <malloc>
c001234d:	89 c3                	mov    ebx,eax
c001234f:	58                   	pop    eax
c0012350:	5a                   	pop    edx
c0012351:	68 00 50 00 00       	push   0x5000
c0012356:	53                   	push   ebx
c0012357:	e8 e2 60 ff ff       	call   c000843e <Pipe::Pipe(int)>
c001235c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001235f:	e8 3a 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012364:	89 07                	mov    DWORD PTR [edi],eax
c0012366:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012369:	e8 30 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	31 d2                	xor    edx,edx
c0012373:	89 06                	mov    DWORD PTR [esi],eax
c0012375:	31 c0                	xor    eax,eax
c0012377:	5b                   	pop    ebx
c0012378:	5e                   	pop    esi
c0012379:	5f                   	pop    edi
c001237a:	c3                   	ret    

c001237b <SysGetUnixTime(regs*)>:
c001237b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012380:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012386:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001238a:	e9 03 9f ff ff       	jmp    c000c292 <Clock::timeInSecondsLocal()>

c001238f <string_ends_with(char const*, char const*)>:
c001238f:	57                   	push   edi
c0012390:	56                   	push   esi
c0012391:	53                   	push   ebx
c0012392:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001239d:	53                   	push   ebx
c001239e:	e8 dd e1 fe ff       	call   c0000580 <strlen>
c00123a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123a6:	89 c6                	mov    esi,eax
c00123a8:	e8 d3 e1 fe ff       	call   c0000580 <strlen>
c00123ad:	83 c4 10             	add    esp,0x10
c00123b0:	31 d2                	xor    edx,edx
c00123b2:	39 c6                	cmp    esi,eax
c00123b4:	7d 06                	jge    c00123bc <string_ends_with(char const*, char const*)+0x2d>
c00123b6:	5b                   	pop    ebx
c00123b7:	89 d0                	mov    eax,edx
c00123b9:	5e                   	pop    esi
c00123ba:	5f                   	pop    edi
c00123bb:	c3                   	ret    
c00123bc:	83 ec 08             	sub    esp,0x8
c00123bf:	29 c6                	sub    esi,eax
c00123c1:	57                   	push   edi
c00123c2:	01 f3                	add    ebx,esi
c00123c4:	53                   	push   ebx
c00123c5:	e8 b6 e3 fe ff       	call   c0000780 <strcmp>
c00123ca:	83 c4 10             	add    esp,0x10
c00123cd:	31 d2                	xor    edx,edx
c00123cf:	5b                   	pop    ebx
c00123d0:	5e                   	pop    esi
c00123d1:	85 c0                	test   eax,eax
c00123d3:	5f                   	pop    edi
c00123d4:	0f 94 c2             	sete   dl
c00123d7:	89 d0                	mov    eax,edx
c00123d9:	c3                   	ret    

c00123da <SysOpen(regs*)>:
c00123da:	56                   	push   esi
c00123db:	53                   	push   ebx
c00123dc:	81 ec 04 01 00 00    	sub    esp,0x104
c00123e2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00123e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123ec:	85 c0                	test   eax,eax
c00123ee:	0f 84 c4 01 00 00    	je     c00125b8 <SysOpen(regs*)+0x1de>
c00123f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123f7:	85 c0                	test   eax,eax
c00123f9:	0f 84 b9 01 00 00    	je     c00125b8 <SysOpen(regs*)+0x1de>
c00123ff:	6a 00                	push   0x0
c0012401:	68 c2 1f 02 c0       	push   0xc0021fc2
c0012406:	50                   	push   eax
c0012407:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001240b:	56                   	push   esi
c001240c:	e8 9b 91 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012411:	89 34 24             	mov    DWORD PTR [esp],esi
c0012414:	e8 67 e1 fe ff       	call   c0000580 <strlen>
c0012419:	83 c4 10             	add    esp,0x10
c001241c:	83 e8 01             	sub    eax,0x1
c001241f:	74 29                	je     c001244a <SysOpen(regs*)+0x70>
c0012421:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012425:	83 fa 2e             	cmp    edx,0x2e
c0012428:	74 1c                	je     c0012446 <SysOpen(regs*)+0x6c>
c001242a:	83 fa 3a             	cmp    edx,0x3a
c001242d:	74 17                	je     c0012446 <SysOpen(regs*)+0x6c>
c001242f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012433:	83 e8 01             	sub    eax,0x1
c0012436:	74 12                	je     c001244a <SysOpen(regs*)+0x70>
c0012438:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001243c:	83 fa 3a             	cmp    edx,0x3a
c001243f:	74 05                	je     c0012446 <SysOpen(regs*)+0x6c>
c0012441:	83 fa 2e             	cmp    edx,0x2e
c0012444:	75 e9                	jne    c001242f <SysOpen(regs*)+0x55>
c0012446:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001244a:	83 ec 08             	sub    esp,0x8
c001244d:	68 c6 1f 02 c0       	push   0xc0021fc6
c0012452:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012455:	50                   	push   eax
c0012456:	e8 34 ff ff ff       	call   c001238f <string_ends_with(char const*, char const*)>
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	85 c0                	test   eax,eax
c0012460:	74 1d                	je     c001247f <SysOpen(regs*)+0xa5>
c0012462:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012465:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001246b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012472:	81 c4 04 01 00 00    	add    esp,0x104
c0012478:	31 c0                	xor    eax,eax
c001247a:	5b                   	pop    ebx
c001247b:	31 d2                	xor    edx,edx
c001247d:	5e                   	pop    esi
c001247e:	c3                   	ret    
c001247f:	83 ec 08             	sub    esp,0x8
c0012482:	68 cb 1f 02 c0       	push   0xc0021fcb
c0012487:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001248a:	50                   	push   eax
c001248b:	e8 ff fe ff ff       	call   c001238f <string_ends_with(char const*, char const*)>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	85 c0                	test   eax,eax
c0012495:	75 cb                	jne    c0012462 <SysOpen(regs*)+0x88>
c0012497:	83 ec 08             	sub    esp,0x8
c001249a:	68 c7 1f 02 c0       	push   0xc0021fc7
c001249f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124a2:	50                   	push   eax
c00124a3:	e8 d8 e2 fe ff       	call   c0000780 <strcmp>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	85 c0                	test   eax,eax
c00124ad:	74 b3                	je     c0012462 <SysOpen(regs*)+0x88>
c00124af:	83 ec 08             	sub    esp,0x8
c00124b2:	68 c6 1f 02 c0       	push   0xc0021fc6
c00124b7:	56                   	push   esi
c00124b8:	e8 d2 fe ff ff       	call   c001238f <string_ends_with(char const*, char const*)>
c00124bd:	83 c4 10             	add    esp,0x10
c00124c0:	85 c0                	test   eax,eax
c00124c2:	75 9e                	jne    c0012462 <SysOpen(regs*)+0x88>
c00124c4:	83 ec 08             	sub    esp,0x8
c00124c7:	68 d0 1f 02 c0       	push   0xc0021fd0
c00124cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124cf:	50                   	push   eax
c00124d0:	e8 ba fe ff ff       	call   c001238f <string_ends_with(char const*, char const*)>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	85 c0                	test   eax,eax
c00124da:	0f 85 eb 00 00 00    	jne    c00125cb <SysOpen(regs*)+0x1f1>
c00124e0:	83 ec 08             	sub    esp,0x8
c00124e3:	68 d5 1f 02 c0       	push   0xc0021fd5
c00124e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124eb:	50                   	push   eax
c00124ec:	e8 9e fe ff ff       	call   c001238f <string_ends_with(char const*, char const*)>
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	85 c0                	test   eax,eax
c00124f6:	0f 85 cf 00 00 00    	jne    c00125cb <SysOpen(regs*)+0x1f1>
c00124fc:	83 ec 08             	sub    esp,0x8
c00124ff:	68 d1 1f 02 c0       	push   0xc0021fd1
c0012504:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012507:	51                   	push   ecx
c0012508:	e8 73 e2 fe ff       	call   c0000780 <strcmp>
c001250d:	83 c4 10             	add    esp,0x10
c0012510:	85 c0                	test   eax,eax
c0012512:	0f 84 b3 00 00 00    	je     c00125cb <SysOpen(regs*)+0x1f1>
c0012518:	83 ec 08             	sub    esp,0x8
c001251b:	68 d0 1f 02 c0       	push   0xc0021fd0
c0012520:	56                   	push   esi
c0012521:	e8 69 fe ff ff       	call   c001238f <string_ends_with(char const*, char const*)>
c0012526:	83 c4 10             	add    esp,0x10
c0012529:	85 c0                	test   eax,eax
c001252b:	0f 85 9a 00 00 00    	jne    c00125cb <SysOpen(regs*)+0x1f1>
c0012531:	83 ec 0c             	sub    esp,0xc
c0012534:	68 14 01 00 00       	push   0x114
c0012539:	e8 95 55 ff ff       	call   c0007ad3 <malloc>
c001253e:	83 c4 0c             	add    esp,0xc
c0012541:	89 c6                	mov    esi,eax
c0012543:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012548:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001254b:	50                   	push   eax
c001254c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001254f:	52                   	push   edx
c0012550:	56                   	push   esi
c0012551:	e8 c6 92 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	85 f6                	test   esi,esi
c001255b:	74 5b                	je     c00125b8 <SysOpen(regs*)+0x1de>
c001255d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012560:	0f b6 c2             	movzx  eax,dl
c0012563:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012566:	89 d0                	mov    eax,edx
c0012568:	83 e0 01             	and    eax,0x1
c001256b:	f6 c2 02             	test   dl,0x2
c001256e:	74 03                	je     c0012573 <SysOpen(regs*)+0x199>
c0012570:	83 c8 02             	or     eax,0x2
c0012573:	f6 c2 04             	test   dl,0x4
c0012576:	74 03                	je     c001257b <SysOpen(regs*)+0x1a1>
c0012578:	83 c8 04             	or     eax,0x4
c001257b:	f6 c2 08             	test   dl,0x8
c001257e:	74 03                	je     c0012583 <SysOpen(regs*)+0x1a9>
c0012580:	83 c8 0a             	or     eax,0xa
c0012583:	80 e2 10             	and    dl,0x10
c0012586:	74 03                	je     c001258b <SysOpen(regs*)+0x1b1>
c0012588:	83 c8 12             	or     eax,0x12
c001258b:	83 ec 08             	sub    esp,0x8
c001258e:	50                   	push   eax
c001258f:	56                   	push   esi
c0012590:	e8 4f 93 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c0012595:	83 c4 10             	add    esp,0x10
c0012598:	85 c0                	test   eax,eax
c001259a:	75 1c                	jne    c00125b8 <SysOpen(regs*)+0x1de>
c001259c:	83 ec 0c             	sub    esp,0xc
c001259f:	56                   	push   esi
c00125a0:	e8 f9 6b ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00125a5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	89 02                	mov    DWORD PTR [edx],eax
c00125ad:	c1 f8 1f             	sar    eax,0x1f
c00125b0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125b3:	e9 ba fe ff ff       	jmp    c0012472 <SysOpen(regs*)+0x98>
c00125b8:	81 c4 04 01 00 00    	add    esp,0x104
c00125be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125c3:	5b                   	pop    ebx
c00125c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125c9:	5e                   	pop    esi
c00125ca:	c3                   	ret    
c00125cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125ce:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00125d4:	e9 92 fe ff ff       	jmp    c001246b <SysOpen(regs*)+0x91>

c00125d9 <KeSystemCall(regs*, void*)>:
c00125d9:	53                   	push   ebx
c00125da:	83 ec 08             	sub    esp,0x8
c00125dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00125e4:	83 f8 3b             	cmp    eax,0x3b
c00125e7:	77 16                	ja     c00125ff <KeSystemCall(regs*, void*)+0x26>
c00125e9:	8b 14 85 e0 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc20]
c00125f0:	85 d2                	test   edx,edx
c00125f2:	74 0b                	je     c00125ff <KeSystemCall(regs*, void*)+0x26>
c00125f4:	83 ec 0c             	sub    esp,0xc
c00125f7:	53                   	push   ebx
c00125f8:	ff d2                	call   edx
c00125fa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00125fd:	eb 0d                	jmp    c001260c <KeSystemCall(regs*, void*)+0x33>
c00125ff:	52                   	push   edx
c0012600:	52                   	push   edx
c0012601:	50                   	push   eax
c0012602:	68 da 1f 02 c0       	push   0xc0021fda
c0012607:	e8 fe 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012614:	83 c4 08             	add    esp,0x8
c0012617:	31 d2                	xor    edx,edx
c0012619:	5b                   	pop    ebx
c001261a:	c3                   	ret    
c001261b:	90                   	nop

c001261c <KeSwitchEndian16(unsigned short)>:
c001261c:	83 ec 04             	sub    esp,0x4
c001261f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012623:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012627:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001262b:	c1 f8 08             	sar    eax,0x8
c001262e:	89 c2                	mov    edx,eax
c0012630:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012634:	c1 e0 08             	shl    eax,0x8
c0012637:	09 d0                	or     eax,edx
c0012639:	83 c4 04             	add    esp,0x4
c001263c:	c3                   	ret    
c001263d:	8d 76 00             	lea    esi,[esi+0x0]

c0012640 <KeSwitchEndian32(unsigned int)>:
c0012640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012644:	c1 e8 18             	shr    eax,0x18
c0012647:	89 c2                	mov    edx,eax
c0012649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001264d:	c1 e0 08             	shl    eax,0x8
c0012650:	25 00 00 ff 00       	and    eax,0xff0000
c0012655:	09 c2                	or     edx,eax
c0012657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001265b:	c1 e8 08             	shr    eax,0x8
c001265e:	25 00 ff 00 00       	and    eax,0xff00
c0012663:	09 c2                	or     edx,eax
c0012665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012669:	c1 e0 18             	shl    eax,0x18
c001266c:	09 d0                	or     eax,edx
c001266e:	c3                   	ret    
c001266f:	90                   	nop

c0012670 <EthernetCRC32(unsigned char*, int)>:
c0012670:	83 ec 10             	sub    esp,0x10
c0012673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012678:	75 0a                	jne    c0012684 <EthernetCRC32(unsigned char*, int)+0x14>
c001267a:	b8 00 00 00 00       	mov    eax,0x0
c001267f:	e9 8c 00 00 00       	jmp    c0012710 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012684:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012689:	7f 09                	jg     c0012694 <EthernetCRC32(unsigned char*, int)+0x24>
c001268b:	b8 00 00 00 00       	mov    eax,0x0
c0012690:	eb 7e                	jmp    c0012710 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012692:	66 90                	xchg   ax,ax
c0012694:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001269c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00126a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00126ac:	7d 5a                	jge    c0012708 <EthernetCRC32(unsigned char*, int)+0x98>
c00126ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126b6:	01 d0                	add    eax,edx
c00126b8:	8a 00                	mov    al,BYTE PTR [eax]
c00126ba:	0f b6 c0             	movzx  eax,al
c00126bd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00126c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126c9:	8d 76 00             	lea    esi,[esi+0x0]
c00126cc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00126d1:	7f 2d                	jg     c0012700 <EthernetCRC32(unsigned char*, int)+0x90>
c00126d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126d7:	83 e0 01             	and    eax,0x1
c00126da:	74 10                	je     c00126ec <EthernetCRC32(unsigned char*, int)+0x7c>
c00126dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e0:	d1 e8                	shr    eax,1
c00126e2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00126e7:	eb 0b                	jmp    c00126f4 <EthernetCRC32(unsigned char*, int)+0x84>
c00126e9:	8d 76 00             	lea    esi,[esi+0x0]
c00126ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f0:	d1 e8                	shr    eax,1
c00126f2:	66 90                	xchg   ax,ax
c00126f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126f8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00126fd:	eb cd                	jmp    c00126cc <EthernetCRC32(unsigned char*, int)+0x5c>
c00126ff:	90                   	nop
c0012700:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012705:	eb 9d                	jmp    c00126a4 <EthernetCRC32(unsigned char*, int)+0x34>
c0012707:	90                   	nop
c0012708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001270c:	f7 d0                	not    eax
c001270e:	66 90                	xchg   ax,ax
c0012710:	83 c4 10             	add    esp,0x10
c0012713:	c3                   	ret    

c0012714 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012714:	83 ec 2c             	sub    esp,0x2c
c0012717:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001271b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012724:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001272c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001272f:	0f b7 c0             	movzx  eax,ax
c0012732:	3d 06 08 00 00       	cmp    eax,0x806
c0012737:	75 13                	jne    c001274c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012739:	83 ec 0c             	sub    esp,0xc
c001273c:	68 ee 1f 02 c0       	push   0xc0021fee
c0012741:	e8 c4 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	eb 25                	jmp    c0012770 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001274b:	90                   	nop
c001274c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012750:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012753:	0f b7 c0             	movzx  eax,ax
c0012756:	3d 00 08 00 00       	cmp    eax,0x800
c001275b:	75 13                	jne    c0012770 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001275d:	83 ec 0c             	sub    esp,0xc
c0012760:	68 04 20 02 c0       	push   0xc0022004
c0012765:	e8 a0 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	8d 76 00             	lea    esi,[esi+0x0]
c0012770:	90                   	nop
c0012771:	83 c4 2c             	add    esp,0x2c
c0012774:	c3                   	ret    

c0012775 <CmOpen(char const*)>:
c0012775:	57                   	push   edi
c0012776:	56                   	push   esi
c0012777:	53                   	push   ebx
c0012778:	83 ec 1c             	sub    esp,0x1c
c001277b:	6a 30                	push   0x30
c001277d:	e8 51 53 ff ff       	call   c0007ad3 <malloc>
c0012782:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012789:	89 c3                	mov    ebx,eax
c001278b:	e8 43 53 ff ff       	call   c0007ad3 <malloc>
c0012790:	83 c4 0c             	add    esp,0xc
c0012793:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001279d:	89 c6                	mov    esi,eax
c001279f:	50                   	push   eax
c00127a0:	e8 77 90 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c00127a5:	83 c4 0c             	add    esp,0xc
c00127a8:	89 33                	mov    DWORD PTR [ebx],esi
c00127aa:	8d 44 24 07          	lea    eax,[esp+0x7]
c00127ae:	50                   	push   eax
c00127af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00127b3:	50                   	push   eax
c00127b4:	56                   	push   esi
c00127b5:	e8 2c 94 ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c00127ba:	5a                   	pop    edx
c00127bb:	59                   	pop    ecx
c00127bc:	6a 01                	push   0x1
c00127be:	ff 33                	push   DWORD PTR [ebx]
c00127c0:	e8 1f 91 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c00127c5:	5e                   	pop    esi
c00127c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127ca:	e8 04 53 ff ff       	call   c0007ad3 <malloc>
c00127cf:	5a                   	pop    edx
c00127d0:	8d 74 24 10          	lea    esi,[esp+0x10]
c00127d4:	89 c7                	mov    edi,eax
c00127d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00127da:	56                   	push   esi
c00127db:	57                   	push   edi
c00127dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127e4:	50                   	push   eax
c00127e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127e8:	83 c4 14             	add    esp,0x14
c00127eb:	ff 33                	push   DWORD PTR [ebx]
c00127ed:	e8 50 91 ff ff       	call   c000b942 <File::close()>
c00127f2:	59                   	pop    ecx
c00127f3:	58                   	pop    eax
c00127f4:	6a 13                	push   0x13
c00127f6:	ff 33                	push   DWORD PTR [ebx]
c00127f8:	e8 e7 90 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c00127fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0012801:	89 34 24             	mov    DWORD PTR [esp],esi
c0012804:	57                   	push   edi
c0012805:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012809:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001280d:	50                   	push   eax
c001280e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012811:	83 c4 14             	add    esp,0x14
c0012814:	57                   	push   edi
c0012815:	e8 c9 52 ff ff       	call   c0007ae3 <free>
c001281a:	83 c4 10             	add    esp,0x10
c001281d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012820:	75 10                	jne    c0012832 <CmOpen(char const*)+0xbd>
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	68 19 20 02 c0       	push   0xc0022019
c001282a:	e8 b2 ea ff ff       	call   c00112e1 <KePanic(char const*)>
c001282f:	83 c4 10             	add    esp,0x10
c0012832:	50                   	push   eax
c0012833:	6a 00                	push   0x0
c0012835:	6a 00                	push   0x0
c0012837:	ff 33                	push   DWORD PTR [ebx]
c0012839:	8d 7b 05             	lea    edi,[ebx+0x5]
c001283c:	e8 61 91 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0012841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012843:	8b 10                	mov    edx,DWORD PTR [eax]
c0012845:	89 34 24             	mov    DWORD PTR [esp],esi
c0012848:	57                   	push   edi
c0012849:	6a 00                	push   0x0
c001284b:	6a 2b                	push   0x2b
c001284d:	50                   	push   eax
c001284e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012851:	83 c4 1c             	add    esp,0x1c
c0012854:	6a 00                	push   0x0
c0012856:	6a 00                	push   0x0
c0012858:	ff 33                	push   DWORD PTR [ebx]
c001285a:	e8 43 91 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c001285f:	83 c4 0c             	add    esp,0xc
c0012862:	6a 08                	push   0x8
c0012864:	68 2a 20 02 c0       	push   0xc002202a
c0012869:	57                   	push   edi
c001286a:	e8 11 db fe ff       	call   c0000380 <memcmp>
c001286f:	83 c4 10             	add    esp,0x10
c0012872:	85 c0                	test   eax,eax
c0012874:	74 10                	je     c0012886 <CmOpen(char const*)+0x111>
c0012876:	83 ec 0c             	sub    esp,0xc
c0012879:	68 33 20 02 c0       	push   0xc0022033
c001287e:	e8 5e ea ff ff       	call   c00112e1 <KePanic(char const*)>
c0012883:	83 c4 10             	add    esp,0x10
c0012886:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001288a:	83 c4 10             	add    esp,0x10
c001288d:	89 d8                	mov    eax,ebx
c001288f:	5b                   	pop    ebx
c0012890:	5e                   	pop    esi
c0012891:	5f                   	pop    edi
c0012892:	c3                   	ret    

c0012893 <CmClose(Reghive_Tag*)>:
c0012893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012897:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001289b:	74 0b                	je     c00128a8 <CmClose(Reghive_Tag*)+0x15>
c001289d:	8b 00                	mov    eax,DWORD PTR [eax]
c001289f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a3:	e9 9a 90 ff ff       	jmp    c000b942 <File::close()>
c00128a8:	c3                   	ret    

c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00128a9:	53                   	push   ebx
c00128aa:	83 ec 18             	sub    esp,0x18
c00128ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128b1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128b5:	74 29                	je     c00128e0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128b7:	50                   	push   eax
c00128b8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128bd:	99                   	cdq    
c00128be:	52                   	push   edx
c00128bf:	50                   	push   eax
c00128c0:	ff 33                	push   DWORD PTR [ebx]
c00128c2:	e8 db 90 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c00128c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128c9:	5a                   	pop    edx
c00128ca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d0:	51                   	push   ecx
c00128d1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128d5:	6a 00                	push   0x0
c00128d7:	6a 2b                	push   0x2b
c00128d9:	50                   	push   eax
c00128da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00128dd:	83 c4 20             	add    esp,0x20
c00128e0:	83 c4 18             	add    esp,0x18
c00128e3:	5b                   	pop    ebx
c00128e4:	c3                   	ret    

c00128e5 <CmGetString(Reghive_Tag*, int, char*)>:
c00128e5:	55                   	push   ebp
c00128e6:	57                   	push   edi
c00128e7:	56                   	push   esi
c00128e8:	53                   	push   ebx
c00128e9:	31 db                	xor    ebx,ebx
c00128eb:	83 ec 70             	sub    esp,0x70
c00128ee:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00128f2:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00128f9:	50                   	push   eax
c00128fa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012901:	55                   	push   ebp
c0012902:	e8 a2 ff ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001290f:	c1 e0 08             	shl    eax,0x8
c0012912:	89 c2                	mov    edx,eax
c0012914:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012919:	09 d0                	or     eax,edx
c001291b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012920:	c1 e0 08             	shl    eax,0x8
c0012923:	09 d0                	or     eax,edx
c0012925:	74 25                	je     c001294c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012927:	52                   	push   edx
c0012928:	8d 54 24 39          	lea    edx,[esp+0x39]
c001292c:	52                   	push   edx
c001292d:	6b fb 0d             	imul   edi,ebx,0xd
c0012930:	50                   	push   eax
c0012931:	55                   	push   ebp
c0012932:	e8 72 ff ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012937:	8d 74 24 49          	lea    esi,[esp+0x49]
c001293b:	b9 27 00 00 00       	mov    ecx,0x27
c0012940:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012947:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012949:	83 c4 10             	add    esp,0x10
c001294c:	83 c3 03             	add    ebx,0x3
c001294f:	83 fb 15             	cmp    ebx,0x15
c0012952:	75 b6                	jne    c001290a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012954:	83 c4 6c             	add    esp,0x6c
c0012957:	5b                   	pop    ebx
c0012958:	5e                   	pop    esi
c0012959:	5f                   	pop    edi
c001295a:	5d                   	pop    ebp
c001295b:	c3                   	ret    

c001295c <CmEnterDirectory(Reghive_Tag*, int)>:
c001295c:	83 ec 40             	sub    esp,0x40
c001295f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012963:	50                   	push   eax
c0012964:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012968:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001296c:	e8 38 ff ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	83 c8 ff             	or     eax,0xffffffff
c0012977:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c001297c:	75 19                	jne    c0012997 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001297e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012983:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012988:	c1 e0 08             	shl    eax,0x8
c001298b:	09 c2                	or     edx,eax
c001298d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012992:	c1 e0 10             	shl    eax,0x10
c0012995:	09 d0                	or     eax,edx
c0012997:	83 c4 3c             	add    esp,0x3c
c001299a:	c3                   	ret    

c001299b <CmGetNext(Reghive_Tag*, int)>:
c001299b:	83 ec 40             	sub    esp,0x40
c001299e:	8d 44 24 09          	lea    eax,[esp+0x9]
c00129a2:	50                   	push   eax
c00129a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129ab:	e8 f9 fe ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129b0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00129b5:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00129ba:	c1 e0 08             	shl    eax,0x8
c00129bd:	09 c2                	or     edx,eax
c00129bf:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00129c4:	83 c4 4c             	add    esp,0x4c
c00129c7:	c1 e0 10             	shl    eax,0x10
c00129ca:	09 d0                	or     eax,edx
c00129cc:	c3                   	ret    

c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00129cd:	53                   	push   ebx
c00129ce:	83 ec 18             	sub    esp,0x18
c00129d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129d5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129d9:	74 29                	je     c0012a04 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00129db:	50                   	push   eax
c00129dc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00129e1:	99                   	cdq    
c00129e2:	52                   	push   edx
c00129e3:	50                   	push   eax
c00129e4:	ff 33                	push   DWORD PTR [ebx]
c00129e6:	e8 b7 8f ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c00129eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129ed:	5a                   	pop    edx
c00129ee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00129f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f4:	51                   	push   ecx
c00129f5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00129f9:	6a 00                	push   0x0
c00129fb:	6a 2b                	push   0x2b
c00129fd:	50                   	push   eax
c00129fe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a01:	83 c4 20             	add    esp,0x20
c0012a04:	83 c4 18             	add    esp,0x18
c0012a07:	5b                   	pop    ebx
c0012a08:	c3                   	ret    

c0012a09 <CmFreeExtent(Reghive_Tag*, int)>:
c0012a09:	53                   	push   ebx
c0012a0a:	83 ec 3c             	sub    esp,0x3c
c0012a0d:	6a 2b                	push   0x2b
c0012a0f:	6a 00                	push   0x0
c0012a11:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a15:	53                   	push   ebx
c0012a16:	e8 d5 da fe ff       	call   c00004f0 <memset>
c0012a1b:	83 c4 0c             	add    esp,0xc
c0012a1e:	53                   	push   ebx
c0012a1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a27:	e8 a1 ff ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a2c:	83 c4 48             	add    esp,0x48
c0012a2f:	5b                   	pop    ebx
c0012a30:	c3                   	ret    

c0012a31 <CmUpdateHeader(Reghive_Tag*)>:
c0012a31:	83 ec 0c             	sub    esp,0xc
c0012a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a38:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012a3c:	74 10                	je     c0012a4e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012a3e:	52                   	push   edx
c0012a3f:	8d 50 05             	lea    edx,[eax+0x5]
c0012a42:	52                   	push   edx
c0012a43:	6a 00                	push   0x0
c0012a45:	50                   	push   eax
c0012a46:	e8 82 ff ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	83 c4 0c             	add    esp,0xc
c0012a51:	c3                   	ret    

c0012a52 <CmExpand(Reghive_Tag*, int)>:
c0012a52:	55                   	push   ebp
c0012a53:	57                   	push   edi
c0012a54:	83 cf ff             	or     edi,0xffffffff
c0012a57:	56                   	push   esi
c0012a58:	53                   	push   ebx
c0012a59:	83 ec 3c             	sub    esp,0x3c
c0012a5c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a60:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a64:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a68:	74 59                	je     c0012ac3 <CmExpand(Reghive_Tag*, int)+0x71>
c0012a6a:	50                   	push   eax
c0012a6b:	31 d2                	xor    edx,edx
c0012a6d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012a71:	31 ff                	xor    edi,edi
c0012a73:	52                   	push   edx
c0012a74:	50                   	push   eax
c0012a75:	ff 33                	push   DWORD PTR [ebx]
c0012a77:	e8 26 8f ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0012a7c:	83 c4 0c             	add    esp,0xc
c0012a7f:	6a 2b                	push   0x2b
c0012a81:	6a 00                	push   0x0
c0012a83:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012a87:	55                   	push   ebp
c0012a88:	e8 63 da fe ff       	call   c00004f0 <memset>
c0012a8d:	83 c4 10             	add    esp,0x10
c0012a90:	39 f7                	cmp    edi,esi
c0012a92:	7d 1b                	jge    c0012aaf <CmExpand(Reghive_Tag*, int)+0x5d>
c0012a94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a96:	83 ec 0c             	sub    esp,0xc
c0012a99:	47                   	inc    edi
c0012a9a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012a9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aa0:	51                   	push   ecx
c0012aa1:	55                   	push   ebp
c0012aa2:	6a 00                	push   0x0
c0012aa4:	6a 2b                	push   0x2b
c0012aa6:	50                   	push   eax
c0012aa7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012aaa:	83 c4 20             	add    esp,0x20
c0012aad:	eb e1                	jmp    c0012a90 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012aaf:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012ab2:	83 ec 0c             	sub    esp,0xc
c0012ab5:	01 fe                	add    esi,edi
c0012ab7:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012aba:	53                   	push   ebx
c0012abb:	e8 71 ff ff ff       	call   c0012a31 <CmUpdateHeader(Reghive_Tag*)>
c0012ac0:	83 c4 10             	add    esp,0x10
c0012ac3:	83 c4 3c             	add    esp,0x3c
c0012ac6:	89 f8                	mov    eax,edi
c0012ac8:	5b                   	pop    ebx
c0012ac9:	5e                   	pop    esi
c0012aca:	5f                   	pop    edi
c0012acb:	5d                   	pop    ebp
c0012acc:	c3                   	ret    

c0012acd <CmFindUnusedExtent(Reghive_Tag*)>:
c0012acd:	55                   	push   ebp
c0012ace:	57                   	push   edi
c0012acf:	56                   	push   esi
c0012ad0:	53                   	push   ebx
c0012ad1:	83 cb ff             	or     ebx,0xffffffff
c0012ad4:	83 ec 1c             	sub    esp,0x1c
c0012ad7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012adb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012adf:	74 68                	je     c0012b49 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ae1:	51                   	push   ecx
c0012ae2:	be 2b 00 00 00       	mov    esi,0x2b
c0012ae7:	6a 00                	push   0x0
c0012ae9:	31 ff                	xor    edi,edi
c0012aeb:	6a 00                	push   0x0
c0012aed:	31 db                	xor    ebx,ebx
c0012aef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012af2:	e8 ab 8e ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0012af7:	83 c4 10             	add    esp,0x10
c0012afa:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012afd:	76 3b                	jbe    c0012b3a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012aff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b02:	83 ec 0c             	sub    esp,0xc
c0012b05:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b09:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b0b:	51                   	push   ecx
c0012b0c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012b10:	51                   	push   ecx
c0012b11:	6a 00                	push   0x0
c0012b13:	6a 01                	push   0x1
c0012b15:	50                   	push   eax
c0012b16:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012b19:	83 c4 20             	add    esp,0x20
c0012b1c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012b21:	74 26                	je     c0012b49 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b23:	52                   	push   edx
c0012b24:	43                   	inc    ebx
c0012b25:	57                   	push   edi
c0012b26:	56                   	push   esi
c0012b27:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b2a:	e8 73 8e ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0012b2f:	83 c6 2b             	add    esi,0x2b
c0012b32:	83 d7 00             	adc    edi,0x0
c0012b35:	83 c4 10             	add    esp,0x10
c0012b38:	eb c0                	jmp    c0012afa <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012b3a:	50                   	push   eax
c0012b3b:	50                   	push   eax
c0012b3c:	6a 40                	push   0x40
c0012b3e:	55                   	push   ebp
c0012b3f:	e8 0e ff ff ff       	call   c0012a52 <CmExpand(Reghive_Tag*, int)>
c0012b44:	83 c4 10             	add    esp,0x10
c0012b47:	89 c3                	mov    ebx,eax
c0012b49:	83 c4 1c             	add    esp,0x1c
c0012b4c:	89 d8                	mov    eax,ebx
c0012b4e:	5b                   	pop    ebx
c0012b4f:	5e                   	pop    esi
c0012b50:	5f                   	pop    edi
c0012b51:	5d                   	pop    ebp
c0012b52:	c3                   	ret    

c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012b53:	55                   	push   ebp
c0012b54:	57                   	push   edi
c0012b55:	56                   	push   esi
c0012b56:	53                   	push   ebx
c0012b57:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b5d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012b64:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b6b:	e8 5d ff ff ff       	call   c0012acd <CmFindUnusedExtent(Reghive_Tag*)>
c0012b70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b74:	83 c4 0c             	add    esp,0xc
c0012b77:	6a 2b                	push   0x2b
c0012b79:	6a 00                	push   0x0
c0012b7b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012b7f:	55                   	push   ebp
c0012b80:	e8 6b d9 fe ff       	call   c00004f0 <memset>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	85 db                	test   ebx,ebx
c0012b8a:	74 12                	je     c0012b9e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012b8c:	51                   	push   ecx
c0012b8d:	55                   	push   ebp
c0012b8e:	53                   	push   ebx
c0012b8f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b96:	e8 0e fd ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b9b:	83 c4 10             	add    esp,0x10
c0012b9e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012ba2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012ba9:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012bae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012bb0:	85 db                	test   ebx,ebx
c0012bb2:	74 49                	je     c0012bfd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012bb4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012bb9:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012bbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bc2:	c1 e0 08             	shl    eax,0x8
c0012bc5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012bcb:	09 c8                	or     eax,ecx
c0012bcd:	74 11                	je     c0012be0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012bcf:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012bd3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012bd7:	c1 e8 10             	shr    eax,0x10
c0012bda:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012bde:	eb 0f                	jmp    c0012bef <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012be0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012be5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012bea:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012bef:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012bf3:	c1 ea 08             	shr    edx,0x8
c0012bf6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012bfb:	eb 0f                	jmp    c0012c0c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012bfd:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c02:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c07:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c0c:	52                   	push   edx
c0012c0d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012c11:	50                   	push   eax
c0012c12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c16:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c1d:	e8 ab fd ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c22:	83 c4 10             	add    esp,0x10
c0012c25:	85 db                	test   ebx,ebx
c0012c27:	74 12                	je     c0012c3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012c29:	50                   	push   eax
c0012c2a:	55                   	push   ebp
c0012c2b:	53                   	push   ebx
c0012c2c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c33:	e8 95 fd ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c38:	83 c4 10             	add    esp,0x10
c0012c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c3f:	83 c4 7c             	add    esp,0x7c
c0012c42:	5b                   	pop    ebx
c0012c43:	5e                   	pop    esi
c0012c44:	5f                   	pop    edi
c0012c45:	5d                   	pop    ebp
c0012c46:	c3                   	ret    

c0012c47 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012c47:	55                   	push   ebp
c0012c48:	57                   	push   edi
c0012c49:	56                   	push   esi
c0012c4a:	53                   	push   ebx
c0012c4b:	bb 27 00 00 00       	mov    ebx,0x27
c0012c50:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c56:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012c5d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012c64:	e8 17 d9 fe ff       	call   c0000580 <strlen>
c0012c69:	8d 48 26             	lea    ecx,[eax+0x26]
c0012c6c:	89 c8                	mov    eax,ecx
c0012c6e:	99                   	cdq    
c0012c6f:	f7 fb                	idiv   ebx
c0012c71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012c7e:	7e 10                	jle    c0012c90 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	68 44 20 02 c0       	push   0xc0022044
c0012c88:	e8 54 e6 ff ff       	call   c00112e1 <KePanic(char const*)>
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	53                   	push   ebx
c0012c91:	31 ed                	xor    ebp,ebp
c0012c93:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012c97:	53                   	push   ebx
c0012c98:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c9f:	57                   	push   edi
c0012ca0:	e8 04 fc ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ca5:	83 c4 10             	add    esp,0x10
c0012ca8:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012cac:	89 f0                	mov    eax,esi
c0012cae:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012cb2:	c1 e0 08             	shl    eax,0x8
c0012cb5:	09 c6                	or     esi,eax
c0012cb7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012cbb:	c1 e6 08             	shl    esi,0x8
c0012cbe:	09 c6                	or     esi,eax
c0012cc0:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012cc4:	7e 72                	jle    c0012d38 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012cc6:	85 f6                	test   esi,esi
c0012cc8:	75 25                	jne    c0012cef <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012cca:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012ccf:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012cd3:	50                   	push   eax
c0012cd4:	6a 00                	push   0x0
c0012cd6:	6a 00                	push   0x0
c0012cd8:	57                   	push   edi
c0012cd9:	e8 75 fe ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012cde:	83 c4 10             	add    esp,0x10
c0012ce1:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012ce4:	89 c6                	mov    esi,eax
c0012ce6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012ce9:	c1 f8 10             	sar    eax,0x10
c0012cec:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012cef:	51                   	push   ecx
c0012cf0:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012cf4:	52                   	push   edx
c0012cf5:	56                   	push   esi
c0012cf6:	57                   	push   edi
c0012cf7:	e8 ad fb ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cfc:	83 c4 0c             	add    esp,0xc
c0012cff:	6a 27                	push   0x27
c0012d01:	6a 00                	push   0x0
c0012d03:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d07:	51                   	push   ecx
c0012d08:	e8 e3 d7 fe ff       	call   c00004f0 <memset>
c0012d0d:	6b c5 27             	imul   eax,ebp,0x27
c0012d10:	83 c4 0c             	add    esp,0xc
c0012d13:	6a 27                	push   0x27
c0012d15:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012d1c:	50                   	push   eax
c0012d1d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d21:	51                   	push   ecx
c0012d22:	e8 69 d9 fe ff       	call   c0000690 <strncpy>
c0012d27:	83 c4 0c             	add    esp,0xc
c0012d2a:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012d2e:	52                   	push   edx
c0012d2f:	56                   	push   esi
c0012d30:	57                   	push   edi
c0012d31:	e8 97 fc ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d36:	eb 19                	jmp    c0012d51 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012d38:	85 f6                	test   esi,esi
c0012d3a:	74 18                	je     c0012d54 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012d3c:	52                   	push   edx
c0012d3d:	52                   	push   edx
c0012d3e:	56                   	push   esi
c0012d3f:	57                   	push   edi
c0012d40:	e8 c4 fc ff ff       	call   c0012a09 <CmFreeExtent(Reghive_Tag*, int)>
c0012d45:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012d49:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012d4d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012d51:	83 c4 10             	add    esp,0x10
c0012d54:	45                   	inc    ebp
c0012d55:	83 c3 03             	add    ebx,0x3
c0012d58:	83 fd 07             	cmp    ebp,0x7
c0012d5b:	0f 85 47 ff ff ff    	jne    c0012ca8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012d61:	50                   	push   eax
c0012d62:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012d66:	50                   	push   eax
c0012d67:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d6e:	57                   	push   edi
c0012d6f:	e8 59 fc ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d74:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012d7a:	5b                   	pop    ebx
c0012d7b:	5e                   	pop    esi
c0012d7c:	5f                   	pop    edi
c0012d7d:	5d                   	pop    ebp
c0012d7e:	c3                   	ret    

c0012d7f <CmGetMatch(char*, char*, bool, bool*)>:
c0012d7f:	56                   	push   esi
c0012d80:	53                   	push   ebx
c0012d81:	50                   	push   eax
c0012d82:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012d87:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d8b:	74 25                	je     c0012db2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012d8d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d90:	31 db                	xor    ebx,ebx
c0012d92:	50                   	push   eax
c0012d93:	50                   	push   eax
c0012d94:	8d 04 9d e0 34 02 c0 	lea    eax,[ebx*4-0x3ffdcb20]
c0012d9b:	50                   	push   eax
c0012d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da0:	e8 db d9 fe ff       	call   c0000780 <strcmp>
c0012da5:	83 c4 10             	add    esp,0x10
c0012da8:	85 c0                	test   eax,eax
c0012daa:	74 2e                	je     c0012dda <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012dac:	43                   	inc    ebx
c0012dad:	83 fb 3f             	cmp    ebx,0x3f
c0012db0:	75 e0                	jne    c0012d92 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012db2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012db5:	31 db                	xor    ebx,ebx
c0012db7:	51                   	push   ecx
c0012db8:	51                   	push   ecx
c0012db9:	8d 04 9d e0 34 02 c0 	lea    eax,[ebx*4-0x3ffdcb20]
c0012dc0:	50                   	push   eax
c0012dc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012dc5:	e8 b6 d9 fe ff       	call   c0000780 <strcmp>
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	85 c0                	test   eax,eax
c0012dcf:	74 09                	je     c0012dda <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012dd1:	43                   	inc    ebx
c0012dd2:	83 fb 3f             	cmp    ebx,0x3f
c0012dd5:	75 e0                	jne    c0012db7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012dd7:	83 cb ff             	or     ebx,0xffffffff
c0012dda:	5a                   	pop    edx
c0012ddb:	89 d8                	mov    eax,ebx
c0012ddd:	5b                   	pop    ebx
c0012dde:	5e                   	pop    esi
c0012ddf:	c3                   	ret    

c0012de0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012de0:	55                   	push   ebp
c0012de1:	31 c0                	xor    eax,eax
c0012de3:	57                   	push   edi
c0012de4:	56                   	push   esi
c0012de5:	53                   	push   ebx
c0012de6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012dee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012df2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012df6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012df8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012dfb:	83 fd 1f             	cmp    ebp,0x1f
c0012dfe:	7f 0b                	jg     c0012e0b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012e00:	0f b6 c2             	movzx  eax,dl
c0012e03:	d3 e0                	shl    eax,cl
c0012e05:	09 07                	or     DWORD PTR [edi],eax
c0012e07:	b0 01                	mov    al,0x1
c0012e09:	01 33                	add    DWORD PTR [ebx],esi
c0012e0b:	5b                   	pop    ebx
c0012e0c:	5e                   	pop    esi
c0012e0d:	5f                   	pop    edi
c0012e0e:	5d                   	pop    ebp
c0012e0f:	c3                   	ret    

c0012e10 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012e10:	57                   	push   edi
c0012e11:	56                   	push   esi
c0012e12:	53                   	push   ebx
c0012e13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012e1b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012e1f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e23:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012e25:	7c 17                	jl     c0012e3e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012e27:	8b 17                	mov    edx,DWORD PTR [edi]
c0012e29:	b8 01 00 00 00       	mov    eax,0x1
c0012e2e:	d3 e0                	shl    eax,cl
c0012e30:	48                   	dec    eax
c0012e31:	21 d0                	and    eax,edx
c0012e33:	d3 ea                	shr    edx,cl
c0012e35:	89 17                	mov    DWORD PTR [edi],edx
c0012e37:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012e39:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e3c:	eb 05                	jmp    c0012e43 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012e3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e41:	31 c0                	xor    eax,eax
c0012e43:	5b                   	pop    ebx
c0012e44:	5e                   	pop    esi
c0012e45:	5f                   	pop    edi
c0012e46:	c3                   	ret    

c0012e47 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012e47:	83 ec 40             	sub    esp,0x40
c0012e4a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e4e:	50                   	push   eax
c0012e4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e57:	e8 4d fa ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e5c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012e60:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012e64:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012e68:	89 10                	mov    DWORD PTR [eax],edx
c0012e6a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012e6d:	83 c4 4c             	add    esp,0x4c
c0012e70:	c3                   	ret    

c0012e71 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012e71:	55                   	push   ebp
c0012e72:	57                   	push   edi
c0012e73:	56                   	push   esi
c0012e74:	53                   	push   ebx
c0012e75:	83 ec 40             	sub    esp,0x40
c0012e78:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012e7c:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012e80:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012e84:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012e88:	53                   	push   ebx
c0012e89:	56                   	push   esi
c0012e8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e8e:	e8 16 fa ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e93:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012e97:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012e9b:	83 c4 0c             	add    esp,0xc
c0012e9e:	53                   	push   ebx
c0012e9f:	56                   	push   esi
c0012ea0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ea4:	e8 24 fb ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ea9:	83 c4 4c             	add    esp,0x4c
c0012eac:	5b                   	pop    ebx
c0012ead:	5e                   	pop    esi
c0012eae:	5f                   	pop    edi
c0012eaf:	5d                   	pop    ebp
c0012eb0:	c3                   	ret    

c0012eb1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012eb1:	55                   	push   ebp
c0012eb2:	57                   	push   edi
c0012eb3:	56                   	push   esi
c0012eb4:	31 f6                	xor    esi,esi
c0012eb6:	53                   	push   ebx
c0012eb7:	31 db                	xor    ebx,ebx
c0012eb9:	83 ec 40             	sub    esp,0x40
c0012ebc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012ec4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ecc:	6a 12                	push   0x12
c0012ece:	68 ee 00 00 00       	push   0xee
c0012ed3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012ed7:	e8 14 d6 fe ff       	call   c00004f0 <memset>
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012ee3:	6a 08                	push   0x8
c0012ee5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ee9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012eed:	50                   	push   eax
c0012eee:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012ef2:	55                   	push   ebp
c0012ef3:	57                   	push   edi
c0012ef4:	e8 e7 fe ff ff       	call   c0012de0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012ef9:	83 c4 10             	add    esp,0x10
c0012efc:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f00:	50                   	push   eax
c0012f01:	6a 06                	push   0x6
c0012f03:	55                   	push   ebp
c0012f04:	57                   	push   edi
c0012f05:	e8 06 ff ff ff       	call   c0012e10 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f0a:	83 c4 10             	add    esp,0x10
c0012f0d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f12:	74 07                	je     c0012f1b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012f14:	46                   	inc    esi
c0012f15:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012f19:	eb e1                	jmp    c0012efc <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012f1b:	43                   	inc    ebx
c0012f1c:	83 fb 12             	cmp    ebx,0x12
c0012f1f:	75 c2                	jne    c0012ee3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012f21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f25:	31 f6                	xor    esi,esi
c0012f27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f2a:	50                   	push   eax
c0012f2b:	50                   	push   eax
c0012f2c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012f31:	46                   	inc    esi
c0012f32:	8d 04 85 e0 34 02 c0 	lea    eax,[eax*4-0x3ffdcb20]
c0012f39:	50                   	push   eax
c0012f3a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f3e:	e8 2d d9 fe ff       	call   c0000870 <strcat>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	83 fe 18             	cmp    esi,0x18
c0012f49:	75 df                	jne    c0012f2a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012f4b:	83 c4 3c             	add    esp,0x3c
c0012f4e:	31 c0                	xor    eax,eax
c0012f50:	5b                   	pop    ebx
c0012f51:	5e                   	pop    esi
c0012f52:	5f                   	pop    edi
c0012f53:	5d                   	pop    ebp
c0012f54:	c3                   	ret    

c0012f55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012f55:	83 ec 40             	sub    esp,0x40
c0012f58:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f5c:	50                   	push   eax
c0012f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f65:	e8 3f f9 ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f6a:	58                   	pop    eax
c0012f6b:	5a                   	pop    edx
c0012f6c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012f70:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012f74:	50                   	push   eax
c0012f75:	e8 37 ff ff ff       	call   c0012eb1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012f7a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012f7f:	83 c4 4c             	add    esp,0x4c
c0012f82:	c3                   	ret    

c0012f83 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012f83:	55                   	push   ebp
c0012f84:	57                   	push   edi
c0012f85:	56                   	push   esi
c0012f86:	53                   	push   ebx
c0012f87:	31 db                	xor    ebx,ebx
c0012f89:	83 ec 70             	sub    esp,0x70
c0012f8c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012f93:	6a 30                	push   0x30
c0012f95:	6a 00                	push   0x0
c0012f97:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f9b:	56                   	push   esi
c0012f9c:	e8 4f d5 fe ff       	call   c00004f0 <memset>
c0012fa1:	83 c4 10             	add    esp,0x10
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	57                   	push   edi
c0012fa8:	e8 d3 d5 fe ff       	call   c0000580 <strlen>
c0012fad:	83 c4 10             	add    esp,0x10
c0012fb0:	39 d8                	cmp    eax,ebx
c0012fb2:	76 16                	jbe    c0012fca <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012fb4:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012fb8:	83 ec 0c             	sub    esp,0xc
c0012fbb:	50                   	push   eax
c0012fbc:	e8 9f d9 fe ff       	call   c0000960 <toupper>
c0012fc1:	83 c4 10             	add    esp,0x10
c0012fc4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012fc7:	43                   	inc    ebx
c0012fc8:	eb da                	jmp    c0012fa4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012fca:	52                   	push   edx
c0012fcb:	31 db                	xor    ebx,ebx
c0012fcd:	6a 18                	push   0x18
c0012fcf:	31 ff                	xor    edi,edi
c0012fd1:	6a 3f                	push   0x3f
c0012fd3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fd7:	50                   	push   eax
c0012fd8:	e8 13 d5 fe ff       	call   c00004f0 <memset>
c0012fdd:	83 c4 10             	add    esp,0x10
c0012fe0:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012fe4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012fe8:	84 c0                	test   al,al
c0012fea:	0f 84 af 00 00 00    	je     c001309f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012ff0:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012ff4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ff7:	83 ec 0c             	sub    esp,0xc
c0012ffa:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012fff:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013003:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0013007:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001300c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013010:	56                   	push   esi
c0013011:	e8 6a d5 fe ff       	call   c0000580 <strlen>
c0013016:	83 c4 10             	add    esp,0x10
c0013019:	85 c0                	test   eax,eax
c001301b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001301f:	74 0b                	je     c001302c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013021:	50                   	push   eax
c0013022:	6a 01                	push   0x1
c0013024:	56                   	push   esi
c0013025:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013029:	50                   	push   eax
c001302a:	eb 0a                	jmp    c0013036 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001302c:	50                   	push   eax
c001302d:	6a 00                	push   0x0
c001302f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013033:	50                   	push   eax
c0013034:	6a 00                	push   0x0
c0013036:	e8 44 fd ff ff       	call   c0012d7f <CmGetMatch(char*, char*, bool, bool*)>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	83 f8 ff             	cmp    eax,0xffffffff
c0013041:	75 1a                	jne    c001305d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013043:	83 ec 0c             	sub    esp,0xc
c0013046:	68 59 20 02 c0       	push   0xc0022059
c001304b:	e8 91 e2 ff ff       	call   c00112e1 <KePanic(char const*)>
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	b8 02 00 00 00       	mov    eax,0x2
c0013058:	e9 bb 00 00 00       	jmp    c0013118 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001305d:	83 ff 18             	cmp    edi,0x18
c0013060:	75 1a                	jne    c001307c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013062:	83 ec 0c             	sub    esp,0xc
c0013065:	68 6e 20 02 c0       	push   0xc002206e
c001306a:	e8 72 e2 ff ff       	call   c00112e1 <KePanic(char const*)>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	b8 01 00 00 00       	mov    eax,0x1
c0013077:	e9 9c 00 00 00       	jmp    c0013118 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001307c:	47                   	inc    edi
c001307d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013082:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013086:	0f 45 dd             	cmovne ebx,ebp
c0013089:	83 ec 0c             	sub    esp,0xc
c001308c:	56                   	push   esi
c001308d:	e8 ee d4 fe ff       	call   c0000580 <strlen>
c0013092:	83 c4 10             	add    esp,0x10
c0013095:	85 c0                	test   eax,eax
c0013097:	74 06                	je     c001309f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013099:	43                   	inc    ebx
c001309a:	e9 41 ff ff ff       	jmp    c0012fe0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001309f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00130a7:	31 db                	xor    ebx,ebx
c00130a9:	31 ff                	xor    edi,edi
c00130ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00130b3:	50                   	push   eax
c00130b4:	6a 12                	push   0x12
c00130b6:	68 ee 00 00 00       	push   0xee
c00130bb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00130c2:	e8 29 d4 fe ff       	call   c00004f0 <memset>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00130ce:	83 fb 17             	cmp    ebx,0x17
c00130d1:	7e 26                	jle    c00130f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00130d3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130d7:	50                   	push   eax
c00130d8:	6a 08                	push   0x8
c00130da:	55                   	push   ebp
c00130db:	56                   	push   esi
c00130dc:	e8 2f fd ff ff       	call   c0012e10 <CmGetShift(unsigned int*, int*, int, bool*)>
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130e9:	74 26                	je     c0013111 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00130eb:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00130f2:	4b                   	dec    ebx
c00130f3:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00130f6:	47                   	inc    edi
c00130f7:	eb 1c                	jmp    c0013115 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00130f9:	6a 06                	push   0x6
c00130fb:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013100:	50                   	push   eax
c0013101:	55                   	push   ebp
c0013102:	56                   	push   esi
c0013103:	e8 d8 fc ff ff       	call   c0012de0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013108:	83 c4 10             	add    esp,0x10
c001310b:	84 c0                	test   al,al
c001310d:	75 06                	jne    c0013115 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001310f:	eb c2                	jmp    c00130d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013111:	31 c0                	xor    eax,eax
c0013113:	eb 03                	jmp    c0013118 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013115:	43                   	inc    ebx
c0013116:	eb b2                	jmp    c00130ca <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013118:	83 c4 6c             	add    esp,0x6c
c001311b:	5b                   	pop    ebx
c001311c:	5e                   	pop    esi
c001311d:	5f                   	pop    edi
c001311e:	5d                   	pop    ebp
c001311f:	c3                   	ret    

c0013120 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013120:	53                   	push   ebx
c0013121:	83 ec 3c             	sub    esp,0x3c
c0013124:	6a 2b                	push   0x2b
c0013126:	6a 00                	push   0x0
c0013128:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001312c:	53                   	push   ebx
c001312d:	e8 be d3 fe ff       	call   c00004f0 <memset>
c0013132:	58                   	pop    eax
c0013133:	5a                   	pop    edx
c0013134:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013138:	50                   	push   eax
c0013139:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001313d:	e8 41 fe ff ff       	call   c0012f83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013142:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013147:	83 c4 0c             	add    esp,0xc
c001314a:	6a 15                	push   0x15
c001314c:	6a 00                	push   0x0
c001314e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013152:	50                   	push   eax
c0013153:	e8 98 d3 fe ff       	call   c00004f0 <memset>
c0013158:	53                   	push   ebx
c0013159:	6a 00                	push   0x0
c001315b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001315f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013163:	e8 eb f9 ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013168:	83 c4 58             	add    esp,0x58
c001316b:	5b                   	pop    ebx
c001316c:	c3                   	ret    

c001316d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001316d:	56                   	push   esi
c001316e:	53                   	push   ebx
c001316f:	83 ec 48             	sub    esp,0x48
c0013172:	6a 12                	push   0x12
c0013174:	68 ff 00 00 00       	push   0xff
c0013179:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001317d:	56                   	push   esi
c001317e:	e8 6d d3 fe ff       	call   c00004f0 <memset>
c0013183:	5a                   	pop    edx
c0013184:	59                   	pop    ecx
c0013185:	56                   	push   esi
c0013186:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001318a:	e8 f4 fd ff ff       	call   c0012f83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013196:	85 db                	test   ebx,ebx
c0013198:	74 42                	je     c00131dc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001319a:	50                   	push   eax
c001319b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001319f:	50                   	push   eax
c00131a0:	53                   	push   ebx
c00131a1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131a5:	e8 ff f6 ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131aa:	83 c4 0c             	add    esp,0xc
c00131ad:	6a 12                	push   0x12
c00131af:	8d 44 24 21          	lea    eax,[esp+0x21]
c00131b3:	50                   	push   eax
c00131b4:	56                   	push   esi
c00131b5:	e8 c6 d1 fe ff       	call   c0000380 <memcmp>
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	85 c0                	test   eax,eax
c00131bf:	74 1e                	je     c00131df <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00131c1:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00131c6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00131cb:	c1 e3 08             	shl    ebx,0x8
c00131ce:	09 d8                	or     eax,ebx
c00131d0:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00131d5:	c1 e3 10             	shl    ebx,0x10
c00131d8:	09 c3                	or     ebx,eax
c00131da:	eb ba                	jmp    c0013196 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00131dc:	83 cb ff             	or     ebx,0xffffffff
c00131df:	83 c4 44             	add    esp,0x44
c00131e2:	89 d8                	mov    eax,ebx
c00131e4:	5b                   	pop    ebx
c00131e5:	5e                   	pop    esi
c00131e6:	c3                   	ret    

c00131e7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00131e7:	57                   	push   edi
c00131e8:	56                   	push   esi
c00131e9:	53                   	push   ebx
c00131ea:	83 ec 34             	sub    esp,0x34
c00131ed:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00131f1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00131f5:	6a 2b                	push   0x2b
c00131f7:	6a 00                	push   0x0
c00131f9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00131fd:	53                   	push   ebx
c00131fe:	e8 ed d2 fe ff       	call   c00004f0 <memset>
c0013203:	58                   	pop    eax
c0013204:	5a                   	pop    edx
c0013205:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013209:	50                   	push   eax
c001320a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001320e:	e8 70 fd ff ff       	call   c0012f83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013213:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013217:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001321b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001321f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013223:	53                   	push   ebx
c0013224:	6a 00                	push   0x0
c0013226:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001322a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001322e:	e8 20 f9 ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013233:	83 c4 50             	add    esp,0x50
c0013236:	5b                   	pop    ebx
c0013237:	5e                   	pop    esi
c0013238:	5f                   	pop    edi
c0013239:	c3                   	ret    

c001323a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001323a:	55                   	push   ebp
c001323b:	57                   	push   edi
c001323c:	56                   	push   esi
c001323d:	53                   	push   ebx
c001323e:	83 ec 40             	sub    esp,0x40
c0013241:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013245:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013249:	6a 2b                	push   0x2b
c001324b:	6a 00                	push   0x0
c001324d:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013251:	56                   	push   esi
c0013252:	e8 99 d2 fe ff       	call   c00004f0 <memset>
c0013257:	5f                   	pop    edi
c0013258:	89 ef                	mov    edi,ebp
c001325a:	58                   	pop    eax
c001325b:	8d 44 24 11          	lea    eax,[esp+0x11]
c001325f:	50                   	push   eax
c0013260:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013264:	e8 1a fd ff ff       	call   c0012f83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013269:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001326e:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013273:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013278:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001327d:	83 c4 10             	add    esp,0x10
c0013280:	85 ed                	test   ebp,ebp
c0013282:	74 14                	je     c0013298 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013284:	51                   	push   ecx
c0013285:	51                   	push   ecx
c0013286:	57                   	push   edi
c0013287:	53                   	push   ebx
c0013288:	e8 0e f7 ff ff       	call   c001299b <CmGetNext(Reghive_Tag*, int)>
c001328d:	83 c4 10             	add    esp,0x10
c0013290:	85 c0                	test   eax,eax
c0013292:	74 04                	je     c0013298 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013294:	89 c7                	mov    edi,eax
c0013296:	eb e8                	jmp    c0013280 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013298:	56                   	push   esi
c0013299:	6a 00                	push   0x0
c001329b:	57                   	push   edi
c001329c:	53                   	push   ebx
c001329d:	e8 b1 f8 ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132a2:	83 c4 0c             	add    esp,0xc
c00132a5:	56                   	push   esi
c00132a6:	50                   	push   eax
c00132a7:	89 c7                	mov    edi,eax
c00132a9:	53                   	push   ebx
c00132aa:	e8 fa f5 ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132af:	58                   	pop    eax
c00132b0:	5a                   	pop    edx
c00132b1:	6a 6c                	push   0x6c
c00132b3:	6a 00                	push   0x0
c00132b5:	6a 00                	push   0x0
c00132b7:	68 7f 20 02 c0       	push   0xc002207f
c00132bc:	57                   	push   edi
c00132bd:	53                   	push   ebx
c00132be:	e8 24 ff ff ff       	call   c00131e7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00132c3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00132c7:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00132cb:	c1 e8 10             	shr    eax,0x10
c00132ce:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00132d2:	83 c4 1c             	add    esp,0x1c
c00132d5:	56                   	push   esi
c00132d6:	57                   	push   edi
c00132d7:	53                   	push   ebx
c00132d8:	e8 f0 f6 ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00132e2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00132e7:	c1 e0 08             	shl    eax,0x8
c00132ea:	09 c2                	or     edx,eax
c00132ec:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00132f1:	83 c4 4c             	add    esp,0x4c
c00132f4:	5b                   	pop    ebx
c00132f5:	5e                   	pop    esi
c00132f6:	c1 e0 10             	shl    eax,0x10
c00132f9:	09 d0                	or     eax,edx
c00132fb:	5f                   	pop    edi
c00132fc:	5d                   	pop    ebp
c00132fd:	c3                   	ret    

c00132fe <zStrtok(char*, char const*)>:
c00132fe:	55                   	push   ebp
c00132ff:	57                   	push   edi
c0013300:	56                   	push   esi
c0013301:	53                   	push   ebx
c0013302:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013306:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001330a:	85 db                	test   ebx,ebx
c001330c:	74 2f                	je     c001333d <zStrtok(char*, char const*)+0x3f>
c001330e:	85 c0                	test   eax,eax
c0013310:	75 09                	jne    c001331b <zStrtok(char*, char const*)+0x1d>
c0013312:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0013317:	85 c0                	test   eax,eax
c0013319:	74 50                	je     c001336b <zStrtok(char*, char const*)+0x6d>
c001331b:	31 c9                	xor    ecx,ecx
c001331d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013321:	74 03                	je     c0013326 <zStrtok(char*, char const*)+0x28>
c0013323:	41                   	inc    ecx
c0013324:	eb f7                	jmp    c001331d <zStrtok(char*, char const*)+0x1f>
c0013326:	31 d2                	xor    edx,edx
c0013328:	39 ca                	cmp    edx,ecx
c001332a:	74 15                	je     c0013341 <zStrtok(char*, char const*)+0x43>
c001332c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013330:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013333:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013336:	39 ee                	cmp    esi,ebp
c0013338:	74 13                	je     c001334d <zStrtok(char*, char const*)+0x4f>
c001333a:	42                   	inc    edx
c001333b:	eb eb                	jmp    c0013328 <zStrtok(char*, char const*)+0x2a>
c001333d:	31 c0                	xor    eax,eax
c001333f:	eb 2a                	jmp    c001336b <zStrtok(char*, char const*)+0x6d>
c0013341:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c001334b:	eb 1e                	jmp    c001336b <zStrtok(char*, char const*)+0x6d>
c001334d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013350:	39 ce                	cmp    esi,ecx
c0013352:	75 0a                	jne    c001335e <zStrtok(char*, char const*)+0x60>
c0013354:	40                   	inc    eax
c0013355:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001335a:	89 d8                	mov    eax,ebx
c001335c:	eb 0d                	jmp    c001336b <zStrtok(char*, char const*)+0x6d>
c001335e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013361:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013365:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c001336b:	5b                   	pop    ebx
c001336c:	5e                   	pop    esi
c001336d:	5f                   	pop    edi
c001336e:	5d                   	pop    ebp
c001336f:	c3                   	ret    

c0013370 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013370:	57                   	push   edi
c0013371:	56                   	push   esi
c0013372:	53                   	push   ebx
c0013373:	81 ec 08 01 00 00    	sub    esp,0x108
c0013379:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013380:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013387:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001338b:	53                   	push   ebx
c001338c:	e8 bf d2 fe ff       	call   c0000650 <strcpy>
c0013391:	59                   	pop    ecx
c0013392:	5e                   	pop    esi
c0013393:	68 e3 23 02 c0       	push   0xc00223e3
c0013398:	53                   	push   ebx
c0013399:	bb 01 00 00 00       	mov    ebx,0x1
c001339e:	e8 5b ff ff ff       	call   c00132fe <zStrtok(char*, char const*)>
c00133a3:	83 c4 10             	add    esp,0x10
c00133a6:	85 c0                	test   eax,eax
c00133a8:	74 3b                	je     c00133e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133aa:	52                   	push   edx
c00133ab:	50                   	push   eax
c00133ac:	6a 01                	push   0x1
c00133ae:	57                   	push   edi
c00133af:	e8 b9 fd ff ff       	call   c001316d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00133b4:	59                   	pop    ecx
c00133b5:	5e                   	pop    esi
c00133b6:	89 c3                	mov    ebx,eax
c00133b8:	68 e3 23 02 c0       	push   0xc00223e3
c00133bd:	6a 00                	push   0x0
c00133bf:	e8 3a ff ff ff       	call   c00132fe <zStrtok(char*, char const*)>
c00133c4:	83 c4 10             	add    esp,0x10
c00133c7:	85 c0                	test   eax,eax
c00133c9:	89 c6                	mov    esi,eax
c00133cb:	74 18                	je     c00133e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133cd:	52                   	push   edx
c00133ce:	52                   	push   edx
c00133cf:	53                   	push   ebx
c00133d0:	57                   	push   edi
c00133d1:	e8 86 f5 ff ff       	call   c001295c <CmEnterDirectory(Reghive_Tag*, int)>
c00133d6:	83 c4 10             	add    esp,0x10
c00133d9:	83 f8 ff             	cmp    eax,0xffffffff
c00133dc:	89 c3                	mov    ebx,eax
c00133de:	74 05                	je     c00133e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133e0:	50                   	push   eax
c00133e1:	56                   	push   esi
c00133e2:	53                   	push   ebx
c00133e3:	eb c9                	jmp    c00133ae <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00133e5:	81 c4 00 01 00 00    	add    esp,0x100
c00133eb:	89 d8                	mov    eax,ebx
c00133ed:	5b                   	pop    ebx
c00133ee:	5e                   	pop    esi
c00133ef:	5f                   	pop    edi
c00133f0:	c3                   	ret    

c00133f1 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00133f1:	55                   	push   ebp
c00133f2:	57                   	push   edi
c00133f3:	56                   	push   esi
c00133f4:	53                   	push   ebx
c00133f5:	83 ec 5c             	sub    esp,0x5c
c00133f8:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00133fc:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013400:	85 db                	test   ebx,ebx
c0013402:	0f 8e 84 00 00 00    	jle    c001348c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013408:	57                   	push   edi
c0013409:	31 ed                	xor    ebp,ebp
c001340b:	6a 32                	push   0x32
c001340d:	6a 00                	push   0x0
c001340f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013413:	57                   	push   edi
c0013414:	e8 d7 d0 fe ff       	call   c00004f0 <memset>
c0013419:	83 c4 0c             	add    esp,0xc
c001341c:	57                   	push   edi
c001341d:	53                   	push   ebx
c001341e:	56                   	push   esi
c001341f:	e8 31 fb ff ff       	call   c0012f55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013424:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013428:	83 c4 10             	add    esp,0x10
c001342b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001342f:	7d 13                	jge    c0013444 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013431:	83 ec 0c             	sub    esp,0xc
c0013434:	45                   	inc    ebp
c0013435:	68 87 27 02 c0       	push   0xc0022787
c001343a:	e8 cb 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001343f:	83 c4 10             	add    esp,0x10
c0013442:	eb e7                	jmp    c001342b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013444:	51                   	push   ecx
c0013445:	57                   	push   edi
c0013446:	53                   	push   ebx
c0013447:	68 85 20 02 c0       	push   0xc0022085
c001344c:	e8 b9 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013459:	75 1e                	jne    c0013479 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001345b:	52                   	push   edx
c001345c:	52                   	push   edx
c001345d:	53                   	push   ebx
c001345e:	56                   	push   esi
c001345f:	e8 f8 f4 ff ff       	call   c001295c <CmEnterDirectory(Reghive_Tag*, int)>
c0013464:	83 c4 0c             	add    esp,0xc
c0013467:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001346b:	8d 51 04             	lea    edx,[ecx+0x4]
c001346e:	52                   	push   edx
c001346f:	50                   	push   eax
c0013470:	56                   	push   esi
c0013471:	e8 7b ff ff ff       	call   c00133f1 <CmDisplayTree(Reghive_Tag*, int, int)>
c0013476:	83 c4 10             	add    esp,0x10
c0013479:	50                   	push   eax
c001347a:	50                   	push   eax
c001347b:	53                   	push   ebx
c001347c:	56                   	push   esi
c001347d:	e8 19 f5 ff ff       	call   c001299b <CmGetNext(Reghive_Tag*, int)>
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	89 c3                	mov    ebx,eax
c0013487:	e9 74 ff ff ff       	jmp    c0013400 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001348c:	83 c4 5c             	add    esp,0x5c
c001348f:	5b                   	pop    ebx
c0013490:	5e                   	pop    esi
c0013491:	5f                   	pop    edi
c0013492:	5d                   	pop    ebp
c0013493:	c3                   	ret    

c0013494 <CmSplitFinalSlashInPlace(char*)>:
c0013494:	53                   	push   ebx
c0013495:	83 ec 14             	sub    esp,0x14
c0013498:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001349c:	53                   	push   ebx
c001349d:	e8 de d0 fe ff       	call   c0000580 <strlen>
c00134a2:	83 c4 10             	add    esp,0x10
c00134a5:	48                   	dec    eax
c00134a6:	85 c0                	test   eax,eax
c00134a8:	74 15                	je     c00134bf <CmSplitFinalSlashInPlace(char*)+0x2b>
c00134aa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134ae:	8d 14 03             	lea    edx,[ebx+eax*1]
c00134b1:	75 09                	jne    c00134bc <CmSplitFinalSlashInPlace(char*)+0x28>
c00134b3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00134b6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00134ba:	eb 05                	jmp    c00134c1 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00134bc:	48                   	dec    eax
c00134bd:	eb e7                	jmp    c00134a6 <CmSplitFinalSlashInPlace(char*)+0x12>
c00134bf:	31 c0                	xor    eax,eax
c00134c1:	83 c4 08             	add    esp,0x8
c00134c4:	5b                   	pop    ebx
c00134c5:	c3                   	ret    

c00134c6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00134c6:	55                   	push   ebp
c00134c7:	57                   	push   edi
c00134c8:	56                   	push   esi
c00134c9:	53                   	push   ebx
c00134ca:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00134d0:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00134d7:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00134da:	8d 43 01             	lea    eax,[ebx+0x1]
c00134dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134e1:	89 f0                	mov    eax,esi
c00134e3:	3c 40                	cmp    al,0x40
c00134e5:	75 1b                	jne    c0013502 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00134e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00134ea:	85 c0                	test   eax,eax
c00134ec:	74 08                	je     c00134f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00134ee:	83 f8 3a             	cmp    eax,0x3a
c00134f1:	74 03                	je     c00134f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00134f3:	43                   	inc    ebx
c00134f4:	eb f1                	jmp    c00134e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00134f6:	85 c0                	test   eax,eax
c00134f8:	0f 84 45 01 00 00    	je     c0013643 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134fe:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013501:	43                   	inc    ebx
c0013502:	50                   	push   eax
c0013503:	6a 40                	push   0x40
c0013505:	6a 00                	push   0x0
c0013507:	8d 44 24 24          	lea    eax,[esp+0x24]
c001350b:	50                   	push   eax
c001350c:	e8 df cf fe ff       	call   c00004f0 <memset>
c0013511:	89 f1                	mov    ecx,esi
c0013513:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001351a:	31 c0                	xor    eax,eax
c001351c:	83 c4 10             	add    esp,0x10
c001351f:	0f be f1             	movsx  esi,cl
c0013522:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013525:	85 d2                	test   edx,edx
c0013527:	89 d1                	mov    ecx,edx
c0013529:	0f 84 14 01 00 00    	je     c0013643 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001352f:	3d c7 00 00 00       	cmp    eax,0xc7
c0013534:	0f 8f 09 01 00 00    	jg     c0013643 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001353a:	83 fa 0a             	cmp    edx,0xa
c001353d:	0f 85 f1 00 00 00    	jne    c0013634 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013543:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013548:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c001354d:	89 c8                	mov    eax,ecx
c001354f:	a8 df                	test   al,0xdf
c0013551:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013556:	83 f9 23             	cmp    ecx,0x23
c0013559:	0f 94 c2             	sete   dl
c001355c:	89 d5                	mov    ebp,edx
c001355e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013562:	09 ea                	or     edx,ebp
c0013564:	80 e2 01             	and    dl,0x1
c0013567:	75 47                	jne    c00135b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013569:	83 e8 09             	sub    eax,0x9
c001356c:	3c 01                	cmp    al,0x1
c001356e:	76 40                	jbe    c00135b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013570:	83 f9 5b             	cmp    ecx,0x5b
c0013573:	75 42                	jne    c00135b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013575:	83 fe 40             	cmp    esi,0x40
c0013578:	75 36                	jne    c00135b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001357a:	83 ec 0c             	sub    esp,0xc
c001357d:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013581:	55                   	push   ebp
c0013582:	e8 f9 cf fe ff       	call   c0000580 <strlen>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	83 f8 3f             	cmp    eax,0x3f
c001358d:	0f 87 b0 00 00 00    	ja     c0013643 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013593:	50                   	push   eax
c0013594:	50                   	push   eax
c0013595:	55                   	push   ebp
c0013596:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001359a:	55                   	push   ebp
c001359b:	e8 b0 d0 fe ff       	call   c0000650 <strcpy>
c00135a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00135a3:	e8 d8 cf fe ff       	call   c0000580 <strlen>
c00135a8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00135ad:	83 c4 10             	add    esp,0x10
c00135b0:	31 d2                	xor    edx,edx
c00135b2:	e9 84 00 00 00       	jmp    c001363b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00135b7:	83 fe 40             	cmp    esi,0x40
c00135ba:	74 06                	je     c00135c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00135bc:	8d 54 24 58          	lea    edx,[esp+0x58]
c00135c0:	eb 19                	jmp    c00135db <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00135c2:	51                   	push   ecx
c00135c3:	51                   	push   ecx
c00135c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135cc:	50                   	push   eax
c00135cd:	e8 ae d1 fe ff       	call   c0000780 <strcmp>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	85 c0                	test   eax,eax
c00135d7:	75 d7                	jne    c00135b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00135d9:	eb e1                	jmp    c00135bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00135db:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00135de:	85 c9                	test   ecx,ecx
c00135e0:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00135e5:	83 f9 3d             	cmp    ecx,0x3d
c00135e8:	0f 94 c0             	sete   al
c00135eb:	89 c5                	mov    ebp,eax
c00135ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135f1:	09 e8                	or     eax,ebp
c00135f3:	a8 01                	test   al,0x1
c00135f5:	89 c5                	mov    ebp,eax
c00135f7:	75 03                	jne    c00135fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00135f9:	42                   	inc    edx
c00135fa:	eb df                	jmp    c00135db <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00135fc:	85 c9                	test   ecx,ecx
c00135fe:	74 43                	je     c0013643 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013600:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013604:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013607:	52                   	push   edx
c0013608:	52                   	push   edx
c0013609:	8d 44 24 60          	lea    eax,[esp+0x60]
c001360d:	50                   	push   eax
c001360e:	53                   	push   ebx
c001360f:	e8 6c d1 fe ff       	call   c0000780 <strcmp>
c0013614:	83 c4 10             	add    esp,0x10
c0013617:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001361b:	85 c0                	test   eax,eax
c001361d:	75 91                	jne    c00135b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001361f:	50                   	push   eax
c0013620:	42                   	inc    edx
c0013621:	50                   	push   eax
c0013622:	52                   	push   edx
c0013623:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001362a:	e8 21 d0 fe ff       	call   c0000650 <strcpy>
c001362f:	83 c4 10             	add    esp,0x10
c0013632:	eb 11                	jmp    c0013645 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013634:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013638:	8d 50 01             	lea    edx,[eax+0x1]
c001363b:	47                   	inc    edi
c001363c:	89 d0                	mov    eax,edx
c001363e:	e9 df fe ff ff       	jmp    c0013522 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013643:	31 ed                	xor    ebp,ebp
c0013645:	81 c4 2c 01 00 00    	add    esp,0x12c
c001364b:	89 e8                	mov    eax,ebp
c001364d:	5b                   	pop    ebx
c001364e:	5e                   	pop    esi
c001364f:	5f                   	pop    edi
c0013650:	5d                   	pop    ebp
c0013651:	c3                   	ret    

c0013652 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013652:	57                   	push   edi
c0013653:	56                   	push   esi
c0013654:	53                   	push   ebx
c0013655:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001365b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013662:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013669:	53                   	push   ebx
c001366a:	e8 11 cf fe ff       	call   c0000580 <strlen>
c001366f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013672:	89 c7                	mov    edi,eax
c0013674:	e8 07 cf fe ff       	call   c0000580 <strlen>
c0013679:	83 c4 10             	add    esp,0x10
c001367c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013680:	3d ff 00 00 00       	cmp    eax,0xff
c0013685:	0f 87 d3 00 00 00    	ja     c001375e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001368b:	57                   	push   edi
c001368c:	57                   	push   edi
c001368d:	56                   	push   esi
c001368e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013692:	56                   	push   esi
c0013693:	e8 b8 cf fe ff       	call   c0000650 <strcpy>
c0013698:	58                   	pop    eax
c0013699:	5a                   	pop    edx
c001369a:	68 e3 23 02 c0       	push   0xc00223e3
c001369f:	56                   	push   esi
c00136a0:	e8 cb d1 fe ff       	call   c0000870 <strcat>
c00136a5:	59                   	pop    ecx
c00136a6:	5f                   	pop    edi
c00136a7:	53                   	push   ebx
c00136a8:	56                   	push   esi
c00136a9:	e8 c2 d1 fe ff       	call   c0000870 <strcat>
c00136ae:	58                   	pop    eax
c00136af:	5a                   	pop    edx
c00136b0:	68 8f 20 02 c0       	push   0xc002208f
c00136b5:	56                   	push   esi
c00136b6:	e8 b5 d1 fe ff       	call   c0000870 <strcat>
c00136bb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00136c2:	e8 0c 44 ff ff       	call   c0007ad3 <malloc>
c00136c7:	83 c4 0c             	add    esp,0xc
c00136ca:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00136d0:	56                   	push   esi
c00136d1:	50                   	push   eax
c00136d2:	89 c3                	mov    ebx,eax
c00136d4:	e8 43 81 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c00136d9:	83 c4 10             	add    esp,0x10
c00136dc:	85 db                	test   ebx,ebx
c00136de:	74 7e                	je     c001375e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00136e0:	51                   	push   ecx
c00136e1:	51                   	push   ecx
c00136e2:	6a 01                	push   0x1
c00136e4:	53                   	push   ebx
c00136e5:	e8 fa 81 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c00136ea:	83 c4 10             	add    esp,0x10
c00136ed:	85 c0                	test   eax,eax
c00136ef:	74 08                	je     c00136f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00136f1:	83 ec 0c             	sub    esp,0xc
c00136f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f6:	53                   	push   ebx
c00136f7:	eb 5f                	jmp    c0013758 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00136f9:	52                   	push   edx
c00136fa:	8d 44 24 17          	lea    eax,[esp+0x17]
c00136fe:	50                   	push   eax
c00136ff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013703:	50                   	push   eax
c0013704:	53                   	push   ebx
c0013705:	e8 dc 84 ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c001370a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	89 c1                	mov    ecx,eax
c0013713:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013717:	74 31                	je     c001374a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013719:	83 ec 0c             	sub    esp,0xc
c001371c:	50                   	push   eax
c001371d:	e8 b1 43 ff ff       	call   c0007ad3 <malloc>
c0013722:	89 c6                	mov    esi,eax
c0013724:	58                   	pop    eax
c0013725:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013727:	8d 54 24 20          	lea    edx,[esp+0x20]
c001372b:	52                   	push   edx
c001372c:	56                   	push   esi
c001372d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013731:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013735:	53                   	push   ebx
c0013736:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013739:	83 c4 20             	add    esp,0x20
c001373c:	85 c0                	test   eax,eax
c001373e:	75 0a                	jne    c001374a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013744:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013748:	74 18                	je     c0013762 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001374a:	83 ec 0c             	sub    esp,0xc
c001374d:	53                   	push   ebx
c001374e:	e8 ef 81 ff ff       	call   c000b942 <File::close()>
c0013753:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013755:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013758:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001375b:	83 c4 10             	add    esp,0x10
c001375e:	31 c0                	xor    eax,eax
c0013760:	eb 3b                	jmp    c001379d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013762:	83 ec 0c             	sub    esp,0xc
c0013765:	53                   	push   ebx
c0013766:	e8 d7 81 ff ff       	call   c000b942 <File::close()>
c001376b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001376d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013770:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013773:	83 c4 0c             	add    esp,0xc
c0013776:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001377d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013784:	56                   	push   esi
c0013785:	e8 3c fd ff ff       	call   c00134c6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001378a:	89 34 24             	mov    DWORD PTR [esp],esi
c001378d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013791:	e8 4d 43 ff ff       	call   c0007ae3 <free>
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001379d:	81 c4 20 01 00 00    	add    esp,0x120
c00137a3:	5b                   	pop    ebx
c00137a4:	5e                   	pop    esi
c00137a5:	5f                   	pop    edi
c00137a6:	c3                   	ret    

c00137a7 <Reg::getLine(char*, char*, char*)>:
c00137a7:	57                   	push   edi
c00137a8:	56                   	push   esi
c00137a9:	53                   	push   ebx
c00137aa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137b6:	57                   	push   edi
c00137b7:	56                   	push   esi
c00137b8:	53                   	push   ebx
c00137b9:	68 94 20 02 c0       	push   0xc0022094
c00137be:	e8 8f fe ff ff       	call   c0013652 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137c3:	83 c4 10             	add    esp,0x10
c00137c6:	84 c0                	test   al,al
c00137c8:	75 10                	jne    c00137da <Reg::getLine(char*, char*, char*)+0x33>
c00137ca:	57                   	push   edi
c00137cb:	56                   	push   esi
c00137cc:	53                   	push   ebx
c00137cd:	68 b9 20 02 c0       	push   0xc00220b9
c00137d2:	e8 7b fe ff ff       	call   c0013652 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	5b                   	pop    ebx
c00137db:	5e                   	pop    esi
c00137dc:	5f                   	pop    edi
c00137dd:	c3                   	ret    

c00137de <Reg::readInt(char*, char*, int*)>:
c00137de:	55                   	push   ebp
c00137df:	57                   	push   edi
c00137e0:	56                   	push   esi
c00137e1:	53                   	push   ebx
c00137e2:	81 ec f0 00 00 00    	sub    esp,0xf0
c00137e8:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00137ec:	55                   	push   ebp
c00137ed:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00137f4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00137fb:	e8 a7 ff ff ff       	call   c00137a7 <Reg::getLine(char*, char*, char*)>
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	84 c0                	test   al,al
c0013805:	0f 84 b6 00 00 00    	je     c00138c1 <Reg::readInt(char*, char*, int*)+0xe3>
c001380b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013810:	83 fa 2b             	cmp    edx,0x2b
c0013813:	74 0c                	je     c0013821 <Reg::readInt(char*, char*, int*)+0x43>
c0013815:	83 fa 2d             	cmp    edx,0x2d
c0013818:	75 0e                	jne    c0013828 <Reg::readInt(char*, char*, int*)+0x4a>
c001381a:	ba 01 00 00 00       	mov    edx,0x1
c001381f:	eb 0b                	jmp    c001382c <Reg::readInt(char*, char*, int*)+0x4e>
c0013821:	ba 01 00 00 00       	mov    edx,0x1
c0013826:	eb 02                	jmp    c001382a <Reg::readInt(char*, char*, int*)+0x4c>
c0013828:	31 d2                	xor    edx,edx
c001382a:	31 c0                	xor    eax,eax
c001382c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013831:	be 0a 00 00 00       	mov    esi,0xa
c0013836:	75 21                	jne    c0013859 <Reg::readInt(char*, char*, int*)+0x7b>
c0013838:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c001383d:	83 f9 78             	cmp    ecx,0x78
c0013840:	75 0a                	jne    c001384c <Reg::readInt(char*, char*, int*)+0x6e>
c0013842:	83 c2 02             	add    edx,0x2
c0013845:	be 10 00 00 00       	mov    esi,0x10
c001384a:	eb 0d                	jmp    c0013859 <Reg::readInt(char*, char*, int*)+0x7b>
c001384c:	83 f9 62             	cmp    ecx,0x62
c001384f:	75 08                	jne    c0013859 <Reg::readInt(char*, char*, int*)+0x7b>
c0013851:	83 c2 02             	add    edx,0x2
c0013854:	be 02 00 00 00       	mov    esi,0x2
c0013859:	01 d5                	add    ebp,edx
c001385b:	31 d2                	xor    edx,edx
c001385d:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013861:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013865:	85 c9                	test   ecx,ecx
c0013867:	0f 94 c3             	sete   bl
c001386a:	83 f9 0d             	cmp    ecx,0xd
c001386d:	89 df                	mov    edi,ebx
c001386f:	0f 94 c3             	sete   bl
c0013872:	09 df                	or     edi,ebx
c0013874:	89 fb                	mov    ebx,edi
c0013876:	83 e7 01             	and    edi,0x1
c0013879:	75 35                	jne    c00138b0 <Reg::readInt(char*, char*, int*)+0xd2>
c001387b:	0f af d6             	imul   edx,esi
c001387e:	83 fe 10             	cmp    esi,0x10
c0013881:	75 26                	jne    c00138a9 <Reg::readInt(char*, char*, int*)+0xcb>
c0013883:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013887:	83 ef 41             	sub    edi,0x41
c001388a:	89 fb                	mov    ebx,edi
c001388c:	80 fb 05             	cmp    bl,0x5
c001388f:	77 06                	ja     c0013897 <Reg::readInt(char*, char*, int*)+0xb9>
c0013891:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013895:	eb 16                	jmp    c00138ad <Reg::readInt(char*, char*, int*)+0xcf>
c0013897:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001389b:	83 eb 61             	sub    ebx,0x61
c001389e:	80 fb 05             	cmp    bl,0x5
c00138a1:	77 06                	ja     c00138a9 <Reg::readInt(char*, char*, int*)+0xcb>
c00138a3:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00138a7:	eb 04                	jmp    c00138ad <Reg::readInt(char*, char*, int*)+0xcf>
c00138a9:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00138ad:	45                   	inc    ebp
c00138ae:	eb ad                	jmp    c001385d <Reg::readInt(char*, char*, int*)+0x7f>
c00138b0:	84 c0                	test   al,al
c00138b2:	74 02                	je     c00138b6 <Reg::readInt(char*, char*, int*)+0xd8>
c00138b4:	f7 da                	neg    edx
c00138b6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00138bd:	89 10                	mov    DWORD PTR [eax],edx
c00138bf:	88 d8                	mov    al,bl
c00138c1:	81 c4 ec 00 00 00    	add    esp,0xec
c00138c7:	5b                   	pop    ebx
c00138c8:	5e                   	pop    esi
c00138c9:	5f                   	pop    edi
c00138ca:	5d                   	pop    ebp
c00138cb:	c3                   	ret    

c00138cc <Reg::readString(char*, char*, char*, int)>:
c00138cc:	57                   	push   edi
c00138cd:	56                   	push   esi
c00138ce:	53                   	push   ebx
c00138cf:	81 ec d4 00 00 00    	sub    esp,0xd4
c00138d5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00138d9:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00138e0:	57                   	push   edi
c00138e1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00138e8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00138ef:	e8 b3 fe ff ff       	call   c00137a7 <Reg::getLine(char*, char*, char*)>
c00138f4:	83 c4 10             	add    esp,0x10
c00138f7:	84 c0                	test   al,al
c00138f9:	89 c6                	mov    esi,eax
c00138fb:	74 44                	je     c0013941 <Reg::readString(char*, char*, char*, int)+0x75>
c00138fd:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013904:	31 c0                	xor    eax,eax
c0013906:	4a                   	dec    edx
c0013907:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001390a:	84 c9                	test   cl,cl
c001390c:	74 0f                	je     c001391d <Reg::readString(char*, char*, char*, int)+0x51>
c001390e:	39 c2                	cmp    edx,eax
c0013910:	7e 0b                	jle    c001391d <Reg::readString(char*, char*, char*, int)+0x51>
c0013912:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013915:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001391a:	40                   	inc    eax
c001391b:	eb ea                	jmp    c0013907 <Reg::readString(char*, char*, char*, int)+0x3b>
c001391d:	83 ec 0c             	sub    esp,0xc
c0013920:	53                   	push   ebx
c0013921:	e8 5a cc fe ff       	call   c0000580 <strlen>
c0013926:	83 c4 10             	add    esp,0x10
c0013929:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001392e:	75 11                	jne    c0013941 <Reg::readString(char*, char*, char*, int)+0x75>
c0013930:	83 ec 0c             	sub    esp,0xc
c0013933:	53                   	push   ebx
c0013934:	e8 47 cc fe ff       	call   c0000580 <strlen>
c0013939:	83 c4 10             	add    esp,0x10
c001393c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013941:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013947:	89 f0                	mov    eax,esi
c0013949:	5b                   	pop    ebx
c001394a:	5e                   	pop    esi
c001394b:	5f                   	pop    edi
c001394c:	c3                   	ret    

c001394d <Reg::readBool(char*, char*, bool*)>:
c001394d:	83 ec 20             	sub    esp,0x20
c0013950:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013954:	50                   	push   eax
c0013955:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013959:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001395d:	e8 7c fe ff ff       	call   c00137de <Reg::readInt(char*, char*, int*)>
c0013962:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013966:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001396b:	0f 95 02             	setne  BYTE PTR [edx]
c001396e:	83 c4 2c             	add    esp,0x2c
c0013971:	c3                   	ret    

c0013972 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013972:	53                   	push   ebx
c0013973:	83 ec 1c             	sub    esp,0x1c
c0013976:	8d 44 24 13          	lea    eax,[esp+0x13]
c001397a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001397e:	50                   	push   eax
c001397f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013983:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013987:	e8 c1 ff ff ff       	call   c001394d <Reg::readBool(char*, char*, bool*)>
c001398c:	83 c4 10             	add    esp,0x10
c001398f:	84 c0                	test   al,al
c0013991:	74 04                	je     c0013997 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013993:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013997:	83 c4 18             	add    esp,0x18
c001399a:	88 d8                	mov    al,bl
c001399c:	5b                   	pop    ebx
c001399d:	c3                   	ret    

c001399e <Reg::readIntWithDefault(char*, char*, int)>:
c001399e:	53                   	push   ebx
c001399f:	83 ec 1c             	sub    esp,0x1c
c00139a2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139a6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00139aa:	50                   	push   eax
c00139ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b3:	e8 26 fe ff ff       	call   c00137de <Reg::readInt(char*, char*, int*)>
c00139b8:	83 c4 10             	add    esp,0x10
c00139bb:	84 c0                	test   al,al
c00139bd:	74 04                	je     c00139c3 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00139bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00139c3:	83 c4 18             	add    esp,0x18
c00139c6:	89 d8                	mov    eax,ebx
c00139c8:	5b                   	pop    ebx
c00139c9:	c3                   	ret    

c00139ca <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00139ca:	57                   	push   edi
c00139cb:	56                   	push   esi
c00139cc:	53                   	push   ebx
c00139cd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00139d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00139d9:	56                   	push   esi
c00139da:	57                   	push   edi
c00139db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e3:	e8 e4 fe ff ff       	call   c00138cc <Reg::readString(char*, char*, char*, int)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	84 c0                	test   al,al
c00139ed:	75 16                	jne    c0013a05 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00139ef:	50                   	push   eax
c00139f0:	56                   	push   esi
c00139f1:	6a 00                	push   0x0
c00139f3:	57                   	push   edi
c00139f4:	e8 f7 ca fe ff       	call   c00004f0 <memset>
c00139f9:	8d 4e ff             	lea    ecx,[esi-0x1]
c00139fc:	89 de                	mov    esi,ebx
c00139fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a00:	83 c4 10             	add    esp,0x10
c0013a03:	89 df                	mov    edi,ebx
c0013a05:	5b                   	pop    ebx
c0013a06:	89 f8                	mov    eax,edi
c0013a08:	5e                   	pop    esi
c0013a09:	5f                   	pop    edi
c0013a0a:	c3                   	ret    

c0013a0b <SysEject(regs*)>:
c0013a0b:	83 ec 0c             	sub    esp,0xc
c0013a0e:	83 ca ff             	or     edx,0xffffffff
c0013a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a15:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013a18:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013a1d:	83 e9 41             	sub    ecx,0x41
c0013a20:	83 f9 19             	cmp    ecx,0x19
c0013a23:	77 18                	ja     c0013a3d <SysEject(regs*)+0x32>
c0013a25:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013a2c:	85 c9                	test   ecx,ecx
c0013a2e:	74 0d                	je     c0013a3d <SysEject(regs*)+0x32>
c0013a30:	83 ec 0c             	sub    esp,0xc
c0013a33:	51                   	push   ecx
c0013a34:	e8 8b a0 ff ff       	call   c000dac4 <LogicalDisk::eject()>
c0013a39:	83 c4 10             	add    esp,0x10
c0013a3c:	99                   	cdq    
c0013a3d:	83 c4 0c             	add    esp,0xc
c0013a40:	c3                   	ret    

c0013a41 <SysExit(regs*)>:
c0013a41:	83 ec 18             	sub    esp,0x18
c0013a44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a48:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a4b:	e8 10 2b 00 00       	call   c0016560 <terminateTask(int)>
c0013a50:	83 c8 ff             	or     eax,0xffffffff
c0013a53:	83 c4 1c             	add    esp,0x1c
c0013a56:	89 c2                	mov    edx,eax
c0013a58:	c3                   	ret    

c0013a59 <SysGetCwd(regs*)>:
c0013a59:	83 ec 10             	sub    esp,0x10
c0013a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a60:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013a63:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a6b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a6e:	e8 e5 7a ff ff       	call   c000b558 <Fs::getcwd(Process*, char*, int)>
c0013a73:	83 c4 1c             	add    esp,0x1c
c0013a76:	99                   	cdq    
c0013a77:	c3                   	ret    

c0013a78 <SysGetPID(regs*)>:
c0013a78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a7d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a82:	99                   	cdq    
c0013a83:	c3                   	ret    

c0013a84 <SysGetRAMData(regs*)>:
c0013a84:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013a8e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013a94:	99                   	cdq    
c0013a95:	f7 f9                	idiv   ecx
c0013a97:	c1 e0 18             	shl    eax,0x18
c0013a9a:	09 c8                	or     eax,ecx
c0013a9c:	99                   	cdq    
c0013a9d:	c3                   	ret    

c0013a9e <SysGetVGAPtr(regs*)>:
c0013a9e:	55                   	push   ebp
c0013a9f:	57                   	push   edi
c0013aa0:	56                   	push   esi
c0013aa1:	53                   	push   ebx
c0013aa2:	83 ec 18             	sub    esp,0x18
c0013aa5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013aa9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013aac:	e8 7b 25 00 00       	call   c001602c <Thr::processFromPID(int)>
c0013ab1:	83 c4 10             	add    esp,0x10
c0013ab4:	89 c1                	mov    ecx,eax
c0013ab6:	b8 01 00 00 00       	mov    eax,0x1
c0013abb:	85 c9                	test   ecx,ecx
c0013abd:	74 57                	je     c0013b16 <SysGetVGAPtr(regs*)+0x78>
c0013abf:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013ac3:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013ac9:	74 0c                	je     c0013ad7 <SysGetVGAPtr(regs*)+0x39>
c0013acb:	83 ec 0c             	sub    esp,0xc
c0013ace:	55                   	push   ebp
c0013acf:	e8 9b 4c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013ad4:	83 c4 10             	add    esp,0x10
c0013ad7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013ada:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013adf:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013ae2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ae4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013ae7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013aea:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013af0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013af3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013af6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013afc:	50                   	push   eax
c0013afd:	50                   	push   eax
c0013afe:	68 d4 20 02 c0       	push   0xc00220d4
c0013b03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b06:	05 a8 0f 00 00       	add    eax,0xfa8
c0013b0b:	50                   	push   eax
c0013b0c:	e8 3f cb fe ff       	call   c0000650 <strcpy>
c0013b11:	83 c4 10             	add    esp,0x10
c0013b14:	31 c0                	xor    eax,eax
c0013b16:	83 c4 0c             	add    esp,0xc
c0013b19:	31 d2                	xor    edx,edx
c0013b1b:	5b                   	pop    ebx
c0013b1c:	5e                   	pop    esi
c0013b1d:	5f                   	pop    edi
c0013b1e:	5d                   	pop    ebp
c0013b1f:	c3                   	ret    

c0013b20 <SysKill(regs*)>:
c0013b20:	53                   	push   ebx
c0013b21:	83 ec 08             	sub    esp,0x8
c0013b24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b28:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013b2c:	75 16                	jne    c0013b44 <SysKill(regs*)+0x24>
c0013b2e:	83 ec 0c             	sub    esp,0xc
c0013b31:	68 de 20 02 c0       	push   0xc00220de
c0013b36:	e8 a6 d7 ff ff       	call   c00112e1 <KePanic(char const*)>
c0013b3b:	83 c4 10             	add    esp,0x10
c0013b3e:	e9 89 00 00 00       	jmp    c0013bcc <SysKill(regs*)+0xac>
c0013b43:	90                   	nop
c0013b44:	83 ec 0c             	sub    esp,0xc
c0013b47:	68 e4 96 02 c0       	push   0xc00296e4
c0013b4c:	e8 3b bd 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b51:	8d 76 00             	lea    esi,[esi+0x0]
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	85 c0                	test   eax,eax
c0013b59:	74 19                	je     c0013b74 <SysKill(regs*)+0x54>
c0013b5b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b5e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b61:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b63:	74 33                	je     c0013b98 <SysKill(regs*)+0x78>
c0013b65:	52                   	push   edx
c0013b66:	52                   	push   edx
c0013b67:	50                   	push   eax
c0013b68:	68 e4 96 02 c0       	push   0xc00296e4
c0013b6d:	e8 3a c0 00 00       	call   c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b72:	eb e0                	jmp    c0013b54 <SysKill(regs*)+0x34>
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	68 d8 96 02 c0       	push   0xc00296d8
c0013b7c:	e8 0b bd 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b81:	8d 76 00             	lea    esi,[esi+0x0]
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	85 c0                	test   eax,eax
c0013b89:	74 41                	je     c0013bcc <SysKill(regs*)+0xac>
c0013b8b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b8e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b91:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b93:	75 27                	jne    c0013bbc <SysKill(regs*)+0x9c>
c0013b95:	8d 76 00             	lea    esi,[esi+0x0]
c0013b98:	51                   	push   ecx
c0013b99:	51                   	push   ecx
c0013b9a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013b9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ba2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ba5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013bab:	e8 cf db ff ff       	call   c001177f <KeRaiseSignal(SigHandlerBlock*, int)>
c0013bb0:	83 c4 10             	add    esp,0x10
c0013bb3:	31 c0                	xor    eax,eax
c0013bb5:	31 d2                	xor    edx,edx
c0013bb7:	eb 1b                	jmp    c0013bd4 <SysKill(regs*)+0xb4>
c0013bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bbc:	52                   	push   edx
c0013bbd:	52                   	push   edx
c0013bbe:	50                   	push   eax
c0013bbf:	68 d8 96 02 c0       	push   0xc00296d8
c0013bc4:	e8 e3 bf 00 00       	call   c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013bc9:	eb b9                	jmp    c0013b84 <SysKill(regs*)+0x64>
c0013bcb:	90                   	nop
c0013bcc:	83 c8 ff             	or     eax,0xffffffff
c0013bcf:	89 c2                	mov    edx,eax
c0013bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd4:	83 c4 08             	add    esp,0x8
c0013bd7:	5b                   	pop    ebx
c0013bd8:	c3                   	ret    

c0013bd9 <SysLoadDLL(regs*)>:
c0013bd9:	56                   	push   esi
c0013bda:	31 d2                	xor    edx,edx
c0013bdc:	53                   	push   ebx
c0013bdd:	b8 01 00 00 00       	mov    eax,0x1
c0013be2:	51                   	push   ecx
c0013be3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013be7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013beb:	0f 84 8c 00 00 00    	je     c0013c7d <SysLoadDLL(regs*)+0xa4>
c0013bf1:	83 ec 0c             	sub    esp,0xc
c0013bf4:	68 14 01 00 00       	push   0x114
c0013bf9:	e8 d5 3e ff ff       	call   c0007ad3 <malloc>
c0013bfe:	83 c4 0c             	add    esp,0xc
c0013c01:	89 c3                	mov    ebx,eax
c0013c03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c08:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c0b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c0e:	53                   	push   ebx
c0013c0f:	e8 08 7c ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	31 d2                	xor    edx,edx
c0013c19:	85 db                	test   ebx,ebx
c0013c1b:	b8 02 00 00 00       	mov    eax,0x2
c0013c20:	74 5b                	je     c0013c7d <SysLoadDLL(regs*)+0xa4>
c0013c22:	83 ec 0c             	sub    esp,0xc
c0013c25:	53                   	push   ebx
c0013c26:	e8 7d 7f ff ff       	call   c000bba8 <File::exists()>
c0013c2b:	83 c4 10             	add    esp,0x10
c0013c2e:	84 c0                	test   al,al
c0013c30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c32:	75 11                	jne    c0013c45 <SysLoadDLL(regs*)+0x6c>
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	53                   	push   ebx
c0013c38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	b8 03 00 00 00       	mov    eax,0x3
c0013c43:	eb 36                	jmp    c0013c7b <SysLoadDLL(regs*)+0xa2>
c0013c45:	83 ec 0c             	sub    esp,0xc
c0013c48:	53                   	push   ebx
c0013c49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c4c:	58                   	pop    eax
c0013c4d:	5a                   	pop    edx
c0013c4e:	6a 00                	push   0x0
c0013c50:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c53:	e8 1c 15 00 00       	call   c0015174 <Thr::loadDLL(char const*, bool)>
c0013c58:	83 c4 10             	add    esp,0x10
c0013c5b:	31 d2                	xor    edx,edx
c0013c5d:	89 c1                	mov    ecx,eax
c0013c5f:	b8 04 00 00 00       	mov    eax,0x4
c0013c64:	85 c9                	test   ecx,ecx
c0013c66:	74 15                	je     c0013c7d <SysLoadDLL(regs*)+0xa4>
c0013c68:	53                   	push   ebx
c0013c69:	53                   	push   ebx
c0013c6a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013c70:	51                   	push   ecx
c0013c71:	e8 3e 17 00 00       	call   c00153b4 <Thr::executeDLL(unsigned long, void*)>
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	31 c0                	xor    eax,eax
c0013c7b:	31 d2                	xor    edx,edx
c0013c7d:	59                   	pop    ecx
c0013c7e:	5b                   	pop    ebx
c0013c7f:	5e                   	pop    esi
c0013c80:	c3                   	ret    

c0013c81 <SysRead(regs*)>:
c0013c81:	57                   	push   edi
c0013c82:	56                   	push   esi
c0013c83:	53                   	push   ebx
c0013c84:	83 ec 10             	sub    esp,0x10
c0013c87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c8e:	83 f8 02             	cmp    eax,0x2
c0013c91:	77 10                	ja     c0013ca3 <SysRead(regs*)+0x22>
c0013c93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c9b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ca1:	eb 0e                	jmp    c0013cb1 <SysRead(regs*)+0x30>
c0013ca3:	83 ec 0c             	sub    esp,0xc
c0013ca6:	50                   	push   eax
c0013ca7:	e8 ef 57 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013cac:	83 c4 10             	add    esp,0x10
c0013caf:	89 c1                	mov    ecx,eax
c0013cb1:	83 c8 ff             	or     eax,0xffffffff
c0013cb4:	85 c9                	test   ecx,ecx
c0013cb6:	89 c2                	mov    edx,eax
c0013cb8:	74 28                	je     c0013ce2 <SysRead(regs*)+0x61>
c0013cba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cc2:	83 ec 0c             	sub    esp,0xc
c0013cc5:	31 ff                	xor    edi,edi
c0013cc7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ccb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ccd:	52                   	push   edx
c0013cce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cd1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013cd4:	57                   	push   edi
c0013cd5:	56                   	push   esi
c0013cd6:	51                   	push   ecx
c0013cd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013cde:	83 c4 20             	add    esp,0x20
c0013ce1:	99                   	cdq    
c0013ce2:	83 c4 10             	add    esp,0x10
c0013ce5:	5b                   	pop    ebx
c0013ce6:	5e                   	pop    esi
c0013ce7:	5f                   	pop    edi
c0013ce8:	c3                   	ret    

c0013ce9 <SysRegisterSignal(regs*)>:
c0013ce9:	83 ec 18             	sub    esp,0x18
c0013cec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf0:	6a 00                	push   0x0
c0013cf2:	6a 00                	push   0x0
c0013cf4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013cf7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013cfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d02:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d08:	e8 3c da ff ff       	call   c0011749 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013d0d:	83 c4 2c             	add    esp,0x2c
c0013d10:	99                   	cdq    
c0013d11:	c3                   	ret    

c0013d12 <SysRegistryGetTypeFromPath(regs*)>:
c0013d12:	57                   	push   edi
c0013d13:	56                   	push   esi
c0013d14:	53                   	push   ebx
c0013d15:	81 ec 38 01 00 00    	sub    esp,0x138
c0013d1b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013d22:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d25:	68 ff 20 02 c0       	push   0xc00220ff
c0013d2a:	e8 db 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d2f:	5a                   	pop    edx
c0013d30:	59                   	pop    ecx
c0013d31:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d34:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d37:	e8 34 f6 ff ff       	call   c0013370 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d3c:	5f                   	pop    edi
c0013d3d:	5a                   	pop    edx
c0013d3e:	89 c6                	mov    esi,eax
c0013d40:	50                   	push   eax
c0013d41:	68 1f 21 02 c0       	push   0xc002211f
c0013d46:	e8 bf 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	85 f6                	test   esi,esi
c0013d50:	74 28                	je     c0013d7a <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013d52:	50                   	push   eax
c0013d53:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d57:	57                   	push   edi
c0013d58:	56                   	push   esi
c0013d59:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d5c:	e8 f4 f1 ff ff       	call   c0012f55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d61:	83 c4 0c             	add    esp,0xc
c0013d64:	57                   	push   edi
c0013d65:	50                   	push   eax
c0013d66:	89 c3                	mov    ebx,eax
c0013d68:	68 27 21 02 c0       	push   0xc0022127
c0013d6d:	e8 98 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d72:	89 d8                	mov    eax,ebx
c0013d74:	83 c4 10             	add    esp,0x10
c0013d77:	99                   	cdq    
c0013d78:	eb 05                	jmp    c0013d7f <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013d7a:	83 c8 ff             	or     eax,0xffffffff
c0013d7d:	89 c2                	mov    edx,eax
c0013d7f:	81 c4 30 01 00 00    	add    esp,0x130
c0013d85:	5b                   	pop    ebx
c0013d86:	5e                   	pop    esi
c0013d87:	5f                   	pop    edi
c0013d88:	c3                   	ret    

c0013d89 <SysRegistryReadExtent(regs*)>:
c0013d89:	83 ec 1c             	sub    esp,0x1c
c0013d8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d90:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013d93:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013d96:	85 c0                	test   eax,eax
c0013d98:	79 1f                	jns    c0013db9 <SysRegistryReadExtent(regs*)+0x30>
c0013d9a:	52                   	push   edx
c0013d9b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013da0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013da4:	52                   	push   edx
c0013da5:	50                   	push   eax
c0013da6:	51                   	push   ecx
c0013da7:	e8 9b f0 ff ff       	call   c0012e47 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013dac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	eb 14                	jmp    c0013dcd <SysRegistryReadExtent(regs*)+0x44>
c0013db9:	83 ec 04             	sub    esp,0x4
c0013dbc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013dbf:	50                   	push   eax
c0013dc0:	51                   	push   ecx
c0013dc1:	e8 1f eb ff ff       	call   c00128e5 <CmGetString(Reghive_Tag*, int, char*)>
c0013dc6:	83 c4 10             	add    esp,0x10
c0013dc9:	31 c0                	xor    eax,eax
c0013dcb:	31 d2                	xor    edx,edx
c0013dcd:	83 c4 1c             	add    esp,0x1c
c0013dd0:	c3                   	ret    

c0013dd1 <SysRegistryPathToExtentLookup(regs*)>:
c0013dd1:	53                   	push   ebx
c0013dd2:	83 ec 10             	sub    esp,0x10
c0013dd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013dd9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ddc:	68 3d 21 02 c0       	push   0xc002213d
c0013de1:	e8 24 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013de6:	58                   	pop    eax
c0013de7:	5a                   	pop    edx
c0013de8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013deb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dee:	e8 7d f5 ff ff       	call   c0013370 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013df3:	83 c4 18             	add    esp,0x18
c0013df6:	5b                   	pop    ebx
c0013df7:	99                   	cdq    
c0013df8:	c3                   	ret    

c0013df9 <SysRegistryEnterDirectory(regs*)>:
c0013df9:	53                   	push   ebx
c0013dfa:	83 ec 10             	sub    esp,0x10
c0013dfd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e01:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e04:	68 60 21 02 c0       	push   0xc0022160
c0013e09:	e8 fc 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e0e:	58                   	pop    eax
c0013e0f:	5a                   	pop    edx
c0013e10:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e13:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e16:	e8 41 eb ff ff       	call   c001295c <CmEnterDirectory(Reghive_Tag*, int)>
c0013e1b:	83 c4 18             	add    esp,0x18
c0013e1e:	5b                   	pop    ebx
c0013e1f:	99                   	cdq    
c0013e20:	c3                   	ret    

c0013e21 <SysRegistryGetNext(regs*)>:
c0013e21:	53                   	push   ebx
c0013e22:	83 ec 10             	sub    esp,0x10
c0013e25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e29:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e2c:	68 7e 21 02 c0       	push   0xc002217e
c0013e31:	e8 d4 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e36:	58                   	pop    eax
c0013e37:	5a                   	pop    edx
c0013e38:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e3b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e3e:	e8 58 eb ff ff       	call   c001299b <CmGetNext(Reghive_Tag*, int)>
c0013e43:	83 c4 18             	add    esp,0x18
c0013e46:	5b                   	pop    ebx
c0013e47:	99                   	cdq    
c0013e48:	c3                   	ret    

c0013e49 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013e49:	57                   	push   edi
c0013e4a:	56                   	push   esi
c0013e4b:	53                   	push   ebx
c0013e4c:	81 ec 34 01 00 00    	sub    esp,0x134
c0013e52:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013e59:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e5d:	57                   	push   edi
c0013e5e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013e61:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013e64:	e8 ec f0 ff ff       	call   c0012f55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e69:	89 c3                	mov    ebx,eax
c0013e6b:	58                   	pop    eax
c0013e6c:	5a                   	pop    edx
c0013e6d:	57                   	push   edi
c0013e6e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013e71:	e8 da c7 fe ff       	call   c0000650 <strcpy>
c0013e76:	81 c4 40 01 00 00    	add    esp,0x140
c0013e7c:	89 d8                	mov    eax,ebx
c0013e7e:	5b                   	pop    ebx
c0013e7f:	99                   	cdq    
c0013e80:	5e                   	pop    esi
c0013e81:	5f                   	pop    edi
c0013e82:	c3                   	ret    

c0013e83 <SysRegistryOpen(regs*)>:
c0013e83:	83 ec 18             	sub    esp,0x18
c0013e86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e8d:	e8 e3 e8 ff ff       	call   c0012775 <CmOpen(char const*)>
c0013e92:	83 c4 1c             	add    esp,0x1c
c0013e95:	99                   	cdq    
c0013e96:	c3                   	ret    

c0013e97 <SysRegistryClose(regs*)>:
c0013e97:	83 ec 18             	sub    esp,0x18
c0013e9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e9e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ea1:	e8 ed e9 ff ff       	call   c0012893 <CmClose(Reghive_Tag*)>
c0013ea6:	31 c0                	xor    eax,eax
c0013ea8:	31 d2                	xor    edx,edx
c0013eaa:	83 c4 1c             	add    esp,0x1c
c0013ead:	c3                   	ret    

c0013eae <SysSbrk(regs*)>:
c0013eae:	56                   	push   esi
c0013eaf:	53                   	push   ebx
c0013eb0:	50                   	push   eax
c0013eb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013eb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013eba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ebd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013ec0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013ec6:	85 db                	test   ebx,ebx
c0013ec8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013ecb:	74 02                	je     c0013ecf <SysSbrk(regs*)+0x21>
c0013ecd:	79 06                	jns    c0013ed5 <SysSbrk(regs*)+0x27>
c0013ecf:	89 f0                	mov    eax,esi
c0013ed1:	31 d2                	xor    edx,edx
c0013ed3:	eb 2a                	jmp    c0013eff <SysSbrk(regs*)+0x51>
c0013ed5:	83 c8 ff             	or     eax,0xffffffff
c0013ed8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013ede:	89 c2                	mov    edx,eax
c0013ee0:	77 1d                	ja     c0013eff <SysSbrk(regs*)+0x51>
c0013ee2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013ee8:	50                   	push   eax
c0013ee9:	68 07 0c 00 00       	push   0xc07
c0013eee:	c1 ea 0c             	shr    edx,0xc
c0013ef1:	52                   	push   edx
c0013ef2:	51                   	push   ecx
c0013ef3:	e8 0e 5f ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013ef8:	89 f0                	mov    eax,esi
c0013efa:	31 d2                	xor    edx,edx
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	59                   	pop    ecx
c0013f00:	5b                   	pop    ebx
c0013f01:	5e                   	pop    esi
c0013f02:	c3                   	ret    

c0013f03 <SysSetCwd(regs*)>:
c0013f03:	83 ec 14             	sub    esp,0x14
c0013f06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f0a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f12:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f15:	e8 2d 7d ff ff       	call   c000bc47 <Fs::setcwd(Process*, char*)>
c0013f1a:	83 c4 1c             	add    esp,0x1c
c0013f1d:	99                   	cdq    
c0013f1e:	c3                   	ret    

c0013f1f <SysSetTime(regs*)>:
c0013f1f:	55                   	push   ebp
c0013f20:	31 c9                	xor    ecx,ecx
c0013f22:	57                   	push   edi
c0013f23:	bd 0c 00 00 00       	mov    ebp,0xc
c0013f28:	56                   	push   esi
c0013f29:	53                   	push   ebx
c0013f2a:	31 db                	xor    ebx,ebx
c0013f2c:	83 ec 10             	sub    esp,0x10
c0013f2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f33:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013f36:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013f39:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013f3c:	89 c2                	mov    edx,eax
c0013f3e:	c1 e8 05             	shr    eax,0x5
c0013f41:	83 e2 1f             	and    edx,0x1f
c0013f44:	42                   	inc    edx
c0013f45:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013f4b:	c1 e7 10             	shl    edi,0x10
c0013f4e:	88 d1                	mov    cl,dl
c0013f50:	31 d2                	xor    edx,edx
c0013f52:	f7 f5                	div    ebp
c0013f54:	89 dd                	mov    ebp,ebx
c0013f56:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013f5c:	88 d5                	mov    ch,dl
c0013f5e:	31 d2                	xor    edx,edx
c0013f60:	0f b7 c1             	movzx  eax,cx
c0013f63:	09 f8                	or     eax,edi
c0013f65:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f6a:	89 c1                	mov    ecx,eax
c0013f6c:	89 f0                	mov    eax,esi
c0013f6e:	f7 f7                	div    edi
c0013f70:	c1 e2 10             	shl    edx,0x10
c0013f73:	09 d5                	or     ebp,edx
c0013f75:	31 d2                	xor    edx,edx
c0013f77:	f7 f7                	div    edi
c0013f79:	89 eb                	mov    ebx,ebp
c0013f7b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f80:	89 f0                	mov    eax,esi
c0013f82:	88 d7                	mov    bh,dl
c0013f84:	31 d2                	xor    edx,edx
c0013f86:	f7 f7                	div    edi
c0013f88:	bf 18 00 00 00       	mov    edi,0x18
c0013f8d:	31 d2                	xor    edx,edx
c0013f8f:	f7 f7                	div    edi
c0013f91:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013f96:	88 d3                	mov    bl,dl
c0013f98:	53                   	push   ebx
c0013f99:	51                   	push   ecx
c0013f9a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013fa0:	e8 b3 84 ff ff       	call   c000c458 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013fa5:	83 c4 1c             	add    esp,0x1c
c0013fa8:	31 d2                	xor    edx,edx
c0013faa:	5b                   	pop    ebx
c0013fab:	5e                   	pop    esi
c0013fac:	83 f0 01             	xor    eax,0x1
c0013faf:	5f                   	pop    edi
c0013fb0:	0f b6 c0             	movzx  eax,al
c0013fb3:	5d                   	pop    ebp
c0013fb4:	c3                   	ret    

c0013fb5 <SysTimezone(regs*)>:
c0013fb5:	53                   	push   ebx
c0013fb6:	83 ec 08             	sub    esp,0x8
c0013fb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fbd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013fc1:	75 17                	jne    c0013fda <SysTimezone(regs*)+0x25>
c0013fc3:	83 ec 0c             	sub    esp,0xc
c0013fc6:	68 95 21 02 c0       	push   0xc0022195
c0013fcb:	e8 3a 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013fd0:	83 c8 ff             	or     eax,0xffffffff
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	89 c2                	mov    edx,eax
c0013fd8:	eb 20                	jmp    c0013ffa <SysTimezone(regs*)+0x45>
c0013fda:	83 ec 0c             	sub    esp,0xc
c0013fdd:	68 aa 21 02 c0       	push   0xc00221aa
c0013fe2:	e8 23 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013fe7:	58                   	pop    eax
c0013fe8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013feb:	e8 cc 81 ff ff       	call   c000c1bc <User::loadClockSettings(int)>
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	b8 01 00 00 00       	mov    eax,0x1
c0013ff8:	31 d2                	xor    edx,edx
c0013ffa:	83 c4 08             	add    esp,0x8
c0013ffd:	5b                   	pop    ebx
c0013ffe:	c3                   	ret    

c0013fff <SysTruncate(regs*)>:
c0013fff:	55                   	push   ebp
c0014000:	57                   	push   edi
c0014001:	31 ff                	xor    edi,edi
c0014003:	56                   	push   esi
c0014004:	53                   	push   ebx
c0014005:	83 ec 0c             	sub    esp,0xc
c0014008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001400f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014013:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014016:	89 ce                	mov    esi,ecx
c0014018:	0f 84 9a 00 00 00    	je     c00140b8 <SysTruncate(regs*)+0xb9>
c001401e:	83 ec 0c             	sub    esp,0xc
c0014021:	68 14 01 00 00       	push   0x114
c0014026:	e8 a8 3a ff ff       	call   c0007ad3 <malloc>
c001402b:	83 c4 0c             	add    esp,0xc
c001402e:	89 c3                	mov    ebx,eax
c0014030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014035:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014038:	55                   	push   ebp
c0014039:	53                   	push   ebx
c001403a:	e8 dd 77 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	31 d2                	xor    edx,edx
c0014044:	85 db                	test   ebx,ebx
c0014046:	b8 03 00 00 00       	mov    eax,0x3
c001404b:	0f 84 a2 00 00 00    	je     c00140f3 <SysTruncate(regs*)+0xf4>
c0014051:	51                   	push   ecx
c0014052:	51                   	push   ecx
c0014053:	6a 02                	push   0x2
c0014055:	53                   	push   ebx
c0014056:	e8 89 78 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	85 c0                	test   eax,eax
c0014060:	74 13                	je     c0014075 <SysTruncate(regs*)+0x76>
c0014062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	53                   	push   ebx
c0014068:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	b8 04 00 00 00       	mov    eax,0x4
c0014073:	eb 7c                	jmp    c00140f1 <SysTruncate(regs*)+0xf2>
c0014075:	52                   	push   edx
c0014076:	57                   	push   edi
c0014077:	56                   	push   esi
c0014078:	53                   	push   ebx
c0014079:	e8 7a 79 ff ff       	call   c000b9f8 <File::truncate(unsigned long long)>
c001407e:	83 c4 10             	add    esp,0x10
c0014081:	85 c0                	test   eax,eax
c0014083:	74 1b                	je     c00140a0 <SysTruncate(regs*)+0xa1>
c0014085:	83 ec 0c             	sub    esp,0xc
c0014088:	53                   	push   ebx
c0014089:	e8 b4 78 ff ff       	call   c000b942 <File::close()>
c001408e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014093:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014096:	83 c4 10             	add    esp,0x10
c0014099:	b8 05 00 00 00       	mov    eax,0x5
c001409e:	eb 51                	jmp    c00140f1 <SysTruncate(regs*)+0xf2>
c00140a0:	83 ec 0c             	sub    esp,0xc
c00140a3:	53                   	push   ebx
c00140a4:	e8 99 78 ff ff       	call   c000b942 <File::close()>
c00140a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140b1:	83 c4 10             	add    esp,0x10
c00140b4:	31 c0                	xor    eax,eax
c00140b6:	eb 39                	jmp    c00140f1 <SysTruncate(regs*)+0xf2>
c00140b8:	31 d2                	xor    edx,edx
c00140ba:	83 fd 02             	cmp    ebp,0x2
c00140bd:	b8 01 00 00 00       	mov    eax,0x1
c00140c2:	7e 2f                	jle    c00140f3 <SysTruncate(regs*)+0xf4>
c00140c4:	83 ec 0c             	sub    esp,0xc
c00140c7:	51                   	push   ecx
c00140c8:	e8 ce 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140cd:	83 c4 10             	add    esp,0x10
c00140d0:	31 d2                	xor    edx,edx
c00140d2:	89 c1                	mov    ecx,eax
c00140d4:	b8 02 00 00 00       	mov    eax,0x2
c00140d9:	85 c9                	test   ecx,ecx
c00140db:	74 16                	je     c00140f3 <SysTruncate(regs*)+0xf4>
c00140dd:	50                   	push   eax
c00140de:	57                   	push   edi
c00140df:	56                   	push   esi
c00140e0:	51                   	push   ecx
c00140e1:	e8 12 79 ff ff       	call   c000b9f8 <File::truncate(unsigned long long)>
c00140e6:	83 c4 10             	add    esp,0x10
c00140e9:	85 c0                	test   eax,eax
c00140eb:	0f 95 c0             	setne  al
c00140ee:	0f b6 c0             	movzx  eax,al
c00140f1:	31 d2                	xor    edx,edx
c00140f3:	83 c4 0c             	add    esp,0xc
c00140f6:	5b                   	pop    ebx
c00140f7:	5e                   	pop    esi
c00140f8:	5f                   	pop    edi
c00140f9:	5d                   	pop    ebp
c00140fa:	c3                   	ret    

c00140fb <SysWrite(regs*)>:
c00140fb:	57                   	push   edi
c00140fc:	56                   	push   esi
c00140fd:	53                   	push   ebx
c00140fe:	83 ec 10             	sub    esp,0x10
c0014101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014105:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014108:	83 f8 02             	cmp    eax,0x2
c001410b:	77 10                	ja     c001411d <SysWrite(regs*)+0x22>
c001410d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014112:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014115:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001411b:	eb 0e                	jmp    c001412b <SysWrite(regs*)+0x30>
c001411d:	83 ec 0c             	sub    esp,0xc
c0014120:	50                   	push   eax
c0014121:	e8 75 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014126:	83 c4 10             	add    esp,0x10
c0014129:	89 c1                	mov    ecx,eax
c001412b:	83 c8 ff             	or     eax,0xffffffff
c001412e:	85 c9                	test   ecx,ecx
c0014130:	89 c2                	mov    edx,eax
c0014132:	74 28                	je     c001415c <SysWrite(regs*)+0x61>
c0014134:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001413c:	83 ec 0c             	sub    esp,0xc
c001413f:	31 ff                	xor    edi,edi
c0014141:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014145:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014147:	52                   	push   edx
c0014148:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001414b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001414e:	57                   	push   edi
c001414f:	56                   	push   esi
c0014150:	51                   	push   ecx
c0014151:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014154:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014158:	83 c4 20             	add    esp,0x20
c001415b:	99                   	cdq    
c001415c:	83 c4 10             	add    esp,0x10
c001415f:	5b                   	pop    ebx
c0014160:	5e                   	pop    esi
c0014161:	5f                   	pop    edi
c0014162:	c3                   	ret    

c0014163 <SysWsbe(regs*)>:
c0014163:	57                   	push   edi
c0014164:	b9 0b 00 00 00       	mov    ecx,0xb
c0014169:	56                   	push   esi
c001416a:	be e9 21 02 c0       	mov    esi,0xc00221e9
c001416f:	53                   	push   ebx
c0014170:	83 ec 30             	sub    esp,0x30
c0014173:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014177:	fc                   	cld    
c0014178:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014186:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014189:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001418f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014191:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014194:	57                   	push   edi
c0014195:	e8 e6 c3 fe ff       	call   c0000580 <strlen>
c001419a:	5a                   	pop    edx
c001419b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001419f:	52                   	push   edx
c00141a0:	31 d2                	xor    edx,edx
c00141a2:	57                   	push   edi
c00141a3:	52                   	push   edx
c00141a4:	50                   	push   eax
c00141a5:	56                   	push   esi
c00141a6:	ff d3                	call   ebx
c00141a8:	83 c4 14             	add    esp,0x14
c00141ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00141af:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141b2:	e8 a9 23 00 00       	call   c0016560 <terminateTask(int)>
c00141b7:	83 c4 40             	add    esp,0x40
c00141ba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141bf:	5b                   	pop    ebx
c00141c0:	31 d2                	xor    edx,edx
c00141c2:	5e                   	pop    esi
c00141c3:	5f                   	pop    edi
c00141c4:	c3                   	ret    

c00141c5 <SysYield(regs*)>:
c00141c5:	83 ec 0c             	sub    esp,0xc
c00141c8:	fa                   	cli    
c00141c9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00141cf:	e8 0c 1a 00 00       	call   c0015be0 <schedule()>
c00141d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00141d9:	48                   	dec    eax
c00141da:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00141df:	75 01                	jne    c00141e2 <SysYield(regs*)+0x1d>
c00141e1:	fb                   	sti    
c00141e2:	31 c0                	xor    eax,eax
c00141e4:	31 d2                	xor    edx,edx
c00141e6:	83 c4 0c             	add    esp,0xc
c00141e9:	c3                   	ret    

c00141ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00141ea:	55                   	push   ebp
c00141eb:	57                   	push   edi
c00141ec:	56                   	push   esi
c00141ed:	53                   	push   ebx
c00141ee:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00141f4:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00141ff:	74 3b                	je     c001423c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014201:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014209:	74 31                	je     c001423c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001420b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014213:	75 27                	jne    c001423c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014215:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001421c:	05 00 10 00 00       	add    eax,0x1000
c0014221:	89 c2                	mov    edx,eax
c0014223:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014228:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001422f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014235:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001423c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014243:	83 ec 0c             	sub    esp,0xc
c0014246:	6a 01                	push   0x1
c0014248:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001424e:	e8 a2 53 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001425c:	89 c3                	mov    ebx,eax
c001425e:	0f 86 26 01 00 00    	jbe    c001438a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014264:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001426c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014273:	c1 ee 0c             	shr    esi,0xc
c0014276:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001427a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014281:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014288:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001428c:	29 ef                	sub    edi,ebp
c001428e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014292:	0f 83 f9 00 00 00    	jae    c0014391 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014298:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001429e:	b8 00 10 00 00       	mov    eax,0x1000
c00142a3:	0f 47 f8             	cmova  edi,eax
c00142a6:	83 ec 0c             	sub    esp,0xc
c00142a9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142b0:	31 d2                	xor    edx,edx
c00142b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142b8:	50                   	push   eax
c00142b9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00142bd:	56                   	push   esi
c00142be:	52                   	push   edx
c00142bf:	57                   	push   edi
c00142c0:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00142c7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142ca:	83 c4 20             	add    esp,0x20
c00142cd:	85 c0                	test   eax,eax
c00142cf:	75 06                	jne    c00142d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00142d1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00142d5:	74 13                	je     c00142ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00142d7:	83 ec 0c             	sub    esp,0xc
c00142da:	53                   	push   ebx
c00142db:	e8 29 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00142e0:	83 c4 10             	add    esp,0x10
c00142e3:	31 c0                	xor    eax,eax
c00142e5:	e9 7c 01 00 00       	jmp    c0014466 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00142ea:	fa                   	cli    
c00142eb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00142f1:	e8 ec 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c00142f6:	6a 07                	push   0x7
c00142f8:	53                   	push   ebx
c00142f9:	50                   	push   eax
c00142fa:	89 c7                	mov    edi,eax
c00142fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014301:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014304:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001430a:	e8 ef 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001430f:	83 c4 0c             	add    esp,0xc
c0014312:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014319:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001431f:	6a 00                	push   0x0
c0014321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014326:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014329:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001432f:	e8 30 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014334:	58                   	pop    eax
c0014335:	5a                   	pop    edx
c0014336:	68 07 0c 00 00       	push   0xc07
c001433b:	55                   	push   ebp
c001433c:	57                   	push   edi
c001433d:	89 df                	mov    edi,ebx
c001433f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014346:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001434c:	6a 00                	push   0x0
c001434e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014353:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014356:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001435c:	e8 01 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014361:	b9 00 10 00 00       	mov    ecx,0x1000
c0014366:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014368:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001436d:	83 c4 20             	add    esp,0x20
c0014370:	48                   	dec    eax
c0014371:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014376:	85 c0                	test   eax,eax
c0014378:	75 01                	jne    c001437b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001437a:	fb                   	sti    
c001437b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001437f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014385:	e9 f0 fe ff ff       	jmp    c001427a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001438a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014391:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014398:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001439e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00143a4:	0f 86 ae 00 00 00    	jbe    c0014458 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00143aa:	fa                   	cli    
c00143ab:	51                   	push   ecx
c00143ac:	31 ff                	xor    edi,edi
c00143ae:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143b5:	c1 ee 0c             	shr    esi,0xc
c00143b8:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143be:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143c4:	6a 00                	push   0x0
c00143c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143d4:	e8 8b 57 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00143d9:	83 c4 10             	add    esp,0x10
c00143dc:	e8 01 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c00143e1:	47                   	inc    edi
c00143e2:	6a 07                	push   0x7
c00143e4:	53                   	push   ebx
c00143e5:	50                   	push   eax
c00143e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00143f0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00143f3:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00143f9:	e8 00 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00143fe:	58                   	pop    eax
c00143ff:	5a                   	pop    edx
c0014400:	68 07 0c 00 00       	push   0xc07
c0014405:	55                   	push   ebp
c0014406:	81 c5 00 10 00 00    	add    ebp,0x1000
c001440c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014410:	50                   	push   eax
c0014411:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014418:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001441e:	6a 00                	push   0x0
c0014420:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014425:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014428:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001442e:	e8 2f 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014433:	83 c4 1c             	add    esp,0x1c
c0014436:	68 00 10 00 00       	push   0x1000
c001443b:	6a 00                	push   0x0
c001443d:	53                   	push   ebx
c001443e:	e8 ad c0 fe ff       	call   c00004f0 <memset>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	39 fe                	cmp    esi,edi
c0014448:	77 92                	ja     c00143dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001444a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001444f:	48                   	dec    eax
c0014450:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014455:	75 01                	jne    c0014458 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014457:	fb                   	sti    
c0014458:	83 ec 0c             	sub    esp,0xc
c001445b:	53                   	push   ebx
c001445c:	e8 a8 54 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014461:	83 c4 10             	add    esp,0x10
c0014464:	b0 01                	mov    al,0x1
c0014466:	81 c4 2c 10 00 00    	add    esp,0x102c
c001446c:	5b                   	pop    ebx
c001446d:	5e                   	pop    esi
c001446e:	5f                   	pop    edi
c001446f:	5d                   	pop    ebp
c0014470:	c3                   	ret    

c0014471 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014471:	55                   	push   ebp
c0014472:	57                   	push   edi
c0014473:	56                   	push   esi
c0014474:	53                   	push   ebx
c0014475:	83 ec 48             	sub    esp,0x48
c0014478:	68 14 01 00 00       	push   0x114
c001447d:	e8 51 36 ff ff       	call   c0007ad3 <malloc>
c0014482:	83 c4 0c             	add    esp,0xc
c0014485:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014489:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001448d:	89 c7                	mov    edi,eax
c001448f:	50                   	push   eax
c0014490:	e8 87 73 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0014495:	58                   	pop    eax
c0014496:	5a                   	pop    edx
c0014497:	6a 01                	push   0x1
c0014499:	57                   	push   edi
c001449a:	e8 45 74 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c001449f:	83 c4 10             	add    esp,0x10
c00144a2:	85 c0                	test   eax,eax
c00144a4:	0f 85 4c 01 00 00    	jne    c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144aa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00144b2:	83 ec 0c             	sub    esp,0xc
c00144b5:	6a 34                	push   0x34
c00144b7:	e8 17 36 ff ff       	call   c0007ad3 <malloc>
c00144bc:	89 c3                	mov    ebx,eax
c00144be:	58                   	pop    eax
c00144bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00144c1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00144c5:	56                   	push   esi
c00144c6:	53                   	push   ebx
c00144c7:	6a 00                	push   0x0
c00144c9:	6a 34                	push   0x34
c00144cb:	57                   	push   edi
c00144cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144cf:	83 c4 20             	add    esp,0x20
c00144d2:	85 c0                	test   eax,eax
c00144d4:	0f 85 1c 01 00 00    	jne    c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144da:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00144e0:	0f 85 10 01 00 00    	jne    c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144e9:	85 c0                	test   eax,eax
c00144eb:	0f 84 05 01 00 00    	je     c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144f1:	31 d2                	xor    edx,edx
c00144f3:	55                   	push   ebp
c00144f4:	52                   	push   edx
c00144f5:	50                   	push   eax
c00144f6:	57                   	push   edi
c00144f7:	e8 a6 74 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	85 c0                	test   eax,eax
c0014501:	0f 85 ef 00 00 00    	jne    c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014507:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001450a:	83 ec 0c             	sub    esp,0xc
c001450d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014511:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014515:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014519:	0f af c2             	imul   eax,edx
c001451c:	50                   	push   eax
c001451d:	e8 b1 35 ff ff       	call   c0007ad3 <malloc>
c0014522:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014524:	89 34 24             	mov    DWORD PTR [esp],esi
c0014527:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001452b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001452f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014533:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014537:	0f af c2             	imul   eax,edx
c001453a:	99                   	cdq    
c001453b:	52                   	push   edx
c001453c:	50                   	push   eax
c001453d:	57                   	push   edi
c001453e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014541:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014544:	83 c4 20             	add    esp,0x20
c0014547:	85 c0                	test   eax,eax
c0014549:	0f 84 a7 00 00 00    	je     c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001454f:	31 d2                	xor    edx,edx
c0014551:	51                   	push   ecx
c0014552:	52                   	push   edx
c0014553:	50                   	push   eax
c0014554:	57                   	push   edi
c0014555:	e8 48 74 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	85 c0                	test   eax,eax
c001455f:	0f 85 91 00 00 00    	jne    c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014565:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014569:	83 ec 0c             	sub    esp,0xc
c001456c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014570:	0f af c2             	imul   eax,edx
c0014573:	50                   	push   eax
c0014574:	e8 5a 35 ff ff       	call   c0007ad3 <malloc>
c0014579:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001457b:	89 34 24             	mov    DWORD PTR [esp],esi
c001457e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014586:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001458a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001458e:	0f af c2             	imul   eax,edx
c0014591:	99                   	cdq    
c0014592:	52                   	push   edx
c0014593:	50                   	push   eax
c0014594:	57                   	push   edi
c0014595:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014598:	83 c4 20             	add    esp,0x20
c001459b:	31 c9                	xor    ecx,ecx
c001459d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145a5:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00145a9:	0f b7 e9             	movzx  ebp,cx
c00145ac:	0f 83 86 00 00 00    	jae    c0014638 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00145b2:	c1 e5 05             	shl    ebp,0x5
c00145b5:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00145b9:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00145bd:	75 73                	jne    c0014632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00145bf:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00145c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145c6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00145c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145cd:	52                   	push   edx
c00145ce:	31 d2                	xor    edx,edx
c00145d0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00145d3:	52                   	push   edx
c00145d4:	50                   	push   eax
c00145d5:	57                   	push   edi
c00145d6:	e8 c7 73 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00145e2:	85 c0                	test   eax,eax
c00145e4:	74 17                	je     c00145fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00145e6:	83 ec 0c             	sub    esp,0xc
c00145e9:	68 15 22 02 c0       	push   0xc0022215
c00145ee:	e8 17 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00145f3:	83 c4 10             	add    esp,0x10
c00145f6:	31 c0                	xor    eax,eax
c00145f8:	e9 8b 00 00 00       	jmp    c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00145fd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014601:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001460a:	50                   	push   eax
c001460b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001460f:	56                   	push   esi
c0014610:	57                   	push   edi
c0014611:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014615:	e8 d0 fb ff ff       	call   c00141ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001461a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001461e:	83 c4 20             	add    esp,0x20
c0014621:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014625:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014629:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001462e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014632:	41                   	inc    ecx
c0014633:	e9 6d ff ff ff       	jmp    c00145a5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014638:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001463c:	83 ec 0c             	sub    esp,0xc
c001463f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014643:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014647:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c001464d:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014653:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014658:	05 00 10 00 00       	add    eax,0x1000
c001465d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014664:	e8 7a 34 ff ff       	call   c0007ae3 <free>
c0014669:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001466c:	e8 72 34 ff ff       	call   c0007ae3 <free>
c0014671:	58                   	pop    eax
c0014672:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014676:	e8 68 34 ff ff       	call   c0007ae3 <free>
c001467b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001467e:	e8 bf 72 ff ff       	call   c000b942 <File::close()>
c0014683:	83 c4 10             	add    esp,0x10
c0014686:	b0 01                	mov    al,0x1
c0014688:	83 c4 3c             	add    esp,0x3c
c001468b:	5b                   	pop    ebx
c001468c:	5e                   	pop    esi
c001468d:	5f                   	pop    edi
c001468e:	5d                   	pop    ebp
c001468f:	c3                   	ret    

c0014690 <Thr::runtimeReferenceHelper()>:
c0014690:	83 ec 18             	sub    esp,0x18
c0014693:	68 1d 22 02 c0       	push   0xc002221d
c0014698:	e8 6d 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001469d:	fa                   	cli    
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	eb fe                	jmp    c00146a1 <Thr::runtimeReferenceHelper()+0x11>

c00146a3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00146a3:	57                   	push   edi
c00146a4:	56                   	push   esi
c00146a5:	53                   	push   ebx
c00146a6:	31 db                	xor    ebx,ebx
c00146a8:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00146ae:	7e 3c                	jle    c00146ec <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00146b0:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00146b7:	31 ff                	xor    edi,edi
c00146b9:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00146c0:	7e 27                	jle    c00146e9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00146c2:	50                   	push   eax
c00146c3:	50                   	push   eax
c00146c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00146ca:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00146d1:	50                   	push   eax
c00146d2:	e8 a9 c0 fe ff       	call   c0000780 <strcmp>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	85 c0                	test   eax,eax
c00146dc:	75 05                	jne    c00146e3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00146de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00146e1:	eb 0b                	jmp    c00146ee <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00146e3:	83 c6 10             	add    esi,0x10
c00146e6:	47                   	inc    edi
c00146e7:	eb d0                	jmp    c00146b9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00146e9:	43                   	inc    ebx
c00146ea:	eb bc                	jmp    c00146a8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00146ec:	31 c0                	xor    eax,eax
c00146ee:	5b                   	pop    ebx
c00146ef:	5e                   	pop    esi
c00146f0:	5f                   	pop    edi
c00146f1:	c3                   	ret    

c00146f2 <Thr::loadKernelSymbolTable(char const*)>:
c00146f2:	55                   	push   ebp
c00146f3:	57                   	push   edi
c00146f4:	56                   	push   esi
c00146f5:	53                   	push   ebx
c00146f6:	83 ec 68             	sub    esp,0x68
c00146f9:	68 14 01 00 00       	push   0x114
c00146fe:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014704:	e8 ca 33 ff ff       	call   c0007ad3 <malloc>
c0014709:	83 c4 0c             	add    esp,0xc
c001470c:	56                   	push   esi
c001470d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014711:	89 c3                	mov    ebx,eax
c0014713:	50                   	push   eax
c0014714:	e8 03 71 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0014719:	5e                   	pop    esi
c001471a:	5f                   	pop    edi
c001471b:	6a 01                	push   0x1
c001471d:	53                   	push   ebx
c001471e:	e8 c1 71 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	85 c0                	test   eax,eax
c0014728:	74 0a                	je     c0014734 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001472a:	83 ec 0c             	sub    esp,0xc
c001472d:	68 3f 22 02 c0       	push   0xc002223f
c0014732:	eb 34                	jmp    c0014768 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014734:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	6a 34                	push   0x34
c0014741:	e8 8d 33 ff ff       	call   c0007ad3 <malloc>
c0014746:	59                   	pop    ecx
c0014747:	8d 74 24 34          	lea    esi,[esp+0x34]
c001474b:	89 c7                	mov    edi,eax
c001474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001474f:	56                   	push   esi
c0014750:	57                   	push   edi
c0014751:	6a 00                	push   0x0
c0014753:	6a 34                	push   0x34
c0014755:	53                   	push   ebx
c0014756:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014759:	83 c4 20             	add    esp,0x20
c001475c:	85 c0                	test   eax,eax
c001475e:	74 17                	je     c0014777 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014760:	83 ec 0c             	sub    esp,0xc
c0014763:	68 56 22 02 c0       	push   0xc0022256
c0014768:	e8 74 cb ff ff       	call   c00112e1 <KePanic(char const*)>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	31 c0                	xor    eax,eax
c0014772:	e9 31 02 00 00       	jmp    c00149a8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014777:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001477d:	75 e1                	jne    c0014760 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001477f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014782:	85 c0                	test   eax,eax
c0014784:	74 da                	je     c0014760 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014786:	52                   	push   edx
c0014787:	31 d2                	xor    edx,edx
c0014789:	52                   	push   edx
c001478a:	50                   	push   eax
c001478b:	53                   	push   ebx
c001478c:	e8 11 72 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014791:	83 c4 10             	add    esp,0x10
c0014794:	85 c0                	test   eax,eax
c0014796:	75 c8                	jne    c0014760 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014798:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	31 ed                	xor    ebp,ebp
c00147a1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147a5:	0f af c2             	imul   eax,edx
c00147a8:	50                   	push   eax
c00147a9:	e8 25 33 ff ff       	call   c0007ad3 <malloc>
c00147ae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00147b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147bb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147c3:	0f af c2             	imul   eax,edx
c00147c6:	99                   	cdq    
c00147c7:	52                   	push   edx
c00147c8:	50                   	push   eax
c00147c9:	53                   	push   ebx
c00147ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147cd:	83 c4 20             	add    esp,0x20
c00147d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00147d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00147e0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00147e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147f0:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00147f4:	0f b7 f5             	movzx  esi,bp
c00147f7:	0f 83 a7 00 00 00    	jae    c00148a4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00147fd:	6b f6 28             	imul   esi,esi,0x28
c0014800:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014804:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014807:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001480b:	50                   	push   eax
c001480c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014810:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014814:	8b 16                	mov    edx,DWORD PTR [esi]
c0014816:	6b c0 28             	imul   eax,eax,0x28
c0014819:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001481d:	89 d0                	mov    eax,edx
c001481f:	31 d2                	xor    edx,edx
c0014821:	52                   	push   edx
c0014822:	50                   	push   eax
c0014823:	53                   	push   ebx
c0014824:	e8 79 71 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014829:	83 c4 0c             	add    esp,0xc
c001482c:	6a 20                	push   0x20
c001482e:	6a 00                	push   0x0
c0014830:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014834:	52                   	push   edx
c0014835:	e8 b6 bc fe ff       	call   c00004f0 <memset>
c001483a:	58                   	pop    eax
c001483b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001483d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014841:	51                   	push   ecx
c0014842:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014846:	52                   	push   edx
c0014847:	6a 00                	push   0x0
c0014849:	6a 1f                	push   0x1f
c001484b:	53                   	push   ebx
c001484c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001484f:	83 c4 18             	add    esp,0x18
c0014852:	68 6d 22 02 c0       	push   0xc002226d
c0014857:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001485b:	52                   	push   edx
c001485c:	e8 1f bf fe ff       	call   c0000780 <strcmp>
c0014861:	83 c4 10             	add    esp,0x10
c0014864:	85 c0                	test   eax,eax
c0014866:	75 0f                	jne    c0014877 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014868:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001486b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001486f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014877:	50                   	push   eax
c0014878:	50                   	push   eax
c0014879:	68 75 22 02 c0       	push   0xc0022275
c001487e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014882:	50                   	push   eax
c0014883:	e8 f8 be fe ff       	call   c0000780 <strcmp>
c0014888:	83 c4 10             	add    esp,0x10
c001488b:	85 c0                	test   eax,eax
c001488d:	75 0f                	jne    c001489e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001488f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014892:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014896:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001489a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001489e:	45                   	inc    ebp
c001489f:	e9 4c ff ff ff       	jmp    c00147f0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00148a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00148a9:	75 10                	jne    c00148bb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00148ab:	83 ec 0c             	sub    esp,0xc
c00148ae:	68 7d 22 02 c0       	push   0xc002227d
c00148b3:	e8 29 ca ff ff       	call   c00112e1 <KePanic(char const*)>
c00148b8:	83 c4 10             	add    esp,0x10
c00148bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00148c0:	75 10                	jne    c00148d2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00148c2:	83 ec 0c             	sub    esp,0xc
c00148c5:	68 7d 22 02 c0       	push   0xc002227d
c00148ca:	e8 12 ca ff ff       	call   c00112e1 <KePanic(char const*)>
c00148cf:	83 c4 10             	add    esp,0x10
c00148d2:	50                   	push   eax
c00148d3:	31 d2                	xor    edx,edx
c00148d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d9:	52                   	push   edx
c00148da:	50                   	push   eax
c00148db:	53                   	push   ebx
c00148dc:	e8 c1 70 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c00148e1:	5a                   	pop    edx
c00148e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148e6:	e8 e8 31 ff ff       	call   c0007ad3 <malloc>
c00148eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00148ef:	31 c9                	xor    ecx,ecx
c00148f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148f7:	5e                   	pop    esi
c00148f8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00148fc:	55                   	push   ebp
c00148fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014901:	51                   	push   ecx
c0014902:	52                   	push   edx
c0014903:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014907:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001490b:	53                   	push   ebx
c001490c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001490f:	83 c4 14             	add    esp,0x14
c0014912:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014916:	e8 b8 31 ff ff       	call   c0007ad3 <malloc>
c001491b:	89 c6                	mov    esi,eax
c001491d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001491f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014922:	56                   	push   esi
c0014923:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014927:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001492b:	51                   	push   ecx
c001492c:	52                   	push   edx
c001492d:	53                   	push   ebx
c001492e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014931:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014935:	83 c4 1c             	add    esp,0x1c
c0014938:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c001493e:	c1 e8 04             	shr    eax,0x4
c0014941:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014948:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001494c:	31 d2                	xor    edx,edx
c001494e:	52                   	push   edx
c001494f:	50                   	push   eax
c0014950:	53                   	push   ebx
c0014951:	e8 4c 70 ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014956:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014958:	31 d2                	xor    edx,edx
c001495a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001495d:	56                   	push   esi
c001495e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014962:	52                   	push   edx
c0014963:	50                   	push   eax
c0014964:	53                   	push   ebx
c0014965:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014968:	83 c4 14             	add    esp,0x14
c001496b:	53                   	push   ebx
c001496c:	e8 d1 6f ff ff       	call   c000b942 <File::close()>
c0014971:	5d                   	pop    ebp
c0014972:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014976:	e8 68 31 ff ff       	call   c0007ae3 <free>
c001497b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001497e:	e8 60 31 ff ff       	call   c0007ae3 <free>
c0014983:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014988:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001498c:	83 c4 10             	add    esp,0x10
c001498f:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014996:	8d 50 01             	lea    edx,[eax+0x1]
c0014999:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c00149a0:	b0 01                	mov    al,0x1
c00149a2:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c00149a8:	83 c4 5c             	add    esp,0x5c
c00149ab:	5b                   	pop    ebx
c00149ac:	5e                   	pop    esi
c00149ad:	5f                   	pop    edi
c00149ae:	5d                   	pop    ebp
c00149af:	c3                   	ret    

c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00149b0:	55                   	push   ebp
c00149b1:	57                   	push   edi
c00149b2:	56                   	push   esi
c00149b3:	53                   	push   ebx
c00149b4:	81 ec 68 03 00 00    	sub    esp,0x368
c00149ba:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00149c1:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00149c7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00149cb:	68 14 01 00 00       	push   0x114
c00149d0:	e8 fe 30 ff ff       	call   c0007ad3 <malloc>
c00149d5:	83 c4 0c             	add    esp,0xc
c00149d8:	56                   	push   esi
c00149d9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00149e0:	50                   	push   eax
c00149e1:	89 c3                	mov    ebx,eax
c00149e3:	e8 34 6e ff ff       	call   c000b81c <File::File(char const*, Process*)>
c00149e8:	5f                   	pop    edi
c00149e9:	5d                   	pop    ebp
c00149ea:	6a 01                	push   0x1
c00149ec:	53                   	push   ebx
c00149ed:	e8 f2 6e ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c00149f2:	83 c4 10             	add    esp,0x10
c00149f5:	85 c0                	test   eax,eax
c00149f7:	0f 85 b3 06 00 00    	jne    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149fd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014a05:	83 ec 0c             	sub    esp,0xc
c0014a08:	6a 34                	push   0x34
c0014a0a:	e8 c4 30 ff ff       	call   c0007ad3 <malloc>
c0014a0f:	5e                   	pop    esi
c0014a10:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014a14:	89 c5                	mov    ebp,eax
c0014a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a18:	56                   	push   esi
c0014a19:	55                   	push   ebp
c0014a1a:	6a 00                	push   0x0
c0014a1c:	6a 34                	push   0x34
c0014a1e:	53                   	push   ebx
c0014a1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a22:	83 c4 20             	add    esp,0x20
c0014a25:	85 c0                	test   eax,eax
c0014a27:	0f 85 83 06 00 00    	jne    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a2d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014a34:	0f 85 76 06 00 00    	jne    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a3a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014a3d:	85 c0                	test   eax,eax
c0014a3f:	0f 84 6b 06 00 00    	je     c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a45:	31 d2                	xor    edx,edx
c0014a47:	51                   	push   ecx
c0014a48:	52                   	push   edx
c0014a49:	50                   	push   eax
c0014a4a:	53                   	push   ebx
c0014a4b:	e8 52 6f ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014a50:	83 c4 10             	add    esp,0x10
c0014a53:	85 c0                	test   eax,eax
c0014a55:	0f 85 55 06 00 00    	jne    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a5b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014a5e:	83 ec 0c             	sub    esp,0xc
c0014a61:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014a65:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014a69:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a6d:	0f af c2             	imul   eax,edx
c0014a70:	50                   	push   eax
c0014a71:	e8 5d 30 ff ff       	call   c0007ad3 <malloc>
c0014a76:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a78:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a83:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014a87:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a8b:	0f af c2             	imul   eax,edx
c0014a8e:	99                   	cdq    
c0014a8f:	52                   	push   edx
c0014a90:	50                   	push   eax
c0014a91:	53                   	push   ebx
c0014a92:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a95:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014a98:	83 c4 20             	add    esp,0x20
c0014a9b:	85 c0                	test   eax,eax
c0014a9d:	0f 84 0d 06 00 00    	je     c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014aa3:	52                   	push   edx
c0014aa4:	31 d2                	xor    edx,edx
c0014aa6:	52                   	push   edx
c0014aa7:	50                   	push   eax
c0014aa8:	53                   	push   ebx
c0014aa9:	e8 f4 6e ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014aae:	83 c4 10             	add    esp,0x10
c0014ab1:	85 c0                	test   eax,eax
c0014ab3:	0f 85 f7 05 00 00    	jne    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ab9:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ac4:	0f af c2             	imul   eax,edx
c0014ac7:	50                   	push   eax
c0014ac8:	e8 06 30 ff ff       	call   c0007ad3 <malloc>
c0014acd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014acf:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ad2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ad6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ada:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014ade:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ae2:	0f af c2             	imul   eax,edx
c0014ae5:	99                   	cdq    
c0014ae6:	52                   	push   edx
c0014ae7:	50                   	push   eax
c0014ae8:	53                   	push   ebx
c0014ae9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014aec:	83 c4 20             	add    esp,0x20
c0014aef:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014af5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014af8:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014afc:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014b00:	73 78                	jae    c0014b7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014b02:	c1 e7 05             	shl    edi,0x5
c0014b05:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014b09:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b0c:	75 63                	jne    c0014b71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014b0e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b11:	31 d2                	xor    edx,edx
c0014b13:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014b16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b1a:	50                   	push   eax
c0014b1b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b1e:	52                   	push   edx
c0014b1f:	50                   	push   eax
c0014b20:	53                   	push   ebx
c0014b21:	e8 7c 6e ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014b26:	83 c4 10             	add    esp,0x10
c0014b29:	85 c0                	test   eax,eax
c0014b2b:	0f 85 7f 05 00 00    	jne    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b31:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014b38:	83 ec 0c             	sub    esp,0xc
c0014b3b:	31 d2                	xor    edx,edx
c0014b3d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014b41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b43:	01 c6                	add    esi,eax
c0014b45:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b4c:	50                   	push   eax
c0014b4d:	56                   	push   esi
c0014b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b52:	52                   	push   edx
c0014b53:	50                   	push   eax
c0014b54:	53                   	push   ebx
c0014b55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b58:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b5b:	83 c4 1c             	add    esp,0x1c
c0014b5e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b61:	50                   	push   eax
c0014b62:	6a 00                	push   0x0
c0014b64:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014b68:	56                   	push   esi
c0014b69:	e8 82 b9 fe ff       	call   c00004f0 <memset>
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	66 ff 04 24          	inc    WORD PTR [esp]
c0014b75:	e9 7b ff ff ff       	jmp    c0014af5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014b7a:	50                   	push   eax
c0014b7b:	68 00 01 00 00       	push   0x100
c0014b80:	6a 00                	push   0x0
c0014b82:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014b86:	50                   	push   eax
c0014b87:	e8 64 b9 fe ff       	call   c00004f0 <memset>
c0014b8c:	83 c4 0c             	add    esp,0xc
c0014b8f:	68 00 01 00 00       	push   0x100
c0014b94:	6a 00                	push   0x0
c0014b96:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014b9d:	50                   	push   eax
c0014b9e:	e8 4d b9 fe ff       	call   c00004f0 <memset>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014bad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014bb4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bbc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014bc4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bcc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014bd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bd8:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014bdc:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014be1:	0f 83 16 01 00 00    	jae    c0014cfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014be7:	6b ff 28             	imul   edi,edi,0x28
c0014bea:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014bee:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014bf1:	51                   	push   ecx
c0014bf2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014bf6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014bfa:	8b 07                	mov    eax,DWORD PTR [edi]
c0014bfc:	6b d2 28             	imul   edx,edx,0x28
c0014bff:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014c03:	31 d2                	xor    edx,edx
c0014c05:	52                   	push   edx
c0014c06:	50                   	push   eax
c0014c07:	53                   	push   ebx
c0014c08:	e8 95 6d ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014c0d:	83 c4 0c             	add    esp,0xc
c0014c10:	6a 20                	push   0x20
c0014c12:	6a 00                	push   0x0
c0014c14:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c1b:	51                   	push   ecx
c0014c1c:	e8 cf b8 fe ff       	call   c00004f0 <memset>
c0014c21:	58                   	pop    eax
c0014c22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c24:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014c28:	52                   	push   edx
c0014c29:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014c30:	51                   	push   ecx
c0014c31:	6a 00                	push   0x0
c0014c33:	6a 1f                	push   0x1f
c0014c35:	53                   	push   ebx
c0014c36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c39:	83 c4 1c             	add    esp,0x1c
c0014c3c:	6a 09                	push   0x9
c0014c3e:	68 97 22 02 c0       	push   0xc0022297
c0014c43:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c4a:	51                   	push   ecx
c0014c4b:	e8 30 b7 fe ff       	call   c0000380 <memcmp>
c0014c50:	83 c4 10             	add    esp,0x10
c0014c53:	85 c0                	test   eax,eax
c0014c55:	75 1a                	jne    c0014c71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014c57:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c5a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014c5d:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c61:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c64:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c6b:	89 d0                	mov    eax,edx
c0014c6d:	40                   	inc    eax
c0014c6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c71:	52                   	push   edx
c0014c72:	6a 09                	push   0x9
c0014c74:	68 a1 22 02 c0       	push   0xc00222a1
c0014c79:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c80:	50                   	push   eax
c0014c81:	e8 fa b6 fe ff       	call   c0000380 <memcmp>
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	85 c0                	test   eax,eax
c0014c8b:	75 1a                	jne    c0014ca7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014c8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c90:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014c93:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c97:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c9a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014ca1:	89 c8                	mov    eax,ecx
c0014ca3:	40                   	inc    eax
c0014ca4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ca7:	50                   	push   eax
c0014ca8:	50                   	push   eax
c0014ca9:	68 6d 22 02 c0       	push   0xc002226d
c0014cae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cb5:	50                   	push   eax
c0014cb6:	e8 c5 ba fe ff       	call   c0000780 <strcmp>
c0014cbb:	83 c4 10             	add    esp,0x10
c0014cbe:	85 c0                	test   eax,eax
c0014cc0:	75 0b                	jne    c0014ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014cc2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014cc6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014cc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ccd:	50                   	push   eax
c0014cce:	50                   	push   eax
c0014ccf:	68 75 22 02 c0       	push   0xc0022275
c0014cd4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cdb:	50                   	push   eax
c0014cdc:	e8 9f ba fe ff       	call   c0000780 <strcmp>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	85 c0                	test   eax,eax
c0014ce6:	75 0b                	jne    c0014cf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014ce8:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014cec:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014cef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cf3:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014cf8:	e9 d7 fe ff ff       	jmp    c0014bd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014cfd:	50                   	push   eax
c0014cfe:	31 d2                	xor    edx,edx
c0014d00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d04:	52                   	push   edx
c0014d05:	50                   	push   eax
c0014d06:	53                   	push   ebx
c0014d07:	e8 96 6c ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014d0c:	58                   	pop    eax
c0014d0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d11:	e8 bd 2d ff ff       	call   c0007ad3 <malloc>
c0014d16:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d18:	31 d2                	xor    edx,edx
c0014d1a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014d1e:	58                   	pop    eax
c0014d1f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014d23:	56                   	push   esi
c0014d24:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d2c:	52                   	push   edx
c0014d2d:	50                   	push   eax
c0014d2e:	53                   	push   ebx
c0014d2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d32:	83 c4 14             	add    esp,0x14
c0014d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d39:	e8 95 2d ff ff       	call   c0007ad3 <malloc>
c0014d3e:	31 d2                	xor    edx,edx
c0014d40:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014d44:	83 c4 0c             	add    esp,0xc
c0014d47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d4b:	52                   	push   edx
c0014d4c:	50                   	push   eax
c0014d4d:	53                   	push   ebx
c0014d4e:	e8 4f 6c ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014d53:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d55:	31 d2                	xor    edx,edx
c0014d57:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d62:	52                   	push   edx
c0014d63:	50                   	push   eax
c0014d64:	53                   	push   ebx
c0014d65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d68:	83 c4 20             	add    esp,0x20
c0014d6b:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014d70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d78:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d7c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014d80:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014d83:	0f 84 2b 03 00 00    	je     c00150b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014d89:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014d90:	31 d2                	xor    edx,edx
c0014d92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d96:	c1 e8 03             	shr    eax,0x3
c0014d99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014d9d:	51                   	push   ecx
c0014d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014da6:	52                   	push   edx
c0014da7:	50                   	push   eax
c0014da8:	53                   	push   ebx
c0014da9:	e8 f4 6b ff ff       	call   c000b9a2 <File::seek(unsigned long long)>
c0014dae:	5e                   	pop    esi
c0014daf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014db3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014dba:	e8 14 2d ff ff       	call   c0007ad3 <malloc>
c0014dbf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014dc1:	31 d2                	xor    edx,edx
c0014dc3:	89 c7                	mov    edi,eax
c0014dc5:	58                   	pop    eax
c0014dc6:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014dca:	50                   	push   eax
c0014dcb:	57                   	push   edi
c0014dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014dd7:	52                   	push   edx
c0014dd8:	50                   	push   eax
c0014dd9:	53                   	push   ebx
c0014dda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ddd:	83 c4 20             	add    esp,0x20
c0014de0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014de8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014dec:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014df0:	0f 8d a5 02 00 00    	jge    c001509b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014df6:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014dfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dff:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014e06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e0a:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014e0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e12:	c1 e8 08             	shr    eax,0x8
c0014e15:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e19:	89 c2                	mov    edx,eax
c0014e1b:	c1 e2 04             	shl    edx,0x4
c0014e1e:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014e22:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014e25:	85 f6                	test   esi,esi
c0014e27:	0f 85 cf 00 00 00    	jne    c0014efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e2d:	83 ec 0c             	sub    esp,0xc
c0014e30:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e38:	03 02                	add    eax,DWORD PTR [edx]
c0014e3a:	50                   	push   eax
c0014e3b:	e8 63 f8 ff ff       	call   c00146a3 <Thr::getAddressOfKernelSymbol(char const*)>
c0014e40:	83 c4 10             	add    esp,0x10
c0014e43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e47:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014e4c:	85 c0                	test   eax,eax
c0014e4e:	89 c6                	mov    esi,eax
c0014e50:	0f 85 a6 00 00 00    	jne    c0014efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e56:	83 ec 0c             	sub    esp,0xc
c0014e59:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e61:	03 02                	add    eax,DWORD PTR [edx]
c0014e63:	50                   	push   eax
c0014e64:	e8 63 c6 ff ff       	call   c00114cc <KeResolveCompatibilitySymbol(char*)>
c0014e69:	83 c4 10             	add    esp,0x10
c0014e6c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e70:	85 c0                	test   eax,eax
c0014e72:	89 c6                	mov    esi,eax
c0014e74:	0f 85 82 00 00 00    	jne    c0014efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e7a:	50                   	push   eax
c0014e7b:	50                   	push   eax
c0014e7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e80:	03 02                	add    eax,DWORD PTR [edx]
c0014e82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014e86:	50                   	push   eax
c0014e87:	68 ab 22 02 c0       	push   0xc00222ab
c0014e8c:	e8 79 5a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014e91:	58                   	pop    eax
c0014e92:	5a                   	pop    edx
c0014e93:	68 c5 22 02 c0       	push   0xc00222c5
c0014e98:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e9f:	51                   	push   ecx
c0014ea0:	e8 ab b7 fe ff       	call   c0000650 <strcpy>
c0014ea5:	59                   	pop    ecx
c0014ea6:	58                   	pop    eax
c0014ea7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014eab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014eaf:	03 02                	add    eax,DWORD PTR [edx]
c0014eb1:	50                   	push   eax
c0014eb2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014eb9:	51                   	push   ecx
c0014eba:	e8 b1 b9 fe ff       	call   c0000870 <strcat>
c0014ebf:	58                   	pop    eax
c0014ec0:	5a                   	pop    edx
c0014ec1:	68 5b 23 02 c0       	push   0xc002235b
c0014ec6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ecd:	51                   	push   ecx
c0014ece:	e8 9d b9 fe ff       	call   c0000870 <strcat>
c0014ed3:	83 c4 10             	add    esp,0x10
c0014ed6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014edb:	0f 84 77 01 00 00    	je     c0015058 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ee1:	83 ec 0c             	sub    esp,0xc
c0014ee4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014eeb:	51                   	push   ecx
c0014eec:	e8 f0 c3 ff ff       	call   c00112e1 <KePanic(char const*)>
c0014ef1:	83 c4 10             	add    esp,0x10
c0014ef4:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014ef8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014efc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014f01:	83 f8 01             	cmp    eax,0x1
c0014f04:	0f 85 9b 00 00 00    	jne    c0014fa5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014f0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f0e:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014f15:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014f19:	01 d0                	add    eax,edx
c0014f1b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014f23:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014f27:	0f 94 c0             	sete   al
c0014f2a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014f32:	0f 94 c1             	sete   cl
c0014f35:	09 c1                	or     ecx,eax
c0014f37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f3b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014f40:	0f b6 c9             	movzx  ecx,cl
c0014f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f45:	74 41                	je     c0014f88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014f47:	8d 14 06             	lea    edx,[esi+eax*1]
c0014f4a:	85 c9                	test   ecx,ecx
c0014f4c:	75 15                	jne    c0014f63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014f4e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f52:	66 83 f8 0c          	cmp    ax,0xc
c0014f56:	76 05                	jbe    c0014f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014f58:	b8 0c 00 00 00       	mov    eax,0xc
c0014f5d:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f61:	76 37                	jbe    c0014f9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f63:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f68:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f6c:	0f 84 e6 00 00 00    	je     c0015058 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f72:	83 ec 0c             	sub    esp,0xc
c0014f75:	68 dc 22 02 c0       	push   0xc00222dc
c0014f7a:	e8 62 c3 ff ff       	call   c00112e1 <KePanic(char const*)>
c0014f7f:	83 c4 10             	add    esp,0x10
c0014f82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f86:	eb 12                	jmp    c0014f9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f88:	01 c2                	add    edx,eax
c0014f8a:	85 c9                	test   ecx,ecx
c0014f8c:	75 0c                	jne    c0014f9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f8e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f92:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f96:	77 02                	ja     c0014f9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f98:	01 f2                	add    edx,esi
c0014f9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f9e:	89 10                	mov    DWORD PTR [eax],edx
c0014fa0:	e9 ed 00 00 00       	jmp    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014fa5:	83 f8 02             	cmp    eax,0x2
c0014fa8:	0f 85 81 00 00 00    	jne    c001502f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014fae:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fb5:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014fb9:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014fbd:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014fc5:	74 21                	je     c0014fe8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014fc7:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014fcf:	74 17                	je     c0014fe8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014fd1:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014fd5:	ba 0a 00 00 00       	mov    edx,0xa
c0014fda:	83 f9 0e             	cmp    ecx,0xe
c0014fdd:	77 03                	ja     c0014fe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014fdf:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014fe2:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014fe6:	76 1f                	jbe    c0015007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014fe8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014fed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ff1:	74 65                	je     c0015058 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ff3:	83 ec 0c             	sub    esp,0xc
c0014ff6:	68 f8 22 02 c0       	push   0xc00222f8
c0014ffb:	e8 e1 c2 ff ff       	call   c00112e1 <KePanic(char const*)>
c0015000:	83 c4 10             	add    esp,0x10
c0015003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015007:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001500c:	8b 10                	mov    edx,DWORD PTR [eax]
c001500e:	74 15                	je     c0015025 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015010:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015014:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001501b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001501f:	01 d1                	add    ecx,edx
c0015021:	01 ce                	add    esi,ecx
c0015023:	eb 06                	jmp    c001502b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015025:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015029:	01 d6                	add    esi,edx
c001502b:	89 30                	mov    DWORD PTR [eax],esi
c001502d:	eb 63                	jmp    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001502f:	56                   	push   esi
c0015030:	56                   	push   esi
c0015031:	50                   	push   eax
c0015032:	68 14 23 02 c0       	push   0xc0022314
c0015037:	e8 ce 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001503c:	83 c4 10             	add    esp,0x10
c001503f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015044:	74 12                	je     c0015058 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015046:	83 ec 0c             	sub    esp,0xc
c0015049:	68 1f 23 02 c0       	push   0xc002231f
c001504e:	e8 8e c2 ff ff       	call   c00112e1 <KePanic(char const*)>
c0015053:	83 c4 10             	add    esp,0x10
c0015056:	eb 3a                	jmp    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015058:	83 ec 0c             	sub    esp,0xc
c001505b:	53                   	push   ebx
c001505c:	e8 e1 68 ff ff       	call   c000b942 <File::close()>
c0015061:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015063:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015066:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015069:	89 3c 24             	mov    DWORD PTR [esp],edi
c001506c:	e8 72 2a ff ff       	call   c0007ae3 <free>
c0015071:	59                   	pop    ecx
c0015072:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015076:	e8 68 2a ff ff       	call   c0007ae3 <free>
c001507b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001507e:	e8 60 2a ff ff       	call   c0007ae3 <free>
c0015083:	5b                   	pop    ebx
c0015084:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015088:	e8 56 2a ff ff       	call   c0007ae3 <free>
c001508d:	83 c4 10             	add    esp,0x10
c0015090:	eb 1e                	jmp    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015092:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015096:	e9 4d fd ff ff       	jmp    c0014de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001509b:	83 ec 0c             	sub    esp,0xc
c001509e:	57                   	push   edi
c001509f:	e8 3f 2a ff ff       	call   c0007ae3 <free>
c00150a4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00150a8:	83 c4 10             	add    esp,0x10
c00150ab:	e9 cc fc ff ff       	jmp    c0014d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00150b0:	31 c0                	xor    eax,eax
c00150b2:	eb 32                	jmp    c00150e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00150b4:	83 ec 0c             	sub    esp,0xc
c00150b7:	53                   	push   ebx
c00150b8:	e8 85 68 ff ff       	call   c000b942 <File::close()>
c00150bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150c5:	58                   	pop    eax
c00150c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150ca:	e8 14 2a ff ff       	call   c0007ae3 <free>
c00150cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150d2:	e8 0c 2a ff ff       	call   c0007ae3 <free>
c00150d7:	5a                   	pop    edx
c00150d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150dc:	e8 02 2a ff ff       	call   c0007ae3 <free>
c00150e1:	83 c4 10             	add    esp,0x10
c00150e4:	b0 01                	mov    al,0x1
c00150e6:	81 c4 5c 03 00 00    	add    esp,0x35c
c00150ec:	5b                   	pop    ebx
c00150ed:	5e                   	pop    esi
c00150ee:	5f                   	pop    edi
c00150ef:	5d                   	pop    ebp
c00150f0:	c3                   	ret    

c00150f1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00150f1:	56                   	push   esi
c00150f2:	31 d2                	xor    edx,edx
c00150f4:	53                   	push   ebx
c00150f5:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00150fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150ff:	39 d3                	cmp    ebx,edx
c0015101:	7e 1b                	jle    c001511e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015103:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c001510a:	39 c8                	cmp    eax,ecx
c001510c:	77 0d                	ja     c001511b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001510e:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0015115:	01 c6                	add    esi,eax
c0015117:	39 ce                	cmp    esi,ecx
c0015119:	77 05                	ja     c0015120 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001511b:	42                   	inc    edx
c001511c:	eb e1                	jmp    c00150ff <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001511e:	31 c0                	xor    eax,eax
c0015120:	5b                   	pop    ebx
c0015121:	5e                   	pop    esi
c0015122:	c3                   	ret    

c0015123 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015123:	53                   	push   ebx
c0015124:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001512a:	31 c0                	xor    eax,eax
c001512c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015130:	39 c3                	cmp    ebx,eax
c0015132:	7e 22                	jle    c0015156 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015134:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c001513b:	39 ca                	cmp    edx,ecx
c001513d:	77 14                	ja     c0015153 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001513f:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015146:	39 ca                	cmp    edx,ecx
c0015148:	76 09                	jbe    c0015153 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001514a:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015151:	eb 05                	jmp    c0015158 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015153:	40                   	inc    eax
c0015154:	eb da                	jmp    c0015130 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015156:	31 c0                	xor    eax,eax
c0015158:	5b                   	pop    ebx
c0015159:	c3                   	ret    

c001515a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001515a:	53                   	push   ebx
c001515b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001515f:	53                   	push   ebx
c0015160:	e8 8c ff ff ff       	call   c00150f1 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015165:	5a                   	pop    edx
c0015166:	31 d2                	xor    edx,edx
c0015168:	85 c0                	test   eax,eax
c001516a:	74 04                	je     c0015170 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001516c:	89 da                	mov    edx,ebx
c001516e:	29 c2                	sub    edx,eax
c0015170:	5b                   	pop    ebx
c0015171:	89 d0                	mov    eax,edx
c0015173:	c3                   	ret    

c0015174 <Thr::loadDLL(char const*, bool)>:
c0015174:	55                   	push   ebp
c0015175:	57                   	push   edi
c0015176:	56                   	push   esi
c0015177:	53                   	push   ebx
c0015178:	81 ec 34 01 00 00    	sub    esp,0x134
c001517e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015185:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001518c:	56                   	push   esi
c001518d:	68 37 23 02 c0       	push   0xc0022337
c0015192:	e8 73 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015197:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001519e:	e8 30 29 ff ff       	call   c0007ad3 <malloc>
c00151a3:	83 c4 0c             	add    esp,0xc
c00151a6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00151ac:	56                   	push   esi
c00151ad:	50                   	push   eax
c00151ae:	89 c3                	mov    ebx,eax
c00151b0:	e8 67 66 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c00151b5:	83 c4 10             	add    esp,0x10
c00151b8:	85 db                	test   ebx,ebx
c00151ba:	75 3c                	jne    c00151f8 <Thr::loadDLL(char const*, bool)+0x84>
c00151bc:	89 e8                	mov    eax,ebp
c00151be:	84 c0                	test   al,al
c00151c0:	0f 84 e1 01 00 00    	je     c00153a7 <Thr::loadDLL(char const*, bool)+0x233>
c00151c6:	50                   	push   eax
c00151c7:	50                   	push   eax
c00151c8:	68 48 23 02 c0       	push   0xc0022348
c00151cd:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00151d1:	57                   	push   edi
c00151d2:	e8 79 b4 fe ff       	call   c0000650 <strcpy>
c00151d7:	58                   	pop    eax
c00151d8:	5a                   	pop    edx
c00151d9:	56                   	push   esi
c00151da:	57                   	push   edi
c00151db:	e8 90 b6 fe ff       	call   c0000870 <strcat>
c00151e0:	59                   	pop    ecx
c00151e1:	58                   	pop    eax
c00151e2:	68 5b 23 02 c0       	push   0xc002235b
c00151e7:	57                   	push   edi
c00151e8:	e8 83 b6 fe ff       	call   c0000870 <strcat>
c00151ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00151f0:	e8 ec c0 ff ff       	call   c00112e1 <KePanic(char const*)>
c00151f5:	83 c4 10             	add    esp,0x10
c00151f8:	50                   	push   eax
c00151f9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00151fd:	50                   	push   eax
c00151fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015202:	50                   	push   eax
c0015203:	53                   	push   ebx
c0015204:	e8 dd 69 ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c0015209:	83 c4 10             	add    esp,0x10
c001520c:	85 db                	test   ebx,ebx
c001520e:	74 0c                	je     c001521c <Thr::loadDLL(char const*, bool)+0xa8>
c0015210:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015212:	83 ec 0c             	sub    esp,0xc
c0015215:	53                   	push   ebx
c0015216:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015221:	75 0a                	jne    c001522d <Thr::loadDLL(char const*, bool)+0xb9>
c0015223:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015227:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001522b:	75 3e                	jne    c001526b <Thr::loadDLL(char const*, bool)+0xf7>
c001522d:	89 e8                	mov    eax,ebp
c001522f:	31 db                	xor    ebx,ebx
c0015231:	84 c0                	test   al,al
c0015233:	0f 84 6e 01 00 00    	je     c00153a7 <Thr::loadDLL(char const*, bool)+0x233>
c0015239:	50                   	push   eax
c001523a:	50                   	push   eax
c001523b:	68 48 23 02 c0       	push   0xc0022348
c0015240:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015244:	53                   	push   ebx
c0015245:	e8 06 b4 fe ff       	call   c0000650 <strcpy>
c001524a:	58                   	pop    eax
c001524b:	5a                   	pop    edx
c001524c:	56                   	push   esi
c001524d:	53                   	push   ebx
c001524e:	e8 1d b6 fe ff       	call   c0000870 <strcat>
c0015253:	59                   	pop    ecx
c0015254:	5f                   	pop    edi
c0015255:	68 5b 23 02 c0       	push   0xc002235b
c001525a:	53                   	push   ebx
c001525b:	e8 10 b6 fe ff       	call   c0000870 <strcat>
c0015260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015263:	e8 79 c0 ff ff       	call   c00112e1 <KePanic(char const*)>
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	53                   	push   ebx
c001526c:	6a 03                	push   0x3
c001526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015272:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015276:	05 ff 0f 00 00       	add    eax,0xfff
c001527b:	83 d2 00             	adc    edx,0x0
c001527e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015282:	50                   	push   eax
c0015283:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015289:	e8 78 4b ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001528e:	89 c3                	mov    ebx,eax
c0015290:	58                   	pop    eax
c0015291:	5a                   	pop    edx
c0015292:	53                   	push   ebx
c0015293:	68 32 09 02 c0       	push   0xc0020932
c0015298:	e8 6d 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001529d:	89 34 24             	mov    DWORD PTR [esp],esi
c00152a0:	e8 db b2 fe ff       	call   c0000580 <strlen>
c00152a5:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c00152ab:	40                   	inc    eax
c00152ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00152af:	e8 1f 28 ff ff       	call   c0007ad3 <malloc>
c00152b4:	59                   	pop    ecx
c00152b5:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c00152bc:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152c1:	5f                   	pop    edi
c00152c2:	56                   	push   esi
c00152c3:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00152ca:	e8 81 b3 fe ff       	call   c0000650 <strcpy>
c00152cf:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152d4:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00152db:	8d 50 01             	lea    edx,[eax+0x1]
c00152de:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00152e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00152e8:	83 c4 0c             	add    esp,0xc
c00152eb:	6a 01                	push   0x1
c00152ed:	53                   	push   ebx
c00152ee:	56                   	push   esi
c00152ef:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00152f6:	e8 b5 f6 ff ff       	call   c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00152fb:	83 c4 10             	add    esp,0x10
c00152fe:	89 c7                	mov    edi,eax
c0015300:	89 f8                	mov    eax,edi
c0015302:	83 f0 01             	xor    eax,0x1
c0015305:	84 c0                	test   al,al
c0015307:	74 18                	je     c0015321 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015309:	89 e8                	mov    eax,ebp
c001530b:	84 c0                	test   al,al
c001530d:	74 12                	je     c0015321 <Thr::loadDLL(char const*, bool)+0x1ad>
c001530f:	83 ec 0c             	sub    esp,0xc
c0015312:	68 5d 23 02 c0       	push   0xc002235d
c0015317:	e8 c5 bf ff ff       	call   c00112e1 <KePanic(char const*)>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	eb 06                	jmp    c0015327 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015321:	89 f8                	mov    eax,edi
c0015323:	84 c0                	test   al,al
c0015325:	75 10                	jne    c0015337 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015327:	83 ec 0c             	sub    esp,0xc
c001532a:	68 7c 23 02 c0       	push   0xc002237c
c001532f:	e8 ad bf ff ff       	call   c00112e1 <KePanic(char const*)>
c0015334:	83 c4 10             	add    esp,0x10
c0015337:	31 f6                	xor    esi,esi
c0015339:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001533d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015341:	05 ff 0f 00 00       	add    eax,0xfff
c0015346:	83 d2 00             	adc    edx,0x0
c0015349:	0f ac d0 0c          	shrd   eax,edx,0xc
c001534d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015351:	c1 ea 0c             	shr    edx,0xc
c0015354:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015358:	ba 00 00 00 00       	mov    edx,0x0
c001535d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015361:	89 d0                	mov    eax,edx
c0015363:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015367:	73 32                	jae    c001539b <Thr::loadDLL(char const*, bool)+0x227>
c0015369:	50                   	push   eax
c001536a:	50                   	push   eax
c001536b:	89 f0                	mov    eax,esi
c001536d:	c1 e0 0c             	shl    eax,0xc
c0015370:	01 d8                	add    eax,ebx
c0015372:	50                   	push   eax
c0015373:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015379:	e8 6c 45 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	8b 00                	mov    eax,DWORD PTR [eax]
c0015383:	a8 60                	test   al,0x60
c0015385:	75 11                	jne    c0015398 <Thr::loadDLL(char const*, bool)+0x224>
c0015387:	83 ec 0c             	sub    esp,0xc
c001538a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001538f:	50                   	push   eax
c0015390:	e8 e4 29 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	46                   	inc    esi
c0015399:	eb 9e                	jmp    c0015339 <Thr::loadDLL(char const*, bool)+0x1c5>
c001539b:	89 f8                	mov    eax,edi
c001539d:	84 c0                	test   al,al
c001539f:	b8 00 00 00 00       	mov    eax,0x0
c00153a4:	0f 44 d8             	cmove  ebx,eax
c00153a7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00153ad:	89 d8                	mov    eax,ebx
c00153af:	5b                   	pop    ebx
c00153b0:	5e                   	pop    esi
c00153b1:	5f                   	pop    edi
c00153b2:	5d                   	pop    ebp
c00153b3:	c3                   	ret    

c00153b4 <Thr::executeDLL(unsigned long, void*)>:
c00153b4:	56                   	push   esi
c00153b5:	53                   	push   ebx
c00153b6:	52                   	push   edx
c00153b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153bf:	85 db                	test   ebx,ebx
c00153c1:	75 10                	jne    c00153d3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00153c3:	83 ec 0c             	sub    esp,0xc
c00153c6:	68 98 23 02 c0       	push   0xc0022398
c00153cb:	e8 11 bf ff ff       	call   c00112e1 <KePanic(char const*)>
c00153d0:	83 c4 10             	add    esp,0x10
c00153d3:	50                   	push   eax
c00153d4:	50                   	push   eax
c00153d5:	53                   	push   ebx
c00153d6:	68 c2 23 02 c0       	push   0xc00223c2
c00153db:	e8 2a 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00153e0:	89 d8                	mov    eax,ebx
c00153e2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153e6:	83 c4 14             	add    esp,0x14
c00153e9:	5b                   	pop    ebx
c00153ea:	5e                   	pop    esi
c00153eb:	ff e0                	jmp    eax
c00153ed:	66 90                	xchg   ax,ax
c00153ef:	90                   	nop

c00153f0 <userModeEntryPoint(void*)>:
c00153f0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00153f5:	83 e8 01             	sub    eax,0x1
c00153f8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00153fd:	75 01                	jne    c0015400 <userModeEntryPoint(void*)+0x10>
c00153ff:	fb                   	sti    
c0015400:	fb                   	sti    
c0015401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015406:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015409:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001540f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015413:	e9 27 ae fe ff       	jmp    c000023f <goToUsermode>

c0015418 <changeTSS>:
c0015418:	83 ec 14             	sub    esp,0x14
c001541b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015420:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015423:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015428:	c1 e2 15             	shl    edx,0x15
c001542b:	29 d0                	sub    eax,edx
c001542d:	50                   	push   eax
c001542e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0015433:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015439:	05 7c 11 00 00       	add    eax,0x117c
c001543e:	50                   	push   eax
c001543f:	e8 f8 3a ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015444:	83 c4 1c             	add    esp,0x1c
c0015447:	c3                   	ret    

c0015448 <switchToThread(ThreadControlBlock*)>:
c0015448:	57                   	push   edi
c0015449:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001544f:	56                   	push   esi
c0015450:	53                   	push   ebx
c0015451:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015455:	85 c9                	test   ecx,ecx
c0015457:	0f 85 8b 00 00 00    	jne    c00154e8 <switchToThread(ThreadControlBlock*)+0xa0>
c001545d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015461:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015467:	74 7b                	je     c00154e4 <switchToThread(ThreadControlBlock*)+0x9c>
c0015469:	b8 00 04 00 00       	mov    eax,0x400
c001546e:	29 d0                	sub    eax,edx
c0015470:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015473:	d1 f8                	sar    eax,1
c0015475:	01 d0                	add    eax,edx
c0015477:	90                   	nop
c0015478:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001547b:	e8 04 28 00 00       	call   c0017c84 <HalQueryPerformanceCounter()>
c0015480:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015485:	89 c6                	mov    esi,eax
c0015487:	89 d7                	mov    edi,edx
c0015489:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c001548f:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015494:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001549a:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00154a0:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00154a6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154ac:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00154b2:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00154b8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00154bb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00154be:	01 c6                	add    esi,eax
c00154c0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00154c3:	11 d7                	adc    edi,edx
c00154c5:	83 ec 0c             	sub    esp,0xc
c00154c8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00154cb:	53                   	push   ebx
c00154cc:	e8 a6 ad fe ff       	call   c0000277 <switchToThreadASM>
c00154d1:	0f 20 c0             	mov    eax,cr0
c00154d4:	83 c8 08             	or     eax,0x8
c00154d7:	0f 22 c0             	mov    cr0,eax
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	5b                   	pop    ebx
c00154de:	5e                   	pop    esi
c00154df:	5f                   	pop    edi
c00154e0:	c3                   	ret    
c00154e1:	8d 76 00             	lea    esi,[esi+0x0]
c00154e4:	31 c0                	xor    eax,eax
c00154e6:	eb 90                	jmp    c0015478 <switchToThread(ThreadControlBlock*)+0x30>
c00154e8:	5b                   	pop    ebx
c00154e9:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00154f3:	5e                   	pop    esi
c00154f4:	5f                   	pop    edi
c00154f5:	c3                   	ret    
c00154f6:	66 90                	xchg   ax,ax

c00154f8 <Process::addArgs(char**)>:
c00154f8:	57                   	push   edi
c00154f9:	56                   	push   esi
c00154fa:	53                   	push   ebx
c00154fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00154ff:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015503:	85 f6                	test   esi,esi
c0015505:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001550f:	74 4f                	je     c0015560 <Process::addArgs(char**)+0x68>
c0015511:	8b 06                	mov    eax,DWORD PTR [esi]
c0015513:	85 c0                	test   eax,eax
c0015515:	74 49                	je     c0015560 <Process::addArgs(char**)+0x68>
c0015517:	31 db                	xor    ebx,ebx
c0015519:	8d 76 00             	lea    esi,[esi+0x0]
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	50                   	push   eax
c0015520:	e8 5b b0 fe ff       	call   c0000580 <strlen>
c0015525:	83 c0 01             	add    eax,0x1
c0015528:	89 04 24             	mov    DWORD PTR [esp],eax
c001552b:	e8 a3 25 ff ff       	call   c0007ad3 <malloc>
c0015530:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015537:	5a                   	pop    edx
c0015538:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001553b:	83 c3 01             	add    ebx,0x1
c001553e:	59                   	pop    ecx
c001553f:	52                   	push   edx
c0015540:	50                   	push   eax
c0015541:	e8 0a b1 fe ff       	call   c0000650 <strcpy>
c0015546:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	83 c1 01             	add    ecx,0x1
c0015552:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015558:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001555b:	85 c0                	test   eax,eax
c001555d:	75 bd                	jne    c001551c <Process::addArgs(char**)+0x24>
c001555f:	90                   	nop
c0015560:	5b                   	pop    ebx
c0015561:	5e                   	pop    esi
c0015562:	5f                   	pop    edi
c0015563:	c3                   	ret    

c0015564 <Process::Process(char const*, Process*, char**)>:
c0015564:	56                   	push   esi
c0015565:	53                   	push   ebx
c0015566:	83 ec 14             	sub    esp,0x14
c0015569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556d:	05 0c 02 00 00       	add    eax,0x20c
c0015572:	bb 07 00 00 00       	mov    ebx,0x7
c0015577:	89 c6                	mov    esi,eax
c0015579:	8d 76 00             	lea    esi,[esi+0x0]
c001557c:	85 db                	test   ebx,ebx
c001557e:	78 14                	js     c0015594 <Process::Process(char const*, Process*, char**)+0x30>
c0015580:	83 ec 0c             	sub    esp,0xc
c0015583:	56                   	push   esi
c0015584:	e8 2f a6 00 00       	call   c001fbb8 <ThreadControlBlock::ThreadControlBlock()>
c0015589:	83 c4 10             	add    esp,0x10
c001558c:	83 c6 5f             	add    esi,0x5f
c001558f:	83 eb 01             	sub    ebx,0x1
c0015592:	eb e8                	jmp    c001557c <Process::Process(char const*, Process*, char**)+0x18>
c0015594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015598:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001559f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155a3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00155aa:	83 ec 0c             	sub    esp,0xc
c00155ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155b1:	e8 20 bb ff ff       	call   c00110d6 <KeNewProcessEnv(Process*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	89 c2                	mov    edx,eax
c00155bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155bf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00155c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00155d2:	a1 e0 35 02 c0       	mov    eax,ds:0xc00235e0
c00155d7:	8d 50 01             	lea    edx,[eax+0x1]
c00155da:	89 15 e0 35 02 c0    	mov    DWORD PTR ds:0xc00235e0,edx
c00155e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155e4:	89 02                	mov    DWORD PTR [edx],eax
c00155e6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00155ee:	83 ec 0c             	sub    esp,0xc
c00155f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155f5:	e8 d9 24 ff ff       	call   c0007ad3 <malloc>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	89 c3                	mov    ebx,eax
c00155ff:	83 ec 08             	sub    esp,0x8
c0015602:	6a 00                	push   0x0
c0015604:	53                   	push   ebx
c0015605:	e8 48 4a ff ff       	call   c000a052 <VAS::VAS(bool)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015611:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001561b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015629:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001562d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015633:	e8 c2 c0 ff ff       	call   c00116fa <KeInitSignals()>
c0015638:	89 c2                	mov    edx,eax
c001563a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015648:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001564e:	85 c0                	test   eax,eax
c0015650:	74 42                	je     c0015694 <Process::Process(char const*, Process*, char**)+0x130>
c0015652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015656:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001565c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015666:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001566c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015670:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015676:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001567c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015680:	05 0c 01 00 00       	add    eax,0x10c
c0015685:	83 ec 08             	sub    esp,0x8
c0015688:	52                   	push   edx
c0015689:	50                   	push   eax
c001568a:	e8 c1 af fe ff       	call   c0000650 <strcpy>
c001568f:	83 c4 10             	add    esp,0x10
c0015692:	eb 64                	jmp    c00156f8 <Process::Process(char const*, Process*, char**)+0x194>
c0015694:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001569c:	83 ec 0c             	sub    esp,0xc
c001569f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00156a3:	e8 2b 24 ff ff       	call   c0007ad3 <malloc>
c00156a8:	83 c4 10             	add    esp,0x10
c00156ab:	89 c3                	mov    ebx,eax
c00156ad:	83 ec 08             	sub    esp,0x8
c00156b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156b4:	53                   	push   ebx
c00156b5:	e8 b2 35 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00156ba:	83 c4 10             	add    esp,0x10
c00156bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00156c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00156d1:	83 ec 0c             	sub    esp,0xc
c00156d4:	50                   	push   eax
c00156d5:	e8 40 2e ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00156da:	83 c4 10             	add    esp,0x10
c00156dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e1:	05 0c 01 00 00       	add    eax,0x10c
c00156e6:	83 ec 08             	sub    esp,0x8
c00156e9:	68 e1 23 02 c0       	push   0xc00223e1
c00156ee:	50                   	push   eax
c00156ef:	e8 5c af fe ff       	call   c0000650 <strcpy>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	90                   	nop
c00156f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156fc:	83 c0 0c             	add    eax,0xc
c00156ff:	83 ec 08             	sub    esp,0x8
c0015702:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015706:	50                   	push   eax
c0015707:	e8 44 af fe ff       	call   c0000650 <strcpy>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	83 ec 08             	sub    esp,0x8
c0015712:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001571a:	e8 d9 fd ff ff       	call   c00154f8 <Process::addArgs(char**)>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	83 ec 08             	sub    esp,0x8
c0015725:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015729:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001572d:	e8 3f ed ff ff       	call   c0014471 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015732:	83 c4 10             	add    esp,0x10
c0015735:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015739:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001573d:	83 f0 01             	xor    eax,0x1
c0015740:	88 c2                	mov    dl,al
c0015742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015746:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001574c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015751:	83 ec 04             	sub    esp,0x4
c0015754:	50                   	push   eax
c0015755:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015759:	68 38 24 02 c0       	push   0xc0022438
c001575e:	e8 a7 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015763:	83 c4 10             	add    esp,0x10
c0015766:	90                   	nop
c0015767:	83 c4 14             	add    esp,0x14
c001576a:	5b                   	pop    ebx
c001576b:	5e                   	pop    esi
c001576c:	c3                   	ret    
c001576d:	90                   	nop
c001576e:	66 90                	xchg   ax,ax

c0015770 <Process::Process(bool, char const*, Process*, char**)>:
c0015770:	56                   	push   esi
c0015771:	53                   	push   ebx
c0015772:	83 ec 24             	sub    esp,0x24
c0015775:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015779:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001577d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015781:	05 0c 02 00 00       	add    eax,0x20c
c0015786:	bb 07 00 00 00       	mov    ebx,0x7
c001578b:	89 c6                	mov    esi,eax
c001578d:	8d 76 00             	lea    esi,[esi+0x0]
c0015790:	85 db                	test   ebx,ebx
c0015792:	78 14                	js     c00157a8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015794:	83 ec 0c             	sub    esp,0xc
c0015797:	56                   	push   esi
c0015798:	e8 1b a4 00 00       	call   c001fbb8 <ThreadControlBlock::ThreadControlBlock()>
c001579d:	83 c4 10             	add    esp,0x10
c00157a0:	83 c6 5f             	add    esi,0x5f
c00157a3:	83 eb 01             	sub    ebx,0x1
c00157a6:	eb e8                	jmp    c0015790 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00157a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157ac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00157b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00157be:	83 ec 0c             	sub    esp,0xc
c00157c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157c5:	e8 0c b9 ff ff       	call   c00110d6 <KeNewProcessEnv(Process*)>
c00157ca:	83 c4 10             	add    esp,0x10
c00157cd:	89 c2                	mov    edx,eax
c00157cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00157d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157dd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00157e6:	a1 e0 35 02 c0       	mov    eax,ds:0xc00235e0
c00157eb:	8d 50 01             	lea    edx,[eax+0x1]
c00157ee:	89 15 e0 35 02 c0    	mov    DWORD PTR ds:0xc00235e0,edx
c00157f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00157f8:	89 02                	mov    DWORD PTR [edx],eax
c00157fa:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015802:	83 ec 0c             	sub    esp,0xc
c0015805:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015809:	e8 c5 22 ff ff       	call   c0007ad3 <malloc>
c001580e:	83 c4 10             	add    esp,0x10
c0015811:	89 c3                	mov    ebx,eax
c0015813:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015818:	83 ec 08             	sub    esp,0x8
c001581b:	50                   	push   eax
c001581c:	53                   	push   ebx
c001581d:	e8 30 48 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015829:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001582f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015833:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001583d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015841:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015845:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001584b:	e8 aa be ff ff       	call   c00116fa <KeInitSignals()>
c0015850:	89 c2                	mov    edx,eax
c0015852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015856:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001585c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015860:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015866:	85 c0                	test   eax,eax
c0015868:	74 42                	je     c00158ac <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001586a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001586e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015874:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001587a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001587e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015884:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015888:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001588e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015894:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015898:	05 0c 01 00 00       	add    eax,0x10c
c001589d:	83 ec 08             	sub    esp,0x8
c00158a0:	52                   	push   edx
c00158a1:	50                   	push   eax
c00158a2:	e8 a9 ad fe ff       	call   c0000650 <strcpy>
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	eb 64                	jmp    c0015910 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00158ac:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00158b4:	83 ec 0c             	sub    esp,0xc
c00158b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00158bb:	e8 13 22 ff ff       	call   c0007ad3 <malloc>
c00158c0:	83 c4 10             	add    esp,0x10
c00158c3:	89 c3                	mov    ebx,eax
c00158c5:	83 ec 08             	sub    esp,0x8
c00158c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00158cc:	53                   	push   ebx
c00158cd:	e8 9a 33 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00158d2:	83 c4 10             	add    esp,0x10
c00158d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158d9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00158df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158e9:	83 ec 0c             	sub    esp,0xc
c00158ec:	50                   	push   eax
c00158ed:	e8 28 2c ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158f9:	05 0c 01 00 00       	add    eax,0x10c
c00158fe:	83 ec 08             	sub    esp,0x8
c0015901:	68 e1 23 02 c0       	push   0xc00223e1
c0015906:	50                   	push   eax
c0015907:	e8 44 ad fe ff       	call   c0000650 <strcpy>
c001590c:	83 c4 10             	add    esp,0x10
c001590f:	90                   	nop
c0015910:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015914:	83 c0 0c             	add    eax,0xc
c0015917:	83 ec 08             	sub    esp,0x8
c001591a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001591e:	50                   	push   eax
c001591f:	e8 2c ad fe ff       	call   c0000650 <strcpy>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	83 ec 08             	sub    esp,0x8
c001592a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001592e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015932:	e8 c1 fb ff ff       	call   c00154f8 <Process::addArgs(char**)>
c0015937:	83 c4 10             	add    esp,0x10
c001593a:	90                   	nop
c001593b:	83 c4 24             	add    esp,0x24
c001593e:	5b                   	pop    ebx
c001593f:	5e                   	pop    esi
c0015940:	c3                   	ret    
c0015941:	8d 76 00             	lea    esi,[esi+0x0]

c0015944 <taskStartupFunction>:
c0015944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015949:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001594c:	c3                   	ret    
c001594d:	90                   	nop
c001594e:	66 90                	xchg   ax,ax

c0015950 <Semaphore::Semaphore(int)>:
c0015950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015954:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015958:	89 10                	mov    DWORD PTR [eax],edx
c001595a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001595e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015965:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015969:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015974:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001597b:	90                   	nop
c001597c:	c3                   	ret    
c001597d:	90                   	nop
c001597e:	66 90                	xchg   ax,ax

c0015980 <Mutex::Mutex()>:
c0015980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015984:	6a 01                	push   0x1
c0015986:	50                   	push   eax
c0015987:	e8 c4 ff ff ff       	call   c0015950 <Semaphore::Semaphore(int)>
c001598c:	83 c4 08             	add    esp,0x8
c001598f:	90                   	nop
c0015990:	c3                   	ret    
c0015991:	90                   	nop
c0015992:	66 90                	xchg   ax,ax

c0015994 <Process::createThread(void (*)(void*), void*, int)>:
c0015994:	57                   	push   edi
c0015995:	31 c9                	xor    ecx,ecx
c0015997:	56                   	push   esi
c0015998:	53                   	push   ebx
c0015999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001599d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00159a4:	89 f2                	mov    edx,esi
c00159a6:	66 90                	xchg   ax,ax
c00159a8:	0f b7 c2             	movzx  eax,dx
c00159ab:	80 e2 01             	and    dl,0x1
c00159ae:	74 14                	je     c00159c4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00159b0:	d1 f8                	sar    eax,1
c00159b2:	83 c1 01             	add    ecx,0x1
c00159b5:	83 f9 10             	cmp    ecx,0x10
c00159b8:	89 c2                	mov    edx,eax
c00159ba:	75 ec                	jne    c00159a8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00159bc:	31 db                	xor    ebx,ebx
c00159be:	89 d8                	mov    eax,ebx
c00159c0:	5b                   	pop    ebx
c00159c1:	5e                   	pop    esi
c00159c2:	5f                   	pop    edi
c00159c3:	c3                   	ret    
c00159c4:	b8 01 00 00 00       	mov    eax,0x1
c00159c9:	d3 e0                	shl    eax,cl
c00159cb:	09 c6                	or     esi,eax
c00159cd:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00159d4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00159d7:	c1 e0 05             	shl    eax,0x5
c00159da:	29 c8                	sub    eax,ecx
c00159dc:	01 d8                	add    eax,ebx
c00159de:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00159e5:	75 0d                	jne    c00159f4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00159e7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00159f1:	8d 76 00             	lea    esi,[esi+0x0]
c00159f4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00159fa:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00159fd:	83 ec 0c             	sub    esp,0xc
c0015a00:	c1 e6 05             	shl    esi,0x5
c0015a03:	29 ce                	sub    esi,ecx
c0015a05:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015a08:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015a0b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015a11:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015a17:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015a1d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015a24:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015a2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a2e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015a34:	89 ca                	mov    edx,ecx
c0015a36:	f7 da                	neg    edx
c0015a38:	c1 e2 15             	shl    edx,0x15
c0015a3b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015a41:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015a47:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015a4b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015a55:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015a5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a5f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015a65:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015a6f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015a79:	68 00 01 00 00       	push   0x100
c0015a7e:	e8 50 20 ff ff       	call   c0007ad3 <malloc>
c0015a83:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015a86:	58                   	pop    eax
c0015a87:	5a                   	pop    edx
c0015a88:	53                   	push   ebx
c0015a89:	68 e4 96 02 c0       	push   0xc00296e4
c0015a8e:	e8 bd 9e 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a93:	83 c4 10             	add    esp,0x10
c0015a96:	89 d8                	mov    eax,ebx
c0015a98:	5b                   	pop    ebx
c0015a99:	5e                   	pop    esi
c0015a9a:	5f                   	pop    edi
c0015a9b:	c3                   	ret    

c0015a9c <Process::createUserThread()>:
c0015a9c:	83 ec 0c             	sub    esp,0xc
c0015a9f:	68 80 00 00 00       	push   0x80
c0015aa4:	6a 00                	push   0x0
c0015aa6:	68 f0 53 01 c0       	push   0xc00153f0
c0015aab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015aaf:	50                   	push   eax
c0015ab0:	e8 df fe ff ff       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c0015ab5:	83 c4 1c             	add    esp,0x1c
c0015ab8:	c3                   	ret    
c0015ab9:	8d 76 00             	lea    esi,[esi+0x0]

c0015abc <setupMultitasking(void (*)())>:
c0015abc:	56                   	push   esi
c0015abd:	53                   	push   ebx
c0015abe:	83 ec 04             	sub    esp,0x4
c0015ac1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ac5:	eb 11                	jmp    c0015ad8 <setupMultitasking(void (*)())+0x1c>
c0015ac7:	90                   	nop
c0015ac8:	83 ec 0c             	sub    esp,0xc
c0015acb:	68 e4 96 02 c0       	push   0xc00296e4
c0015ad0:	e8 bf 9d 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ad5:	83 c4 10             	add    esp,0x10
c0015ad8:	83 ec 0c             	sub    esp,0xc
c0015adb:	68 e4 96 02 c0       	push   0xc00296e4
c0015ae0:	e8 8b 9d 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	84 c0                	test   al,al
c0015aea:	74 dc                	je     c0015ac8 <setupMultitasking(void (*)())+0xc>
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	68 24 07 00 00       	push   0x724
c0015af4:	e8 da 1f ff ff       	call   c0007ad3 <malloc>
c0015af9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015b00:	6a 00                	push   0x0
c0015b02:	68 e5 23 02 c0       	push   0xc00223e5
c0015b07:	6a 01                	push   0x1
c0015b09:	50                   	push   eax
c0015b0a:	89 c3                	mov    ebx,eax
c0015b0c:	e8 5f fc ff ff       	call   c0015770 <Process::Process(bool, char const*, Process*, char**)>
c0015b11:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015b17:	83 c4 14             	add    esp,0x14
c0015b1a:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015b20:	50                   	push   eax
c0015b21:	e8 49 2c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015b26:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015b2d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015b37:	83 c8 01             	or     eax,0x1
c0015b3a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015b41:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015b4a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015b54:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015b5a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015b64:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015b6a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015b74:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015b7e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015b84:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015b8a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015b94:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015b9e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015ba5:	e8 29 1f ff ff       	call   c0007ad3 <malloc>
c0015baa:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015bb0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015bb6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015bbc:	5a                   	pop    edx
c0015bbd:	59                   	pop    ecx
c0015bbe:	68 e1 23 02 c0       	push   0xc00223e1
c0015bc3:	50                   	push   eax
c0015bc4:	e8 87 aa fe ff       	call   c0000650 <strcpy>
c0015bc9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015bd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015bd4:	83 c4 14             	add    esp,0x14
c0015bd7:	5b                   	pop    ebx
c0015bd8:	5e                   	pop    esi
c0015bd9:	e9 8b a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015bde:	66 90                	xchg   ax,ax

c0015be0 <schedule()>:
c0015be0:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015be6:	85 d2                	test   edx,edx
c0015be8:	74 0e                	je     c0015bf8 <schedule()+0x18>
c0015bea:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015bf4:	c3                   	ret    
c0015bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf8:	53                   	push   ebx
c0015bf9:	83 ec 14             	sub    esp,0x14
c0015bfc:	68 e4 96 02 c0       	push   0xc00296e4
c0015c01:	e8 6a 9c 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c06:	83 c4 10             	add    esp,0x10
c0015c09:	84 c0                	test   al,al
c0015c0b:	75 3f                	jne    c0015c4c <schedule()+0x6c>
c0015c0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015c15:	83 fa 01             	cmp    edx,0x1
c0015c18:	74 3a                	je     c0015c54 <schedule()+0x74>
c0015c1a:	66 90                	xchg   ax,ax
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	68 e4 96 02 c0       	push   0xc00296e4
c0015c24:	e8 63 9c 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c29:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015c30:	89 c3                	mov    ebx,eax
c0015c32:	e8 5d 9c 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c37:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015c3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c41:	e8 02 f8 ff ff       	call   c0015448 <switchToThread(ThreadControlBlock*)>
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	8d 76 00             	lea    esi,[esi+0x0]
c0015c4c:	83 c4 08             	add    esp,0x8
c0015c4f:	5b                   	pop    ebx
c0015c50:	c3                   	ret    
c0015c51:	8d 76 00             	lea    esi,[esi+0x0]
c0015c54:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015c5b:	83 ec 08             	sub    esp,0x8
c0015c5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c63:	50                   	push   eax
c0015c64:	68 e4 96 02 c0       	push   0xc00296e4
c0015c69:	e8 e2 9c 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	eb a9                	jmp    c0015c1c <schedule()+0x3c>
c0015c73:	90                   	nop

c0015c74 <Semaphore::tryAcquire()>:
c0015c74:	53                   	push   ebx
c0015c75:	83 ec 08             	sub    esp,0x8
c0015c78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c7c:	fa                   	cli    
c0015c7d:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015c83:	8d 42 01             	lea    eax,[edx+0x1]
c0015c86:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c8b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c90:	8d 58 01             	lea    ebx,[eax+0x1]
c0015c93:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015c99:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015c9c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015c9e:	7c 2c                	jl     c0015ccc <Semaphore::tryAcquire()+0x58>
c0015ca0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ca5:	85 c0                	test   eax,eax
c0015ca7:	75 0b                	jne    c0015cb4 <Semaphore::tryAcquire()+0x40>
c0015ca9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015cae:	85 c0                	test   eax,eax
c0015cb0:	75 5a                	jne    c0015d0c <Semaphore::tryAcquire()+0x98>
c0015cb2:	66 90                	xchg   ax,ax
c0015cb4:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015cba:	31 c0                	xor    eax,eax
c0015cbc:	85 d2                	test   edx,edx
c0015cbe:	75 04                	jne    c0015cc4 <Semaphore::tryAcquire()+0x50>
c0015cc0:	fb                   	sti    
c0015cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cc4:	83 c4 08             	add    esp,0x8
c0015cc7:	5b                   	pop    ebx
c0015cc8:	c3                   	ret    
c0015cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ccc:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015cd1:	83 c3 01             	add    ebx,0x1
c0015cd4:	85 c0                	test   eax,eax
c0015cd6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015cd9:	75 21                	jne    c0015cfc <Semaphore::tryAcquire()+0x88>
c0015cdb:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015ce1:	85 c9                	test   ecx,ecx
c0015ce3:	74 17                	je     c0015cfc <Semaphore::tryAcquire()+0x88>
c0015ce5:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015cef:	e8 ec fe ff ff       	call   c0015be0 <schedule()>
c0015cf4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cf9:	8d 50 ff             	lea    edx,[eax-0x1]
c0015cfc:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d02:	85 d2                	test   edx,edx
c0015d04:	b0 01                	mov    al,0x1
c0015d06:	75 bc                	jne    c0015cc4 <Semaphore::tryAcquire()+0x50>
c0015d08:	eb b6                	jmp    c0015cc0 <Semaphore::tryAcquire()+0x4c>
c0015d0a:	66 90                	xchg   ax,ax
c0015d0c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d16:	e8 c5 fe ff ff       	call   c0015be0 <schedule()>
c0015d1b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d20:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d23:	31 c0                	xor    eax,eax
c0015d25:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d2b:	85 d2                	test   edx,edx
c0015d2d:	75 95                	jne    c0015cc4 <Semaphore::tryAcquire()+0x50>
c0015d2f:	eb 8f                	jmp    c0015cc0 <Semaphore::tryAcquire()+0x4c>
c0015d31:	90                   	nop
c0015d32:	66 90                	xchg   ax,ax

c0015d34 <Semaphore::assertLocked(char const*)>:
c0015d34:	83 ec 0c             	sub    esp,0xc
c0015d37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d3b:	fa                   	cli    
c0015d3c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015d42:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d47:	83 c1 01             	add    ecx,0x1
c0015d4a:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015d50:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d53:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d59:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015d5b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015d5e:	7c 28                	jl     c0015d88 <Semaphore::assertLocked(char const*)+0x54>
c0015d60:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d65:	85 c0                	test   eax,eax
c0015d67:	75 0b                	jne    c0015d74 <Semaphore::assertLocked(char const*)+0x40>
c0015d69:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015d6e:	85 c0                	test   eax,eax
c0015d70:	75 32                	jne    c0015da4 <Semaphore::assertLocked(char const*)+0x70>
c0015d72:	66 90                	xchg   ax,ax
c0015d74:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d79:	83 e8 01             	sub    eax,0x1
c0015d7c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d81:	75 01                	jne    c0015d84 <Semaphore::assertLocked(char const*)+0x50>
c0015d83:	fb                   	sti    
c0015d84:	83 c4 0c             	add    esp,0xc
c0015d87:	c3                   	ret    
c0015d88:	83 ec 0c             	sub    esp,0xc
c0015d8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d8f:	52                   	push   edx
c0015d90:	e8 4c b5 ff ff       	call   c00112e1 <KePanic(char const*)>
c0015d95:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d9a:	83 c4 10             	add    esp,0x10
c0015d9d:	83 e8 01             	sub    eax,0x1
c0015da0:	eb be                	jmp    c0015d60 <Semaphore::assertLocked(char const*)+0x2c>
c0015da2:	66 90                	xchg   ax,ax
c0015da4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dae:	e8 2d fe ff ff       	call   c0015be0 <schedule()>
c0015db3:	eb bf                	jmp    c0015d74 <Semaphore::assertLocked(char const*)+0x40>
c0015db5:	8d 76 00             	lea    esi,[esi+0x0]

c0015db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015db8:	83 ec 0c             	sub    esp,0xc
c0015dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015dc7:	e8 14 fe ff ff       	call   c0015be0 <schedule()>
c0015dcc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dd1:	83 e8 01             	sub    eax,0x1
c0015dd4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dd9:	75 01                	jne    c0015ddc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015ddb:	fb                   	sti    
c0015ddc:	83 c4 0c             	add    esp,0xc
c0015ddf:	c3                   	ret    

c0015de0 <blockTask(TaskState)>:
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	fa                   	cli    
c0015de4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015de9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ded:	83 c0 01             	add    eax,0x1
c0015df0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dfa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015dfd:	e8 de fd ff ff       	call   c0015be0 <schedule()>
c0015e02:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e07:	83 e8 01             	sub    eax,0x1
c0015e0a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e0f:	75 03                	jne    c0015e14 <blockTask(TaskState)+0x34>
c0015e11:	fb                   	sti    
c0015e12:	66 90                	xchg   ax,ax
c0015e14:	83 c4 0c             	add    esp,0xc
c0015e17:	c3                   	ret    

c0015e18 <waitTask(int, int*, int)>:
c0015e18:	83 ec 18             	sub    esp,0x18
c0015e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e24:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015e27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e30:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015e33:	6a 07                	push   0x7
c0015e35:	e8 a6 ff ff ff       	call   c0015de0 <blockTask(TaskState)>
c0015e3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015e45:	85 d2                	test   edx,edx
c0015e47:	74 0b                	je     c0015e54 <waitTask(int, int*, int)+0x3c>
c0015e49:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015e4c:	89 02                	mov    DWORD PTR [edx],eax
c0015e4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e53:	90                   	nop
c0015e54:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015e57:	83 c4 0c             	add    esp,0xc
c0015e5a:	c3                   	ret    
c0015e5b:	90                   	nop

c0015e5c <milliTenthSleepUntil(unsigned int)>:
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e63:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015e69:	76 05                	jbe    c0015e70 <milliTenthSleepUntil(unsigned int)+0x14>
c0015e6b:	90                   	nop
c0015e6c:	83 c4 0c             	add    esp,0xc
c0015e6f:	c3                   	ret    
c0015e70:	fa                   	cli    
c0015e71:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015e77:	83 ec 08             	sub    esp,0x8
c0015e7a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015e80:	83 c2 01             	add    edx,0x1
c0015e83:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e89:	83 c1 01             	add    ecx,0x1
c0015e8c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e98:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea0:	50                   	push   eax
c0015ea1:	68 d8 96 02 c0       	push   0xc00296d8
c0015ea6:	e8 a5 9a 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015eb2:	e8 29 ff ff ff       	call   c0015de0 <blockTask(TaskState)>
c0015eb7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ebc:	83 c4 10             	add    esp,0x10
c0015ebf:	83 e8 01             	sub    eax,0x1
c0015ec2:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ec7:	85 c0                	test   eax,eax
c0015ec9:	75 09                	jne    c0015ed4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015ecb:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ed0:	85 c0                	test   eax,eax
c0015ed2:	75 14                	jne    c0015ee8 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015ed4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ed9:	83 e8 01             	sub    eax,0x1
c0015edc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ee1:	75 89                	jne    c0015e6c <milliTenthSleepUntil(unsigned int)+0x10>
c0015ee3:	fb                   	sti    
c0015ee4:	83 c4 0c             	add    esp,0xc
c0015ee7:	c3                   	ret    
c0015ee8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015ef2:	e8 e9 fc ff ff       	call   c0015be0 <schedule()>
c0015ef7:	eb db                	jmp    c0015ed4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015ef9:	8d 76 00             	lea    esi,[esi+0x0]

c0015efc <milliTenthSleep(unsigned int)>:
c0015efc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f00:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015f05:	01 c2                	add    edx,eax
c0015f07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015f0b:	e9 4c ff ff ff       	jmp    c0015e5c <milliTenthSleepUntil(unsigned int)>

c0015f10 <sleep(unsigned int)>:
c0015f10:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015f18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f1c:	eb de                	jmp    c0015efc <milliTenthSleep(unsigned int)>
c0015f1e:	66 90                	xchg   ax,ax

c0015f20 <Semaphore::acquire()>:
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f27:	fa                   	cli    
c0015f28:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f2d:	83 c0 01             	add    eax,0x1
c0015f30:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f35:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f3d:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f43:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015f46:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015f48:	7d 2e                	jge    c0015f78 <Semaphore::acquire()+0x58>
c0015f4a:	83 c1 01             	add    ecx,0x1
c0015f4d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f50:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f55:	85 c0                	test   eax,eax
c0015f57:	75 0b                	jne    c0015f64 <Semaphore::acquire()+0x44>
c0015f59:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f5e:	85 c0                	test   eax,eax
c0015f60:	75 66                	jne    c0015fc8 <Semaphore::acquire()+0xa8>
c0015f62:	66 90                	xchg   ax,ax
c0015f64:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f69:	83 e8 01             	sub    eax,0x1
c0015f6c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f71:	75 01                	jne    c0015f74 <Semaphore::acquire()+0x54>
c0015f73:	fb                   	sti    
c0015f74:	83 c4 0c             	add    esp,0xc
c0015f77:	c3                   	ret    
c0015f78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015f84:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015f87:	85 c9                	test   ecx,ecx
c0015f89:	74 51                	je     c0015fdc <Semaphore::acquire()+0xbc>
c0015f8b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015f8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f94:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015f97:	90                   	nop
c0015f98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f9d:	83 ec 0c             	sub    esp,0xc
c0015fa0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015fa3:	68 64 24 02 c0       	push   0xc0022464
c0015fa8:	e8 5d 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fad:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015fb4:	e8 27 fe ff ff       	call   c0015de0 <blockTask(TaskState)>
c0015fb9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015fbe:	83 c4 10             	add    esp,0x10
c0015fc1:	83 e8 01             	sub    eax,0x1
c0015fc4:	eb 8a                	jmp    c0015f50 <Semaphore::acquire()+0x30>
c0015fc6:	66 90                	xchg   ax,ax
c0015fc8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015fd2:	e8 09 fc ff ff       	call   c0015be0 <schedule()>
c0015fd7:	eb 8b                	jmp    c0015f64 <Semaphore::acquire()+0x44>
c0015fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015fe4:	eb b2                	jmp    c0015f98 <Semaphore::acquire()+0x78>
c0015fe6:	66 90                	xchg   ax,ax

c0015fe8 <taskReturned>:
c0015fe8:	83 ec 18             	sub    esp,0x18
c0015feb:	68 84 24 02 c0       	push   0xc0022484
c0015ff0:	e8 ec b2 ff ff       	call   c00112e1 <KePanic(char const*)>
c0015ff5:	83 c4 10             	add    esp,0x10
c0015ff8:	83 ec 0c             	sub    esp,0xc
c0015ffb:	6a 02                	push   0x2
c0015ffd:	e8 de fd ff ff       	call   c0015de0 <blockTask(TaskState)>
c0016002:	fa                   	cli    
c0016003:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016008:	83 c0 01             	add    eax,0x1
c001600b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016010:	e8 cb fb ff ff       	call   c0015be0 <schedule()>
c0016015:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001601a:	83 c4 10             	add    esp,0x10
c001601d:	83 e8 01             	sub    eax,0x1
c0016020:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016025:	85 c0                	test   eax,eax
c0016027:	75 cf                	jne    c0015ff8 <taskReturned+0x10>
c0016029:	fb                   	sti    
c001602a:	eb cc                	jmp    c0015ff8 <taskReturned+0x10>

c001602c <Thr::processFromPID(int)>:
c001602c:	57                   	push   edi
c001602d:	56                   	push   esi
c001602e:	53                   	push   ebx
c001602f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016033:	fa                   	cli    
c0016034:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c001603a:	83 ec 0c             	sub    esp,0xc
c001603d:	68 e4 96 02 c0       	push   0xc00296e4
c0016042:	83 c1 01             	add    ecx,0x1
c0016045:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c001604b:	e8 3c 98 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016050:	83 c4 10             	add    esp,0x10
c0016053:	89 c7                	mov    edi,eax
c0016055:	eb 15                	jmp    c001606c <Thr::processFromPID(int)+0x40>
c0016057:	90                   	nop
c0016058:	83 ec 0c             	sub    esp,0xc
c001605b:	68 e4 96 02 c0       	push   0xc00296e4
c0016060:	e8 27 98 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016065:	83 c4 10             	add    esp,0x10
c0016068:	39 f8                	cmp    eax,edi
c001606a:	74 50                	je     c00160bc <Thr::processFromPID(int)+0x90>
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	68 e4 96 02 c0       	push   0xc00296e4
c0016074:	e8 13 98 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016079:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016080:	89 c3                	mov    ebx,eax
c0016082:	e8 0d 98 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016087:	58                   	pop    eax
c0016088:	5a                   	pop    edx
c0016089:	53                   	push   ebx
c001608a:	68 e4 96 02 c0       	push   0xc00296e4
c001608f:	e8 bc 98 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016094:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016097:	83 c4 10             	add    esp,0x10
c001609a:	39 30                	cmp    DWORD PTR [eax],esi
c001609c:	75 ba                	jne    c0016058 <Thr::processFromPID(int)+0x2c>
c001609e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160a3:	83 e8 01             	sub    eax,0x1
c00160a6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160ab:	74 0b                	je     c00160b8 <Thr::processFromPID(int)+0x8c>
c00160ad:	8d 76 00             	lea    esi,[esi+0x0]
c00160b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160b3:	90                   	nop
c00160b4:	5b                   	pop    ebx
c00160b5:	5e                   	pop    esi
c00160b6:	5f                   	pop    edi
c00160b7:	c3                   	ret    
c00160b8:	fb                   	sti    
c00160b9:	eb f5                	jmp    c00160b0 <Thr::processFromPID(int)+0x84>
c00160bb:	90                   	nop
c00160bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160c1:	8d 50 ff             	lea    edx,[eax-0x1]
c00160c4:	31 c0                	xor    eax,eax
c00160c6:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00160cc:	85 d2                	test   edx,edx
c00160ce:	75 e4                	jne    c00160b4 <Thr::processFromPID(int)+0x88>
c00160d0:	fb                   	sti    
c00160d1:	5b                   	pop    ebx
c00160d2:	5e                   	pop    esi
c00160d3:	5f                   	pop    edi
c00160d4:	c3                   	ret    
c00160d5:	8d 76 00             	lea    esi,[esi+0x0]

c00160d8 <unblockTask(ThreadControlBlock*)>:
c00160d8:	53                   	push   ebx
c00160d9:	83 ec 08             	sub    esp,0x8
c00160dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160e0:	fa                   	cli    
c00160e1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160e6:	83 c0 01             	add    eax,0x1
c00160e9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00160f1:	85 c0                	test   eax,eax
c00160f3:	74 67                	je     c001615c <unblockTask(ThreadControlBlock*)+0x84>
c00160f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00160f8:	83 f8 01             	cmp    eax,0x1
c00160fb:	74 37                	je     c0016134 <unblockTask(ThreadControlBlock*)+0x5c>
c00160fd:	83 ec 0c             	sub    esp,0xc
c0016100:	68 e4 96 02 c0       	push   0xc00296e4
c0016105:	e8 82 97 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001610a:	83 c4 10             	add    esp,0x10
c001610d:	85 c0                	test   eax,eax
c001610f:	75 1b                	jne    c001612c <unblockTask(ThreadControlBlock*)+0x54>
c0016111:	eb 5d                	jmp    c0016170 <unblockTask(ThreadControlBlock*)+0x98>
c0016113:	90                   	nop
c0016114:	83 ec 08             	sub    esp,0x8
c0016117:	50                   	push   eax
c0016118:	68 e4 96 02 c0       	push   0xc00296e4
c001611d:	e8 8a 9a 00 00       	call   c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016122:	83 c4 10             	add    esp,0x10
c0016125:	85 c0                	test   eax,eax
c0016127:	74 47                	je     c0016170 <unblockTask(ThreadControlBlock*)+0x98>
c0016129:	8d 76 00             	lea    esi,[esi+0x0]
c001612c:	39 c3                	cmp    ebx,eax
c001612e:	75 e4                	jne    c0016114 <unblockTask(ThreadControlBlock*)+0x3c>
c0016130:	eb 12                	jmp    c0016144 <unblockTask(ThreadControlBlock*)+0x6c>
c0016132:	66 90                	xchg   ax,ax
c0016134:	83 ec 0c             	sub    esp,0xc
c0016137:	68 03 24 02 c0       	push   0xc0022403
c001613c:	e8 c9 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016149:	83 e8 01             	sub    eax,0x1
c001614c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016151:	75 01                	jne    c0016154 <unblockTask(ThreadControlBlock*)+0x7c>
c0016153:	fb                   	sti    
c0016154:	83 c4 08             	add    esp,0x8
c0016157:	5b                   	pop    ebx
c0016158:	c3                   	ret    
c0016159:	8d 76 00             	lea    esi,[esi+0x0]
c001615c:	83 ec 0c             	sub    esp,0xc
c001615f:	68 ec 23 02 c0       	push   0xc00223ec
c0016164:	e8 a1 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	eb d6                	jmp    c0016144 <unblockTask(ThreadControlBlock*)+0x6c>
c001616e:	66 90                	xchg   ax,ax
c0016170:	83 ec 08             	sub    esp,0x8
c0016173:	53                   	push   ebx
c0016174:	68 e4 96 02 c0       	push   0xc00296e4
c0016179:	e8 d2 97 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001617e:	83 c4 10             	add    esp,0x10
c0016181:	eb c1                	jmp    c0016144 <unblockTask(ThreadControlBlock*)+0x6c>
c0016183:	90                   	nop

c0016184 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016184:	55                   	push   ebp
c0016185:	57                   	push   edi
c0016186:	56                   	push   esi
c0016187:	53                   	push   ebx
c0016188:	83 ec 1c             	sub    esp,0x1c
c001618b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001618f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016192:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016198:	85 ed                	test   ebp,ebp
c001619a:	7e 28                	jle    c00161c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001619c:	31 f6                	xor    esi,esi
c001619e:	66 90                	xchg   ax,ax
c00161a0:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00161a7:	83 ec 0c             	sub    esp,0xc
c00161aa:	83 c6 01             	add    esi,0x1
c00161ad:	57                   	push   edi
c00161ae:	e8 30 19 ff ff       	call   c0007ae3 <free>
c00161b3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161b6:	83 c4 10             	add    esp,0x10
c00161b9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00161bf:	7f df                	jg     c00161a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00161c1:	8d 76 00             	lea    esi,[esi+0x0]
c00161c4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00161ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00161d3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00161d6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00161d9:	d3 c0                	rol    eax,cl
c00161db:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00161e2:	21 c8                	and    eax,ecx
c00161e4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00161eb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161ee:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00161f6:	89 f7                	mov    edi,esi
c00161f8:	0f 85 72 01 00 00    	jne    c0016370 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00161fe:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016204:	85 ed                	test   ebp,ebp
c0016206:	74 1c                	je     c0016224 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016208:	83 ec 0c             	sub    esp,0xc
c001620b:	55                   	push   ebp
c001620c:	e8 e1 ad ff ff       	call   c0010ff2 <EnvVarContainer::~EnvVarContainer()>
c0016211:	59                   	pop    ecx
c0016212:	5e                   	pop    esi
c0016213:	6a 0c                	push   0xc
c0016215:	55                   	push   ebp
c0016216:	e8 f1 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001621b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001621e:	83 c4 10             	add    esp,0x10
c0016221:	89 f7                	mov    edi,esi
c0016223:	90                   	nop
c0016224:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001622a:	85 c0                	test   eax,eax
c001622c:	0f 84 b2 00 00 00    	je     c00162e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016232:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016235:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016239:	31 c9                	xor    ecx,ecx
c001623b:	eb 17                	jmp    c0016254 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001623d:	8d 76 00             	lea    esi,[esi+0x0]
c0016240:	83 c1 01             	add    ecx,0x1
c0016243:	83 f9 10             	cmp    ecx,0x10
c0016246:	0f 84 98 00 00 00    	je     c00162e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001624c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016252:	66 90                	xchg   ax,ax
c0016254:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001625b:	d3 fa                	sar    edx,cl
c001625d:	80 e2 01             	and    dl,0x1
c0016260:	74 de                	je     c0016240 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016262:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016265:	c1 e2 05             	shl    edx,0x5
c0016268:	29 ca                	sub    edx,ecx
c001626a:	01 d0                	add    eax,edx
c001626c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016272:	83 fd 07             	cmp    ebp,0x7
c0016275:	75 c9                	jne    c0016240 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016277:	05 40 02 00 00       	add    eax,0x240
c001627c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001627f:	83 fd ff             	cmp    ebp,0xffffffff
c0016282:	0f 8c f0 00 00 00    	jl     c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016288:	0f 84 ae 01 00 00    	je     c001643c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001628e:	85 ed                	test   ebp,ebp
c0016290:	0f 84 92 01 00 00    	je     c0016428 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016296:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016298:	75 a6                	jne    c0016240 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001629a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001629e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162a4:	01 d0                	add    eax,edx
c00162a6:	66 90                	xchg   ax,ax
c00162a8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00162ac:	83 ec 0c             	sub    esp,0xc
c00162af:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00162b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00162be:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00162c5:	50                   	push   eax
c00162c6:	e8 0d fe ff ff       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c00162cb:	83 c4 10             	add    esp,0x10
c00162ce:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162d1:	89 f7                	mov    edi,esi
c00162d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162d7:	83 c1 01             	add    ecx,0x1
c00162da:	83 f9 10             	cmp    ecx,0x10
c00162dd:	0f 85 69 ff ff ff    	jne    c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00162e3:	90                   	nop
c00162e4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00162ea:	85 c0                	test   eax,eax
c00162ec:	74 62                	je     c0016350 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00162ee:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00162f4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00162fa:	74 54                	je     c0016350 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	68 e4 96 02 c0       	push   0xc00296e4
c0016304:	e8 83 95 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016309:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016310:	89 c7                	mov    edi,eax
c0016312:	e8 59 95 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016317:	83 c4 10             	add    esp,0x10
c001631a:	84 c0                	test   al,al
c001631c:	0f 84 ce 00 00 00    	je     c00163f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016322:	66 90                	xchg   ax,ax
c0016324:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016327:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001632d:	85 d2                	test   edx,edx
c001632f:	74 0f                	je     c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016331:	8b 02                	mov    eax,DWORD PTR [edx]
c0016333:	83 ec 0c             	sub    esp,0xc
c0016336:	52                   	push   edx
c0016337:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001633a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001633d:	83 c4 10             	add    esp,0x10
c0016340:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001634a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001634d:	8d 76 00             	lea    esi,[esi+0x0]
c0016350:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016356:	85 db                	test   ebx,ebx
c0016358:	74 16                	je     c0016370 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	53                   	push   ebx
c001635e:	e8 2d 38 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016363:	58                   	pop    eax
c0016364:	5a                   	pop    edx
c0016365:	6a 14                	push   0x14
c0016367:	53                   	push   ebx
c0016368:	e8 9f 44 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	83 c4 1c             	add    esp,0x1c
c0016373:	5b                   	pop    ebx
c0016374:	5e                   	pop    esi
c0016375:	5f                   	pop    edi
c0016376:	5d                   	pop    ebp
c0016377:	c3                   	ret    
c0016378:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001637c:	83 ec 0c             	sub    esp,0xc
c001637f:	68 b8 24 02 c0       	push   0xc00224b8
c0016384:	e8 58 af ff ff       	call   c00112e1 <KePanic(char const*)>
c0016389:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001638c:	83 c4 10             	add    esp,0x10
c001638f:	89 f7                	mov    edi,esi
c0016391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016395:	e9 a6 fe ff ff       	jmp    c0016240 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001639a:	66 90                	xchg   ax,ax
c001639c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163a2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00163a8:	75 1e                	jne    c00163c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	68 20 25 02 c0       	push   0xc0022520
c00163b2:	e8 53 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00163b7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00163be:	e8 1d fa ff ff       	call   c0015de0 <blockTask(TaskState)>
c00163c3:	83 c4 10             	add    esp,0x10
c00163c6:	66 90                	xchg   ax,ax
c00163c8:	83 ec 08             	sub    esp,0x8
c00163cb:	56                   	push   esi
c00163cc:	68 e4 96 02 c0       	push   0xc00296e4
c00163d1:	e8 7a 95 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163d6:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163dd:	e8 aa 94 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163e2:	83 c4 10             	add    esp,0x10
c00163e5:	39 f8                	cmp    eax,edi
c00163e7:	0f 84 37 ff ff ff    	je     c0016324 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00163ed:	8d 76 00             	lea    esi,[esi+0x0]
c00163f0:	83 ec 0c             	sub    esp,0xc
c00163f3:	68 e4 96 02 c0       	push   0xc00296e4
c00163f8:	e8 8f 94 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163fd:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016404:	89 c6                	mov    esi,eax
c0016406:	e8 89 94 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001640b:	83 c4 10             	add    esp,0x10
c001640e:	39 f3                	cmp    ebx,esi
c0016410:	74 b6                	je     c00163c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016412:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016415:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016418:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001641e:	75 a8                	jne    c00163c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016420:	e9 77 ff ff ff       	jmp    c001639c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016425:	8d 76 00             	lea    esi,[esi+0x0]
c0016428:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	68 ec 24 02 c0       	push   0xc00224ec
c0016434:	e9 4b ff ff ff       	jmp    c0016384 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016439:	8d 76 00             	lea    esi,[esi+0x0]
c001643c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016440:	8b 36                	mov    esi,DWORD PTR [esi]
c0016442:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016445:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016448:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001644e:	01 d7                	add    edi,edx
c0016450:	89 f8                	mov    eax,edi
c0016452:	e9 51 fe ff ff       	jmp    c00162a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016457:	90                   	nop

c0016458 <cleanerTaskFunction(void*)>:
c0016458:	53                   	push   ebx
c0016459:	83 ec 08             	sub    esp,0x8
c001645c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016461:	83 e8 01             	sub    eax,0x1
c0016464:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016469:	75 01                	jne    c001646c <cleanerTaskFunction(void*)+0x14>
c001646b:	fb                   	sti    
c001646c:	fa                   	cli    
c001646d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016472:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016479:	8d 50 01             	lea    edx,[eax+0x1]
c001647c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016482:	0f 84 c4 00 00 00    	je     c001654c <cleanerTaskFunction(void*)+0xf4>
c0016488:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001648d:	85 c0                	test   eax,eax
c001648f:	75 03                	jne    c0016494 <cleanerTaskFunction(void*)+0x3c>
c0016491:	fb                   	sti    
c0016492:	66 90                	xchg   ax,ax
c0016494:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001649b:	fa                   	cli    
c001649c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164a2:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164a8:	83 c2 01             	add    edx,0x1
c00164ab:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164b1:	83 c1 01             	add    ecx,0x1
c00164b4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164ba:	fa                   	cli    
c00164bb:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00164c1:	83 c3 01             	add    ebx,0x1
c00164c4:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00164ca:	eb 28                	jmp    c00164f4 <cleanerTaskFunction(void*)+0x9c>
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	68 cc 96 02 c0       	push   0xc00296cc
c00164d4:	e8 b3 93 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164d9:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00164e0:	89 c3                	mov    ebx,eax
c00164e2:	e8 ad 93 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164ea:	e8 95 fc ff ff       	call   c0016184 <cleanupTerminatedTask(ThreadControlBlock*)>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	66 90                	xchg   ax,ax
c00164f4:	83 ec 0c             	sub    esp,0xc
c00164f7:	68 cc 96 02 c0       	push   0xc00296cc
c00164fc:	e8 6f 93 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016501:	83 c4 10             	add    esp,0x10
c0016504:	84 c0                	test   al,al
c0016506:	74 c4                	je     c00164cc <cleanerTaskFunction(void*)+0x74>
c0016508:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001650d:	83 e8 01             	sub    eax,0x1
c0016510:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016515:	75 01                	jne    c0016518 <cleanerTaskFunction(void*)+0xc0>
c0016517:	fb                   	sti    
c0016518:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001651d:	83 e8 01             	sub    eax,0x1
c0016520:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016525:	0f 85 31 ff ff ff    	jne    c001645c <cleanerTaskFunction(void*)+0x4>
c001652b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016530:	85 c0                	test   eax,eax
c0016532:	0f 84 24 ff ff ff    	je     c001645c <cleanerTaskFunction(void*)+0x4>
c0016538:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016542:	e8 99 f6 ff ff       	call   c0015be0 <schedule()>
c0016547:	e9 10 ff ff ff       	jmp    c001645c <cleanerTaskFunction(void*)+0x4>
c001654c:	83 ec 0c             	sub    esp,0xc
c001654f:	6a 02                	push   0x2
c0016551:	e8 62 f8 ff ff       	call   c0015db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016556:	83 c4 10             	add    esp,0x10
c0016559:	e9 36 ff ff ff       	jmp    c0016494 <cleanerTaskFunction(void*)+0x3c>
c001655e:	66 90                	xchg   ax,ax

c0016560 <terminateTask(int)>:
c0016560:	83 ec 14             	sub    esp,0x14
c0016563:	fa                   	cli    
c0016564:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001656a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016570:	83 c2 01             	add    edx,0x1
c0016573:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016579:	83 c1 01             	add    ecx,0x1
c001657c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016582:	fa                   	cli    
c0016583:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001658c:	83 c0 01             	add    eax,0x1
c001658f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016594:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016599:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001659c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165a1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165a4:	50                   	push   eax
c00165a5:	68 cc 96 02 c0       	push   0xc00296cc
c00165aa:	e8 a1 93 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165b4:	83 c4 10             	add    esp,0x10
c00165b7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00165be:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00165c3:	85 c0                	test   eax,eax
c00165c5:	74 65                	je     c001662c <terminateTask(int)+0xcc>
c00165c7:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	50                   	push   eax
c00165d2:	e8 01 fb ff ff       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c00165d7:	83 c4 10             	add    esp,0x10
c00165da:	66 90                	xchg   ax,ax
c00165dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165e1:	83 e8 01             	sub    eax,0x1
c00165e4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165e9:	75 01                	jne    c00165ec <terminateTask(int)+0x8c>
c00165eb:	fb                   	sti    
c00165ec:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165f1:	83 e8 01             	sub    eax,0x1
c00165f4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165f9:	75 09                	jne    c0016604 <terminateTask(int)+0xa4>
c00165fb:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0016602:	75 3c                	jne    c0016640 <terminateTask(int)+0xe0>
c0016604:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016609:	83 e8 01             	sub    eax,0x1
c001660c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016611:	75 01                	jne    c0016614 <terminateTask(int)+0xb4>
c0016613:	fb                   	sti    
c0016614:	fa                   	cli    
c0016615:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001661a:	83 c0 01             	add    eax,0x1
c001661d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016622:	66 90                	xchg   ax,ax
c0016624:	e8 b7 f5 ff ff       	call   c0015be0 <schedule()>
c0016629:	eb d9                	jmp    c0016604 <terminateTask(int)+0xa4>
c001662b:	90                   	nop
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	68 1a 24 02 c0       	push   0xc002241a
c0016634:	e8 d1 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016639:	83 c4 10             	add    esp,0x10
c001663c:	eb 9e                	jmp    c00165dc <terminateTask(int)+0x7c>
c001663e:	66 90                	xchg   ax,ax
c0016640:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001664a:	eb d8                	jmp    c0016624 <terminateTask(int)+0xc4>

c001664c <Thr::terminateFromIRQ(int)>:
c001664c:	83 ec 18             	sub    esp,0x18
c001664f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016653:	50                   	push   eax
c0016654:	e8 07 ff ff ff       	call   c0016560 <terminateTask(int)>
c0016659:	90                   	nop
c001665a:	66 90                	xchg   ax,ax

c001665c <Semaphore::release()>:
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016663:	fa                   	cli    
c0016664:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016669:	83 c0 01             	add    eax,0x1
c001666c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016671:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016676:	8d 48 01             	lea    ecx,[eax+0x1]
c0016679:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001667f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016682:	85 c9                	test   ecx,ecx
c0016684:	74 42                	je     c00166c8 <Semaphore::release()+0x6c>
c0016686:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016689:	83 ec 0c             	sub    esp,0xc
c001668c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001668f:	51                   	push   ecx
c0016690:	e8 43 fa ff ff       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c0016695:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	83 e8 01             	sub    eax,0x1
c00166a0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166a5:	85 c0                	test   eax,eax
c00166a7:	75 0b                	jne    c00166b4 <Semaphore::release()+0x58>
c00166a9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00166ae:	85 c0                	test   eax,eax
c00166b0:	75 22                	jne    c00166d4 <Semaphore::release()+0x78>
c00166b2:	66 90                	xchg   ax,ax
c00166b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166b9:	83 e8 01             	sub    eax,0x1
c00166bc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166c1:	75 01                	jne    c00166c4 <Semaphore::release()+0x68>
c00166c3:	fb                   	sti    
c00166c4:	83 c4 0c             	add    esp,0xc
c00166c7:	c3                   	ret    
c00166c8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00166cb:	83 e9 01             	sub    ecx,0x1
c00166ce:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00166d1:	eb cd                	jmp    c00166a0 <Semaphore::release()+0x44>
c00166d3:	90                   	nop
c00166d4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00166de:	e8 fd f4 ff ff       	call   c0015be0 <schedule()>
c00166e3:	eb cf                	jmp    c00166b4 <Semaphore::release()+0x58>
c00166e5:	8d 76 00             	lea    esi,[esi+0x0]

c00166e8 <__static_initialization_and_destruction_0(int, int)>:
c00166e8:	83 ec 0c             	sub    esp,0xc
c00166eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00166f0:	0f 85 8e 00 00 00    	jne    c0016784 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00166f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00166fe:	0f 85 80 00 00 00    	jne    c0016784 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016704:	83 ec 0c             	sub    esp,0xc
c0016707:	68 e4 96 02 c0       	push   0xc00296e4
c001670c:	e8 f3 94 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016711:	83 c4 10             	add    esp,0x10
c0016714:	83 ec 04             	sub    esp,0x4
c0016717:	68 f0 30 02 c0       	push   0xc00230f0
c001671c:	68 e4 96 02 c0       	push   0xc00296e4
c0016721:	68 b4 fb 01 c0       	push   0xc001fbb4
c0016726:	e8 91 40 ff ff       	call   c000a7bc <__cxa_atexit>
c001672b:	83 c4 10             	add    esp,0x10
c001672e:	83 ec 0c             	sub    esp,0xc
c0016731:	68 d8 96 02 c0       	push   0xc00296d8
c0016736:	e8 c9 94 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001673b:	83 c4 10             	add    esp,0x10
c001673e:	83 ec 04             	sub    esp,0x4
c0016741:	68 f0 30 02 c0       	push   0xc00230f0
c0016746:	68 d8 96 02 c0       	push   0xc00296d8
c001674b:	68 b4 fb 01 c0       	push   0xc001fbb4
c0016750:	e8 67 40 ff ff       	call   c000a7bc <__cxa_atexit>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	83 ec 0c             	sub    esp,0xc
c001675b:	68 cc 96 02 c0       	push   0xc00296cc
c0016760:	e8 9f 94 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016765:	83 c4 10             	add    esp,0x10
c0016768:	83 ec 04             	sub    esp,0x4
c001676b:	68 f0 30 02 c0       	push   0xc00230f0
c0016770:	68 cc 96 02 c0       	push   0xc00296cc
c0016775:	68 b4 fb 01 c0       	push   0xc001fbb4
c001677a:	e8 3d 40 ff ff       	call   c000a7bc <__cxa_atexit>
c001677f:	83 c4 10             	add    esp,0x10
c0016782:	66 90                	xchg   ax,ax
c0016784:	90                   	nop
c0016785:	83 c4 0c             	add    esp,0xc
c0016788:	c3                   	ret    
c0016789:	8d 76 00             	lea    esi,[esi+0x0]

c001678c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	83 ec 08             	sub    esp,0x8
c0016792:	68 ff ff 00 00       	push   0xffff
c0016797:	6a 01                	push   0x1
c0016799:	e8 4a ff ff ff       	call   c00166e8 <__static_initialization_and_destruction_0(int, int)>
c001679e:	83 c4 10             	add    esp,0x10
c00167a1:	83 c4 0c             	add    esp,0xc
c00167a4:	c3                   	ret    

c00167a5 <Vm::inbv(unsigned short)>:
c00167a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167a9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167ae:	75 06                	jne    c00167b6 <Vm::inbv(unsigned short)+0x11>
c00167b0:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c00167b5:	c3                   	ret    
c00167b6:	ec                   	in     al,dx
c00167b7:	c3                   	ret    

c00167b8 <Vm::outbv(unsigned short, unsigned char)>:
c00167b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167c0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167c5:	75 25                	jne    c00167ec <Vm::outbv(unsigned short, unsigned char)+0x34>
c00167c7:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00167cd:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00167d3:	8d 51 01             	lea    edx,[ecx+0x1]
c00167d6:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00167dc:	83 fa 20             	cmp    edx,0x20
c00167df:	75 0c                	jne    c00167ed <Vm::outbv(unsigned short, unsigned char)+0x35>
c00167e1:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00167eb:	c3                   	ret    
c00167ec:	ee                   	out    dx,al
c00167ed:	c3                   	ret    

c00167ee <Vm::realToLinear(unsigned short, unsigned short)>:
c00167ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00167f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00167f8:	c1 e0 04             	shl    eax,0x4
c00167fb:	01 d0                	add    eax,edx
c00167fd:	c3                   	ret    

c00167fe <Vm::getSegment(unsigned int)>:
c00167fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016802:	c1 e8 10             	shr    eax,0x10
c0016805:	c3                   	ret    

c0016806 <Vm::getOffset(unsigned int)>:
c0016806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001680a:	c3                   	ret    

c001680b <Vm::mainloop2()>:
c001680b:	83 ec 18             	sub    esp,0x18
c001680e:	fa                   	cli    
c001680f:	6a 02                	push   0x2
c0016811:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016817:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c001681e:	e8 95 f5 ff ff       	call   c0015db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016828:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001682c:	52                   	push   edx
c001682d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016831:	52                   	push   edx
c0016832:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016836:	52                   	push   edx
c0016837:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001683b:	50                   	push   eax
c001683c:	e8 ce 99 fe ff       	call   c000020f <goToVM86>
c0016841:	83 c4 2c             	add    esp,0x2c
c0016844:	c3                   	ret    

c0016845 <Vm::mainVm8086Loop(void*)>:
c0016845:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001684a:	48                   	dec    eax
c001684b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016850:	75 01                	jne    c0016853 <Vm::mainVm8086Loop(void*)+0xe>
c0016852:	fb                   	sti    
c0016853:	eb b6                	jmp    c001680b <Vm::mainloop2()>

c0016855 <Vm::mainloop3(unsigned long)>:
c0016855:	83 ec 18             	sub    esp,0x18
c0016858:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001685c:	fa                   	cli    
c001685d:	6a 02                	push   0x2
c001685f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016865:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c001686c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016871:	e8 42 f5 ff ff       	call   c0015db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016876:	83 c4 1c             	add    esp,0x1c
c0016879:	eb 90                	jmp    c001680b <Vm::mainloop2()>

c001687b <Vm::initialise8086()>:
c001687b:	83 ec 0c             	sub    esp,0xc
c001687e:	68 80 00 00 00       	push   0x80
c0016883:	6a 00                	push   0x0
c0016885:	68 45 68 01 c0       	push   0xc0016845
c001688a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016890:	e8 ff f0 ff ff       	call   c0015994 <Process::createThread(void (*)(void*), void*, int)>
c0016895:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001689c:	68 00 01 00 00       	push   0x100
c00168a1:	6a 00                	push   0x0
c00168a3:	6a 00                	push   0x0
c00168a5:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c00168aa:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00168af:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00168b5:	e8 4e 36 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168ba:	83 c4 2c             	add    esp,0x2c
c00168bd:	c3                   	ret    

c00168be <Vm::finish8086()>:
c00168be:	53                   	push   ebx
c00168bf:	83 ec 08             	sub    esp,0x8
c00168c2:	fa                   	cli    
c00168c3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168c9:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00168d0:	75 15                	jne    c00168e7 <Vm::finish8086()+0x29>
c00168d2:	e8 09 f3 ff ff       	call   c0015be0 <schedule()>
c00168d7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168dc:	48                   	dec    eax
c00168dd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168e2:	75 de                	jne    c00168c2 <Vm::finish8086()+0x4>
c00168e4:	fb                   	sti    
c00168e5:	eb db                	jmp    c00168c2 <Vm::finish8086()+0x4>
c00168e7:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00168f7:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00168fd:	e8 d6 f7 ff ff       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c0016902:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	8d 50 ff             	lea    edx,[eax-0x1]
c001690d:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016913:	85 d2                	test   edx,edx
c0016915:	75 01                	jne    c0016918 <Vm::finish8086()+0x5a>
c0016917:	fb                   	sti    
c0016918:	83 c4 08             	add    esp,0x8
c001691b:	89 d8                	mov    eax,ebx
c001691d:	5b                   	pop    ebx
c001691e:	c3                   	ret    

c001691f <Vm::getOutput8086(unsigned char*)>:
c001691f:	57                   	push   edi
c0016920:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016926:	56                   	push   esi
c0016927:	be 40 97 02 c0       	mov    esi,0xc0029740
c001692c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016930:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016932:	5e                   	pop    esi
c0016933:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016938:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016942:	5f                   	pop    edi
c0016943:	c3                   	ret    

c0016944 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016944:	55                   	push   ebp
c0016945:	57                   	push   edi
c0016946:	56                   	push   esi
c0016947:	53                   	push   ebx
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001694f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016953:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016957:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001695b:	fa                   	cli    
c001695c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016962:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016969:	75 15                	jne    c0016980 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001696b:	e8 70 f2 ff ff       	call   c0015be0 <schedule()>
c0016970:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016975:	48                   	dec    eax
c0016976:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001697b:	75 de                	jne    c001695b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001697d:	fb                   	sti    
c001697e:	eb db                	jmp    c001695b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016980:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001698a:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c001698f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016993:	0f b7 ff             	movzx  edi,di
c0016996:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001699a:	0f b7 f6             	movzx  esi,si
c001699d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169a1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00169a5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169a9:	50                   	push   eax
c00169aa:	6a 20                	push   0x20
c00169ac:	6a 00                	push   0x0
c00169ae:	68 40 97 02 c0       	push   0xc0029740
c00169b3:	e8 38 9b fe ff       	call   c00004f0 <memset>
c00169b8:	5a                   	pop    edx
c00169b9:	59                   	pop    ecx
c00169ba:	57                   	push   edi
c00169bb:	56                   	push   esi
c00169bc:	e8 2d fe ff ff       	call   c00167ee <Vm::realToLinear(unsigned short, unsigned short)>
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00169c8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00169cc:	89 c7                	mov    edi,eax
c00169ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169d0:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c00169d7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169dc:	48                   	dec    eax
c00169dd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169e2:	75 01                	jne    c00169e5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00169e4:	fb                   	sti    
c00169e5:	83 ec 0c             	sub    esp,0xc
c00169e8:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00169ee:	e8 e5 f6 ff ff       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c00169f3:	83 c4 1c             	add    esp,0x1c
c00169f6:	b0 01                	mov    al,0x1
c00169f8:	5b                   	pop    ebx
c00169f9:	5e                   	pop    esi
c00169fa:	5f                   	pop    edi
c00169fb:	5d                   	pop    ebp
c00169fc:	c3                   	ret    

c00169fd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00169fd:	55                   	push   ebp
c00169fe:	57                   	push   edi
c00169ff:	56                   	push   esi
c0016a00:	53                   	push   ebx
c0016a01:	83 ec 34             	sub    esp,0x34
c0016a04:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016a08:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016a0c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016a10:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a1c:	68 48 25 02 c0       	push   0xc0022548
c0016a21:	e8 e4 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016a26:	83 c4 10             	add    esp,0x10
c0016a29:	fa                   	cli    
c0016a2a:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016a30:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a36:	84 db                	test   bl,bl
c0016a38:	75 15                	jne    c0016a4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016a3a:	e8 a1 f1 ff ff       	call   c0015be0 <schedule()>
c0016a3f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a44:	48                   	dec    eax
c0016a45:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a4a:	75 dd                	jne    c0016a29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a4c:	fb                   	sti    
c0016a4d:	eb da                	jmp    c0016a29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a4f:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a5d:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a62:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016a66:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a6a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a6e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a72:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a76:	50                   	push   eax
c0016a77:	6a 20                	push   0x20
c0016a79:	6a 00                	push   0x0
c0016a7b:	68 40 97 02 c0       	push   0xc0029740
c0016a80:	e8 6b 9a fe ff       	call   c00004f0 <memset>
c0016a85:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016a8c:	e8 42 10 ff ff       	call   c0007ad3 <malloc>
c0016a91:	83 c4 0c             	add    esp,0xc
c0016a94:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a9e:	89 c5                	mov    ebp,eax
c0016aa0:	50                   	push   eax
c0016aa1:	e8 76 4d ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0016aa6:	83 c4 10             	add    esp,0x10
c0016aa9:	85 ed                	test   ebp,ebp
c0016aab:	75 0a                	jne    c0016ab7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016aad:	83 ec 0c             	sub    esp,0xc
c0016ab0:	68 6a 25 02 c0       	push   0xc002256a
c0016ab5:	eb 2b                	jmp    c0016ae2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016ab7:	50                   	push   eax
c0016ab8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016abc:	50                   	push   eax
c0016abd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ac1:	50                   	push   eax
c0016ac2:	55                   	push   ebp
c0016ac3:	e8 1e 51 ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c0016ac8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016acc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016ad0:	83 c4 10             	add    esp,0x10
c0016ad3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016ad8:	74 27                	je     c0016b01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	68 7e 25 02 c0       	push   0xc002257e
c0016ae2:	e8 fa a7 ff ff       	call   c00112e1 <KePanic(char const*)>
c0016ae7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016aec:	83 c4 10             	add    esp,0x10
c0016aef:	48                   	dec    eax
c0016af0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016af5:	85 c0                	test   eax,eax
c0016af7:	75 01                	jne    c0016afa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016af9:	fb                   	sti    
c0016afa:	31 db                	xor    ebx,ebx
c0016afc:	e9 90 00 00 00       	jmp    c0016b91 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b01:	51                   	push   ecx
c0016b02:	51                   	push   ecx
c0016b03:	6a 01                	push   0x1
c0016b05:	55                   	push   ebp
c0016b06:	e8 d9 4d ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	85 c0                	test   eax,eax
c0016b10:	74 26                	je     c0016b38 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016b12:	83 ec 0c             	sub    esp,0xc
c0016b15:	68 97 25 02 c0       	push   0xc0022597
c0016b1a:	e8 c2 a7 ff ff       	call   c00112e1 <KePanic(char const*)>
c0016b1f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b24:	83 c4 10             	add    esp,0x10
c0016b27:	48                   	dec    eax
c0016b28:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b2d:	85 c0                	test   eax,eax
c0016b2f:	75 c9                	jne    c0016afa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b31:	fb                   	sti    
c0016b32:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016b36:	eb 59                	jmp    c0016b91 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b38:	50                   	push   eax
c0016b39:	0f b7 ff             	movzx  edi,di
c0016b3c:	50                   	push   eax
c0016b3d:	0f b7 f6             	movzx  esi,si
c0016b40:	57                   	push   edi
c0016b41:	56                   	push   esi
c0016b42:	e8 a7 fc ff ff       	call   c00167ee <Vm::realToLinear(unsigned short, unsigned short)>
c0016b47:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016b4a:	5a                   	pop    edx
c0016b4b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016b4f:	56                   	push   esi
c0016b50:	50                   	push   eax
c0016b51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b59:	55                   	push   ebp
c0016b5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b5d:	83 c4 14             	add    esp,0x14
c0016b60:	55                   	push   ebp
c0016b61:	e8 dc 4d ff ff       	call   c000b942 <File::close()>
c0016b66:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b75:	48                   	dec    eax
c0016b76:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b7b:	85 c0                	test   eax,eax
c0016b7d:	75 01                	jne    c0016b80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016b7f:	fb                   	sti    
c0016b80:	83 ec 0c             	sub    esp,0xc
c0016b83:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b89:	e8 4a f5 ff ff       	call   c00160d8 <unblockTask(ThreadControlBlock*)>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	83 c4 2c             	add    esp,0x2c
c0016b94:	88 d8                	mov    al,bl
c0016b96:	5b                   	pop    ebx
c0016b97:	5e                   	pop    esi
c0016b98:	5f                   	pop    edi
c0016b99:	5d                   	pop    ebp
c0016b9a:	c3                   	ret    

c0016b9b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016b9b:	57                   	push   edi
c0016b9c:	56                   	push   esi
c0016b9d:	53                   	push   ebx
c0016b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016baa:	83 e8 06             	sub    eax,0x6
c0016bad:	0f b7 c0             	movzx  eax,ax
c0016bb0:	50                   	push   eax
c0016bb1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016bb6:	50                   	push   eax
c0016bb7:	e8 32 fc ff ff       	call   c00167ee <Vm::realToLinear(unsigned short, unsigned short)>
c0016bbc:	5a                   	pop    edx
c0016bbd:	59                   	pop    ecx
c0016bbe:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016bc1:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016bc4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016bc7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016bcd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016bd0:	8d 51 02             	lea    edx,[ecx+0x2]
c0016bd3:	66 89 10             	mov    WORD PTR [eax],dx
c0016bd6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016bda:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016bde:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016be2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016be5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016be9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bef:	89 f1                	mov    ecx,esi
c0016bf1:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016bf5:	89 f2                	mov    edx,esi
c0016bf7:	0f b6 d6             	movzx  edx,dh
c0016bfa:	0f b6 f1             	movzx  esi,cl
c0016bfd:	74 0a                	je     c0016c09 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016bff:	c1 e2 08             	shl    edx,0x8
c0016c02:	09 f2                	or     edx,esi
c0016c04:	80 ce 02             	or     dh,0x2
c0016c07:	eb 08                	jmp    c0016c11 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016c09:	c1 e2 08             	shl    edx,0x8
c0016c0c:	09 f2                	or     edx,esi
c0016c0e:	80 e6 fd             	and    dh,0xfd
c0016c11:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c1a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016c1e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016c26:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016c29:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016c31:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016c34:	5b                   	pop    ebx
c0016c35:	5e                   	pop    esi
c0016c36:	5f                   	pop    edi
c0016c37:	c3                   	ret    

c0016c38 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016c38:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c3d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c42:	c1 e0 04             	shl    eax,0x4
c0016c45:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016c48:	c3                   	ret    

c0016c49 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016c49:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c4e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c53:	c1 e0 04             	shl    eax,0x4
c0016c56:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016c5a:	c3                   	ret    

c0016c5b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016c5b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c60:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c65:	c1 e0 04             	shl    eax,0x4
c0016c68:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016c6b:	c3                   	ret    

c0016c6c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016c6c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c71:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c76:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016c7a:	c1 e0 04             	shl    eax,0x4
c0016c7d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016c80:	c3                   	ret    

c0016c81 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016c81:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c86:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c8f:	c1 e0 04             	shl    eax,0x4
c0016c92:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016c96:	c3                   	ret    

c0016c97 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016c97:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c9c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ca5:	c1 e0 04             	shl    eax,0x4
c0016ca8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016cab:	c3                   	ret    

c0016cac <Vm::faultHandler(regs*)>:
c0016cac:	55                   	push   ebp
c0016cad:	57                   	push   edi
c0016cae:	56                   	push   esi
c0016caf:	53                   	push   ebx
c0016cb0:	83 ec 2c             	sub    esp,0x2c
c0016cb3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016cb7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016cba:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016cbe:	0f b7 f8             	movzx  edi,ax
c0016cc1:	0f b7 c0             	movzx  eax,ax
c0016cc4:	52                   	push   edx
c0016cc5:	50                   	push   eax
c0016cc6:	e8 23 fb ff ff       	call   c00167ee <Vm::realToLinear(unsigned short, unsigned short)>
c0016ccb:	5a                   	pop    edx
c0016ccc:	59                   	pop    ecx
c0016ccd:	89 c1                	mov    ecx,eax
c0016ccf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016cd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cd6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016cdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016cdf:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016ce2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ce6:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016ceb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cf3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016cf7:	e8 f2 fa ff ff       	call   c00167ee <Vm::realToLinear(unsigned short, unsigned short)>
c0016cfc:	5e                   	pop    esi
c0016cfd:	be 06 00 00 00       	mov    esi,0x6
c0016d02:	5d                   	pop    ebp
c0016d03:	31 ed                	xor    ebp,ebp
c0016d05:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016d0a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016d0d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016d13:	0f 84 74 02 00 00    	je     c0016f8d <Vm::faultHandler(regs*)+0x2e1>
c0016d19:	0f 87 94 00 00 00    	ja     c0016db3 <Vm::faultHandler(regs*)+0x107>
c0016d1f:	83 fa 66             	cmp    edx,0x66
c0016d22:	0f 84 e2 01 00 00    	je     c0016f0a <Vm::faultHandler(regs*)+0x25e>
c0016d28:	77 47                	ja     c0016d71 <Vm::faultHandler(regs*)+0xc5>
c0016d2a:	83 fa 36             	cmp    edx,0x36
c0016d2d:	0f 84 ca 01 00 00    	je     c0016efd <Vm::faultHandler(regs*)+0x251>
c0016d33:	77 1a                	ja     c0016d4f <Vm::faultHandler(regs*)+0xa3>
c0016d35:	83 fa 26             	cmp    edx,0x26
c0016d38:	0f 84 98 01 00 00    	je     c0016ed6 <Vm::faultHandler(regs*)+0x22a>
c0016d3e:	83 fa 2e             	cmp    edx,0x2e
c0016d41:	0f 85 27 06 00 00    	jne    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016d47:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d4a:	31 f6                	xor    esi,esi
c0016d4c:	41                   	inc    ecx
c0016d4d:	eb bb                	jmp    c0016d0a <Vm::faultHandler(regs*)+0x5e>
c0016d4f:	83 fa 64             	cmp    edx,0x64
c0016d52:	0f 84 8b 01 00 00    	je     c0016ee3 <Vm::faultHandler(regs*)+0x237>
c0016d58:	0f 87 92 01 00 00    	ja     c0016ef0 <Vm::faultHandler(regs*)+0x244>
c0016d5e:	83 fa 3e             	cmp    edx,0x3e
c0016d61:	0f 85 07 06 00 00    	jne    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016d67:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d6a:	be 01 00 00 00       	mov    esi,0x1
c0016d6f:	eb db                	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016d71:	83 fa 6d             	cmp    edx,0x6d
c0016d74:	0f 84 34 03 00 00    	je     c00170ae <Vm::faultHandler(regs*)+0x402>
c0016d7a:	77 17                	ja     c0016d93 <Vm::faultHandler(regs*)+0xe7>
c0016d7c:	83 fa 67             	cmp    edx,0x67
c0016d7f:	0f 84 92 01 00 00    	je     c0016f17 <Vm::faultHandler(regs*)+0x26b>
c0016d85:	83 fa 6c             	cmp    edx,0x6c
c0016d88:	0f 84 b1 02 00 00    	je     c001703f <Vm::faultHandler(regs*)+0x393>
c0016d8e:	e9 db 05 00 00       	jmp    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016d93:	83 fa 6f             	cmp    edx,0x6f
c0016d96:	0f 84 40 04 00 00    	je     c00171dc <Vm::faultHandler(regs*)+0x530>
c0016d9c:	0f 82 a2 03 00 00    	jb     c0017144 <Vm::faultHandler(regs*)+0x498>
c0016da2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016da8:	0f 84 76 01 00 00    	je     c0016f24 <Vm::faultHandler(regs*)+0x278>
c0016dae:	e9 bb 05 00 00       	jmp    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016db3:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016db9:	0f 84 57 05 00 00    	je     c0017316 <Vm::faultHandler(regs*)+0x66a>
c0016dbf:	0f 87 a9 00 00 00    	ja     c0016e6e <Vm::faultHandler(regs*)+0x1c2>
c0016dc5:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016dcb:	0f 84 d6 04 00 00    	je     c00172a7 <Vm::faultHandler(regs*)+0x5fb>
c0016dd1:	77 78                	ja     c0016e4b <Vm::faultHandler(regs*)+0x19f>
c0016dd3:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016dd9:	0f 84 0e 02 00 00    	je     c0016fed <Vm::faultHandler(regs*)+0x341>
c0016ddf:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016de5:	0f 85 83 05 00 00    	jne    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016deb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016def:	89 d1                	mov    ecx,edx
c0016df1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016df4:	c1 e1 08             	shl    ecx,0x8
c0016df7:	09 ca                	or     edx,ecx
c0016df9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016dfc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016e00:	89 d1                	mov    ecx,edx
c0016e02:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016e06:	c1 e1 08             	shl    ecx,0x8
c0016e09:	09 ca                	or     edx,ecx
c0016e0b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016e0e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016e12:	89 d1                	mov    ecx,edx
c0016e14:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016e18:	c1 e1 08             	shl    ecx,0x8
c0016e1b:	09 ca                	or     edx,ecx
c0016e1d:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e23:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e26:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016e2a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e30:	d1 e8                	shr    eax,1
c0016e32:	83 e0 01             	and    eax,0x1
c0016e35:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e38:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e3b:	83 c0 06             	add    eax,0x6
c0016e3e:	25 ff ff 00 00       	and    eax,0xffff
c0016e43:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e46:	e9 1f 05 00 00       	jmp    c001736a <Vm::faultHandler(regs*)+0x6be>
c0016e4b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016e51:	0f 84 95 04 00 00    	je     c00172ec <Vm::faultHandler(regs*)+0x640>
c0016e57:	0f 82 66 04 00 00    	jb     c00172c3 <Vm::faultHandler(regs*)+0x617>
c0016e5d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016e63:	0f 84 9a 04 00 00    	je     c0017303 <Vm::faultHandler(regs*)+0x657>
c0016e69:	e9 00 05 00 00       	jmp    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016e6e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016e74:	0f 84 dd 04 00 00    	je     c0017357 <Vm::faultHandler(regs*)+0x6ab>
c0016e7a:	77 2e                	ja     c0016eaa <Vm::faultHandler(regs*)+0x1fe>
c0016e7c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016e82:	0f 84 aa 04 00 00    	je     c0017332 <Vm::faultHandler(regs*)+0x686>
c0016e88:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016e8e:	0f 85 da 04 00 00    	jne    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016e94:	50                   	push   eax
c0016e95:	50                   	push   eax
c0016e96:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016e9a:	50                   	push   eax
c0016e9b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e9f:	50                   	push   eax
c0016ea0:	e8 13 f9 ff ff       	call   c00167b8 <Vm::outbv(unsigned short, unsigned char)>
c0016ea5:	e9 a5 04 00 00       	jmp    c001734f <Vm::faultHandler(regs*)+0x6a3>
c0016eaa:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016eb0:	0f 84 6d 01 00 00    	je     c0017023 <Vm::faultHandler(regs*)+0x377>
c0016eb6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016ebc:	0f 84 6f 01 00 00    	je     c0017031 <Vm::faultHandler(regs*)+0x385>
c0016ec2:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016ec8:	0f 85 a0 04 00 00    	jne    c001736e <Vm::faultHandler(regs*)+0x6c2>
c0016ece:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ed1:	e9 76 fe ff ff       	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016ed6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ed9:	be 02 00 00 00       	mov    esi,0x2
c0016ede:	e9 69 fe ff ff       	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016ee3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ee6:	be 03 00 00 00       	mov    esi,0x3
c0016eeb:	e9 5c fe ff ff       	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016ef0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ef3:	be 04 00 00 00       	mov    esi,0x4
c0016ef8:	e9 4f fe ff ff       	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016efd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f00:	be 05 00 00 00       	mov    esi,0x5
c0016f05:	e9 42 fe ff ff       	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016f0a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f0d:	bd 01 00 00 00       	mov    ebp,0x1
c0016f12:	e9 35 fe ff ff       	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016f17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f1a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016f1f:	e9 28 fe ff ff       	jmp    c0016d4c <Vm::faultHandler(regs*)+0xa0>
c0016f24:	83 e5 01             	and    ebp,0x1
c0016f27:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f2e:	74 30                	je     c0016f60 <Vm::faultHandler(regs*)+0x2b4>
c0016f30:	83 e9 04             	sub    ecx,0x4
c0016f33:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f39:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f3f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f42:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f45:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f4b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f4f:	0f 84 12 04 00 00    	je     c0017367 <Vm::faultHandler(regs*)+0x6bb>
c0016f55:	80 ce 02             	or     dh,0x2
c0016f58:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f5b:	e9 07 04 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c0016f60:	83 e9 02             	sub    ecx,0x2
c0016f63:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f69:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f6c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f70:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f76:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f7a:	74 05                	je     c0016f81 <Vm::faultHandler(regs*)+0x2d5>
c0016f7c:	80 ce 02             	or     dh,0x2
c0016f7f:	eb 03                	jmp    c0016f84 <Vm::faultHandler(regs*)+0x2d8>
c0016f81:	80 e6 fd             	and    dh,0xfd
c0016f84:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f88:	e9 da 03 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c0016f8d:	83 e5 01             	and    ebp,0x1
c0016f90:	74 2a                	je     c0016fbc <Vm::faultHandler(regs*)+0x310>
c0016f92:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f94:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f9a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fa0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fa5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fab:	c1 e8 09             	shr    eax,0x9
c0016fae:	83 e0 01             	and    eax,0x1
c0016fb1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fb4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fb7:	83 c0 04             	add    eax,0x4
c0016fba:	eb 24                	jmp    c0016fe0 <Vm::faultHandler(regs*)+0x334>
c0016fbc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016fbf:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fc5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fc8:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016fcb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fd1:	c1 e8 09             	shr    eax,0x9
c0016fd4:	83 e0 01             	and    eax,0x1
c0016fd7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fda:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fdd:	83 c0 02             	add    eax,0x2
c0016fe0:	25 ff ff 00 00       	and    eax,0xffff
c0016fe5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016fe8:	e9 7a 03 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c0016fed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ff1:	3d ee 00 00 00       	cmp    eax,0xee
c0016ff6:	75 10                	jne    c0017008 <Vm::faultHandler(regs*)+0x35c>
c0016ff8:	83 ec 0c             	sub    esp,0xc
c0016ffb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016ffe:	e8 52 f8 ff ff       	call   c0016855 <Vm::mainloop3(unsigned long)>
c0017003:	e9 4a 03 00 00       	jmp    c0017352 <Vm::faultHandler(regs*)+0x6a6>
c0017008:	83 ec 0c             	sub    esp,0xc
c001700b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001700f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017013:	51                   	push   ecx
c0017014:	50                   	push   eax
c0017015:	53                   	push   ebx
c0017016:	e8 80 fb ff ff       	call   c0016b9b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001701b:	83 c4 20             	add    esp,0x20
c001701e:	e9 47 03 00 00       	jmp    c001736a <Vm::faultHandler(regs*)+0x6be>
c0017023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017028:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001702c:	e9 36 03 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c0017031:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017036:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001703a:	e9 28 03 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c001703f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017044:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017047:	74 2b                	je     c0017074 <Vm::faultHandler(regs*)+0x3c8>
c0017049:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017050:	76 22                	jbe    c0017074 <Vm::faultHandler(regs*)+0x3c8>
c0017052:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017056:	50                   	push   eax
c0017057:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001705b:	50                   	push   eax
c001705c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017060:	50                   	push   eax
c0017061:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017065:	50                   	push   eax
c0017066:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001706a:	50                   	push   eax
c001706b:	6a 6c                	push   0x6c
c001706d:	6a 6c                	push   0x6c
c001706f:	e9 c0 01 00 00       	jmp    c0017234 <Vm::faultHandler(regs*)+0x588>
c0017074:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017078:	83 ec 0c             	sub    esp,0xc
c001707b:	0f b7 f6             	movzx  esi,si
c001707e:	50                   	push   eax
c001707f:	e8 21 f7 ff ff       	call   c00167a5 <Vm::inbv(unsigned short)>
c0017084:	83 c4 0c             	add    esp,0xc
c0017087:	0f b6 c0             	movzx  eax,al
c001708a:	50                   	push   eax
c001708b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001708f:	50                   	push   eax
c0017090:	56                   	push   esi
c0017091:	e8 d6 fb ff ff       	call   c0016c6c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017096:	83 c4 10             	add    esp,0x10
c0017099:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001709c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170a0:	74 03                	je     c00170a5 <Vm::faultHandler(regs*)+0x3f9>
c00170a2:	48                   	dec    eax
c00170a3:	eb 01                	jmp    c00170a6 <Vm::faultHandler(regs*)+0x3fa>
c00170a5:	40                   	inc    eax
c00170a6:	0f b7 c0             	movzx  eax,ax
c00170a9:	e9 8e 00 00 00       	jmp    c001713c <Vm::faultHandler(regs*)+0x490>
c00170ae:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170b3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170b9:	74 29                	je     c00170e4 <Vm::faultHandler(regs*)+0x438>
c00170bb:	3d ff ff 00 00       	cmp    eax,0xffff
c00170c0:	76 22                	jbe    c00170e4 <Vm::faultHandler(regs*)+0x438>
c00170c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170c6:	50                   	push   eax
c00170c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170cb:	50                   	push   eax
c00170cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170d0:	50                   	push   eax
c00170d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170d5:	50                   	push   eax
c00170d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170da:	50                   	push   eax
c00170db:	6a 6d                	push   0x6d
c00170dd:	6a 6d                	push   0x6d
c00170df:	e9 50 01 00 00       	jmp    c0017234 <Vm::faultHandler(regs*)+0x588>
c00170e4:	83 e5 01             	and    ebp,0x1
c00170e7:	0f b7 c8             	movzx  ecx,ax
c00170ea:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00170ed:	0f b7 f6             	movzx  esi,si
c00170f0:	74 1e                	je     c0017110 <Vm::faultHandler(regs*)+0x464>
c00170f2:	ed                   	in     eax,dx
c00170f3:	55                   	push   ebp
c00170f4:	50                   	push   eax
c00170f5:	51                   	push   ecx
c00170f6:	56                   	push   esi
c00170f7:	e8 9b fb ff ff       	call   c0016c97 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00170fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170ff:	83 c4 10             	add    esp,0x10
c0017102:	8d 50 04             	lea    edx,[eax+0x4]
c0017105:	83 e8 04             	sub    eax,0x4
c0017108:	81 e2 ff ff 00 00    	and    edx,0xffff
c001710e:	eb 20                	jmp    c0017130 <Vm::faultHandler(regs*)+0x484>
c0017110:	66 ed                	in     ax,dx
c0017112:	57                   	push   edi
c0017113:	0f b7 c0             	movzx  eax,ax
c0017116:	50                   	push   eax
c0017117:	51                   	push   ecx
c0017118:	56                   	push   esi
c0017119:	e8 63 fb ff ff       	call   c0016c81 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001711e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017121:	83 c4 10             	add    esp,0x10
c0017124:	8d 50 02             	lea    edx,[eax+0x2]
c0017127:	83 e8 02             	sub    eax,0x2
c001712a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017130:	25 ff ff 00 00       	and    eax,0xffff
c0017135:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017139:	0f 44 c2             	cmove  eax,edx
c001713c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001713f:	e9 23 02 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c0017144:	8d 46 ff             	lea    eax,[esi-0x1]
c0017147:	0f b6 f0             	movzx  esi,al
c001714a:	83 fe 05             	cmp    esi,0x5
c001714d:	77 23                	ja     c0017172 <Vm::faultHandler(regs*)+0x4c6>
c001714f:	ff 24 b5 0c 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9f4]
c0017156:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001715b:	eb 15                	jmp    c0017172 <Vm::faultHandler(regs*)+0x4c6>
c001715d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017161:	eb 0f                	jmp    c0017172 <Vm::faultHandler(regs*)+0x4c6>
c0017163:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017167:	eb 09                	jmp    c0017172 <Vm::faultHandler(regs*)+0x4c6>
c0017169:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001716d:	eb 03                	jmp    c0017172 <Vm::faultHandler(regs*)+0x4c6>
c001716f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017172:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017177:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001717a:	74 29                	je     c00171a5 <Vm::faultHandler(regs*)+0x4f9>
c001717c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017181:	76 22                	jbe    c00171a5 <Vm::faultHandler(regs*)+0x4f9>
c0017183:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017187:	50                   	push   eax
c0017188:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001718c:	50                   	push   eax
c001718d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017191:	50                   	push   eax
c0017192:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017196:	50                   	push   eax
c0017197:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001719b:	50                   	push   eax
c001719c:	6a 6e                	push   0x6e
c001719e:	6a 6e                	push   0x6e
c00171a0:	e9 8f 00 00 00       	jmp    c0017234 <Vm::faultHandler(regs*)+0x588>
c00171a5:	52                   	push   edx
c00171a6:	0f b7 c0             	movzx  eax,ax
c00171a9:	52                   	push   edx
c00171aa:	50                   	push   eax
c00171ab:	57                   	push   edi
c00171ac:	e8 87 fa ff ff       	call   c0016c38 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00171b1:	59                   	pop    ecx
c00171b2:	5e                   	pop    esi
c00171b3:	0f b6 c0             	movzx  eax,al
c00171b6:	50                   	push   eax
c00171b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171bb:	50                   	push   eax
c00171bc:	e8 f7 f5 ff ff       	call   c00167b8 <Vm::outbv(unsigned short, unsigned char)>
c00171c1:	83 c4 10             	add    esp,0x10
c00171c4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00171c7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171cb:	74 03                	je     c00171d0 <Vm::faultHandler(regs*)+0x524>
c00171cd:	48                   	dec    eax
c00171ce:	eb 01                	jmp    c00171d1 <Vm::faultHandler(regs*)+0x525>
c00171d0:	40                   	inc    eax
c00171d1:	0f b7 c0             	movzx  eax,ax
c00171d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00171d7:	e9 8b 01 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c00171dc:	8d 46 ff             	lea    eax,[esi-0x1]
c00171df:	0f b6 f0             	movzx  esi,al
c00171e2:	83 fe 05             	cmp    esi,0x5
c00171e5:	77 1e                	ja     c0017205 <Vm::faultHandler(regs*)+0x559>
c00171e7:	ff 24 b5 24 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9dc]
c00171ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171f2:	eb 11                	jmp    c0017205 <Vm::faultHandler(regs*)+0x559>
c00171f4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00171f7:	eb 0c                	jmp    c0017205 <Vm::faultHandler(regs*)+0x559>
c00171f9:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00171fc:	eb 07                	jmp    c0017205 <Vm::faultHandler(regs*)+0x559>
c00171fe:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017201:	eb 02                	jmp    c0017205 <Vm::faultHandler(regs*)+0x559>
c0017203:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017205:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001720a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001720d:	74 37                	je     c0017246 <Vm::faultHandler(regs*)+0x59a>
c001720f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017215:	76 2f                	jbe    c0017246 <Vm::faultHandler(regs*)+0x59a>
c0017217:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001721b:	50                   	push   eax
c001721c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017220:	50                   	push   eax
c0017221:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017225:	50                   	push   eax
c0017226:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001722a:	50                   	push   eax
c001722b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001722f:	50                   	push   eax
c0017230:	6a 6f                	push   0x6f
c0017232:	6a 6f                	push   0x6f
c0017234:	68 b0 25 02 c0       	push   0xc00225b0
c0017239:	e8 cc 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001723e:	83 c4 20             	add    esp,0x20
c0017241:	e9 86 01 00 00       	jmp    c00173cc <Vm::faultHandler(regs*)+0x720>
c0017246:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017249:	0f b7 d7             	movzx  edx,di
c001724c:	0f b7 c6             	movzx  eax,si
c001724f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017252:	81 e1 00 04 00 00    	and    ecx,0x400
c0017258:	83 e5 01             	and    ebp,0x1
c001725b:	74 1c                	je     c0017279 <Vm::faultHandler(regs*)+0x5cd>
c001725d:	55                   	push   ebp
c001725e:	55                   	push   ebp
c001725f:	50                   	push   eax
c0017260:	52                   	push   edx
c0017261:	e8 f5 f9 ff ff       	call   c0016c5b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	89 fa                	mov    edx,edi
c001726b:	ef                   	out    dx,eax
c001726c:	8d 46 04             	lea    eax,[esi+0x4]
c001726f:	83 ee 04             	sub    esi,0x4
c0017272:	25 ff ff 00 00       	and    eax,0xffff
c0017277:	eb 1b                	jmp    c0017294 <Vm::faultHandler(regs*)+0x5e8>
c0017279:	55                   	push   ebp
c001727a:	55                   	push   ebp
c001727b:	50                   	push   eax
c001727c:	52                   	push   edx
c001727d:	e8 c7 f9 ff ff       	call   c0016c49 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	89 fa                	mov    edx,edi
c0017287:	66 ef                	out    dx,ax
c0017289:	8d 46 02             	lea    eax,[esi+0x2]
c001728c:	83 ee 02             	sub    esi,0x2
c001728f:	25 ff ff 00 00       	and    eax,0xffff
c0017294:	81 e6 ff ff 00 00    	and    esi,0xffff
c001729a:	85 c9                	test   ecx,ecx
c001729c:	0f 44 f0             	cmove  esi,eax
c001729f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00172a2:	e9 c0 00 00 00       	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c00172a7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00172ae:	83 ec 0c             	sub    esp,0xc
c00172b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172b5:	50                   	push   eax
c00172b6:	e8 ea f4 ff ff       	call   c00167a5 <Vm::inbv(unsigned short)>
c00172bb:	0f b6 c0             	movzx  eax,al
c00172be:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00172c1:	eb 3a                	jmp    c00172fd <Vm::faultHandler(regs*)+0x651>
c00172c3:	83 e5 01             	and    ebp,0x1
c00172c6:	74 07                	je     c00172cf <Vm::faultHandler(regs*)+0x623>
c00172c8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172cc:	ed                   	in     eax,dx
c00172cd:	eb 14                	jmp    c00172e3 <Vm::faultHandler(regs*)+0x637>
c00172cf:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00172d2:	66 31 f6             	xor    si,si
c00172d5:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00172d8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172dc:	66 ed                	in     ax,dx
c00172de:	0f b7 c0             	movzx  eax,ax
c00172e1:	09 f0                	or     eax,esi
c00172e3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172e6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00172ea:	eb 7e                	jmp    c001736a <Vm::faultHandler(regs*)+0x6be>
c00172ec:	52                   	push   edx
c00172ed:	52                   	push   edx
c00172ee:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00172f2:	50                   	push   eax
c00172f3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172f7:	50                   	push   eax
c00172f8:	e8 bb f4 ff ff       	call   c00167b8 <Vm::outbv(unsigned short, unsigned char)>
c00172fd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017301:	eb 4f                	jmp    c0017352 <Vm::faultHandler(regs*)+0x6a6>
c0017303:	83 e5 01             	and    ebp,0x1
c0017306:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017309:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001730d:	74 03                	je     c0017312 <Vm::faultHandler(regs*)+0x666>
c001730f:	ef                   	out    dx,eax
c0017310:	eb d4                	jmp    c00172e6 <Vm::faultHandler(regs*)+0x63a>
c0017312:	66 ef                	out    dx,ax
c0017314:	eb d0                	jmp    c00172e6 <Vm::faultHandler(regs*)+0x63a>
c0017316:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001731a:	83 ec 0c             	sub    esp,0xc
c001731d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017324:	50                   	push   eax
c0017325:	e8 7b f4 ff ff       	call   c00167a5 <Vm::inbv(unsigned short)>
c001732a:	0f b6 c0             	movzx  eax,al
c001732d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017330:	eb 1d                	jmp    c001734f <Vm::faultHandler(regs*)+0x6a3>
c0017332:	83 e5 01             	and    ebp,0x1
c0017335:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017338:	74 03                	je     c001733d <Vm::faultHandler(regs*)+0x691>
c001733a:	ed                   	in     eax,dx
c001733b:	eb 0d                	jmp    c001734a <Vm::faultHandler(regs*)+0x69e>
c001733d:	66 ed                	in     ax,dx
c001733f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017342:	0f b7 c0             	movzx  eax,ax
c0017345:	66 31 d2             	xor    dx,dx
c0017348:	09 d0                	or     eax,edx
c001734a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001734d:	eb 18                	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c001734f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017352:	83 c4 10             	add    esp,0x10
c0017355:	eb 13                	jmp    c001736a <Vm::faultHandler(regs*)+0x6be>
c0017357:	83 e5 01             	and    ebp,0x1
c001735a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001735d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017360:	74 03                	je     c0017365 <Vm::faultHandler(regs*)+0x6b9>
c0017362:	ef                   	out    dx,eax
c0017363:	eb 02                	jmp    c0017367 <Vm::faultHandler(regs*)+0x6bb>
c0017365:	66 ef                	out    dx,ax
c0017367:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001736a:	b0 01                	mov    al,0x1
c001736c:	eb 60                	jmp    c00173ce <Vm::faultHandler(regs*)+0x722>
c001736e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017372:	50                   	push   eax
c0017373:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017377:	50                   	push   eax
c0017378:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001737c:	50                   	push   eax
c001737d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017381:	50                   	push   eax
c0017382:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017386:	50                   	push   eax
c0017387:	52                   	push   edx
c0017388:	52                   	push   edx
c0017389:	68 dd 25 02 c0       	push   0xc00225dd
c001738e:	e8 77 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017393:	83 c4 20             	add    esp,0x20
c0017396:	83 ec 0c             	sub    esp,0xc
c0017399:	6a 60                	push   0x60
c001739b:	e8 05 f4 ff ff       	call   c00167a5 <Vm::inbv(unsigned short)>
c00173a0:	83 c4 10             	add    esp,0x10
c00173a3:	0f b6 d0             	movzx  edx,al
c00173a6:	83 fa 1c             	cmp    edx,0x1c
c00173a9:	74 05                	je     c00173b0 <Vm::faultHandler(regs*)+0x704>
c00173ab:	83 fa 5a             	cmp    edx,0x5a
c00173ae:	75 e6                	jne    c0017396 <Vm::faultHandler(regs*)+0x6ea>
c00173b0:	0f b6 c0             	movzx  eax,al
c00173b3:	83 f8 1c             	cmp    eax,0x1c
c00173b6:	74 05                	je     c00173bd <Vm::faultHandler(regs*)+0x711>
c00173b8:	83 f8 5a             	cmp    eax,0x5a
c00173bb:	75 0f                	jne    c00173cc <Vm::faultHandler(regs*)+0x720>
c00173bd:	83 ec 0c             	sub    esp,0xc
c00173c0:	6a 60                	push   0x60
c00173c2:	e8 de f3 ff ff       	call   c00167a5 <Vm::inbv(unsigned short)>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	eb e4                	jmp    c00173b0 <Vm::faultHandler(regs*)+0x704>
c00173cc:	31 c0                	xor    eax,eax
c00173ce:	83 c4 2c             	add    esp,0x2c
c00173d1:	5b                   	pop    ebx
c00173d2:	5e                   	pop    esi
c00173d3:	5f                   	pop    edi
c00173d4:	5d                   	pop    ebp
c00173d5:	c3                   	ret    

c00173d6 <noCopro(unsigned long)>:
c00173d6:	c3                   	ret    

c00173d7 <nmiHandler(regs*, void*)>:
c00173d7:	83 ec 0c             	sub    esp,0xc
c00173da:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00173df:	83 ec 0c             	sub    esp,0xc
c00173e2:	50                   	push   eax
c00173e3:	e8 ee fe fe ff       	call   c00072d6 <Computer::handleNMI()>
c00173e8:	83 c4 10             	add    esp,0x10
c00173eb:	90                   	nop
c00173ec:	83 c4 0c             	add    esp,0xc
c00173ef:	c3                   	ret    

c00173f0 <doubleFault(regs*, void*)>:
c00173f0:	55                   	push   ebp
c00173f1:	89 e5                	mov    ebp,esp
c00173f3:	83 ec 08             	sub    esp,0x8
c00173f6:	83 ec 0c             	sub    esp,0xc
c00173f9:	68 3c 26 02 c0       	push   0xc002263c
c00173fe:	e8 de 9e ff ff       	call   c00112e1 <KePanic(char const*)>
c0017403:	83 c4 10             	add    esp,0x10
c0017406:	90                   	nop
c0017407:	c9                   	leave  
c0017408:	c3                   	ret    

c0017409 <displayDebugInfo(regs*)>:
c0017409:	83 ec 1c             	sub    esp,0x1c
c001740c:	0f 20 c0             	mov    eax,cr0
c001740f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017413:	0f 20 d0             	mov    eax,cr2
c0017416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001741a:	0f 20 d8             	mov    eax,cr3
c001741d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017421:	0f 20 e0             	mov    eax,cr4
c0017424:	89 04 24             	mov    DWORD PTR [esp],eax
c0017427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001742b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001742e:	83 ec 08             	sub    esp,0x8
c0017431:	50                   	push   eax
c0017432:	68 58 26 02 c0       	push   0xc0022658
c0017437:	e8 ce 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017443:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017446:	83 ec 08             	sub    esp,0x8
c0017449:	50                   	push   eax
c001744a:	68 49 26 02 c0       	push   0xc0022649
c001744f:	e8 b6 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017454:	83 c4 10             	add    esp,0x10
c0017457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001745b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001745e:	83 ec 08             	sub    esp,0x8
c0017461:	50                   	push   eax
c0017462:	68 54 26 02 c0       	push   0xc0022654
c0017467:	e8 9e 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001746c:	83 c4 10             	add    esp,0x10
c001746f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017473:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017476:	83 ec 08             	sub    esp,0x8
c0017479:	50                   	push   eax
c001747a:	68 63 26 02 c0       	push   0xc0022663
c001747f:	e8 86 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001748b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001748e:	83 ec 08             	sub    esp,0x8
c0017491:	50                   	push   eax
c0017492:	68 6e 26 02 c0       	push   0xc002266e
c0017497:	e8 6e 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001749c:	83 c4 10             	add    esp,0x10
c001749f:	83 ec 08             	sub    esp,0x8
c00174a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174a6:	68 79 26 02 c0       	push   0xc0022679
c00174ab:	e8 5a 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174b0:	83 c4 10             	add    esp,0x10
c00174b3:	83 ec 08             	sub    esp,0x8
c00174b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00174ba:	68 84 26 02 c0       	push   0xc0022684
c00174bf:	e8 46 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174c4:	83 c4 10             	add    esp,0x10
c00174c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174cb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00174ce:	c1 e0 05             	shl    eax,0x5
c00174d1:	8d 90 00 36 02 c0    	lea    edx,[eax-0x3ffdca00]
c00174d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174db:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00174de:	83 ec 04             	sub    esp,0x4
c00174e1:	52                   	push   edx
c00174e2:	50                   	push   eax
c00174e3:	68 8f 26 02 c0       	push   0xc002268f
c00174e8:	e8 1d 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174fb:	83 ec 0c             	sub    esp,0xc
c00174fe:	50                   	push   eax
c00174ff:	e8 6b 12 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017504:	83 c4 10             	add    esp,0x10
c0017507:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001750c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017512:	83 ec 08             	sub    esp,0x8
c0017515:	68 9e 26 02 c0       	push   0xc002269e
c001751a:	50                   	push   eax
c001751b:	e8 8c 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017520:	83 c4 10             	add    esp,0x10
c0017523:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017528:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001752e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017532:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017535:	83 ec 08             	sub    esp,0x8
c0017538:	52                   	push   edx
c0017539:	50                   	push   eax
c001753a:	e8 27 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001753f:	83 c4 10             	add    esp,0x10
c0017542:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017547:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001754d:	83 ec 08             	sub    esp,0x8
c0017550:	68 ac 26 02 c0       	push   0xc00226ac
c0017555:	50                   	push   eax
c0017556:	e8 51 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017563:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017569:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001756e:	8b 12                	mov    edx,DWORD PTR [edx]
c0017570:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017573:	83 c2 0c             	add    edx,0xc
c0017576:	83 ec 08             	sub    esp,0x8
c0017579:	52                   	push   edx
c001757a:	50                   	push   eax
c001757b:	e8 2c 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017588:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001758e:	83 ec 08             	sub    esp,0x8
c0017591:	68 b5 26 02 c0       	push   0xc00226b5
c0017596:	50                   	push   eax
c0017597:	e8 10 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001759c:	83 c4 10             	add    esp,0x10
c001759f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175ae:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00175b1:	83 ec 08             	sub    esp,0x8
c00175b4:	52                   	push   edx
c00175b5:	50                   	push   eax
c00175b6:	e8 ab 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c9:	83 ec 08             	sub    esp,0x8
c00175cc:	68 bd 26 02 c0       	push   0xc00226bd
c00175d1:	50                   	push   eax
c00175d2:	e8 d5 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175d7:	83 c4 10             	add    esp,0x10
c00175da:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175e9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00175ec:	83 ec 08             	sub    esp,0x8
c00175ef:	52                   	push   edx
c00175f0:	50                   	push   eax
c00175f1:	e8 70 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175f6:	83 c4 10             	add    esp,0x10
c00175f9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017604:	83 ec 08             	sub    esp,0x8
c0017607:	68 c5 26 02 c0       	push   0xc00226c5
c001760c:	50                   	push   eax
c001760d:	e8 9a 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017612:	83 c4 10             	add    esp,0x10
c0017615:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001761a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017620:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017624:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017627:	83 ec 08             	sub    esp,0x8
c001762a:	52                   	push   edx
c001762b:	50                   	push   eax
c001762c:	e8 35 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017639:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001763f:	83 ec 08             	sub    esp,0x8
c0017642:	68 cd 26 02 c0       	push   0xc00226cd
c0017647:	50                   	push   eax
c0017648:	e8 5f 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017655:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001765b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001765f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017662:	83 ec 08             	sub    esp,0x8
c0017665:	52                   	push   edx
c0017666:	50                   	push   eax
c0017667:	e8 fa 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017674:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001767a:	83 ec 08             	sub    esp,0x8
c001767d:	68 d5 26 02 c0       	push   0xc00226d5
c0017682:	50                   	push   eax
c0017683:	e8 24 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017688:	83 c4 10             	add    esp,0x10
c001768b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017690:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017696:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001769a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001769d:	83 ec 08             	sub    esp,0x8
c00176a0:	52                   	push   edx
c00176a1:	50                   	push   eax
c00176a2:	e8 bf 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176a7:	83 c4 10             	add    esp,0x10
c00176aa:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176b5:	83 ec 08             	sub    esp,0x8
c00176b8:	68 dd 26 02 c0       	push   0xc00226dd
c00176bd:	50                   	push   eax
c00176be:	e8 e9 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176c3:	83 c4 10             	add    esp,0x10
c00176c6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176d5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00176d8:	83 ec 08             	sub    esp,0x8
c00176db:	52                   	push   edx
c00176dc:	50                   	push   eax
c00176dd:	e8 84 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176e2:	83 c4 10             	add    esp,0x10
c00176e5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f0:	83 ec 08             	sub    esp,0x8
c00176f3:	68 e5 26 02 c0       	push   0xc00226e5
c00176f8:	50                   	push   eax
c00176f9:	e8 ae 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017706:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001770c:	83 ec 08             	sub    esp,0x8
c001770f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017713:	50                   	push   eax
c0017714:	e8 4d 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017719:	83 c4 10             	add    esp,0x10
c001771c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017721:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017727:	83 ec 08             	sub    esp,0x8
c001772a:	68 ee 26 02 c0       	push   0xc00226ee
c001772f:	50                   	push   eax
c0017730:	e8 77 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001773d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017743:	83 ec 08             	sub    esp,0x8
c0017746:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001774a:	50                   	push   eax
c001774b:	e8 16 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017750:	83 c4 10             	add    esp,0x10
c0017753:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017758:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001775e:	83 ec 08             	sub    esp,0x8
c0017761:	68 f6 26 02 c0       	push   0xc00226f6
c0017766:	50                   	push   eax
c0017767:	e8 40 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001776c:	83 c4 10             	add    esp,0x10
c001776f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017774:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001777a:	83 ec 08             	sub    esp,0x8
c001777d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017781:	50                   	push   eax
c0017782:	e8 df 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017787:	83 c4 10             	add    esp,0x10
c001778a:	fa                   	cli    
c001778b:	f4                   	hlt    
c001778c:	eb fe                	jmp    c001778c <displayDebugInfo(regs*)+0x383>

c001778e <HalSystemIdle()>:
c001778e:	56                   	push   esi
c001778f:	53                   	push   ebx
c0017790:	83 ec 14             	sub    esp,0x14
c0017793:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017798:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001779e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00177a4:	83 e0 04             	and    eax,0x4
c00177a7:	0f b6 c0             	movzx  eax,al
c00177aa:	85 c0                	test   eax,eax
c00177ac:	0f 95 c0             	setne  al
c00177af:	0f b6 c0             	movzx  eax,al
c00177b2:	85 c0                	test   eax,eax
c00177b4:	74 4c                	je     c0017802 <HalSystemIdle()+0x74>
c00177b6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177bb:	83 ec 08             	sub    esp,0x8
c00177be:	68 e1 00 00 00       	push   0xe1
c00177c3:	50                   	push   eax
c00177c4:	e8 19 f9 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177d4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177dd:	83 e2 02             	and    edx,0x2
c00177e0:	89 d3                	mov    ebx,edx
c00177e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177e6:	83 e2 00             	and    edx,0x0
c00177e9:	89 d6                	mov    esi,edx
c00177eb:	56                   	push   esi
c00177ec:	53                   	push   ebx
c00177ed:	68 e1 00 00 00       	push   0xe1
c00177f2:	50                   	push   eax
c00177f3:	e8 16 f9 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00177f8:	83 c4 10             	add    esp,0x10
c00177fb:	e8 94 89 fe ff       	call   c0000194 <doTPAUSE>
c0017800:	eb 01                	jmp    c0017803 <HalSystemIdle()+0x75>
c0017802:	f4                   	hlt    
c0017803:	90                   	nop
c0017804:	83 c4 14             	add    esp,0x14
c0017807:	5b                   	pop    ebx
c0017808:	5e                   	pop    esi
c0017809:	c3                   	ret    

c001780a <displayProgramFault(char const*)>:
c001780a:	83 ec 0c             	sub    esp,0xc
c001780d:	83 ec 0c             	sub    esp,0xc
c0017810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017814:	e8 f1 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017819:	83 c4 10             	add    esp,0x10
c001781c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017821:	8b 00                	mov    eax,DWORD PTR [eax]
c0017823:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017826:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001782c:	85 c0                	test   eax,eax
c001782e:	74 21                	je     c0017851 <displayProgramFault(char const*)+0x47>
c0017830:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017835:	8b 00                	mov    eax,DWORD PTR [eax]
c0017837:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001783a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017840:	6a 04                	push   0x4
c0017842:	6a 0f                	push   0xf
c0017844:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017848:	50                   	push   eax
c0017849:	e8 d0 12 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001784e:	83 c4 10             	add    esp,0x10
c0017851:	90                   	nop
c0017852:	83 c4 0c             	add    esp,0xc
c0017855:	c3                   	ret    

c0017856 <gpFault(regs*, void*)>:
c0017856:	83 ec 1c             	sub    esp,0x1c
c0017859:	c7 05 74 97 02 c0 ac 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016cac
c0017863:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017868:	85 c0                	test   eax,eax
c001786a:	74 1e                	je     c001788a <gpFault(regs*, void*)+0x34>
c001786c:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017871:	83 ec 0c             	sub    esp,0xc
c0017874:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017878:	ff d0                	call   eax
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017881:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017886:	85 c0                	test   eax,eax
c0017888:	75 2e                	jne    c00178b8 <gpFault(regs*, void*)+0x62>
c001788a:	83 ec 0c             	sub    esp,0xc
c001788d:	68 fe 26 02 c0       	push   0xc00226fe
c0017892:	e8 73 ff ff ff       	call   c001780a <displayProgramFault(char const*)>
c0017897:	83 c4 10             	add    esp,0x10
c001789a:	83 ec 0c             	sub    esp,0xc
c001789d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178a1:	e8 63 fb ff ff       	call   c0017409 <displayDebugInfo(regs*)>
c00178a6:	83 c4 10             	add    esp,0x10
c00178a9:	83 ec 0c             	sub    esp,0xc
c00178ac:	6a 00                	push   0x0
c00178ae:	e8 99 ed ff ff       	call   c001664c <Thr::terminateFromIRQ(int)>
c00178b3:	83 c4 10             	add    esp,0x10
c00178b6:	eb 01                	jmp    c00178b9 <gpFault(regs*, void*)+0x63>
c00178b8:	90                   	nop
c00178b9:	83 c4 1c             	add    esp,0x1c
c00178bc:	c3                   	ret    

c00178bd <pgFault(regs*, void*)>:
c00178bd:	83 ec 1c             	sub    esp,0x1c
c00178c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00178c7:	0f 20 d0             	mov    eax,cr2
c00178ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178d2:	83 ec 04             	sub    esp,0x4
c00178d5:	52                   	push   edx
c00178d6:	50                   	push   eax
c00178d7:	68 dc 27 02 c0       	push   0xc00227dc
c00178dc:	e8 29 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178e1:	83 c4 10             	add    esp,0x10
c00178e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00178eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178ee:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00178f4:	0f 20 d2             	mov    edx,cr2
c00178f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00178fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178ff:	83 ec 08             	sub    esp,0x8
c0017902:	52                   	push   edx
c0017903:	50                   	push   eax
c0017904:	e8 71 2a ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	0f b6 c0             	movzx  eax,al
c001790f:	85 c0                	test   eax,eax
c0017911:	75 2e                	jne    c0017941 <pgFault(regs*, void*)+0x84>
c0017913:	83 ec 0c             	sub    esp,0xc
c0017916:	68 17 27 02 c0       	push   0xc0022717
c001791b:	e8 ea fe ff ff       	call   c001780a <displayProgramFault(char const*)>
c0017920:	83 c4 10             	add    esp,0x10
c0017923:	83 ec 0c             	sub    esp,0xc
c0017926:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001792a:	e8 da fa ff ff       	call   c0017409 <displayDebugInfo(regs*)>
c001792f:	83 c4 10             	add    esp,0x10
c0017932:	83 ec 0c             	sub    esp,0xc
c0017935:	6a 00                	push   0x0
c0017937:	e8 10 ed ff ff       	call   c001664c <Thr::terminateFromIRQ(int)>
c001793c:	83 c4 10             	add    esp,0x10
c001793f:	eb 01                	jmp    c0017942 <pgFault(regs*, void*)+0x85>
c0017941:	90                   	nop
c0017942:	83 c4 1c             	add    esp,0x1c
c0017945:	c3                   	ret    

c0017946 <otherISRHandler(regs*, void*)>:
c0017946:	83 ec 0c             	sub    esp,0xc
c0017949:	83 ec 0c             	sub    esp,0xc
c001794c:	68 04 28 02 c0       	push   0xc0022804
c0017951:	e8 b4 fe ff ff       	call   c001780a <displayProgramFault(char const*)>
c0017956:	83 c4 10             	add    esp,0x10
c0017959:	83 ec 0c             	sub    esp,0xc
c001795c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017960:	e8 a4 fa ff ff       	call   c0017409 <displayDebugInfo(regs*)>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	83 ec 0c             	sub    esp,0xc
c001796b:	6a 00                	push   0x0
c001796d:	e8 da ec ff ff       	call   c001664c <Thr::terminateFromIRQ(int)>
c0017972:	83 c4 10             	add    esp,0x10
c0017975:	90                   	nop
c0017976:	83 c4 0c             	add    esp,0xc
c0017979:	c3                   	ret    

c001797a <opcodeFault(regs*, void*)>:
c001797a:	55                   	push   ebp
c001797b:	89 e5                	mov    ebp,esp
c001797d:	83 ec 08             	sub    esp,0x8
c0017980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017983:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017986:	83 ec 08             	sub    esp,0x8
c0017989:	50                   	push   eax
c001798a:	68 22 27 02 c0       	push   0xc0022722
c001798f:	e8 76 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017994:	83 c4 10             	add    esp,0x10
c0017997:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001799c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179a2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00179a8:	0f b6 c0             	movzx  eax,al
c00179ab:	85 c0                	test   eax,eax
c00179ad:	74 21                	je     c00179d0 <opcodeFault(regs*, void*)+0x56>
c00179af:	83 ec 0c             	sub    esp,0xc
c00179b2:	68 2c 28 02 c0       	push   0xc002282c
c00179b7:	e8 4e 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179c5:	8d 50 19             	lea    edx,[eax+0x19]
c00179c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00179ce:	eb 2b                	jmp    c00179fb <opcodeFault(regs*, void*)+0x81>
c00179d0:	83 ec 0c             	sub    esp,0xc
c00179d3:	68 30 27 02 c0       	push   0xc0022730
c00179d8:	e8 2d fe ff ff       	call   c001780a <displayProgramFault(char const*)>
c00179dd:	83 c4 10             	add    esp,0x10
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00179e6:	e8 1e fa ff ff       	call   c0017409 <displayDebugInfo(regs*)>
c00179eb:	83 c4 10             	add    esp,0x10
c00179ee:	83 ec 0c             	sub    esp,0xc
c00179f1:	6a 00                	push   0x0
c00179f3:	e8 54 ec ff ff       	call   c001664c <Thr::terminateFromIRQ(int)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	c9                   	leave  
c00179fc:	c3                   	ret    

c00179fd <i386SaveCoprocessor(void*)>:
c00179fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a01:	83 c0 3f             	add    eax,0x3f
c0017a04:	83 e0 c0             	and    eax,0xffffffc0
c0017a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a0b:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017a11 <i386LoadCoprocessor(void*)>:
c0017a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a15:	83 c0 3f             	add    eax,0x3f
c0017a18:	83 e0 c0             	and    eax,0xffffffc0
c0017a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a1f:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017a25 <x87EmulHandler(regs*, void*)>:
c0017a25:	53                   	push   ebx
c0017a26:	83 ec 08             	sub    esp,0x8
c0017a29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a2e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017a32:	74 10                	je     c0017a44 <x87EmulHandler(regs*, void*)+0x1f>
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	68 3d 27 02 c0       	push   0xc002273d
c0017a3c:	e8 a0 98 ff ff       	call   c00112e1 <KePanic(char const*)>
c0017a41:	83 c4 10             	add    esp,0x10
c0017a44:	0f 20 c0             	mov    eax,cr0
c0017a47:	a8 08                	test   al,0x8
c0017a49:	74 59                	je     c0017aa4 <x87EmulHandler(regs*, void*)+0x7f>
c0017a4b:	0f 06                	clts   
c0017a4d:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a52:	85 c0                	test   eax,eax
c0017a54:	74 0e                	je     c0017a64 <x87EmulHandler(regs*, void*)+0x3f>
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a5c:	e8 9c ff ff ff       	call   c00179fd <i386SaveCoprocessor(void*)>
c0017a61:	83 c4 10             	add    esp,0x10
c0017a64:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017a6a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017a6e:	75 12                	jne    c0017a82 <x87EmulHandler(regs*, void*)+0x5d>
c0017a70:	83 ec 0c             	sub    esp,0xc
c0017a73:	68 40 02 00 00       	push   0x240
c0017a78:	e8 56 00 ff ff       	call   c0007ad3 <malloc>
c0017a7d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017a80:	eb 10                	jmp    c0017a92 <x87EmulHandler(regs*, void*)+0x6d>
c0017a82:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a87:	83 ec 0c             	sub    esp,0xc
c0017a8a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a8d:	e8 7f ff ff ff       	call   c0017a11 <i386LoadCoprocessor(void*)>
c0017a92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a97:	83 c4 10             	add    esp,0x10
c0017a9a:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017a9f:	83 c4 08             	add    esp,0x8
c0017aa2:	5b                   	pop    ebx
c0017aa3:	c3                   	ret    
c0017aa4:	83 ec 0c             	sub    esp,0xc
c0017aa7:	68 51 27 02 c0       	push   0xc0022751
c0017aac:	e8 59 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ab1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ab9:	83 c4 18             	add    esp,0x18
c0017abc:	5b                   	pop    ebx
c0017abd:	e9 8a eb ff ff       	jmp    c001664c <Thr::terminateFromIRQ(int)>

c0017ac2 <HalInitialiseCoprocessor()>:
c0017ac2:	83 ec 10             	sub    esp,0x10
c0017ac5:	6a 00                	push   0x0
c0017ac7:	68 25 7a 01 c0       	push   0xc0017a25
c0017acc:	6a 07                	push   0x7
c0017ace:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017ad8:	e8 9d 51 ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017add:	e8 ae 70 00 00       	call   c001eb90 <avxDetect>
c0017ae2:	83 c4 10             	add    esp,0x10
c0017ae5:	85 c0                	test   eax,eax
c0017ae7:	74 1c                	je     c0017b05 <HalInitialiseCoprocessor()+0x43>
c0017ae9:	c7 05 70 97 02 c0 ba eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ebba
c0017af3:	c7 05 6c 97 02 c0 cb eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ebcb
c0017afd:	83 c4 0c             	add    esp,0xc
c0017b00:	e9 d7 70 00 00       	jmp    c001ebdc <avxInit>
c0017b05:	e8 16 74 00 00       	call   c001ef20 <absolutelyNoChanceInHell>
c0017b0a:	85 c0                	test   eax,eax
c0017b0c:	74 1c                	je     c0017b2a <HalInitialiseCoprocessor()+0x68>
c0017b0e:	c7 05 70 97 02 c0 38 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef38
c0017b18:	c7 05 6c 97 02 c0 40 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef40
c0017b22:	83 c4 0c             	add    esp,0xc
c0017b25:	e9 1e 74 00 00       	jmp    c001ef48 <sseInit>
c0017b2a:	e8 37 74 00 00       	call   c001ef66 <x87Detect>
c0017b2f:	85 c0                	test   eax,eax
c0017b31:	74 1c                	je     c0017b4f <HalInitialiseCoprocessor()+0x8d>
c0017b33:	c7 05 70 97 02 c0 81 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef81
c0017b3d:	c7 05 6c 97 02 c0 88 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef88
c0017b47:	83 c4 0c             	add    esp,0xc
c0017b4a:	e9 40 74 00 00       	jmp    c001ef8f <x87Init>
c0017b4f:	c7 05 70 97 02 c0 d6 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00173d6
c0017b59:	c7 05 6c 97 02 c0 d6 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00173d6
c0017b63:	0f 20 c0             	mov    eax,cr0
c0017b66:	83 c8 04             	or     eax,0x4
c0017b69:	0f 22 c0             	mov    cr0,eax
c0017b6c:	83 c4 0c             	add    esp,0xc
c0017b6f:	c3                   	ret    

c0017b70 <HalPanic(char const*)>:
c0017b70:	53                   	push   ebx
c0017b71:	83 ec 10             	sub    esp,0x10
c0017b74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b78:	fa                   	cli    
c0017b79:	53                   	push   ebx
c0017b7a:	68 67 27 02 c0       	push   0xc0022767
c0017b7f:	e8 86 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017b84:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	85 c0                	test   eax,eax
c0017b8e:	74 09                	je     c0017b99 <HalPanic(char const*)+0x29>
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	53                   	push   ebx
c0017b94:	ff d0                	call   eax
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017b9e:	85 c0                	test   eax,eax
c0017ba0:	0f 84 dc 00 00 00    	je     c0017c82 <HalPanic(char const*)+0x112>
c0017ba6:	52                   	push   edx
c0017ba7:	6a 01                	push   0x1
c0017ba9:	6a 0f                	push   0xf
c0017bab:	50                   	push   eax
c0017bac:	e8 19 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017bb1:	59                   	pop    ecx
c0017bb2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bb8:	e8 fd 0b ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017bbd:	58                   	pop    eax
c0017bbe:	5a                   	pop    edx
c0017bbf:	68 e4 09 02 c0       	push   0xc00209e4
c0017bc4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bca:	e8 33 0a ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017bcf:	83 c4 0c             	add    esp,0xc
c0017bd2:	6a 01                	push   0x1
c0017bd4:	6a 0f                	push   0xf
c0017bd6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bdc:	e8 e9 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017be1:	59                   	pop    ecx
c0017be2:	58                   	pop    eax
c0017be3:	68 80 27 02 c0       	push   0xc0022780
c0017be8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bee:	e8 b9 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bf3:	83 c4 0c             	add    esp,0xc
c0017bf6:	6a 0f                	push   0xf
c0017bf8:	6a 01                	push   0x1
c0017bfa:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c00:	e8 c5 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c05:	58                   	pop    eax
c0017c06:	5a                   	pop    edx
c0017c07:	68 89 27 02 c0       	push   0xc0022789
c0017c0c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c12:	e8 95 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c17:	83 c4 0c             	add    esp,0xc
c0017c1a:	6a 01                	push   0x1
c0017c1c:	6a 0f                	push   0xf
c0017c1e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c24:	e8 a1 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c29:	59                   	pop    ecx
c0017c2a:	58                   	pop    eax
c0017c2b:	68 cd 27 02 c0       	push   0xc00227cd
c0017c30:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c36:	e8 71 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c3b:	58                   	pop    eax
c0017c3c:	5a                   	pop    edx
c0017c3d:	68 96 27 02 c0       	push   0xc0022796
c0017c42:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c48:	e8 5f 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c4d:	59                   	pop    ecx
c0017c4e:	58                   	pop    eax
c0017c4f:	68 d0 27 02 c0       	push   0xc00227d0
c0017c54:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c5a:	e8 4d 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c5f:	58                   	pop    eax
c0017c60:	5a                   	pop    edx
c0017c61:	53                   	push   ebx
c0017c62:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c68:	e8 3f 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c6d:	59                   	pop    ecx
c0017c6e:	5b                   	pop    ebx
c0017c6f:	68 cd 27 02 c0       	push   0xc00227cd
c0017c74:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c7a:	e8 2d 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c7f:	83 c4 10             	add    esp,0x10
c0017c82:	eb fe                	jmp    c0017c82 <HalPanic(char const*)+0x112>

c0017c84 <HalQueryPerformanceCounter()>:
c0017c84:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c89:	31 d2                	xor    edx,edx
c0017c8b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017c91:	31 c0                	xor    eax,eax
c0017c93:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017c9a:	74 02                	je     c0017c9e <HalQueryPerformanceCounter()+0x1a>
c0017c9c:	0f 31                	rdtsc  
c0017c9e:	c3                   	ret    

c0017c9f <HalInitialise()>:
c0017c9f:	53                   	push   ebx
c0017ca0:	83 ec 08             	sub    esp,0x8
c0017ca3:	e8 09 52 ff ff       	call   c000ceb1 <setupINTS()>
c0017ca8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cad:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017cb4:	75 0f                	jne    c0017cc5 <HalInitialise()+0x26>
c0017cb6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017cbc:	83 e2 fe             	and    edx,0xfffffffe
c0017cbf:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017cc5:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017ccc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017cd2:	83 e2 fe             	and    edx,0xfffffffe
c0017cd5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017cdb:	e8 a0 02 00 00       	call   c0017f80 <picOpen()>
c0017ce0:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017ce7:	74 0a                	je     c0017cf3 <HalInitialise()+0x54>
c0017ce9:	e8 e2 01 00 00       	call   c0017ed0 <picDisable()>
c0017cee:	e8 0d 68 00 00       	call   c001e500 <apicOpen()>
c0017cf3:	50                   	push   eax
c0017cf4:	bb 0f 00 00 00       	mov    ebx,0xf
c0017cf9:	6a 00                	push   0x0
c0017cfb:	68 46 79 01 c0       	push   0xc0017946
c0017d00:	6a 00                	push   0x0
c0017d02:	e8 73 4f ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d07:	83 c4 0c             	add    esp,0xc
c0017d0a:	6a 00                	push   0x0
c0017d0c:	68 46 79 01 c0       	push   0xc0017946
c0017d11:	6a 01                	push   0x1
c0017d13:	e8 62 4f ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d18:	83 c4 0c             	add    esp,0xc
c0017d1b:	6a 00                	push   0x0
c0017d1d:	68 d7 73 01 c0       	push   0xc00173d7
c0017d22:	6a 02                	push   0x2
c0017d24:	e8 51 4f ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d29:	83 c4 0c             	add    esp,0xc
c0017d2c:	6a 00                	push   0x0
c0017d2e:	68 46 79 01 c0       	push   0xc0017946
c0017d33:	6a 03                	push   0x3
c0017d35:	e8 40 4f ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d3a:	83 c4 0c             	add    esp,0xc
c0017d3d:	6a 00                	push   0x0
c0017d3f:	68 46 79 01 c0       	push   0xc0017946
c0017d44:	6a 04                	push   0x4
c0017d46:	e8 2f 4f ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d4b:	83 c4 0c             	add    esp,0xc
c0017d4e:	6a 00                	push   0x0
c0017d50:	68 46 79 01 c0       	push   0xc0017946
c0017d55:	6a 05                	push   0x5
c0017d57:	e8 1e 4f ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d5c:	83 c4 0c             	add    esp,0xc
c0017d5f:	6a 00                	push   0x0
c0017d61:	68 7a 79 01 c0       	push   0xc001797a
c0017d66:	6a 06                	push   0x6
c0017d68:	e8 0d 4f ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d6d:	83 c4 0c             	add    esp,0xc
c0017d70:	6a 00                	push   0x0
c0017d72:	68 f0 73 01 c0       	push   0xc00173f0
c0017d77:	6a 08                	push   0x8
c0017d79:	e8 fc 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d7e:	83 c4 0c             	add    esp,0xc
c0017d81:	6a 00                	push   0x0
c0017d83:	68 46 79 01 c0       	push   0xc0017946
c0017d88:	6a 09                	push   0x9
c0017d8a:	e8 eb 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d8f:	83 c4 0c             	add    esp,0xc
c0017d92:	6a 00                	push   0x0
c0017d94:	68 46 79 01 c0       	push   0xc0017946
c0017d99:	6a 0a                	push   0xa
c0017d9b:	e8 da 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017da0:	83 c4 0c             	add    esp,0xc
c0017da3:	6a 00                	push   0x0
c0017da5:	68 46 79 01 c0       	push   0xc0017946
c0017daa:	6a 0b                	push   0xb
c0017dac:	e8 c9 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017db1:	83 c4 0c             	add    esp,0xc
c0017db4:	6a 00                	push   0x0
c0017db6:	68 56 78 01 c0       	push   0xc0017856
c0017dbb:	6a 0d                	push   0xd
c0017dbd:	e8 b8 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dc2:	83 c4 0c             	add    esp,0xc
c0017dc5:	6a 00                	push   0x0
c0017dc7:	68 bd 78 01 c0       	push   0xc00178bd
c0017dcc:	6a 0e                	push   0xe
c0017dce:	e8 a7 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dd3:	83 c4 10             	add    esp,0x10
c0017dd6:	50                   	push   eax
c0017dd7:	6a 00                	push   0x0
c0017dd9:	68 46 79 01 c0       	push   0xc0017946
c0017dde:	53                   	push   ebx
c0017ddf:	43                   	inc    ebx
c0017de0:	e8 95 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017de5:	83 c4 10             	add    esp,0x10
c0017de8:	83 fb 1e             	cmp    ebx,0x1e
c0017deb:	75 e9                	jne    c0017dd6 <HalInitialise()+0x137>
c0017ded:	50                   	push   eax
c0017dee:	6a 00                	push   0x0
c0017df0:	68 d9 25 01 c0       	push   0xc00125d9
c0017df5:	6a 60                	push   0x60
c0017df7:	e8 7e 4e ff ff       	call   c000cc7a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dfc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e01:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017e0b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017e12:	e8 bc fc fe ff       	call   c0007ad3 <malloc>
c0017e17:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e1a:	89 c3                	mov    ebx,eax
c0017e1c:	e8 37 09 00 00       	call   c0018758 <RTC::RTC()>
c0017e21:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017e2b:	5a                   	pop    edx
c0017e2c:	59                   	pop    ecx
c0017e2d:	53                   	push   ebx
c0017e2e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e34:	e8 0b 49 ff ff       	call   c000c744 <Device::addChild(Device*)>
c0017e39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e3b:	6a 00                	push   0x0
c0017e3d:	6a 00                	push   0x0
c0017e3f:	6a 00                	push   0x0
c0017e41:	53                   	push   ebx
c0017e42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e45:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e4a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017e50:	83 c4 28             	add    esp,0x28
c0017e53:	5b                   	pop    ebx
c0017e54:	c3                   	ret    

c0017e55 <HalMakeBeep(int)>:
c0017e55:	53                   	push   ebx
c0017e56:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017e5a:	85 db                	test   ebx,ebx
c0017e5c:	75 07                	jne    c0017e65 <HalMakeBeep(int)+0x10>
c0017e5e:	e4 61                	in     al,0x61
c0017e60:	83 e0 fc             	and    eax,0xfffffffc
c0017e63:	eb 26                	jmp    c0017e8b <HalMakeBeep(int)+0x36>
c0017e65:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017e6a:	99                   	cdq    
c0017e6b:	f7 fb                	idiv   ebx
c0017e6d:	89 c1                	mov    ecx,eax
c0017e6f:	b0 b6                	mov    al,0xb6
c0017e71:	e6 43                	out    0x43,al
c0017e73:	88 c8                	mov    al,cl
c0017e75:	e6 42                	out    0x42,al
c0017e77:	89 c8                	mov    eax,ecx
c0017e79:	c1 e8 08             	shr    eax,0x8
c0017e7c:	e6 42                	out    0x42,al
c0017e7e:	e4 61                	in     al,0x61
c0017e80:	89 c2                	mov    edx,eax
c0017e82:	83 ca 03             	or     edx,0x3
c0017e85:	38 d0                	cmp    al,dl
c0017e87:	74 04                	je     c0017e8d <HalMakeBeep(int)+0x38>
c0017e89:	88 d0                	mov    al,dl
c0017e8b:	e6 61                	out    0x61,al
c0017e8d:	5b                   	pop    ebx
c0017e8e:	c3                   	ret    

c0017e8f <HalGetRand()>:
c0017e8f:	31 c0                	xor    eax,eax
c0017e91:	c3                   	ret    

c0017e92 <HalEndOfInterrupt(int)>:
c0017e92:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e99:	74 23                	je     c0017ebe <HalEndOfInterrupt(int)+0x2c>
c0017e9b:	83 ec 14             	sub    esp,0x14
c0017e9e:	6a 1b                	push   0x1b
c0017ea0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ea6:	e8 37 f2 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017eab:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017eb0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017eba:	83 c4 1c             	add    esp,0x1c
c0017ebd:	c3                   	ret    
c0017ebe:	e9 41 02 00 00       	jmp    c0018104 <picEOI(int)>

c0017ec3 <HalRestart()>:
c0017ec3:	c3                   	ret    

c0017ec4 <HalShutdown()>:
c0017ec4:	c3                   	ret    

c0017ec5 <HalSleep()>:
c0017ec5:	c3                   	ret    
c0017ec6:	66 90                	xchg   ax,ax

c0017ec8 <picIoWait()>:
c0017ec8:	eb 00                	jmp    c0017eca <picIoWait()+0x2>
c0017eca:	eb 00                	jmp    c0017ecc <picIoWait()+0x4>
c0017ecc:	90                   	nop
c0017ecd:	c3                   	ret    
c0017ece:	66 90                	xchg   ax,ax

c0017ed0 <picDisable()>:
c0017ed0:	83 ec 10             	sub    esp,0x10
c0017ed3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017eda:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017edf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ee3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017ee8:	ee                   	out    dx,al
c0017ee9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017ef0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017ef5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017ef9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017efe:	ee                   	out    dx,al
c0017eff:	90                   	nop
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	c3                   	ret    

c0017f04 <picGetIRQReg(int)>:
c0017f04:	83 ec 10             	sub    esp,0x10
c0017f07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f0b:	0f b6 c0             	movzx  eax,al
c0017f0e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017f15:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017f19:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017f1d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017f22:	ee                   	out    dx,al
c0017f23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f27:	0f b6 c0             	movzx  eax,al
c0017f2a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017f31:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017f35:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017f39:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017f3e:	ee                   	out    dx,al
c0017f3f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017f46:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017f4b:	89 c2                	mov    edx,eax
c0017f4d:	ec                   	in     al,dx
c0017f4e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f52:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f56:	0f b6 c0             	movzx  eax,al
c0017f59:	c1 e0 08             	shl    eax,0x8
c0017f5c:	89 c1                	mov    ecx,eax
c0017f5e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017f65:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017f6a:	89 c2                	mov    edx,eax
c0017f6c:	ec                   	in     al,dx
c0017f6d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017f71:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f75:	0f b6 c0             	movzx  eax,al
c0017f78:	09 c8                	or     eax,ecx
c0017f7a:	83 c4 10             	add    esp,0x10
c0017f7d:	c3                   	ret    
c0017f7e:	66 90                	xchg   ax,ax

c0017f80 <picOpen()>:
c0017f80:	83 ec 50             	sub    esp,0x50
c0017f83:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017f8a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f97:	ee                   	out    dx,al
c0017f98:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017f9f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017fa4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017fa8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017fac:	ee                   	out    dx,al
c0017fad:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017fb5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017fbd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017fc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fc8:	89 c2                	mov    edx,eax
c0017fca:	ec                   	in     al,dx
c0017fcb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017fcf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017fd3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017fd7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fe2:	89 c2                	mov    edx,eax
c0017fe4:	ec                   	in     al,dx
c0017fe5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017fe9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017fed:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017ff1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017ff8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017ffd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018001:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018005:	ee                   	out    dx,al
c0018006:	e8 bd fe ff ff       	call   c0017ec8 <picIoWait()>
c001800b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018012:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018017:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001801b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001801f:	ee                   	out    dx,al
c0018020:	e8 a3 fe ff ff       	call   c0017ec8 <picIoWait()>
c0018025:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018029:	0f b6 c0             	movzx  eax,al
c001802c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018033:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018037:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001803b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001803f:	ee                   	out    dx,al
c0018040:	e8 83 fe ff ff       	call   c0017ec8 <picIoWait()>
c0018045:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018049:	0f b6 c0             	movzx  eax,al
c001804c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018053:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018057:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001805b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001805f:	ee                   	out    dx,al
c0018060:	e8 63 fe ff ff       	call   c0017ec8 <picIoWait()>
c0018065:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001806c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018071:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018075:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018079:	ee                   	out    dx,al
c001807a:	e8 49 fe ff ff       	call   c0017ec8 <picIoWait()>
c001807f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018086:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001808b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001808f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018093:	ee                   	out    dx,al
c0018094:	e8 2f fe ff ff       	call   c0017ec8 <picIoWait()>
c0018099:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00180a0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00180a5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00180a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00180ad:	ee                   	out    dx,al
c00180ae:	e8 15 fe ff ff       	call   c0017ec8 <picIoWait()>
c00180b3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00180ba:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00180bf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00180c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180c7:	ee                   	out    dx,al
c00180c8:	e8 fb fd ff ff       	call   c0017ec8 <picIoWait()>
c00180cd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00180d2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00180d9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00180dd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00180e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180e5:	ee                   	out    dx,al
c00180e6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00180eb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00180f2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00180f6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00180fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00180fe:	ee                   	out    dx,al
c00180ff:	90                   	nop
c0018100:	83 c4 50             	add    esp,0x50
c0018103:	c3                   	ret    

c0018104 <picEOI(int)>:
c0018104:	83 ec 10             	sub    esp,0x10
c0018107:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001810c:	75 1e                	jne    c001812c <picEOI(int)+0x28>
c001810e:	6a 0b                	push   0xb
c0018110:	e8 ef fd ff ff       	call   c0017f04 <picGetIRQReg(int)>
c0018115:	83 c4 04             	add    esp,0x4
c0018118:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001811d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018122:	25 80 00 00 00       	and    eax,0x80
c0018127:	74 73                	je     c001819c <picEOI(int)+0x98>
c0018129:	8d 76 00             	lea    esi,[esi+0x0]
c001812c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018131:	75 31                	jne    c0018164 <picEOI(int)+0x60>
c0018133:	6a 0b                	push   0xb
c0018135:	e8 ca fd ff ff       	call   c0017f04 <picGetIRQReg(int)>
c001813a:	83 c4 04             	add    esp,0x4
c001813d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018146:	98                   	cwde   
c0018147:	85 c0                	test   eax,eax
c0018149:	78 19                	js     c0018164 <picEOI(int)+0x60>
c001814b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018152:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018157:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001815b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018160:	ee                   	out    dx,al
c0018161:	eb 3d                	jmp    c00181a0 <picEOI(int)+0x9c>
c0018163:	90                   	nop
c0018164:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018169:	7e 19                	jle    c0018184 <picEOI(int)+0x80>
c001816b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018172:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018177:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001817b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018180:	ee                   	out    dx,al
c0018181:	8d 76 00             	lea    esi,[esi+0x0]
c0018184:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001818b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018190:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018194:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018199:	ee                   	out    dx,al
c001819a:	eb 04                	jmp    c00181a0 <picEOI(int)+0x9c>
c001819c:	90                   	nop
c001819d:	8d 76 00             	lea    esi,[esi+0x0]
c00181a0:	83 c4 10             	add    esp,0x10
c00181a3:	c3                   	ret    

c00181a4 <RTC::open(int, int, void*)>:
c00181a4:	31 c0                	xor    eax,eax
c00181a6:	c3                   	ret    
c00181a7:	90                   	nop

c00181a8 <RTC::close(int, int, void*)>:
c00181a8:	31 c0                	xor    eax,eax
c00181aa:	c3                   	ret    
c00181ab:	90                   	nop

c00181ac <RTC::timeInSecondsUTC()>:
c00181ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181b0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00181b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00181bc:	c3                   	ret    
c00181bd:	90                   	nop

c00181be <RTC::timeInDatetimeUTC()>:
c00181be:	53                   	push   ebx
c00181bf:	83 ec 14             	sub    esp,0x14
c00181c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00181ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00181cc:	50                   	push   eax
c00181cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00181d0:	83 c4 0c             	add    esp,0xc
c00181d3:	52                   	push   edx
c00181d4:	50                   	push   eax
c00181d5:	53                   	push   ebx
c00181d6:	e8 dd 42 ff ff       	call   c000c4b8 <secondsToDatetime(unsigned long long)>
c00181db:	89 d8                	mov    eax,ebx
c00181dd:	83 c4 14             	add    esp,0x14
c00181e0:	5b                   	pop    ebx
c00181e1:	c2 04 00             	ret    0x4

c00181e4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00181e4:	56                   	push   esi
c00181e5:	53                   	push   ebx
c00181e6:	83 ec 14             	sub    esp,0x14
c00181e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00181ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181ef:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00181f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181f6:	52                   	push   edx
c00181f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181ff:	50                   	push   eax
c0018200:	e8 b3 42 ff ff       	call   c000c4b8 <secondsToDatetime(unsigned long long)>
c0018205:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018209:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001820d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018211:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018215:	89 f0                	mov    eax,esi
c0018217:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001821b:	83 c4 20             	add    esp,0x20
c001821e:	5b                   	pop    ebx
c001821f:	5e                   	pop    esi
c0018220:	ff e0                	jmp    eax

c0018222 <RTC::~RTC()>:
c0018222:	83 ec 0c             	sub    esp,0xc
c0018225:	ba 6c 28 02 c0       	mov    edx,0xc002286c
c001822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822e:	89 10                	mov    DWORD PTR [eax],edx
c0018230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018234:	83 ec 0c             	sub    esp,0xc
c0018237:	50                   	push   eax
c0018238:	e8 07 40 ff ff       	call   c000c244 <Clock::~Clock()>
c001823d:	83 c4 10             	add    esp,0x10
c0018240:	90                   	nop
c0018241:	83 c4 0c             	add    esp,0xc
c0018244:	c3                   	ret    
c0018245:	90                   	nop

c0018246 <RTC::~RTC()>:
c0018246:	83 ec 0c             	sub    esp,0xc
c0018249:	83 ec 0c             	sub    esp,0xc
c001824c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018250:	e8 cd ff ff ff       	call   c0018222 <RTC::~RTC()>
c0018255:	83 c4 10             	add    esp,0x10
c0018258:	83 ec 08             	sub    esp,0x8
c001825b:	68 60 01 00 00       	push   0x160
c0018260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018264:	e8 a3 25 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018269:	83 c4 10             	add    esp,0x10
c001826c:	83 c4 0c             	add    esp,0xc
c001826f:	c3                   	ret    

c0018270 <RTC::get_update_in_progress_flag()>:
c0018270:	83 ec 14             	sub    esp,0x14
c0018273:	6a 0a                	push   0xa
c0018275:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001827b:	e8 1a ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018280:	83 c4 1c             	add    esp,0x1c
c0018283:	0f b6 c0             	movzx  eax,al
c0018286:	c1 e8 07             	shr    eax,0x7
c0018289:	c3                   	ret    

c001828a <RTC::completeRTCRefresh()>:
c001828a:	55                   	push   ebp
c001828b:	57                   	push   edi
c001828c:	56                   	push   esi
c001828d:	53                   	push   ebx
c001828e:	83 ec 3c             	sub    esp,0x3c
c0018291:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018297:	83 ec 0c             	sub    esp,0xc
c001829a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001829e:	e8 cd ff ff ff       	call   c0018270 <RTC::get_update_in_progress_flag()>
c00182a3:	83 c4 10             	add    esp,0x10
c00182a6:	84 c0                	test   al,al
c00182a8:	74 0e                	je     c00182b8 <RTC::completeRTCRefresh()+0x2e>
c00182aa:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182b0:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00182b6:	73 df                	jae    c0018297 <RTC::completeRTCRefresh()+0xd>
c00182b8:	50                   	push   eax
c00182b9:	50                   	push   eax
c00182ba:	6a 00                	push   0x0
c00182bc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182c2:	e8 d3 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182c7:	89 c7                	mov    edi,eax
c00182c9:	58                   	pop    eax
c00182ca:	5a                   	pop    edx
c00182cb:	6a 02                	push   0x2
c00182cd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182d3:	e8 c2 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182d8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00182dc:	59                   	pop    ecx
c00182dd:	5b                   	pop    ebx
c00182de:	6a 04                	push   0x4
c00182e0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182e6:	e8 af ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182eb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00182ef:	5e                   	pop    esi
c00182f0:	5d                   	pop    ebp
c00182f1:	6a 07                	push   0x7
c00182f3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182f9:	e8 9c ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182fe:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018302:	58                   	pop    eax
c0018303:	5a                   	pop    edx
c0018304:	6a 08                	push   0x8
c0018306:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001830c:	e8 89 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018311:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018315:	59                   	pop    ecx
c0018316:	5b                   	pop    ebx
c0018317:	6a 09                	push   0x9
c0018319:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001831f:	e8 76 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018324:	0f b6 c0             	movzx  eax,al
c0018327:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018334:	83 ec 0c             	sub    esp,0xc
c0018337:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001833b:	e8 30 ff ff ff       	call   c0018270 <RTC::get_update_in_progress_flag()>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	84 c0                	test   al,al
c0018345:	74 0e                	je     c0018355 <RTC::completeRTCRefresh()+0xcb>
c0018347:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001834d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018353:	73 df                	jae    c0018334 <RTC::completeRTCRefresh()+0xaa>
c0018355:	51                   	push   ecx
c0018356:	51                   	push   ecx
c0018357:	6a 00                	push   0x0
c0018359:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001835f:	e8 36 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018364:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018368:	5b                   	pop    ebx
c0018369:	5e                   	pop    esi
c001836a:	6a 02                	push   0x2
c001836c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018372:	e8 23 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018377:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001837b:	5d                   	pop    ebp
c001837c:	58                   	pop    eax
c001837d:	6a 04                	push   0x4
c001837f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018385:	e8 10 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001838a:	88 c3                	mov    bl,al
c001838c:	58                   	pop    eax
c001838d:	5a                   	pop    edx
c001838e:	6a 07                	push   0x7
c0018390:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018396:	e8 ff ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001839b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001839f:	59                   	pop    ecx
c00183a0:	5e                   	pop    esi
c00183a1:	6a 08                	push   0x8
c00183a3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183a9:	e8 ec ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183ae:	5d                   	pop    ebp
c00183af:	89 c6                	mov    esi,eax
c00183b1:	58                   	pop    eax
c00183b2:	6a 09                	push   0x9
c00183b4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ba:	e8 db ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183bf:	89 f9                	mov    ecx,edi
c00183c1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00183c5:	83 c4 10             	add    esp,0x10
c00183c8:	0f b6 e8             	movzx  ebp,al
c00183cb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183d0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00183d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00183d8:	74 27                	je     c0018401 <RTC::completeRTCRefresh()+0x177>
c00183da:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00183de:	89 f0                	mov    eax,esi
c00183e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00183e4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00183e8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00183ec:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00183f0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00183f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183f8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00183fc:	e9 2d ff ff ff       	jmp    c001832e <RTC::completeRTCRefresh()+0xa4>
c0018401:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018406:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001840a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001840e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018412:	75 c6                	jne    c00183da <RTC::completeRTCRefresh()+0x150>
c0018414:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018419:	89 f1                	mov    ecx,esi
c001841b:	0f b6 fb             	movzx  edi,bl
c001841e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018422:	0f b6 c9             	movzx  ecx,cl
c0018425:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018429:	89 f1                	mov    ecx,esi
c001842b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001842f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018433:	0f 94 c2             	sete   dl
c0018436:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001843a:	0f 94 c0             	sete   al
c001843d:	21 d0                	and    eax,edx
c001843f:	31 d2                	xor    edx,edx
c0018441:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018445:	0f 94 c2             	sete   dl
c0018448:	85 c2                	test   edx,eax
c001844a:	74 8e                	je     c00183da <RTC::completeRTCRefresh()+0x150>
c001844c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018450:	75 88                	jne    c00183da <RTC::completeRTCRefresh()+0x150>
c0018452:	52                   	push   edx
c0018453:	52                   	push   edx
c0018454:	6a 0b                	push   0xb
c0018456:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001845c:	e8 39 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018461:	83 c4 10             	add    esp,0x10
c0018464:	a8 04                	test   al,0x4
c0018466:	75 7a                	jne    c00184e2 <RTC::completeRTCRefresh()+0x258>
c0018468:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001846c:	c1 ef 04             	shr    edi,0x4
c001846f:	83 e6 0f             	and    esi,0xf
c0018472:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018476:	c1 ed 04             	shr    ebp,0x4
c0018479:	6b ed 0a             	imul   ebp,ebp,0xa
c001847c:	c1 ea 04             	shr    edx,0x4
c001847f:	6b d2 0a             	imul   edx,edx,0xa
c0018482:	83 e1 0f             	and    ecx,0xf
c0018485:	01 d1                	add    ecx,edx
c0018487:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001848b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001848f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018493:	c1 ea 04             	shr    edx,0x4
c0018496:	6b d2 0a             	imul   edx,edx,0xa
c0018499:	83 e1 0f             	and    ecx,0xf
c001849c:	01 d1                	add    ecx,edx
c001849e:	89 fa                	mov    edx,edi
c00184a0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00184a4:	83 e2 07             	and    edx,0x7
c00184a7:	89 d9                	mov    ecx,ebx
c00184a9:	6b d2 0a             	imul   edx,edx,0xa
c00184ac:	83 e1 0f             	and    ecx,0xf
c00184af:	83 e3 80             	and    ebx,0xffffff80
c00184b2:	01 d1                	add    ecx,edx
c00184b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184b8:	09 cb                	or     ebx,ecx
c00184ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184be:	c1 ea 04             	shr    edx,0x4
c00184c1:	6b d2 0a             	imul   edx,edx,0xa
c00184c4:	83 e1 0f             	and    ecx,0xf
c00184c7:	01 d1                	add    ecx,edx
c00184c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184cd:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00184d1:	c1 ea 04             	shr    edx,0x4
c00184d4:	6b d2 0a             	imul   edx,edx,0xa
c00184d7:	01 d6                	add    esi,edx
c00184d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184dd:	83 e2 0f             	and    edx,0xf
c00184e0:	01 d5                	add    ebp,edx
c00184e2:	a8 02                	test   al,0x2
c00184e4:	75 15                	jne    c00184fb <RTC::completeRTCRefresh()+0x271>
c00184e6:	f6 c3 80             	test   bl,0x80
c00184e9:	74 10                	je     c00184fb <RTC::completeRTCRefresh()+0x271>
c00184eb:	83 e3 7f             	and    ebx,0x7f
c00184ee:	b9 18 00 00 00       	mov    ecx,0x18
c00184f3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00184f6:	99                   	cdq    
c00184f7:	f7 f9                	idiv   ecx
c00184f9:	88 d3                	mov    bl,dl
c00184fb:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018501:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018507:	77 06                	ja     c001850f <RTC::completeRTCRefresh()+0x285>
c0018509:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001850f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018514:	31 c9                	xor    ecx,ecx
c0018516:	31 d2                	xor    edx,edx
c0018518:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001851c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018520:	89 cd                	mov    ebp,ecx
c0018522:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018526:	c1 e7 10             	shl    edi,0x10
c0018529:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001852f:	c1 e0 10             	shl    eax,0x10
c0018532:	09 c5                	or     ebp,eax
c0018534:	89 e9                	mov    ecx,ebp
c0018536:	0f b7 c2             	movzx  eax,dx
c0018539:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001853d:	09 f8                	or     eax,edi
c001853f:	89 c2                	mov    edx,eax
c0018541:	50                   	push   eax
c0018542:	50                   	push   eax
c0018543:	88 d9                	mov    cl,bl
c0018545:	51                   	push   ecx
c0018546:	52                   	push   edx
c0018547:	e8 e7 3d ff ff       	call   c000c333 <datetimeToSeconds(datetime_t)>
c001854c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018550:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018556:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001855c:	83 c4 4c             	add    esp,0x4c
c001855f:	5b                   	pop    ebx
c0018560:	5e                   	pop    esi
c0018561:	5f                   	pop    edi
c0018562:	5d                   	pop    ebp
c0018563:	c3                   	ret    

c0018564 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018564:	55                   	push   ebp
c0018565:	57                   	push   edi
c0018566:	56                   	push   esi
c0018567:	53                   	push   ebx
c0018568:	83 ec 30             	sub    esp,0x30
c001856b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001856f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018573:	6a 00                	push   0x0
c0018575:	6a 00                	push   0x0
c0018577:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001857d:	e8 30 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018582:	83 c4 0c             	add    esp,0xc
c0018585:	6a 00                	push   0x0
c0018587:	6a 02                	push   0x2
c0018589:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001858f:	e8 1e ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018594:	89 f8                	mov    eax,edi
c0018596:	89 f9                	mov    ecx,edi
c0018598:	0f b6 c4             	movzx  eax,ah
c001859b:	31 d2                	xor    edx,edx
c001859d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185a1:	c1 e9 10             	shr    ecx,0x10
c00185a4:	89 f0                	mov    eax,esi
c00185a6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00185aa:	89 f0                	mov    eax,esi
c00185ac:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00185b0:	0f b6 c4             	movzx  eax,ah
c00185b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185b7:	89 f0                	mov    eax,esi
c00185b9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00185bd:	c1 e8 10             	shr    eax,0x10
c00185c0:	b9 64 00 00 00       	mov    ecx,0x64
c00185c5:	f7 f1                	div    ecx
c00185c7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00185cb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00185cf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00185d3:	59                   	pop    ecx
c00185d4:	5b                   	pop    ebx
c00185d5:	89 fb                	mov    ebx,edi
c00185d7:	6a 0b                	push   0xb
c00185d9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185df:	e8 b6 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00185e4:	83 c4 10             	add    esp,0x10
c00185e7:	a8 04                	test   al,0x4
c00185e9:	89 c5                	mov    ebp,eax
c00185eb:	75 6e                	jne    c001865b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00185ed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00185f1:	31 d2                	xor    edx,edx
c00185f3:	0f b6 c1             	movzx  eax,cl
c00185f6:	b9 0a 00 00 00       	mov    ecx,0xa
c00185fb:	f7 f1                	div    ecx
c00185fd:	c1 e0 04             	shl    eax,0x4
c0018600:	09 d0                	or     eax,edx
c0018602:	31 d2                	xor    edx,edx
c0018604:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018608:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001860d:	f7 f1                	div    ecx
c001860f:	c1 e0 04             	shl    eax,0x4
c0018612:	09 d0                	or     eax,edx
c0018614:	31 d2                	xor    edx,edx
c0018616:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001861a:	0f b6 c3             	movzx  eax,bl
c001861d:	f7 f1                	div    ecx
c001861f:	c1 e0 04             	shl    eax,0x4
c0018622:	09 d0                	or     eax,edx
c0018624:	31 d2                	xor    edx,edx
c0018626:	89 c3                	mov    ebx,eax
c0018628:	89 f0                	mov    eax,esi
c001862a:	0f b6 c0             	movzx  eax,al
c001862d:	f7 f1                	div    ecx
c001862f:	c1 e0 04             	shl    eax,0x4
c0018632:	09 d0                	or     eax,edx
c0018634:	31 d2                	xor    edx,edx
c0018636:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001863a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001863f:	f7 f1                	div    ecx
c0018641:	c1 e0 04             	shl    eax,0x4
c0018644:	09 d0                	or     eax,edx
c0018646:	31 d2                	xor    edx,edx
c0018648:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001864c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018650:	f7 f1                	div    ecx
c0018652:	c1 e0 04             	shl    eax,0x4
c0018655:	09 d0                	or     eax,edx
c0018657:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001865b:	83 e5 02             	and    ebp,0x2
c001865e:	75 1e                	jne    c001867e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018660:	0f b6 c3             	movzx  eax,bl
c0018663:	83 f8 0b             	cmp    eax,0xb
c0018666:	76 10                	jbe    c0018678 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018668:	8d 53 f4             	lea    edx,[ebx-0xc]
c001866b:	84 d2                	test   dl,dl
c001866d:	88 d3                	mov    bl,dl
c001866f:	75 02                	jne    c0018673 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018671:	b3 0c                	mov    bl,0xc
c0018673:	83 cb 80             	or     ebx,0xffffff80
c0018676:	eb 06                	jmp    c001867e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018678:	85 c0                	test   eax,eax
c001867a:	75 02                	jne    c001867e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001867c:	b3 0c                	mov    bl,0xc
c001867e:	50                   	push   eax
c001867f:	0f b6 db             	movzx  ebx,bl
c0018682:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018687:	52                   	push   edx
c0018688:	6a 00                	push   0x0
c001868a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018690:	e8 1d ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018695:	83 c4 0c             	add    esp,0xc
c0018698:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001869d:	50                   	push   eax
c001869e:	6a 02                	push   0x2
c00186a0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186a6:	e8 07 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186ab:	83 c4 0c             	add    esp,0xc
c00186ae:	53                   	push   ebx
c00186af:	6a 04                	push   0x4
c00186b1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186b7:	e8 f6 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186bc:	83 c4 0c             	add    esp,0xc
c00186bf:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00186c4:	52                   	push   edx
c00186c5:	6a 07                	push   0x7
c00186c7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186cd:	e8 e0 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186d2:	83 c4 0c             	add    esp,0xc
c00186d5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00186da:	50                   	push   eax
c00186db:	6a 08                	push   0x8
c00186dd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186e3:	e8 ca eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186e8:	83 c4 0c             	add    esp,0xc
c00186eb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00186f0:	55                   	push   ebp
c00186f1:	6a 09                	push   0x9
c00186f3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186f9:	e8 b4 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186fe:	5a                   	pop    edx
c00186ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018703:	e8 82 fb ff ff       	call   c001828a <RTC::completeRTCRefresh()>
c0018708:	83 c4 3c             	add    esp,0x3c
c001870b:	b0 01                	mov    al,0x1
c001870d:	5b                   	pop    ebx
c001870e:	5e                   	pop    esi
c001870f:	5f                   	pop    edi
c0018710:	5d                   	pop    ebp
c0018711:	c3                   	ret    

c0018712 <rtcIRQHandler(regs*, void*)>:
c0018712:	53                   	push   ebx
c0018713:	83 ec 10             	sub    esp,0x10
c0018716:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001871a:	6a 0c                	push   0xc
c001871c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018722:	e8 73 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018727:	83 c4 10             	add    esp,0x10
c001872a:	a8 80                	test   al,0x80
c001872c:	74 24                	je     c0018752 <rtcIRQHandler(regs*, void*)+0x40>
c001872e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018735:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001873c:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c0018743:	75 0d                	jne    c0018752 <rtcIRQHandler(regs*, void*)+0x40>
c0018745:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018749:	83 c4 08             	add    esp,0x8
c001874c:	5b                   	pop    ebx
c001874d:	e9 38 fb ff ff       	jmp    c001828a <RTC::completeRTCRefresh()>
c0018752:	83 c4 08             	add    esp,0x8
c0018755:	5b                   	pop    ebx
c0018756:	c3                   	ret    
c0018757:	90                   	nop

c0018758 <RTC::RTC()>:
c0018758:	83 ec 1c             	sub    esp,0x1c
c001875b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875f:	83 ec 08             	sub    esp,0x8
c0018762:	68 4f 28 02 c0       	push   0xc002284f
c0018767:	50                   	push   eax
c0018768:	e8 a1 3a ff ff       	call   c000c20e <Clock::Clock(char const*)>
c001876d:	83 c4 10             	add    esp,0x10
c0018770:	ba 6c 28 02 c0       	mov    edx,0xc002286c
c0018775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018779:	89 10                	mov    DWORD PTR [eax],edx
c001877b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001877f:	83 ec 0c             	sub    esp,0xc
c0018782:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018786:	6a 01                	push   0x1
c0018788:	68 12 87 01 c0       	push   0xc0018712
c001878d:	6a 08                	push   0x8
c001878f:	50                   	push   eax
c0018790:	e8 5b 3f ff ff       	call   c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018795:	83 c4 20             	add    esp,0x20
c0018798:	89 c2                	mov    edx,eax
c001879a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00187a4:	fa                   	cli    
c00187a5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187aa:	83 c0 01             	add    eax,0x1
c00187ad:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00187b2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187b7:	83 ec 08             	sub    esp,0x8
c00187ba:	6a 0b                	push   0xb
c00187bc:	50                   	push   eax
c00187bd:	e8 d8 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187c2:	83 c4 10             	add    esp,0x10
c00187c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00187c9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187ce:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00187d2:	83 ca 10             	or     edx,0x10
c00187d5:	0f b6 d2             	movzx  edx,dl
c00187d8:	83 ec 04             	sub    esp,0x4
c00187db:	52                   	push   edx
c00187dc:	6a 0b                	push   0xb
c00187de:	50                   	push   eax
c00187df:	e8 ce ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	83 ec 0c             	sub    esp,0xc
c00187ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187ee:	e8 97 fa ff ff       	call   c001828a <RTC::completeRTCRefresh()>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187fb:	83 e8 01             	sub    eax,0x1
c00187fe:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018803:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018808:	85 c0                	test   eax,eax
c001880a:	75 01                	jne    c001880d <RTC::RTC()+0xb5>
c001880c:	fb                   	sti    
c001880d:	90                   	nop
c001880e:	83 c4 1c             	add    esp,0x1c
c0018811:	c3                   	ret    
c0018812:	66 90                	xchg   ax,ax

c0018814 <HalConsoleScroll(int, int)>:
c0018814:	83 ec 10             	sub    esp,0x10
c0018817:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001881f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018827:	90                   	nop
c0018828:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001882d:	0f 8f e1 00 00 00    	jg     c0018914 <HalConsoleScroll(int, int)+0x100>
c0018833:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001883b:	90                   	nop
c001883c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018844:	0f 8f be 00 00 00    	jg     c0018908 <HalConsoleScroll(int, int)+0xf4>
c001884a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001884e:	89 d0                	mov    eax,edx
c0018850:	c1 e0 02             	shl    eax,0x2
c0018853:	01 d0                	add    eax,edx
c0018855:	c1 e0 05             	shl    eax,0x5
c0018858:	89 c2                	mov    edx,eax
c001885a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001885e:	01 d0                	add    eax,edx
c0018860:	89 c2                	mov    edx,eax
c0018862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018866:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018869:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001886d:	89 d0                	mov    eax,edx
c001886f:	c1 e0 02             	shl    eax,0x2
c0018872:	01 d0                	add    eax,edx
c0018874:	c1 e0 05             	shl    eax,0x5
c0018877:	89 c2                	mov    edx,eax
c0018879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001887d:	01 d0                	add    eax,edx
c001887f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018889:	01 d0                	add    eax,edx
c001888b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001888d:	88 10                	mov    BYTE PTR [eax],dl
c001888f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018894:	75 66                	jne    c00188fc <HalConsoleScroll(int, int)+0xe8>
c0018896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001889a:	83 e0 01             	and    eax,0x1
c001889d:	74 39                	je     c00188d8 <HalConsoleScroll(int, int)+0xc4>
c001889f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188a3:	83 e0 0f             	and    eax,0xf
c00188a6:	88 c2                	mov    dl,al
c00188a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188ac:	c1 e0 04             	shl    eax,0x4
c00188af:	09 d0                	or     eax,edx
c00188b1:	88 c1                	mov    cl,al
c00188b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188b7:	89 d0                	mov    eax,edx
c00188b9:	c1 e0 02             	shl    eax,0x2
c00188bc:	01 d0                	add    eax,edx
c00188be:	c1 e0 05             	shl    eax,0x5
c00188c1:	89 c2                	mov    edx,eax
c00188c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188c7:	01 d0                	add    eax,edx
c00188c9:	89 c2                	mov    edx,eax
c00188cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188cf:	01 d0                	add    eax,edx
c00188d1:	88 ca                	mov    dl,cl
c00188d3:	88 10                	mov    BYTE PTR [eax],dl
c00188d5:	eb 25                	jmp    c00188fc <HalConsoleScroll(int, int)+0xe8>
c00188d7:	90                   	nop
c00188d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188dc:	89 d0                	mov    eax,edx
c00188de:	c1 e0 02             	shl    eax,0x2
c00188e1:	01 d0                	add    eax,edx
c00188e3:	c1 e0 05             	shl    eax,0x5
c00188e6:	89 c2                	mov    edx,eax
c00188e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188ec:	01 d0                	add    eax,edx
c00188ee:	89 c2                	mov    edx,eax
c00188f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188f4:	01 d0                	add    eax,edx
c00188f6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00188f9:	8d 76 00             	lea    esi,[esi+0x0]
c00188fc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018901:	e9 36 ff ff ff       	jmp    c001883c <HalConsoleScroll(int, int)+0x28>
c0018906:	66 90                	xchg   ax,ax
c0018908:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001890d:	e9 16 ff ff ff       	jmp    c0018828 <HalConsoleScroll(int, int)+0x14>
c0018912:	66 90                	xchg   ax,ax
c0018914:	90                   	nop
c0018915:	83 c4 10             	add    esp,0x10
c0018918:	c3                   	ret    
c0018919:	8d 76 00             	lea    esi,[esi+0x0]

c001891c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001891c:	83 ec 14             	sub    esp,0x14
c001891f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018923:	88 04 24             	mov    BYTE PTR [esp],al
c0018926:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018929:	0f b6 c0             	movzx  eax,al
c001892c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018930:	89 d1                	mov    ecx,edx
c0018932:	83 e1 0f             	and    ecx,0xf
c0018935:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018939:	c1 e2 04             	shl    edx,0x4
c001893c:	0f b6 d2             	movzx  edx,dl
c001893f:	09 ca                	or     edx,ecx
c0018941:	c1 e2 08             	shl    edx,0x8
c0018944:	09 d0                	or     eax,edx
c0018946:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001894b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018953:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018957:	89 d0                	mov    eax,edx
c0018959:	c1 e0 02             	shl    eax,0x2
c001895c:	01 d0                	add    eax,edx
c001895e:	c1 e0 04             	shl    eax,0x4
c0018961:	89 c2                	mov    edx,eax
c0018963:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018967:	01 d0                	add    eax,edx
c0018969:	d1 e0                	shl    eax,1
c001896b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001896f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018973:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018978:	66 89 10             	mov    WORD PTR [eax],dx
c001897b:	90                   	nop
c001897c:	83 c4 14             	add    esp,0x14
c001897f:	c3                   	ret    

c0018980 <HalConsoleCursorUpdate(int, int)>:
c0018980:	83 ec 20             	sub    esp,0x20
c0018983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018987:	89 c2                	mov    edx,eax
c0018989:	c1 e2 02             	shl    edx,0x2
c001898c:	01 d0                	add    eax,edx
c001898e:	c1 e0 04             	shl    eax,0x4
c0018991:	89 c2                	mov    edx,eax
c0018993:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018997:	01 d0                	add    eax,edx
c0018999:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001899e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00189a5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00189aa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00189ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189b2:	ee                   	out    dx,al
c00189b3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189b8:	0f b6 c0             	movzx  eax,al
c00189bb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00189c2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00189c6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00189ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189ce:	ee                   	out    dx,al
c00189cf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00189d6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00189db:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00189df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189e3:	ee                   	out    dx,al
c00189e4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00189e9:	c1 e8 08             	shr    eax,0x8
c00189ec:	0f b6 c0             	movzx  eax,al
c00189ef:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00189f6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00189fa:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00189fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a02:	ee                   	out    dx,al
c0018a03:	90                   	nop
c0018a04:	83 c4 20             	add    esp,0x20
c0018a07:	c3                   	ret    

c0018a08 <FAT::getName()>:
c0018a08:	b8 a0 28 02 c0       	mov    eax,0xc00228a0
c0018a0d:	c3                   	ret    
c0018a0e:	66 90                	xchg   ax,ax

c0018a10 <FAT::tell(void*, unsigned long long*)>:
c0018a10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a15:	75 09                	jne    c0018a20 <FAT::tell(void*, unsigned long long*)+0x10>
c0018a17:	b8 04 00 00 00       	mov    eax,0x4
c0018a1c:	c3                   	ret    
c0018a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a20:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a25:	75 09                	jne    c0018a30 <FAT::tell(void*, unsigned long long*)+0x20>
c0018a27:	b8 04 00 00 00       	mov    eax,0x4
c0018a2c:	c3                   	ret    
c0018a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018a37:	ba 00 00 00 00       	mov    edx,0x0
c0018a3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a40:	89 01                	mov    DWORD PTR [ecx],eax
c0018a42:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a45:	b8 00 00 00 00       	mov    eax,0x0
c0018a4a:	c3                   	ret    
c0018a4b:	90                   	nop

c0018a4c <FAT::stat(void*, unsigned long long*)>:
c0018a4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a51:	75 09                	jne    c0018a5c <FAT::stat(void*, unsigned long long*)+0x10>
c0018a53:	b8 04 00 00 00       	mov    eax,0x4
c0018a58:	c3                   	ret    
c0018a59:	8d 76 00             	lea    esi,[esi+0x0]
c0018a5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a61:	75 09                	jne    c0018a6c <FAT::stat(void*, unsigned long long*)+0x20>
c0018a63:	b8 04 00 00 00       	mov    eax,0x4
c0018a68:	c3                   	ret    
c0018a69:	8d 76 00             	lea    esi,[esi+0x0]
c0018a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a73:	ba 00 00 00 00       	mov    edx,0x0
c0018a78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a7c:	89 01                	mov    DWORD PTR [ecx],eax
c0018a7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a81:	b8 00 00 00 00       	mov    eax,0x0
c0018a86:	c3                   	ret    
c0018a87:	90                   	nop

c0018a88 <FAT::~FAT()>:
c0018a88:	83 ec 0c             	sub    esp,0xc
c0018a8b:	ba ec 28 02 c0       	mov    edx,0xc00228ec
c0018a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a94:	89 10                	mov    DWORD PTR [eax],edx
c0018a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a9a:	83 ec 0c             	sub    esp,0xc
c0018a9d:	50                   	push   eax
c0018a9e:	e8 83 2a ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0018aa3:	83 c4 10             	add    esp,0x10
c0018aa6:	90                   	nop
c0018aa7:	83 c4 0c             	add    esp,0xc
c0018aaa:	c3                   	ret    
c0018aab:	90                   	nop

c0018aac <FAT::~FAT()>:
c0018aac:	83 ec 0c             	sub    esp,0xc
c0018aaf:	83 ec 0c             	sub    esp,0xc
c0018ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ab6:	e8 cd ff ff ff       	call   c0018a88 <FAT::~FAT()>
c0018abb:	83 c4 10             	add    esp,0x10
c0018abe:	83 ec 08             	sub    esp,0x8
c0018ac1:	6a 08                	push   0x8
c0018ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ac7:	e8 40 1d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018acc:	83 c4 10             	add    esp,0x10
c0018acf:	83 c4 0c             	add    esp,0xc
c0018ad2:	c3                   	ret    
c0018ad3:	90                   	nop

c0018ad4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018ad4:	83 ec 1c             	sub    esp,0x1c
c0018ad7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018ade:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018ae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ae7:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018aee:	83 f8 ff             	cmp    eax,0xffffffff
c0018af1:	75 35                	jne    c0018b28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018af3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018af7:	88 c2                	mov    dl,al
c0018af9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018afe:	01 d0                	add    eax,edx
c0018b00:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b04:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b0e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b15:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b1e:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b25:	eb 19                	jmp    c0018b40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018b27:	90                   	nop
c0018b28:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b2c:	88 c2                	mov    dl,al
c0018b2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b32:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b39:	01 d0                	add    eax,edx
c0018b3b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b3f:	90                   	nop
c0018b40:	83 ec 04             	sub    esp,0x4
c0018b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b4b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018b4f:	50                   	push   eax
c0018b50:	e8 9e c4 fe ff       	call   c0004ff3 <f_getlabel>
c0018b55:	83 c4 10             	add    esp,0x10
c0018b58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b61:	75 09                	jne    c0018b6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018b63:	b8 00 00 00 00       	mov    eax,0x0
c0018b68:	eb 0a                	jmp    c0018b74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018b6a:	66 90                	xchg   ax,ax
c0018b6c:	b8 01 00 00 00       	mov    eax,0x1
c0018b71:	8d 76 00             	lea    esi,[esi+0x0]
c0018b74:	83 c4 1c             	add    esp,0x1c
c0018b77:	c3                   	ret    

c0018b78 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018b78:	53                   	push   ebx
c0018b79:	83 ec 58             	sub    esp,0x58
c0018b7c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018b84:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018b88:	b9 00 00 00 00       	mov    ecx,0x0
c0018b8d:	b8 3c 00 00 00       	mov    eax,0x3c
c0018b92:	83 e0 f8             	and    eax,0xfffffff8
c0018b95:	89 c3                	mov    ebx,eax
c0018b97:	b8 00 00 00 00       	mov    eax,0x0
c0018b9c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018ba0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018ba4:	83 c0 08             	add    eax,0x8
c0018ba7:	39 d8                	cmp    eax,ebx
c0018ba9:	72 f1                	jb     c0018b9c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018bab:	01 c2                	add    edx,eax
c0018bad:	89 0a                	mov    DWORD PTR [edx],ecx
c0018baf:	83 c2 04             	add    edx,0x4
c0018bb2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bb6:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0018bc0:	75 36                	jne    c0018bf8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018bc2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018bc6:	88 c2                	mov    dl,al
c0018bc8:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bcd:	01 d0                	add    eax,edx
c0018bcf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018bd3:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018bd9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bdd:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018be4:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018be9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018bed:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018bf4:	eb 1a                	jmp    c0018c10 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018bf6:	66 90                	xchg   ax,ax
c0018bf8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018bfc:	88 c2                	mov    dl,al
c0018bfe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c02:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c09:	01 d0                	add    eax,edx
c0018c0b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c0f:	90                   	nop
c0018c10:	83 ec 08             	sub    esp,0x8
c0018c13:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018c17:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c1b:	50                   	push   eax
c0018c1c:	e8 4f 7c fe ff       	call   c0000870 <strcat>
c0018c21:	83 c4 10             	add    esp,0x10
c0018c24:	83 ec 0c             	sub    esp,0xc
c0018c27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c2b:	50                   	push   eax
c0018c2c:	e8 16 c5 fe ff       	call   c0005147 <f_setlabel>
c0018c31:	83 c4 10             	add    esp,0x10
c0018c34:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c38:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018c3d:	75 09                	jne    c0018c48 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018c3f:	b8 00 00 00 00       	mov    eax,0x0
c0018c44:	eb 0a                	jmp    c0018c50 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018c46:	66 90                	xchg   ax,ax
c0018c48:	b8 01 00 00 00       	mov    eax,0x1
c0018c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c50:	83 c4 58             	add    esp,0x58
c0018c53:	5b                   	pop    ebx
c0018c54:	c3                   	ret    
c0018c55:	90                   	nop
c0018c56:	66 90                	xchg   ax,ax

c0018c58 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018c58:	83 ec 2c             	sub    esp,0x2c
c0018c5b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c63:	83 ec 08             	sub    esp,0x8
c0018c66:	68 c4 28 02 c0       	push   0xc00228c4
c0018c6b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c6f:	e8 0c 7b fe ff       	call   c0000780 <strcmp>
c0018c74:	83 c4 10             	add    esp,0x10
c0018c77:	85 c0                	test   eax,eax
c0018c79:	0f 94 c0             	sete   al
c0018c7c:	0f b6 c0             	movzx  eax,al
c0018c7f:	85 c0                	test   eax,eax
c0018c81:	74 0d                	je     c0018c90 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018c83:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c8b:	e9 c0 00 00 00       	jmp    c0018d50 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c90:	83 ec 08             	sub    esp,0x8
c0018c93:	68 b6 28 02 c0       	push   0xc00228b6
c0018c98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c9c:	e8 df 7a fe ff       	call   c0000780 <strcmp>
c0018ca1:	83 c4 10             	add    esp,0x10
c0018ca4:	85 c0                	test   eax,eax
c0018ca6:	0f 94 c0             	sete   al
c0018ca9:	0f b6 c0             	movzx  eax,al
c0018cac:	85 c0                	test   eax,eax
c0018cae:	74 10                	je     c0018cc0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018cb0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cb8:	e9 93 00 00 00       	jmp    c0018d50 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc0:	83 ec 08             	sub    esp,0x8
c0018cc3:	68 bc 28 02 c0       	push   0xc00228bc
c0018cc8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ccc:	e8 af 7a fe ff       	call   c0000780 <strcmp>
c0018cd1:	83 c4 10             	add    esp,0x10
c0018cd4:	85 c0                	test   eax,eax
c0018cd6:	0f 94 c0             	sete   al
c0018cd9:	0f b6 c0             	movzx  eax,al
c0018cdc:	85 c0                	test   eax,eax
c0018cde:	74 0c                	je     c0018cec <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018ce0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ce8:	eb 66                	jmp    c0018d50 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cea:	66 90                	xchg   ax,ax
c0018cec:	83 ec 08             	sub    esp,0x8
c0018cef:	68 9c 00 02 c0       	push   0xc002009c
c0018cf4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cf8:	e8 83 7a fe ff       	call   c0000780 <strcmp>
c0018cfd:	83 c4 10             	add    esp,0x10
c0018d00:	85 c0                	test   eax,eax
c0018d02:	0f 94 c0             	sete   al
c0018d05:	0f b6 c0             	movzx  eax,al
c0018d08:	85 c0                	test   eax,eax
c0018d0a:	74 0c                	je     c0018d18 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018d0c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d14:	eb 3a                	jmp    c0018d50 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d16:	66 90                	xchg   ax,ax
c0018d18:	83 ec 08             	sub    esp,0x8
c0018d1b:	68 c2 28 02 c0       	push   0xc00228c2
c0018d20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d24:	e8 57 7a fe ff       	call   c0000780 <strcmp>
c0018d29:	83 c4 10             	add    esp,0x10
c0018d2c:	85 c0                	test   eax,eax
c0018d2e:	0f 94 c0             	sete   al
c0018d31:	0f b6 c0             	movzx  eax,al
c0018d34:	85 c0                	test   eax,eax
c0018d36:	74 0c                	je     c0018d44 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018d38:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018d40:	eb 0e                	jmp    c0018d50 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d42:	66 90                	xchg   ax,ax
c0018d44:	b8 08 00 00 00       	mov    eax,0x8
c0018d49:	e9 ea 00 00 00       	jmp    c0018e38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d4e:	66 90                	xchg   ax,ax
c0018d50:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018d57:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d60:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d67:	83 f8 ff             	cmp    eax,0xffffffff
c0018d6a:	75 34                	jne    c0018da0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018d6c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d70:	88 c2                	mov    dl,al
c0018d72:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d77:	01 d0                	add    eax,edx
c0018d79:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d7d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d87:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d8e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d93:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d97:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d9e:	eb 18                	jmp    c0018db8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018da0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018da4:	88 c2                	mov    dl,al
c0018da6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018daa:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018db1:	01 d0                	add    eax,edx
c0018db3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018db7:	90                   	nop
c0018db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018dbc:	88 04 24             	mov    BYTE PTR [esp],al
c0018dbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018dc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018dc7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018dcf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018dd4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018ddc:	83 ec 0c             	sub    esp,0xc
c0018ddf:	68 00 20 00 00       	push   0x2000
c0018de4:	e8 ea ec fe ff       	call   c0007ad3 <malloc>
c0018de9:	83 c4 10             	add    esp,0x10
c0018dec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018df0:	68 00 20 00 00       	push   0x2000
c0018df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018df9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018dfd:	50                   	push   eax
c0018dfe:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e02:	50                   	push   eax
c0018e03:	e8 3c c6 fe ff       	call   c0005444 <f_mkfs>
c0018e08:	83 c4 10             	add    esp,0x10
c0018e0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e14:	75 0a                	jne    c0018e20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018e16:	b8 00 00 00 00       	mov    eax,0x0
c0018e1b:	eb 1b                	jmp    c0018e38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e20:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018e25:	75 09                	jne    c0018e30 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018e27:	b8 09 00 00 00       	mov    eax,0x9
c0018e2c:	eb 0a                	jmp    c0018e38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e2e:	66 90                	xchg   ax,ax
c0018e30:	b8 01 00 00 00       	mov    eax,0x1
c0018e35:	8d 76 00             	lea    esi,[esi+0x0]
c0018e38:	83 c4 2c             	add    esp,0x2c
c0018e3b:	c3                   	ret    

c0018e3c <FAT::tryMount(LogicalDisk*, int)>:
c0018e3c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018e42:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e47:	83 f8 14             	cmp    eax,0x14
c0018e4a:	75 18                	jne    c0018e64 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018e4c:	83 ec 0c             	sub    esp,0xc
c0018e4f:	68 c8 28 02 c0       	push   0xc00228c8
c0018e54:	e8 88 84 ff ff       	call   c00112e1 <KePanic(char const*)>
c0018e59:	83 c4 10             	add    esp,0x10
c0018e5c:	b0 00                	mov    al,0x0
c0018e5e:	e9 ed 01 00 00       	jmp    c0019050 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e63:	90                   	nop
c0018e64:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018e6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e71:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e77:	3d 00 02 00 00       	cmp    eax,0x200
c0018e7c:	74 0a                	je     c0018e88 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018e7e:	b0 00                	mov    al,0x0
c0018e80:	e9 cb 01 00 00       	jmp    c0019050 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]
c0018e88:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018e90:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e97:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e9e:	83 f8 ff             	cmp    eax,0xffffffff
c0018ea1:	74 09                	je     c0018eac <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018ea3:	b0 01                	mov    al,0x1
c0018ea5:	e9 a6 01 00 00       	jmp    c0019050 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018eaa:	66 90                	xchg   ax,ax
c0018eac:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018eb6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018ebe:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018ec5:	88 c2                	mov    dl,al
c0018ec7:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ecc:	01 d0                	add    eax,edx
c0018ece:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018ed5:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018edb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018ee2:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ee9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018eee:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018ef5:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018efc:	83 ec 0c             	sub    esp,0xc
c0018eff:	68 34 02 00 00       	push   0x234
c0018f04:	e8 ca eb fe ff       	call   c0007ad3 <malloc>
c0018f09:	83 c4 10             	add    esp,0x10
c0018f0c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018f13:	83 ec 04             	sub    esp,0x4
c0018f16:	6a 00                	push   0x0
c0018f18:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f1f:	50                   	push   eax
c0018f20:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f27:	e8 12 ad fe ff       	call   c0003c3e <f_mount>
c0018f2c:	83 c4 10             	add    esp,0x10
c0018f2f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f36:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018f3e:	74 1c                	je     c0018f5c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018f40:	83 ec 0c             	sub    esp,0xc
c0018f43:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f4a:	e8 a4 eb fe ff       	call   c0007af3 <rfree>
c0018f4f:	83 c4 10             	add    esp,0x10
c0018f52:	b0 00                	mov    al,0x0
c0018f54:	e9 f7 00 00 00       	jmp    c0019050 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	83 ec 04             	sub    esp,0x4
c0018f5f:	68 00 01 00 00       	push   0x100
c0018f64:	6a 00                	push   0x0
c0018f66:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f6d:	50                   	push   eax
c0018f6e:	e8 7d 75 fe ff       	call   c00004f0 <memset>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	83 ec 08             	sub    esp,0x8
c0018f79:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f80:	50                   	push   eax
c0018f81:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f88:	50                   	push   eax
c0018f89:	e8 e2 78 fe ff       	call   c0000870 <strcat>
c0018f8e:	83 c4 10             	add    esp,0x10
c0018f91:	83 ec 08             	sub    esp,0x8
c0018f94:	68 d6 28 02 c0       	push   0xc00228d6
c0018f99:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fa0:	50                   	push   eax
c0018fa1:	e8 ca 78 fe ff       	call   c0000870 <strcat>
c0018fa6:	83 c4 10             	add    esp,0x10
c0018fa9:	83 ec 04             	sub    esp,0x4
c0018fac:	6a 01                	push   0x1
c0018fae:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018fb5:	50                   	push   eax
c0018fb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fba:	50                   	push   eax
c0018fbb:	e8 e0 ac fe ff       	call   c0003ca0 <f_open>
c0018fc0:	83 c4 10             	add    esp,0x10
c0018fc3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018fca:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018fd1:	85 c0                	test   eax,eax
c0018fd3:	74 0b                	je     c0018fe0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018fd5:	78 31                	js     c0019008 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fd7:	83 e8 04             	sub    eax,0x4
c0018fda:	83 f8 01             	cmp    eax,0x1
c0018fdd:	77 29                	ja     c0019008 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fdf:	90                   	nop
c0018fe0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018fe8:	83 ec 0c             	sub    esp,0xc
c0018feb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fef:	50                   	push   eax
c0018ff0:	e8 5b b4 fe ff       	call   c0004450 <f_close>
c0018ff5:	83 c4 10             	add    esp,0x10
c0018ff8:	90                   	nop
c0018ff9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019001:	85 c0                	test   eax,eax
c0019003:	74 43                	je     c0019048 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019005:	eb 31                	jmp    c0019038 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019007:	90                   	nop
c0019008:	83 ec 0c             	sub    esp,0xc
c001900b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019012:	e8 dc ea fe ff       	call   c0007af3 <rfree>
c0019017:	83 c4 10             	add    esp,0x10
c001901a:	83 ec 04             	sub    esp,0x4
c001901d:	6a 00                	push   0x0
c001901f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019026:	50                   	push   eax
c0019027:	6a 00                	push   0x0
c0019029:	e8 10 ac fe ff       	call   c0003c3e <f_mount>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	b0 00                	mov    al,0x0
c0019033:	eb 1b                	jmp    c0019050 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019035:	8d 76 00             	lea    esi,[esi+0x0]
c0019038:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c001903d:	83 c0 01             	add    eax,0x1
c0019040:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0019045:	8d 76 00             	lea    esi,[esi+0x0]
c0019048:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001904f:	90                   	nop
c0019050:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019056:	c3                   	ret    
c0019057:	90                   	nop

c0019058 <FAT::allocateSwapfile(char const*, int)>:
c0019058:	55                   	push   ebp
c0019059:	57                   	push   edi
c001905a:	56                   	push   esi
c001905b:	53                   	push   ebx
c001905c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019062:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001906d:	83 ec 0c             	sub    esp,0xc
c0019070:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019077:	e8 57 ea fe ff       	call   c0007ad3 <malloc>
c001907c:	83 c4 10             	add    esp,0x10
c001907f:	89 c7                	mov    edi,eax
c0019081:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0019086:	83 ec 04             	sub    esp,0x4
c0019089:	50                   	push   eax
c001908a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019091:	57                   	push   edi
c0019092:	e8 85 27 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c0019097:	83 c4 10             	add    esp,0x10
c001909a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00190a1:	83 ec 04             	sub    esp,0x4
c00190a4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00190a8:	50                   	push   eax
c00190a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190ad:	50                   	push   eax
c00190ae:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190b5:	e8 2c 2b ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c00190ba:	83 c4 10             	add    esp,0x10
c00190bd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00190c4:	c1 e0 14             	shl    eax,0x14
c00190c7:	89 c7                	mov    edi,eax
c00190c9:	89 c5                	mov    ebp,eax
c00190cb:	c1 fd 1f             	sar    ebp,0x1f
c00190ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190d6:	89 f9                	mov    ecx,edi
c00190d8:	31 c1                	xor    ecx,eax
c00190da:	89 cb                	mov    ebx,ecx
c00190dc:	89 e9                	mov    ecx,ebp
c00190de:	31 d1                	xor    ecx,edx
c00190e0:	89 ce                	mov    esi,ecx
c00190e2:	89 f0                	mov    eax,esi
c00190e4:	09 d8                	or     eax,ebx
c00190e6:	0f 84 9c 00 00 00    	je     c0019188 <FAT::allocateSwapfile(char const*, int)+0x130>
c00190ec:	83 ec 0c             	sub    esp,0xc
c00190ef:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190f6:	e8 b7 29 ff ff       	call   c000bab2 <File::unlink()>
c00190fb:	83 c4 10             	add    esp,0x10
c00190fe:	83 ec 08             	sub    esp,0x8
c0019101:	6a 12                	push   0x12
c0019103:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001910a:	e8 d5 27 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c001910f:	83 c4 10             	add    esp,0x10
c0019112:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019119:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001911f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019126:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001912d:	c1 e0 14             	shl    eax,0x14
c0019130:	83 ec 04             	sub    esp,0x4
c0019133:	6a 01                	push   0x1
c0019135:	50                   	push   eax
c0019136:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001913d:	e8 95 c1 fe ff       	call   c00052d7 <f_expand>
c0019142:	83 c4 10             	add    esp,0x10
c0019145:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001914c:	8b 00                	mov    eax,DWORD PTR [eax]
c001914e:	83 c0 10             	add    eax,0x10
c0019151:	8b 00                	mov    eax,DWORD PTR [eax]
c0019153:	83 ec 0c             	sub    esp,0xc
c0019156:	8d 54 24 24          	lea    edx,[esp+0x24]
c001915a:	52                   	push   edx
c001915b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001915f:	52                   	push   edx
c0019160:	6a 00                	push   0x0
c0019162:	68 00 04 00 00       	push   0x400
c0019167:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001916e:	ff d0                	call   eax
c0019170:	83 c4 20             	add    esp,0x20
c0019173:	83 ec 0c             	sub    esp,0xc
c0019176:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001917d:	e8 c0 27 ff ff       	call   c000b942 <File::close()>
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	8d 76 00             	lea    esi,[esi+0x0]
c0019188:	83 ec 08             	sub    esp,0x8
c001918b:	6a 01                	push   0x1
c001918d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019194:	e8 4b 27 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c0019199:	83 c4 10             	add    esp,0x10
c001919c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00191a5:	83 c0 0c             	add    eax,0xc
c00191a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00191aa:	83 ec 0c             	sub    esp,0xc
c00191ad:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191b1:	52                   	push   edx
c00191b2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00191b6:	52                   	push   edx
c00191b7:	6a 00                	push   0x0
c00191b9:	6a 04                	push   0x4
c00191bb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00191c2:	ff d0                	call   eax
c00191c4:	83 c4 20             	add    esp,0x20
c00191c7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191ce:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191d4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00191db:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00191e2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00191e5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00191ec:	83 ec 0c             	sub    esp,0xc
c00191ef:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191f6:	e8 47 27 ff ff       	call   c000b942 <File::close()>
c00191fb:	83 c4 10             	add    esp,0x10
c00191fe:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019205:	ba 00 00 00 00       	mov    edx,0x0
c001920a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019210:	5b                   	pop    ebx
c0019211:	5e                   	pop    esi
c0019212:	5f                   	pop    edi
c0019213:	5d                   	pop    ebp
c0019214:	c3                   	ret    
c0019215:	90                   	nop
c0019216:	66 90                	xchg   ax,ax

c0019218 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019218:	57                   	push   edi
c0019219:	56                   	push   esi
c001921a:	53                   	push   ebx
c001921b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019221:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019229:	74 0d                	je     c0019238 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001922b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019233:	75 0f                	jne    c0019244 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019235:	8d 76 00             	lea    esi,[esi+0x0]
c0019238:	b8 04 00 00 00       	mov    eax,0x4
c001923d:	e9 3a 01 00 00       	jmp    c001937c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019242:	66 90                	xchg   ax,ax
c0019244:	83 ec 08             	sub    esp,0x8
c0019247:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001924e:	50                   	push   eax
c001924f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019256:	e8 c1 b4 fe ff       	call   c000471c <f_readdir>
c001925b:	83 c4 10             	add    esp,0x10
c001925e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019265:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001926c:	83 ec 0c             	sub    esp,0xc
c001926f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019276:	83 c0 16             	add    eax,0x16
c0019279:	50                   	push   eax
c001927a:	e8 01 73 fe ff       	call   c0000580 <strlen>
c001927f:	83 c4 10             	add    esp,0x10
c0019282:	ba 00 00 00 00       	mov    edx,0x0
c0019287:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001928b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001928f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019296:	0f b6 c0             	movzx  eax,al
c0019299:	83 e0 10             	and    eax,0x10
c001929c:	74 0a                	je     c00192a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001929e:	b8 02 00 00 00       	mov    eax,0x2
c00192a3:	eb 0b                	jmp    c00192b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00192a5:	8d 76 00             	lea    esi,[esi+0x0]
c00192a8:	b8 01 00 00 00       	mov    eax,0x1
c00192ad:	8d 76 00             	lea    esi,[esi+0x0]
c00192b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192b4:	83 ec 08             	sub    esp,0x8
c00192b7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00192be:	83 c0 16             	add    eax,0x16
c00192c1:	50                   	push   eax
c00192c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192c6:	83 c0 10             	add    eax,0x10
c00192c9:	50                   	push   eax
c00192ca:	e8 81 73 fe ff       	call   c0000650 <strcpy>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00192d9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00192e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192e4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00192eb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00192f2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00192f9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019300:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019307:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001930e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019315:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001931c:	89 c6                	mov    esi,eax
c001931e:	89 d7                	mov    edi,edx
c0019320:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019322:	89 c8                	mov    eax,ecx
c0019324:	89 fa                	mov    edx,edi
c0019326:	89 f3                	mov    ebx,esi
c0019328:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001932f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019336:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001933d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019344:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001934a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019351:	0f be c0             	movsx  eax,al
c0019354:	85 c0                	test   eax,eax
c0019356:	75 08                	jne    c0019360 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019358:	b8 07 00 00 00       	mov    eax,0x7
c001935d:	eb 1d                	jmp    c001937c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001935f:	90                   	nop
c0019360:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019367:	85 c0                	test   eax,eax
c0019369:	75 09                	jne    c0019374 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001936b:	b8 00 00 00 00       	mov    eax,0x0
c0019370:	eb 0a                	jmp    c001937c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019372:	66 90                	xchg   ax,ax
c0019374:	b8 01 00 00 00       	mov    eax,0x1
c0019379:	8d 76 00             	lea    esi,[esi+0x0]
c001937c:	81 c4 50 02 00 00    	add    esp,0x250
c0019382:	5b                   	pop    ebx
c0019383:	5e                   	pop    esi
c0019384:	5f                   	pop    edi
c0019385:	c3                   	ret    
c0019386:	66 90                	xchg   ax,ax

c0019388 <FAT::read(void*, unsigned long, void*, int*)>:
c0019388:	83 ec 1c             	sub    esp,0x1c
c001938b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019390:	74 0a                	je     c001939c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019392:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019397:	75 0b                	jne    c00193a4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019399:	8d 76 00             	lea    esi,[esi+0x0]
c001939c:	b8 04 00 00 00       	mov    eax,0x4
c00193a1:	eb 41                	jmp    c00193e4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193a3:	90                   	nop
c00193a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193a8:	50                   	push   eax
c00193a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193b5:	e8 a9 ab fe ff       	call   c0003f63 <f_read>
c00193ba:	83 c4 10             	add    esp,0x10
c00193bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193c5:	89 c2                	mov    edx,eax
c00193c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193cb:	89 10                	mov    DWORD PTR [eax],edx
c00193cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193d1:	85 c0                	test   eax,eax
c00193d3:	75 07                	jne    c00193dc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00193d5:	b8 00 00 00 00       	mov    eax,0x0
c00193da:	eb 08                	jmp    c00193e4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193dc:	b8 01 00 00 00       	mov    eax,0x1
c00193e1:	8d 76 00             	lea    esi,[esi+0x0]
c00193e4:	83 c4 1c             	add    esp,0x1c
c00193e7:	c3                   	ret    

c00193e8 <FAT::write(void*, unsigned long, void*, int*)>:
c00193e8:	83 ec 1c             	sub    esp,0x1c
c00193eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193f0:	74 0a                	je     c00193fc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00193f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193f7:	75 0b                	jne    c0019404 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00193f9:	8d 76 00             	lea    esi,[esi+0x0]
c00193fc:	b8 04 00 00 00       	mov    eax,0x4
c0019401:	eb 41                	jmp    c0019444 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019403:	90                   	nop
c0019404:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019408:	50                   	push   eax
c0019409:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001940d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019411:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019415:	e8 2a ad fe ff       	call   c0004144 <f_write>
c001941a:	83 c4 10             	add    esp,0x10
c001941d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019425:	89 c2                	mov    edx,eax
c0019427:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001942b:	89 10                	mov    DWORD PTR [eax],edx
c001942d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019431:	85 c0                	test   eax,eax
c0019433:	75 07                	jne    c001943c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019435:	b8 00 00 00 00       	mov    eax,0x0
c001943a:	eb 08                	jmp    c0019444 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001943c:	b8 01 00 00 00       	mov    eax,0x1
c0019441:	8d 76 00             	lea    esi,[esi+0x0]
c0019444:	83 c4 1c             	add    esp,0x1c
c0019447:	c3                   	ret    

c0019448 <FAT::close(void*)>:
c0019448:	83 ec 1c             	sub    esp,0x1c
c001944b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019450:	75 0a                	jne    c001945c <FAT::close(void*)+0x14>
c0019452:	b8 04 00 00 00       	mov    eax,0x4
c0019457:	eb 3f                	jmp    c0019498 <FAT::close(void*)+0x50>
c0019459:	8d 76 00             	lea    esi,[esi+0x0]
c001945c:	83 ec 0c             	sub    esp,0xc
c001945f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019463:	e8 e8 af fe ff       	call   c0004450 <f_close>
c0019468:	83 c4 10             	add    esp,0x10
c001946b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001946f:	83 ec 0c             	sub    esp,0xc
c0019472:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019476:	e8 68 e6 fe ff       	call   c0007ae3 <free>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019482:	85 c0                	test   eax,eax
c0019484:	75 0a                	jne    c0019490 <FAT::close(void*)+0x48>
c0019486:	b8 00 00 00 00       	mov    eax,0x0
c001948b:	eb 0b                	jmp    c0019498 <FAT::close(void*)+0x50>
c001948d:	8d 76 00             	lea    esi,[esi+0x0]
c0019490:	b8 01 00 00 00       	mov    eax,0x1
c0019495:	8d 76 00             	lea    esi,[esi+0x0]
c0019498:	83 c4 1c             	add    esp,0x1c
c001949b:	c3                   	ret    

c001949c <FAT::closeDir(void*)>:
c001949c:	83 ec 1c             	sub    esp,0x1c
c001949f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194a4:	75 0a                	jne    c00194b0 <FAT::closeDir(void*)+0x14>
c00194a6:	b8 04 00 00 00       	mov    eax,0x4
c00194ab:	eb 3f                	jmp    c00194ec <FAT::closeDir(void*)+0x50>
c00194ad:	8d 76 00             	lea    esi,[esi+0x0]
c00194b0:	83 ec 0c             	sub    esp,0xc
c00194b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194b7:	e8 3e b2 fe ff       	call   c00046fa <f_closedir>
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194c3:	83 ec 0c             	sub    esp,0xc
c00194c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194ca:	e8 14 e6 fe ff       	call   c0007ae3 <free>
c00194cf:	83 c4 10             	add    esp,0x10
c00194d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194d6:	85 c0                	test   eax,eax
c00194d8:	75 0a                	jne    c00194e4 <FAT::closeDir(void*)+0x48>
c00194da:	b8 00 00 00 00       	mov    eax,0x0
c00194df:	eb 0b                	jmp    c00194ec <FAT::closeDir(void*)+0x50>
c00194e1:	8d 76 00             	lea    esi,[esi+0x0]
c00194e4:	b8 01 00 00 00       	mov    eax,0x1
c00194e9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ec:	83 c4 1c             	add    esp,0x1c
c00194ef:	c3                   	ret    

c00194f0 <FAT::truncate(void*, unsigned long long)>:
c00194f0:	83 ec 2c             	sub    esp,0x2c
c00194f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00194fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019503:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019508:	75 0a                	jne    c0019514 <FAT::truncate(void*, unsigned long long)+0x24>
c001950a:	b8 04 00 00 00       	mov    eax,0x4
c001950f:	eb 47                	jmp    c0019558 <FAT::truncate(void*, unsigned long long)+0x68>
c0019511:	8d 76 00             	lea    esi,[esi+0x0]
c0019514:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019518:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001951b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001951f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001952b:	83 ec 08             	sub    esp,0x8
c001952e:	50                   	push   eax
c001952f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019533:	e8 47 af fe ff       	call   c000447f <f_lseek>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001953f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019543:	85 c0                	test   eax,eax
c0019545:	75 09                	jne    c0019550 <FAT::truncate(void*, unsigned long long)+0x60>
c0019547:	b8 00 00 00 00       	mov    eax,0x0
c001954c:	eb 0a                	jmp    c0019558 <FAT::truncate(void*, unsigned long long)+0x68>
c001954e:	66 90                	xchg   ax,ax
c0019550:	b8 01 00 00 00       	mov    eax,0x1
c0019555:	8d 76 00             	lea    esi,[esi+0x0]
c0019558:	83 c4 2c             	add    esp,0x2c
c001955b:	c3                   	ret    

c001955c <FAT::seek(void*, unsigned long long)>:
c001955c:	83 ec 2c             	sub    esp,0x2c
c001955f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019567:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001956b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001956f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019574:	75 0a                	jne    c0019580 <FAT::seek(void*, unsigned long long)+0x24>
c0019576:	b8 04 00 00 00       	mov    eax,0x4
c001957b:	eb 33                	jmp    c00195b0 <FAT::seek(void*, unsigned long long)+0x54>
c001957d:	8d 76 00             	lea    esi,[esi+0x0]
c0019580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019584:	83 ec 08             	sub    esp,0x8
c0019587:	50                   	push   eax
c0019588:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001958c:	e8 ee ae fe ff       	call   c000447f <f_lseek>
c0019591:	83 c4 10             	add    esp,0x10
c0019594:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019598:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001959c:	85 c0                	test   eax,eax
c001959e:	75 08                	jne    c00195a8 <FAT::seek(void*, unsigned long long)+0x4c>
c00195a0:	b8 00 00 00 00       	mov    eax,0x0
c00195a5:	eb 09                	jmp    c00195b0 <FAT::seek(void*, unsigned long long)+0x54>
c00195a7:	90                   	nop
c00195a8:	b8 01 00 00 00       	mov    eax,0x1
c00195ad:	8d 76 00             	lea    esi,[esi+0x0]
c00195b0:	83 c4 2c             	add    esp,0x2c
c00195b3:	c3                   	ret    

c00195b4 <fatWrapperReadDisk>:
c00195b4:	53                   	push   ebx
c00195b5:	83 ec 18             	sub    esp,0x18
c00195b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195c5:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00195cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195d4:	ba 00 00 00 00       	mov    edx,0x0
c00195d9:	83 ec 0c             	sub    esp,0xc
c00195dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195e0:	53                   	push   ebx
c00195e1:	52                   	push   edx
c00195e2:	50                   	push   eax
c00195e3:	51                   	push   ecx
c00195e4:	e8 45 45 ff ff       	call   c000db2e <LogicalDisk::read(unsigned long long, int, void*)>
c00195e9:	83 c4 20             	add    esp,0x20
c00195ec:	83 c4 18             	add    esp,0x18
c00195ef:	5b                   	pop    ebx
c00195f0:	c3                   	ret    
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]

c00195f4 <fatWrapperWriteDisk>:
c00195f4:	53                   	push   ebx
c00195f5:	83 ec 18             	sub    esp,0x18
c00195f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019600:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019605:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001960c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019610:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019614:	ba 00 00 00 00       	mov    edx,0x0
c0019619:	83 ec 0c             	sub    esp,0xc
c001961c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019620:	53                   	push   ebx
c0019621:	52                   	push   edx
c0019622:	50                   	push   eax
c0019623:	51                   	push   ecx
c0019624:	e8 71 45 ff ff       	call   c000db9a <LogicalDisk::write(unsigned long long, int, void*)>
c0019629:	83 c4 20             	add    esp,0x20
c001962c:	83 c4 18             	add    esp,0x18
c001962f:	5b                   	pop    ebx
c0019630:	c3                   	ret    
c0019631:	8d 76 00             	lea    esi,[esi+0x0]

c0019634 <fatWrapperIoctl>:
c0019634:	53                   	push   ebx
c0019635:	83 ec 28             	sub    esp,0x28
c0019638:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001963c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019640:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019644:	88 d0                	mov    al,dl
c0019646:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001964a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001964f:	83 f8 02             	cmp    eax,0x2
c0019652:	75 34                	jne    c0019688 <fatWrapperIoctl+0x54>
c0019654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019658:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001965c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019661:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019668:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001966e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019674:	89 c2                	mov    edx,eax
c0019676:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001967a:	66 89 10             	mov    WORD PTR [eax],dx
c001967d:	b8 00 00 00 00       	mov    eax,0x0
c0019682:	e9 c5 00 00 00       	jmp    c001974c <fatWrapperIoctl+0x118>
c0019687:	90                   	nop
c0019688:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001968d:	83 f8 01             	cmp    eax,0x1
c0019690:	75 6a                	jne    c00196fc <fatWrapperIoctl+0xc8>
c0019692:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019696:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001969a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001969f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00196a6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196ac:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00196b2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00196b8:	89 c8                	mov    eax,ecx
c00196ba:	89 da                	mov    edx,ebx
c00196bc:	0f a4 c2 0a          	shld   edx,eax,0xa
c00196c0:	c1 e0 0a             	shl    eax,0xa
c00196c3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00196c8:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00196cf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00196d5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00196db:	89 cb                	mov    ebx,ecx
c00196dd:	c1 fb 1f             	sar    ebx,0x1f
c00196e0:	53                   	push   ebx
c00196e1:	51                   	push   ecx
c00196e2:	52                   	push   edx
c00196e3:	50                   	push   eax
c00196e4:	e8 b7 5b 00 00       	call   c001f2a0 <__udivdi3>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	89 c2                	mov    edx,eax
c00196ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196f2:	89 10                	mov    DWORD PTR [eax],edx
c00196f4:	b8 00 00 00 00       	mov    eax,0x0
c00196f9:	eb 51                	jmp    c001974c <fatWrapperIoctl+0x118>
c00196fb:	90                   	nop
c00196fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019701:	85 c0                	test   eax,eax
c0019703:	75 07                	jne    c001970c <fatWrapperIoctl+0xd8>
c0019705:	b8 00 00 00 00       	mov    eax,0x0
c001970a:	eb 40                	jmp    c001974c <fatWrapperIoctl+0x118>
c001970c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019711:	83 f8 03             	cmp    eax,0x3
c0019714:	75 1a                	jne    c0019730 <fatWrapperIoctl+0xfc>
c0019716:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001971a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001971e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019722:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019728:	b8 00 00 00 00       	mov    eax,0x0
c001972d:	eb 1d                	jmp    c001974c <fatWrapperIoctl+0x118>
c001972f:	90                   	nop
c0019730:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019735:	83 f8 04             	cmp    eax,0x4
c0019738:	75 0a                	jne    c0019744 <fatWrapperIoctl+0x110>
c001973a:	b8 00 00 00 00       	mov    eax,0x0
c001973f:	eb 0b                	jmp    c001974c <fatWrapperIoctl+0x118>
c0019741:	8d 76 00             	lea    esi,[esi+0x0]
c0019744:	b8 04 00 00 00       	mov    eax,0x4
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	83 c4 28             	add    esp,0x28
c001974f:	5b                   	pop    ebx
c0019750:	c3                   	ret    
c0019751:	90                   	nop
c0019752:	66 90                	xchg   ax,ax

c0019754 <FAT::FAT()>:
c0019754:	83 ec 1c             	sub    esp,0x1c
c0019757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001975b:	83 ec 0c             	sub    esp,0xc
c001975e:	50                   	push   eax
c001975f:	e8 9e 1d ff ff       	call   c000b502 <Filesystem::Filesystem()>
c0019764:	83 c4 10             	add    esp,0x10
c0019767:	ba ec 28 02 c0       	mov    edx,0xc00228ec
c001976c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019770:	89 10                	mov    DWORD PTR [eax],edx
c0019772:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001977c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019784:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019789:	7f 19                	jg     c00197a4 <FAT::FAT()+0x50>
c001978b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001978f:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c001979a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001979f:	eb e3                	jmp    c0019784 <FAT::FAT()+0x30>
c00197a1:	8d 76 00             	lea    esi,[esi+0x0]
c00197a4:	90                   	nop
c00197a5:	83 c4 1c             	add    esp,0x1c
c00197a8:	c3                   	ret    
c00197a9:	90                   	nop
c00197aa:	66 90                	xchg   ax,ax

c00197ac <FAT::fixFilepath(char*)>:
c00197ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197b0:	8a 00                	mov    al,BYTE PTR [eax]
c00197b2:	0f be c0             	movsx  eax,al
c00197b5:	83 f8 40             	cmp    eax,0x40
c00197b8:	7e 2e                	jle    c00197e8 <FAT::fixFilepath(char*)+0x3c>
c00197ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197be:	8a 00                	mov    al,BYTE PTR [eax]
c00197c0:	83 e8 41             	sub    eax,0x41
c00197c3:	88 c2                	mov    dl,al
c00197c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197c9:	88 10                	mov    BYTE PTR [eax],dl
c00197cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197cf:	8a 00                	mov    al,BYTE PTR [eax]
c00197d1:	0f be c0             	movsx  eax,al
c00197d4:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00197db:	83 c0 30             	add    eax,0x30
c00197de:	88 c2                	mov    dl,al
c00197e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e4:	88 10                	mov    BYTE PTR [eax],dl
c00197e6:	66 90                	xchg   ax,ax
c00197e8:	90                   	nop
c00197e9:	c3                   	ret    
c00197ea:	66 90                	xchg   ax,ax

c00197ec <FAT::open(char const*, void**, FileOpenMode)>:
c00197ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00197fa:	74 0c                	je     c0019808 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00197fc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019804:	75 0e                	jne    c0019814 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019806:	66 90                	xchg   ax,ax
c0019808:	b8 04 00 00 00       	mov    eax,0x4
c001980d:	e9 46 01 00 00       	jmp    c0019958 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019812:	66 90                	xchg   ax,ax
c0019814:	83 ec 08             	sub    esp,0x8
c0019817:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001981e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019822:	50                   	push   eax
c0019823:	e8 28 6e fe ff       	call   c0000650 <strcpy>
c0019828:	83 c4 10             	add    esp,0x10
c001982b:	83 ec 08             	sub    esp,0x8
c001982e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019832:	50                   	push   eax
c0019833:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001983a:	e8 6d ff ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c001983f:	83 c4 10             	add    esp,0x10
c0019842:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001984a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019851:	83 e0 01             	and    eax,0x1
c0019854:	74 12                	je     c0019868 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019856:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001985d:	83 c8 01             	or     eax,0x1
c0019860:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019867:	90                   	nop
c0019868:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001986f:	83 e0 04             	and    eax,0x4
c0019872:	74 24                	je     c0019898 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019874:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001987b:	83 c8 30             	or     eax,0x30
c001987e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019885:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001988c:	83 c8 02             	or     eax,0x2
c001988f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019896:	66 90                	xchg   ax,ax
c0019898:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001989f:	83 e0 02             	and    eax,0x2
c00198a2:	74 14                	je     c00198b8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00198a4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198ab:	83 c8 02             	or     eax,0x2
c00198ae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198b5:	8d 76 00             	lea    esi,[esi+0x0]
c00198b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198bf:	83 e0 08             	and    eax,0x8
c00198c2:	74 14                	je     c00198d8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00198c4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198cb:	83 c8 04             	or     eax,0x4
c00198ce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198d5:	8d 76 00             	lea    esi,[esi+0x0]
c00198d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198df:	83 e0 10             	and    eax,0x10
c00198e2:	74 14                	je     c00198f8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00198e4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198eb:	83 c8 08             	or     eax,0x8
c00198ee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198f5:	8d 76 00             	lea    esi,[esi+0x0]
c00198f8:	83 ec 0c             	sub    esp,0xc
c00198fb:	68 28 02 00 00       	push   0x228
c0019900:	e8 ce e1 fe ff       	call   c0007ad3 <malloc>
c0019905:	83 c4 10             	add    esp,0x10
c0019908:	89 c2                	mov    edx,eax
c001990a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019911:	89 10                	mov    DWORD PTR [eax],edx
c0019913:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001991b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019922:	8b 00                	mov    eax,DWORD PTR [eax]
c0019924:	83 ec 04             	sub    esp,0x4
c0019927:	52                   	push   edx
c0019928:	8d 54 24 10          	lea    edx,[esp+0x10]
c001992c:	52                   	push   edx
c001992d:	50                   	push   eax
c001992e:	e8 6d a3 fe ff       	call   c0003ca0 <f_open>
c0019933:	83 c4 10             	add    esp,0x10
c0019936:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001993d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019945:	74 09                	je     c0019950 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019947:	b8 01 00 00 00       	mov    eax,0x1
c001994c:	eb 0a                	jmp    c0019958 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001994e:	66 90                	xchg   ax,ax
c0019950:	b8 00 00 00 00       	mov    eax,0x0
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	81 c4 1c 01 00 00    	add    esp,0x11c
c001995e:	c3                   	ret    
c001995f:	90                   	nop

c0019960 <FAT::openDir(char const*, void**)>:
c0019960:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019966:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001996e:	74 0c                	je     c001997c <FAT::openDir(char const*, void**)+0x1c>
c0019970:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019978:	75 0e                	jne    c0019988 <FAT::openDir(char const*, void**)+0x28>
c001997a:	66 90                	xchg   ax,ax
c001997c:	b8 04 00 00 00       	mov    eax,0x4
c0019981:	e9 82 00 00 00       	jmp    c0019a08 <FAT::openDir(char const*, void**)+0xa8>
c0019986:	66 90                	xchg   ax,ax
c0019988:	83 ec 08             	sub    esp,0x8
c001998b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019992:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019996:	50                   	push   eax
c0019997:	e8 b4 6c fe ff       	call   c0000650 <strcpy>
c001999c:	83 c4 10             	add    esp,0x10
c001999f:	83 ec 08             	sub    esp,0x8
c00199a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199a6:	50                   	push   eax
c00199a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ae:	e8 f9 fd ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c00199b3:	83 c4 10             	add    esp,0x10
c00199b6:	83 ec 0c             	sub    esp,0xc
c00199b9:	6a 30                	push   0x30
c00199bb:	e8 13 e1 fe ff       	call   c0007ad3 <malloc>
c00199c0:	83 c4 10             	add    esp,0x10
c00199c3:	89 c2                	mov    edx,eax
c00199c5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199cc:	89 10                	mov    DWORD PTR [eax],edx
c00199ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00199d7:	83 ec 08             	sub    esp,0x8
c00199da:	8d 54 24 14          	lea    edx,[esp+0x14]
c00199de:	52                   	push   edx
c00199df:	50                   	push   eax
c00199e0:	e8 4a ac fe ff       	call   c000462f <f_opendir>
c00199e5:	83 c4 10             	add    esp,0x10
c00199e8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199ef:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00199f7:	74 07                	je     c0019a00 <FAT::openDir(char const*, void**)+0xa0>
c00199f9:	b8 01 00 00 00       	mov    eax,0x1
c00199fe:	eb 08                	jmp    c0019a08 <FAT::openDir(char const*, void**)+0xa8>
c0019a00:	b8 00 00 00 00       	mov    eax,0x0
c0019a05:	8d 76 00             	lea    esi,[esi+0x0]
c0019a08:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a0e:	c3                   	ret    
c0019a0f:	90                   	nop

c0019a10 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a10:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a16:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a1e:	75 0c                	jne    c0019a2c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019a20:	b8 04 00 00 00       	mov    eax,0x4
c0019a25:	e9 d6 00 00 00       	jmp    c0019b00 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a2a:	66 90                	xchg   ax,ax
c0019a2c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a34:	75 0a                	jne    c0019a40 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019a36:	b8 04 00 00 00       	mov    eax,0x4
c0019a3b:	e9 c0 00 00 00       	jmp    c0019b00 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a40:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a48:	75 0a                	jne    c0019a54 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019a4a:	b8 04 00 00 00       	mov    eax,0x4
c0019a4f:	e9 ac 00 00 00       	jmp    c0019b00 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a54:	83 ec 08             	sub    esp,0x8
c0019a57:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a5e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a65:	50                   	push   eax
c0019a66:	e8 e5 6b fe ff       	call   c0000650 <strcpy>
c0019a6b:	83 c4 10             	add    esp,0x10
c0019a6e:	83 ec 08             	sub    esp,0x8
c0019a71:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a78:	50                   	push   eax
c0019a79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a80:	e8 27 fd ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c0019a85:	83 c4 10             	add    esp,0x10
c0019a88:	83 ec 08             	sub    esp,0x8
c0019a8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019a8f:	50                   	push   eax
c0019a90:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a97:	50                   	push   eax
c0019a98:	e8 11 ad fe ff       	call   c00047ae <f_stat>
c0019a9d:	83 c4 10             	add    esp,0x10
c0019aa0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019aa7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019aae:	85 c0                	test   eax,eax
c0019ab0:	74 0a                	je     c0019abc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019ab2:	83 f8 04             	cmp    eax,0x4
c0019ab5:	74 39                	je     c0019af0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019ab7:	eb 3f                	jmp    c0019af8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0019abc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ac0:	0f b6 c0             	movzx  eax,al
c0019ac3:	83 e0 10             	and    eax,0x10
c0019ac6:	0f 95 c2             	setne  dl
c0019ac9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ad0:	88 10                	mov    BYTE PTR [eax],dl
c0019ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad6:	ba 00 00 00 00       	mov    edx,0x0
c0019adb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019ae2:	89 01                	mov    DWORD PTR [ecx],eax
c0019ae4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019ae7:	b8 00 00 00 00       	mov    eax,0x0
c0019aec:	eb 12                	jmp    c0019b00 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019aee:	66 90                	xchg   ax,ax
c0019af0:	b8 02 00 00 00       	mov    eax,0x2
c0019af5:	eb 09                	jmp    c0019b00 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019af7:	90                   	nop
c0019af8:	b8 01 00 00 00       	mov    eax,0x1
c0019afd:	8d 76 00             	lea    esi,[esi+0x0]
c0019b00:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b06:	c3                   	ret    
c0019b07:	90                   	nop

c0019b08 <FAT::unlink(char const*)>:
c0019b08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b16:	75 08                	jne    c0019b20 <FAT::unlink(char const*)+0x18>
c0019b18:	b8 04 00 00 00       	mov    eax,0x4
c0019b1d:	eb 61                	jmp    c0019b80 <FAT::unlink(char const*)+0x78>
c0019b1f:	90                   	nop
c0019b20:	83 ec 08             	sub    esp,0x8
c0019b23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b2e:	50                   	push   eax
c0019b2f:	e8 1c 6b fe ff       	call   c0000650 <strcpy>
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	83 ec 08             	sub    esp,0x8
c0019b3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b3e:	50                   	push   eax
c0019b3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b46:	e8 61 fc ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b55:	50                   	push   eax
c0019b56:	e8 c5 ae fe ff       	call   c0004a20 <f_unlink>
c0019b5b:	83 c4 10             	add    esp,0x10
c0019b5e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b65:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b6c:	85 c0                	test   eax,eax
c0019b6e:	75 08                	jne    c0019b78 <FAT::unlink(char const*)+0x70>
c0019b70:	b8 00 00 00 00       	mov    eax,0x0
c0019b75:	eb 09                	jmp    c0019b80 <FAT::unlink(char const*)+0x78>
c0019b77:	90                   	nop
c0019b78:	b8 01 00 00 00       	mov    eax,0x1
c0019b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b80:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b86:	c3                   	ret    
c0019b87:	90                   	nop

c0019b88 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b88:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b8e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019b95:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019b9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ba0:	88 d0                	mov    al,dl
c0019ba2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ba6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019bae:	75 0c                	jne    c0019bbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019bb0:	b8 04 00 00 00       	mov    eax,0x4
c0019bb5:	e9 7e 01 00 00       	jmp    c0019d38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019bba:	66 90                	xchg   ax,ax
c0019bbc:	83 ec 08             	sub    esp,0x8
c0019bbf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bc6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bca:	50                   	push   eax
c0019bcb:	e8 80 6a fe ff       	call   c0000650 <strcpy>
c0019bd0:	83 c4 10             	add    esp,0x10
c0019bd3:	83 ec 08             	sub    esp,0x8
c0019bd6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019bda:	50                   	push   eax
c0019bdb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019be2:	e8 c5 fb ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c0019be7:	83 c4 10             	add    esp,0x10
c0019bea:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019bf2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019bfa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bff:	83 e0 01             	and    eax,0x1
c0019c02:	74 14                	je     c0019c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019c04:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c0b:	83 c8 01             	or     eax,0x1
c0019c0e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c15:	8d 76 00             	lea    esi,[esi+0x0]
c0019c18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c1d:	83 e0 02             	and    eax,0x2
c0019c20:	74 12                	je     c0019c34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019c22:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c29:	83 c8 20             	or     eax,0x20
c0019c2c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c33:	90                   	nop
c0019c34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c39:	83 e0 04             	and    eax,0x4
c0019c3c:	74 12                	je     c0019c50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c3e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c45:	83 c8 04             	or     eax,0x4
c0019c48:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c4f:	90                   	nop
c0019c50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c55:	83 e0 08             	and    eax,0x8
c0019c58:	74 12                	je     c0019c6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019c5a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c61:	83 c8 02             	or     eax,0x2
c0019c64:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c6b:	90                   	nop
c0019c6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c71:	83 e0 01             	and    eax,0x1
c0019c74:	74 12                	je     c0019c88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019c76:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c7d:	83 c8 01             	or     eax,0x1
c0019c80:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c87:	90                   	nop
c0019c88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c8d:	83 e0 02             	and    eax,0x2
c0019c90:	74 12                	je     c0019ca4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019c92:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c99:	83 c8 20             	or     eax,0x20
c0019c9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ca3:	90                   	nop
c0019ca4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ca9:	83 e0 04             	and    eax,0x4
c0019cac:	74 12                	je     c0019cc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019cae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cb5:	83 c8 04             	or     eax,0x4
c0019cb8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cbf:	90                   	nop
c0019cc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cc5:	83 e0 08             	and    eax,0x8
c0019cc8:	74 12                	je     c0019cdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019cca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cd1:	83 c8 02             	or     eax,0x2
c0019cd4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cdb:	90                   	nop
c0019cdc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019ce3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cea:	09 d0                	or     eax,edx
c0019cec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cf3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019cfb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d03:	83 ec 04             	sub    esp,0x4
c0019d06:	52                   	push   edx
c0019d07:	50                   	push   eax
c0019d08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d0c:	50                   	push   eax
c0019d0d:	e8 81 b1 fe ff       	call   c0004e93 <f_chmod>
c0019d12:	83 c4 10             	add    esp,0x10
c0019d15:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d1c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d23:	85 c0                	test   eax,eax
c0019d25:	75 09                	jne    c0019d30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019d27:	b8 00 00 00 00       	mov    eax,0x0
c0019d2c:	eb 0a                	jmp    c0019d38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019d2e:	66 90                	xchg   ax,ax
c0019d30:	b8 01 00 00 00       	mov    eax,0x1
c0019d35:	8d 76 00             	lea    esi,[esi+0x0]
c0019d38:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d3e:	c3                   	ret    
c0019d3f:	90                   	nop

c0019d40 <FAT::rename(char const*, char const*)>:
c0019d40:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d46:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d4e:	74 0c                	je     c0019d5c <FAT::rename(char const*, char const*)+0x1c>
c0019d50:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d58:	75 0e                	jne    c0019d68 <FAT::rename(char const*, char const*)+0x28>
c0019d5a:	66 90                	xchg   ax,ax
c0019d5c:	b8 04 00 00 00       	mov    eax,0x4
c0019d61:	e9 9e 00 00 00       	jmp    c0019e04 <FAT::rename(char const*, char const*)+0xc4>
c0019d66:	66 90                	xchg   ax,ax
c0019d68:	83 ec 08             	sub    esp,0x8
c0019d6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d72:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d79:	50                   	push   eax
c0019d7a:	e8 d1 68 fe ff       	call   c0000650 <strcpy>
c0019d7f:	83 c4 10             	add    esp,0x10
c0019d82:	83 ec 08             	sub    esp,0x8
c0019d85:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d8c:	50                   	push   eax
c0019d8d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d94:	e8 13 fa ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c0019d99:	83 c4 10             	add    esp,0x10
c0019d9c:	83 ec 08             	sub    esp,0x8
c0019d9f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019da6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019daa:	50                   	push   eax
c0019dab:	e8 a0 68 fe ff       	call   c0000650 <strcpy>
c0019db0:	83 c4 10             	add    esp,0x10
c0019db3:	83 ec 08             	sub    esp,0x8
c0019db6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dba:	50                   	push   eax
c0019dbb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019dc2:	e8 e5 f9 ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c0019dc7:	83 c4 10             	add    esp,0x10
c0019dca:	83 ec 08             	sub    esp,0x8
c0019dcd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dd1:	50                   	push   eax
c0019dd2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019dd9:	50                   	push   eax
c0019dda:	e8 fc ae fe ff       	call   c0004cdb <f_rename>
c0019ddf:	83 c4 10             	add    esp,0x10
c0019de2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019de9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019df0:	85 c0                	test   eax,eax
c0019df2:	75 08                	jne    c0019dfc <FAT::rename(char const*, char const*)+0xbc>
c0019df4:	b8 00 00 00 00       	mov    eax,0x0
c0019df9:	eb 09                	jmp    c0019e04 <FAT::rename(char const*, char const*)+0xc4>
c0019dfb:	90                   	nop
c0019dfc:	b8 01 00 00 00       	mov    eax,0x1
c0019e01:	8d 76 00             	lea    esi,[esi+0x0]
c0019e04:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e0a:	c3                   	ret    
c0019e0b:	90                   	nop

c0019e0c <FAT::mkdir(char const*)>:
c0019e0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e1a:	75 08                	jne    c0019e24 <FAT::mkdir(char const*)+0x18>
c0019e1c:	b8 04 00 00 00       	mov    eax,0x4
c0019e21:	eb 61                	jmp    c0019e84 <FAT::mkdir(char const*)+0x78>
c0019e23:	90                   	nop
c0019e24:	83 ec 08             	sub    esp,0x8
c0019e27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e32:	50                   	push   eax
c0019e33:	e8 18 68 fe ff       	call   c0000650 <strcpy>
c0019e38:	83 c4 10             	add    esp,0x10
c0019e3b:	83 ec 08             	sub    esp,0x8
c0019e3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e42:	50                   	push   eax
c0019e43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e4a:	e8 5d f9 ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c0019e4f:	83 c4 10             	add    esp,0x10
c0019e52:	83 ec 0c             	sub    esp,0xc
c0019e55:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e59:	50                   	push   eax
c0019e5a:	e8 e1 ac fe ff       	call   c0004b40 <f_mkdir>
c0019e5f:	83 c4 10             	add    esp,0x10
c0019e62:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e69:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e70:	85 c0                	test   eax,eax
c0019e72:	75 08                	jne    c0019e7c <FAT::mkdir(char const*)+0x70>
c0019e74:	b8 00 00 00 00       	mov    eax,0x0
c0019e79:	eb 09                	jmp    c0019e84 <FAT::mkdir(char const*)+0x78>
c0019e7b:	90                   	nop
c0019e7c:	b8 01 00 00 00       	mov    eax,0x1
c0019e81:	8d 76 00             	lea    esi,[esi+0x0]
c0019e84:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e8a:	c3                   	ret    
c0019e8b:	90                   	nop

c0019e8c <FAT::exists(char const*)>:
c0019e8c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e92:	83 ec 08             	sub    esp,0x8
c0019e95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e9c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ea0:	50                   	push   eax
c0019ea1:	e8 aa 67 fe ff       	call   c0000650 <strcpy>
c0019ea6:	83 c4 10             	add    esp,0x10
c0019ea9:	83 ec 08             	sub    esp,0x8
c0019eac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019eb0:	50                   	push   eax
c0019eb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019eb8:	e8 ef f8 ff ff       	call   c00197ac <FAT::fixFilepath(char*)>
c0019ebd:	83 c4 10             	add    esp,0x10
c0019ec0:	83 ec 08             	sub    esp,0x8
c0019ec3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019eca:	50                   	push   eax
c0019ecb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ecf:	50                   	push   eax
c0019ed0:	e8 d9 a8 fe ff       	call   c00047ae <f_stat>
c0019ed5:	83 c4 10             	add    esp,0x10
c0019ed8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019edf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019ee6:	85 c0                	test   eax,eax
c0019ee8:	75 06                	jne    c0019ef0 <FAT::exists(char const*)+0x64>
c0019eea:	b0 01                	mov    al,0x1
c0019eec:	eb 06                	jmp    c0019ef4 <FAT::exists(char const*)+0x68>
c0019eee:	66 90                	xchg   ax,ax
c0019ef0:	b0 00                	mov    al,0x0
c0019ef2:	66 90                	xchg   ax,ax
c0019ef4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019efa:	c3                   	ret    
c0019efb:	90                   	nop

c0019efc <isoReadDiscSectorHelper>:
c0019efc:	83 ec 2c             	sub    esp,0x2c
c0019eff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f03:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f07:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019f0c:	83 e8 41             	sub    eax,0x41
c0019f0f:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019f16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f1a:	ba 00 00 00 00       	mov    edx,0x0
c0019f1f:	83 ec 0c             	sub    esp,0xc
c0019f22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f2a:	52                   	push   edx
c0019f2b:	50                   	push   eax
c0019f2c:	51                   	push   ecx
c0019f2d:	e8 fc 3b ff ff       	call   c000db2e <LogicalDisk::read(unsigned long long, int, void*)>
c0019f32:	83 c4 20             	add    esp,0x20
c0019f35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f39:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019f3e:	74 0c                	je     c0019f4c <isoReadDiscSectorHelper+0x50>
c0019f40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f44:	c1 e0 0b             	shl    eax,0xb
c0019f47:	eb 0b                	jmp    c0019f54 <isoReadDiscSectorHelper+0x58>
c0019f49:	8d 76 00             	lea    esi,[esi+0x0]
c0019f4c:	b8 00 00 00 00       	mov    eax,0x0
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	83 c4 2c             	add    esp,0x2c
c0019f57:	c3                   	ret    

c0019f58 <iso_kprintf>:
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	83 ec 08             	sub    esp,0x8
c0019f5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f62:	68 9a 26 02 c0       	push   0xc002269a
c0019f67:	e8 9e 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	90                   	nop
c0019f70:	83 c4 0c             	add    esp,0xc
c0019f73:	c3                   	ret    

c0019f74 <iso_kprintfd>:
c0019f74:	83 ec 0c             	sub    esp,0xc
c0019f77:	83 ec 08             	sub    esp,0x8
c0019f7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f7e:	68 7a 0e 02 c0       	push   0xc0020e7a
c0019f83:	e8 82 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	90                   	nop
c0019f8c:	83 c4 0c             	add    esp,0xc
c0019f8f:	c3                   	ret    

c0019f90 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019f90:	b8 08 00 00 00       	mov    eax,0x8
c0019f95:	c3                   	ret    

c0019f96 <ISO9660::truncate(void*, unsigned long long)>:
c0019f96:	b8 01 00 00 00       	mov    eax,0x1
c0019f9b:	c3                   	ret    

c0019f9c <ISO9660::getName()>:
c0019f9c:	b8 50 29 02 c0       	mov    eax,0xc0022950
c0019fa1:	c3                   	ret    

c0019fa2 <ISO9660::closeDir(void*)>:
c0019fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fa8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019fab:	90                   	nop

c0019fac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fac:	b8 01 00 00 00       	mov    eax,0x1
c0019fb1:	c3                   	ret    

c0019fb2 <ISO9660::unlink(char const*)>:
c0019fb2:	b8 01 00 00 00       	mov    eax,0x1
c0019fb7:	c3                   	ret    

c0019fb8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019fb8:	b8 03 00 00 00       	mov    eax,0x3
c0019fbd:	c3                   	ret    

c0019fbe <ISO9660::rename(char const*, char const*)>:
c0019fbe:	b8 01 00 00 00       	mov    eax,0x1
c0019fc3:	c3                   	ret    

c0019fc4 <ISO9660::mkdir(char const*)>:
c0019fc4:	b8 01 00 00 00       	mov    eax,0x1
c0019fc9:	c3                   	ret    

c0019fca <ISO9660::~ISO9660()>:
c0019fca:	83 ec 0c             	sub    esp,0xc
c0019fcd:	ba 90 2a 02 c0       	mov    edx,0xc0022a90
c0019fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd6:	89 10                	mov    DWORD PTR [eax],edx
c0019fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fdc:	83 ec 0c             	sub    esp,0xc
c0019fdf:	50                   	push   eax
c0019fe0:	e8 41 15 ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0019fe5:	83 c4 10             	add    esp,0x10
c0019fe8:	90                   	nop
c0019fe9:	83 c4 0c             	add    esp,0xc
c0019fec:	c3                   	ret    
c0019fed:	90                   	nop

c0019fee <ISO9660::~ISO9660()>:
c0019fee:	83 ec 0c             	sub    esp,0xc
c0019ff1:	83 ec 0c             	sub    esp,0xc
c0019ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ff8:	e8 cd ff ff ff       	call   c0019fca <ISO9660::~ISO9660()>
c0019ffd:	83 c4 10             	add    esp,0x10
c001a000:	83 ec 08             	sub    esp,0x8
c001a003:	6a 08                	push   0x8
c001a005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a009:	e8 fe 07 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a00e:	83 c4 10             	add    esp,0x10
c001a011:	83 c4 0c             	add    esp,0xc
c001a014:	c3                   	ret    
c001a015:	90                   	nop

c001a016 <ISO9660::exists(char const*)>:
c001a016:	83 ec 18             	sub    esp,0x18
c001a019:	68 6b 29 02 c0       	push   0xc002296b
c001a01e:	e8 be 72 ff ff       	call   c00112e1 <KePanic(char const*)>
c001a023:	31 c0                	xor    eax,eax
c001a025:	83 c4 1c             	add    esp,0x1c
c001a028:	c3                   	ret    
c001a029:	90                   	nop

c001a02a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a02a:	56                   	push   esi
c001a02b:	53                   	push   ebx
c001a02c:	53                   	push   ebx
c001a02d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a031:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a035:	85 db                	test   ebx,ebx
c001a037:	0f 84 ca 00 00 00    	je     c001a107 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a03d:	85 f6                	test   esi,esi
c001a03f:	0f 84 c2 00 00 00    	je     c001a107 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a045:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a04a:	b8 03 00 00 00       	mov    eax,0x3
c001a04f:	0f 85 b7 00 00 00    	jne    c001a10c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a055:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a057:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a05d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a064:	74 1b                	je     c001a081 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a066:	85 c0                	test   eax,eax
c001a068:	74 10                	je     c001a07a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a06a:	83 ec 0c             	sub    esp,0xc
c001a06d:	68 89 29 02 c0       	push   0xc0022989
c001a072:	e8 6a 72 ff ff       	call   c00112e1 <KePanic(char const*)>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a07c:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a081:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a084:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a08b:	85 c0                	test   eax,eax
c001a08d:	74 09                	je     c001a098 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a08f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a096:	74 48                	je     c001a0e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a098:	83 ec 0c             	sub    esp,0xc
c001a09b:	68 99 29 02 c0       	push   0xc0022999
c001a0a0:	e8 65 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a0a8:	83 c4 10             	add    esp,0x10
c001a0ab:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0b2:	85 c0                	test   eax,eax
c001a0b4:	74 17                	je     c001a0cd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a0b6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a0bd:	83 ec 0c             	sub    esp,0xc
c001a0c0:	68 b9 29 02 c0       	push   0xc00229b9
c001a0c5:	e8 40 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0ca:	83 c4 10             	add    esp,0x10
c001a0cd:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a0d4:	83 ec 0c             	sub    esp,0xc
c001a0d7:	50                   	push   eax
c001a0d8:	e8 8a c9 fe ff       	call   c0006a67 <init_percd>
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	51                   	push   ecx
c001a0e1:	83 c3 03             	add    ebx,0x3
c001a0e4:	51                   	push   ecx
c001a0e5:	6a 00                	push   0x0
c001a0e7:	53                   	push   ebx
c001a0e8:	e8 3d c4 fe ff       	call   c000652a <iso_open>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	89 c2                	mov    edx,eax
c001a0f2:	b8 01 00 00 00       	mov    eax,0x1
c001a0f7:	83 fa ff             	cmp    edx,0xffffffff
c001a0fa:	74 10                	je     c001a10c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0fc:	83 c2 32             	add    edx,0x32
c001a0ff:	31 c0                	xor    eax,eax
c001a101:	01 d2                	add    edx,edx
c001a103:	89 16                	mov    DWORD PTR [esi],edx
c001a105:	eb 05                	jmp    c001a10c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a107:	b8 04 00 00 00       	mov    eax,0x4
c001a10c:	5a                   	pop    edx
c001a10d:	5b                   	pop    ebx
c001a10e:	5e                   	pop    esi
c001a10f:	c3                   	ret    

c001a110 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a110:	53                   	push   ebx
c001a111:	83 ec 08             	sub    esp,0x8
c001a114:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a118:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a11c:	85 c0                	test   eax,eax
c001a11e:	74 2d                	je     c001a14d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a120:	85 db                	test   ebx,ebx
c001a122:	74 29                	je     c001a14d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a124:	52                   	push   edx
c001a125:	b9 02 00 00 00       	mov    ecx,0x2
c001a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a12e:	99                   	cdq    
c001a12f:	f7 f9                	idiv   ecx
c001a131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a135:	83 e8 32             	sub    eax,0x32
c001a138:	50                   	push   eax
c001a139:	e8 94 c4 fe ff       	call   c00065d2 <iso_read>
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	89 03                	mov    DWORD PTR [ebx],eax
c001a143:	09 d0                	or     eax,edx
c001a145:	0f 94 c0             	sete   al
c001a148:	0f b6 c0             	movzx  eax,al
c001a14b:	eb 05                	jmp    c001a152 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a14d:	b8 04 00 00 00       	mov    eax,0x4
c001a152:	83 c4 08             	add    esp,0x8
c001a155:	5b                   	pop    ebx
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <ISO9660::seek(void*, unsigned long long)>:
c001a158:	57                   	push   edi
c001a159:	b8 04 00 00 00       	mov    eax,0x4
c001a15e:	56                   	push   esi
c001a15f:	51                   	push   ecx
c001a160:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a164:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a168:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a16c:	85 d2                	test   edx,edx
c001a16e:	74 26                	je     c001a196 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a170:	89 d0                	mov    eax,edx
c001a172:	b9 02 00 00 00       	mov    ecx,0x2
c001a177:	6a 00                	push   0x0
c001a179:	99                   	cdq    
c001a17a:	f7 f9                	idiv   ecx
c001a17c:	57                   	push   edi
c001a17d:	56                   	push   esi
c001a17e:	83 e8 32             	sub    eax,0x32
c001a181:	50                   	push   eax
c001a182:	e8 61 c5 fe ff       	call   c00066e8 <iso_seek>
c001a187:	83 c4 10             	add    esp,0x10
c001a18a:	31 f0                	xor    eax,esi
c001a18c:	31 fa                	xor    edx,edi
c001a18e:	09 d0                	or     eax,edx
c001a190:	0f 95 c0             	setne  al
c001a193:	0f b6 c0             	movzx  eax,al
c001a196:	5a                   	pop    edx
c001a197:	5e                   	pop    esi
c001a198:	5f                   	pop    edi
c001a199:	c3                   	ret    

c001a19a <ISO9660::tell(void*, unsigned long long*)>:
c001a19a:	53                   	push   ebx
c001a19b:	83 ec 08             	sub    esp,0x8
c001a19e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1a6:	85 c0                	test   eax,eax
c001a1a8:	74 24                	je     c001a1ce <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1aa:	85 db                	test   ebx,ebx
c001a1ac:	74 20                	je     c001a1ce <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1ae:	b9 02 00 00 00       	mov    ecx,0x2
c001a1b3:	99                   	cdq    
c001a1b4:	f7 f9                	idiv   ecx
c001a1b6:	83 ec 0c             	sub    esp,0xc
c001a1b9:	83 e8 32             	sub    eax,0x32
c001a1bc:	50                   	push   eax
c001a1bd:	e8 aa c5 fe ff       	call   c000676c <iso_tell>
c001a1c2:	83 c4 10             	add    esp,0x10
c001a1c5:	89 03                	mov    DWORD PTR [ebx],eax
c001a1c7:	31 c0                	xor    eax,eax
c001a1c9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a1cc:	eb 05                	jmp    c001a1d3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a1ce:	b8 04 00 00 00       	mov    eax,0x4
c001a1d3:	83 c4 08             	add    esp,0x8
c001a1d6:	5b                   	pop    ebx
c001a1d7:	c3                   	ret    

c001a1d8 <ISO9660::stat(void*, unsigned long long*)>:
c001a1d8:	56                   	push   esi
c001a1d9:	53                   	push   ebx
c001a1da:	83 ec 10             	sub    esp,0x10
c001a1dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a1e5:	68 dd 29 02 c0       	push   0xc00229dd
c001a1ea:	e8 1b 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1ef:	83 c4 10             	add    esp,0x10
c001a1f2:	85 db                	test   ebx,ebx
c001a1f4:	74 2a                	je     c001a220 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a1f6:	85 f6                	test   esi,esi
c001a1f8:	74 26                	je     c001a220 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a1fa:	89 d8                	mov    eax,ebx
c001a1fc:	b9 02 00 00 00       	mov    ecx,0x2
c001a201:	99                   	cdq    
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	f7 f9                	idiv   ecx
c001a207:	83 e8 32             	sub    eax,0x32
c001a20a:	50                   	push   eax
c001a20b:	e8 8d c5 fe ff       	call   c000679d <iso_total>
c001a210:	83 c4 10             	add    esp,0x10
c001a213:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a21a:	89 06                	mov    DWORD PTR [esi],eax
c001a21c:	31 c0                	xor    eax,eax
c001a21e:	eb 05                	jmp    c001a225 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a220:	b8 04 00 00 00       	mov    eax,0x4
c001a225:	5a                   	pop    edx
c001a226:	5b                   	pop    ebx
c001a227:	5e                   	pop    esi
c001a228:	c3                   	ret    
c001a229:	90                   	nop

c001a22a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a22a:	55                   	push   ebp
c001a22b:	57                   	push   edi
c001a22c:	56                   	push   esi
c001a22d:	53                   	push   ebx
c001a22e:	83 ec 18             	sub    esp,0x18
c001a231:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a235:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a239:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a23d:	68 e5 29 02 c0       	push   0xc00229e5
c001a242:	e8 c3 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a247:	83 c4 10             	add    esp,0x10
c001a24a:	85 ff                	test   edi,edi
c001a24c:	0f 94 c0             	sete   al
c001a24f:	85 f6                	test   esi,esi
c001a251:	0f 94 c2             	sete   dl
c001a254:	09 d0                	or     eax,edx
c001a256:	a8 01                	test   al,0x1
c001a258:	0f 85 dd 00 00 00    	jne    c001a33b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a25e:	85 db                	test   ebx,ebx
c001a260:	0f 84 d5 00 00 00    	je     c001a33b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a266:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a269:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a26f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a276:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a27d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a27f:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a285:	74 1b                	je     c001a2a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a287:	85 c0                	test   eax,eax
c001a289:	74 10                	je     c001a29b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a28b:	83 ec 0c             	sub    esp,0xc
c001a28e:	68 89 29 02 c0       	push   0xc0022989
c001a293:	e8 49 70 ff ff       	call   c00112e1 <KePanic(char const*)>
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a29d:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a2a2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2a5:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2ac:	85 c0                	test   eax,eax
c001a2ae:	74 09                	je     c001a2b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a2b0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2b7:	74 51                	je     c001a30a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a2b9:	83 ec 0c             	sub    esp,0xc
c001a2bc:	68 ed 29 02 c0       	push   0xc00229ed
c001a2c1:	e8 44 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2c9:	83 c4 10             	add    esp,0x10
c001a2cc:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a2d4:	74 21                	je     c001a2f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a2d6:	83 ec 0c             	sub    esp,0xc
c001a2d9:	68 0d 2a 02 c0       	push   0xc0022a0d
c001a2de:	e8 27 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2e6:	83 c4 10             	add    esp,0x10
c001a2e9:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2f0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2f7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2fe:	83 ec 0c             	sub    esp,0xc
c001a301:	50                   	push   eax
c001a302:	e8 60 c7 fe ff       	call   c0006a67 <init_percd>
c001a307:	83 c4 10             	add    esp,0x10
c001a30a:	52                   	push   edx
c001a30b:	83 c3 03             	add    ebx,0x3
c001a30e:	52                   	push   edx
c001a30f:	6a 00                	push   0x0
c001a311:	53                   	push   ebx
c001a312:	e8 13 c2 fe ff       	call   c000652a <iso_open>
c001a317:	83 c4 10             	add    esp,0x10
c001a31a:	83 f8 ff             	cmp    eax,0xffffffff
c001a31d:	89 c5                	mov    ebp,eax
c001a31f:	75 21                	jne    c001a342 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a321:	50                   	push   eax
c001a322:	50                   	push   eax
c001a323:	6a 01                	push   0x1
c001a325:	53                   	push   ebx
c001a326:	e8 ff c1 fe ff       	call   c000652a <iso_open>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	ba 02 00 00 00       	mov    edx,0x2
c001a333:	40                   	inc    eax
c001a334:	74 2b                	je     c001a361 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a336:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a339:	eb 24                	jmp    c001a35f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a33b:	ba 04 00 00 00       	mov    edx,0x4
c001a340:	eb 1f                	jmp    c001a361 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a342:	83 ec 0c             	sub    esp,0xc
c001a345:	50                   	push   eax
c001a346:	e8 52 c4 fe ff       	call   c000679d <iso_total>
c001a34b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a352:	89 07                	mov    DWORD PTR [edi],eax
c001a354:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a357:	e8 58 c2 fe ff       	call   c00065b4 <iso_close>
c001a35c:	83 c4 10             	add    esp,0x10
c001a35f:	31 d2                	xor    edx,edx
c001a361:	83 c4 0c             	add    esp,0xc
c001a364:	89 d0                	mov    eax,edx
c001a366:	5b                   	pop    ebx
c001a367:	5e                   	pop    esi
c001a368:	5f                   	pop    edi
c001a369:	5d                   	pop    ebp
c001a36a:	c3                   	ret    
c001a36b:	90                   	nop

c001a36c <ISO9660::close(void*)>:
c001a36c:	83 ec 0c             	sub    esp,0xc
c001a36f:	b8 04 00 00 00       	mov    eax,0x4
c001a374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a378:	85 d2                	test   edx,edx
c001a37a:	74 1b                	je     c001a397 <ISO9660::close(void*)+0x2b>
c001a37c:	89 d0                	mov    eax,edx
c001a37e:	b9 02 00 00 00       	mov    ecx,0x2
c001a383:	99                   	cdq    
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	f7 f9                	idiv   ecx
c001a389:	83 e8 32             	sub    eax,0x32
c001a38c:	50                   	push   eax
c001a38d:	e8 22 c2 fe ff       	call   c00065b4 <iso_close>
c001a392:	83 c4 10             	add    esp,0x10
c001a395:	31 c0                	xor    eax,eax
c001a397:	83 c4 0c             	add    esp,0xc
c001a39a:	c3                   	ret    
c001a39b:	90                   	nop

c001a39c <ISO9660::openDir(char const*, void**)>:
c001a39c:	56                   	push   esi
c001a39d:	53                   	push   ebx
c001a39e:	50                   	push   eax
c001a39f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3a3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a3a7:	85 db                	test   ebx,ebx
c001a3a9:	0f 84 bd 00 00 00    	je     c001a46c <ISO9660::openDir(char const*, void**)+0xd0>
c001a3af:	85 f6                	test   esi,esi
c001a3b1:	0f 84 b5 00 00 00    	je     c001a46c <ISO9660::openDir(char const*, void**)+0xd0>
c001a3b7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a3b9:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a3bf:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3c6:	74 1b                	je     c001a3e3 <ISO9660::openDir(char const*, void**)+0x47>
c001a3c8:	85 c0                	test   eax,eax
c001a3ca:	74 10                	je     c001a3dc <ISO9660::openDir(char const*, void**)+0x40>
c001a3cc:	83 ec 0c             	sub    esp,0xc
c001a3cf:	68 89 29 02 c0       	push   0xc0022989
c001a3d4:	e8 08 6f ff ff       	call   c00112e1 <KePanic(char const*)>
c001a3d9:	83 c4 10             	add    esp,0x10
c001a3dc:	8a 03                	mov    al,BYTE PTR [ebx]
c001a3de:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a3e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3e6:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a3ed:	85 c0                	test   eax,eax
c001a3ef:	74 10                	je     c001a401 <ISO9660::openDir(char const*, void**)+0x65>
c001a3f1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a3f8:	74 1a                	je     c001a414 <ISO9660::openDir(char const*, void**)+0x78>
c001a3fa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a401:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	50                   	push   eax
c001a40c:	e8 56 c6 fe ff       	call   c0006a67 <init_percd>
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	50                   	push   eax
c001a415:	83 c3 03             	add    ebx,0x3
c001a418:	50                   	push   eax
c001a419:	6a 01                	push   0x1
c001a41b:	53                   	push   ebx
c001a41c:	e8 09 c1 fe ff       	call   c000652a <iso_open>
c001a421:	83 c4 10             	add    esp,0x10
c001a424:	83 f8 ff             	cmp    eax,0xffffffff
c001a427:	89 c3                	mov    ebx,eax
c001a429:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a42e:	75 1c                	jne    c001a44c <ISO9660::openDir(char const*, void**)+0xb0>
c001a430:	53                   	push   ebx
c001a431:	53                   	push   ebx
c001a432:	68 31 2a 02 c0       	push   0xc0022a31
c001a437:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a43d:	e8 6a e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a442:	83 c4 10             	add    esp,0x10
c001a445:	b8 01 00 00 00       	mov    eax,0x1
c001a44a:	eb 25                	jmp    c001a471 <ISO9660::openDir(char const*, void**)+0xd5>
c001a44c:	51                   	push   ecx
c001a44d:	01 db                	add    ebx,ebx
c001a44f:	51                   	push   ecx
c001a450:	83 c3 65             	add    ebx,0x65
c001a453:	68 44 2a 02 c0       	push   0xc0022a44
c001a458:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a45e:	e8 49 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a463:	83 c4 10             	add    esp,0x10
c001a466:	31 c0                	xor    eax,eax
c001a468:	89 1e                	mov    DWORD PTR [esi],ebx
c001a46a:	eb 05                	jmp    c001a471 <ISO9660::openDir(char const*, void**)+0xd5>
c001a46c:	b8 04 00 00 00       	mov    eax,0x4
c001a471:	5a                   	pop    edx
c001a472:	5b                   	pop    ebx
c001a473:	5e                   	pop    esi
c001a474:	c3                   	ret    
c001a475:	90                   	nop

c001a476 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a476:	55                   	push   ebp
c001a477:	57                   	push   edi
c001a478:	56                   	push   esi
c001a479:	53                   	push   ebx
c001a47a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a480:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a487:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a48e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a495:	85 db                	test   ebx,ebx
c001a497:	0f 84 e4 00 00 00    	je     c001a581 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a49d:	85 ed                	test   ebp,ebp
c001a49f:	0f 84 dc 00 00 00    	je     c001a581 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a4a5:	83 ec 0c             	sub    esp,0xc
c001a4a8:	68 57 2a 02 c0       	push   0xc0022a57
c001a4ad:	e8 58 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4b2:	89 d8                	mov    eax,ebx
c001a4b4:	b9 02 00 00 00       	mov    ecx,0x2
c001a4b9:	99                   	cdq    
c001a4ba:	f7 f9                	idiv   ecx
c001a4bc:	83 e8 32             	sub    eax,0x32
c001a4bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4c2:	e8 28 c3 fe ff       	call   c00067ef <iso_readdir>
c001a4c7:	83 c4 10             	add    esp,0x10
c001a4ca:	85 c0                	test   eax,eax
c001a4cc:	89 c3                	mov    ebx,eax
c001a4ce:	75 38                	jne    c001a508 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a4d0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4d5:	53                   	push   ebx
c001a4d6:	53                   	push   ebx
c001a4d7:	68 62 2a 02 c0       	push   0xc0022a62
c001a4dc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4e2:	e8 c5 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a4e7:	83 c4 0c             	add    esp,0xc
c001a4ea:	68 10 01 00 00       	push   0x110
c001a4ef:	6a 00                	push   0x0
c001a4f1:	57                   	push   edi
c001a4f2:	e8 f9 5f fe ff       	call   c00004f0 <memset>
c001a4f7:	83 c4 10             	add    esp,0x10
c001a4fa:	b8 01 00 00 00       	mov    eax,0x1
c001a4ff:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a506:	eb 7e                	jmp    c001a586 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a508:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a50e:	8d 70 08             	lea    esi,[eax+0x8]
c001a511:	83 ec 0c             	sub    esp,0xc
c001a514:	56                   	push   esi
c001a515:	e8 66 60 fe ff       	call   c0000580 <strlen>
c001a51a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a522:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a526:	83 c4 10             	add    esp,0x10
c001a529:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a52d:	75 0a                	jne    c001a539 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a52f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a532:	b8 02 00 00 00       	mov    eax,0x2
c001a537:	74 05                	je     c001a53e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a539:	b8 01 00 00 00       	mov    eax,0x1
c001a53e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a542:	50                   	push   eax
c001a543:	50                   	push   eax
c001a544:	56                   	push   esi
c001a545:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a549:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a54d:	50                   	push   eax
c001a54e:	e8 fd 60 fe ff       	call   c0000650 <strcpy>
c001a553:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a55a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a55c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a563:	5a                   	pop    edx
c001a564:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a569:	59                   	pop    ecx
c001a56a:	68 75 2a 02 c0       	push   0xc0022a75
c001a56f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a575:	e8 32 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a57a:	83 c4 10             	add    esp,0x10
c001a57d:	31 c0                	xor    eax,eax
c001a57f:	eb 05                	jmp    c001a586 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a581:	b8 04 00 00 00       	mov    eax,0x4
c001a586:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a58c:	5b                   	pop    ebx
c001a58d:	5e                   	pop    esi
c001a58e:	5f                   	pop    edi
c001a58f:	5d                   	pop    ebp
c001a590:	c3                   	ret    

c001a591 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a591:	57                   	push   edi
c001a592:	56                   	push   esi
c001a593:	53                   	push   ebx
c001a594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a598:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a59c:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a5a2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5a6:	0f be cb             	movsx  ecx,bl
c001a5a9:	75 0b                	jne    c001a5b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a5ab:	0f be 05 a0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238a0
c001a5b2:	39 c8                	cmp    eax,ecx
c001a5b4:	74 47                	je     c001a5fd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5b6:	83 ec 0c             	sub    esp,0xc
c001a5b9:	31 d2                	xor    edx,edx
c001a5bb:	68 a0 98 02 c0       	push   0xc00298a0
c001a5c0:	6a 01                	push   0x1
c001a5c2:	52                   	push   edx
c001a5c3:	56                   	push   esi
c001a5c4:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a5cb:	e8 5e 35 ff ff       	call   c000db2e <LogicalDisk::read(unsigned long long, int, void*)>
c001a5d0:	83 c4 20             	add    esp,0x20
c001a5d3:	85 c0                	test   eax,eax
c001a5d5:	75 0e                	jne    c001a5e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a5d7:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a5dd:	88 1d a0 38 02 c0    	mov    BYTE PTR ds:0xc00238a0,bl
c001a5e3:	eb 18                	jmp    c001a5fd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5e5:	50                   	push   eax
c001a5e6:	68 00 08 00 00       	push   0x800
c001a5eb:	6a 00                	push   0x0
c001a5ed:	57                   	push   edi
c001a5ee:	e8 fd 5e fe ff       	call   c00004f0 <memset>
c001a5f3:	83 c4 10             	add    esp,0x10
c001a5f6:	b8 01 00 00 00       	mov    eax,0x1
c001a5fb:	eb 0e                	jmp    c001a60b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a5fd:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a602:	b9 00 08 00 00       	mov    ecx,0x800
c001a607:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a609:	31 c0                	xor    eax,eax
c001a60b:	5b                   	pop    ebx
c001a60c:	5e                   	pop    esi
c001a60d:	5f                   	pop    edi
c001a60e:	c3                   	ret    
c001a60f:	90                   	nop

c001a610 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a610:	53                   	push   ebx
c001a611:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a617:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a621:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a628:	8d 58 41             	lea    ebx,[eax+0x41]
c001a62b:	0f be db             	movsx  ebx,bl
c001a62e:	53                   	push   ebx
c001a62f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a633:	50                   	push   eax
c001a634:	6a 10                	push   0x10
c001a636:	e8 56 ff ff ff       	call   c001a591 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a63b:	83 c4 10             	add    esp,0x10
c001a63e:	31 d2                	xor    edx,edx
c001a640:	85 c0                	test   eax,eax
c001a642:	75 33                	jne    c001a677 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a644:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a649:	75 2c                	jne    c001a677 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a64b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a650:	75 25                	jne    c001a677 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a652:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a657:	75 1e                	jne    c001a677 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a659:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a65e:	75 17                	jne    c001a677 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a660:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a665:	75 10                	jne    c001a677 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a667:	83 ec 0c             	sub    esp,0xc
c001a66a:	53                   	push   ebx
c001a66b:	e8 f7 c3 fe ff       	call   c0006a67 <init_percd>
c001a670:	83 c4 10             	add    esp,0x10
c001a673:	40                   	inc    eax
c001a674:	0f 95 c2             	setne  dl
c001a677:	81 c4 08 08 00 00    	add    esp,0x808
c001a67d:	88 d0                	mov    al,dl
c001a67f:	5b                   	pop    ebx
c001a680:	c3                   	ret    
c001a681:	90                   	nop

c001a682 <ISO9660::ISO9660()>:
c001a682:	83 ec 0c             	sub    esp,0xc
c001a685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a689:	83 ec 0c             	sub    esp,0xc
c001a68c:	50                   	push   eax
c001a68d:	e8 70 0e ff ff       	call   c000b502 <Filesystem::Filesystem()>
c001a692:	83 c4 10             	add    esp,0x10
c001a695:	ba 90 2a 02 c0       	mov    edx,0xc0022a90
c001a69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a69e:	89 10                	mov    DWORD PTR [eax],edx
c001a6a0:	e8 d4 c4 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a6a5:	90                   	nop
c001a6a6:	83 c4 0c             	add    esp,0xc
c001a6a9:	c3                   	ret    

c001a6aa <SoundCard::beginPlayback()>:
c001a6aa:	c7 44 24 04 f4 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022af4
c001a6b2:	e9 2a 6c ff ff       	jmp    c00112e1 <KePanic(char const*)>
c001a6b7:	90                   	nop

c001a6b8 <SoundCard::stopPlayback()>:
c001a6b8:	c7 44 24 04 f4 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022af4
c001a6c0:	e9 1c 6c ff ff       	jmp    c00112e1 <KePanic(char const*)>
c001a6c5:	90                   	nop

c001a6c6 <SoundCard::SoundCard(char const*)>:
c001a6c6:	83 ec 1c             	sub    esp,0x1c
c001a6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6cd:	83 ec 08             	sub    esp,0x8
c001a6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6d4:	50                   	push   eax
c001a6d5:	e8 02 22 ff ff       	call   c000c8dc <Device::Device(char const*)>
c001a6da:	83 c4 10             	add    esp,0x10
c001a6dd:	ba 40 2b 02 c0       	mov    edx,0xc0022b40
c001a6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6e6:	89 10                	mov    DWORD PTR [eax],edx
c001a6e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ec:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a6f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a705:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a70f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a713:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a71d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a721:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a72b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a733:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a738:	7f 1a                	jg     c001a754 <SoundCard::SoundCard(char const*)+0x8e>
c001a73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a73e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a742:	83 c2 54             	add    edx,0x54
c001a745:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a74d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a752:	eb df                	jmp    c001a733 <SoundCard::SoundCard(char const*)+0x6d>
c001a754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a758:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a75f:	90                   	nop
c001a760:	83 c4 1c             	add    esp,0x1c
c001a763:	c3                   	ret    

c001a764 <SoundCard::~SoundCard()>:
c001a764:	83 ec 0c             	sub    esp,0xc
c001a767:	ba 40 2b 02 c0       	mov    edx,0xc0022b40
c001a76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a770:	89 10                	mov    DWORD PTR [eax],edx
c001a772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a776:	83 ec 0c             	sub    esp,0xc
c001a779:	50                   	push   eax
c001a77a:	e8 c7 1e ff ff       	call   c000c646 <Device::~Device()>
c001a77f:	83 c4 10             	add    esp,0x10
c001a782:	90                   	nop
c001a783:	83 c4 0c             	add    esp,0xc
c001a786:	c3                   	ret    
c001a787:	90                   	nop

c001a788 <SoundCard::~SoundCard()>:
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	83 ec 0c             	sub    esp,0xc
c001a78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a792:	e8 cd ff ff ff       	call   c001a764 <SoundCard::~SoundCard()>
c001a797:	83 c4 10             	add    esp,0x10
c001a79a:	83 ec 08             	sub    esp,0x8
c001a79d:	68 e8 01 00 00       	push   0x1e8
c001a7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7a6:	e8 61 00 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a7ab:	83 c4 10             	add    esp,0x10
c001a7ae:	83 c4 0c             	add    esp,0xc
c001a7b1:	c3                   	ret    

c001a7b2 <SoundCard::configureRates(int, int, int)>:
c001a7b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7b6:	31 c0                	xor    eax,eax
c001a7b8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a7bf:	75 20                	jne    c001a7e1 <SoundCard::configureRates(int, int, int)+0x2f>
c001a7c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7c5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a7cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7cf:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7d9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a7df:	b0 01                	mov    al,0x1
c001a7e1:	c3                   	ret    

c001a7e2 <SoundCard::getSamples16(int, short*)>:
c001a7e2:	55                   	push   ebp
c001a7e3:	57                   	push   edi
c001a7e4:	31 ff                	xor    edi,edi
c001a7e6:	56                   	push   esi
c001a7e7:	53                   	push   ebx
c001a7e8:	31 db                	xor    ebx,ebx
c001a7ea:	83 ec 10             	sub    esp,0x10
c001a7ed:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a7f1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a7f5:	8d 04 36             	lea    eax,[esi+esi*1]
c001a7f8:	50                   	push   eax
c001a7f9:	6a 00                	push   0x0
c001a7fb:	55                   	push   ebp
c001a7fc:	e8 ef 5c fe ff       	call   c00004f0 <memset>
c001a801:	83 c4 10             	add    esp,0x10
c001a804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a808:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a80f:	85 c0                	test   eax,eax
c001a811:	74 1a                	je     c001a82d <SoundCard::getSamples16(int, short*)+0x4b>
c001a813:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a817:	75 14                	jne    c001a82d <SoundCard::getSamples16(int, short*)+0x4b>
c001a819:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a81d:	55                   	push   ebp
c001a81e:	56                   	push   esi
c001a81f:	50                   	push   eax
c001a820:	e8 f3 02 00 00       	call   c001ab18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	39 c3                	cmp    ebx,eax
c001a82a:	0f 4c d8             	cmovl  ebx,eax
c001a82d:	47                   	inc    edi
c001a82e:	83 ff 20             	cmp    edi,0x20
c001a831:	75 d1                	jne    c001a804 <SoundCard::getSamples16(int, short*)+0x22>
c001a833:	83 c4 0c             	add    esp,0xc
c001a836:	89 d8                	mov    eax,ebx
c001a838:	5b                   	pop    ebx
c001a839:	5e                   	pop    esi
c001a83a:	5f                   	pop    edi
c001a83b:	5d                   	pop    ebp
c001a83c:	c3                   	ret    
c001a83d:	90                   	nop

c001a83e <SoundCard::getSamples32(int, int*)>:
c001a83e:	55                   	push   ebp
c001a83f:	57                   	push   edi
c001a840:	31 ff                	xor    edi,edi
c001a842:	56                   	push   esi
c001a843:	31 f6                	xor    esi,esi
c001a845:	53                   	push   ebx
c001a846:	83 ec 10             	sub    esp,0x10
c001a849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a84d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a851:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a855:	c1 e0 02             	shl    eax,0x2
c001a858:	50                   	push   eax
c001a859:	6a 00                	push   0x0
c001a85b:	55                   	push   ebp
c001a85c:	e8 8f 5c fe ff       	call   c00004f0 <memset>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a86b:	85 c0                	test   eax,eax
c001a86d:	74 1a                	je     c001a889 <SoundCard::getSamples32(int, int*)+0x4b>
c001a86f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a873:	75 14                	jne    c001a889 <SoundCard::getSamples32(int, int*)+0x4b>
c001a875:	53                   	push   ebx
c001a876:	55                   	push   ebp
c001a877:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a87b:	50                   	push   eax
c001a87c:	e8 67 03 00 00       	call   c001abe8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a881:	83 c4 10             	add    esp,0x10
c001a884:	39 c6                	cmp    esi,eax
c001a886:	0f 4c f0             	cmovl  esi,eax
c001a889:	47                   	inc    edi
c001a88a:	83 ff 20             	cmp    edi,0x20
c001a88d:	75 d5                	jne    c001a864 <SoundCard::getSamples32(int, int*)+0x26>
c001a88f:	85 f6                	test   esi,esi
c001a891:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a898:	75 0f                	jne    c001a8a9 <SoundCard::getSamples32(int, int*)+0x6b>
c001a89a:	85 c0                	test   eax,eax
c001a89c:	74 1b                	je     c001a8b9 <SoundCard::getSamples32(int, int*)+0x7b>
c001a89e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	53                   	push   ebx
c001a8a4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a8a7:	eb 0d                	jmp    c001a8b6 <SoundCard::getSamples32(int, int*)+0x78>
c001a8a9:	85 c0                	test   eax,eax
c001a8ab:	75 0c                	jne    c001a8b9 <SoundCard::getSamples32(int, int*)+0x7b>
c001a8ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8af:	83 ec 0c             	sub    esp,0xc
c001a8b2:	53                   	push   ebx
c001a8b3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a8b6:	83 c4 10             	add    esp,0x10
c001a8b9:	83 c4 0c             	add    esp,0xc
c001a8bc:	89 f0                	mov    eax,esi
c001a8be:	5b                   	pop    ebx
c001a8bf:	5e                   	pop    esi
c001a8c0:	5f                   	pop    edi
c001a8c1:	5d                   	pop    ebp
c001a8c2:	c3                   	ret    
c001a8c3:	90                   	nop

c001a8c4 <SoundCard::addChannel(SoundPort*)>:
c001a8c4:	83 ec 0c             	sub    esp,0xc
c001a8c7:	31 c0                	xor    eax,eax
c001a8c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8cd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a8d5:	74 1b                	je     c001a8f2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a8d7:	40                   	inc    eax
c001a8d8:	83 f8 20             	cmp    eax,0x20
c001a8db:	75 f0                	jne    c001a8cd <SoundCard::addChannel(SoundPort*)+0x9>
c001a8dd:	83 ec 0c             	sub    esp,0xc
c001a8e0:	68 19 2b 02 c0       	push   0xc0022b19
c001a8e5:	e8 f7 69 ff ff       	call   c00112e1 <KePanic(char const*)>
c001a8ea:	83 c4 10             	add    esp,0x10
c001a8ed:	83 c8 ff             	or     eax,0xffffffff
c001a8f0:	eb 0b                	jmp    c001a8fd <SoundCard::addChannel(SoundPort*)+0x39>
c001a8f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8f6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a8fd:	83 c4 0c             	add    esp,0xc
c001a900:	c3                   	ret    
c001a901:	90                   	nop

c001a902 <SoundCard::removeChannel(int)>:
c001a902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a90a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a915:	c3                   	ret    
c001a916:	66 90                	xchg   ax,ax

c001a918 <SoundPort::SoundPort(int, int, int, int)>:
c001a918:	83 ec 0c             	sub    esp,0xc
c001a91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a91f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a92a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a936:	89 10                	mov    DWORD PTR [eax],edx
c001a938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a93c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a940:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a947:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a94b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a94e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a953:	75 13                	jne    c001a968 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a959:	8b 00                	mov    eax,DWORD PTR [eax]
c001a95b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a960:	d1 e0                	shl    eax,1
c001a962:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a966:	66 90                	xchg   ax,ax
c001a968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a96c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a970:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a977:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a982:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a985:	c1 e0 02             	shl    eax,0x2
c001a988:	83 ec 0c             	sub    esp,0xc
c001a98b:	50                   	push   eax
c001a98c:	e8 42 d1 fe ff       	call   c0007ad3 <malloc>
c001a991:	83 c4 10             	add    esp,0x10
c001a994:	89 c2                	mov    edx,eax
c001a996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a99d:	90                   	nop
c001a99e:	83 c4 0c             	add    esp,0xc
c001a9a1:	c3                   	ret    
c001a9a2:	66 90                	xchg   ax,ax

c001a9a4 <SoundPort::~SoundPort()>:
c001a9a4:	83 ec 0c             	sub    esp,0xc
c001a9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9ae:	85 c0                	test   eax,eax
c001a9b0:	74 1e                	je     c001a9d0 <SoundPort::~SoundPort()+0x2c>
c001a9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9b9:	83 ec 0c             	sub    esp,0xc
c001a9bc:	50                   	push   eax
c001a9bd:	e8 21 d1 fe ff       	call   c0007ae3 <free>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9c9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a9d0:	90                   	nop
c001a9d1:	83 c4 0c             	add    esp,0xc
c001a9d4:	c3                   	ret    
c001a9d5:	90                   	nop
c001a9d6:	66 90                	xchg   ax,ax

c001a9d8 <SoundPort::unpause()>:
c001a9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9dc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a9e0:	c3                   	ret    
c001a9e1:	90                   	nop
c001a9e2:	66 90                	xchg   ax,ax

c001a9e4 <SoundPort::pause()>:
c001a9e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a9ec:	c3                   	ret    
c001a9ed:	90                   	nop
c001a9ee:	66 90                	xchg   ax,ax

c001a9f0 <SoundPort::getBufferUsed()>:
c001a9f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9f7:	c3                   	ret    

c001a9f8 <SoundPort::getBufferSize()>:
c001a9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9ff:	c3                   	ret    

c001aa00 <SoundPort::buffer16(short*, int)>:
c001aa00:	55                   	push   ebp
c001aa01:	57                   	push   edi
c001aa02:	56                   	push   esi
c001aa03:	53                   	push   ebx
c001aa04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa08:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aa0c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aa0f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aa12:	74 68                	je     c001aa7c <SoundPort::buffer16(short*, int)+0x7c>
c001aa14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa18:	85 c9                	test   ecx,ecx
c001aa1a:	7e 60                	jle    c001aa7c <SoundPort::buffer16(short*, int)+0x7c>
c001aa1c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aa20:	8d 70 01             	lea    esi,[eax+0x1]
c001aa23:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa26:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa29:	c1 e1 0f             	shl    ecx,0xf
c001aa2c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aa2f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa32:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa35:	74 4d                	je     c001aa84 <SoundPort::buffer16(short*, int)+0x84>
c001aa37:	31 f6                	xor    esi,esi
c001aa39:	eb 21                	jmp    c001aa5c <SoundPort::buffer16(short*, int)+0x5c>
c001aa3b:	90                   	nop
c001aa3c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aa41:	8d 79 01             	lea    edi,[ecx+0x1]
c001aa44:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aa47:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aa4a:	c1 e3 0f             	shl    ebx,0xf
c001aa4d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aa50:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa53:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa56:	74 1c                	je     c001aa74 <SoundPort::buffer16(short*, int)+0x74>
c001aa58:	89 c6                	mov    esi,eax
c001aa5a:	66 90                	xchg   ax,ax
c001aa5c:	8d 46 01             	lea    eax,[esi+0x1]
c001aa5f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aa63:	75 d7                	jne    c001aa3c <SoundPort::buffer16(short*, int)+0x3c>
c001aa65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa69:	8d 76 00             	lea    esi,[esi+0x0]
c001aa6c:	5b                   	pop    ebx
c001aa6d:	5e                   	pop    esi
c001aa6e:	5f                   	pop    edi
c001aa6f:	5d                   	pop    ebp
c001aa70:	c3                   	ret    
c001aa71:	8d 76 00             	lea    esi,[esi+0x0]
c001aa74:	5b                   	pop    ebx
c001aa75:	8d 46 02             	lea    eax,[esi+0x2]
c001aa78:	5e                   	pop    esi
c001aa79:	5f                   	pop    edi
c001aa7a:	5d                   	pop    ebp
c001aa7b:	c3                   	ret    
c001aa7c:	5b                   	pop    ebx
c001aa7d:	31 c0                	xor    eax,eax
c001aa7f:	5e                   	pop    esi
c001aa80:	5f                   	pop    edi
c001aa81:	5d                   	pop    ebp
c001aa82:	c3                   	ret    
c001aa83:	90                   	nop
c001aa84:	b8 01 00 00 00       	mov    eax,0x1
c001aa89:	eb e1                	jmp    c001aa6c <SoundPort::buffer16(short*, int)+0x6c>
c001aa8b:	90                   	nop

c001aa8c <SoundPort::buffer32(int*, int)>:
c001aa8c:	55                   	push   ebp
c001aa8d:	57                   	push   edi
c001aa8e:	56                   	push   esi
c001aa8f:	53                   	push   ebx
c001aa90:	83 ec 04             	sub    esp,0x4
c001aa93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa9b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aa9f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aaa2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001aaa8:	74 5a                	je     c001ab04 <SoundPort::buffer32(int*, int)+0x78>
c001aaaa:	85 c0                	test   eax,eax
c001aaac:	7e 56                	jle    c001ab04 <SoundPort::buffer32(int*, int)+0x78>
c001aaae:	8d 71 01             	lea    esi,[ecx+0x1]
c001aab1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aab4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aab7:	8b 37                	mov    esi,DWORD PTR [edi]
c001aab9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aabc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aabf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aac2:	74 4c                	je     c001ab10 <SoundPort::buffer32(int*, int)+0x84>
c001aac4:	31 f6                	xor    esi,esi
c001aac6:	eb 1c                	jmp    c001aae4 <SoundPort::buffer32(int*, int)+0x58>
c001aac8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aacb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aace:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aad1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aad4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aad8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aadb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aade:	74 18                	je     c001aaf8 <SoundPort::buffer32(int*, int)+0x6c>
c001aae0:	89 de                	mov    esi,ebx
c001aae2:	66 90                	xchg   ax,ax
c001aae4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aae7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aaea:	75 dc                	jne    c001aac8 <SoundPort::buffer32(int*, int)+0x3c>
c001aaec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aaef:	90                   	nop
c001aaf0:	83 c4 04             	add    esp,0x4
c001aaf3:	5b                   	pop    ebx
c001aaf4:	5e                   	pop    esi
c001aaf5:	5f                   	pop    edi
c001aaf6:	5d                   	pop    ebp
c001aaf7:	c3                   	ret    
c001aaf8:	8d 46 02             	lea    eax,[esi+0x2]
c001aafb:	83 c4 04             	add    esp,0x4
c001aafe:	5b                   	pop    ebx
c001aaff:	5e                   	pop    esi
c001ab00:	5f                   	pop    edi
c001ab01:	5d                   	pop    ebp
c001ab02:	c3                   	ret    
c001ab03:	90                   	nop
c001ab04:	83 c4 04             	add    esp,0x4
c001ab07:	31 c0                	xor    eax,eax
c001ab09:	5b                   	pop    ebx
c001ab0a:	5e                   	pop    esi
c001ab0b:	5f                   	pop    edi
c001ab0c:	5d                   	pop    ebp
c001ab0d:	c3                   	ret    
c001ab0e:	66 90                	xchg   ax,ax
c001ab10:	b8 01 00 00 00       	mov    eax,0x1
c001ab15:	eb d9                	jmp    c001aaf0 <SoundPort::buffer32(int*, int)+0x64>
c001ab17:	90                   	nop

c001ab18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ab18:	55                   	push   ebp
c001ab19:	57                   	push   edi
c001ab1a:	56                   	push   esi
c001ab1b:	53                   	push   ebx
c001ab1c:	83 ec 0c             	sub    esp,0xc
c001ab1f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ab2b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ab2f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ab35:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab37:	74 13                	je     c001ab4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001ab39:	83 ec 0c             	sub    esp,0xc
c001ab3c:	68 6c 2b 02 c0       	push   0xc0022b6c
c001ab41:	e8 9b 67 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	8d 76 00             	lea    esi,[esi+0x0]
c001ab4c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ab52:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab55:	74 11                	je     c001ab68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ab57:	83 ec 0c             	sub    esp,0xc
c001ab5a:	68 ab 2b 02 c0       	push   0xc0022bab
c001ab5f:	e8 7d 67 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	90                   	nop
c001ab68:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ab6e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab71:	74 11                	je     c001ab84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ab73:	83 ec 0c             	sub    esp,0xc
c001ab76:	68 ab 2b 02 c0       	push   0xc0022bab
c001ab7b:	e8 61 67 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	90                   	nop
c001ab84:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ab87:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ab8b:	85 f6                	test   esi,esi
c001ab8d:	7e 2d                	jle    c001abbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ab8f:	31 c0                	xor    eax,eax
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]
c001ab94:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab97:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ab9a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aba0:	85 c9                	test   ecx,ecx
c001aba2:	0f 49 d1             	cmovns edx,ecx
c001aba5:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001aba9:	c1 fa 0f             	sar    edx,0xf
c001abac:	01 d1                	add    ecx,edx
c001abae:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001abb2:	83 c0 01             	add    eax,0x1
c001abb5:	39 f0                	cmp    eax,esi
c001abb7:	75 db                	jne    c001ab94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001abb9:	8d 76 00             	lea    esi,[esi+0x0]
c001abbc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abbf:	83 ec 04             	sub    esp,0x4
c001abc2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001abc5:	29 f0                	sub    eax,esi
c001abc7:	c1 e0 02             	shl    eax,0x2
c001abca:	50                   	push   eax
c001abcb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001abce:	50                   	push   eax
c001abcf:	52                   	push   edx
c001abd0:	e8 fb 57 fe ff       	call   c00003d0 <memmove>
c001abd5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001abd8:	29 f0                	sub    eax,esi
c001abda:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001abdd:	83 c4 1c             	add    esp,0x1c
c001abe0:	89 f0                	mov    eax,esi
c001abe2:	5b                   	pop    ebx
c001abe3:	5e                   	pop    esi
c001abe4:	5f                   	pop    edi
c001abe5:	5d                   	pop    ebp
c001abe6:	c3                   	ret    
c001abe7:	90                   	nop

c001abe8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001abe8:	55                   	push   ebp
c001abe9:	57                   	push   edi
c001abea:	56                   	push   esi
c001abeb:	53                   	push   ebx
c001abec:	83 ec 0c             	sub    esp,0xc
c001abef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001abf3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abf7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001abfb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001abff:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ac05:	39 03                	cmp    DWORD PTR [ebx],eax
c001ac07:	74 13                	je     c001ac1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ac09:	83 ec 0c             	sub    esp,0xc
c001ac0c:	68 8c 2b 02 c0       	push   0xc0022b8c
c001ac11:	e8 cb 66 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ac16:	83 c4 10             	add    esp,0x10
c001ac19:	8d 76 00             	lea    esi,[esi+0x0]
c001ac1c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ac22:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ac25:	74 11                	je     c001ac38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ac27:	83 ec 0c             	sub    esp,0xc
c001ac2a:	68 c7 2b 02 c0       	push   0xc0022bc7
c001ac2f:	e8 ad 66 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	90                   	nop
c001ac38:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ac3e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ac41:	74 11                	je     c001ac54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ac43:	83 ec 0c             	sub    esp,0xc
c001ac46:	68 c7 2b 02 c0       	push   0xc0022bc7
c001ac4b:	e8 91 66 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ac50:	83 c4 10             	add    esp,0x10
c001ac53:	90                   	nop
c001ac54:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ac57:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ac5b:	85 ff                	test   edi,edi
c001ac5d:	7e 21                	jle    c001ac80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ac5f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ac66:	31 c0                	xor    eax,eax
c001ac68:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac6b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ac6e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ac71:	01 d5                	add    ebp,edx
c001ac73:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ac76:	83 c0 04             	add    eax,0x4
c001ac79:	39 c1                	cmp    ecx,eax
c001ac7b:	75 eb                	jne    c001ac68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ac7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac83:	83 ec 04             	sub    esp,0x4
c001ac86:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac89:	29 f8                	sub    eax,edi
c001ac8b:	c1 e0 02             	shl    eax,0x2
c001ac8e:	50                   	push   eax
c001ac8f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ac92:	50                   	push   eax
c001ac93:	52                   	push   edx
c001ac94:	e8 37 57 fe ff       	call   c00003d0 <memmove>
c001ac99:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac9c:	29 f8                	sub    eax,edi
c001ac9e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aca1:	83 c4 1c             	add    esp,0x1c
c001aca4:	89 f8                	mov    eax,edi
c001aca6:	5b                   	pop    ebx
c001aca7:	5e                   	pop    esi
c001aca8:	5f                   	pop    edi
c001aca9:	5d                   	pop    ebp
c001acaa:	c3                   	ret    
c001acab:	90                   	nop

c001acac <PCI::open(int, int, void*)>:
c001acac:	83 ec 18             	sub    esp,0x18
c001acaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001acb7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001acbd:	8b 10                	mov    edx,DWORD PTR [eax]
c001acbf:	50                   	push   eax
c001acc0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001acc3:	31 c0                	xor    eax,eax
c001acc5:	83 c4 1c             	add    esp,0x1c
c001acc8:	c3                   	ret    
c001acc9:	90                   	nop

c001acca <PCI::close(int, int, void*)>:
c001acca:	31 c0                	xor    eax,eax
c001accc:	c3                   	ret    
c001accd:	90                   	nop

c001acce <PCI::PCI()>:
c001acce:	83 ec 0c             	sub    esp,0xc
c001acd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd5:	83 ec 08             	sub    esp,0x8
c001acd8:	68 e3 2b 02 c0       	push   0xc0022be3
c001acdd:	50                   	push   eax
c001acde:	e8 bd 13 ff ff       	call   c000c0a0 <Bus::Bus(char const*)>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	ba 8c 2c 02 c0       	mov    edx,0xc0022c8c
c001aceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acef:	89 10                	mov    DWORD PTR [eax],edx
c001acf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001acff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad03:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ad08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad12:	0f b6 d0             	movzx  edx,al
c001ad15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad19:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ad20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad2a:	0f b6 d0             	movzx  edx,al
c001ad2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad31:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ad36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad40:	8d 50 01             	lea    edx,[eax+0x1]
c001ad43:	88 d1                	mov    cl,dl
c001ad45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad49:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ad4f:	0f b6 d0             	movzx  edx,al
c001ad52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad5a:	83 c9 c0             	or     ecx,0xffffffc0
c001ad5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad61:	90                   	nop
c001ad62:	83 c4 0c             	add    esp,0xc
c001ad65:	c3                   	ret    

c001ad66 <PCI::readBAR8(unsigned int, int)>:
c001ad66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad6e:	f6 c2 01             	test   dl,0x1
c001ad71:	74 07                	je     c001ad7a <PCI::readBAR8(unsigned int, int)+0x14>
c001ad73:	83 e2 fc             	and    edx,0xfffffffc
c001ad76:	01 c2                	add    edx,eax
c001ad78:	ec                   	in     al,dx
c001ad79:	c3                   	ret    
c001ad7a:	83 e2 f0             	and    edx,0xfffffff0
c001ad7d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ad80:	c3                   	ret    
c001ad81:	90                   	nop

c001ad82 <PCI::readBAR16(unsigned int, int)>:
c001ad82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad8a:	f6 c2 01             	test   dl,0x1
c001ad8d:	74 08                	je     c001ad97 <PCI::readBAR16(unsigned int, int)+0x15>
c001ad8f:	83 e2 fc             	and    edx,0xfffffffc
c001ad92:	01 c2                	add    edx,eax
c001ad94:	66 ed                	in     ax,dx
c001ad96:	c3                   	ret    
c001ad97:	83 e2 f0             	and    edx,0xfffffff0
c001ad9a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ad9e:	c3                   	ret    
c001ad9f:	90                   	nop

c001ada0 <PCI::readBAR32(unsigned int, int)>:
c001ada0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ada4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ada8:	f6 c2 01             	test   dl,0x1
c001adab:	74 07                	je     c001adb4 <PCI::readBAR32(unsigned int, int)+0x14>
c001adad:	83 e2 fc             	and    edx,0xfffffffc
c001adb0:	01 c2                	add    edx,eax
c001adb2:	ed                   	in     eax,dx
c001adb3:	c3                   	ret    
c001adb4:	83 e2 f0             	and    edx,0xfffffff0
c001adb7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001adba:	c3                   	ret    
c001adbb:	90                   	nop

c001adbc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001adbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adc8:	f6 c2 01             	test   dl,0x1
c001adcb:	74 07                	je     c001add4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001adcd:	83 e2 fc             	and    edx,0xfffffffc
c001add0:	01 ca                	add    edx,ecx
c001add2:	ee                   	out    dx,al
c001add3:	c3                   	ret    
c001add4:	83 e2 f0             	and    edx,0xfffffff0
c001add7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001adda:	c3                   	ret    
c001addb:	90                   	nop

c001addc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001addc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ade0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ade4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ade8:	f6 c2 01             	test   dl,0x1
c001adeb:	74 08                	je     c001adf5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001aded:	83 e2 fc             	and    edx,0xfffffffc
c001adf0:	01 ca                	add    edx,ecx
c001adf2:	66 ef                	out    dx,ax
c001adf4:	c3                   	ret    
c001adf5:	83 e2 f0             	and    edx,0xfffffff0
c001adf8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001adfc:	c3                   	ret    
c001adfd:	90                   	nop

c001adfe <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001adfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae0a:	f6 c2 01             	test   dl,0x1
c001ae0d:	74 07                	je     c001ae16 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ae0f:	83 e2 fc             	and    edx,0xfffffffc
c001ae12:	01 ca                	add    edx,ecx
c001ae14:	ef                   	out    dx,eax
c001ae15:	c3                   	ret    
c001ae16:	83 e2 f0             	and    edx,0xfffffff0
c001ae19:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ae1c:	c3                   	ret    
c001ae1d:	90                   	nop

c001ae1e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae1e:	55                   	push   ebp
c001ae1f:	57                   	push   edi
c001ae20:	56                   	push   esi
c001ae21:	53                   	push   ebx
c001ae22:	83 ec 0c             	sub    esp,0xc
c001ae25:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ae2a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ae2e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae32:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ae36:	83 fe 07             	cmp    esi,0x7
c001ae39:	76 10                	jbe    c001ae4b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ae3b:	83 ec 0c             	sub    esp,0xc
c001ae3e:	68 eb 2b 02 c0       	push   0xc0022beb
c001ae43:	e8 99 64 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	0f b6 db             	movzx  ebx,bl
c001ae4e:	83 fb 0f             	cmp    ebx,0xf
c001ae51:	76 10                	jbe    c001ae63 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ae53:	83 ec 0c             	sub    esp,0xc
c001ae56:	68 1b 2c 02 c0       	push   0xc0022c1b
c001ae5b:	e8 81 64 ff ff       	call   c00112e1 <KePanic(char const*)>
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	8d 04 36             	lea    eax,[esi+esi*1]
c001ae66:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae6b:	83 c8 f0             	or     eax,0xfffffff0
c001ae6e:	ee                   	out    dx,al
c001ae6f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ae74:	89 e8                	mov    eax,ebp
c001ae76:	ee                   	out    dx,al
c001ae77:	89 f9                	mov    ecx,edi
c001ae79:	89 d8                	mov    eax,ebx
c001ae7b:	0f b6 d9             	movzx  ebx,cl
c001ae7e:	83 c4 0c             	add    esp,0xc
c001ae81:	c1 e0 08             	shl    eax,0x8
c001ae84:	83 e3 fc             	and    ebx,0xfffffffc
c001ae87:	09 d8                	or     eax,ebx
c001ae89:	5b                   	pop    ebx
c001ae8a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ae8f:	5e                   	pop    esi
c001ae90:	5f                   	pop    edi
c001ae91:	5d                   	pop    ebp
c001ae92:	c3                   	ret    
c001ae93:	90                   	nop

c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae94:	57                   	push   edi
c001ae95:	56                   	push   esi
c001ae96:	53                   	push   ebx
c001ae97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aea3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aea7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001aead:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aeb1:	83 ff 01             	cmp    edi,0x1
c001aeb4:	75 3f                	jne    c001aef5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001aeb6:	89 de                	mov    esi,ebx
c001aeb8:	0f b6 c0             	movzx  eax,al
c001aebb:	c1 e0 10             	shl    eax,0x10
c001aebe:	81 e6 fc 00 00 00    	and    esi,0xfc
c001aec4:	0f b6 c9             	movzx  ecx,cl
c001aec7:	09 f0                	or     eax,esi
c001aec9:	c1 e1 08             	shl    ecx,0x8
c001aecc:	0f b6 d2             	movzx  edx,dl
c001aecf:	c1 e2 0b             	shl    edx,0xb
c001aed2:	09 c8                	or     eax,ecx
c001aed4:	09 d0                	or     eax,edx
c001aed6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aedb:	0d 00 00 00 80       	or     eax,0x80000000
c001aee0:	ef                   	out    dx,eax
c001aee1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aee6:	ed                   	in     eax,dx
c001aee7:	83 e3 02             	and    ebx,0x2
c001aeea:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aef1:	d3 e8                	shr    eax,cl
c001aef3:	eb 44                	jmp    c001af39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001aef5:	83 ff 02             	cmp    edi,0x2
c001aef8:	75 2d                	jne    c001af27 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001aefa:	83 ec 0c             	sub    esp,0xc
c001aefd:	0f b6 fb             	movzx  edi,bl
c001af00:	57                   	push   edi
c001af01:	0f b6 c9             	movzx  ecx,cl
c001af04:	51                   	push   ecx
c001af05:	0f b6 d2             	movzx  edx,dl
c001af08:	52                   	push   edx
c001af09:	0f b6 c0             	movzx  eax,al
c001af0c:	50                   	push   eax
c001af0d:	56                   	push   esi
c001af0e:	e8 0b ff ff ff       	call   c001ae1e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af13:	89 c2                	mov    edx,eax
c001af15:	ed                   	in     eax,dx
c001af16:	83 e3 02             	and    ebx,0x2
c001af19:	83 c4 20             	add    esp,0x20
c001af1c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af23:	d3 e8                	shr    eax,cl
c001af25:	eb 12                	jmp    c001af39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af27:	83 ec 0c             	sub    esp,0xc
c001af2a:	68 4b 2c 02 c0       	push   0xc0022c4b
c001af2f:	e8 ad 63 ff ff       	call   c00112e1 <KePanic(char const*)>
c001af34:	83 c4 10             	add    esp,0x10
c001af37:	31 c0                	xor    eax,eax
c001af39:	5b                   	pop    ebx
c001af3a:	5e                   	pop    esi
c001af3b:	5f                   	pop    edi
c001af3c:	c3                   	ret    
c001af3d:	90                   	nop

c001af3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001af3e:	83 ec 18             	sub    esp,0x18
c001af41:	6a 00                	push   0x0
c001af43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af48:	50                   	push   eax
c001af49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af4e:	50                   	push   eax
c001af4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af54:	50                   	push   eax
c001af55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af59:	e8 36 ff ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af5e:	83 c4 2c             	add    esp,0x2c
c001af61:	c3                   	ret    

c001af62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af62:	83 ec 18             	sub    esp,0x18
c001af65:	6a 0e                	push   0xe
c001af67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af6c:	50                   	push   eax
c001af6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af72:	50                   	push   eax
c001af73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af78:	50                   	push   eax
c001af79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af7d:	e8 12 ff ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af82:	83 c4 2c             	add    esp,0x2c
c001af85:	0f b6 c0             	movzx  eax,al
c001af88:	c3                   	ret    
c001af89:	90                   	nop

c001af8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af8a:	55                   	push   ebp
c001af8b:	57                   	push   edi
c001af8c:	56                   	push   esi
c001af8d:	53                   	push   ebx
c001af8e:	83 ec 18             	sub    esp,0x18
c001af91:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001af96:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001af9b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001afa0:	6a 0a                	push   0xa
c001afa2:	56                   	push   esi
c001afa3:	55                   	push   ebp
c001afa4:	57                   	push   edi
c001afa5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afa9:	e8 e6 fe ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afae:	83 c4 14             	add    esp,0x14
c001afb1:	6a 0a                	push   0xa
c001afb3:	56                   	push   esi
c001afb4:	55                   	push   ebp
c001afb5:	57                   	push   edi
c001afb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afba:	89 c3                	mov    ebx,eax
c001afbc:	0f b6 db             	movzx  ebx,bl
c001afbf:	e8 d0 fe ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afc4:	83 c4 2c             	add    esp,0x2c
c001afc7:	25 00 ff 00 00       	and    eax,0xff00
c001afcc:	09 d8                	or     eax,ebx
c001afce:	5b                   	pop    ebx
c001afcf:	5e                   	pop    esi
c001afd0:	5f                   	pop    edi
c001afd1:	5d                   	pop    ebp
c001afd2:	c3                   	ret    
c001afd3:	90                   	nop

c001afd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001afd4:	83 ec 18             	sub    esp,0x18
c001afd7:	6a 08                	push   0x8
c001afd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afde:	50                   	push   eax
c001afdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afe4:	50                   	push   eax
c001afe5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afea:	50                   	push   eax
c001afeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afef:	e8 a0 fe ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aff4:	83 c4 2c             	add    esp,0x2c
c001aff7:	0f b6 c4             	movzx  eax,ah
c001affa:	c3                   	ret    
c001affb:	90                   	nop

c001affc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001affc:	83 ec 18             	sub    esp,0x18
c001afff:	6a 08                	push   0x8
c001b001:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b006:	50                   	push   eax
c001b007:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b00c:	50                   	push   eax
c001b00d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b012:	50                   	push   eax
c001b013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b017:	e8 78 fe ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b01c:	83 c4 2c             	add    esp,0x2c
c001b01f:	c3                   	ret    

c001b020 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b020:	83 ec 18             	sub    esp,0x18
c001b023:	6a 3c                	push   0x3c
c001b025:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b02a:	50                   	push   eax
c001b02b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b030:	50                   	push   eax
c001b031:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b036:	50                   	push   eax
c001b037:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b03b:	e8 54 fe ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b040:	83 c4 2c             	add    esp,0x2c
c001b043:	c3                   	ret    

c001b044 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b044:	83 ec 18             	sub    esp,0x18
c001b047:	6a 18                	push   0x18
c001b049:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b04e:	50                   	push   eax
c001b04f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b054:	50                   	push   eax
c001b055:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b05a:	50                   	push   eax
c001b05b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b05f:	e8 30 fe ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b064:	83 c4 2c             	add    esp,0x2c
c001b067:	0f b6 c4             	movzx  eax,ah
c001b06a:	c3                   	ret    
c001b06b:	90                   	nop

c001b06c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b06c:	55                   	push   ebp
c001b06d:	57                   	push   edi
c001b06e:	56                   	push   esi
c001b06f:	53                   	push   ebx
c001b070:	83 ec 28             	sub    esp,0x28
c001b073:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b077:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b07c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b081:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b086:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b08d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b090:	83 c3 10             	add    ebx,0x10
c001b093:	0f b6 c0             	movzx  eax,al
c001b096:	0f b6 db             	movzx  ebx,bl
c001b099:	50                   	push   eax
c001b09a:	51                   	push   ecx
c001b09b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b09f:	57                   	push   edi
c001b0a0:	55                   	push   ebp
c001b0a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0a5:	e8 ea fd ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0aa:	83 c4 14             	add    esp,0x14
c001b0ad:	53                   	push   ebx
c001b0ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b0b2:	51                   	push   ecx
c001b0b3:	89 c6                	mov    esi,eax
c001b0b5:	57                   	push   edi
c001b0b6:	55                   	push   ebp
c001b0b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0bb:	c1 e6 10             	shl    esi,0x10
c001b0be:	e8 d1 fd ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0c3:	83 c4 3c             	add    esp,0x3c
c001b0c6:	5b                   	pop    ebx
c001b0c7:	0f b7 c0             	movzx  eax,ax
c001b0ca:	09 f0                	or     eax,esi
c001b0cc:	5e                   	pop    esi
c001b0cd:	5f                   	pop    edi
c001b0ce:	5d                   	pop    ebp
c001b0cf:	c3                   	ret    

c001b0d0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b0d0:	55                   	push   ebp
c001b0d1:	57                   	push   edi
c001b0d2:	56                   	push   esi
c001b0d3:	53                   	push   ebx
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b0db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0e3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b0e7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b0ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b0f5:	83 f9 01             	cmp    ecx,0x1
c001b0f8:	75 5d                	jne    c001b157 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b0fa:	0f b6 c8             	movzx  ecx,al
c001b0fd:	89 f0                	mov    eax,esi
c001b0ff:	25 fc 00 00 00       	and    eax,0xfc
c001b104:	0f b6 d2             	movzx  edx,dl
c001b107:	c1 e1 10             	shl    ecx,0x10
c001b10a:	c1 e2 0b             	shl    edx,0xb
c001b10d:	09 c1                	or     ecx,eax
c001b10f:	89 f8                	mov    eax,edi
c001b111:	0f b6 f8             	movzx  edi,al
c001b114:	c1 e7 08             	shl    edi,0x8
c001b117:	09 f9                	or     ecx,edi
c001b119:	09 d1                	or     ecx,edx
c001b11b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b120:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b126:	89 c8                	mov    eax,ecx
c001b128:	ef                   	out    dx,eax
c001b129:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b12e:	ed                   	in     eax,dx
c001b12f:	83 e6 02             	and    esi,0x2
c001b132:	0f b7 db             	movzx  ebx,bx
c001b135:	74 0a                	je     c001b141 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b137:	c1 e3 10             	shl    ebx,0x10
c001b13a:	0f b7 d0             	movzx  edx,ax
c001b13d:	09 d3                	or     ebx,edx
c001b13f:	eb 05                	jmp    c001b146 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b141:	66 31 c0             	xor    ax,ax
c001b144:	09 c3                	or     ebx,eax
c001b146:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b14b:	89 c8                	mov    eax,ecx
c001b14d:	ef                   	out    dx,eax
c001b14e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b153:	89 d8                	mov    eax,ebx
c001b155:	eb 41                	jmp    c001b198 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b157:	83 f9 02             	cmp    ecx,0x2
c001b15a:	75 45                	jne    c001b1a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b15c:	89 f1                	mov    ecx,esi
c001b15e:	83 ec 0c             	sub    esp,0xc
c001b161:	0f b6 f1             	movzx  esi,cl
c001b164:	89 f9                	mov    ecx,edi
c001b166:	56                   	push   esi
c001b167:	0f b6 f9             	movzx  edi,cl
c001b16a:	57                   	push   edi
c001b16b:	0f b6 d2             	movzx  edx,dl
c001b16e:	52                   	push   edx
c001b16f:	0f b6 c0             	movzx  eax,al
c001b172:	50                   	push   eax
c001b173:	55                   	push   ebp
c001b174:	e8 a5 fc ff ff       	call   c001ae1e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b179:	89 c2                	mov    edx,eax
c001b17b:	ed                   	in     eax,dx
c001b17c:	83 c4 20             	add    esp,0x20
c001b17f:	f6 c2 02             	test   dl,0x2
c001b182:	0f b7 db             	movzx  ebx,bx
c001b185:	74 0c                	je     c001b193 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b187:	0f b7 c8             	movzx  ecx,ax
c001b18a:	89 d8                	mov    eax,ebx
c001b18c:	c1 e0 10             	shl    eax,0x10
c001b18f:	09 c8                	or     eax,ecx
c001b191:	eb 05                	jmp    c001b198 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b193:	66 31 c0             	xor    ax,ax
c001b196:	09 d8                	or     eax,ebx
c001b198:	ef                   	out    dx,eax
c001b199:	83 c4 0c             	add    esp,0xc
c001b19c:	5b                   	pop    ebx
c001b19d:	5e                   	pop    esi
c001b19e:	5f                   	pop    edi
c001b19f:	5d                   	pop    ebp
c001b1a0:	c3                   	ret    
c001b1a1:	c7 44 24 20 4b 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c4b
c001b1a9:	83 c4 0c             	add    esp,0xc
c001b1ac:	5b                   	pop    ebx
c001b1ad:	5e                   	pop    esi
c001b1ae:	5f                   	pop    edi
c001b1af:	5d                   	pop    ebp
c001b1b0:	e9 2c 61 ff ff       	jmp    c00112e1 <KePanic(char const*)>
c001b1b5:	90                   	nop

c001b1b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b1b6:	55                   	push   ebp
c001b1b7:	57                   	push   edi
c001b1b8:	56                   	push   esi
c001b1b9:	53                   	push   ebx
c001b1ba:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b1c0:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b1c7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b1ce:	0f 85 bd 00 00 00    	jne    c001b291 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b1d4:	83 ec 0c             	sub    esp,0xc
c001b1d7:	68 14 01 00 00       	push   0x114
c001b1dc:	e8 f2 c8 fe ff       	call   c0007ad3 <malloc>
c001b1e1:	83 c4 0c             	add    esp,0xc
c001b1e4:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b1ea:	68 51 2c 02 c0       	push   0xc0022c51
c001b1ef:	50                   	push   eax
c001b1f0:	89 c3                	mov    ebx,eax
c001b1f2:	e8 25 06 ff ff       	call   c000b81c <File::File(char const*, Process*)>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	85 db                	test   ebx,ebx
c001b1fc:	0f 84 6b 02 00 00    	je     c001b46d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b202:	57                   	push   edi
c001b203:	57                   	push   edi
c001b204:	6a 01                	push   0x1
c001b206:	53                   	push   ebx
c001b207:	e8 d8 06 ff ff       	call   c000b8e4 <File::open(FileOpenMode)>
c001b20c:	83 c4 10             	add    esp,0x10
c001b20f:	85 c0                	test   eax,eax
c001b211:	0f 85 56 02 00 00    	jne    c001b46d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b217:	52                   	push   edx
c001b218:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b21c:	50                   	push   eax
c001b21d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b221:	50                   	push   eax
c001b222:	53                   	push   ebx
c001b223:	e8 be 09 ff ff       	call   c000bbe6 <File::stat(unsigned long long*, bool*)>
c001b228:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b22c:	40                   	inc    eax
c001b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b230:	e8 9e c8 fe ff       	call   c0007ad3 <malloc>
c001b235:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b239:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b23d:	59                   	pop    ecx
c001b23e:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b243:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b245:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b249:	51                   	push   ecx
c001b24a:	50                   	push   eax
c001b24b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b24f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b253:	53                   	push   ebx
c001b254:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b257:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b25b:	83 c4 20             	add    esp,0x20
c001b25e:	89 c8                	mov    eax,ecx
c001b260:	99                   	cdq    
c001b261:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b265:	0f 85 02 02 00 00    	jne    c001b46d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b26b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b26f:	0f 85 f8 01 00 00    	jne    c001b46d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b275:	83 ec 0c             	sub    esp,0xc
c001b278:	53                   	push   ebx
c001b279:	e8 c4 06 ff ff       	call   c000b942 <File::close()>
c001b27e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b282:	83 c4 10             	add    esp,0x10
c001b285:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b28c:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b291:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b299:	31 c9                	xor    ecx,ecx
c001b29b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b2a2:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b2a8:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b2af:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b2b5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b2ba:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b2c2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b2c7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b2cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b2d3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b2db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b2df:	39 cd                	cmp    ebp,ecx
c001b2e1:	0f 8e 86 01 00 00    	jle    c001b46d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b2e7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b2ea:	d4 40                	aam    0x40
c001b2ec:	d5 39                	aad    0x39
c001b2ee:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b2f2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b2f6:	d4 40                	aam    0x40
c001b2f8:	d5 39                	aad    0x39
c001b2fa:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b2fe:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b302:	d4 40                	aam    0x40
c001b304:	d5 39                	aad    0x39
c001b306:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b30a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b30e:	d4 40                	aam    0x40
c001b310:	d5 39                	aad    0x39
c001b312:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b316:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b31a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b31e:	3c 56                	cmp    al,0x56
c001b320:	74 47                	je     c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b322:	d4 40                	aam    0x40
c001b324:	d5 39                	aad    0x39
c001b326:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b329:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b32d:	0f b6 db             	movzx  ebx,bl
c001b330:	c1 e3 04             	shl    ebx,0x4
c001b333:	d4 40                	aam    0x40
c001b335:	d5 39                	aad    0x39
c001b337:	83 e8 30             	sub    eax,0x30
c001b33a:	0f b6 c0             	movzx  eax,al
c001b33d:	09 c3                	or     ebx,eax
c001b33f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b343:	c1 e3 04             	shl    ebx,0x4
c001b346:	d4 40                	aam    0x40
c001b348:	d5 39                	aad    0x39
c001b34a:	83 e8 30             	sub    eax,0x30
c001b34d:	0f b6 c0             	movzx  eax,al
c001b350:	09 c3                	or     ebx,eax
c001b352:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b356:	c1 e3 04             	shl    ebx,0x4
c001b359:	d4 40                	aam    0x40
c001b35b:	d5 39                	aad    0x39
c001b35d:	83 e8 30             	sub    eax,0x30
c001b360:	0f b6 c0             	movzx  eax,al
c001b363:	09 c3                	or     ebx,eax
c001b365:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b369:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b36d:	80 fb 58             	cmp    bl,0x58
c001b370:	74 49                	je     c001b3bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b372:	88 d8                	mov    al,bl
c001b374:	d4 40                	aam    0x40
c001b376:	d5 39                	aad    0x39
c001b378:	83 e8 30             	sub    eax,0x30
c001b37b:	0f b6 f8             	movzx  edi,al
c001b37e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b382:	c1 e7 04             	shl    edi,0x4
c001b385:	d4 40                	aam    0x40
c001b387:	d5 39                	aad    0x39
c001b389:	83 e8 30             	sub    eax,0x30
c001b38c:	0f b6 c0             	movzx  eax,al
c001b38f:	09 c7                	or     edi,eax
c001b391:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b395:	c1 e7 04             	shl    edi,0x4
c001b398:	d4 40                	aam    0x40
c001b39a:	d5 39                	aad    0x39
c001b39c:	83 e8 30             	sub    eax,0x30
c001b39f:	0f b6 c0             	movzx  eax,al
c001b3a2:	09 c7                	or     edi,eax
c001b3a4:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b3a8:	c1 e7 04             	shl    edi,0x4
c001b3ab:	d4 40                	aam    0x40
c001b3ad:	d5 39                	aad    0x39
c001b3af:	83 e8 30             	sub    eax,0x30
c001b3b2:	0f b6 c0             	movzx  eax,al
c001b3b5:	09 c7                	or     edi,eax
c001b3b7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b3bb:	8d 41 10             	lea    eax,[ecx+0x10]
c001b3be:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b3c2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b3c6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b3ca:	83 f9 0a             	cmp    ecx,0xa
c001b3cd:	74 07                	je     c001b3d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b3cf:	47                   	inc    edi
c001b3d0:	39 c5                	cmp    ebp,eax
c001b3d2:	75 16                	jne    c001b3ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b3d4:	89 e8                	mov    eax,ebp
c001b3d6:	83 f9 0a             	cmp    ecx,0xa
c001b3d9:	0f 94 c1             	sete   cl
c001b3dc:	0f b6 c9             	movzx  ecx,cl
c001b3df:	01 c1                	add    ecx,eax
c001b3e1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b3e6:	75 0f                	jne    c001b3f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b3e8:	eb 1c                	jmp    c001b406 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b3ea:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b3ed:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b3f1:	40                   	inc    eax
c001b3f2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b3f5:	eb cb                	jmp    c001b3c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b3f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b3fb:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b400:	0f 85 d9 fe ff ff    	jne    c001b2df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b406:	80 fb 58             	cmp    bl,0x58
c001b409:	74 10                	je     c001b41b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b40b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b410:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b415:	0f 85 c4 fe ff ff    	jne    c001b2df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b41b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b41f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b423:	83 e8 30             	sub    eax,0x30
c001b426:	c1 e0 04             	shl    eax,0x4
c001b429:	83 eb 30             	sub    ebx,0x30
c001b42c:	09 d8                	or     eax,ebx
c001b42e:	0f b6 c0             	movzx  eax,al
c001b431:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b435:	0f 85 a4 fe ff ff    	jne    c001b2df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b43b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b43f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b443:	83 e8 30             	sub    eax,0x30
c001b446:	c1 e0 04             	shl    eax,0x4
c001b449:	83 eb 30             	sub    ebx,0x30
c001b44c:	09 d8                	or     eax,ebx
c001b44e:	0f b6 c0             	movzx  eax,al
c001b451:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b455:	0f 85 84 fe ff ff    	jne    c001b2df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b45b:	50                   	push   eax
c001b45c:	50                   	push   eax
c001b45d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b461:	50                   	push   eax
c001b462:	56                   	push   esi
c001b463:	e8 e8 51 fe ff       	call   c0000650 <strcpy>
c001b468:	83 c4 10             	add    esp,0x10
c001b46b:	eb 05                	jmp    c001b472 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b46d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b470:	31 f6                	xor    esi,esi
c001b472:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b478:	89 f0                	mov    eax,esi
c001b47a:	5b                   	pop    ebx
c001b47b:	5e                   	pop    esi
c001b47c:	5f                   	pop    edi
c001b47d:	5d                   	pop    ebp
c001b47e:	c3                   	ret    
c001b47f:	90                   	nop

c001b480 <PCI::checkBus(unsigned char)>:
c001b480:	56                   	push   esi
c001b481:	53                   	push   ebx
c001b482:	31 db                	xor    ebx,ebx
c001b484:	51                   	push   ecx
c001b485:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b48a:	52                   	push   edx
c001b48b:	53                   	push   ebx
c001b48c:	43                   	inc    ebx
c001b48d:	56                   	push   esi
c001b48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b492:	e8 0f 03 00 00       	call   c001b7a6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b497:	83 c4 10             	add    esp,0x10
c001b49a:	83 fb 20             	cmp    ebx,0x20
c001b49d:	75 eb                	jne    c001b48a <PCI::checkBus(unsigned char)+0xa>
c001b49f:	58                   	pop    eax
c001b4a0:	5b                   	pop    ebx
c001b4a1:	5e                   	pop    esi
c001b4a2:	c3                   	ret    
c001b4a3:	90                   	nop

c001b4a4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b4a4:	55                   	push   ebp
c001b4a5:	57                   	push   edi
c001b4a6:	56                   	push   esi
c001b4a7:	53                   	push   ebx
c001b4a8:	83 ec 1c             	sub    esp,0x1c
c001b4ab:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b4b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b4b4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b4b9:	0f 84 63 01 00 00    	je     c001b622 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b4bf:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b4c4:	66 3d 06 04          	cmp    ax,0x406
c001b4c8:	75 2c                	jne    c001b4f6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b4ca:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b4cf:	50                   	push   eax
c001b4d0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b4d5:	50                   	push   eax
c001b4d6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b4db:	50                   	push   eax
c001b4dc:	53                   	push   ebx
c001b4dd:	e8 62 fb ff ff       	call   c001b044 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b4e2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b4e6:	0f b6 c0             	movzx  eax,al
c001b4e9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b4ed:	83 c4 2c             	add    esp,0x2c
c001b4f0:	5b                   	pop    ebx
c001b4f1:	5e                   	pop    esi
c001b4f2:	5f                   	pop    edi
c001b4f3:	5d                   	pop    ebp
c001b4f4:	eb 8a                	jmp    c001b480 <PCI::checkBus(unsigned char)>
c001b4f6:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b4fb:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b501:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b505:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b509:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b50d:	85 d2                	test   edx,edx
c001b50f:	74 34                	je     c001b545 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b511:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b514:	85 c9                	test   ecx,ecx
c001b516:	74 29                	je     c001b541 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b518:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b51e:	31 f5                	xor    ebp,esi
c001b520:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b526:	75 19                	jne    c001b541 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b528:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b52e:	75 11                	jne    c001b541 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b530:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b537:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b53b:	0f 84 e1 00 00 00    	je     c001b622 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b541:	8b 12                	mov    edx,DWORD PTR [edx]
c001b543:	eb c8                	jmp    c001b50d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b545:	3d 01 06 00 00       	cmp    eax,0x601
c001b54a:	75 19                	jne    c001b565 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b54c:	83 ec 0c             	sub    esp,0xc
c001b54f:	68 64 01 00 00       	push   0x164
c001b554:	e8 7a c5 fe ff       	call   c0007ad3 <malloc>
c001b559:	89 04 24             	mov    DWORD PTR [esp],eax
c001b55c:	89 c5                	mov    ebp,eax
c001b55e:	e8 ab 0e 00 00       	call   c001c40e <SATABus::SATABus()>
c001b563:	eb 1e                	jmp    c001b583 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b565:	3d 01 01 00 00       	cmp    eax,0x101
c001b56a:	75 62                	jne    c001b5ce <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	68 70 02 00 00       	push   0x270
c001b574:	e8 5a c5 fe ff       	call   c0007ad3 <malloc>
c001b579:	89 04 24             	mov    DWORD PTR [esp],eax
c001b57c:	89 c5                	mov    ebp,eax
c001b57e:	e8 f3 02 00 00       	call   c001b876 <IDE::IDE()>
c001b583:	58                   	pop    eax
c001b584:	5a                   	pop    edx
c001b585:	55                   	push   ebp
c001b586:	53                   	push   ebx
c001b587:	e8 b8 11 ff ff       	call   c000c744 <Device::addChild(Device*)>
c001b58c:	83 ec 1c             	sub    esp,0x1c
c001b58f:	b9 09 00 00 00       	mov    ecx,0x9
c001b594:	fc                   	cld    
c001b595:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b599:	89 e7                	mov    edi,esp
c001b59b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b59d:	55                   	push   ebp
c001b59e:	e8 e7 10 ff ff       	call   c000c68a <Device::preOpenPCI(PCIDeviceInfo)>
c001b5a3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b5a6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b5aa:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b5b2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b5ba:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b5c2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b5c5:	83 c4 4c             	add    esp,0x4c
c001b5c8:	5b                   	pop    ebx
c001b5c9:	5e                   	pop    esi
c001b5ca:	5f                   	pop    edi
c001b5cb:	5d                   	pop    ebp
c001b5cc:	ff e0                	jmp    eax
c001b5ce:	83 ec 0c             	sub    esp,0xc
c001b5d1:	68 58 01 00 00       	push   0x158
c001b5d6:	e8 f8 c4 fe ff       	call   c0007ad3 <malloc>
c001b5db:	5a                   	pop    edx
c001b5dc:	59                   	pop    ecx
c001b5dd:	68 6a 2c 02 c0       	push   0xc0022c6a
c001b5e2:	50                   	push   eax
c001b5e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b5e7:	e8 f6 13 ff ff       	call   c000c9e2 <DriverlessDevice::DriverlessDevice(char const*)>
c001b5ec:	5e                   	pop    esi
c001b5ed:	5f                   	pop    edi
c001b5ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5f2:	50                   	push   eax
c001b5f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5f7:	53                   	push   ebx
c001b5f8:	e8 47 11 ff ff       	call   c000c744 <Device::addChild(Device*)>
c001b5fd:	83 c4 10             	add    esp,0x10
c001b600:	b9 09 00 00 00       	mov    ecx,0x9
c001b605:	fc                   	cld    
c001b606:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b60a:	89 fe                	mov    esi,edi
c001b60c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b60e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b612:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b616:	83 c4 1c             	add    esp,0x1c
c001b619:	5b                   	pop    ebx
c001b61a:	5e                   	pop    esi
c001b61b:	5f                   	pop    edi
c001b61c:	5d                   	pop    ebp
c001b61d:	e9 68 10 ff ff       	jmp    c000c68a <Device::preOpenPCI(PCIDeviceInfo)>
c001b622:	83 c4 1c             	add    esp,0x1c
c001b625:	5b                   	pop    ebx
c001b626:	5e                   	pop    esi
c001b627:	5f                   	pop    edi
c001b628:	5d                   	pop    ebp
c001b629:	c3                   	ret    

c001b62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b62a:	55                   	push   ebp
c001b62b:	57                   	push   edi
c001b62c:	56                   	push   esi
c001b62d:	53                   	push   ebx
c001b62e:	83 ec 68             	sub    esp,0x68
c001b631:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b638:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b63c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b640:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b647:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b64c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b650:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b657:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b65c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b660:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b665:	6a 0c                	push   0xc
c001b667:	57                   	push   edi
c001b668:	53                   	push   ebx
c001b669:	56                   	push   esi
c001b66a:	55                   	push   ebp
c001b66b:	e8 24 f8 ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b670:	83 c4 20             	add    esp,0x20
c001b673:	57                   	push   edi
c001b674:	53                   	push   ebx
c001b675:	56                   	push   esi
c001b676:	55                   	push   ebp
c001b677:	e8 0e f9 ff ff       	call   c001af8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b67c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b681:	57                   	push   edi
c001b682:	53                   	push   ebx
c001b683:	56                   	push   esi
c001b684:	55                   	push   ebp
c001b685:	e8 96 f9 ff ff       	call   c001b020 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b68a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b68e:	83 c4 14             	add    esp,0x14
c001b691:	6a 3c                	push   0x3c
c001b693:	57                   	push   edi
c001b694:	53                   	push   ebx
c001b695:	56                   	push   esi
c001b696:	55                   	push   ebp
c001b697:	e8 f8 f7 ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b69c:	0f b6 c4             	movzx  eax,ah
c001b69f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6a3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b6a7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b6ab:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b6b0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b6b6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b6bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6c0:	83 c4 20             	add    esp,0x20
c001b6c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b6c8:	74 30                	je     c001b6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6ca:	31 c0                	xor    eax,eax
c001b6cc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b6d0:	7e 28                	jle    c001b6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6d2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b6da:	39 cb                	cmp    ebx,ecx
c001b6dc:	75 19                	jne    c001b6f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b6de:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b6e6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b6ea:	75 0b                	jne    c001b6f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b6ec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b6f3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b6f7:	40                   	inc    eax
c001b6f8:	eb d2                	jmp    c001b6cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b6fa:	31 d2                	xor    edx,edx
c001b6fc:	83 ec 0c             	sub    esp,0xc
c001b6ff:	57                   	push   edi
c001b700:	53                   	push   ebx
c001b701:	56                   	push   esi
c001b702:	52                   	push   edx
c001b703:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b707:	55                   	push   ebp
c001b708:	e8 5f f9 ff ff       	call   c001b06c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b70d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b711:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b715:	42                   	inc    edx
c001b716:	83 c4 20             	add    esp,0x20
c001b719:	83 fa 06             	cmp    edx,0x6
c001b71c:	75 de                	jne    c001b6fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b71e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b722:	83 ec 0c             	sub    esp,0xc
c001b725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b729:	c1 e2 08             	shl    edx,0x8
c001b72c:	0f b6 c4             	movzx  eax,ah
c001b72f:	09 d0                	or     eax,edx
c001b731:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b736:	6a 02                	push   0x2
c001b738:	57                   	push   edi
c001b739:	53                   	push   ebx
c001b73a:	56                   	push   esi
c001b73b:	55                   	push   ebp
c001b73c:	e8 53 f7 ff ff       	call   c001ae94 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b741:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b746:	83 c4 20             	add    esp,0x20
c001b749:	57                   	push   edi
c001b74a:	53                   	push   ebx
c001b74b:	56                   	push   esi
c001b74c:	55                   	push   ebp
c001b74d:	e8 82 f8 ff ff       	call   c001afd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b752:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b756:	57                   	push   edi
c001b757:	53                   	push   ebx
c001b758:	56                   	push   esi
c001b759:	55                   	push   ebp
c001b75a:	e8 df f7 ff ff       	call   c001af3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b75f:	b9 09 00 00 00       	mov    ecx,0x9
c001b764:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b769:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b76d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b771:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b775:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b779:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b77d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b781:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b785:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b789:	83 ec 0c             	sub    esp,0xc
c001b78c:	fc                   	cld    
c001b78d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b791:	89 e7                	mov    edi,esp
c001b793:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b795:	55                   	push   ebp
c001b796:	e8 09 fd ff ff       	call   c001b4a4 <PCI::foundDevice(PCIDeviceInfo)>
c001b79b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	5f                   	pop    edi
c001b7a4:	5d                   	pop    ebp
c001b7a5:	c3                   	ret    

c001b7a6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b7a6:	55                   	push   ebp
c001b7a7:	57                   	push   edi
c001b7a8:	56                   	push   esi
c001b7a9:	53                   	push   ebx
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b7b2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b7b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b7bb:	6a 00                	push   0x0
c001b7bd:	56                   	push   esi
c001b7be:	57                   	push   edi
c001b7bf:	55                   	push   ebp
c001b7c0:	e8 79 f7 ff ff       	call   c001af3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7c5:	6a 00                	push   0x0
c001b7c7:	56                   	push   esi
c001b7c8:	57                   	push   edi
c001b7c9:	55                   	push   ebp
c001b7ca:	e8 5b fe ff ff       	call   c001b62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b7cf:	83 c4 20             	add    esp,0x20
c001b7d2:	6a 00                	push   0x0
c001b7d4:	56                   	push   esi
c001b7d5:	57                   	push   edi
c001b7d6:	55                   	push   ebp
c001b7d7:	e8 86 f7 ff ff       	call   c001af62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	a8 80                	test   al,0x80
c001b7e1:	74 2d                	je     c001b810 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b7e3:	bb 01 00 00 00       	mov    ebx,0x1
c001b7e8:	53                   	push   ebx
c001b7e9:	56                   	push   esi
c001b7ea:	57                   	push   edi
c001b7eb:	55                   	push   ebp
c001b7ec:	e8 4d f7 ff ff       	call   c001af3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	0f b7 c0             	movzx  eax,ax
c001b7f7:	3d ff ff 00 00       	cmp    eax,0xffff
c001b7fc:	74 0c                	je     c001b80a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b7fe:	53                   	push   ebx
c001b7ff:	56                   	push   esi
c001b800:	57                   	push   edi
c001b801:	55                   	push   ebp
c001b802:	e8 23 fe ff ff       	call   c001b62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b807:	83 c4 10             	add    esp,0x10
c001b80a:	43                   	inc    ebx
c001b80b:	83 fb 08             	cmp    ebx,0x8
c001b80e:	75 d8                	jne    c001b7e8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b810:	83 c4 0c             	add    esp,0xc
c001b813:	5b                   	pop    ebx
c001b814:	5e                   	pop    esi
c001b815:	5f                   	pop    edi
c001b816:	5d                   	pop    ebp
c001b817:	c3                   	ret    

c001b818 <PCI::detect()>:
c001b818:	56                   	push   esi
c001b819:	53                   	push   ebx
c001b81a:	53                   	push   ebx
c001b81b:	31 db                	xor    ebx,ebx
c001b81d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b821:	6a 00                	push   0x0
c001b823:	6a 00                	push   0x0
c001b825:	6a 00                	push   0x0
c001b827:	56                   	push   esi
c001b828:	e8 35 f7 ff ff       	call   c001af62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	a8 80                	test   al,0x80
c001b832:	75 21                	jne    c001b855 <PCI::detect()+0x3d>
c001b834:	51                   	push   ecx
c001b835:	51                   	push   ecx
c001b836:	6a 00                	push   0x0
c001b838:	56                   	push   esi
c001b839:	e8 42 fc ff ff       	call   c001b480 <PCI::checkBus(unsigned char)>
c001b83e:	83 c4 10             	add    esp,0x10
c001b841:	eb 2a                	jmp    c001b86d <PCI::detect()+0x55>
c001b843:	52                   	push   edx
c001b844:	52                   	push   edx
c001b845:	53                   	push   ebx
c001b846:	43                   	inc    ebx
c001b847:	56                   	push   esi
c001b848:	e8 33 fc ff ff       	call   c001b480 <PCI::checkBus(unsigned char)>
c001b84d:	83 c4 10             	add    esp,0x10
c001b850:	83 fb 08             	cmp    ebx,0x8
c001b853:	74 18                	je     c001b86d <PCI::detect()+0x55>
c001b855:	53                   	push   ebx
c001b856:	6a 00                	push   0x0
c001b858:	6a 00                	push   0x0
c001b85a:	56                   	push   esi
c001b85b:	e8 de f6 ff ff       	call   c001af3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	0f b7 c0             	movzx  eax,ax
c001b866:	3d ff ff 00 00       	cmp    eax,0xffff
c001b86b:	74 d6                	je     c001b843 <PCI::detect()+0x2b>
c001b86d:	58                   	pop    eax
c001b86e:	5b                   	pop    ebx
c001b86f:	5e                   	pop    esi
c001b870:	c3                   	ret    
c001b871:	90                   	nop

c001b872 <IDE::close(int, int, void*)>:
c001b872:	83 c8 ff             	or     eax,0xffffffff
c001b875:	c3                   	ret    

c001b876 <IDE::IDE()>:
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b87d:	83 ec 08             	sub    esp,0x8
c001b880:	68 b0 2c 02 c0       	push   0xc0022cb0
c001b885:	50                   	push   eax
c001b886:	e8 fd 11 ff ff       	call   c000ca88 <HardDiskController::HardDiskController(char const*)>
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	ba 40 2d 02 c0       	mov    edx,0xc0022d40
c001b893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b897:	89 10                	mov    DWORD PTR [eax],edx
c001b899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b8a4:	90                   	nop
c001b8a5:	83 c4 0c             	add    esp,0xc
c001b8a8:	c3                   	ret    
c001b8a9:	90                   	nop

c001b8aa <IDE::prepareInterrupt(unsigned char)>:
c001b8aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b8b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b8bb:	c3                   	ret    

c001b8bc <selectDrive(unsigned char, unsigned char)>:
c001b8bc:	c3                   	ret    
c001b8bd:	90                   	nop

c001b8be <IDE::getBase(unsigned char)>:
c001b8be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b8cf:	c3                   	ret    

c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b8d0:	55                   	push   ebp
c001b8d1:	57                   	push   edi
c001b8d2:	56                   	push   esi
c001b8d3:	53                   	push   ebx
c001b8d4:	83 ec 1c             	sub    esp,0x1c
c001b8d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b8e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8e7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b8ea:	80 f9 03             	cmp    cl,0x3
c001b8ed:	77 4f                	ja     c001b93e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b8ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8f3:	0f b6 f2             	movzx  esi,dl
c001b8f6:	0f b6 db             	movzx  ebx,bl
c001b8f9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b8fc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b901:	80 ca 80             	or     dl,0x80
c001b904:	52                   	push   edx
c001b905:	6a 0c                	push   0xc
c001b907:	56                   	push   esi
c001b908:	57                   	push   edi
c001b909:	e8 c2 ff ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b90e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b917:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b91b:	ee                   	out    dx,al
c001b91c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b921:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b925:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b929:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b931:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b935:	83 c4 2c             	add    esp,0x2c
c001b938:	5b                   	pop    ebx
c001b939:	5e                   	pop    esi
c001b93a:	5f                   	pop    edi
c001b93b:	5d                   	pop    ebp
c001b93c:	eb 92                	jmp    c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b93e:	0f b6 cb             	movzx  ecx,bl
c001b941:	83 f9 07             	cmp    ecx,0x7
c001b944:	77 12                	ja     c001b958 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b946:	0f b6 d2             	movzx  edx,dl
c001b949:	0f b6 db             	movzx  ebx,bl
c001b94c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b954:	01 da                	add    edx,ebx
c001b956:	eb 2f                	jmp    c001b987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b958:	83 f9 0d             	cmp    ecx,0xd
c001b95b:	77 13                	ja     c001b970 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b95d:	0f b6 d2             	movzx  edx,dl
c001b960:	0f b6 db             	movzx  ebx,bl
c001b963:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b96a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b96e:	eb 17                	jmp    c001b987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b970:	83 f9 15             	cmp    ecx,0x15
c001b973:	77 13                	ja     c001b988 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b975:	0f b6 d2             	movzx  edx,dl
c001b978:	0f b6 db             	movzx  ebx,bl
c001b97b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b983:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b987:	ee                   	out    dx,al
c001b988:	83 c4 1c             	add    esp,0x1c
c001b98b:	5b                   	pop    ebx
c001b98c:	5e                   	pop    esi
c001b98d:	5f                   	pop    edi
c001b98e:	5d                   	pop    ebp
c001b98f:	c3                   	ret    

c001b990 <IDE::read(unsigned char, unsigned char)>:
c001b990:	57                   	push   edi
c001b991:	56                   	push   esi
c001b992:	53                   	push   ebx
c001b993:	83 ec 10             	sub    esp,0x10
c001b996:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b99a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b99e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9a2:	8d 42 f8             	lea    eax,[edx-0x8]
c001b9a5:	3c 03                	cmp    al,0x3
c001b9a7:	77 48                	ja     c001b9f1 <IDE::read(unsigned char, unsigned char)+0x61>
c001b9a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9ad:	0f b6 f1             	movzx  esi,cl
c001b9b0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b9b3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b9b8:	0c 80                	or     al,0x80
c001b9ba:	50                   	push   eax
c001b9bb:	6a 0c                	push   0xc
c001b9bd:	56                   	push   esi
c001b9be:	53                   	push   ebx
c001b9bf:	e8 0c ff ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9c8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b9cd:	0f b6 d2             	movzx  edx,dl
c001b9d0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b9d4:	ec                   	in     al,dx
c001b9d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b9d9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b9de:	52                   	push   edx
c001b9df:	6a 0c                	push   0xc
c001b9e1:	56                   	push   esi
c001b9e2:	53                   	push   ebx
c001b9e3:	e8 e8 fe ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9e8:	83 c4 20             	add    esp,0x20
c001b9eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b9ef:	eb 4c                	jmp    c001ba3d <IDE::read(unsigned char, unsigned char)+0xad>
c001b9f1:	0f b6 f2             	movzx  esi,dl
c001b9f4:	83 fe 07             	cmp    esi,0x7
c001b9f7:	77 12                	ja     c001ba0b <IDE::read(unsigned char, unsigned char)+0x7b>
c001b9f9:	0f b6 c9             	movzx  ecx,cl
c001b9fc:	0f b6 d2             	movzx  edx,dl
c001b9ff:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ba07:	01 c2                	add    edx,eax
c001ba09:	eb 31                	jmp    c001ba3c <IDE::read(unsigned char, unsigned char)+0xac>
c001ba0b:	83 fe 0d             	cmp    esi,0xd
c001ba0e:	77 13                	ja     c001ba23 <IDE::read(unsigned char, unsigned char)+0x93>
c001ba10:	0f b6 c9             	movzx  ecx,cl
c001ba13:	0f b6 d2             	movzx  edx,dl
c001ba16:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ba1d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ba21:	eb 19                	jmp    c001ba3c <IDE::read(unsigned char, unsigned char)+0xac>
c001ba23:	31 c0                	xor    eax,eax
c001ba25:	83 fe 15             	cmp    esi,0x15
c001ba28:	77 13                	ja     c001ba3d <IDE::read(unsigned char, unsigned char)+0xad>
c001ba2a:	0f b6 c9             	movzx  ecx,cl
c001ba2d:	0f b6 d2             	movzx  edx,dl
c001ba30:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ba38:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ba3c:	ec                   	in     al,dx
c001ba3d:	83 c4 10             	add    esp,0x10
c001ba40:	5b                   	pop    ebx
c001ba41:	5e                   	pop    esi
c001ba42:	5f                   	pop    edi
c001ba43:	c3                   	ret    

c001ba44 <IDE::waitInterrupt(unsigned char)>:
c001ba44:	55                   	push   ebp
c001ba45:	57                   	push   edi
c001ba46:	56                   	push   esi
c001ba47:	53                   	push   ebx
c001ba48:	31 db                	xor    ebx,ebx
c001ba4a:	83 ec 0c             	sub    esp,0xc
c001ba4d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba51:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ba56:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ba5e:	89 e8                	mov    eax,ebp
c001ba60:	84 c0                	test   al,al
c001ba62:	75 30                	jne    c001ba94 <IDE::waitInterrupt(unsigned char)+0x50>
c001ba64:	50                   	push   eax
c001ba65:	6a 0c                	push   0xc
c001ba67:	56                   	push   esi
c001ba68:	57                   	push   edi
c001ba69:	e8 22 ff ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001ba6e:	83 c4 10             	add    esp,0x10
c001ba71:	a8 01                	test   al,0x1
c001ba73:	75 27                	jne    c001ba9c <IDE::waitInterrupt(unsigned char)+0x58>
c001ba75:	f6 c3 04             	test   bl,0x4
c001ba78:	75 12                	jne    c001ba8c <IDE::waitInterrupt(unsigned char)+0x48>
c001ba7a:	83 fb 32             	cmp    ebx,0x32
c001ba7d:	7e 0d                	jle    c001ba8c <IDE::waitInterrupt(unsigned char)+0x48>
c001ba7f:	83 ec 0c             	sub    esp,0xc
c001ba82:	6a 64                	push   0x64
c001ba84:	e8 73 a4 ff ff       	call   c0015efc <milliTenthSleep(unsigned int)>
c001ba89:	83 c4 10             	add    esp,0x10
c001ba8c:	83 fb 3c             	cmp    ebx,0x3c
c001ba8f:	74 0b                	je     c001ba9c <IDE::waitInterrupt(unsigned char)+0x58>
c001ba91:	43                   	inc    ebx
c001ba92:	eb c2                	jmp    c001ba56 <IDE::waitInterrupt(unsigned char)+0x12>
c001ba94:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ba9c:	83 c4 0c             	add    esp,0xc
c001ba9f:	89 e8                	mov    eax,ebp
c001baa1:	5b                   	pop    ebx
c001baa2:	5e                   	pop    esi
c001baa3:	5f                   	pop    edi
c001baa4:	5d                   	pop    ebp
c001baa5:	c3                   	ret    

c001baa6 <ideChannel0IRQHandler(regs*, void*)>:
c001baa6:	83 ec 10             	sub    esp,0x10
c001baa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bab4:	6a 07                	push   0x7
c001bab6:	6a 00                	push   0x0
c001bab8:	50                   	push   eax
c001bab9:	e8 d2 fe ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001babe:	83 c4 1c             	add    esp,0x1c
c001bac1:	c3                   	ret    

c001bac2 <ideChannel1IRQHandler(regs*, void*)>:
c001bac2:	83 ec 10             	sub    esp,0x10
c001bac5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bac9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bad0:	6a 07                	push   0x7
c001bad2:	6a 01                	push   0x1
c001bad4:	50                   	push   eax
c001bad5:	e8 b6 fe ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bada:	83 c4 1c             	add    esp,0x1c
c001badd:	c3                   	ret    

c001bade <IDE::enableIRQs(unsigned char, bool)>:
c001bade:	57                   	push   edi
c001badf:	b8 02 00 00 00       	mov    eax,0x2
c001bae4:	56                   	push   esi
c001bae5:	53                   	push   ebx
c001bae6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001baeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001baef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001baf3:	74 02                	je     c001baf7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001baf5:	31 c0                	xor    eax,eax
c001baf7:	0f b6 db             	movzx  ebx,bl
c001bafa:	bf 04 00 00 00       	mov    edi,0x4
c001baff:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bb06:	50                   	push   eax
c001bb07:	6a 0c                	push   0xc
c001bb09:	53                   	push   ebx
c001bb0a:	56                   	push   esi
c001bb0b:	e8 c0 fd ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb10:	83 c4 10             	add    esp,0x10
c001bb13:	50                   	push   eax
c001bb14:	6a 0c                	push   0xc
c001bb16:	53                   	push   ebx
c001bb17:	56                   	push   esi
c001bb18:	e8 73 fe ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	4f                   	dec    edi
c001bb21:	75 f0                	jne    c001bb13 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bb23:	5b                   	pop    ebx
c001bb24:	5e                   	pop    esi
c001bb25:	5f                   	pop    edi
c001bb26:	c3                   	ret    
c001bb27:	90                   	nop

c001bb28 <IDE::open(int, int, void*)>:
c001bb28:	55                   	push   ebp
c001bb29:	57                   	push   edi
c001bb2a:	56                   	push   esi
c001bb2b:	53                   	push   ebx
c001bb2c:	83 ec 1c             	sub    esp,0x1c
c001bb2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb33:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bb3a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bb43:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bb4c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bb53:	0f 85 da 02 00 00    	jne    c001be33 <IDE::open(int, int, void*)+0x30b>
c001bb59:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bb5f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bb63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb67:	83 e0 7f             	and    eax,0x7f
c001bb6a:	83 f8 05             	cmp    eax,0x5
c001bb6d:	74 05                	je     c001bb74 <IDE::open(int, int, void*)+0x4c>
c001bb6f:	83 f8 0f             	cmp    eax,0xf
c001bb72:	75 32                	jne    c001bba6 <IDE::open(int, int, void*)+0x7e>
c001bb74:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bb7a:	83 e0 fc             	and    eax,0xfffffffc
c001bb7d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bb84:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bb8a:	83 e0 fc             	and    eax,0xfffffffc
c001bb8d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bb94:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bb9a:	83 e0 fc             	and    eax,0xfffffffc
c001bb9d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bba4:	eb 14                	jmp    c001bbba <IDE::open(int, int, void*)+0x92>
c001bba6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bbb0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bbba:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bbc1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bbc6:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bbcd:	89 fa                	mov    edx,edi
c001bbcf:	89 f1                	mov    ecx,esi
c001bbd1:	c1 e1 10             	shl    ecx,0x10
c001bbd4:	89 e8                	mov    eax,ebp
c001bbd6:	c1 e0 0b             	shl    eax,0xb
c001bbd9:	09 c1                	or     ecx,eax
c001bbdb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bbe2:	c1 e0 08             	shl    eax,0x8
c001bbe5:	09 c1                	or     ecx,eax
c001bbe7:	89 c8                	mov    eax,ecx
c001bbe9:	0d 08 00 00 80       	or     eax,0x80000008
c001bbee:	ef                   	out    dx,eax
c001bbef:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bbf4:	ed                   	in     eax,dx
c001bbf5:	c1 e8 10             	shr    eax,0x10
c001bbf8:	3d ff ff 00 00       	cmp    eax,0xffff
c001bbfd:	0f 84 f9 00 00 00    	je     c001bcfc <IDE::open(int, int, void*)+0x1d4>
c001bc03:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc09:	89 fa                	mov    edx,edi
c001bc0b:	89 c8                	mov    eax,ecx
c001bc0d:	ef                   	out    dx,eax
c001bc0e:	b0 fe                	mov    al,0xfe
c001bc10:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc15:	ee                   	out    dx,al
c001bc16:	89 c8                	mov    eax,ecx
c001bc18:	89 fa                	mov    edx,edi
c001bc1a:	ef                   	out    dx,eax
c001bc1b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc20:	ed                   	in     eax,dx
c001bc21:	3c fe                	cmp    al,0xfe
c001bc23:	0f 85 a4 00 00 00    	jne    c001bccd <IDE::open(int, int, void*)+0x1a5>
c001bc29:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bc2f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bc36:	74 30                	je     c001bc68 <IDE::open(int, int, void*)+0x140>
c001bc38:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bc3e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bc42:	83 ec 0c             	sub    esp,0xc
c001bc45:	40                   	inc    eax
c001bc46:	0f b6 c0             	movzx  eax,al
c001bc49:	50                   	push   eax
c001bc4a:	55                   	push   ebp
c001bc4b:	56                   	push   esi
c001bc4c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bc52:	51                   	push   ecx
c001bc53:	e8 88 3a ff ff       	call   c000f6e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bc58:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bc5d:	83 c4 1c             	add    esp,0x1c
c001bc60:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc66:	eb 0a                	jmp    c001bc72 <IDE::open(int, int, void*)+0x14a>
c001bc68:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bc72:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bc79:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bc7e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc85:	89 ea                	mov    edx,ebp
c001bc87:	c1 e1 10             	shl    ecx,0x10
c001bc8a:	c1 e0 08             	shl    eax,0x8
c001bc8d:	09 c1                	or     ecx,eax
c001bc8f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bc96:	c1 e0 0b             	shl    eax,0xb
c001bc99:	09 c1                	or     ecx,eax
c001bc9b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bca1:	89 c8                	mov    eax,ecx
c001bca3:	ef                   	out    dx,eax
c001bca4:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bcaa:	be fc 0c 00 00       	mov    esi,0xcfc
c001bcaf:	89 f2                	mov    edx,esi
c001bcb1:	89 f8                	mov    eax,edi
c001bcb3:	ee                   	out    dx,al
c001bcb4:	89 c8                	mov    eax,ecx
c001bcb6:	89 ea                	mov    edx,ebp
c001bcb8:	ef                   	out    dx,eax
c001bcb9:	89 f2                	mov    edx,esi
c001bcbb:	ed                   	in     eax,dx
c001bcbc:	0f b6 c0             	movzx  eax,al
c001bcbf:	39 f8                	cmp    eax,edi
c001bcc1:	74 49                	je     c001bd0c <IDE::open(int, int, void*)+0x1e4>
c001bcc3:	83 ec 0c             	sub    esp,0xc
c001bcc6:	68 c8 2c 02 c0       	push   0xc0022cc8
c001bccb:	eb 37                	jmp    c001bd04 <IDE::open(int, int, void*)+0x1dc>
c001bccd:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bcd6:	75 1a                	jne    c001bcf2 <IDE::open(int, int, void*)+0x1ca>
c001bcd8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bcdd:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bce2:	74 05                	je     c001bce9 <IDE::open(int, int, void*)+0x1c1>
c001bce4:	83 c0 80             	add    eax,0xffffff80
c001bce7:	75 09                	jne    c001bcf2 <IDE::open(int, int, void*)+0x1ca>
c001bce9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcf0:	eb 1a                	jmp    c001bd0c <IDE::open(int, int, void*)+0x1e4>
c001bcf2:	83 ec 0c             	sub    esp,0xc
c001bcf5:	68 d0 2c 02 c0       	push   0xc0022cd0
c001bcfa:	eb 08                	jmp    c001bd04 <IDE::open(int, int, void*)+0x1dc>
c001bcfc:	83 ec 0c             	sub    esp,0xc
c001bcff:	68 01 2d 02 c0       	push   0xc0022d01
c001bd04:	e8 d8 55 ff ff       	call   c00112e1 <KePanic(char const*)>
c001bd09:	83 c4 10             	add    esp,0x10
c001bd0c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bd13:	74 1a                	je     c001bd2f <IDE::open(int, int, void*)+0x207>
c001bd15:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bd1b:	83 e0 fc             	and    eax,0xfffffffc
c001bd1e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bd25:	83 c0 08             	add    eax,0x8
c001bd28:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bd2f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bd35:	89 c2                	mov    edx,eax
c001bd37:	83 e2 0f             	and    edx,0xf
c001bd3a:	83 fa 08             	cmp    edx,0x8
c001bd3d:	75 0a                	jne    c001bd49 <IDE::open(int, int, void*)+0x221>
c001bd3f:	83 e8 02             	sub    eax,0x2
c001bd42:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd49:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bd4f:	89 c2                	mov    edx,eax
c001bd51:	83 e2 0f             	and    edx,0xf
c001bd54:	83 fa 08             	cmp    edx,0x8
c001bd57:	75 0a                	jne    c001bd63 <IDE::open(int, int, void*)+0x23b>
c001bd59:	83 e8 02             	sub    eax,0x2
c001bd5c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd63:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bd6a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bd71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd74:	89 d0                	mov    eax,edx
c001bd76:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd7a:	8d 7a 01             	lea    edi,[edx+0x1]
c001bd7d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bd81:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd85:	83 e1 3f             	and    ecx,0x3f
c001bd88:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd8c:	89 f9                	mov    ecx,edi
c001bd8e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bd95:	8d 78 02             	lea    edi,[eax+0x2]
c001bd98:	0f b6 c9             	movzx  ecx,cl
c001bd9b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd9e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bda2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bda6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bdaa:	83 e2 3f             	and    edx,0x3f
c001bdad:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bdb1:	89 f9                	mov    ecx,edi
c001bdb3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bdb9:	8d 78 03             	lea    edi,[eax+0x3]
c001bdbc:	0f b6 d1             	movzx  edx,cl
c001bdbf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdc2:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bdc6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdca:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bdce:	83 e1 3f             	and    ecx,0x3f
c001bdd1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bdd5:	89 f9                	mov    ecx,edi
c001bdd7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bddd:	8d 78 04             	lea    edi,[eax+0x4]
c001bde0:	0f b6 c9             	movzx  ecx,cl
c001bde3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bde6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bdea:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bdee:	89 fa                	mov    edx,edi
c001bdf0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bdf6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bdfa:	83 e2 3f             	and    edx,0x3f
c001bdfd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be01:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001be08:	66 85 f6             	test   si,si
c001be0b:	74 65                	je     c001be72 <IDE::open(int, int, void*)+0x34a>
c001be0d:	89 f9                	mov    ecx,edi
c001be0f:	83 c0 05             	add    eax,0x5
c001be12:	0f b6 d1             	movzx  edx,cl
c001be15:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be18:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be1c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001be20:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001be26:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001be2a:	83 e0 3f             	and    eax,0x3f
c001be2d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001be31:	eb 3f                	jmp    c001be72 <IDE::open(int, int, void*)+0x34a>
c001be33:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be3a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001be40:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be47:	05 06 02 00 00       	add    eax,0x206
c001be4c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be53:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001be5a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be61:	05 06 02 00 00       	add    eax,0x206
c001be66:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be6d:	e9 bd fe ff ff       	jmp    c001bd2f <IDE::open(int, int, void*)+0x207>
c001be72:	50                   	push   eax
c001be73:	50                   	push   eax
c001be74:	6a 00                	push   0x0
c001be76:	53                   	push   ebx
c001be77:	e8 2e fa ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001be7c:	5a                   	pop    edx
c001be7d:	59                   	pop    ecx
c001be7e:	6a 01                	push   0x1
c001be80:	53                   	push   ebx
c001be81:	e8 24 fa ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001be86:	83 c4 0c             	add    esp,0xc
c001be89:	6a 00                	push   0x0
c001be8b:	6a 00                	push   0x0
c001be8d:	53                   	push   ebx
c001be8e:	e8 4b fc ff ff       	call   c001bade <IDE::enableIRQs(unsigned char, bool)>
c001be93:	83 c4 0c             	add    esp,0xc
c001be96:	6a 00                	push   0x0
c001be98:	6a 01                	push   0x1
c001be9a:	53                   	push   ebx
c001be9b:	e8 3e fc ff ff       	call   c001bade <IDE::enableIRQs(unsigned char, bool)>
c001bea0:	83 c4 10             	add    esp,0x10
c001bea3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001beaa:	74 34                	je     c001bee0 <IDE::open(int, int, void*)+0x3b8>
c001beac:	83 ec 0c             	sub    esp,0xc
c001beaf:	53                   	push   ebx
c001beb0:	6a 01                	push   0x1
c001beb2:	68 a6 ba 01 c0       	push   0xc001baa6
c001beb7:	6a 0e                	push   0xe
c001beb9:	53                   	push   ebx
c001beba:	e8 31 08 ff ff       	call   c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bebf:	83 c4 14             	add    esp,0x14
c001bec2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bec8:	53                   	push   ebx
c001bec9:	6a 01                	push   0x1
c001becb:	68 c2 ba 01 c0       	push   0xc001bac2
c001bed0:	6a 0f                	push   0xf
c001bed2:	53                   	push   ebx
c001bed3:	e8 18 08 ff ff       	call   c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bed8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bede:	eb 38                	jmp    c001bf18 <IDE::open(int, int, void*)+0x3f0>
c001bee0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001beea:	83 ec 0c             	sub    esp,0xc
c001beed:	53                   	push   ebx
c001beee:	6a 00                	push   0x0
c001bef0:	68 a6 ba 01 c0       	push   0xc001baa6
c001bef5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001befb:	53                   	push   ebx
c001befc:	e8 ef 07 ff ff       	call   c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf01:	83 c4 14             	add    esp,0x14
c001bf04:	53                   	push   ebx
c001bf05:	6a 00                	push   0x0
c001bf07:	68 c2 ba 01 c0       	push   0xc001bac2
c001bf0c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bf12:	53                   	push   ebx
c001bf13:	e8 d8 07 ff ff       	call   c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf1a:	83 c4 20             	add    esp,0x20
c001bf1d:	83 ec 0c             	sub    esp,0xc
c001bf20:	53                   	push   ebx
c001bf21:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bf24:	83 c4 0c             	add    esp,0xc
c001bf27:	6a 07                	push   0x7
c001bf29:	6a 00                	push   0x0
c001bf2b:	53                   	push   ebx
c001bf2c:	e8 5f fa ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bf31:	83 c4 0c             	add    esp,0xc
c001bf34:	6a 07                	push   0x7
c001bf36:	6a 01                	push   0x1
c001bf38:	53                   	push   ebx
c001bf39:	e8 52 fa ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bf3e:	83 c4 0c             	add    esp,0xc
c001bf41:	6a 01                	push   0x1
c001bf43:	6a 00                	push   0x0
c001bf45:	53                   	push   ebx
c001bf46:	e8 93 fb ff ff       	call   c001bade <IDE::enableIRQs(unsigned char, bool)>
c001bf4b:	83 c4 0c             	add    esp,0xc
c001bf4e:	6a 01                	push   0x1
c001bf50:	6a 01                	push   0x1
c001bf52:	53                   	push   ebx
c001bf53:	e8 86 fb ff ff       	call   c001bade <IDE::enableIRQs(unsigned char, bool)>
c001bf58:	83 c4 2c             	add    esp,0x2c
c001bf5b:	31 c0                	xor    eax,eax
c001bf5d:	5b                   	pop    ebx
c001bf5e:	5e                   	pop    esi
c001bf5f:	5f                   	pop    edi
c001bf60:	5d                   	pop    ebp
c001bf61:	c3                   	ret    

c001bf62 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bf62:	55                   	push   ebp
c001bf63:	57                   	push   edi
c001bf64:	56                   	push   esi
c001bf65:	53                   	push   ebx
c001bf66:	83 ec 1c             	sub    esp,0x1c
c001bf69:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf71:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf75:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bf79:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf7c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf80:	3c 03                	cmp    al,0x3
c001bf82:	77 5a                	ja     c001bfde <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bf84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bf88:	0f b6 db             	movzx  ebx,bl
c001bf8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bf8f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bf92:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf97:	0c 80                	or     al,0x80
c001bf99:	50                   	push   eax
c001bf9a:	6a 0c                	push   0xc
c001bf9c:	53                   	push   ebx
c001bf9d:	56                   	push   esi
c001bf9e:	e8 2d f9 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfa3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfa7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bfac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bfb0:	0f b6 d2             	movzx  edx,dl
c001bfb3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bfb7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bfb9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bfbe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bfc2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bfc6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bfce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bfd2:	83 c4 2c             	add    esp,0x2c
c001bfd5:	5b                   	pop    ebx
c001bfd6:	5e                   	pop    esi
c001bfd7:	5f                   	pop    edi
c001bfd8:	5d                   	pop    ebp
c001bfd9:	e9 f2 f8 ff ff       	jmp    c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfde:	0f b6 c2             	movzx  eax,dl
c001bfe1:	83 f8 07             	cmp    eax,0x7
c001bfe4:	77 12                	ja     c001bff8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bfe6:	0f b6 db             	movzx  ebx,bl
c001bfe9:	0f b6 c2             	movzx  eax,dl
c001bfec:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bff4:	01 c2                	add    edx,eax
c001bff6:	eb 2f                	jmp    c001c027 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bff8:	83 f8 0d             	cmp    eax,0xd
c001bffb:	77 13                	ja     c001c010 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bffd:	0f b6 db             	movzx  ebx,bl
c001c000:	0f b6 d2             	movzx  edx,dl
c001c003:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c00a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c00e:	eb 17                	jmp    c001c027 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c010:	83 f8 15             	cmp    eax,0x15
c001c013:	77 14                	ja     c001c029 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c015:	0f b6 db             	movzx  ebx,bl
c001c018:	0f b6 d2             	movzx  edx,dl
c001c01b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c023:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c027:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c029:	83 c4 1c             	add    esp,0x1c
c001c02c:	5b                   	pop    ebx
c001c02d:	5e                   	pop    esi
c001c02e:	5f                   	pop    edi
c001c02f:	5d                   	pop    ebp
c001c030:	c3                   	ret    
c001c031:	90                   	nop

c001c032 <IDE::detect()>:
c001c032:	55                   	push   ebp
c001c033:	57                   	push   edi
c001c034:	56                   	push   esi
c001c035:	53                   	push   ebx
c001c036:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c03c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c043:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c04a:	0f 85 9e 02 00 00    	jne    c001c2ee <IDE::detect()+0x2bc>
c001c050:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c057:	31 f6                	xor    esi,esi
c001c059:	31 ff                	xor    edi,edi
c001c05b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c063:	89 f8                	mov    eax,edi
c001c065:	c1 e0 06             	shl    eax,0x6
c001c068:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c070:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c074:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c07c:	c1 e0 04             	shl    eax,0x4
c001c07f:	83 c8 a0             	or     eax,0xffffffa0
c001c082:	0f b6 c0             	movzx  eax,al
c001c085:	50                   	push   eax
c001c086:	6a 06                	push   0x6
c001c088:	56                   	push   esi
c001c089:	53                   	push   ebx
c001c08a:	e8 41 f8 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c08f:	83 c4 0c             	add    esp,0xc
c001c092:	6a 0c                	push   0xc
c001c094:	56                   	push   esi
c001c095:	53                   	push   ebx
c001c096:	e8 f5 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c09b:	83 c4 0c             	add    esp,0xc
c001c09e:	6a 0c                	push   0xc
c001c0a0:	56                   	push   esi
c001c0a1:	53                   	push   ebx
c001c0a2:	e8 e9 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0a7:	83 c4 0c             	add    esp,0xc
c001c0aa:	6a 0c                	push   0xc
c001c0ac:	56                   	push   esi
c001c0ad:	53                   	push   ebx
c001c0ae:	e8 dd f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0b3:	83 c4 0c             	add    esp,0xc
c001c0b6:	6a 0c                	push   0xc
c001c0b8:	56                   	push   esi
c001c0b9:	53                   	push   ebx
c001c0ba:	e8 d1 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0bf:	68 ec 00 00 00       	push   0xec
c001c0c4:	6a 07                	push   0x7
c001c0c6:	56                   	push   esi
c001c0c7:	53                   	push   ebx
c001c0c8:	e8 03 f8 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0cd:	83 c4 1c             	add    esp,0x1c
c001c0d0:	6a 0c                	push   0xc
c001c0d2:	56                   	push   esi
c001c0d3:	53                   	push   ebx
c001c0d4:	e8 b7 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0d9:	83 c4 0c             	add    esp,0xc
c001c0dc:	6a 0c                	push   0xc
c001c0de:	56                   	push   esi
c001c0df:	53                   	push   ebx
c001c0e0:	e8 ab f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0e5:	83 c4 0c             	add    esp,0xc
c001c0e8:	6a 0c                	push   0xc
c001c0ea:	56                   	push   esi
c001c0eb:	53                   	push   ebx
c001c0ec:	e8 9f f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0f1:	83 c4 0c             	add    esp,0xc
c001c0f4:	6a 0c                	push   0xc
c001c0f6:	56                   	push   esi
c001c0f7:	53                   	push   ebx
c001c0f8:	e8 93 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0fd:	83 c4 0c             	add    esp,0xc
c001c100:	6a 0c                	push   0xc
c001c102:	56                   	push   esi
c001c103:	53                   	push   ebx
c001c104:	e8 87 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	84 c0                	test   al,al
c001c10e:	0f 84 61 01 00 00    	je     c001c275 <IDE::detect()+0x243>
c001c114:	31 ed                	xor    ebp,ebp
c001c116:	50                   	push   eax
c001c117:	6a 0c                	push   0xc
c001c119:	56                   	push   esi
c001c11a:	53                   	push   ebx
c001c11b:	e8 70 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c120:	83 c4 10             	add    esp,0x10
c001c123:	a8 01                	test   al,0x1
c001c125:	0f 85 6b 01 00 00    	jne    c001c296 <IDE::detect()+0x264>
c001c12b:	a8 80                	test   al,0x80
c001c12d:	75 04                	jne    c001c133 <IDE::detect()+0x101>
c001c12f:	a8 08                	test   al,0x8
c001c131:	75 23                	jne    c001c156 <IDE::detect()+0x124>
c001c133:	45                   	inc    ebp
c001c134:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c13a:	7e da                	jle    c001c116 <IDE::detect()+0xe4>
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	6a 32                	push   0x32
c001c141:	e8 b6 9d ff ff       	call   c0015efc <milliTenthSleep(unsigned int)>
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c14f:	75 c5                	jne    c001c116 <IDE::detect()+0xe4>
c001c151:	e9 40 01 00 00       	jmp    c001c296 <IDE::detect()+0x264>
c001c156:	31 c9                	xor    ecx,ecx
c001c158:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c15c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c160:	83 ec 0c             	sub    esp,0xc
c001c163:	68 80 00 00 00       	push   0x80
c001c168:	55                   	push   ebp
c001c169:	6a 00                	push   0x0
c001c16b:	56                   	push   esi
c001c16c:	53                   	push   ebx
c001c16d:	e8 f0 fd ff ff       	call   c001bf62 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c172:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c177:	89 f8                	mov    eax,edi
c001c179:	c1 e0 06             	shl    eax,0x6
c001c17c:	01 d8                	add    eax,ebx
c001c17e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c185:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c18c:	89 d1                	mov    ecx,edx
c001c18e:	89 f2                	mov    edx,esi
c001c190:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c196:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c19a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c1a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1a4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c1ab:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c1b3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c1ba:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c1c2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c1c8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c1cf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c1d5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c1d9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c1dd:	83 c4 20             	add    esp,0x20
c001c1e0:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c1e3:	83 c5 02             	add    ebp,0x2
c001c1e6:	83 c0 02             	add    eax,0x2
c001c1e9:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c1ef:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c1f2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c1f8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c1fc:	75 e2                	jne    c001c1e0 <IDE::detect()+0x1ae>
c001c1fe:	89 f8                	mov    eax,edi
c001c200:	c1 e0 06             	shl    eax,0x6
c001c203:	01 d8                	add    eax,ebx
c001c205:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c20c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c213:	c1 ea 09             	shr    edx,0x9
c001c216:	83 e2 01             	and    edx,0x1
c001c219:	80 e1 01             	and    cl,0x1
c001c21c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c222:	75 22                	jne    c001c246 <IDE::detect()+0x214>
c001c224:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c22b:	74 47                	je     c001c274 <IDE::detect()+0x242>
c001c22d:	83 ec 0c             	sub    esp,0xc
c001c230:	68 7c 01 00 00       	push   0x17c
c001c235:	e8 99 b8 fe ff       	call   c0007ad3 <malloc>
c001c23a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c23d:	89 c5                	mov    ebp,eax
c001c23f:	e8 16 05 00 00       	call   c001c75a <ATA::ATA()>
c001c244:	eb 17                	jmp    c001c25d <IDE::detect()+0x22b>
c001c246:	83 ec 0c             	sub    esp,0xc
c001c249:	68 84 01 00 00       	push   0x184
c001c24e:	e8 80 b8 fe ff       	call   c0007ad3 <malloc>
c001c253:	89 04 24             	mov    DWORD PTR [esp],eax
c001c256:	89 c5                	mov    ebp,eax
c001c258:	e8 6f 0e 00 00       	call   c001d0cc <ATAPI::ATAPI()>
c001c25d:	5a                   	pop    edx
c001c25e:	59                   	pop    ecx
c001c25f:	55                   	push   ebp
c001c260:	53                   	push   ebx
c001c261:	e8 de 04 ff ff       	call   c000c744 <Device::addChild(Device*)>
c001c266:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c269:	53                   	push   ebx
c001c26a:	57                   	push   edi
c001c26b:	6a 00                	push   0x0
c001c26d:	55                   	push   ebp
c001c26e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c271:	83 c4 20             	add    esp,0x20
c001c274:	47                   	inc    edi
c001c275:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c27a:	74 0d                	je     c001c289 <IDE::detect()+0x257>
c001c27c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c284:	e9 da fd ff ff       	jmp    c001c063 <IDE::detect()+0x31>
c001c289:	4e                   	dec    esi
c001c28a:	74 62                	je     c001c2ee <IDE::detect()+0x2bc>
c001c28c:	be 01 00 00 00       	mov    esi,0x1
c001c291:	e9 c5 fd ff ff       	jmp    c001c05b <IDE::detect()+0x29>
c001c296:	50                   	push   eax
c001c297:	6a 04                	push   0x4
c001c299:	56                   	push   esi
c001c29a:	53                   	push   ebx
c001c29b:	e8 f0 f6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c2a0:	83 c4 0c             	add    esp,0xc
c001c2a3:	6a 05                	push   0x5
c001c2a5:	56                   	push   esi
c001c2a6:	53                   	push   ebx
c001c2a7:	89 c5                	mov    ebp,eax
c001c2a9:	e8 e2 f6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c2ae:	89 e9                	mov    ecx,ebp
c001c2b0:	83 c4 10             	add    esp,0x10
c001c2b3:	0f b6 e9             	movzx  ebp,cl
c001c2b6:	83 fd 14             	cmp    ebp,0x14
c001c2b9:	74 2d                	je     c001c2e8 <IDE::detect()+0x2b6>
c001c2bb:	83 fd 69             	cmp    ebp,0x69
c001c2be:	75 b5                	jne    c001c275 <IDE::detect()+0x243>
c001c2c0:	3c 96                	cmp    al,0x96
c001c2c2:	75 b1                	jne    c001c275 <IDE::detect()+0x243>
c001c2c4:	68 a1 00 00 00       	push   0xa1
c001c2c9:	6a 07                	push   0x7
c001c2cb:	56                   	push   esi
c001c2cc:	53                   	push   ebx
c001c2cd:	e8 fe f5 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2d2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c2d9:	e8 1e 9c ff ff       	call   c0015efc <milliTenthSleep(unsigned int)>
c001c2de:	83 c4 10             	add    esp,0x10
c001c2e1:	b1 01                	mov    cl,0x1
c001c2e3:	e9 70 fe ff ff       	jmp    c001c158 <IDE::detect()+0x126>
c001c2e8:	3c eb                	cmp    al,0xeb
c001c2ea:	75 cf                	jne    c001c2bb <IDE::detect()+0x289>
c001c2ec:	eb d6                	jmp    c001c2c4 <IDE::detect()+0x292>
c001c2ee:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c2f4:	5b                   	pop    ebx
c001c2f5:	5e                   	pop    esi
c001c2f6:	5f                   	pop    edi
c001c2f7:	5d                   	pop    ebp
c001c2f8:	c3                   	ret    
c001c2f9:	90                   	nop

c001c2fa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c2fa:	55                   	push   ebp
c001c2fb:	57                   	push   edi
c001c2fc:	56                   	push   esi
c001c2fd:	53                   	push   ebx
c001c2fe:	83 ec 1c             	sub    esp,0x1c
c001c301:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c305:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c309:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c30d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c311:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c315:	88 c3                	mov    bl,al
c001c317:	25 ff 00 00 00       	and    eax,0xff
c001c31c:	0f 84 88 00 00 00    	je     c001c3aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c322:	83 ec 0c             	sub    esp,0xc
c001c325:	89 c7                	mov    edi,eax
c001c327:	68 2b 2d 02 c0       	push   0xc0022d2b
c001c32c:	e8 d9 e5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c331:	83 c4 10             	add    esp,0x10
c001c334:	83 ff 01             	cmp    edi,0x1
c001c337:	74 6b                	je     c001c3a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c339:	83 ff 02             	cmp    edi,0x2
c001c33c:	75 58                	jne    c001c396 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c33e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c343:	50                   	push   eax
c001c344:	6a 01                	push   0x1
c001c346:	01 ff                	add    edi,edi
c001c348:	09 fe                	or     esi,edi
c001c34a:	89 f0                	mov    eax,esi
c001c34c:	0f b6 f0             	movzx  esi,al
c001c34f:	c1 e6 06             	shl    esi,0x6
c001c352:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c35a:	50                   	push   eax
c001c35b:	55                   	push   ebp
c001c35c:	e8 2f f6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c361:	83 c4 10             	add    esp,0x10
c001c364:	a8 01                	test   al,0x1
c001c366:	74 02                	je     c001c36a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c368:	b3 07                	mov    bl,0x7
c001c36a:	a8 02                	test   al,0x2
c001c36c:	74 02                	je     c001c370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c36e:	b3 03                	mov    bl,0x3
c001c370:	a8 04                	test   al,0x4
c001c372:	74 02                	je     c001c376 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c374:	b3 14                	mov    bl,0x14
c001c376:	a8 08                	test   al,0x8
c001c378:	74 02                	je     c001c37c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c37a:	b3 03                	mov    bl,0x3
c001c37c:	a8 10                	test   al,0x10
c001c37e:	74 02                	je     c001c382 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c380:	b3 15                	mov    bl,0x15
c001c382:	a8 20                	test   al,0x20
c001c384:	74 02                	je     c001c388 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c386:	b3 03                	mov    bl,0x3
c001c388:	a8 40                	test   al,0x40
c001c38a:	74 02                	je     c001c38e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c38c:	b3 16                	mov    bl,0x16
c001c38e:	a8 80                	test   al,0x80
c001c390:	74 18                	je     c001c3aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c392:	b3 0d                	mov    bl,0xd
c001c394:	eb 14                	jmp    c001c3aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c396:	83 ff 03             	cmp    edi,0x3
c001c399:	74 0d                	je     c001c3a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c39b:	83 ff 04             	cmp    edi,0x4
c001c39e:	75 0a                	jne    c001c3aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3a0:	b3 08                	mov    bl,0x8
c001c3a2:	eb 06                	jmp    c001c3aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3a4:	b3 13                	mov    bl,0x13
c001c3a6:	eb 02                	jmp    c001c3aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3a8:	b3 17                	mov    bl,0x17
c001c3aa:	83 c4 1c             	add    esp,0x1c
c001c3ad:	88 d8                	mov    al,bl
c001c3af:	5b                   	pop    ebx
c001c3b0:	5e                   	pop    esi
c001c3b1:	5f                   	pop    edi
c001c3b2:	5d                   	pop    ebp
c001c3b3:	c3                   	ret    

c001c3b4 <IDE::polling(unsigned char, unsigned int)>:
c001c3b4:	57                   	push   edi
c001c3b5:	56                   	push   esi
c001c3b6:	53                   	push   ebx
c001c3b7:	bb 04 00 00 00       	mov    ebx,0x4
c001c3bc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c3c0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c3c5:	52                   	push   edx
c001c3c6:	6a 0c                	push   0xc
c001c3c8:	56                   	push   esi
c001c3c9:	57                   	push   edi
c001c3ca:	e8 c1 f5 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	4b                   	dec    ebx
c001c3d3:	75 f0                	jne    c001c3c5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c3d5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c3da:	50                   	push   eax
c001c3db:	6a 0c                	push   0xc
c001c3dd:	56                   	push   esi
c001c3de:	57                   	push   edi
c001c3df:	e8 ac f5 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c3e4:	83 c4 10             	add    esp,0x10
c001c3e7:	a8 01                	test   al,0x1
c001c3e9:	75 17                	jne    c001c402 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3eb:	a8 20                	test   al,0x20
c001c3ed:	75 0f                	jne    c001c3fe <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c3ef:	4b                   	dec    ebx
c001c3f0:	74 10                	je     c001c402 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3f2:	a8 80                	test   al,0x80
c001c3f4:	75 e4                	jne    c001c3da <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3f6:	a8 08                	test   al,0x8
c001c3f8:	74 e0                	je     c001c3da <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3fa:	31 c0                	xor    eax,eax
c001c3fc:	eb 06                	jmp    c001c404 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c3fe:	b0 01                	mov    al,0x1
c001c400:	eb 02                	jmp    c001c404 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c402:	b0 02                	mov    al,0x2
c001c404:	5b                   	pop    ebx
c001c405:	5e                   	pop    esi
c001c406:	5f                   	pop    edi
c001c407:	c3                   	ret    

c001c408 <SATABus::close(int, int, void*)>:
c001c408:	31 c0                	xor    eax,eax
c001c40a:	c3                   	ret    
c001c40b:	90                   	nop

c001c40c <SATABus::detect()>:
c001c40c:	c3                   	ret    
c001c40d:	90                   	nop

c001c40e <SATABus::SATABus()>:
c001c40e:	83 ec 0c             	sub    esp,0xc
c001c411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c415:	83 ec 08             	sub    esp,0x8
c001c418:	68 64 2d 02 c0       	push   0xc0022d64
c001c41d:	50                   	push   eax
c001c41e:	e8 65 06 ff ff       	call   c000ca88 <HardDiskController::HardDiskController(char const*)>
c001c423:	83 c4 10             	add    esp,0x10
c001c426:	ba 90 2d 02 c0       	mov    edx,0xc0022d90
c001c42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42f:	89 10                	mov    DWORD PTR [eax],edx
c001c431:	83 ec 0c             	sub    esp,0xc
c001c434:	6a 50                	push   0x50
c001c436:	e8 76 ba fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c43b:	83 c4 10             	add    esp,0x10
c001c43e:	89 c2                	mov    edx,eax
c001c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c444:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c44a:	83 ec 0c             	sub    esp,0xc
c001c44d:	6a 50                	push   0x50
c001c44f:	e8 a1 d1 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c454:	83 c4 10             	add    esp,0x10
c001c457:	89 c2                	mov    edx,eax
c001c459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c463:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c468:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c46c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c472:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c476:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c47c:	83 ec 0c             	sub    esp,0xc
c001c47f:	6a 03                	push   0x3
c001c481:	6a 50                	push   0x50
c001c483:	51                   	push   ecx
c001c484:	52                   	push   edx
c001c485:	50                   	push   eax
c001c486:	e8 7d da fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c48b:	83 c4 20             	add    esp,0x20
c001c48e:	90                   	nop
c001c48f:	83 c4 0c             	add    esp,0xc
c001c492:	c3                   	ret    
c001c493:	90                   	nop

c001c494 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c494:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c498:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c49e:	09 c2                	or     edx,eax
c001c4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c4aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c4ac:	31 c0                	xor    eax,eax
c001c4ae:	c1 e9 08             	shr    ecx,0x8
c001c4b1:	83 e1 0f             	and    ecx,0xf
c001c4b4:	39 c8                	cmp    eax,ecx
c001c4b6:	74 0a                	je     c001c4c2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c4b8:	f6 c2 01             	test   dl,0x1
c001c4bb:	74 08                	je     c001c4c5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c4bd:	d1 ea                	shr    edx,1
c001c4bf:	40                   	inc    eax
c001c4c0:	eb f2                	jmp    c001c4b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c4c2:	83 c8 ff             	or     eax,0xffffffff
c001c4c5:	c3                   	ret    

c001c4c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c4c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4ca:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c4cd:	89 c2                	mov    edx,eax
c001c4cf:	c1 ea 08             	shr    edx,0x8
c001c4d2:	83 e2 0f             	and    edx,0xf
c001c4d5:	4a                   	dec    edx
c001c4d6:	75 32                	jne    c001c50a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c4d8:	83 e0 0f             	and    eax,0xf
c001c4db:	83 f8 03             	cmp    eax,0x3
c001c4de:	75 2a                	jne    c001c50a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c4e0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c4e3:	b8 02 00 00 00       	mov    eax,0x2
c001c4e8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c4ee:	74 1c                	je     c001c50c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4f0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c4f6:	b8 04 00 00 00       	mov    eax,0x4
c001c4fb:	74 0f                	je     c001c50c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4fd:	31 c0                	xor    eax,eax
c001c4ff:	83 fa 03             	cmp    edx,0x3
c001c502:	0f 94 c0             	sete   al
c001c505:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c509:	c3                   	ret    
c001c50a:	31 c0                	xor    eax,eax
c001c50c:	c3                   	ret    
c001c50d:	90                   	nop

c001c50e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c50e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c512:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c515:	0f ba e2 0f          	bt     edx,0xf
c001c519:	72 f7                	jb     c001c512 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c51b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c51e:	83 ca 10             	or     edx,0x10
c001c521:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c524:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c527:	83 ca 01             	or     edx,0x1
c001c52a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c52d:	c3                   	ret    

c001c52e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c52e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c532:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c535:	83 e2 fe             	and    edx,0xfffffffe
c001c538:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c53b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c53e:	83 e2 ef             	and    edx,0xffffffef
c001c541:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c544:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c547:	0f ba e2 0e          	bt     edx,0xe
c001c54b:	72 f7                	jb     c001c544 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c54d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c550:	0f ba e2 0f          	bt     edx,0xf
c001c554:	72 ee                	jb     c001c544 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c556:	c3                   	ret    
c001c557:	90                   	nop

c001c558 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c558:	55                   	push   ebp
c001c559:	57                   	push   edi
c001c55a:	56                   	push   esi
c001c55b:	53                   	push   ebx
c001c55c:	83 ec 1c             	sub    esp,0x1c
c001c55f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c563:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c567:	53                   	push   ebx
c001c568:	57                   	push   edi
c001c569:	e8 c0 ff ff ff       	call   c001c52e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c56e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c57b:	c1 e5 0a             	shl    ebp,0xa
c001c57e:	01 e8                	add    eax,ebp
c001c580:	89 03                	mov    DWORD PTR [ebx],eax
c001c582:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c584:	68 00 04 00 00       	push   0x400
c001c589:	6a 00                	push   0x0
c001c58b:	50                   	push   eax
c001c58c:	e8 5f 3f fe ff       	call   c00004f0 <memset>
c001c591:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c597:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c59b:	83 c4 1c             	add    esp,0x1c
c001c59e:	01 e8                	add    eax,ebp
c001c5a0:	89 03                	mov    DWORD PTR [ebx],eax
c001c5a2:	c1 e6 08             	shl    esi,0x8
c001c5a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c5ac:	81 c6 00 80 00 00    	add    esi,0x8000
c001c5b2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c5b8:	01 f0                	add    eax,esi
c001c5ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c5bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c5c0:	68 00 01 00 00       	push   0x100
c001c5c5:	6a 00                	push   0x0
c001c5c7:	50                   	push   eax
c001c5c8:	e8 23 3f fe ff       	call   c00004f0 <memset>
c001c5cd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c5d3:	31 d2                	xor    edx,edx
c001c5d5:	01 f0                	add    eax,esi
c001c5d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c5da:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c5e1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c5e7:	01 ee                	add    esi,ebp
c001c5e9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c5ed:	83 c4 10             	add    esp,0x10
c001c5f0:	c1 e5 0d             	shl    ebp,0xd
c001c5f3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c5f9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c5ff:	83 c6 20             	add    esi,0x20
c001c602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c606:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c60c:	01 e8                	add    eax,ebp
c001c60e:	01 d0                	add    eax,edx
c001c610:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c613:	52                   	push   edx
c001c614:	68 00 01 00 00       	push   0x100
c001c619:	6a 00                	push   0x0
c001c61b:	50                   	push   eax
c001c61c:	e8 cf 3e fe ff       	call   c00004f0 <memset>
c001c621:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c627:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c62e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c632:	83 c4 10             	add    esp,0x10
c001c635:	01 e8                	add    eax,ebp
c001c637:	01 d0                	add    eax,edx
c001c639:	81 c2 00 01 00 00    	add    edx,0x100
c001c63f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c642:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c648:	75 af                	jne    c001c5f9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c64a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c651:	50                   	push   eax
c001c652:	50                   	push   eax
c001c653:	53                   	push   ebx
c001c654:	57                   	push   edi
c001c655:	e8 b4 fe ff ff       	call   c001c50e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c65a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c661:	83 c4 2c             	add    esp,0x2c
c001c664:	5b                   	pop    ebx
c001c665:	5e                   	pop    esi
c001c666:	5f                   	pop    edi
c001c667:	5d                   	pop    ebp
c001c668:	c3                   	ret    
c001c669:	90                   	nop

c001c66a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c66a:	55                   	push   ebp
c001c66b:	57                   	push   edi
c001c66c:	56                   	push   esi
c001c66d:	53                   	push   ebx
c001c66e:	31 db                	xor    ebx,ebx
c001c670:	83 ec 0c             	sub    esp,0xc
c001c673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c677:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c67b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c67e:	f7 c7 01 00 00 00    	test   edi,0x1
c001c684:	74 7a                	je     c001c700 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c686:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c68a:	89 d8                	mov    eax,ebx
c001c68c:	c1 e0 07             	shl    eax,0x7
c001c68f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c696:	55                   	push   ebp
c001c697:	56                   	push   esi
c001c698:	e8 29 fe ff ff       	call   c001c4c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c69d:	5a                   	pop    edx
c001c69e:	59                   	pop    ecx
c001c69f:	83 f8 01             	cmp    eax,0x1
c001c6a2:	75 21                	jne    c001c6c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c6a4:	50                   	push   eax
c001c6a5:	53                   	push   ebx
c001c6a6:	55                   	push   ebp
c001c6a7:	56                   	push   esi
c001c6a8:	e8 ab fe ff ff       	call   c001c558 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6ad:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c6b4:	e8 1a b4 fe ff       	call   c0007ad3 <malloc>
c001c6b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6bc:	89 c5                	mov    ebp,eax
c001c6be:	e8 c1 10 00 00       	call   c001d784 <SATA::SATA()>
c001c6c3:	eb 24                	jmp    c001c6e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c6c5:	83 f8 04             	cmp    eax,0x4
c001c6c8:	75 36                	jne    c001c700 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c6ca:	51                   	push   ecx
c001c6cb:	53                   	push   ebx
c001c6cc:	55                   	push   ebp
c001c6cd:	56                   	push   esi
c001c6ce:	e8 85 fe ff ff       	call   c001c558 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6d3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c6da:	e8 f4 b3 fe ff       	call   c0007ad3 <malloc>
c001c6df:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6e2:	89 c5                	mov    ebp,eax
c001c6e4:	e8 f5 17 00 00       	call   c001dede <SATAPI::SATAPI()>
c001c6e9:	58                   	pop    eax
c001c6ea:	5a                   	pop    edx
c001c6eb:	55                   	push   ebp
c001c6ec:	56                   	push   esi
c001c6ed:	e8 52 00 ff ff       	call   c000c744 <Device::addChild(Device*)>
c001c6f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c6f5:	56                   	push   esi
c001c6f6:	6a 00                	push   0x0
c001c6f8:	53                   	push   ebx
c001c6f9:	55                   	push   ebp
c001c6fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c6fd:	83 c4 20             	add    esp,0x20
c001c700:	d1 ef                	shr    edi,1
c001c702:	43                   	inc    ebx
c001c703:	83 fb 20             	cmp    ebx,0x20
c001c706:	0f 85 72 ff ff ff    	jne    c001c67e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c70c:	83 c4 0c             	add    esp,0xc
c001c70f:	5b                   	pop    ebx
c001c710:	5e                   	pop    esi
c001c711:	5f                   	pop    edi
c001c712:	5d                   	pop    ebp
c001c713:	c3                   	ret    

c001c714 <SATABus::open(int, int, void*)>:
c001c714:	83 ec 14             	sub    esp,0x14
c001c717:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c71b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c721:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c727:	52                   	push   edx
c001c728:	50                   	push   eax
c001c729:	e8 3c ff ff ff       	call   c001c66a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c72e:	31 c0                	xor    eax,eax
c001c730:	83 c4 1c             	add    esp,0x1c
c001c733:	c3                   	ret    

c001c734 <ATA::close(int, int, void*)>:
c001c734:	83 ec 0c             	sub    esp,0xc
c001c737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c741:	85 c0                	test   eax,eax
c001c743:	74 0c                	je     c001c751 <ATA::close(int, int, void*)+0x1d>
c001c745:	8b 10                	mov    edx,DWORD PTR [eax]
c001c747:	83 ec 0c             	sub    esp,0xc
c001c74a:	50                   	push   eax
c001c74b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	31 c0                	xor    eax,eax
c001c753:	83 c4 0c             	add    esp,0xc
c001c756:	c3                   	ret    
c001c757:	90                   	nop

c001c758 <ATA::powerSaving(PowerSavingLevel)>:
c001c758:	c3                   	ret    
c001c759:	90                   	nop

c001c75a <ATA::ATA()>:
c001c75a:	83 ec 0c             	sub    esp,0xc
c001c75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c761:	83 ec 04             	sub    esp,0x4
c001c764:	68 00 02 00 00       	push   0x200
c001c769:	68 5d 2e 02 c0       	push   0xc0022e5d
c001c76e:	50                   	push   eax
c001c76f:	e8 9e 03 ff ff       	call   c000cb12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c774:	83 c4 10             	add    esp,0x10
c001c777:	ba d0 2d 02 c0       	mov    edx,0xc0022dd0
c001c77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c780:	89 10                	mov    DWORD PTR [eax],edx
c001c782:	90                   	nop
c001c783:	83 c4 0c             	add    esp,0xc
c001c786:	c3                   	ret    
c001c787:	90                   	nop

c001c788 <ATA::flush(bool)>:
c001c788:	53                   	push   ebx
c001c789:	83 ec 08             	sub    esp,0x8
c001c78c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c791:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c795:	83 f8 01             	cmp    eax,0x1
c001c798:	19 c0                	sbb    eax,eax
c001c79a:	83 e0 fd             	and    eax,0xfffffffd
c001c79d:	05 ea 00 00 00       	add    eax,0xea
c001c7a2:	50                   	push   eax
c001c7a3:	6a 07                	push   0x7
c001c7a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7ac:	50                   	push   eax
c001c7ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7b3:	e8 18 f1 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7b8:	83 c4 0c             	add    esp,0xc
c001c7bb:	6a 00                	push   0x0
c001c7bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7c4:	50                   	push   eax
c001c7c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7cb:	e8 e4 fb ff ff       	call   c001c3b4 <IDE::polling(unsigned char, unsigned int)>
c001c7d0:	83 c4 18             	add    esp,0x18
c001c7d3:	5b                   	pop    ebx
c001c7d4:	c3                   	ret    
c001c7d5:	90                   	nop

c001c7d6 <ATA::readyForCommand()>:
c001c7d6:	56                   	push   esi
c001c7d7:	53                   	push   ebx
c001c7d8:	53                   	push   ebx
c001c7d9:	31 db                	xor    ebx,ebx
c001c7db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7df:	51                   	push   ecx
c001c7e0:	6a 0c                	push   0xc
c001c7e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7e9:	50                   	push   eax
c001c7ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f0:	e8 9b f1 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	a8 88                	test   al,0x88
c001c7fa:	74 1f                	je     c001c81b <ATA::readyForCommand()+0x45>
c001c7fc:	43                   	inc    ebx
c001c7fd:	83 fb 63             	cmp    ebx,0x63
c001c800:	7e dd                	jle    c001c7df <ATA::readyForCommand()+0x9>
c001c802:	83 ec 0c             	sub    esp,0xc
c001c805:	6a 0a                	push   0xa
c001c807:	e8 f0 96 ff ff       	call   c0015efc <milliTenthSleep(unsigned int)>
c001c80c:	83 c4 10             	add    esp,0x10
c001c80f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c815:	75 c8                	jne    c001c7df <ATA::readyForCommand()+0x9>
c001c817:	31 c0                	xor    eax,eax
c001c819:	eb 02                	jmp    c001c81d <ATA::readyForCommand()+0x47>
c001c81b:	b0 01                	mov    al,0x1
c001c81d:	5a                   	pop    edx
c001c81e:	5b                   	pop    ebx
c001c81f:	5e                   	pop    esi
c001c820:	c3                   	ret    
c001c821:	90                   	nop

c001c822 <ATA::access(unsigned long long, int, void*, bool)>:
c001c822:	55                   	push   ebp
c001c823:	57                   	push   edi
c001c824:	56                   	push   esi
c001c825:	53                   	push   ebx
c001c826:	83 ec 2c             	sub    esp,0x2c
c001c829:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c82d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c831:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c835:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c839:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c83d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c841:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c845:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c84b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c84f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c855:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c859:	c1 e0 06             	shl    eax,0x6
c001c85c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c864:	74 5b                	je     c001c8c1 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c866:	89 fa                	mov    edx,edi
c001c868:	89 f0                	mov    eax,esi
c001c86a:	c1 ea 1c             	shr    edx,0x1c
c001c86d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c871:	89 d1                	mov    ecx,edx
c001c873:	09 c1                	or     ecx,eax
c001c875:	74 25                	je     c001c89c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c877:	31 ed                	xor    ebp,ebp
c001c879:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c880:	89 fa                	mov    edx,edi
c001c882:	89 f0                	mov    eax,esi
c001c884:	0f ad d0             	shrd   eax,edx,cl
c001c887:	d3 ea                	shr    edx,cl
c001c889:	f6 c1 20             	test   cl,0x20
c001c88c:	74 02                	je     c001c890 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c88e:	89 d0                	mov    eax,edx
c001c890:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c894:	45                   	inc    ebp
c001c895:	83 fd 06             	cmp    ebp,0x6
c001c898:	75 df                	jne    c001c879 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c89a:	eb 71                	jmp    c001c90d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c89c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8a1:	89 f0                	mov    eax,esi
c001c8a3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8aa:	0f ac f8 10          	shrd   eax,edi,0x10
c001c8ae:	bf 01 00 00 00       	mov    edi,0x1
c001c8b3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c8b7:	c1 ee 18             	shr    esi,0x18
c001c8ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8bf:	eb 53                	jmp    c001c914 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c8c1:	6a 00                	push   0x0
c001c8c3:	6a 3f                	push   0x3f
c001c8c5:	57                   	push   edi
c001c8c6:	56                   	push   esi
c001c8c7:	e8 d4 2a 00 00       	call   c001f3a0 <__umoddi3>
c001c8cc:	83 c4 10             	add    esp,0x10
c001c8cf:	40                   	inc    eax
c001c8d0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c8d4:	6a 00                	push   0x0
c001c8d6:	68 f0 03 00 00       	push   0x3f0
c001c8db:	57                   	push   edi
c001c8dc:	56                   	push   esi
c001c8dd:	e8 be 29 00 00       	call   c001f2a0 <__udivdi3>
c001c8e2:	83 c4 10             	add    esp,0x10
c001c8e5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c8ea:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8f1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8f6:	6a 00                	push   0x0
c001c8f8:	6a 3f                	push   0x3f
c001c8fa:	57                   	push   edi
c001c8fb:	31 ff                	xor    edi,edi
c001c8fd:	56                   	push   esi
c001c8fe:	e8 9d 29 00 00       	call   c001f2a0 <__udivdi3>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	83 e0 0f             	and    eax,0xf
c001c909:	89 c6                	mov    esi,eax
c001c90b:	eb 07                	jmp    c001c914 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c90d:	31 f6                	xor    esi,esi
c001c90f:	bf 02 00 00 00       	mov    edi,0x2
c001c914:	50                   	push   eax
c001c915:	6a 00                	push   0x0
c001c917:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c91e:	50                   	push   eax
c001c91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c923:	e8 b6 f1 ff ff       	call   c001bade <IDE::enableIRQs(unsigned char, bool)>
c001c928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c92b:	e8 a6 fe ff ff       	call   c001c7d6 <ATA::readyForCommand()>
c001c930:	83 c4 10             	add    esp,0x10
c001c933:	84 c0                	test   al,al
c001c935:	75 0a                	jne    c001c941 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c937:	be 01 00 00 00       	mov    esi,0x1
c001c93c:	e9 9b 02 00 00       	jmp    c001cbdc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c941:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c947:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c94d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c954:	c1 e0 04             	shl    eax,0x4
c001c957:	09 c6                	or     esi,eax
c001c959:	f7 c7 03 00 00 00    	test   edi,0x3
c001c95f:	75 05                	jne    c001c966 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c961:	83 ce a0             	or     esi,0xffffffa0
c001c964:	eb 03                	jmp    c001c969 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c966:	83 ce e0             	or     esi,0xffffffe0
c001c969:	89 f0                	mov    eax,esi
c001c96b:	0f b6 f0             	movzx  esi,al
c001c96e:	56                   	push   esi
c001c96f:	6a 06                	push   0x6
c001c971:	51                   	push   ecx
c001c972:	52                   	push   edx
c001c973:	e8 58 ef ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c978:	83 c4 10             	add    esp,0x10
c001c97b:	6a 00                	push   0x0
c001c97d:	6a 01                	push   0x1
c001c97f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c986:	50                   	push   eax
c001c987:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c98d:	e8 3e ef ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c992:	89 f8                	mov    eax,edi
c001c994:	83 c4 10             	add    esp,0x10
c001c997:	0f b6 f0             	movzx  esi,al
c001c99a:	83 fe 02             	cmp    esi,0x2
c001c99d:	75 6e                	jne    c001ca0d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c99f:	6a 00                	push   0x0
c001c9a1:	6a 08                	push   0x8
c001c9a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9aa:	50                   	push   eax
c001c9ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b1:	e8 1a ef ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c9bb:	50                   	push   eax
c001c9bc:	6a 09                	push   0x9
c001c9be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9c5:	50                   	push   eax
c001c9c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9cc:	e8 ff ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d1:	83 c4 20             	add    esp,0x20
c001c9d4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c9d9:	50                   	push   eax
c001c9da:	6a 0a                	push   0xa
c001c9dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e3:	50                   	push   eax
c001c9e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ea:	e8 e1 ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ef:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c9f4:	50                   	push   eax
c001c9f5:	6a 0b                	push   0xb
c001c9f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9fe:	50                   	push   eax
c001c9ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca05:	e8 c6 ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca0a:	83 c4 20             	add    esp,0x20
c001ca0d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca12:	50                   	push   eax
c001ca13:	6a 02                	push   0x2
c001ca15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca1c:	50                   	push   eax
c001ca1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca23:	e8 a8 ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca28:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca2d:	50                   	push   eax
c001ca2e:	6a 03                	push   0x3
c001ca30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca37:	50                   	push   eax
c001ca38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca3e:	e8 8d ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca43:	83 c4 20             	add    esp,0x20
c001ca46:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca4b:	50                   	push   eax
c001ca4c:	6a 04                	push   0x4
c001ca4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca55:	50                   	push   eax
c001ca56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca5c:	e8 6f ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca66:	50                   	push   eax
c001ca67:	6a 05                	push   0x5
c001ca69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca70:	50                   	push   eax
c001ca71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca77:	e8 54 ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca7c:	83 c4 20             	add    esp,0x20
c001ca7f:	83 fe 02             	cmp    esi,0x2
c001ca82:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001ca87:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001ca8c:	85 c9                	test   ecx,ecx
c001ca8e:	74 07                	je     c001ca97 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ca90:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca95:	75 47                	jne    c001cade <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001ca97:	89 f8                	mov    eax,edi
c001ca99:	0f b6 f8             	movzx  edi,al
c001ca9c:	31 c0                	xor    eax,eax
c001ca9e:	83 ff 02             	cmp    edi,0x2
c001caa1:	0f 95 c0             	setne  al
c001caa4:	89 c6                	mov    esi,eax
c001caa6:	74 0c                	je     c001cab4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001caa8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001caad:	b8 30 00 00 00       	mov    eax,0x30
c001cab2:	75 2f                	jne    c001cae3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cab4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cab8:	83 f2 01             	xor    edx,0x1
c001cabb:	85 c9                	test   ecx,ecx
c001cabd:	74 09                	je     c001cac8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cabf:	84 d2                	test   dl,dl
c001cac1:	b8 24 00 00 00       	mov    eax,0x24
c001cac6:	75 1b                	jne    c001cae3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cac8:	85 f6                	test   esi,esi
c001caca:	0f 84 67 fe ff ff    	je     c001c937 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cad0:	84 d2                	test   dl,dl
c001cad2:	b8 20 00 00 00       	mov    eax,0x20
c001cad7:	75 0a                	jne    c001cae3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cad9:	e9 59 fe ff ff       	jmp    c001c937 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cade:	b8 34 00 00 00       	mov    eax,0x34
c001cae3:	50                   	push   eax
c001cae4:	6a 07                	push   0x7
c001cae6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caed:	50                   	push   eax
c001caee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf4:	e8 d7 ed ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cafd:	83 c4 10             	add    esp,0x10
c001cb00:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cb05:	85 f6                	test   esi,esi
c001cb07:	0f 84 b5 00 00 00    	je     c001cbc2 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cb0d:	50                   	push   eax
c001cb0e:	6a 01                	push   0x1
c001cb10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb17:	50                   	push   eax
c001cb18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb1e:	e8 91 f8 ff ff       	call   c001c3b4 <IDE::polling(unsigned char, unsigned int)>
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb2c:	0f b6 c0             	movzx  eax,al
c001cb2f:	85 c0                	test   eax,eax
c001cb31:	74 1f                	je     c001cb52 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cb33:	50                   	push   eax
c001cb34:	89 c6                	mov    esi,eax
c001cb36:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb3d:	0f b6 d2             	movzx  edx,dl
c001cb40:	50                   	push   eax
c001cb41:	52                   	push   edx
c001cb42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb48:	e8 ad f7 ff ff       	call   c001c2fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb4d:	e9 87 00 00 00       	jmp    c001cbd9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cb52:	85 ed                	test   ebp,ebp
c001cb54:	74 3b                	je     c001cb91 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cb56:	31 ff                	xor    edi,edi
c001cb58:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cb5c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cb60:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cb65:	50                   	push   eax
c001cb66:	50                   	push   eax
c001cb67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb6e:	50                   	push   eax
c001cb6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb75:	e8 44 ed ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001cb7a:	89 c2                	mov    edx,eax
c001cb7c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cb81:	66 ef                	out    dx,ax
c001cb83:	47                   	inc    edi
c001cb84:	83 c4 10             	add    esp,0x10
c001cb87:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cb8d:	75 c9                	jne    c001cb58 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cb8f:	eb 23                	jmp    c001cbb4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cb91:	51                   	push   ecx
c001cb92:	0f b6 d2             	movzx  edx,dl
c001cb95:	51                   	push   ecx
c001cb96:	52                   	push   edx
c001cb97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb9d:	e8 1c ed ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001cba2:	b9 00 01 00 00       	mov    ecx,0x100
c001cba7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbab:	89 c2                	mov    edx,eax
c001cbad:	fc                   	cld    
c001cbae:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbb1:	83 c4 10             	add    esp,0x10
c001cbb4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cbbc:	4e                   	dec    esi
c001cbbd:	e9 43 ff ff ff       	jmp    c001cb05 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cbc2:	31 f6                	xor    esi,esi
c001cbc4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbc9:	74 11                	je     c001cbdc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cbcb:	50                   	push   eax
c001cbcc:	50                   	push   eax
c001cbcd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cbd2:	50                   	push   eax
c001cbd3:	53                   	push   ebx
c001cbd4:	e8 af fb ff ff       	call   c001c788 <ATA::flush(bool)>
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	83 c4 2c             	add    esp,0x2c
c001cbdf:	89 f0                	mov    eax,esi
c001cbe1:	5b                   	pop    ebx
c001cbe2:	5e                   	pop    esi
c001cbe3:	5f                   	pop    edi
c001cbe4:	5d                   	pop    ebp
c001cbe5:	c3                   	ret    

c001cbe6 <ATA::detectCHS()>:
c001cbe6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbea:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cbf0:	c1 e0 06             	shl    eax,0x6
c001cbf3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cbf9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc03:	c7 44 24 04 b4 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022db4
c001cc0b:	e9 d1 46 ff ff       	jmp    c00112e1 <KePanic(char const*)>

c001cc10 <ATA::open(int, int, void*)>:
c001cc10:	53                   	push   ebx
c001cc11:	83 ec 08             	sub    esp,0x8
c001cc14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc20:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc26:	c1 e0 06             	shl    eax,0x6
c001cc29:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc2f:	01 d0                	add    eax,edx
c001cc31:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc38:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc3e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc45:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc4f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cc56:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc5c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc63:	75 0c                	jne    c001cc71 <ATA::open(int, int, void*)+0x61>
c001cc65:	83 ec 0c             	sub    esp,0xc
c001cc68:	53                   	push   ebx
c001cc69:	e8 78 ff ff ff       	call   c001cbe6 <ATA::detectCHS()>
c001cc6e:	83 c4 10             	add    esp,0x10
c001cc71:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc77:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc7d:	c1 e0 06             	shl    eax,0x6
c001cc80:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cc87:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cc91:	d1 e8                	shr    eax,1
c001cc93:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cc99:	6a 04                	push   0x4
c001cc9b:	6a 0c                	push   0xc
c001cc9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cca4:	50                   	push   eax
c001cca5:	52                   	push   edx
c001cca6:	e8 25 ec ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccab:	90                   	nop
c001ccac:	90                   	nop
c001ccad:	6a 00                	push   0x0
c001ccaf:	6a 0c                	push   0xc
c001ccb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccb8:	50                   	push   eax
c001ccb9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccbf:	e8 0c ec ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccc4:	83 c4 14             	add    esp,0x14
c001ccc7:	53                   	push   ebx
c001ccc8:	e8 ad fe fe ff       	call   c000cb7a <PhysicalDisk::startCache()>
c001cccd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccd0:	e8 f1 10 ff ff       	call   c000ddc6 <createPartitionsForDisk(PhysicalDisk*)>
c001ccd5:	83 c4 18             	add    esp,0x18
c001ccd8:	31 c0                	xor    eax,eax
c001ccda:	5b                   	pop    ebx
c001ccdb:	c3                   	ret    

c001ccdc <combineCharAndColour(char, unsigned char)>:
c001ccdc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cce1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cce7:	c1 e0 08             	shl    eax,0x8
c001ccea:	09 d0                	or     eax,edx
c001ccec:	c3                   	ret    

c001cced <combineColours(unsigned char, unsigned char)>:
c001cced:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ccf2:	c1 e0 04             	shl    eax,0x4
c001ccf5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001ccf9:	c3                   	ret    

c001ccfa <ATA::read(unsigned long long, int, void*)>:
c001ccfa:	55                   	push   ebp
c001ccfb:	57                   	push   edi
c001ccfc:	56                   	push   esi
c001ccfd:	be 04 00 00 00       	mov    esi,0x4
c001cd02:	53                   	push   ebx
c001cd03:	83 ec 0c             	sub    esp,0xc
c001cd06:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd12:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd16:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd19:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd1f:	0f 87 a1 01 00 00    	ja     c001cec6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd25:	85 c9                	test   ecx,ecx
c001cd27:	be 06 00 00 00       	mov    esi,0x6
c001cd2c:	0f 84 94 01 00 00    	je     c001cec6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd32:	55                   	push   ebp
c001cd33:	55                   	push   ebp
c001cd34:	6a 00                	push   0x0
c001cd36:	51                   	push   ecx
c001cd37:	53                   	push   ebx
c001cd38:	52                   	push   edx
c001cd39:	50                   	push   eax
c001cd3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd3e:	e8 df fa ff ff       	call   c001c822 <ATA::access(unsigned long long, int, void*, bool)>
c001cd43:	83 c4 20             	add    esp,0x20
c001cd46:	85 c0                	test   eax,eax
c001cd48:	89 c6                	mov    esi,eax
c001cd4a:	0f 85 71 01 00 00    	jne    c001cec1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cd50:	50                   	push   eax
c001cd51:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd56:	50                   	push   eax
c001cd57:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cd5d:	6a 0f                	push   0xf
c001cd5f:	6a 00                	push   0x0
c001cd61:	89 da                	mov    edx,ebx
c001cd63:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cd69:	e8 7f ff ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001cd6e:	59                   	pop    ecx
c001cd6f:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd74:	5b                   	pop    ebx
c001cd75:	0f b6 d8             	movzx  ebx,al
c001cd78:	89 d0                	mov    eax,edx
c001cd7a:	53                   	push   ebx
c001cd7b:	99                   	cdq    
c001cd7c:	f7 fd                	idiv   ebp
c001cd7e:	99                   	cdq    
c001cd7f:	f7 f9                	idiv   ecx
c001cd81:	83 c2 30             	add    edx,0x30
c001cd84:	0f b6 d2             	movzx  edx,dl
c001cd87:	52                   	push   edx
c001cd88:	e8 4f ff ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cd8d:	5f                   	pop    edi
c001cd8e:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd93:	5a                   	pop    edx
c001cd94:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd9a:	53                   	push   ebx
c001cd9b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cda0:	99                   	cdq    
c001cda1:	f7 ff                	idiv   edi
c001cda3:	99                   	cdq    
c001cda4:	f7 f9                	idiv   ecx
c001cda6:	8d 42 30             	lea    eax,[edx+0x30]
c001cda9:	0f b6 c0             	movzx  eax,al
c001cdac:	50                   	push   eax
c001cdad:	e8 2a ff ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cdb2:	5f                   	pop    edi
c001cdb3:	bf 64 00 00 00       	mov    edi,0x64
c001cdb8:	5a                   	pop    edx
c001cdb9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cdbf:	53                   	push   ebx
c001cdc0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdc5:	99                   	cdq    
c001cdc6:	f7 ff                	idiv   edi
c001cdc8:	99                   	cdq    
c001cdc9:	f7 f9                	idiv   ecx
c001cdcb:	8d 42 30             	lea    eax,[edx+0x30]
c001cdce:	0f b6 c0             	movzx  eax,al
c001cdd1:	50                   	push   eax
c001cdd2:	e8 05 ff ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cdd7:	5a                   	pop    edx
c001cdd8:	5a                   	pop    edx
c001cdd9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cddf:	53                   	push   ebx
c001cde0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cde5:	99                   	cdq    
c001cde6:	f7 f9                	idiv   ecx
c001cde8:	99                   	cdq    
c001cde9:	f7 f9                	idiv   ecx
c001cdeb:	8d 42 30             	lea    eax,[edx+0x30]
c001cdee:	0f b6 c0             	movzx  eax,al
c001cdf1:	50                   	push   eax
c001cdf2:	e8 e5 fe ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cdf7:	5a                   	pop    edx
c001cdf8:	5a                   	pop    edx
c001cdf9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cdff:	53                   	push   ebx
c001ce00:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce05:	99                   	cdq    
c001ce06:	f7 f9                	idiv   ecx
c001ce08:	83 c2 30             	add    edx,0x30
c001ce0b:	0f b6 d2             	movzx  edx,dl
c001ce0e:	52                   	push   edx
c001ce0f:	e8 c8 fe ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ce14:	5a                   	pop    edx
c001ce15:	5a                   	pop    edx
c001ce16:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce1c:	53                   	push   ebx
c001ce1d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce22:	99                   	cdq    
c001ce23:	f7 fd                	idiv   ebp
c001ce25:	99                   	cdq    
c001ce26:	f7 f9                	idiv   ecx
c001ce28:	8d 42 30             	lea    eax,[edx+0x30]
c001ce2b:	0f b6 c0             	movzx  eax,al
c001ce2e:	50                   	push   eax
c001ce2f:	e8 a8 fe ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ce34:	5d                   	pop    ebp
c001ce35:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce3a:	5a                   	pop    edx
c001ce3b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce41:	53                   	push   ebx
c001ce42:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce47:	99                   	cdq    
c001ce48:	f7 fd                	idiv   ebp
c001ce4a:	99                   	cdq    
c001ce4b:	f7 f9                	idiv   ecx
c001ce4d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce50:	0f b6 c0             	movzx  eax,al
c001ce53:	50                   	push   eax
c001ce54:	e8 83 fe ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ce59:	5d                   	pop    ebp
c001ce5a:	5a                   	pop    edx
c001ce5b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce61:	53                   	push   ebx
c001ce62:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce67:	99                   	cdq    
c001ce68:	f7 ff                	idiv   edi
c001ce6a:	99                   	cdq    
c001ce6b:	f7 f9                	idiv   ecx
c001ce6d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce70:	0f b6 c0             	movzx  eax,al
c001ce73:	50                   	push   eax
c001ce74:	e8 63 fe ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ce79:	5f                   	pop    edi
c001ce7a:	5d                   	pop    ebp
c001ce7b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ce81:	53                   	push   ebx
c001ce82:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce87:	99                   	cdq    
c001ce88:	f7 f9                	idiv   ecx
c001ce8a:	99                   	cdq    
c001ce8b:	f7 f9                	idiv   ecx
c001ce8d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce90:	0f b6 c0             	movzx  eax,al
c001ce93:	50                   	push   eax
c001ce94:	e8 43 fe ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ce99:	5a                   	pop    edx
c001ce9a:	5f                   	pop    edi
c001ce9b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cea1:	53                   	push   ebx
c001cea2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cea7:	99                   	cdq    
c001cea8:	f7 f9                	idiv   ecx
c001ceaa:	83 c2 30             	add    edx,0x30
c001cead:	0f b6 d2             	movzx  edx,dl
c001ceb0:	52                   	push   edx
c001ceb1:	e8 26 fe ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ceb6:	83 c4 10             	add    esp,0x10
c001ceb9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cebf:	eb 05                	jmp    c001cec6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cec1:	be 01 00 00 00       	mov    esi,0x1
c001cec6:	83 c4 0c             	add    esp,0xc
c001cec9:	89 f0                	mov    eax,esi
c001cecb:	5b                   	pop    ebx
c001cecc:	5e                   	pop    esi
c001cecd:	5f                   	pop    edi
c001cece:	5d                   	pop    ebp
c001cecf:	c3                   	ret    

c001ced0 <ATA::write(unsigned long long, int, void*)>:
c001ced0:	55                   	push   ebp
c001ced1:	57                   	push   edi
c001ced2:	56                   	push   esi
c001ced3:	be 04 00 00 00       	mov    esi,0x4
c001ced8:	53                   	push   ebx
c001ced9:	83 ec 0c             	sub    esp,0xc
c001cedc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cee4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cee8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ceec:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ceef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cef5:	0f 87 9c 01 00 00    	ja     c001d097 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cefb:	85 c9                	test   ecx,ecx
c001cefd:	be 06 00 00 00       	mov    esi,0x6
c001cf02:	0f 84 8f 01 00 00    	je     c001d097 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf08:	55                   	push   ebp
c001cf09:	55                   	push   ebp
c001cf0a:	6a 01                	push   0x1
c001cf0c:	51                   	push   ecx
c001cf0d:	53                   	push   ebx
c001cf0e:	52                   	push   edx
c001cf0f:	50                   	push   eax
c001cf10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf14:	e8 09 f9 ff ff       	call   c001c822 <ATA::access(unsigned long long, int, void*, bool)>
c001cf19:	83 c4 20             	add    esp,0x20
c001cf1c:	85 c0                	test   eax,eax
c001cf1e:	89 c6                	mov    esi,eax
c001cf20:	0f 85 6c 01 00 00    	jne    c001d092 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cf26:	50                   	push   eax
c001cf27:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf2c:	50                   	push   eax
c001cf2d:	6a 0f                	push   0xf
c001cf2f:	6a 00                	push   0x0
c001cf31:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cf37:	e8 b1 fd ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001cf3c:	5a                   	pop    edx
c001cf3d:	59                   	pop    ecx
c001cf3e:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf43:	0f b6 d8             	movzx  ebx,al
c001cf46:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf4b:	53                   	push   ebx
c001cf4c:	99                   	cdq    
c001cf4d:	f7 fd                	idiv   ebp
c001cf4f:	99                   	cdq    
c001cf50:	f7 f9                	idiv   ecx
c001cf52:	8d 42 30             	lea    eax,[edx+0x30]
c001cf55:	0f b6 c0             	movzx  eax,al
c001cf58:	50                   	push   eax
c001cf59:	e8 7e fd ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cf5e:	5f                   	pop    edi
c001cf5f:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf64:	5a                   	pop    edx
c001cf65:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf6b:	53                   	push   ebx
c001cf6c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf71:	99                   	cdq    
c001cf72:	f7 ff                	idiv   edi
c001cf74:	99                   	cdq    
c001cf75:	f7 f9                	idiv   ecx
c001cf77:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7a:	0f b6 c0             	movzx  eax,al
c001cf7d:	50                   	push   eax
c001cf7e:	e8 59 fd ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cf83:	5f                   	pop    edi
c001cf84:	bf 64 00 00 00       	mov    edi,0x64
c001cf89:	5a                   	pop    edx
c001cf8a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf90:	53                   	push   ebx
c001cf91:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf96:	99                   	cdq    
c001cf97:	f7 ff                	idiv   edi
c001cf99:	99                   	cdq    
c001cf9a:	f7 f9                	idiv   ecx
c001cf9c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf9f:	0f b6 c0             	movzx  eax,al
c001cfa2:	50                   	push   eax
c001cfa3:	e8 34 fd ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cfa8:	5a                   	pop    edx
c001cfa9:	5a                   	pop    edx
c001cfaa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cfb0:	53                   	push   ebx
c001cfb1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfb6:	99                   	cdq    
c001cfb7:	f7 f9                	idiv   ecx
c001cfb9:	99                   	cdq    
c001cfba:	f7 f9                	idiv   ecx
c001cfbc:	8d 42 30             	lea    eax,[edx+0x30]
c001cfbf:	0f b6 c0             	movzx  eax,al
c001cfc2:	50                   	push   eax
c001cfc3:	e8 14 fd ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cfc8:	5a                   	pop    edx
c001cfc9:	5a                   	pop    edx
c001cfca:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cfd0:	53                   	push   ebx
c001cfd1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfd6:	99                   	cdq    
c001cfd7:	f7 f9                	idiv   ecx
c001cfd9:	83 c2 30             	add    edx,0x30
c001cfdc:	0f b6 d2             	movzx  edx,dl
c001cfdf:	52                   	push   edx
c001cfe0:	e8 f7 fc ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001cfe5:	5a                   	pop    edx
c001cfe6:	5a                   	pop    edx
c001cfe7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cfed:	53                   	push   ebx
c001cfee:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cff3:	99                   	cdq    
c001cff4:	f7 fd                	idiv   ebp
c001cff6:	99                   	cdq    
c001cff7:	f7 f9                	idiv   ecx
c001cff9:	8d 42 30             	lea    eax,[edx+0x30]
c001cffc:	0f b6 c0             	movzx  eax,al
c001cfff:	50                   	push   eax
c001d000:	e8 d7 fc ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001d005:	5d                   	pop    ebp
c001d006:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d00b:	5a                   	pop    edx
c001d00c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d012:	53                   	push   ebx
c001d013:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d018:	99                   	cdq    
c001d019:	f7 fd                	idiv   ebp
c001d01b:	99                   	cdq    
c001d01c:	f7 f9                	idiv   ecx
c001d01e:	8d 42 30             	lea    eax,[edx+0x30]
c001d021:	0f b6 c0             	movzx  eax,al
c001d024:	50                   	push   eax
c001d025:	e8 b2 fc ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001d02a:	5d                   	pop    ebp
c001d02b:	5a                   	pop    edx
c001d02c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d032:	53                   	push   ebx
c001d033:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d038:	99                   	cdq    
c001d039:	f7 ff                	idiv   edi
c001d03b:	99                   	cdq    
c001d03c:	f7 f9                	idiv   ecx
c001d03e:	8d 42 30             	lea    eax,[edx+0x30]
c001d041:	0f b6 c0             	movzx  eax,al
c001d044:	50                   	push   eax
c001d045:	e8 92 fc ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001d04a:	5f                   	pop    edi
c001d04b:	5d                   	pop    ebp
c001d04c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d052:	53                   	push   ebx
c001d053:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d058:	99                   	cdq    
c001d059:	f7 f9                	idiv   ecx
c001d05b:	99                   	cdq    
c001d05c:	f7 f9                	idiv   ecx
c001d05e:	8d 42 30             	lea    eax,[edx+0x30]
c001d061:	0f b6 c0             	movzx  eax,al
c001d064:	50                   	push   eax
c001d065:	e8 72 fc ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001d06a:	5a                   	pop    edx
c001d06b:	5f                   	pop    edi
c001d06c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d072:	53                   	push   ebx
c001d073:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d078:	99                   	cdq    
c001d079:	f7 f9                	idiv   ecx
c001d07b:	83 c2 30             	add    edx,0x30
c001d07e:	0f b6 d2             	movzx  edx,dl
c001d081:	52                   	push   edx
c001d082:	e8 55 fc ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001d087:	83 c4 10             	add    esp,0x10
c001d08a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d090:	eb 05                	jmp    c001d097 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d092:	be 01 00 00 00       	mov    esi,0x1
c001d097:	83 c4 0c             	add    esp,0xc
c001d09a:	89 f0                	mov    eax,esi
c001d09c:	5b                   	pop    ebx
c001d09d:	5e                   	pop    esi
c001d09e:	5f                   	pop    edi
c001d09f:	5d                   	pop    ebp
c001d0a0:	c3                   	ret    
c001d0a1:	90                   	nop

c001d0a2 <ATAPI::write(unsigned long long, int, void*)>:
c001d0a2:	b8 03 00 00 00       	mov    eax,0x3
c001d0a7:	c3                   	ret    

c001d0a8 <ATAPI::close(int, int, void*)>:
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0b5:	85 c0                	test   eax,eax
c001d0b7:	74 0c                	je     c001d0c5 <ATAPI::close(int, int, void*)+0x1d>
c001d0b9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0bb:	83 ec 0c             	sub    esp,0xc
c001d0be:	50                   	push   eax
c001d0bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d0c2:	83 c4 10             	add    esp,0x10
c001d0c5:	31 c0                	xor    eax,eax
c001d0c7:	83 c4 0c             	add    esp,0xc
c001d0ca:	c3                   	ret    
c001d0cb:	90                   	nop

c001d0cc <ATAPI::ATAPI()>:
c001d0cc:	83 ec 0c             	sub    esp,0xc
c001d0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d3:	83 ec 04             	sub    esp,0x4
c001d0d6:	68 00 08 00 00       	push   0x800
c001d0db:	68 fd 2e 02 c0       	push   0xc0022efd
c001d0e0:	50                   	push   eax
c001d0e1:	e8 2c fa fe ff       	call   c000cb12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d0e6:	83 c4 10             	add    esp,0x10
c001d0e9:	ba 18 2e 02 c0       	mov    edx,0xc0022e18
c001d0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f2:	89 10                	mov    DWORD PTR [eax],edx
c001d0f4:	90                   	nop
c001d0f5:	83 c4 0c             	add    esp,0xc
c001d0f8:	c3                   	ret    
c001d0f9:	90                   	nop

c001d0fa <ATAPI::readyForCommand()>:
c001d0fa:	56                   	push   esi
c001d0fb:	53                   	push   ebx
c001d0fc:	53                   	push   ebx
c001d0fd:	31 db                	xor    ebx,ebx
c001d0ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d103:	51                   	push   ecx
c001d104:	6a 0c                	push   0xc
c001d106:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d10d:	50                   	push   eax
c001d10e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d114:	e8 77 e8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001d119:	83 c4 10             	add    esp,0x10
c001d11c:	a8 88                	test   al,0x88
c001d11e:	74 25                	je     c001d145 <ATAPI::readyForCommand()+0x4b>
c001d120:	43                   	inc    ebx
c001d121:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d127:	7e da                	jle    c001d103 <ATAPI::readyForCommand()+0x9>
c001d129:	83 ec 0c             	sub    esp,0xc
c001d12c:	68 5e 01 00 00       	push   0x15e
c001d131:	e8 c6 8d ff ff       	call   c0015efc <milliTenthSleep(unsigned int)>
c001d136:	83 c4 10             	add    esp,0x10
c001d139:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d13f:	75 c2                	jne    c001d103 <ATAPI::readyForCommand()+0x9>
c001d141:	31 c0                	xor    eax,eax
c001d143:	eb 02                	jmp    c001d147 <ATAPI::readyForCommand()+0x4d>
c001d145:	b0 01                	mov    al,0x1
c001d147:	5a                   	pop    edx
c001d148:	5b                   	pop    ebx
c001d149:	5e                   	pop    esi
c001d14a:	c3                   	ret    
c001d14b:	90                   	nop

c001d14c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d14c:	55                   	push   ebp
c001d14d:	57                   	push   edi
c001d14e:	56                   	push   esi
c001d14f:	53                   	push   ebx
c001d150:	83 ec 20             	sub    esp,0x20
c001d153:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d157:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d15b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d15f:	6a 01                	push   0x1
c001d161:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d168:	50                   	push   eax
c001d169:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d16f:	e8 6a e9 ff ff       	call   c001bade <IDE::enableIRQs(unsigned char, bool)>
c001d174:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d17b:	59                   	pop    ecx
c001d17c:	5e                   	pop    esi
c001d17d:	50                   	push   eax
c001d17e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d184:	e8 21 e7 ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001d189:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d18c:	e8 69 ff ff ff       	call   c001d0fa <ATAPI::readyForCommand()>
c001d191:	83 c4 10             	add    esp,0x10
c001d194:	84 c0                	test   al,al
c001d196:	75 0a                	jne    c001d1a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d198:	bb 01 00 00 00       	mov    ebx,0x1
c001d19d:	e9 5f 02 00 00       	jmp    c001d401 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d1a2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d1a8:	c1 e0 04             	shl    eax,0x4
c001d1ab:	0f b6 c0             	movzx  eax,al
c001d1ae:	50                   	push   eax
c001d1af:	6a 06                	push   0x6
c001d1b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1b8:	50                   	push   eax
c001d1b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1bf:	e8 0c e7 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1c4:	6a 00                	push   0x0
c001d1c6:	6a 01                	push   0x1
c001d1c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1cf:	50                   	push   eax
c001d1d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1d6:	e8 f5 e6 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1db:	83 c4 20             	add    esp,0x20
c001d1de:	0f b6 c3             	movzx  eax,bl
c001d1e1:	50                   	push   eax
c001d1e2:	0f b6 df             	movzx  ebx,bh
c001d1e5:	6a 04                	push   0x4
c001d1e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ee:	50                   	push   eax
c001d1ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f5:	e8 d6 e6 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1fa:	53                   	push   ebx
c001d1fb:	6a 05                	push   0x5
c001d1fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d204:	50                   	push   eax
c001d205:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d20b:	e8 c0 e6 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d210:	83 c4 20             	add    esp,0x20
c001d213:	68 a0 00 00 00       	push   0xa0
c001d218:	6a 07                	push   0x7
c001d21a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d221:	50                   	push   eax
c001d222:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d228:	e8 a3 e6 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d22d:	83 c4 0c             	add    esp,0xc
c001d230:	6a 01                	push   0x1
c001d232:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d239:	50                   	push   eax
c001d23a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d240:	e8 6f f1 ff ff       	call   c001c3b4 <IDE::polling(unsigned char, unsigned int)>
c001d245:	83 c4 10             	add    esp,0x10
c001d248:	0f b6 d8             	movzx  ebx,al
c001d24b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d251:	85 db                	test   ebx,ebx
c001d253:	74 20                	je     c001d275 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d255:	53                   	push   ebx
c001d256:	0f b6 c0             	movzx  eax,al
c001d259:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d260:	52                   	push   edx
c001d261:	50                   	push   eax
c001d262:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d268:	e8 8d f0 ff ff       	call   c001c2fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d26d:	83 c4 10             	add    esp,0x10
c001d270:	e9 8c 01 00 00       	jmp    c001d401 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d275:	52                   	push   edx
c001d276:	0f b6 c0             	movzx  eax,al
c001d279:	52                   	push   edx
c001d27a:	50                   	push   eax
c001d27b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d281:	e8 38 e6 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d286:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d28a:	b9 06 00 00 00       	mov    ecx,0x6
c001d28f:	89 c2                	mov    edx,eax
c001d291:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d294:	89 e8                	mov    eax,ebp
c001d296:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d29a:	83 c4 10             	add    esp,0x10
c001d29d:	0f b6 c0             	movzx  eax,al
c001d2a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2a4:	85 db                	test   ebx,ebx
c001d2a6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2ac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2b3:	0f 84 eb 00 00 00    	je     c001d3a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d2b9:	55                   	push   ebp
c001d2ba:	55                   	push   ebp
c001d2bb:	52                   	push   edx
c001d2bc:	50                   	push   eax
c001d2bd:	e8 82 e7 ff ff       	call   c001ba44 <IDE::waitInterrupt(unsigned char)>
c001d2c2:	83 c4 10             	add    esp,0x10
c001d2c5:	84 c0                	test   al,al
c001d2c7:	0f 84 cb fe ff ff    	je     c001d198 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d2cd:	56                   	push   esi
c001d2ce:	56                   	push   esi
c001d2cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2d6:	50                   	push   eax
c001d2d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2dd:	e8 c8 e5 ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001d2e2:	83 c4 0c             	add    esp,0xc
c001d2e5:	6a 04                	push   0x4
c001d2e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2ee:	50                   	push   eax
c001d2ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2f5:	e8 96 e6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001d2fa:	83 c4 0c             	add    esp,0xc
c001d2fd:	6a 05                	push   0x5
c001d2ff:	89 c6                	mov    esi,eax
c001d301:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d308:	50                   	push   eax
c001d309:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d30f:	e8 7c e6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001d314:	83 c4 10             	add    esp,0x10
c001d317:	0f b6 e8             	movzx  ebp,al
c001d31a:	89 f0                	mov    eax,esi
c001d31c:	c1 e5 08             	shl    ebp,0x8
c001d31f:	0f b6 f0             	movzx  esi,al
c001d322:	09 f5                	or     ebp,esi
c001d324:	31 f6                	xor    esi,esi
c001d326:	d1 fd                	sar    ebp,1
c001d328:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d32d:	74 5c                	je     c001d38b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d32f:	39 ee                	cmp    esi,ebp
c001d331:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d337:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d33e:	75 0d                	jne    c001d34d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d340:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d343:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d347:	4b                   	dec    ebx
c001d348:	e9 57 ff ff ff       	jmp    c001d2a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d34d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d351:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d355:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d35a:	51                   	push   ecx
c001d35b:	51                   	push   ecx
c001d35c:	52                   	push   edx
c001d35d:	50                   	push   eax
c001d35e:	e8 5b e5 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d363:	89 c2                	mov    edx,eax
c001d365:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d36a:	66 ef                	out    dx,ax
c001d36c:	46                   	inc    esi
c001d36d:	83 c4 10             	add    esp,0x10
c001d370:	eb bd                	jmp    c001d32f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d372:	51                   	push   ecx
c001d373:	51                   	push   ecx
c001d374:	52                   	push   edx
c001d375:	50                   	push   eax
c001d376:	e8 43 e5 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d37b:	89 c2                	mov    edx,eax
c001d37d:	66 ed                	in     ax,dx
c001d37f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d383:	83 c4 10             	add    esp,0x10
c001d386:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d38a:	46                   	inc    esi
c001d38b:	39 ee                	cmp    esi,ebp
c001d38d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d393:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d39a:	75 d6                	jne    c001d372 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d39c:	01 f6                	add    esi,esi
c001d39e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d3a2:	eb a3                	jmp    c001d347 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d3a4:	51                   	push   ecx
c001d3a5:	51                   	push   ecx
c001d3a6:	52                   	push   edx
c001d3a7:	50                   	push   eax
c001d3a8:	e8 97 e6 ff ff       	call   c001ba44 <IDE::waitInterrupt(unsigned char)>
c001d3ad:	83 c4 10             	add    esp,0x10
c001d3b0:	84 c0                	test   al,al
c001d3b2:	0f 84 e0 fd ff ff    	je     c001d198 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d3b8:	52                   	push   edx
c001d3b9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d3be:	52                   	push   edx
c001d3bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3c6:	50                   	push   eax
c001d3c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3cd:	e8 d8 e4 ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	50                   	push   eax
c001d3d6:	50                   	push   eax
c001d3d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3de:	50                   	push   eax
c001d3df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3e5:	e8 d4 e4 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d3ea:	8d 50 07             	lea    edx,[eax+0x7]
c001d3ed:	ec                   	in     al,dx
c001d3ee:	83 c4 10             	add    esp,0x10
c001d3f1:	a8 88                	test   al,0x88
c001d3f3:	74 0a                	je     c001d3ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d3f5:	4b                   	dec    ebx
c001d3f6:	75 dd                	jne    c001d3d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d3f8:	bb 02 00 00 00       	mov    ebx,0x2
c001d3fd:	eb 02                	jmp    c001d401 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d3ff:	31 db                	xor    ebx,ebx
c001d401:	83 c4 1c             	add    esp,0x1c
c001d404:	89 d8                	mov    eax,ebx
c001d406:	5b                   	pop    ebx
c001d407:	5e                   	pop    esi
c001d408:	5f                   	pop    edi
c001d409:	5d                   	pop    ebp
c001d40a:	c3                   	ret    
c001d40b:	90                   	nop

c001d40c <ATAPI::diskRemoved()>:
c001d40c:	53                   	push   ebx
c001d40d:	83 ec 14             	sub    esp,0x14
c001d410:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d414:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d41b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d421:	e8 8e 06 ff ff       	call   c000dab4 <LogicalDisk::unmount()>
c001d426:	58                   	pop    eax
c001d427:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d42d:	e8 66 10 ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c001d432:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d438:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d43c:	83 c4 18             	add    esp,0x18
c001d43f:	5b                   	pop    ebx
c001d440:	e9 43 10 ff ff       	jmp    c000e488 <VCache::invalidateReadBuffer()>
c001d445:	90                   	nop

c001d446 <ATAPI::eject()>:
c001d446:	57                   	push   edi
c001d447:	b9 03 00 00 00       	mov    ecx,0x3
c001d44c:	53                   	push   ebx
c001d44d:	83 ec 14             	sub    esp,0x14
c001d450:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d454:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d458:	fc                   	cld    
c001d459:	31 c0                	xor    eax,eax
c001d45b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d45d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d462:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d467:	50                   	push   eax
c001d468:	50                   	push   eax
c001d469:	6a 00                	push   0x0
c001d46b:	6a 00                	push   0x0
c001d46d:	6a 00                	push   0x0
c001d46f:	6a 02                	push   0x2
c001d471:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d475:	50                   	push   eax
c001d476:	53                   	push   ebx
c001d477:	e8 d0 fc ff ff       	call   c001d14c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d47c:	83 c4 14             	add    esp,0x14
c001d47f:	53                   	push   ebx
c001d480:	e8 87 ff ff ff       	call   c001d40c <ATAPI::diskRemoved()>
c001d485:	83 c4 24             	add    esp,0x24
c001d488:	31 c0                	xor    eax,eax
c001d48a:	5b                   	pop    ebx
c001d48b:	5f                   	pop    edi
c001d48c:	c3                   	ret    
c001d48d:	90                   	nop

c001d48e <ATAPI::diskInserted()>:
c001d48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d492:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d499:	c3                   	ret    

c001d49a <ATAPI::detectMedia()>:
c001d49a:	56                   	push   esi
c001d49b:	53                   	push   ebx
c001d49c:	83 ec 28             	sub    esp,0x28
c001d49f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4a3:	6a 0c                	push   0xc
c001d4a5:	6a 00                	push   0x0
c001d4a7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d4ab:	56                   	push   esi
c001d4ac:	e8 3f 30 fe ff       	call   c00004f0 <memset>
c001d4b1:	58                   	pop    eax
c001d4b2:	5a                   	pop    edx
c001d4b3:	6a 00                	push   0x0
c001d4b5:	6a 00                	push   0x0
c001d4b7:	6a 00                	push   0x0
c001d4b9:	6a 00                	push   0x0
c001d4bb:	56                   	push   esi
c001d4bc:	53                   	push   ebx
c001d4bd:	e8 8a fc ff ff       	call   c001d14c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4c2:	83 c4 1c             	add    esp,0x1c
c001d4c5:	6a 0c                	push   0xc
c001d4c7:	6a 00                	push   0x0
c001d4c9:	56                   	push   esi
c001d4ca:	e8 21 30 fe ff       	call   c00004f0 <memset>
c001d4cf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d4d4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d4d9:	59                   	pop    ecx
c001d4da:	58                   	pop    eax
c001d4db:	6a 01                	push   0x1
c001d4dd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d4e1:	50                   	push   eax
c001d4e2:	6a 00                	push   0x0
c001d4e4:	6a 12                	push   0x12
c001d4e6:	56                   	push   esi
c001d4e7:	53                   	push   ebx
c001d4e8:	e8 5f fc ff ff       	call   c001d14c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4ed:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d4f1:	83 c4 20             	add    esp,0x20
c001d4f4:	83 e0 7f             	and    eax,0x7f
c001d4f7:	83 f8 70             	cmp    eax,0x70
c001d4fa:	74 15                	je     c001d511 <ATAPI::detectMedia()+0x77>
c001d4fc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d503:	75 0c                	jne    c001d511 <ATAPI::detectMedia()+0x77>
c001d505:	83 ec 0c             	sub    esp,0xc
c001d508:	53                   	push   ebx
c001d509:	e8 80 ff ff ff       	call   c001d48e <ATAPI::diskInserted()>
c001d50e:	83 c4 10             	add    esp,0x10
c001d511:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d515:	83 e0 0f             	and    eax,0xf
c001d518:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d51d:	0f b6 c0             	movzx  eax,al
c001d520:	75 19                	jne    c001d53b <ATAPI::detectMedia()+0xa1>
c001d522:	83 f8 02             	cmp    eax,0x2
c001d525:	75 14                	jne    c001d53b <ATAPI::detectMedia()+0xa1>
c001d527:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d52e:	74 24                	je     c001d554 <ATAPI::detectMedia()+0xba>
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	53                   	push   ebx
c001d534:	e8 d3 fe ff ff       	call   c001d40c <ATAPI::diskRemoved()>
c001d539:	eb 16                	jmp    c001d551 <ATAPI::detectMedia()+0xb7>
c001d53b:	85 c0                	test   eax,eax
c001d53d:	75 15                	jne    c001d554 <ATAPI::detectMedia()+0xba>
c001d53f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d546:	75 0c                	jne    c001d554 <ATAPI::detectMedia()+0xba>
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	53                   	push   ebx
c001d54c:	e8 3d ff ff ff       	call   c001d48e <ATAPI::diskInserted()>
c001d551:	83 c4 10             	add    esp,0x10
c001d554:	83 c4 24             	add    esp,0x24
c001d557:	5b                   	pop    ebx
c001d558:	5e                   	pop    esi
c001d559:	c3                   	ret    

c001d55a <ATAPI::open(int, int, void*)>:
c001d55a:	56                   	push   esi
c001d55b:	53                   	push   ebx
c001d55c:	50                   	push   eax
c001d55d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d561:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d565:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d569:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d56f:	c1 e0 06             	shl    eax,0x6
c001d572:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d578:	01 d0                	add    eax,edx
c001d57a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d581:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d587:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d58e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d598:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d59f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5a5:	6a 04                	push   0x4
c001d5a7:	6a 0c                	push   0xc
c001d5a9:	51                   	push   ecx
c001d5aa:	52                   	push   edx
c001d5ab:	e8 20 e3 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5b0:	90                   	nop
c001d5b1:	90                   	nop
c001d5b2:	6a 00                	push   0x0
c001d5b4:	6a 0c                	push   0xc
c001d5b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5bd:	50                   	push   eax
c001d5be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5c4:	e8 07 e3 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5c9:	83 c4 14             	add    esp,0x14
c001d5cc:	68 78 01 00 00       	push   0x178
c001d5d1:	e8 fd a4 fe ff       	call   c0007ad3 <malloc>
c001d5d6:	83 c4 0c             	add    esp,0xc
c001d5d9:	6a 00                	push   0x0
c001d5db:	68 ff ff ff 7f       	push   0x7fffffff
c001d5e0:	6a 00                	push   0x0
c001d5e2:	6a 00                	push   0x0
c001d5e4:	53                   	push   ebx
c001d5e5:	68 af 2f 02 c0       	push   0xc0022faf
c001d5ea:	89 c6                	mov    esi,eax
c001d5ec:	50                   	push   eax
c001d5ed:	e8 00 03 ff ff       	call   c000d8f2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d5f2:	83 c4 14             	add    esp,0x14
c001d5f5:	56                   	push   esi
c001d5f6:	e8 b7 03 ff ff       	call   c000d9b2 <LogicalDisk::assignDriveLetter()>
c001d5fb:	5a                   	pop    edx
c001d5fc:	59                   	pop    ecx
c001d5fd:	0f be c0             	movsx  eax,al
c001d600:	50                   	push   eax
c001d601:	68 00 2e 02 c0       	push   0xc0022e00
c001d606:	e8 ff d2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d60b:	58                   	pop    eax
c001d60c:	5a                   	pop    edx
c001d60d:	56                   	push   esi
c001d60e:	53                   	push   ebx
c001d60f:	e8 30 f1 fe ff       	call   c000c744 <Device::addChild(Device*)>
c001d614:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d61a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d61d:	e8 58 f5 fe ff       	call   c000cb7a <PhysicalDisk::startCache()>
c001d622:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d62c:	e8 69 fe ff ff       	call   c001d49a <ATAPI::detectMedia()>
c001d631:	83 c4 14             	add    esp,0x14
c001d634:	31 c0                	xor    eax,eax
c001d636:	5b                   	pop    ebx
c001d637:	5e                   	pop    esi
c001d638:	c3                   	ret    
c001d639:	90                   	nop

c001d63a <ATAPI::read(unsigned long long, int, void*)>:
c001d63a:	55                   	push   ebp
c001d63b:	57                   	push   edi
c001d63c:	56                   	push   esi
c001d63d:	53                   	push   ebx
c001d63e:	83 ec 1c             	sub    esp,0x1c
c001d641:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d645:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d649:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d64d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d654:	74 3c                	je     c001d692 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d656:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d65a:	b9 03 00 00 00       	mov    ecx,0x3
c001d65f:	fc                   	cld    
c001d660:	31 c0                	xor    eax,eax
c001d662:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d664:	89 e8                	mov    eax,ebp
c001d666:	0f ce                	bswap  esi
c001d668:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d66c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d671:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d675:	50                   	push   eax
c001d676:	50                   	push   eax
c001d677:	55                   	push   ebp
c001d678:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d67c:	c1 e5 0b             	shl    ebp,0xb
c001d67f:	6a 00                	push   0x0
c001d681:	55                   	push   ebp
c001d682:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d686:	50                   	push   eax
c001d687:	53                   	push   ebx
c001d688:	e8 bf fa ff ff       	call   c001d14c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d68d:	83 c4 20             	add    esp,0x20
c001d690:	eb 1a                	jmp    c001d6ac <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d692:	83 ec 0c             	sub    esp,0xc
c001d695:	53                   	push   ebx
c001d696:	e8 ff fd ff ff       	call   c001d49a <ATAPI::detectMedia()>
c001d69b:	83 c4 10             	add    esp,0x10
c001d69e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6a5:	75 af                	jne    c001d656 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d6a7:	b8 02 00 00 00       	mov    eax,0x2
c001d6ac:	83 c4 1c             	add    esp,0x1c
c001d6af:	5b                   	pop    ebx
c001d6b0:	5e                   	pop    esi
c001d6b1:	5f                   	pop    edi
c001d6b2:	5d                   	pop    ebp
c001d6b3:	c3                   	ret    

c001d6b4 <SATA::close(int, int, void*)>:
c001d6b4:	83 ec 0c             	sub    esp,0xc
c001d6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d6c1:	85 c0                	test   eax,eax
c001d6c3:	74 0c                	je     c001d6d1 <SATA::close(int, int, void*)+0x1d>
c001d6c5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d6c7:	83 ec 0c             	sub    esp,0xc
c001d6ca:	50                   	push   eax
c001d6cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d6ce:	83 c4 10             	add    esp,0x10
c001d6d1:	31 c0                	xor    eax,eax
c001d6d3:	83 c4 0c             	add    esp,0xc
c001d6d6:	c3                   	ret    
c001d6d7:	90                   	nop

c001d6d8 <SATA::powerSaving(PowerSavingLevel)>:
c001d6d8:	c3                   	ret    
c001d6d9:	90                   	nop

c001d6da <SATA::open(int, int, void*)>:
c001d6da:	56                   	push   esi
c001d6db:	53                   	push   ebx
c001d6dc:	50                   	push   eax
c001d6dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6e5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d6ef:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d6f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6f9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d703:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d70d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d714:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d71a:	e8 c3 a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d71f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d725:	89 c6                	mov    esi,eax
c001d727:	e8 b6 a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d72c:	81 c6 00 10 00 00    	add    esi,0x1000
c001d732:	39 c6                	cmp    esi,eax
c001d734:	74 10                	je     c001d746 <SATA::open(int, int, void*)+0x6c>
c001d736:	83 ec 0c             	sub    esp,0xc
c001d739:	68 48 2e 02 c0       	push   0xc0022e48
c001d73e:	e8 9e 3b ff ff       	call   c00112e1 <KePanic(char const*)>
c001d743:	83 c4 10             	add    esp,0x10
c001d746:	83 ec 0c             	sub    esp,0xc
c001d749:	6a 02                	push   0x2
c001d74b:	e8 a5 be fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d750:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d756:	6a 03                	push   0x3
c001d758:	50                   	push   eax
c001d759:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d75f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d765:	e8 94 c5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d76a:	83 c4 14             	add    esp,0x14
c001d76d:	53                   	push   ebx
c001d76e:	e8 07 f4 fe ff       	call   c000cb7a <PhysicalDisk::startCache()>
c001d773:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d776:	e8 4b 06 ff ff       	call   c000ddc6 <createPartitionsForDisk(PhysicalDisk*)>
c001d77b:	83 c4 14             	add    esp,0x14
c001d77e:	31 c0                	xor    eax,eax
c001d780:	5b                   	pop    ebx
c001d781:	5e                   	pop    esi
c001d782:	c3                   	ret    
c001d783:	90                   	nop

c001d784 <SATA::SATA()>:
c001d784:	83 ec 0c             	sub    esp,0xc
c001d787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d78b:	83 ec 04             	sub    esp,0x4
c001d78e:	68 00 02 00 00       	push   0x200
c001d793:	68 5c 2e 02 c0       	push   0xc0022e5c
c001d798:	50                   	push   eax
c001d799:	e8 74 f3 fe ff       	call   c000cb12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d79e:	83 c4 10             	add    esp,0x10
c001d7a1:	ba cc 2e 02 c0       	mov    edx,0xc0022ecc
c001d7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7aa:	89 10                	mov    DWORD PTR [eax],edx
c001d7ac:	90                   	nop
c001d7ad:	83 c4 0c             	add    esp,0xc
c001d7b0:	c3                   	ret    
c001d7b1:	90                   	nop

c001d7b2 <SATA::access(unsigned long long, int, void*, bool)>:
c001d7b2:	55                   	push   ebp
c001d7b3:	57                   	push   edi
c001d7b4:	56                   	push   esi
c001d7b5:	53                   	push   ebx
c001d7b6:	83 ec 2c             	sub    esp,0x2c
c001d7b9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d7bd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d7c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d7c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7ca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7d2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d7d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7da:	7e 10                	jle    c001d7ec <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d7dc:	83 ec 0c             	sub    esp,0xc
c001d7df:	68 6c 2e 02 c0       	push   0xc0022e6c
c001d7e4:	e8 f8 3a ff ff       	call   c00112e1 <KePanic(char const*)>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d7f2:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d7f8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d7fe:	89 e8                	mov    eax,ebp
c001d800:	c1 e0 07             	shl    eax,0x7
c001d803:	01 d0                	add    eax,edx
c001d805:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d80f:	8d 45 02             	lea    eax,[ebp+0x2]
c001d812:	51                   	push   ecx
c001d813:	c1 e0 07             	shl    eax,0x7
c001d816:	51                   	push   ecx
c001d817:	01 d0                	add    eax,edx
c001d819:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d81d:	50                   	push   eax
c001d81e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d824:	e8 6b ec ff ff       	call   c001c494 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d829:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d82d:	83 c4 10             	add    esp,0x10
c001d830:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d839:	0f 84 5b 01 00 00    	je     c001d99a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d83f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d843:	c1 e0 09             	shl    eax,0x9
c001d846:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d84f:	74 0e                	je     c001d85f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d851:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d857:	89 c1                	mov    ecx,eax
c001d859:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d85d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d85f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d863:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d869:	8d 45 02             	lea    eax,[ebp+0x2]
c001d86c:	c1 e0 07             	shl    eax,0x7
c001d86f:	01 d0                	add    eax,edx
c001d871:	8b 00                	mov    eax,DWORD PTR [eax]
c001d873:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d879:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d87f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d883:	c1 e1 05             	shl    ecx,0x5
c001d886:	01 c8                	add    eax,ecx
c001d888:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d88c:	83 e1 01             	and    ecx,0x1
c001d88f:	89 ce                	mov    esi,ecx
c001d891:	8a 08                	mov    cl,BYTE PTR [eax]
c001d893:	c1 e6 06             	shl    esi,0x6
c001d896:	83 e1 bf             	and    ecx,0xffffffbf
c001d899:	09 f1                	or     ecx,esi
c001d89b:	88 08                	mov    BYTE PTR [eax],cl
c001d89d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d89f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d8a5:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d8ab:	89 08                	mov    DWORD PTR [eax],ecx
c001d8ad:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d8b3:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d8b9:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d8bf:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d8c2:	50                   	push   eax
c001d8c3:	68 90 00 00 00       	push   0x90
c001d8c8:	6a 00                	push   0x0
c001d8ca:	56                   	push   esi
c001d8cb:	e8 20 2c fe ff       	call   c00004f0 <memset>
c001d8d0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d8d6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d8dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8e0:	83 c4 10             	add    esp,0x10
c001d8e3:	48                   	dec    eax
c001d8e4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d8e9:	89 c1                	mov    ecx,eax
c001d8eb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d8f1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d8f6:	09 c8                	or     eax,ecx
c001d8f8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d8fe:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d904:	83 c8 80             	or     eax,0xffffff80
c001d907:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d90d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d914:	25 00 7f 00 00       	and    eax,0x7f00
c001d919:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d91e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d923:	66 89 06             	mov    WORD PTR [esi],ax
c001d926:	b0 35                	mov    al,0x35
c001d928:	75 02                	jne    c001d92c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d92a:	b0 25                	mov    al,0x25
c001d92c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d92f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d933:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d937:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d93b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d93f:	c1 e8 10             	shr    eax,0x10
c001d942:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d949:	c1 e8 18             	shr    eax,0x18
c001d94c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d94f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d953:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d95a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d95d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d961:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d965:	89 ee                	mov    esi,ebp
c001d967:	31 c0                	xor    eax,eax
c001d969:	c1 e6 07             	shl    esi,0x7
c001d96c:	01 d6                	add    esi,edx
c001d96e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d974:	80 e1 88             	and    cl,0x88
c001d977:	74 0a                	je     c001d983 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d979:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d97e:	74 0a                	je     c001d98a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d980:	40                   	inc    eax
c001d981:	eb eb                	jmp    c001d96e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d983:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d988:	75 17                	jne    c001d9a1 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d98a:	83 ec 0c             	sub    esp,0xc
c001d98d:	68 a5 2e 02 c0       	push   0xc0022ea5
c001d992:	e8 73 cf fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d997:	83 c4 10             	add    esp,0x10
c001d99a:	b8 01 00 00 00       	mov    eax,0x1
c001d99f:	eb 5b                	jmp    c001d9fc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d9a1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d9a5:	c1 e5 07             	shl    ebp,0x7
c001d9a8:	b8 01 00 00 00       	mov    eax,0x1
c001d9ad:	01 ea                	add    edx,ebp
c001d9af:	d3 e0                	shl    eax,cl
c001d9b1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d9b7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d9bd:	85 c8                	test   eax,ecx
c001d9bf:	74 16                	je     c001d9d7 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d9c1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d9c7:	0f ba e1 1e          	bt     ecx,0x1e
c001d9cb:	73 ea                	jae    c001d9b7 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d9cd:	83 ec 0c             	sub    esp,0xc
c001d9d0:	68 b3 2e 02 c0       	push   0xc0022eb3
c001d9d5:	eb bb                	jmp    c001d992 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d9d7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d9dd:	0f ba e0 1e          	bt     eax,0x1e
c001d9e1:	72 b7                	jb     c001d99a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d9e3:	31 c0                	xor    eax,eax
c001d9e5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d9ea:	75 10                	jne    c001d9fc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d9ec:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d9f2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d9f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d9fc:	83 c4 2c             	add    esp,0x2c
c001d9ff:	5b                   	pop    ebx
c001da00:	5e                   	pop    esi
c001da01:	5f                   	pop    edi
c001da02:	5d                   	pop    ebp
c001da03:	c3                   	ret    

c001da04 <SATA::read(unsigned long long, int, void*)>:
c001da04:	55                   	push   ebp
c001da05:	57                   	push   edi
c001da06:	56                   	push   esi
c001da07:	be 04 00 00 00       	mov    esi,0x4
c001da0c:	53                   	push   ebx
c001da0d:	83 ec 0c             	sub    esp,0xc
c001da10:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da18:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da1c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da20:	8d 7b ff             	lea    edi,[ebx-0x1]
c001da23:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001da29:	0f 87 1a 02 00 00    	ja     c001dc49 <SATA::read(unsigned long long, int, void*)+0x245>
c001da2f:	85 c9                	test   ecx,ecx
c001da31:	be 06 00 00 00       	mov    esi,0x6
c001da36:	0f 84 0d 02 00 00    	je     c001dc49 <SATA::read(unsigned long long, int, void*)+0x245>
c001da3c:	56                   	push   esi
c001da3d:	56                   	push   esi
c001da3e:	6a 00                	push   0x0
c001da40:	51                   	push   ecx
c001da41:	53                   	push   ebx
c001da42:	52                   	push   edx
c001da43:	50                   	push   eax
c001da44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da48:	e8 65 fd ff ff       	call   c001d7b2 <SATA::access(unsigned long long, int, void*, bool)>
c001da4d:	83 c4 20             	add    esp,0x20
c001da50:	85 c0                	test   eax,eax
c001da52:	89 c6                	mov    esi,eax
c001da54:	0f 85 ea 01 00 00    	jne    c001dc44 <SATA::read(unsigned long long, int, void*)+0x240>
c001da5a:	50                   	push   eax
c001da5b:	50                   	push   eax
c001da5c:	6a 0f                	push   0xf
c001da5e:	6a 00                	push   0x0
c001da60:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001da66:	bb 0a 00 00 00       	mov    ebx,0xa
c001da6b:	e8 7d f2 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001da70:	5a                   	pop    edx
c001da71:	59                   	pop    ecx
c001da72:	b9 10 27 00 00       	mov    ecx,0x2710
c001da77:	0f b6 c0             	movzx  eax,al
c001da7a:	50                   	push   eax
c001da7b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da80:	99                   	cdq    
c001da81:	f7 f9                	idiv   ecx
c001da83:	99                   	cdq    
c001da84:	f7 fb                	idiv   ebx
c001da86:	8d 42 30             	lea    eax,[edx+0x30]
c001da89:	0f b6 c0             	movzx  eax,al
c001da8c:	50                   	push   eax
c001da8d:	e8 4a f2 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001da92:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001da98:	5f                   	pop    edi
c001da99:	5d                   	pop    ebp
c001da9a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001da9f:	6a 0f                	push   0xf
c001daa1:	6a 00                	push   0x0
c001daa3:	e8 45 f2 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001daa8:	5a                   	pop    edx
c001daa9:	59                   	pop    ecx
c001daaa:	0f b6 c0             	movzx  eax,al
c001daad:	50                   	push   eax
c001daae:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dab3:	99                   	cdq    
c001dab4:	f7 fd                	idiv   ebp
c001dab6:	99                   	cdq    
c001dab7:	f7 fb                	idiv   ebx
c001dab9:	8d 42 30             	lea    eax,[edx+0x30]
c001dabc:	0f b6 c0             	movzx  eax,al
c001dabf:	50                   	push   eax
c001dac0:	e8 17 f2 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dac5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dacb:	5f                   	pop    edi
c001dacc:	bf 64 00 00 00       	mov    edi,0x64
c001dad1:	58                   	pop    eax
c001dad2:	6a 0f                	push   0xf
c001dad4:	6a 00                	push   0x0
c001dad6:	e8 12 f2 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dadb:	5a                   	pop    edx
c001dadc:	59                   	pop    ecx
c001dadd:	0f b6 c0             	movzx  eax,al
c001dae0:	50                   	push   eax
c001dae1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dae6:	99                   	cdq    
c001dae7:	f7 ff                	idiv   edi
c001dae9:	99                   	cdq    
c001daea:	f7 fb                	idiv   ebx
c001daec:	8d 42 30             	lea    eax,[edx+0x30]
c001daef:	0f b6 c0             	movzx  eax,al
c001daf2:	50                   	push   eax
c001daf3:	e8 e4 f1 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001daf8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dafe:	58                   	pop    eax
c001daff:	5a                   	pop    edx
c001db00:	6a 0f                	push   0xf
c001db02:	6a 00                	push   0x0
c001db04:	e8 e4 f1 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001db09:	59                   	pop    ecx
c001db0a:	5a                   	pop    edx
c001db0b:	0f b6 c0             	movzx  eax,al
c001db0e:	50                   	push   eax
c001db0f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db14:	99                   	cdq    
c001db15:	f7 fb                	idiv   ebx
c001db17:	99                   	cdq    
c001db18:	f7 fb                	idiv   ebx
c001db1a:	8d 42 30             	lea    eax,[edx+0x30]
c001db1d:	0f b6 c0             	movzx  eax,al
c001db20:	50                   	push   eax
c001db21:	e8 b6 f1 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001db26:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001db2c:	59                   	pop    ecx
c001db2d:	58                   	pop    eax
c001db2e:	6a 0f                	push   0xf
c001db30:	6a 00                	push   0x0
c001db32:	e8 b6 f1 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001db37:	5a                   	pop    edx
c001db38:	59                   	pop    ecx
c001db39:	0f b6 c0             	movzx  eax,al
c001db3c:	50                   	push   eax
c001db3d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db42:	99                   	cdq    
c001db43:	f7 fb                	idiv   ebx
c001db45:	83 c2 30             	add    edx,0x30
c001db48:	0f b6 d2             	movzx  edx,dl
c001db4b:	52                   	push   edx
c001db4c:	e8 8b f1 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001db51:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001db57:	58                   	pop    eax
c001db58:	5a                   	pop    edx
c001db59:	6a 0f                	push   0xf
c001db5b:	6a 00                	push   0x0
c001db5d:	e8 8b f1 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001db62:	59                   	pop    ecx
c001db63:	b9 10 27 00 00       	mov    ecx,0x2710
c001db68:	5a                   	pop    edx
c001db69:	0f b6 c0             	movzx  eax,al
c001db6c:	50                   	push   eax
c001db6d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db72:	99                   	cdq    
c001db73:	f7 f9                	idiv   ecx
c001db75:	99                   	cdq    
c001db76:	f7 fb                	idiv   ebx
c001db78:	8d 42 30             	lea    eax,[edx+0x30]
c001db7b:	0f b6 c0             	movzx  eax,al
c001db7e:	50                   	push   eax
c001db7f:	e8 58 f1 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001db84:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001db8a:	59                   	pop    ecx
c001db8b:	58                   	pop    eax
c001db8c:	6a 0f                	push   0xf
c001db8e:	6a 00                	push   0x0
c001db90:	e8 58 f1 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001db95:	5a                   	pop    edx
c001db96:	59                   	pop    ecx
c001db97:	0f b6 c0             	movzx  eax,al
c001db9a:	50                   	push   eax
c001db9b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dba0:	99                   	cdq    
c001dba1:	f7 fd                	idiv   ebp
c001dba3:	99                   	cdq    
c001dba4:	f7 fb                	idiv   ebx
c001dba6:	8d 42 30             	lea    eax,[edx+0x30]
c001dba9:	0f b6 c0             	movzx  eax,al
c001dbac:	50                   	push   eax
c001dbad:	e8 2a f1 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dbb2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dbb8:	5d                   	pop    ebp
c001dbb9:	58                   	pop    eax
c001dbba:	6a 0f                	push   0xf
c001dbbc:	6a 00                	push   0x0
c001dbbe:	e8 2a f1 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dbc3:	5a                   	pop    edx
c001dbc4:	59                   	pop    ecx
c001dbc5:	0f b6 c0             	movzx  eax,al
c001dbc8:	50                   	push   eax
c001dbc9:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbce:	99                   	cdq    
c001dbcf:	f7 ff                	idiv   edi
c001dbd1:	99                   	cdq    
c001dbd2:	f7 fb                	idiv   ebx
c001dbd4:	8d 42 30             	lea    eax,[edx+0x30]
c001dbd7:	0f b6 c0             	movzx  eax,al
c001dbda:	50                   	push   eax
c001dbdb:	e8 fc f0 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dbe0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dbe6:	5f                   	pop    edi
c001dbe7:	5d                   	pop    ebp
c001dbe8:	6a 0f                	push   0xf
c001dbea:	6a 00                	push   0x0
c001dbec:	e8 fc f0 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dbf1:	5a                   	pop    edx
c001dbf2:	59                   	pop    ecx
c001dbf3:	0f b6 c0             	movzx  eax,al
c001dbf6:	50                   	push   eax
c001dbf7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbfc:	99                   	cdq    
c001dbfd:	f7 fb                	idiv   ebx
c001dbff:	99                   	cdq    
c001dc00:	f7 fb                	idiv   ebx
c001dc02:	8d 42 30             	lea    eax,[edx+0x30]
c001dc05:	0f b6 c0             	movzx  eax,al
c001dc08:	50                   	push   eax
c001dc09:	e8 ce f0 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dc0e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dc14:	5f                   	pop    edi
c001dc15:	5d                   	pop    ebp
c001dc16:	6a 0f                	push   0xf
c001dc18:	6a 00                	push   0x0
c001dc1a:	e8 ce f0 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dc1f:	5a                   	pop    edx
c001dc20:	59                   	pop    ecx
c001dc21:	0f b6 c0             	movzx  eax,al
c001dc24:	50                   	push   eax
c001dc25:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc2a:	99                   	cdq    
c001dc2b:	f7 fb                	idiv   ebx
c001dc2d:	83 c2 30             	add    edx,0x30
c001dc30:	0f b6 d2             	movzx  edx,dl
c001dc33:	52                   	push   edx
c001dc34:	e8 a3 f0 ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dc39:	83 c4 10             	add    esp,0x10
c001dc3c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dc42:	eb 05                	jmp    c001dc49 <SATA::read(unsigned long long, int, void*)+0x245>
c001dc44:	be 01 00 00 00       	mov    esi,0x1
c001dc49:	83 c4 0c             	add    esp,0xc
c001dc4c:	89 f0                	mov    eax,esi
c001dc4e:	5b                   	pop    ebx
c001dc4f:	5e                   	pop    esi
c001dc50:	5f                   	pop    edi
c001dc51:	5d                   	pop    ebp
c001dc52:	c3                   	ret    
c001dc53:	90                   	nop

c001dc54 <SATA::write(unsigned long long, int, void*)>:
c001dc54:	55                   	push   ebp
c001dc55:	57                   	push   edi
c001dc56:	56                   	push   esi
c001dc57:	53                   	push   ebx
c001dc58:	83 ec 0c             	sub    esp,0xc
c001dc5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc5f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dc63:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dc6b:	8d 70 ff             	lea    esi,[eax-0x1]
c001dc6e:	b8 04 00 00 00       	mov    eax,0x4
c001dc73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dc79:	0f 87 2c 02 00 00    	ja     c001deab <SATA::write(unsigned long long, int, void*)+0x257>
c001dc7f:	85 db                	test   ebx,ebx
c001dc81:	b8 06 00 00 00       	mov    eax,0x6
c001dc86:	0f 84 1f 02 00 00    	je     c001deab <SATA::write(unsigned long long, int, void*)+0x257>
c001dc8c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dc90:	c1 e6 09             	shl    esi,0x9
c001dc93:	01 de                	add    esi,ebx
c001dc95:	50                   	push   eax
c001dc96:	89 d7                	mov    edi,edx
c001dc98:	50                   	push   eax
c001dc99:	83 c7 01             	add    edi,0x1
c001dc9c:	6a 01                	push   0x1
c001dc9e:	89 cd                	mov    ebp,ecx
c001dca0:	53                   	push   ebx
c001dca1:	83 d5 00             	adc    ebp,0x0
c001dca4:	6a 01                	push   0x1
c001dca6:	81 c3 00 02 00 00    	add    ebx,0x200
c001dcac:	51                   	push   ecx
c001dcad:	52                   	push   edx
c001dcae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcb2:	e8 fb fa ff ff       	call   c001d7b2 <SATA::access(unsigned long long, int, void*, bool)>
c001dcb7:	83 c4 20             	add    esp,0x20
c001dcba:	39 f3                	cmp    ebx,esi
c001dcbc:	89 fa                	mov    edx,edi
c001dcbe:	89 e9                	mov    ecx,ebp
c001dcc0:	75 d3                	jne    c001dc95 <SATA::write(unsigned long long, int, void*)+0x41>
c001dcc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dcc6:	bd 10 27 00 00       	mov    ebp,0x2710
c001dccb:	bb 0a 00 00 00       	mov    ebx,0xa
c001dcd0:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dcd6:	50                   	push   eax
c001dcd7:	50                   	push   eax
c001dcd8:	6a 0f                	push   0xf
c001dcda:	6a 00                	push   0x0
c001dcdc:	e8 0c f0 ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dce1:	5a                   	pop    edx
c001dce2:	59                   	pop    ecx
c001dce3:	0f b6 c0             	movzx  eax,al
c001dce6:	50                   	push   eax
c001dce7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcec:	99                   	cdq    
c001dced:	f7 fd                	idiv   ebp
c001dcef:	99                   	cdq    
c001dcf0:	f7 fb                	idiv   ebx
c001dcf2:	8d 42 30             	lea    eax,[edx+0x30]
c001dcf5:	0f b6 c0             	movzx  eax,al
c001dcf8:	50                   	push   eax
c001dcf9:	e8 de ef ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dcfe:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dd04:	5e                   	pop    esi
c001dd05:	5f                   	pop    edi
c001dd06:	bf e8 03 00 00       	mov    edi,0x3e8
c001dd0b:	6a 0f                	push   0xf
c001dd0d:	6a 00                	push   0x0
c001dd0f:	e8 d9 ef ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dd14:	5a                   	pop    edx
c001dd15:	59                   	pop    ecx
c001dd16:	0f b6 c0             	movzx  eax,al
c001dd19:	50                   	push   eax
c001dd1a:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd1f:	99                   	cdq    
c001dd20:	f7 ff                	idiv   edi
c001dd22:	99                   	cdq    
c001dd23:	f7 fb                	idiv   ebx
c001dd25:	8d 42 30             	lea    eax,[edx+0x30]
c001dd28:	0f b6 c0             	movzx  eax,al
c001dd2b:	50                   	push   eax
c001dd2c:	e8 ab ef ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dd31:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd37:	5e                   	pop    esi
c001dd38:	be 64 00 00 00       	mov    esi,0x64
c001dd3d:	58                   	pop    eax
c001dd3e:	6a 0f                	push   0xf
c001dd40:	6a 00                	push   0x0
c001dd42:	e8 a6 ef ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dd47:	5a                   	pop    edx
c001dd48:	59                   	pop    ecx
c001dd49:	0f b6 c0             	movzx  eax,al
c001dd4c:	50                   	push   eax
c001dd4d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd52:	99                   	cdq    
c001dd53:	f7 fe                	idiv   esi
c001dd55:	99                   	cdq    
c001dd56:	f7 fb                	idiv   ebx
c001dd58:	8d 42 30             	lea    eax,[edx+0x30]
c001dd5b:	0f b6 c0             	movzx  eax,al
c001dd5e:	50                   	push   eax
c001dd5f:	e8 78 ef ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dd64:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dd6a:	58                   	pop    eax
c001dd6b:	5a                   	pop    edx
c001dd6c:	6a 0f                	push   0xf
c001dd6e:	6a 00                	push   0x0
c001dd70:	e8 78 ef ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dd75:	59                   	pop    ecx
c001dd76:	5a                   	pop    edx
c001dd77:	0f b6 c0             	movzx  eax,al
c001dd7a:	50                   	push   eax
c001dd7b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd80:	99                   	cdq    
c001dd81:	f7 fb                	idiv   ebx
c001dd83:	99                   	cdq    
c001dd84:	f7 fb                	idiv   ebx
c001dd86:	8d 42 30             	lea    eax,[edx+0x30]
c001dd89:	0f b6 c0             	movzx  eax,al
c001dd8c:	50                   	push   eax
c001dd8d:	e8 4a ef ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dd92:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dd98:	59                   	pop    ecx
c001dd99:	58                   	pop    eax
c001dd9a:	6a 0f                	push   0xf
c001dd9c:	6a 00                	push   0x0
c001dd9e:	e8 4a ef ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001dda3:	5a                   	pop    edx
c001dda4:	59                   	pop    ecx
c001dda5:	0f b6 c0             	movzx  eax,al
c001dda8:	50                   	push   eax
c001dda9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddae:	99                   	cdq    
c001ddaf:	f7 fb                	idiv   ebx
c001ddb1:	83 c2 30             	add    edx,0x30
c001ddb4:	0f b6 d2             	movzx  edx,dl
c001ddb7:	52                   	push   edx
c001ddb8:	e8 1f ef ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ddbd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ddc3:	58                   	pop    eax
c001ddc4:	5a                   	pop    edx
c001ddc5:	6a 0f                	push   0xf
c001ddc7:	6a 00                	push   0x0
c001ddc9:	e8 1f ef ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001ddce:	59                   	pop    ecx
c001ddcf:	5a                   	pop    edx
c001ddd0:	0f b6 c0             	movzx  eax,al
c001ddd3:	50                   	push   eax
c001ddd4:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddd9:	99                   	cdq    
c001ddda:	f7 fd                	idiv   ebp
c001dddc:	99                   	cdq    
c001dddd:	f7 fb                	idiv   ebx
c001dddf:	8d 42 30             	lea    eax,[edx+0x30]
c001dde2:	0f b6 c0             	movzx  eax,al
c001dde5:	50                   	push   eax
c001dde6:	e8 f1 ee ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001ddeb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ddf1:	59                   	pop    ecx
c001ddf2:	5d                   	pop    ebp
c001ddf3:	6a 0f                	push   0xf
c001ddf5:	6a 00                	push   0x0
c001ddf7:	e8 f1 ee ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001ddfc:	5a                   	pop    edx
c001ddfd:	59                   	pop    ecx
c001ddfe:	0f b6 c0             	movzx  eax,al
c001de01:	50                   	push   eax
c001de02:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de07:	99                   	cdq    
c001de08:	f7 ff                	idiv   edi
c001de0a:	99                   	cdq    
c001de0b:	f7 fb                	idiv   ebx
c001de0d:	8d 42 30             	lea    eax,[edx+0x30]
c001de10:	0f b6 c0             	movzx  eax,al
c001de13:	50                   	push   eax
c001de14:	e8 c3 ee ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001de19:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de1f:	5f                   	pop    edi
c001de20:	5d                   	pop    ebp
c001de21:	6a 0f                	push   0xf
c001de23:	6a 00                	push   0x0
c001de25:	e8 c3 ee ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001de2a:	5a                   	pop    edx
c001de2b:	59                   	pop    ecx
c001de2c:	0f b6 c0             	movzx  eax,al
c001de2f:	50                   	push   eax
c001de30:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de35:	99                   	cdq    
c001de36:	f7 fe                	idiv   esi
c001de38:	99                   	cdq    
c001de39:	f7 fb                	idiv   ebx
c001de3b:	8d 42 30             	lea    eax,[edx+0x30]
c001de3e:	0f b6 c0             	movzx  eax,al
c001de41:	50                   	push   eax
c001de42:	e8 95 ee ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001de47:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001de4d:	5e                   	pop    esi
c001de4e:	5f                   	pop    edi
c001de4f:	6a 0f                	push   0xf
c001de51:	6a 00                	push   0x0
c001de53:	e8 95 ee ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001de58:	5d                   	pop    ebp
c001de59:	5a                   	pop    edx
c001de5a:	0f b6 c0             	movzx  eax,al
c001de5d:	50                   	push   eax
c001de5e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de63:	99                   	cdq    
c001de64:	f7 fb                	idiv   ebx
c001de66:	99                   	cdq    
c001de67:	f7 fb                	idiv   ebx
c001de69:	8d 42 30             	lea    eax,[edx+0x30]
c001de6c:	0f b6 c0             	movzx  eax,al
c001de6f:	50                   	push   eax
c001de70:	e8 67 ee ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001de75:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001de7b:	59                   	pop    ecx
c001de7c:	5e                   	pop    esi
c001de7d:	6a 0f                	push   0xf
c001de7f:	6a 00                	push   0x0
c001de81:	e8 67 ee ff ff       	call   c001cced <combineColours(unsigned char, unsigned char)>
c001de86:	5f                   	pop    edi
c001de87:	5d                   	pop    ebp
c001de88:	0f b6 c0             	movzx  eax,al
c001de8b:	50                   	push   eax
c001de8c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de91:	99                   	cdq    
c001de92:	f7 fb                	idiv   ebx
c001de94:	83 c2 30             	add    edx,0x30
c001de97:	0f b6 d2             	movzx  edx,dl
c001de9a:	52                   	push   edx
c001de9b:	e8 3c ee ff ff       	call   c001ccdc <combineCharAndColour(char, unsigned char)>
c001dea0:	83 c4 10             	add    esp,0x10
c001dea3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dea9:	31 c0                	xor    eax,eax
c001deab:	83 c4 0c             	add    esp,0xc
c001deae:	5b                   	pop    ebx
c001deaf:	5e                   	pop    esi
c001deb0:	5f                   	pop    edi
c001deb1:	5d                   	pop    ebp
c001deb2:	c3                   	ret    
c001deb3:	90                   	nop

c001deb4 <SATAPI::write(unsigned long long, int, void*)>:
c001deb4:	b8 03 00 00 00       	mov    eax,0x3
c001deb9:	c3                   	ret    

c001deba <SATAPI::close(int, int, void*)>:
c001deba:	83 ec 0c             	sub    esp,0xc
c001debd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dec7:	85 c0                	test   eax,eax
c001dec9:	74 0c                	je     c001ded7 <SATAPI::close(int, int, void*)+0x1d>
c001decb:	8b 10                	mov    edx,DWORD PTR [eax]
c001decd:	83 ec 0c             	sub    esp,0xc
c001ded0:	50                   	push   eax
c001ded1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ded4:	83 c4 10             	add    esp,0x10
c001ded7:	31 c0                	xor    eax,eax
c001ded9:	83 c4 0c             	add    esp,0xc
c001dedc:	c3                   	ret    
c001dedd:	90                   	nop

c001dede <SATAPI::SATAPI()>:
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee5:	83 ec 04             	sub    esp,0x4
c001dee8:	68 00 08 00 00       	push   0x800
c001deed:	68 fc 2e 02 c0       	push   0xc0022efc
c001def2:	50                   	push   eax
c001def3:	e8 1a ec fe ff       	call   c000cb12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001def8:	83 c4 10             	add    esp,0x10
c001defb:	ba f0 2f 02 c0       	mov    edx,0xc0022ff0
c001df00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df04:	89 10                	mov    DWORD PTR [eax],edx
c001df06:	90                   	nop
c001df07:	83 c4 0c             	add    esp,0xc
c001df0a:	c3                   	ret    
c001df0b:	90                   	nop

c001df0c <SATAPI::diskRemoved()>:
c001df0c:	c3                   	ret    
c001df0d:	90                   	nop

c001df0e <SATAPI::diskInserted()>:
c001df0e:	83 ec 18             	sub    esp,0x18
c001df11:	68 08 2f 02 c0       	push   0xc0022f08
c001df16:	e8 ef c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001df1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df1f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001df26:	83 c4 1c             	add    esp,0x1c
c001df29:	c3                   	ret    

c001df2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001df2a:	55                   	push   ebp
c001df2b:	57                   	push   edi
c001df2c:	56                   	push   esi
c001df2d:	53                   	push   ebx
c001df2e:	83 ec 34             	sub    esp,0x34
c001df31:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df35:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001df39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df3d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df45:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001df4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df55:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001df5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df5f:	83 c0 02             	add    eax,0x2
c001df62:	c1 e0 07             	shl    eax,0x7
c001df65:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df71:	c1 e0 07             	shl    eax,0x7
c001df74:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df7c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001df86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df8a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df90:	e8 ff e4 ff ff       	call   c001c494 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001df95:	83 c4 10             	add    esp,0x10
c001df98:	89 c2                	mov    edx,eax
c001df9a:	b8 01 00 00 00       	mov    eax,0x1
c001df9f:	83 fa ff             	cmp    edx,0xffffffff
c001dfa2:	0f 84 5f 02 00 00    	je     c001e207 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001dfa8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dfac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dfb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfb8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dfbe:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dfc4:	89 d1                	mov    ecx,edx
c001dfc6:	c1 e1 05             	shl    ecx,0x5
c001dfc9:	01 c8                	add    eax,ecx
c001dfcb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dfcd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001dfd3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001dfd9:	89 08                	mov    DWORD PTR [eax],ecx
c001dfdb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dfe1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001dfe7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001dfed:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001dff0:	50                   	push   eax
c001dff1:	68 90 00 00 00       	push   0x90
c001dff6:	6a 00                	push   0x0
c001dff8:	53                   	push   ebx
c001dff9:	e8 f2 24 fe ff       	call   c00004f0 <memset>
c001dffe:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e001:	b9 0c 00 00 00       	mov    ecx,0xc
c001e006:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e00a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e00c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e012:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e016:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e01a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e020:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e024:	48                   	dec    eax
c001e025:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e02a:	89 c1                	mov    ecx,eax
c001e02c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e032:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e037:	09 c8                	or     eax,ecx
c001e039:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e03f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e045:	83 c8 80             	or     eax,0xffffff80
c001e048:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e04e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e051:	25 00 7f 00 00       	and    eax,0x7f00
c001e056:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e05b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e05e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e062:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e06a:	c1 e8 10             	shr    eax,0x10
c001e06d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e074:	c1 e8 18             	shr    eax,0x18
c001e077:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e07a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e07e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e081:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e085:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e088:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e08c:	83 c4 10             	add    esp,0x10
c001e08f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e093:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e097:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e09b:	31 c0                	xor    eax,eax
c001e09d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e0a3:	80 e1 88             	and    cl,0x88
c001e0a6:	74 0a                	je     c001e0b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e0a8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0ad:	74 0a                	je     c001e0b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e0af:	40                   	inc    eax
c001e0b0:	eb eb                	jmp    c001e09d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e0b2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0b7:	75 43                	jne    c001e0fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e0b9:	83 ec 0c             	sub    esp,0xc
c001e0bc:	68 20 2f 02 c0       	push   0xc0022f20
c001e0c1:	e8 44 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0c6:	58                   	pop    eax
c001e0c7:	5a                   	pop    edx
c001e0c8:	68 35 2f 02 c0       	push   0xc0022f35
c001e0cd:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e0d3:	e8 d4 a9 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e0d8:	59                   	pop    ecx
c001e0d9:	5b                   	pop    ebx
c001e0da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e0de:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0e4:	e8 45 e4 ff ff       	call   c001c52e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e0e9:	5e                   	pop    esi
c001e0ea:	5f                   	pop    edi
c001e0eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e0ef:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0f5:	e8 14 e4 ff ff       	call   c001c50e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e0fa:	eb 48                	jmp    c001e144 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e0fc:	b8 01 00 00 00       	mov    eax,0x1
c001e101:	88 d1                	mov    cl,dl
c001e103:	d3 e0                	shl    eax,cl
c001e105:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e10a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e110:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e114:	89 c7                	mov    edi,eax
c001e116:	c1 e3 07             	shl    ebx,0x7
c001e119:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e11d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e123:	85 c7                	test   edi,eax
c001e125:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e12b:	0f 84 a3 00 00 00    	je     c001e1d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e131:	0f ba e0 1e          	bt     eax,0x1e
c001e135:	73 1a                	jae    c001e151 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e137:	83 ec 0c             	sub    esp,0xc
c001e13a:	68 47 2f 02 c0       	push   0xc0022f47
c001e13f:	e8 c6 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e144:	83 c4 10             	add    esp,0x10
c001e147:	b8 01 00 00 00       	mov    eax,0x1
c001e14c:	e9 b6 00 00 00       	jmp    c001e207 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e151:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e157:	83 f8 0d             	cmp    eax,0xd
c001e15a:	77 0a                	ja     c001e166 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	68 c8 00 00 00       	push   0xc8
c001e164:	eb 28                	jmp    c001e18e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e166:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e16c:	83 f8 0d             	cmp    eax,0xd
c001e16f:	77 0a                	ja     c001e17b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e171:	83 ec 0c             	sub    esp,0xc
c001e174:	68 58 02 00 00       	push   0x258
c001e179:	eb 13                	jmp    c001e18e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e17b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e181:	83 f8 06             	cmp    eax,0x6
c001e184:	77 10                	ja     c001e196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e186:	83 ec 0c             	sub    esp,0xc
c001e189:	68 dc 05 00 00       	push   0x5dc
c001e18e:	e8 69 7d ff ff       	call   c0015efc <milliTenthSleep(unsigned int)>
c001e193:	83 c4 10             	add    esp,0x10
c001e196:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e19a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e19d:	75 06                	jne    c001e1a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e19f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e1a3:	74 15                	je     c001e1ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e1a5:	83 fe 06             	cmp    esi,0x6
c001e1a8:	77 10                	ja     c001e1ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e1aa:	83 ec 0c             	sub    esp,0xc
c001e1ad:	68 c4 09 00 00       	push   0x9c4
c001e1b2:	e8 45 7d ff ff       	call   c0015efc <milliTenthSleep(unsigned int)>
c001e1b7:	83 c4 10             	add    esp,0x10
c001e1ba:	46                   	inc    esi
c001e1bb:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e1c1:	0f 85 56 ff ff ff    	jne    c001e11d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e1c7:	83 ec 0c             	sub    esp,0xc
c001e1ca:	68 5a 2f 02 c0       	push   0xc0022f5a
c001e1cf:	e9 6b ff ff ff       	jmp    c001e13f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e1d4:	0f ba e0 1e          	bt     eax,0x1e
c001e1d8:	73 0d                	jae    c001e1e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e1da:	83 ec 0c             	sub    esp,0xc
c001e1dd:	68 6e 2f 02 c0       	push   0xc0022f6e
c001e1e2:	e9 58 ff ff ff       	jmp    c001e13f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e1e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e1ec:	74 17                	je     c001e205 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e1ee:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e1f3:	74 10                	je     c001e205 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e1f5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e1fb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e1ff:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e203:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e205:	31 c0                	xor    eax,eax
c001e207:	83 c4 2c             	add    esp,0x2c
c001e20a:	5b                   	pop    ebx
c001e20b:	5e                   	pop    esi
c001e20c:	5f                   	pop    edi
c001e20d:	5d                   	pop    ebp
c001e20e:	c3                   	ret    
c001e20f:	90                   	nop

c001e210 <SATAPI::eject()>:
c001e210:	57                   	push   edi
c001e211:	b9 03 00 00 00       	mov    ecx,0x3
c001e216:	83 ec 18             	sub    esp,0x18
c001e219:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e21d:	fc                   	cld    
c001e21e:	31 c0                	xor    eax,eax
c001e220:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e222:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e227:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e22c:	50                   	push   eax
c001e22d:	6a 00                	push   0x0
c001e22f:	6a 00                	push   0x0
c001e231:	6a 00                	push   0x0
c001e233:	6a 00                	push   0x0
c001e235:	6a 02                	push   0x2
c001e237:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e23b:	50                   	push   eax
c001e23c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e240:	e8 e5 fc ff ff       	call   c001df2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e245:	83 c4 38             	add    esp,0x38
c001e248:	31 c0                	xor    eax,eax
c001e24a:	5f                   	pop    edi
c001e24b:	c3                   	ret    

c001e24c <SATAPI::detectMedia()>:
c001e24c:	53                   	push   ebx
c001e24d:	83 ec 14             	sub    esp,0x14
c001e250:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e254:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e25a:	e8 39 02 ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c001e25f:	59                   	pop    ecx
c001e260:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e266:	e8 1d 02 ff ff       	call   c000e488 <VCache::invalidateReadBuffer()>
c001e26b:	c7 04 24 83 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f83
c001e272:	e8 93 c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e277:	83 c4 10             	add    esp,0x10
c001e27a:	31 c0                	xor    eax,eax
c001e27c:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e283:	85 d2                	test   edx,edx
c001e285:	74 0f                	je     c001e296 <SATAPI::detectMedia()+0x4a>
c001e287:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e28d:	75 07                	jne    c001e296 <SATAPI::detectMedia()+0x4a>
c001e28f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e296:	40                   	inc    eax
c001e297:	83 f8 1a             	cmp    eax,0x1a
c001e29a:	75 e0                	jne    c001e27c <SATAPI::detectMedia()+0x30>
c001e29c:	83 c4 08             	add    esp,0x8
c001e29f:	5b                   	pop    ebx
c001e2a0:	c3                   	ret    
c001e2a1:	90                   	nop

c001e2a2 <SATAPI::open(int, int, void*)>:
c001e2a2:	56                   	push   esi
c001e2a3:	53                   	push   ebx
c001e2a4:	51                   	push   ecx
c001e2a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e2ad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2b7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2cb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e2d5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e2dc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e2e2:	e8 fb 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e2e7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e2ed:	89 c6                	mov    esi,eax
c001e2ef:	e8 ee 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e2f4:	81 c6 00 10 00 00    	add    esi,0x1000
c001e2fa:	39 c6                	cmp    esi,eax
c001e2fc:	74 10                	je     c001e30e <SATAPI::open(int, int, void*)+0x6c>
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	68 98 2f 02 c0       	push   0xc0022f98
c001e306:	e8 d6 2f ff ff       	call   c00112e1 <KePanic(char const*)>
c001e30b:	83 c4 10             	add    esp,0x10
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	6a 02                	push   0x2
c001e313:	e8 dd b2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e318:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e31e:	6a 03                	push   0x3
c001e320:	50                   	push   eax
c001e321:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e327:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e32d:	e8 cc b9 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e332:	83 c4 14             	add    esp,0x14
c001e335:	68 78 01 00 00       	push   0x178
c001e33a:	e8 94 97 fe ff       	call   c0007ad3 <malloc>
c001e33f:	83 c4 0c             	add    esp,0xc
c001e342:	6a 00                	push   0x0
c001e344:	68 ff ff ff 7f       	push   0x7fffffff
c001e349:	6a 00                	push   0x0
c001e34b:	6a 00                	push   0x0
c001e34d:	53                   	push   ebx
c001e34e:	68 ae 2f 02 c0       	push   0xc0022fae
c001e353:	89 c6                	mov    esi,eax
c001e355:	50                   	push   eax
c001e356:	e8 97 f5 fe ff       	call   c000d8f2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e35b:	83 c4 14             	add    esp,0x14
c001e35e:	56                   	push   esi
c001e35f:	e8 4e f6 fe ff       	call   c000d9b2 <LogicalDisk::assignDriveLetter()>
c001e364:	5a                   	pop    edx
c001e365:	59                   	pop    ecx
c001e366:	0f be c0             	movsx  eax,al
c001e369:	50                   	push   eax
c001e36a:	68 00 2e 02 c0       	push   0xc0022e00
c001e36f:	e8 96 c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e374:	58                   	pop    eax
c001e375:	5a                   	pop    edx
c001e376:	56                   	push   esi
c001e377:	53                   	push   ebx
c001e378:	e8 c7 e3 fe ff       	call   c000c744 <Device::addChild(Device*)>
c001e37d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e383:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e386:	e8 ef e7 fe ff       	call   c000cb7a <PhysicalDisk::startCache()>
c001e38b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e395:	e8 b2 fe ff ff       	call   c001e24c <SATAPI::detectMedia()>
c001e39a:	83 c4 14             	add    esp,0x14
c001e39d:	31 c0                	xor    eax,eax
c001e39f:	5b                   	pop    ebx
c001e3a0:	5e                   	pop    esi
c001e3a1:	c3                   	ret    

c001e3a2 <SATAPI::read(unsigned long long, int, void*)>:
c001e3a2:	55                   	push   ebp
c001e3a3:	57                   	push   edi
c001e3a4:	56                   	push   esi
c001e3a5:	53                   	push   ebx
c001e3a6:	83 ec 3c             	sub    esp,0x3c
c001e3a9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e3ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e3b5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e3b9:	83 fd 04             	cmp    ebp,0x4
c001e3bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3c4:	7e 10                	jle    c001e3d6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e3c6:	83 ec 0c             	sub    esp,0xc
c001e3c9:	68 bc 2f 02 c0       	push   0xc0022fbc
c001e3ce:	e8 0e 2f ff ff       	call   c00112e1 <KePanic(char const*)>
c001e3d3:	83 c4 10             	add    esp,0x10
c001e3d6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e3dc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e3e2:	51                   	push   ecx
c001e3e3:	50                   	push   eax
c001e3e4:	83 c0 02             	add    eax,0x2
c001e3e7:	c1 e0 07             	shl    eax,0x7
c001e3ea:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e3f0:	50                   	push   eax
c001e3f1:	52                   	push   edx
c001e3f2:	e8 61 e1 ff ff       	call   c001c558 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e3f7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e3fb:	b9 03 00 00 00       	mov    ecx,0x3
c001e400:	fc                   	cld    
c001e401:	31 c0                	xor    eax,eax
c001e403:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e405:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e40a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e40f:	83 c4 0c             	add    esp,0xc
c001e412:	6a 00                	push   0x0
c001e414:	6a 00                	push   0x0
c001e416:	6a 00                	push   0x0
c001e418:	6a 00                	push   0x0
c001e41a:	6a 02                	push   0x2
c001e41c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e420:	50                   	push   eax
c001e421:	53                   	push   ebx
c001e422:	e8 03 fb ff ff       	call   c001df2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e427:	83 c4 20             	add    esp,0x20
c001e42a:	85 c0                	test   eax,eax
c001e42c:	89 c6                	mov    esi,eax
c001e42e:	75 46                	jne    c001e476 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e430:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e434:	b9 03 00 00 00       	mov    ecx,0x3
c001e439:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e43b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e43f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e444:	0f c8                	bswap  eax
c001e446:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e44a:	89 e8                	mov    eax,ebp
c001e44c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e450:	50                   	push   eax
c001e451:	55                   	push   ebp
c001e452:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e456:	c1 e5 0b             	shl    ebp,0xb
c001e459:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e45d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e461:	55                   	push   ebp
c001e462:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e466:	50                   	push   eax
c001e467:	53                   	push   ebx
c001e468:	e8 bd fa ff ff       	call   c001df2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e46d:	83 c4 20             	add    esp,0x20
c001e470:	85 c0                	test   eax,eax
c001e472:	89 c6                	mov    esi,eax
c001e474:	74 0c                	je     c001e482 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e476:	83 ec 0c             	sub    esp,0xc
c001e479:	53                   	push   ebx
c001e47a:	e8 cd fd ff ff       	call   c001e24c <SATAPI::detectMedia()>
c001e47f:	83 c4 10             	add    esp,0x10
c001e482:	83 c4 3c             	add    esp,0x3c
c001e485:	89 f0                	mov    eax,esi
c001e487:	5b                   	pop    ebx
c001e488:	5e                   	pop    esi
c001e489:	5f                   	pop    edi
c001e48a:	5d                   	pop    ebp
c001e48b:	c3                   	ret    

c001e48c <IOAPIC::close(int, int, void*)>:
c001e48c:	b8 00 00 00 00       	mov    eax,0x0
c001e491:	c3                   	ret    

c001e492 <apicGetBase()>:
c001e492:	55                   	push   ebp
c001e493:	89 e5                	mov    ebp,esp
c001e495:	83 ec 18             	sub    esp,0x18
c001e498:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e49d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e4a3:	83 e0 08             	and    eax,0x8
c001e4a6:	0f b6 c0             	movzx  eax,al
c001e4a9:	85 c0                	test   eax,eax
c001e4ab:	75 07                	jne    c001e4b4 <apicGetBase()+0x22>
c001e4ad:	b8 00 00 00 00       	mov    eax,0x0
c001e4b2:	eb 21                	jmp    c001e4d5 <apicGetBase()+0x43>
c001e4b4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4b9:	83 ec 08             	sub    esp,0x8
c001e4bc:	6a 1b                	push   0x1b
c001e4be:	50                   	push   eax
c001e4bf:	e8 1e 8c fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e4c4:	83 c4 10             	add    esp,0x10
c001e4c7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4ca:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e4cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4d0:	25 00 00 ff ff       	and    eax,0xffff0000
c001e4d5:	c9                   	leave  
c001e4d6:	c3                   	ret    
c001e4d7:	90                   	nop

c001e4d8 <IOAPIC::IOAPIC()>:
c001e4d8:	83 ec 0c             	sub    esp,0xc
c001e4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4df:	83 ec 08             	sub    esp,0x8
c001e4e2:	68 20 30 02 c0       	push   0xc0023020
c001e4e7:	50                   	push   eax
c001e4e8:	e8 ef e3 fe ff       	call   c000c8dc <Device::Device(char const*)>
c001e4ed:	83 c4 10             	add    esp,0x10
c001e4f0:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001e4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f9:	89 10                	mov    DWORD PTR [eax],edx
c001e4fb:	90                   	nop
c001e4fc:	83 c4 0c             	add    esp,0xc
c001e4ff:	c3                   	ret    

c001e500 <apicOpen()>:
c001e500:	55                   	push   ebp
c001e501:	89 e5                	mov    ebp,esp
c001e503:	53                   	push   ebx
c001e504:	83 ec 34             	sub    esp,0x34
c001e507:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e50c:	83 f0 01             	xor    eax,0x1
c001e50f:	0f b6 c0             	movzx  eax,al
c001e512:	85 c0                	test   eax,eax
c001e514:	0f 84 a3 00 00 00    	je     c001e5bd <apicOpen()+0xbd>
c001e51a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e51e:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e523:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e527:	0f b6 c0             	movzx  eax,al
c001e52a:	39 c2                	cmp    edx,eax
c001e52c:	0f 83 84 00 00 00    	jae    c001e5b6 <apicOpen()+0xb6>
c001e532:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e539:	83 ec 0c             	sub    esp,0xc
c001e53c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e53f:	e8 8f 95 fe ff       	call   c0007ad3 <malloc>
c001e544:	83 c4 10             	add    esp,0x10
c001e547:	89 c3                	mov    ebx,eax
c001e549:	83 ec 0c             	sub    esp,0xc
c001e54c:	53                   	push   ebx
c001e54d:	e8 86 ff ff ff       	call   c001e4d8 <IOAPIC::IOAPIC()>
c001e552:	83 c4 10             	add    esp,0x10
c001e555:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e558:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e55c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e55f:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e566:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e56b:	83 c0 01             	add    eax,0x1
c001e56e:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e573:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e578:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e57e:	83 ec 08             	sub    esp,0x8
c001e581:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e584:	50                   	push   eax
c001e585:	e8 ba e1 fe ff       	call   c000c744 <Device::addChild(Device*)>
c001e58a:	83 c4 10             	add    esp,0x10
c001e58d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e590:	8b 00                	mov    eax,DWORD PTR [eax]
c001e592:	83 c0 08             	add    eax,0x8
c001e595:	8b 00                	mov    eax,DWORD PTR [eax]
c001e597:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e59b:	6a 00                	push   0x0
c001e59d:	6a 00                	push   0x0
c001e59f:	52                   	push   edx
c001e5a0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5a3:	ff d0                	call   eax
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5ab:	83 c0 01             	add    eax,0x1
c001e5ae:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e5b1:	e9 68 ff ff ff       	jmp    c001e51e <apicOpen()+0x1e>
c001e5b6:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e5bd:	e8 d0 fe ff ff       	call   c001e492 <apicGetBase()>
c001e5c2:	05 f0 00 00 00       	add    eax,0xf0
c001e5c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e5ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5cf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e5d2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e5d9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e5e0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e5e6:	89 10                	mov    DWORD PTR [eax],edx
c001e5e8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e5ef:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e5f4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e5f7:	7d 7c                	jge    c001e675 <apicOpen()+0x175>
c001e5f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5fc:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e603:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e606:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e609:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e610:	c1 e8 08             	shr    eax,0x8
c001e613:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e617:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e61a:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e621:	c1 e8 18             	shr    eax,0x18
c001e624:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e627:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e62b:	3d ff 00 00 00       	cmp    eax,0xff
c001e630:	75 3a                	jne    c001e66c <apicOpen()+0x16c>
c001e632:	e8 5b fe ff ff       	call   c001e492 <apicGetBase()>
c001e637:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e63b:	83 fa 01             	cmp    edx,0x1
c001e63e:	75 07                	jne    c001e647 <apicOpen()+0x147>
c001e640:	ba 60 03 00 00       	mov    edx,0x360
c001e645:	eb 05                	jmp    c001e64c <apicOpen()+0x14c>
c001e647:	ba 50 03 00 00       	mov    edx,0x350
c001e64c:	01 d0                	add    eax,edx
c001e64e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e651:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e654:	8b 00                	mov    eax,DWORD PTR [eax]
c001e656:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e659:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e660:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e664:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e667:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e66a:	89 10                	mov    DWORD PTR [eax],edx
c001e66c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e670:	e9 7a ff ff ff       	jmp    c001e5ef <apicOpen()+0xef>
c001e675:	90                   	nop
c001e676:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e679:	c9                   	leave  
c001e67a:	c3                   	ret    
c001e67b:	90                   	nop

c001e67c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e67c:	55                   	push   ebp
c001e67d:	89 e5                	mov    ebp,esp
c001e67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e682:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e688:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e68b:	72 1d                	jb     c001e6aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e690:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e699:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e69f:	01 d0                	add    eax,edx
c001e6a1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6a4:	73 04                	jae    c001e6aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6a6:	b0 01                	mov    al,0x1
c001e6a8:	eb 02                	jmp    c001e6ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e6aa:	b0 00                	mov    al,0x0
c001e6ac:	5d                   	pop    ebp
c001e6ad:	c3                   	ret    

c001e6ae <IOAPIC::read(int)>:
c001e6ae:	55                   	push   ebp
c001e6af:	89 e5                	mov    ebp,esp
c001e6b1:	83 ec 10             	sub    esp,0x10
c001e6b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6c3:	0f b6 d0             	movzx  edx,al
c001e6c6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6c9:	89 10                	mov    DWORD PTR [eax],edx
c001e6cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6ce:	83 c0 10             	add    eax,0x10
c001e6d1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6d3:	c9                   	leave  
c001e6d4:	c3                   	ret    
c001e6d5:	90                   	nop

c001e6d6 <IOAPIC::open(int, int, void*)>:
c001e6d6:	55                   	push   ebp
c001e6d7:	89 e5                	mov    ebp,esp
c001e6d9:	57                   	push   edi
c001e6da:	56                   	push   esi
c001e6db:	53                   	push   ebx
c001e6dc:	83 ec 04             	sub    esp,0x4
c001e6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e6e5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6f4:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6fe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e707:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e70d:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e717:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e71d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e720:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e729:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e72f:	0f b6 f0             	movzx  esi,al
c001e732:	89 d0                	mov    eax,edx
c001e734:	ba 00 00 00 00       	mov    edx,0x0
c001e739:	89 c7                	mov    edi,eax
c001e73b:	83 e7 ff             	and    edi,0xffffffff
c001e73e:	89 f9                	mov    ecx,edi
c001e740:	0f b6 da             	movzx  ebx,dl
c001e743:	89 c8                	mov    eax,ecx
c001e745:	89 da                	mov    edx,ebx
c001e747:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e74a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e74d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e751:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e755:	83 e0 00             	and    eax,0x0
c001e758:	09 d0                	or     eax,edx
c001e75a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e761:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e767:	8d 50 01             	lea    edx,[eax+0x1]
c001e76a:	88 d1                	mov    cl,dl
c001e76c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e76f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e775:	0f b6 d0             	movzx  edx,al
c001e778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e77b:	83 c2 08             	add    edx,0x8
c001e77e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e782:	0f b6 c9             	movzx  ecx,cl
c001e785:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e78b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e78f:	6a 01                	push   0x1
c001e791:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e794:	e8 15 ff ff ff       	call   c001e6ae <IOAPIC::read(int)>
c001e799:	83 c4 08             	add    esp,0x8
c001e79c:	c1 f8 10             	sar    eax,0x10
c001e79f:	0f b6 c0             	movzx  eax,al
c001e7a2:	8d 50 01             	lea    edx,[eax+0x1]
c001e7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7a8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e7ae:	b8 00 00 00 00       	mov    eax,0x0
c001e7b3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e7b6:	5b                   	pop    ebx
c001e7b7:	5e                   	pop    esi
c001e7b8:	5f                   	pop    edi
c001e7b9:	5d                   	pop    ebp
c001e7ba:	c3                   	ret    
c001e7bb:	90                   	nop

c001e7bc <IOAPIC::write(int, int)>:
c001e7bc:	55                   	push   ebp
c001e7bd:	89 e5                	mov    ebp,esp
c001e7bf:	83 ec 10             	sub    esp,0x10
c001e7c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e7cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e7ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7d1:	0f b6 d0             	movzx  edx,al
c001e7d4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7d7:	89 10                	mov    DWORD PTR [eax],edx
c001e7d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7dc:	8d 50 10             	lea    edx,[eax+0x10]
c001e7df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e7e2:	89 02                	mov    DWORD PTR [edx],eax
c001e7e4:	90                   	nop
c001e7e5:	c9                   	leave  
c001e7e6:	c3                   	ret    
c001e7e7:	90                   	nop

c001e7e8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e7e8:	55                   	push   ebp
c001e7e9:	89 e5                	mov    ebp,esp
c001e7eb:	53                   	push   ebx
c001e7ec:	83 ec 2c             	sub    esp,0x2c
c001e7ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7f2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e7f5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e7f8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e7fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e801:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e804:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e807:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e80a:	88 d8                	mov    al,bl
c001e80c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e80f:	88 c8                	mov    al,cl
c001e811:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e814:	88 d0                	mov    al,dl
c001e816:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e819:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e81d:	83 c0 08             	add    eax,0x8
c001e820:	d1 e0                	shl    eax,1
c001e822:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e825:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e829:	83 c0 08             	add    eax,0x8
c001e82c:	d1 e0                	shl    eax,1
c001e82e:	83 c0 01             	add    eax,0x1
c001e831:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e834:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e837:	50                   	push   eax
c001e838:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e83b:	e8 6e fe ff ff       	call   c001e6ae <IOAPIC::read(int)>
c001e840:	83 c4 08             	add    esp,0x8
c001e843:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e846:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e84d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e850:	c1 e0 18             	shl    eax,0x18
c001e853:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e856:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e859:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e85c:	52                   	push   edx
c001e85d:	50                   	push   eax
c001e85e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e861:	e8 56 ff ff ff       	call   c001e7bc <IOAPIC::write(int, int)>
c001e866:	83 c4 0c             	add    esp,0xc
c001e869:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e86c:	50                   	push   eax
c001e86d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e870:	e8 39 fe ff ff       	call   c001e6ae <IOAPIC::read(int)>
c001e875:	83 c4 08             	add    esp,0x8
c001e878:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e87b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e882:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e889:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e890:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e894:	85 c0                	test   eax,eax
c001e896:	74 09                	je     c001e8a1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e898:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e89f:	eb 07                	jmp    c001e8a8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e8a1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e8a8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e8ac:	85 c0                	test   eax,eax
c001e8ae:	74 09                	je     c001e8b9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e8b0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e8b7:	eb 07                	jmp    c001e8c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e8b9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e8c0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e8c7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e8cb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e8ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e8d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8d4:	52                   	push   edx
c001e8d5:	50                   	push   eax
c001e8d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8d9:	e8 de fe ff ff       	call   c001e7bc <IOAPIC::write(int, int)>
c001e8de:	83 c4 0c             	add    esp,0xc
c001e8e1:	90                   	nop
c001e8e2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e8e5:	c9                   	leave  
c001e8e6:	c3                   	ret    
c001e8e7:	90                   	nop

c001e8e8 <APICTimer::close(int, int, void*)>:
c001e8e8:	b8 00 00 00 00       	mov    eax,0x0
c001e8ed:	c3                   	ret    
c001e8ee:	66 90                	xchg   ax,ax

c001e8f0 <apicTimerHandler(regs*, void*)>:
c001e8f0:	83 ec 0c             	sub    esp,0xc
c001e8f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e8f9:	b8 10 27 00 00       	mov    eax,0x2710
c001e8fe:	ba 00 00 00 00       	mov    edx,0x0
c001e903:	f7 f1                	div    ecx
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	50                   	push   eax
c001e909:	e8 a2 f8 fe ff       	call   c000e1b0 <timerHandler(unsigned int)>
c001e90e:	83 c4 10             	add    esp,0x10
c001e911:	90                   	nop
c001e912:	83 c4 0c             	add    esp,0xc
c001e915:	c3                   	ret    
c001e916:	66 90                	xchg   ax,ax

c001e918 <APICTimer::open(int, int, void*)>:
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e921:	83 c0 24             	add    eax,0x24
c001e924:	8b 00                	mov    eax,DWORD PTR [eax]
c001e926:	83 ec 08             	sub    esp,0x8
c001e929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e931:	ff d0                	call   eax
c001e933:	83 c4 10             	add    esp,0x10
c001e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e93e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e948:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e94c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e952:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e956:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e95c:	83 ec 0c             	sub    esp,0xc
c001e95f:	51                   	push   ecx
c001e960:	6a 01                	push   0x1
c001e962:	68 f0 e8 01 c0       	push   0xc001e8f0
c001e967:	52                   	push   edx
c001e968:	50                   	push   eax
c001e969:	e8 82 dd fe ff       	call   c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e96e:	83 c4 20             	add    esp,0x20
c001e971:	89 c2                	mov    edx,eax
c001e973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e977:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e97d:	b8 00 00 00 00       	mov    eax,0x0
c001e982:	83 c4 0c             	add    esp,0xc
c001e985:	c3                   	ret    
c001e986:	66 90                	xchg   ax,ax

c001e988 <APICTimer::write(int)>:
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	83 ec 0c             	sub    esp,0xc
c001e98e:	68 54 30 02 c0       	push   0xc0023054
c001e993:	e8 49 29 ff ff       	call   c00112e1 <KePanic(char const*)>
c001e998:	83 c4 10             	add    esp,0x10
c001e99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9a9:	90                   	nop
c001e9aa:	83 c4 0c             	add    esp,0xc
c001e9ad:	c3                   	ret    
c001e9ae:	66 90                	xchg   ax,ax

c001e9b0 <APICTimer::APICTimer()>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	83 ec 08             	sub    esp,0x8
c001e9ba:	68 64 30 02 c0       	push   0xc0023064
c001e9bf:	50                   	push   eax
c001e9c0:	e8 1f f7 fe ff       	call   c000e0e4 <Timer::Timer(char const*)>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	ba 78 30 02 c0       	mov    edx,0xc0023078
c001e9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d1:	89 10                	mov    DWORD PTR [eax],edx
c001e9d3:	90                   	nop
c001e9d4:	83 c4 0c             	add    esp,0xc
c001e9d7:	c3                   	ret    

c001e9d8 <PIT::write(int)>:
c001e9d8:	83 ec 10             	sub    esp,0x10
c001e9db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e9e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e9ed:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e9f2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e9f7:	89 c2                	mov    edx,eax
c001e9f9:	c1 fa 1f             	sar    edx,0x1f
c001e9fc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ea00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea04:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ea0b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ea10:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ea14:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ea19:	ee                   	out    dx,al
c001ea1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea1e:	0f b6 c0             	movzx  eax,al
c001ea21:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ea28:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ea2c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ea30:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ea35:	ee                   	out    dx,al
c001ea36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea3a:	c1 f8 08             	sar    eax,0x8
c001ea3d:	0f b6 c0             	movzx  eax,al
c001ea40:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ea47:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea4f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ea54:	ee                   	out    dx,al
c001ea55:	90                   	nop
c001ea56:	83 c4 10             	add    esp,0x10
c001ea59:	c3                   	ret    
c001ea5a:	66 90                	xchg   ax,ax

c001ea5c <pitHandler(regs*, void*)>:
c001ea5c:	83 ec 0c             	sub    esp,0xc
c001ea5f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ea65:	b8 10 27 00 00       	mov    eax,0x2710
c001ea6a:	89 c2                	mov    edx,eax
c001ea6c:	c1 fa 1f             	sar    edx,0x1f
c001ea6f:	f7 f9                	idiv   ecx
c001ea71:	83 ec 0c             	sub    esp,0xc
c001ea74:	50                   	push   eax
c001ea75:	e8 36 f7 fe ff       	call   c000e1b0 <timerHandler(unsigned int)>
c001ea7a:	83 c4 10             	add    esp,0x10
c001ea7d:	90                   	nop
c001ea7e:	83 c4 0c             	add    esp,0xc
c001ea81:	c3                   	ret    
c001ea82:	66 90                	xchg   ax,ax

c001ea84 <PIT::open(int, int, void*)>:
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea8d:	83 c0 24             	add    eax,0x24
c001ea90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea92:	83 ec 08             	sub    esp,0x8
c001ea95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea9d:	ff d0                	call   eax
c001ea9f:	83 c4 10             	add    esp,0x10
c001eaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa6:	83 ec 0c             	sub    esp,0xc
c001eaa9:	6a 00                	push   0x0
c001eaab:	6a 01                	push   0x1
c001eaad:	68 5c ea 01 c0       	push   0xc001ea5c
c001eab2:	6a 00                	push   0x0
c001eab4:	50                   	push   eax
c001eab5:	e8 36 dc fe ff       	call   c000c6f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaba:	83 c4 20             	add    esp,0x20
c001eabd:	89 c2                	mov    edx,eax
c001eabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eac9:	b8 00 00 00 00       	mov    eax,0x0
c001eace:	83 c4 0c             	add    esp,0xc
c001ead1:	c3                   	ret    
c001ead2:	66 90                	xchg   ax,ax

c001ead4 <PIT::close(int, int, void*)>:
c001ead4:	83 ec 0c             	sub    esp,0xc
c001ead7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eadb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae9:	6a 01                	push   0x1
c001eaeb:	68 5c ea 01 c0       	push   0xc001ea5c
c001eaf0:	6a 00                	push   0x0
c001eaf2:	50                   	push   eax
c001eaf3:	e8 2e dc fe ff       	call   c000c726 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eaf8:	83 c4 10             	add    esp,0x10
c001eafb:	b8 00 00 00 00       	mov    eax,0x0
c001eb00:	83 c4 0c             	add    esp,0xc
c001eb03:	c3                   	ret    

c001eb04 <PIT::PIT()>:
c001eb04:	83 ec 0c             	sub    esp,0xc
c001eb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0b:	83 ec 08             	sub    esp,0x8
c001eb0e:	68 a0 30 02 c0       	push   0xc00230a0
c001eb13:	50                   	push   eax
c001eb14:	e8 cb f5 fe ff       	call   c000e0e4 <Timer::Timer(char const*)>
c001eb19:	83 c4 10             	add    esp,0x10
c001eb1c:	ba c8 30 02 c0       	mov    edx,0xc00230c8
c001eb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb25:	89 10                	mov    DWORD PTR [eax],edx
c001eb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb31:	0f b6 d0             	movzx  edx,al
c001eb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb38:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb49:	0f b6 d0             	movzx  edx,al
c001eb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb50:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb5f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb62:	88 d1                	mov    cl,dl
c001eb64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb68:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eb6e:	0f b6 d0             	movzx  edx,al
c001eb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eb79:	83 e1 3f             	and    ecx,0x3f
c001eb7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eb80:	90                   	nop
c001eb81:	83 c4 0c             	add    esp,0xc
c001eb84:	c3                   	ret    
c001eb85:	66 90                	xchg   ax,ax
c001eb87:	66 90                	xchg   ax,ax
c001eb89:	66 90                	xchg   ax,ax
c001eb8b:	66 90                	xchg   ax,ax
c001eb8d:	66 90                	xchg   ax,ax
c001eb8f:	90                   	nop

c001eb90 <avxDetect>:
c001eb90:	b8 01 00 00 00       	mov    eax,0x1
c001eb95:	0f a2                	cpuid  
c001eb97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001eb9d:	74 15                	je     c001ebb4 <avxDetect.noAVX>
c001eb9f:	b8 01 00 00 00       	mov    eax,0x1
c001eba4:	0f a2                	cpuid  
c001eba6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ebac:	74 06                	je     c001ebb4 <avxDetect.noAVX>
c001ebae:	b8 01 00 00 00       	mov    eax,0x1
c001ebb3:	c3                   	ret    

c001ebb4 <avxDetect.noAVX>:
c001ebb4:	b8 00 00 00 00       	mov    eax,0x0
c001ebb9:	c3                   	ret    

c001ebba <avxSave>:
c001ebba:	53                   	push   ebx
c001ebbb:	52                   	push   edx
c001ebbc:	31 c0                	xor    eax,eax
c001ebbe:	48                   	dec    eax
c001ebbf:	89 c2                	mov    edx,eax
c001ebc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebc5:	0f ae 23             	xsave  [ebx]
c001ebc8:	5a                   	pop    edx
c001ebc9:	5b                   	pop    ebx
c001ebca:	c3                   	ret    

c001ebcb <avxLoad>:
c001ebcb:	53                   	push   ebx
c001ebcc:	52                   	push   edx
c001ebcd:	31 c0                	xor    eax,eax
c001ebcf:	48                   	dec    eax
c001ebd0:	89 c2                	mov    edx,eax
c001ebd2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebd6:	0f ae 2b             	xrstor [ebx]
c001ebd9:	5a                   	pop    edx
c001ebda:	5b                   	pop    ebx
c001ebdb:	c3                   	ret    

c001ebdc <avxInit>:
c001ebdc:	e8 67 03 00 00       	call   c001ef48 <sseInit>
c001ebe1:	50                   	push   eax
c001ebe2:	51                   	push   ecx
c001ebe3:	0f 20 e0             	mov    eax,cr4
c001ebe6:	0d 00 00 04 00       	or     eax,0x40000
c001ebeb:	0f 22 e0             	mov    cr4,eax
c001ebee:	31 c9                	xor    ecx,ecx
c001ebf0:	0f 01 d0             	xgetbv 
c001ebf3:	0d 07 00 00 00       	or     eax,0x7
c001ebf8:	0f 01 d1             	xsetbv 
c001ebfb:	59                   	pop    ecx
c001ebfc:	58                   	pop    eax
c001ebfd:	c3                   	ret    

c001ebfe <avxClose>:
c001ebfe:	c3                   	ret    

c001ebff <wouldSheSayYes>:
c001ebff:	c3                   	ret    
c001ec00:	49                   	dec    ecx
c001ec01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ec05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ec09:	75 20                	jne    c001ec2b <isr0+0xb>
c001ec0b:	4e                   	dec    esi
c001ec0c:	79 61                	jns    c001ec6f <isr7+0x3>
c001ec0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ec13:	66 90                	xchg   ax,ax
c001ec15:	66 90                	xchg   ax,ax
c001ec17:	66 90                	xchg   ax,ax
c001ec19:	66 90                	xchg   ax,ax
c001ec1b:	66 90                	xchg   ax,ax
c001ec1d:	66 90                	xchg   ax,ax
c001ec1f:	90                   	nop

c001ec20 <isr0>:
c001ec20:	fa                   	cli    
c001ec21:	68 00 00 00 00       	push   0x0
c001ec26:	68 00 00 00 00       	push   0x0
c001ec2b:	e9 56 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec30 <isr1>:
c001ec30:	fa                   	cli    
c001ec31:	6a 00                	push   0x0
c001ec33:	6a 01                	push   0x1
c001ec35:	e9 4c 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec3a <isr2>:
c001ec3a:	fa                   	cli    
c001ec3b:	6a 00                	push   0x0
c001ec3d:	6a 02                	push   0x2
c001ec3f:	e9 42 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec44 <isr3>:
c001ec44:	fa                   	cli    
c001ec45:	6a 00                	push   0x0
c001ec47:	6a 03                	push   0x3
c001ec49:	e9 38 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec4e <isr4>:
c001ec4e:	fa                   	cli    
c001ec4f:	6a 00                	push   0x0
c001ec51:	6a 04                	push   0x4
c001ec53:	e9 2e 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec58 <isr5>:
c001ec58:	fa                   	cli    
c001ec59:	6a 00                	push   0x0
c001ec5b:	6a 05                	push   0x5
c001ec5d:	e9 24 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec62 <isr6>:
c001ec62:	fa                   	cli    
c001ec63:	6a 00                	push   0x0
c001ec65:	6a 06                	push   0x6
c001ec67:	e9 1a 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec6c <isr7>:
c001ec6c:	fa                   	cli    
c001ec6d:	6a 00                	push   0x0
c001ec6f:	6a 07                	push   0x7
c001ec71:	e9 10 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec76 <isr8>:
c001ec76:	fa                   	cli    
c001ec77:	6a 08                	push   0x8
c001ec79:	e9 08 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec7e <isr9>:
c001ec7e:	fa                   	cli    
c001ec7f:	6a 00                	push   0x0
c001ec81:	6a 09                	push   0x9
c001ec83:	e9 fe 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ec88 <isr10>:
c001ec88:	fa                   	cli    
c001ec89:	6a 0a                	push   0xa
c001ec8b:	e9 f6 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ec90 <isr11>:
c001ec90:	fa                   	cli    
c001ec91:	6a 0b                	push   0xb
c001ec93:	e9 ee 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ec98 <isr12>:
c001ec98:	fa                   	cli    
c001ec99:	6a 0c                	push   0xc
c001ec9b:	e9 e6 00 00 00       	jmp    c001ed86 <int_common_stub>

c001eca0 <isr13>:
c001eca0:	fa                   	cli    
c001eca1:	6a 0d                	push   0xd
c001eca3:	53                   	push   ebx
c001eca4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eca8:	81 fb 76 ee 01 c0    	cmp    ebx,0xc001ee76
c001ecae:	5b                   	pop    ebx
c001ecaf:	0f 84 c3 01 00 00    	je     c001ee78 <finishSignal2>
c001ecb5:	e9 cc 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecba <isr14>:
c001ecba:	fa                   	cli    
c001ecbb:	6a 0e                	push   0xe
c001ecbd:	e9 c4 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecc2 <isr15>:
c001ecc2:	fa                   	cli    
c001ecc3:	6a 00                	push   0x0
c001ecc5:	6a 0f                	push   0xf
c001ecc7:	e9 ba 00 00 00       	jmp    c001ed86 <int_common_stub>

c001eccc <isr16>:
c001eccc:	fa                   	cli    
c001eccd:	6a 00                	push   0x0
c001eccf:	6a 10                	push   0x10
c001ecd1:	e9 b0 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecd6 <isr17>:
c001ecd6:	fa                   	cli    
c001ecd7:	6a 00                	push   0x0
c001ecd9:	6a 11                	push   0x11
c001ecdb:	e9 a6 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ece0 <isr18>:
c001ece0:	fa                   	cli    
c001ece1:	6a 00                	push   0x0
c001ece3:	6a 12                	push   0x12
c001ece5:	e9 9c 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecea <irq3>:
c001ecea:	fa                   	cli    
c001eceb:	6a 00                	push   0x0
c001eced:	6a 23                	push   0x23
c001ecef:	e9 92 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecf4 <irq4>:
c001ecf4:	fa                   	cli    
c001ecf5:	6a 00                	push   0x0
c001ecf7:	6a 24                	push   0x24
c001ecf9:	e9 88 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecfe <irq5>:
c001ecfe:	fa                   	cli    
c001ecff:	6a 00                	push   0x0
c001ed01:	6a 25                	push   0x25
c001ed03:	e9 7e 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed08 <irq6>:
c001ed08:	fa                   	cli    
c001ed09:	6a 00                	push   0x0
c001ed0b:	6a 26                	push   0x26
c001ed0d:	e9 74 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed12 <irq7>:
c001ed12:	fa                   	cli    
c001ed13:	6a 00                	push   0x0
c001ed15:	6a 27                	push   0x27
c001ed17:	e9 6a 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed1c <irq8>:
c001ed1c:	fa                   	cli    
c001ed1d:	6a 00                	push   0x0
c001ed1f:	6a 28                	push   0x28
c001ed21:	e9 60 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed26 <irq9>:
c001ed26:	fa                   	cli    
c001ed27:	6a 00                	push   0x0
c001ed29:	6a 29                	push   0x29
c001ed2b:	e9 56 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed30 <irq10>:
c001ed30:	fa                   	cli    
c001ed31:	6a 00                	push   0x0
c001ed33:	6a 2a                	push   0x2a
c001ed35:	e9 4c 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed3a <irq11>:
c001ed3a:	fa                   	cli    
c001ed3b:	6a 00                	push   0x0
c001ed3d:	6a 2b                	push   0x2b
c001ed3f:	e9 42 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed44 <irq12>:
c001ed44:	fa                   	cli    
c001ed45:	6a 00                	push   0x0
c001ed47:	6a 2c                	push   0x2c
c001ed49:	e9 38 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed4e <irq13>:
c001ed4e:	fa                   	cli    
c001ed4f:	6a 00                	push   0x0
c001ed51:	6a 2d                	push   0x2d
c001ed53:	e9 2e 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed58 <irq14>:
c001ed58:	fa                   	cli    
c001ed59:	6a 00                	push   0x0
c001ed5b:	6a 2e                	push   0x2e
c001ed5d:	e9 24 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed62 <irq15>:
c001ed62:	fa                   	cli    
c001ed63:	6a 00                	push   0x0
c001ed65:	6a 2f                	push   0x2f
c001ed67:	e9 1a 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed6c <irq1>:
c001ed6c:	fa                   	cli    
c001ed6d:	6a 00                	push   0x0
c001ed6f:	6a 21                	push   0x21
c001ed71:	eb 13                	jmp    c001ed86 <int_common_stub>

c001ed73 <irq2>:
c001ed73:	fa                   	cli    
c001ed74:	6a 00                	push   0x0
c001ed76:	6a 22                	push   0x22
c001ed78:	eb 0c                	jmp    c001ed86 <int_common_stub>

c001ed7a <isr96>:
c001ed7a:	6a 00                	push   0x0
c001ed7c:	6a 60                	push   0x60
c001ed7e:	fb                   	sti    
c001ed7f:	eb 37                	jmp    c001edb8 <syscall_common_stub>

c001ed81 <irq0>:
c001ed81:	fa                   	cli    
c001ed82:	6a 00                	push   0x0
c001ed84:	6a 20                	push   0x20

c001ed86 <int_common_stub>:
c001ed86:	60                   	pusha  
c001ed87:	1e                   	push   ds
c001ed88:	06                   	push   es
c001ed89:	0f a0                	push   fs
c001ed8b:	0f a8                	push   gs
c001ed8d:	66 b8 10 00          	mov    ax,0x10
c001ed91:	66 8e d8             	mov    ds,ax
c001ed94:	66 8e c0             	mov    es,ax
c001ed97:	66 8e e0             	mov    fs,ax
c001ed9a:	66 8e e8             	mov    gs,ax
c001ed9d:	54                   	push   esp
c001ed9e:	fc                   	cld    
c001ed9f:	e8 4c de fe ff       	call   c000cbf0 <int_handler>
c001eda4:	81 c4 04 00 00 00    	add    esp,0x4
c001edaa:	0f a9                	pop    gs
c001edac:	0f a1                	pop    fs
c001edae:	07                   	pop    es
c001edaf:	1f                   	pop    ds
c001edb0:	61                   	popa   
c001edb1:	81 c4 08 00 00 00    	add    esp,0x8
c001edb7:	cf                   	iret   

c001edb8 <syscall_common_stub>:
c001edb8:	60                   	pusha  
c001edb9:	1e                   	push   ds
c001edba:	06                   	push   es
c001edbb:	0f a0                	push   fs
c001edbd:	0f a8                	push   gs
c001edbf:	66 b8 10 00          	mov    ax,0x10
c001edc3:	66 8e d8             	mov    ds,ax
c001edc6:	66 8e c0             	mov    es,ax
c001edc9:	66 8e e0             	mov    fs,ax
c001edcc:	66 8e e8             	mov    gs,ax
c001edcf:	54                   	push   esp
c001edd0:	fc                   	cld    
c001edd1:	e8 1a de fe ff       	call   c000cbf0 <int_handler>
c001edd6:	81 c4 04 00 00 00    	add    esp,0x4
c001eddc:	0f a9                	pop    gs
c001edde:	0f a1                	pop    fs
c001ede0:	07                   	pop    es
c001ede1:	1f                   	pop    ds
c001ede2:	e8 0c 2b ff ff       	call   c00118f3 <KiCheckSignalZ>
c001ede7:	3d 00 00 00 00       	cmp    eax,0x0
c001edec:	0f 84 c0 00 00 00    	je     c001eeb2 <skipSignals>
c001edf2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001edf7:	61                   	popa   
c001edf8:	53                   	push   ebx
c001edf9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001edff:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ee02:	5b                   	pop    ebx
c001ee03:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ee08:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ee0b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ee0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ee11:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ee14:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ee17:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ee1a:	81 c4 08 00 00 00    	add    esp,0x8
c001ee20:	5e                   	pop    esi
c001ee21:	5b                   	pop    ebx
c001ee22:	59                   	pop    ecx
c001ee23:	5a                   	pop    edx
c001ee24:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ee27:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ee2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ee2d:	52                   	push   edx
c001ee2e:	51                   	push   ecx
c001ee2f:	53                   	push   ebx
c001ee30:	56                   	push   esi
c001ee31:	81 ec 08 00 00 00    	sub    esp,0x8
c001ee37:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ee3a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ee3d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ee40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ee43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ee46:	60                   	pusha  
c001ee47:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ee4d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ee50:	89 e3                	mov    ebx,esp
c001ee52:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ee55:	52                   	push   edx
c001ee56:	68 76 ee 01 c0       	push   0xc001ee76
c001ee5b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ee5e:	89 dc                	mov    esp,ebx
c001ee60:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ee63:	68 23 00 00 00       	push   0x23
c001ee68:	51                   	push   ecx
c001ee69:	68 02 02 00 00       	push   0x202
c001ee6e:	68 1b 00 00 00       	push   0x1b
c001ee73:	ff 36                	push   DWORD PTR [esi]
c001ee75:	cf                   	iret   

c001ee76 <finishSignal>:
c001ee76:	cd 0f                	int    0xf

c001ee78 <finishSignal2>:
c001ee78:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ee7e:	e8 ed 2a ff ff       	call   c0011970 <KiFinishSignalZ>
c001ee83:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ee89:	68 23 00 00 00       	push   0x23
c001ee8e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ee91:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ee94:	68 1b 00 00 00       	push   0x1b
c001ee99:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ee9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ee9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eea2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eea5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eea8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001eeab:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001eeae:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001eeb1:	cf                   	iret   

c001eeb2 <skipSignals>:
c001eeb2:	61                   	popa   
c001eeb3:	81 c4 08 00 00 00    	add    esp,0x8
c001eeb9:	cf                   	iret   
c001eeba:	90                   	nop
c001eebb:	90                   	nop

c001eebc <irq16>:
c001eebc:	fa                   	cli    
c001eebd:	6a 00                	push   0x0
c001eebf:	6a 30                	push   0x30
c001eec1:	e9 c0 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eec6 <irq17>:
c001eec6:	fa                   	cli    
c001eec7:	6a 00                	push   0x0
c001eec9:	6a 31                	push   0x31
c001eecb:	e9 b6 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eed0 <irq18>:
c001eed0:	fa                   	cli    
c001eed1:	6a 00                	push   0x0
c001eed3:	6a 32                	push   0x32
c001eed5:	e9 ac fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eeda <irq19>:
c001eeda:	fa                   	cli    
c001eedb:	6a 00                	push   0x0
c001eedd:	6a 33                	push   0x33
c001eedf:	e9 a2 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eee4 <irq20>:
c001eee4:	fa                   	cli    
c001eee5:	6a 00                	push   0x0
c001eee7:	6a 34                	push   0x34
c001eee9:	e9 98 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eeee <irq21>:
c001eeee:	fa                   	cli    
c001eeef:	6a 00                	push   0x0
c001eef1:	6a 35                	push   0x35
c001eef3:	e9 8e fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eef8 <irq22>:
c001eef8:	fa                   	cli    
c001eef9:	6a 00                	push   0x0
c001eefb:	6a 36                	push   0x36
c001eefd:	e9 84 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001ef02 <irq23>:
c001ef02:	fa                   	cli    
c001ef03:	6a 00                	push   0x0
c001ef05:	6a 37                	push   0x37
c001ef07:	e9 7a fe ff ff       	jmp    c001ed86 <int_common_stub>
c001ef0c:	66 90                	xchg   ax,ax
c001ef0e:	66 90                	xchg   ax,ax

c001ef10 <i386GetRDRAND>:
c001ef10:	b9 64 00 00 00       	mov    ecx,0x64

c001ef15 <retry>:
c001ef15:	0f c7 f0             	rdrand eax
c001ef18:	72 05                	jb     c001ef1f <retry.done>
c001ef1a:	e2 f9                	loop   c001ef15 <retry>

c001ef1c <retry.fail>:
c001ef1c:	31 c0                	xor    eax,eax
c001ef1e:	c3                   	ret    

c001ef1f <retry.done>:
c001ef1f:	c3                   	ret    

c001ef20 <absolutelyNoChanceInHell>:
c001ef20:	b8 01 00 00 00       	mov    eax,0x1
c001ef25:	0f a2                	cpuid  
c001ef27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef2d:	74 06                	je     c001ef35 <sseDetect.noSSE>
c001ef2f:	b8 01 00 00 00       	mov    eax,0x1
c001ef34:	c3                   	ret    

c001ef35 <sseDetect.noSSE>:
c001ef35:	31 c0                	xor    eax,eax
c001ef37:	c3                   	ret    

c001ef38 <sseSave>:
c001ef38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef3c:	0f ae 00             	fxsave [eax]
c001ef3f:	c3                   	ret    

c001ef40 <sseLoad>:
c001ef40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef44:	0f ae 08             	fxrstor [eax]
c001ef47:	c3                   	ret    

c001ef48 <sseInit>:
c001ef48:	e8 42 00 00 00       	call   c001ef8f <x87Init>
c001ef4d:	0f 20 e0             	mov    eax,cr4
c001ef50:	66 0d 00 06          	or     ax,0x600
c001ef54:	0f 22 e0             	mov    cr4,eax
c001ef57:	c3                   	ret    

c001ef58 <sseClose>:
c001ef58:	c3                   	ret    
c001ef59:	66 90                	xchg   ax,ax
c001ef5b:	66 90                	xchg   ax,ax
c001ef5d:	66 90                	xchg   ax,ax
c001ef5f:	90                   	nop

c001ef60 <value_37F>:
c001ef60:	7f 03                	jg     c001ef65 <value_37A+0x1>

c001ef62 <value_37E>:
c001ef62:	7e 03                	jle    c001ef67 <x87Detect+0x1>

c001ef64 <value_37A>:
c001ef64:	7a 03                	jp     c001ef69 <x87Detect+0x3>

c001ef66 <x87Detect>:
c001ef66:	b8 01 00 00 00       	mov    eax,0x1
c001ef6b:	0f a2                	cpuid  
c001ef6d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ef73:	74 06                	je     c001ef7b <x87Detect.nox87>
c001ef75:	b8 01 00 00 00       	mov    eax,0x1
c001ef7a:	c3                   	ret    

c001ef7b <x87Detect.nox87>:
c001ef7b:	b8 00 00 00 00       	mov    eax,0x0
c001ef80:	c3                   	ret    

c001ef81 <x87Save>:
c001ef81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef85:	dd 30                	fnsave [eax]
c001ef87:	c3                   	ret    

c001ef88 <x87Load>:
c001ef88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8c:	dd 20                	frstor [eax]
c001ef8e:	c3                   	ret    

c001ef8f <x87Init>:
c001ef8f:	0f 20 c0             	mov    eax,cr0
c001ef92:	66 25 fb ff          	and    ax,0xfffb
c001ef96:	66 0d 22 00          	or     ax,0x22
c001ef9a:	0f 22 c0             	mov    cr0,eax
c001ef9d:	db e3                	fninit 
c001ef9f:	0f 06                	clts   
c001efa1:	d9 2d 64 ef 01 c0    	fldcw  WORD PTR ds:0xc001ef64
c001efa7:	c3                   	ret    

c001efa8 <x87Close>:
c001efa8:	c3                   	ret    
c001efa9:	66 90                	xchg   ax,ax
c001efab:	90                   	nop

c001efac <__do_global_ctors_aux>:
c001efac:	a1 60 ff 01 c0       	mov    eax,ds:0xc001ff60
c001efb1:	83 f8 ff             	cmp    eax,0xffffffff
c001efb4:	74 1a                	je     c001efd0 <__do_global_ctors_aux+0x24>
c001efb6:	55                   	push   ebp
c001efb7:	89 e5                	mov    ebp,esp
c001efb9:	53                   	push   ebx
c001efba:	52                   	push   edx
c001efbb:	bb 60 ff 01 c0       	mov    ebx,0xc001ff60
c001efc0:	ff d0                	call   eax
c001efc2:	83 eb 04             	sub    ebx,0x4
c001efc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001efc7:	83 f8 ff             	cmp    eax,0xffffffff
c001efca:	75 f4                	jne    c001efc0 <__do_global_ctors_aux+0x14>
c001efcc:	58                   	pop    eax
c001efcd:	5b                   	pop    ebx
c001efce:	5d                   	pop    ebp
c001efcf:	c3                   	ret    
c001efd0:	c3                   	ret    
c001efd1:	66 90                	xchg   ax,ax
c001efd3:	90                   	nop

c001efd4 <__divdi3>:
c001efd4:	55                   	push   ebp
c001efd5:	57                   	push   edi
c001efd6:	56                   	push   esi
c001efd7:	53                   	push   ebx
c001efd8:	83 ec 1c             	sub    esp,0x1c
c001efdb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001efdf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efe3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001efe6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001efea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001efee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eff2:	85 db                	test   ebx,ebx
c001eff4:	0f 88 8e 00 00 00    	js     c001f088 <__divdi3+0xb4>
c001effa:	89 dd                	mov    ebp,ebx
c001effc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f004:	89 d3                	mov    ebx,edx
c001f006:	85 d2                	test   edx,edx
c001f008:	79 0d                	jns    c001f017 <__divdi3+0x43>
c001f00a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f00e:	f7 d8                	neg    eax
c001f010:	83 d2 00             	adc    edx,0x0
c001f013:	f7 da                	neg    edx
c001f015:	89 d3                	mov    ebx,edx
c001f017:	89 c7                	mov    edi,eax
c001f019:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f01c:	85 db                	test   ebx,ebx
c001f01e:	75 48                	jne    c001f068 <__divdi3+0x94>
c001f020:	39 ef                	cmp    edi,ebp
c001f022:	76 24                	jbe    c001f048 <__divdi3+0x74>
c001f024:	89 ea                	mov    edx,ebp
c001f026:	f7 f7                	div    edi
c001f028:	89 c1                	mov    ecx,eax
c001f02a:	31 f6                	xor    esi,esi
c001f02c:	89 c8                	mov    eax,ecx
c001f02e:	89 f2                	mov    edx,esi
c001f030:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f034:	85 c9                	test   ecx,ecx
c001f036:	74 07                	je     c001f03f <__divdi3+0x6b>
c001f038:	f7 d8                	neg    eax
c001f03a:	83 d2 00             	adc    edx,0x0
c001f03d:	f7 da                	neg    edx
c001f03f:	83 c4 1c             	add    esp,0x1c
c001f042:	5b                   	pop    ebx
c001f043:	5e                   	pop    esi
c001f044:	5f                   	pop    edi
c001f045:	5d                   	pop    ebp
c001f046:	c3                   	ret    
c001f047:	90                   	nop
c001f048:	85 ff                	test   edi,edi
c001f04a:	75 0b                	jne    c001f057 <__divdi3+0x83>
c001f04c:	b8 01 00 00 00       	mov    eax,0x1
c001f051:	31 d2                	xor    edx,edx
c001f053:	f7 f3                	div    ebx
c001f055:	89 c7                	mov    edi,eax
c001f057:	31 d2                	xor    edx,edx
c001f059:	89 e8                	mov    eax,ebp
c001f05b:	f7 f7                	div    edi
c001f05d:	89 c6                	mov    esi,eax
c001f05f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f062:	f7 f7                	div    edi
c001f064:	89 c1                	mov    ecx,eax
c001f066:	eb c4                	jmp    c001f02c <__divdi3+0x58>
c001f068:	39 eb                	cmp    ebx,ebp
c001f06a:	77 3c                	ja     c001f0a8 <__divdi3+0xd4>
c001f06c:	0f bd f3             	bsr    esi,ebx
c001f06f:	83 f6 1f             	xor    esi,0x1f
c001f072:	75 40                	jne    c001f0b4 <__divdi3+0xe0>
c001f074:	39 eb                	cmp    ebx,ebp
c001f076:	72 09                	jb     c001f081 <__divdi3+0xad>
c001f078:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f07b:	0f 87 97 00 00 00    	ja     c001f118 <__divdi3+0x144>
c001f081:	b9 01 00 00 00       	mov    ecx,0x1
c001f086:	eb a4                	jmp    c001f02c <__divdi3+0x58>
c001f088:	f7 d9                	neg    ecx
c001f08a:	83 d3 00             	adc    ebx,0x0
c001f08d:	f7 db                	neg    ebx
c001f08f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f092:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f096:	89 dd                	mov    ebp,ebx
c001f098:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f0a0:	e9 5f ff ff ff       	jmp    c001f004 <__divdi3+0x30>
c001f0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0a8:	31 f6                	xor    esi,esi
c001f0aa:	31 c9                	xor    ecx,ecx
c001f0ac:	e9 7b ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0b4:	b8 20 00 00 00       	mov    eax,0x20
c001f0b9:	29 f0                	sub    eax,esi
c001f0bb:	89 f1                	mov    ecx,esi
c001f0bd:	d3 e3                	shl    ebx,cl
c001f0bf:	89 fa                	mov    edx,edi
c001f0c1:	88 c1                	mov    cl,al
c001f0c3:	d3 ea                	shr    edx,cl
c001f0c5:	09 da                	or     edx,ebx
c001f0c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0cb:	89 f1                	mov    ecx,esi
c001f0cd:	d3 e7                	shl    edi,cl
c001f0cf:	89 eb                	mov    ebx,ebp
c001f0d1:	88 c1                	mov    cl,al
c001f0d3:	d3 eb                	shr    ebx,cl
c001f0d5:	89 f1                	mov    ecx,esi
c001f0d7:	d3 e5                	shl    ebp,cl
c001f0d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f0dc:	88 c1                	mov    cl,al
c001f0de:	d3 ea                	shr    edx,cl
c001f0e0:	09 d5                	or     ebp,edx
c001f0e2:	89 e8                	mov    eax,ebp
c001f0e4:	89 da                	mov    edx,ebx
c001f0e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f0ea:	89 d3                	mov    ebx,edx
c001f0ec:	89 c5                	mov    ebp,eax
c001f0ee:	f7 e7                	mul    edi
c001f0f0:	39 d3                	cmp    ebx,edx
c001f0f2:	72 18                	jb     c001f10c <__divdi3+0x138>
c001f0f4:	74 0a                	je     c001f100 <__divdi3+0x12c>
c001f0f6:	89 e9                	mov    ecx,ebp
c001f0f8:	31 f6                	xor    esi,esi
c001f0fa:	e9 2d ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f0ff:	90                   	nop
c001f100:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f103:	89 f1                	mov    ecx,esi
c001f105:	d3 e7                	shl    edi,cl
c001f107:	39 c7                	cmp    edi,eax
c001f109:	73 eb                	jae    c001f0f6 <__divdi3+0x122>
c001f10b:	90                   	nop
c001f10c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f10f:	31 f6                	xor    esi,esi
c001f111:	e9 16 ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f116:	66 90                	xchg   ax,ax
c001f118:	31 c9                	xor    ecx,ecx
c001f11a:	e9 0d ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f11f:	90                   	nop

c001f120 <__moddi3>:
c001f120:	55                   	push   ebp
c001f121:	57                   	push   edi
c001f122:	56                   	push   esi
c001f123:	53                   	push   ebx
c001f124:	83 ec 2c             	sub    esp,0x2c
c001f127:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f12b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f12f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f133:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f137:	85 db                	test   ebx,ebx
c001f139:	0f 88 85 00 00 00    	js     c001f1c4 <__moddi3+0xa4>
c001f13f:	89 de                	mov    esi,ebx
c001f141:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f149:	89 d7                	mov    edi,edx
c001f14b:	85 d2                	test   edx,edx
c001f14d:	79 09                	jns    c001f158 <__moddi3+0x38>
c001f14f:	f7 d8                	neg    eax
c001f151:	83 d2 00             	adc    edx,0x0
c001f154:	f7 da                	neg    edx
c001f156:	89 d7                	mov    edi,edx
c001f158:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f15c:	89 cd                	mov    ebp,ecx
c001f15e:	85 ff                	test   edi,edi
c001f160:	75 52                	jne    c001f1b4 <__moddi3+0x94>
c001f162:	89 c3                	mov    ebx,eax
c001f164:	39 f0                	cmp    eax,esi
c001f166:	76 24                	jbe    c001f18c <__moddi3+0x6c>
c001f168:	89 c8                	mov    eax,ecx
c001f16a:	89 f2                	mov    edx,esi
c001f16c:	f7 f3                	div    ebx
c001f16e:	89 d6                	mov    esi,edx
c001f170:	89 f0                	mov    eax,esi
c001f172:	31 d2                	xor    edx,edx
c001f174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f178:	85 c9                	test   ecx,ecx
c001f17a:	74 07                	je     c001f183 <__moddi3+0x63>
c001f17c:	f7 d8                	neg    eax
c001f17e:	83 d2 00             	adc    edx,0x0
c001f181:	f7 da                	neg    edx
c001f183:	83 c4 2c             	add    esp,0x2c
c001f186:	5b                   	pop    ebx
c001f187:	5e                   	pop    esi
c001f188:	5f                   	pop    edi
c001f189:	5d                   	pop    ebp
c001f18a:	c3                   	ret    
c001f18b:	90                   	nop
c001f18c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f190:	85 db                	test   ebx,ebx
c001f192:	75 0d                	jne    c001f1a1 <__moddi3+0x81>
c001f194:	b8 01 00 00 00       	mov    eax,0x1
c001f199:	31 d2                	xor    edx,edx
c001f19b:	f7 f7                	div    edi
c001f19d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1a1:	89 f0                	mov    eax,esi
c001f1a3:	31 d2                	xor    edx,edx
c001f1a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1a9:	f7 f7                	div    edi
c001f1ab:	89 e8                	mov    eax,ebp
c001f1ad:	f7 f7                	div    edi
c001f1af:	89 d6                	mov    esi,edx
c001f1b1:	eb bd                	jmp    c001f170 <__moddi3+0x50>
c001f1b3:	90                   	nop
c001f1b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1b8:	39 f7                	cmp    edi,esi
c001f1ba:	76 20                	jbe    c001f1dc <__moddi3+0xbc>
c001f1bc:	89 c8                	mov    eax,ecx
c001f1be:	89 f2                	mov    edx,esi
c001f1c0:	eb b2                	jmp    c001f174 <__moddi3+0x54>
c001f1c2:	66 90                	xchg   ax,ax
c001f1c4:	f7 d9                	neg    ecx
c001f1c6:	83 d3 00             	adc    ebx,0x0
c001f1c9:	f7 db                	neg    ebx
c001f1cb:	89 de                	mov    esi,ebx
c001f1cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f1d5:	e9 6f ff ff ff       	jmp    c001f149 <__moddi3+0x29>
c001f1da:	66 90                	xchg   ax,ax
c001f1dc:	0f bd c7             	bsr    eax,edi
c001f1df:	83 f0 1f             	xor    eax,0x1f
c001f1e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f1e6:	75 24                	jne    c001f20c <__moddi3+0xec>
c001f1e8:	39 f7                	cmp    edi,esi
c001f1ea:	72 06                	jb     c001f1f2 <__moddi3+0xd2>
c001f1ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f1f0:	77 0c                	ja     c001f1fe <__moddi3+0xde>
c001f1f2:	89 e9                	mov    ecx,ebp
c001f1f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f1f8:	19 fe                	sbb    esi,edi
c001f1fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f202:	89 f2                	mov    edx,esi
c001f204:	e9 6b ff ff ff       	jmp    c001f174 <__moddi3+0x54>
c001f209:	8d 76 00             	lea    esi,[esi+0x0]
c001f20c:	b8 20 00 00 00       	mov    eax,0x20
c001f211:	89 c2                	mov    edx,eax
c001f213:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f217:	29 da                	sub    edx,ebx
c001f219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f21d:	88 d9                	mov    cl,bl
c001f21f:	d3 e7                	shl    edi,cl
c001f221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f225:	88 d1                	mov    cl,dl
c001f227:	d3 e8                	shr    eax,cl
c001f229:	09 c7                	or     edi,eax
c001f22b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f22f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f233:	89 d8                	mov    eax,ebx
c001f235:	88 d9                	mov    cl,bl
c001f237:	d3 e7                	shl    edi,cl
c001f239:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f23d:	89 f3                	mov    ebx,esi
c001f23f:	88 d1                	mov    cl,dl
c001f241:	d3 eb                	shr    ebx,cl
c001f243:	89 c7                	mov    edi,eax
c001f245:	88 c1                	mov    cl,al
c001f247:	d3 e6                	shl    esi,cl
c001f249:	89 e8                	mov    eax,ebp
c001f24b:	88 d1                	mov    cl,dl
c001f24d:	d3 e8                	shr    eax,cl
c001f24f:	09 f0                	or     eax,esi
c001f251:	89 f9                	mov    ecx,edi
c001f253:	d3 e5                	shl    ebp,cl
c001f255:	89 da                	mov    edx,ebx
c001f257:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f25b:	89 d3                	mov    ebx,edx
c001f25d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f261:	89 c6                	mov    esi,eax
c001f263:	89 d1                	mov    ecx,edx
c001f265:	39 d3                	cmp    ebx,edx
c001f267:	72 27                	jb     c001f290 <__moddi3+0x170>
c001f269:	74 21                	je     c001f28c <__moddi3+0x16c>
c001f26b:	29 f5                	sub    ebp,esi
c001f26d:	19 cb                	sbb    ebx,ecx
c001f26f:	89 de                	mov    esi,ebx
c001f271:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f275:	d3 e6                	shl    esi,cl
c001f277:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f27b:	89 f9                	mov    ecx,edi
c001f27d:	d3 ed                	shr    ebp,cl
c001f27f:	09 ee                	or     esi,ebp
c001f281:	89 f0                	mov    eax,esi
c001f283:	d3 eb                	shr    ebx,cl
c001f285:	89 da                	mov    edx,ebx
c001f287:	e9 e8 fe ff ff       	jmp    c001f174 <__moddi3+0x54>
c001f28c:	39 c5                	cmp    ebp,eax
c001f28e:	73 db                	jae    c001f26b <__moddi3+0x14b>
c001f290:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f294:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f298:	89 d1                	mov    ecx,edx
c001f29a:	89 c6                	mov    esi,eax
c001f29c:	eb cd                	jmp    c001f26b <__moddi3+0x14b>
c001f29e:	66 90                	xchg   ax,ax

c001f2a0 <__udivdi3>:
c001f2a0:	55                   	push   ebp
c001f2a1:	57                   	push   edi
c001f2a2:	56                   	push   esi
c001f2a3:	53                   	push   ebx
c001f2a4:	83 ec 1c             	sub    esp,0x1c
c001f2a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f2af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f2b7:	85 d2                	test   edx,edx
c001f2b9:	75 41                	jne    c001f2fc <__udivdi3+0x5c>
c001f2bb:	39 f7                	cmp    edi,esi
c001f2bd:	76 15                	jbe    c001f2d4 <__udivdi3+0x34>
c001f2bf:	89 e8                	mov    eax,ebp
c001f2c1:	89 f2                	mov    edx,esi
c001f2c3:	f7 f7                	div    edi
c001f2c5:	31 db                	xor    ebx,ebx
c001f2c7:	89 da                	mov    edx,ebx
c001f2c9:	83 c4 1c             	add    esp,0x1c
c001f2cc:	5b                   	pop    ebx
c001f2cd:	5e                   	pop    esi
c001f2ce:	5f                   	pop    edi
c001f2cf:	5d                   	pop    ebp
c001f2d0:	c3                   	ret    
c001f2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2d4:	89 f9                	mov    ecx,edi
c001f2d6:	85 ff                	test   edi,edi
c001f2d8:	75 0b                	jne    c001f2e5 <__udivdi3+0x45>
c001f2da:	b8 01 00 00 00       	mov    eax,0x1
c001f2df:	31 d2                	xor    edx,edx
c001f2e1:	f7 f7                	div    edi
c001f2e3:	89 c1                	mov    ecx,eax
c001f2e5:	31 d2                	xor    edx,edx
c001f2e7:	89 f0                	mov    eax,esi
c001f2e9:	f7 f1                	div    ecx
c001f2eb:	89 c3                	mov    ebx,eax
c001f2ed:	89 e8                	mov    eax,ebp
c001f2ef:	f7 f1                	div    ecx
c001f2f1:	89 da                	mov    edx,ebx
c001f2f3:	83 c4 1c             	add    esp,0x1c
c001f2f6:	5b                   	pop    ebx
c001f2f7:	5e                   	pop    esi
c001f2f8:	5f                   	pop    edi
c001f2f9:	5d                   	pop    ebp
c001f2fa:	c3                   	ret    
c001f2fb:	90                   	nop
c001f2fc:	39 f2                	cmp    edx,esi
c001f2fe:	77 1c                	ja     c001f31c <__udivdi3+0x7c>
c001f300:	0f bd da             	bsr    ebx,edx
c001f303:	83 f3 1f             	xor    ebx,0x1f
c001f306:	75 24                	jne    c001f32c <__udivdi3+0x8c>
c001f308:	39 f2                	cmp    edx,esi
c001f30a:	72 08                	jb     c001f314 <__udivdi3+0x74>
c001f30c:	39 ef                	cmp    edi,ebp
c001f30e:	0f 87 84 00 00 00    	ja     c001f398 <__udivdi3+0xf8>
c001f314:	b8 01 00 00 00       	mov    eax,0x1
c001f319:	eb ac                	jmp    c001f2c7 <__udivdi3+0x27>
c001f31b:	90                   	nop
c001f31c:	31 db                	xor    ebx,ebx
c001f31e:	31 c0                	xor    eax,eax
c001f320:	89 da                	mov    edx,ebx
c001f322:	83 c4 1c             	add    esp,0x1c
c001f325:	5b                   	pop    ebx
c001f326:	5e                   	pop    esi
c001f327:	5f                   	pop    edi
c001f328:	5d                   	pop    ebp
c001f329:	c3                   	ret    
c001f32a:	66 90                	xchg   ax,ax
c001f32c:	b8 20 00 00 00       	mov    eax,0x20
c001f331:	29 d8                	sub    eax,ebx
c001f333:	88 d9                	mov    cl,bl
c001f335:	d3 e2                	shl    edx,cl
c001f337:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f33b:	89 fa                	mov    edx,edi
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 ea                	shr    edx,cl
c001f341:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f345:	09 d1                	or     ecx,edx
c001f347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f34b:	88 d9                	mov    cl,bl
c001f34d:	d3 e7                	shl    edi,cl
c001f34f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f353:	89 f7                	mov    edi,esi
c001f355:	88 c1                	mov    cl,al
c001f357:	d3 ef                	shr    edi,cl
c001f359:	88 d9                	mov    cl,bl
c001f35b:	d3 e6                	shl    esi,cl
c001f35d:	89 ea                	mov    edx,ebp
c001f35f:	88 c1                	mov    cl,al
c001f361:	d3 ea                	shr    edx,cl
c001f363:	09 d6                	or     esi,edx
c001f365:	89 f0                	mov    eax,esi
c001f367:	89 fa                	mov    edx,edi
c001f369:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f36d:	89 d7                	mov    edi,edx
c001f36f:	89 c6                	mov    esi,eax
c001f371:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f375:	39 d7                	cmp    edi,edx
c001f377:	72 13                	jb     c001f38c <__udivdi3+0xec>
c001f379:	74 09                	je     c001f384 <__udivdi3+0xe4>
c001f37b:	89 f0                	mov    eax,esi
c001f37d:	31 db                	xor    ebx,ebx
c001f37f:	e9 43 ff ff ff       	jmp    c001f2c7 <__udivdi3+0x27>
c001f384:	88 d9                	mov    cl,bl
c001f386:	d3 e5                	shl    ebp,cl
c001f388:	39 c5                	cmp    ebp,eax
c001f38a:	73 ef                	jae    c001f37b <__udivdi3+0xdb>
c001f38c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f38f:	31 db                	xor    ebx,ebx
c001f391:	e9 31 ff ff ff       	jmp    c001f2c7 <__udivdi3+0x27>
c001f396:	66 90                	xchg   ax,ax
c001f398:	31 c0                	xor    eax,eax
c001f39a:	e9 28 ff ff ff       	jmp    c001f2c7 <__udivdi3+0x27>
c001f39f:	90                   	nop

c001f3a0 <__umoddi3>:
c001f3a0:	55                   	push   ebp
c001f3a1:	57                   	push   edi
c001f3a2:	56                   	push   esi
c001f3a3:	53                   	push   ebx
c001f3a4:	83 ec 1c             	sub    esp,0x1c
c001f3a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f3b7:	89 da                	mov    edx,ebx
c001f3b9:	85 c0                	test   eax,eax
c001f3bb:	75 37                	jne    c001f3f4 <__umoddi3+0x54>
c001f3bd:	39 df                	cmp    edi,ebx
c001f3bf:	76 13                	jbe    c001f3d4 <__umoddi3+0x34>
c001f3c1:	89 f0                	mov    eax,esi
c001f3c3:	f7 f7                	div    edi
c001f3c5:	89 d0                	mov    eax,edx
c001f3c7:	31 d2                	xor    edx,edx
c001f3c9:	83 c4 1c             	add    esp,0x1c
c001f3cc:	5b                   	pop    ebx
c001f3cd:	5e                   	pop    esi
c001f3ce:	5f                   	pop    edi
c001f3cf:	5d                   	pop    ebp
c001f3d0:	c3                   	ret    
c001f3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3d4:	89 fd                	mov    ebp,edi
c001f3d6:	85 ff                	test   edi,edi
c001f3d8:	75 0b                	jne    c001f3e5 <__umoddi3+0x45>
c001f3da:	b8 01 00 00 00       	mov    eax,0x1
c001f3df:	31 d2                	xor    edx,edx
c001f3e1:	f7 f7                	div    edi
c001f3e3:	89 c5                	mov    ebp,eax
c001f3e5:	89 d8                	mov    eax,ebx
c001f3e7:	31 d2                	xor    edx,edx
c001f3e9:	f7 f5                	div    ebp
c001f3eb:	89 f0                	mov    eax,esi
c001f3ed:	f7 f5                	div    ebp
c001f3ef:	89 d0                	mov    eax,edx
c001f3f1:	eb d4                	jmp    c001f3c7 <__umoddi3+0x27>
c001f3f3:	90                   	nop
c001f3f4:	89 f1                	mov    ecx,esi
c001f3f6:	39 d8                	cmp    eax,ebx
c001f3f8:	76 0a                	jbe    c001f404 <__umoddi3+0x64>
c001f3fa:	89 f0                	mov    eax,esi
c001f3fc:	83 c4 1c             	add    esp,0x1c
c001f3ff:	5b                   	pop    ebx
c001f400:	5e                   	pop    esi
c001f401:	5f                   	pop    edi
c001f402:	5d                   	pop    ebp
c001f403:	c3                   	ret    
c001f404:	0f bd e8             	bsr    ebp,eax
c001f407:	83 f5 1f             	xor    ebp,0x1f
c001f40a:	75 1c                	jne    c001f428 <__umoddi3+0x88>
c001f40c:	39 d8                	cmp    eax,ebx
c001f40e:	72 04                	jb     c001f414 <__umoddi3+0x74>
c001f410:	39 f7                	cmp    edi,esi
c001f412:	77 08                	ja     c001f41c <__umoddi3+0x7c>
c001f414:	89 da                	mov    edx,ebx
c001f416:	29 fe                	sub    esi,edi
c001f418:	19 c2                	sbb    edx,eax
c001f41a:	89 f1                	mov    ecx,esi
c001f41c:	89 c8                	mov    eax,ecx
c001f41e:	83 c4 1c             	add    esp,0x1c
c001f421:	5b                   	pop    ebx
c001f422:	5e                   	pop    esi
c001f423:	5f                   	pop    edi
c001f424:	5d                   	pop    ebp
c001f425:	c3                   	ret    
c001f426:	66 90                	xchg   ax,ax
c001f428:	ba 20 00 00 00       	mov    edx,0x20
c001f42d:	29 ea                	sub    edx,ebp
c001f42f:	89 e9                	mov    ecx,ebp
c001f431:	d3 e0                	shl    eax,cl
c001f433:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f437:	89 f8                	mov    eax,edi
c001f439:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f43d:	88 d1                	mov    cl,dl
c001f43f:	d3 e8                	shr    eax,cl
c001f441:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f445:	09 c1                	or     ecx,eax
c001f447:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f44b:	89 e9                	mov    ecx,ebp
c001f44d:	d3 e7                	shl    edi,cl
c001f44f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f453:	89 d8                	mov    eax,ebx
c001f455:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f459:	88 d1                	mov    cl,dl
c001f45b:	d3 e8                	shr    eax,cl
c001f45d:	89 c7                	mov    edi,eax
c001f45f:	89 e9                	mov    ecx,ebp
c001f461:	d3 e3                	shl    ebx,cl
c001f463:	89 f0                	mov    eax,esi
c001f465:	88 d1                	mov    cl,dl
c001f467:	d3 e8                	shr    eax,cl
c001f469:	09 d8                	or     eax,ebx
c001f46b:	89 e9                	mov    ecx,ebp
c001f46d:	d3 e6                	shl    esi,cl
c001f46f:	89 f3                	mov    ebx,esi
c001f471:	89 fa                	mov    edx,edi
c001f473:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f477:	89 d1                	mov    ecx,edx
c001f479:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f47d:	89 c6                	mov    esi,eax
c001f47f:	89 d7                	mov    edi,edx
c001f481:	39 d1                	cmp    ecx,edx
c001f483:	72 27                	jb     c001f4ac <__umoddi3+0x10c>
c001f485:	74 21                	je     c001f4a8 <__umoddi3+0x108>
c001f487:	89 ca                	mov    edx,ecx
c001f489:	29 f3                	sub    ebx,esi
c001f48b:	19 fa                	sbb    edx,edi
c001f48d:	89 d0                	mov    eax,edx
c001f48f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f493:	d3 e0                	shl    eax,cl
c001f495:	89 e9                	mov    ecx,ebp
c001f497:	d3 eb                	shr    ebx,cl
c001f499:	09 d8                	or     eax,ebx
c001f49b:	d3 ea                	shr    edx,cl
c001f49d:	83 c4 1c             	add    esp,0x1c
c001f4a0:	5b                   	pop    ebx
c001f4a1:	5e                   	pop    esi
c001f4a2:	5f                   	pop    edi
c001f4a3:	5d                   	pop    ebp
c001f4a4:	c3                   	ret    
c001f4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4a8:	39 c3                	cmp    ebx,eax
c001f4aa:	73 db                	jae    c001f487 <__umoddi3+0xe7>
c001f4ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f4b4:	89 d7                	mov    edi,edx
c001f4b6:	89 c6                	mov    esi,eax
c001f4b8:	eb cd                	jmp    c001f487 <__umoddi3+0xe7>

Disassembly of section .init:

c001f4ba <_init>:
c001f4ba:	55                   	push   ebp
c001f4bb:	89 e5                	mov    ebp,esp
c001f4bd:	e8 32 0c fe ff       	call   c00000f4 <frame_dummy>
c001f4c2:	e8 e5 fa ff ff       	call   c001efac <__do_global_ctors_aux>
c001f4c7:	5d                   	pop    ebp
c001f4c8:	c3                   	ret    

Disassembly of section .fini:

c001f4c9 <_fini>:
c001f4c9:	55                   	push   ebp
c001f4ca:	89 e5                	mov    ebp,esp
c001f4cc:	e8 b3 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f4d1:	5d                   	pop    ebp
c001f4d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f4d4 <Computer::~Computer()>:
c001f4d4:	83 ec 0c             	sub    esp,0xc
c001f4d7:	ba f4 07 02 c0       	mov    edx,0xc00207f4
c001f4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e0:	89 10                	mov    DWORD PTR [eax],edx
c001f4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e6:	83 ec 0c             	sub    esp,0xc
c001f4e9:	50                   	push   eax
c001f4ea:	e8 57 d1 fe ff       	call   c000c646 <Device::~Device()>
c001f4ef:	83 c4 10             	add    esp,0x10
c001f4f2:	90                   	nop
c001f4f3:	83 c4 0c             	add    esp,0xc
c001f4f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f4f8 <Computer::~Computer()>:
c001f4f8:	83 ec 0c             	sub    esp,0xc
c001f4fb:	83 ec 0c             	sub    esp,0xc
c001f4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f502:	e8 cd ff ff ff       	call   c001f4d4 <Computer::~Computer()>
c001f507:	83 c4 10             	add    esp,0x10
c001f50a:	83 ec 08             	sub    esp,0x8
c001f50d:	68 70 01 00 00       	push   0x170
c001f512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f516:	e8 f1 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f51b:	83 c4 10             	add    esp,0x10
c001f51e:	83 c4 0c             	add    esp,0xc
c001f521:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f522 <idleCommon()>:
c001f522:	83 ec 0c             	sub    esp,0xc
c001f525:	fa                   	cli    
c001f526:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f52c:	e8 af 66 ff ff       	call   c0015be0 <schedule()>
c001f531:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f536:	48                   	dec    eax
c001f537:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f53c:	75 01                	jne    c001f53f <idleCommon()+0x1d>
c001f53e:	fb                   	sti    
c001f53f:	83 c4 0c             	add    esp,0xc
c001f542:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f544 <LinkedList<UnixFile>::~LinkedList()>:
c001f544:	90                   	nop
c001f545:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f546 <LinkedList<UnixFile>::LinkedList()>:
c001f546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f54a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f554:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f55b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f55f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f56a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f574:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f57b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f57f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f586:	90                   	nop
c001f587:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f588 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f588:	83 ec 0c             	sub    esp,0xc
c001f58b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f590:	75 10                	jne    c001f5a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f592:	83 ec 0c             	sub    esp,0xc
c001f595:	68 08 0a 02 c0       	push   0xc0020a08
c001f59a:	e8 42 1d ff ff       	call   c00112e1 <KePanic(char const*)>
c001f59f:	83 c4 10             	add    esp,0x10
c001f5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5a8:	85 c0                	test   eax,eax
c001f5aa:	74 34                	je     c001f5e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5b3:	85 c0                	test   eax,eax
c001f5b5:	74 29                	je     c001f5e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5de:	eb 65                	jmp    c001f645 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5e6:	85 c0                	test   eax,eax
c001f5e8:	75 4b                	jne    c001f635 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5f1:	85 c0                	test   eax,eax
c001f5f3:	75 40                	jne    c001f635 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5fd:	89 10                	mov    DWORD PTR [eax],edx
c001f5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f603:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f607:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f611:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f61f:	85 c0                	test   eax,eax
c001f621:	74 22                	je     c001f645 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f623:	83 ec 0c             	sub    esp,0xc
c001f626:	68 2a 0a 02 c0       	push   0xc0020a2a
c001f62b:	e8 b1 1c ff ff       	call   c00112e1 <KePanic(char const*)>
c001f630:	83 c4 10             	add    esp,0x10
c001f633:	eb 10                	jmp    c001f645 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f635:	83 ec 0c             	sub    esp,0xc
c001f638:	68 34 0a 02 c0       	push   0xc0020a34
c001f63d:	e8 9f 1c ff ff       	call   c00112e1 <KePanic(char const*)>
c001f642:	83 c4 10             	add    esp,0x10
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f64c:	8d 50 01             	lea    edx,[eax+0x1]
c001f64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f653:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f656:	90                   	nop
c001f657:	83 c4 0c             	add    esp,0xc
c001f65a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f65c <LinkedList<UnixFile>::getFirstElement()>:
c001f65c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f660:	8b 00                	mov    eax,DWORD PTR [eax]
c001f662:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f664 <LinkedList<UnixFile>::removeFirst()>:
c001f664:	83 ec 0c             	sub    esp,0xc
c001f667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f66d:	85 c0                	test   eax,eax
c001f66f:	75 12                	jne    c001f683 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	68 40 0a 02 c0       	push   0xc0020a40
c001f679:	e8 63 1c ff ff       	call   c00112e1 <KePanic(char const*)>
c001f67e:	83 c4 10             	add    esp,0x10
c001f681:	eb 7e                	jmp    c001f701 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f687:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f68a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f68d:	85 c0                	test   eax,eax
c001f68f:	74 10                	je     c001f6a1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f691:	83 ec 0c             	sub    esp,0xc
c001f694:	68 8b 0a 02 c0       	push   0xc0020a8b
c001f699:	e8 43 1c ff ff       	call   c00112e1 <KePanic(char const*)>
c001f69e:	83 c4 10             	add    esp,0x10
c001f6a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6aa:	85 c0                	test   eax,eax
c001f6ac:	75 33                	jne    c001f6e1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ca:	83 f8 01             	cmp    eax,0x1
c001f6cd:	74 21                	je     c001f6f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6cf:	83 ec 0c             	sub    esp,0xc
c001f6d2:	68 64 0a 02 c0       	push   0xc0020a64
c001f6d7:	e8 05 1c ff ff       	call   c00112e1 <KePanic(char const*)>
c001f6dc:	83 c4 10             	add    esp,0x10
c001f6df:	eb 0f                	jmp    c001f6f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ee:	89 10                	mov    DWORD PTR [eax],edx
c001f6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f701:	83 c4 0c             	add    esp,0xc
c001f704:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f706 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f70a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f70d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f70e <DriverlessDevice::~DriverlessDevice()>:
c001f70e:	ba 1c 16 02 c0       	mov    edx,0xc002161c
c001f713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f717:	89 10                	mov    DWORD PTR [eax],edx
c001f719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f71d:	50                   	push   eax
c001f71e:	e8 23 cf fe ff       	call   c000c646 <Device::~Device()>
c001f723:	83 c4 04             	add    esp,0x4
c001f726:	90                   	nop
c001f727:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f728 <DriverlessDevice::~DriverlessDevice()>:
c001f728:	83 ec 0c             	sub    esp,0xc
c001f72b:	83 ec 0c             	sub    esp,0xc
c001f72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f732:	e8 d7 ff ff ff       	call   c001f70e <DriverlessDevice::~DriverlessDevice()>
c001f737:	83 c4 10             	add    esp,0x10
c001f73a:	83 ec 08             	sub    esp,0x8
c001f73d:	68 58 01 00 00       	push   0x158
c001f742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f746:	e8 c1 b0 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f74b:	83 c4 10             	add    esp,0x10
c001f74e:	83 c4 0c             	add    esp,0xc
c001f751:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f752 <LinkedList<Device>::addElement(Device*)>:
c001f752:	83 ec 0c             	sub    esp,0xc
c001f755:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f75a:	75 10                	jne    c001f76c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f75c:	83 ec 0c             	sub    esp,0xc
c001f75f:	68 08 0a 02 c0       	push   0xc0020a08
c001f764:	e8 78 1b ff ff       	call   c00112e1 <KePanic(char const*)>
c001f769:	83 c4 10             	add    esp,0x10
c001f76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f770:	8b 00                	mov    eax,DWORD PTR [eax]
c001f772:	85 c0                	test   eax,eax
c001f774:	74 3a                	je     c001f7b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f77d:	85 c0                	test   eax,eax
c001f77f:	74 2f                	je     c001f7b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f785:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f788:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f78c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f796:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f79a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7ae:	eb 68                	jmp    c001f818 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7b6:	85 c0                	test   eax,eax
c001f7b8:	75 4e                	jne    c001f808 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7c1:	85 c0                	test   eax,eax
c001f7c3:	75 43                	jne    c001f808 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7cd:	89 10                	mov    DWORD PTR [eax],edx
c001f7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7f2:	85 c0                	test   eax,eax
c001f7f4:	74 22                	je     c001f818 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	68 2a 0a 02 c0       	push   0xc0020a2a
c001f7fe:	e8 de 1a ff ff       	call   c00112e1 <KePanic(char const*)>
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	eb 10                	jmp    c001f818 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	68 34 0a 02 c0       	push   0xc0020a34
c001f810:	e8 cc 1a ff ff       	call   c00112e1 <KePanic(char const*)>
c001f815:	83 c4 10             	add    esp,0x10
c001f818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81f:	8d 50 01             	lea    edx,[eax+0x1]
c001f822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f826:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f829:	90                   	nop
c001f82a:	83 c4 0c             	add    esp,0xc
c001f82d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f82e <LinkedList<Device>::LinkedList()>:
c001f82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f832:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f83c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f847:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f85c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f867:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f86e:	90                   	nop
c001f86f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f874:	8b 00                	mov    eax,DWORD PTR [eax]
c001f876:	85 c0                	test   eax,eax
c001f878:	75 0e                	jne    c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f87a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f87e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f881:	85 c0                	test   eax,eax
c001f883:	75 03                	jne    c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f885:	b0 01                	mov    al,0x1
c001f887:	c3                   	ret    
c001f888:	b0 00                	mov    al,0x0
c001f88a:	90                   	nop
c001f88b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f890:	8b 00                	mov    eax,DWORD PTR [eax]
c001f892:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f894:	83 ec 0c             	sub    esp,0xc
c001f897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f89d:	85 c0                	test   eax,eax
c001f89f:	75 17                	jne    c001f8b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f8a1:	83 ec 0c             	sub    esp,0xc
c001f8a4:	68 40 0a 02 c0       	push   0xc0020a40
c001f8a9:	e8 33 1a ff ff       	call   c00112e1 <KePanic(char const*)>
c001f8ae:	83 c4 10             	add    esp,0x10
c001f8b1:	e9 96 00 00 00       	jmp    c001f94c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f8b6:	66 90                	xchg   ax,ax
c001f8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8c2:	85 c0                	test   eax,eax
c001f8c4:	0f 95 c0             	setne  al
c001f8c7:	0f b6 c0             	movzx  eax,al
c001f8ca:	85 c0                	test   eax,eax
c001f8cc:	74 12                	je     c001f8e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f8ce:	83 ec 0c             	sub    esp,0xc
c001f8d1:	68 8b 0a 02 c0       	push   0xc0020a8b
c001f8d6:	e8 06 1a ff ff       	call   c00112e1 <KePanic(char const*)>
c001f8db:	83 c4 10             	add    esp,0x10
c001f8de:	66 90                	xchg   ax,ax
c001f8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8e9:	85 c0                	test   eax,eax
c001f8eb:	0f 94 c0             	sete   al
c001f8ee:	0f b6 c0             	movzx  eax,al
c001f8f1:	85 c0                	test   eax,eax
c001f8f3:	74 33                	je     c001f928 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f903:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f911:	83 f8 01             	cmp    eax,0x1
c001f914:	74 22                	je     c001f938 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f916:	83 ec 0c             	sub    esp,0xc
c001f919:	68 64 0a 02 c0       	push   0xc0020a64
c001f91e:	e8 be 19 ff ff       	call   c00112e1 <KePanic(char const*)>
c001f923:	83 c4 10             	add    esp,0x10
c001f926:	eb 10                	jmp    c001f938 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f92e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	89 10                	mov    DWORD PTR [eax],edx
c001f937:	90                   	nop
c001f938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f93f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f949:	8d 76 00             	lea    esi,[esi+0x0]
c001f94c:	83 c4 0c             	add    esp,0xc
c001f94f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f950:	83 ec 0c             	sub    esp,0xc
c001f953:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f958:	75 12                	jne    c001f96c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f95a:	83 ec 0c             	sub    esp,0xc
c001f95d:	68 08 0a 02 c0       	push   0xc0020a08
c001f962:	e8 7a 19 ff ff       	call   c00112e1 <KePanic(char const*)>
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	66 90                	xchg   ax,ax
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	85 c0                	test   eax,eax
c001f974:	74 36                	je     c001f9ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f97d:	85 c0                	test   eax,eax
c001f97f:	74 2b                	je     c001f9ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f985:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f988:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f98c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f993:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f997:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9a8:	eb 6a                	jmp    c001fa14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9aa:	66 90                	xchg   ax,ax
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b2:	85 c0                	test   eax,eax
c001f9b4:	75 4e                	jne    c001fa04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9bd:	85 c0                	test   eax,eax
c001f9bf:	75 43                	jne    c001fa04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9c9:	89 10                	mov    DWORD PTR [eax],edx
c001f9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9eb:	85 c0                	test   eax,eax
c001f9ed:	74 25                	je     c001fa14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	68 2a 0a 02 c0       	push   0xc0020a2a
c001f9f7:	e8 e5 18 ff ff       	call   c00112e1 <KePanic(char const*)>
c001f9fc:	83 c4 10             	add    esp,0x10
c001f9ff:	eb 13                	jmp    c001fa14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa01:	8d 76 00             	lea    esi,[esi+0x0]
c001fa04:	83 ec 0c             	sub    esp,0xc
c001fa07:	68 34 0a 02 c0       	push   0xc0020a34
c001fa0c:	e8 d0 18 ff ff       	call   c00112e1 <KePanic(char const*)>
c001fa11:	83 c4 10             	add    esp,0x10
c001fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa1b:	8d 50 01             	lea    edx,[eax+0x1]
c001fa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa25:	90                   	nop
c001fa26:	83 c4 0c             	add    esp,0xc
c001fa29:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa2c <ACPI::~ACPI()>:
c001fa2c:	83 ec 0c             	sub    esp,0xc
c001fa2f:	ba 04 1c 02 c0       	mov    edx,0xc0021c04
c001fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa38:	89 10                	mov    DWORD PTR [eax],edx
c001fa3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	50                   	push   eax
c001fa42:	e8 ff cb fe ff       	call   c000c646 <Device::~Device()>
c001fa47:	83 c4 10             	add    esp,0x10
c001fa4a:	90                   	nop
c001fa4b:	83 c4 0c             	add    esp,0xc
c001fa4e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa50 <ACPI::~ACPI()>:
c001fa50:	83 ec 0c             	sub    esp,0xc
c001fa53:	83 ec 0c             	sub    esp,0xc
c001fa56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa5a:	e8 cd ff ff ff       	call   c001fa2c <ACPI::~ACPI()>
c001fa5f:	83 c4 10             	add    esp,0x10
c001fa62:	83 ec 08             	sub    esp,0x8
c001fa65:	68 64 12 00 00       	push   0x1264
c001fa6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa6e:	e8 99 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa73:	83 c4 10             	add    esp,0x10
c001fa76:	83 c4 0c             	add    esp,0xc
c001fa79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fa7c <LinkedList<Device>::~LinkedList()>:
c001fa7c:	90                   	nop
c001fa7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fa80 <LinkedList<Device>::isEmpty()>:
c001fa80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa86:	85 c0                	test   eax,eax
c001fa88:	75 0e                	jne    c001fa98 <LinkedList<Device>::isEmpty()+0x18>
c001fa8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa91:	85 c0                	test   eax,eax
c001fa93:	75 03                	jne    c001fa98 <LinkedList<Device>::isEmpty()+0x18>
c001fa95:	b0 01                	mov    al,0x1
c001fa97:	c3                   	ret    
c001fa98:	b0 00                	mov    al,0x0
c001fa9a:	90                   	nop
c001fa9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fa9c <LinkedList<Device>::getFirstElement()>:
c001fa9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001faa4 <LinkedList<Device>::removeFirst()>:
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faab:	8b 00                	mov    eax,DWORD PTR [eax]
c001faad:	85 c0                	test   eax,eax
c001faaf:	75 17                	jne    c001fac8 <LinkedList<Device>::removeFirst()+0x24>
c001fab1:	83 ec 0c             	sub    esp,0xc
c001fab4:	68 40 0a 02 c0       	push   0xc0020a40
c001fab9:	e8 23 18 ff ff       	call   c00112e1 <KePanic(char const*)>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	e9 92 00 00 00       	jmp    c001fb58 <LinkedList<Device>::removeFirst()+0xb4>
c001fac6:	66 90                	xchg   ax,ax
c001fac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001facf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fad5:	85 c0                	test   eax,eax
c001fad7:	74 13                	je     c001faec <LinkedList<Device>::removeFirst()+0x48>
c001fad9:	83 ec 0c             	sub    esp,0xc
c001fadc:	68 8b 0a 02 c0       	push   0xc0020a8b
c001fae1:	e8 fb 17 ff ff       	call   c00112e1 <KePanic(char const*)>
c001fae6:	83 c4 10             	add    esp,0x10
c001fae9:	8d 76 00             	lea    esi,[esi+0x0]
c001faec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001faf8:	85 c0                	test   eax,eax
c001fafa:	75 34                	jne    c001fb30 <LinkedList<Device>::removeFirst()+0x8c>
c001fafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb18:	83 f8 01             	cmp    eax,0x1
c001fb1b:	74 27                	je     c001fb44 <LinkedList<Device>::removeFirst()+0xa0>
c001fb1d:	83 ec 0c             	sub    esp,0xc
c001fb20:	68 64 0a 02 c0       	push   0xc0020a64
c001fb25:	e8 b7 17 ff ff       	call   c00112e1 <KePanic(char const*)>
c001fb2a:	83 c4 10             	add    esp,0x10
c001fb2d:	eb 15                	jmp    c001fb44 <LinkedList<Device>::removeFirst()+0xa0>
c001fb2f:	90                   	nop
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb36:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb40:	89 10                	mov    DWORD PTR [eax],edx
c001fb42:	66 90                	xchg   ax,ax
c001fb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb4b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb55:	8d 76 00             	lea    esi,[esi+0x0]
c001fb58:	83 c4 0c             	add    esp,0xc
c001fb5b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fb5c <CPU::~CPU()>:
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c001fb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb68:	89 10                	mov    DWORD PTR [eax],edx
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	50                   	push   eax
c001fb72:	e8 cf ca fe ff       	call   c000c646 <Device::~Device()>
c001fb77:	83 c4 10             	add    esp,0x10
c001fb7a:	90                   	nop
c001fb7b:	83 c4 0c             	add    esp,0xc
c001fb7e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fb80 <CPU::~CPU()>:
c001fb80:	83 ec 0c             	sub    esp,0xc
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb8a:	e8 cd ff ff ff       	call   c001fb5c <CPU::~CPU()>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	83 ec 08             	sub    esp,0x8
c001fb95:	68 94 11 00 00       	push   0x1194
c001fb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb9e:	e8 69 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fba3:	83 c4 10             	add    esp,0x10
c001fba6:	83 c4 0c             	add    esp,0xc
c001fba9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fbb3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fbb4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fbb4:	90                   	nop
c001fbb5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fbb8 <ThreadControlBlock::ThreadControlBlock()>:
c001fbb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbbc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbc7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fbce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fbd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbdd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fbe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fbef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fbf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbfb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fbff:	90                   	nop
c001fc00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fc04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc3d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc44:	90                   	nop
c001fc45:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fc46 <PCI::~PCI()>:
c001fc46:	83 ec 0c             	sub    esp,0xc
c001fc49:	ba 8c 2c 02 c0       	mov    edx,0xc0022c8c
c001fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc52:	89 10                	mov    DWORD PTR [eax],edx
c001fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	50                   	push   eax
c001fc5c:	e8 77 c4 fe ff       	call   c000c0d8 <Bus::~Bus()>
c001fc61:	83 c4 10             	add    esp,0x10
c001fc64:	90                   	nop
c001fc65:	83 c4 0c             	add    esp,0xc
c001fc68:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc6a <PCI::~PCI()>:
c001fc6a:	83 ec 0c             	sub    esp,0xc
c001fc6d:	83 ec 0c             	sub    esp,0xc
c001fc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc74:	e8 cd ff ff ff       	call   c001fc46 <PCI::~PCI()>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	83 ec 08             	sub    esp,0x8
c001fc7f:	68 5c 01 00 00       	push   0x15c
c001fc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc88:	e8 7f ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	83 c4 0c             	add    esp,0xc
c001fc93:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc94 <IDE::~IDE()>:
c001fc94:	83 ec 0c             	sub    esp,0xc
c001fc97:	ba 40 2d 02 c0       	mov    edx,0xc0022d40
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	89 10                	mov    DWORD PTR [eax],edx
c001fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca6:	83 ec 0c             	sub    esp,0xc
c001fca9:	50                   	push   eax
c001fcaa:	e8 11 ce fe ff       	call   c000cac0 <HardDiskController::~HardDiskController()>
c001fcaf:	83 c4 10             	add    esp,0x10
c001fcb2:	90                   	nop
c001fcb3:	83 c4 0c             	add    esp,0xc
c001fcb6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fcb8 <IDE::~IDE()>:
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	83 ec 0c             	sub    esp,0xc
c001fcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc2:	e8 cd ff ff ff       	call   c001fc94 <IDE::~IDE()>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	83 ec 08             	sub    esp,0x8
c001fccd:	68 70 02 00 00       	push   0x270
c001fcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd6:	e8 31 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	83 c4 0c             	add    esp,0xc
c001fce1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fce2 <SATABus::~SATABus()>:
c001fce2:	83 ec 0c             	sub    esp,0xc
c001fce5:	ba 90 2d 02 c0       	mov    edx,0xc0022d90
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	89 10                	mov    DWORD PTR [eax],edx
c001fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	50                   	push   eax
c001fcf8:	e8 c3 cd fe ff       	call   c000cac0 <HardDiskController::~HardDiskController()>
c001fcfd:	83 c4 10             	add    esp,0x10
c001fd00:	90                   	nop
c001fd01:	83 c4 0c             	add    esp,0xc
c001fd04:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fd06 <SATABus::~SATABus()>:
c001fd06:	83 ec 0c             	sub    esp,0xc
c001fd09:	83 ec 0c             	sub    esp,0xc
c001fd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd10:	e8 cd ff ff ff       	call   c001fce2 <SATABus::~SATABus()>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	83 ec 08             	sub    esp,0x8
c001fd1b:	68 64 01 00 00       	push   0x164
c001fd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd24:	e8 e3 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd29:	83 c4 10             	add    esp,0x10
c001fd2c:	83 c4 0c             	add    esp,0xc
c001fd2f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd30 <ATA::~ATA()>:
c001fd30:	83 ec 0c             	sub    esp,0xc
c001fd33:	ba d0 2d 02 c0       	mov    edx,0xc0022dd0
c001fd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3c:	89 10                	mov    DWORD PTR [eax],edx
c001fd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd42:	83 ec 0c             	sub    esp,0xc
c001fd45:	50                   	push   eax
c001fd46:	e8 57 ce fe ff       	call   c000cba2 <PhysicalDisk::~PhysicalDisk()>
c001fd4b:	83 c4 10             	add    esp,0x10
c001fd4e:	90                   	nop
c001fd4f:	83 c4 0c             	add    esp,0xc
c001fd52:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fd54 <ATA::~ATA()>:
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	83 ec 0c             	sub    esp,0xc
c001fd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd5e:	e8 cd ff ff ff       	call   c001fd30 <ATA::~ATA()>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	83 ec 08             	sub    esp,0x8
c001fd69:	68 7c 01 00 00       	push   0x17c
c001fd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd72:	e8 95 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd77:	83 c4 10             	add    esp,0x10
c001fd7a:	83 c4 0c             	add    esp,0xc
c001fd7d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fd7e <ATAPI::~ATAPI()>:
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	ba 18 2e 02 c0       	mov    edx,0xc0022e18
c001fd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8a:	89 10                	mov    DWORD PTR [eax],edx
c001fd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	50                   	push   eax
c001fd94:	e8 09 ce fe ff       	call   c000cba2 <PhysicalDisk::~PhysicalDisk()>
c001fd99:	83 c4 10             	add    esp,0x10
c001fd9c:	90                   	nop
c001fd9d:	83 c4 0c             	add    esp,0xc
c001fda0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fda2 <ATAPI::~ATAPI()>:
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	83 ec 0c             	sub    esp,0xc
c001fda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdac:	e8 cd ff ff ff       	call   c001fd7e <ATAPI::~ATAPI()>
c001fdb1:	83 c4 10             	add    esp,0x10
c001fdb4:	83 ec 08             	sub    esp,0x8
c001fdb7:	68 84 01 00 00       	push   0x184
c001fdbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc0:	e8 47 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdc5:	83 c4 10             	add    esp,0x10
c001fdc8:	83 c4 0c             	add    esp,0xc
c001fdcb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fdcc <SATA::~SATA()>:
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	ba cc 2e 02 c0       	mov    edx,0xc0022ecc
c001fdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd8:	89 10                	mov    DWORD PTR [eax],edx
c001fdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	50                   	push   eax
c001fde2:	e8 bb cd fe ff       	call   c000cba2 <PhysicalDisk::~PhysicalDisk()>
c001fde7:	83 c4 10             	add    esp,0x10
c001fdea:	90                   	nop
c001fdeb:	83 c4 0c             	add    esp,0xc
c001fdee:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fdf0 <SATA::~SATA()>:
c001fdf0:	83 ec 0c             	sub    esp,0xc
c001fdf3:	83 ec 0c             	sub    esp,0xc
c001fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfa:	e8 cd ff ff ff       	call   c001fdcc <SATA::~SATA()>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 ec 08             	sub    esp,0x8
c001fe05:	68 7c 01 00 00       	push   0x17c
c001fe0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe0e:	e8 f9 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe13:	83 c4 10             	add    esp,0x10
c001fe16:	83 c4 0c             	add    esp,0xc
c001fe19:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fe1a <SATAPI::~SATAPI()>:
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	ba f0 2f 02 c0       	mov    edx,0xc0022ff0
c001fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe26:	89 10                	mov    DWORD PTR [eax],edx
c001fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	50                   	push   eax
c001fe30:	e8 6d cd fe ff       	call   c000cba2 <PhysicalDisk::~PhysicalDisk()>
c001fe35:	83 c4 10             	add    esp,0x10
c001fe38:	90                   	nop
c001fe39:	83 c4 0c             	add    esp,0xc
c001fe3c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe3e <SATAPI::~SATAPI()>:
c001fe3e:	83 ec 0c             	sub    esp,0xc
c001fe41:	83 ec 0c             	sub    esp,0xc
c001fe44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe48:	e8 cd ff ff ff       	call   c001fe1a <SATAPI::~SATAPI()>
c001fe4d:	83 c4 10             	add    esp,0x10
c001fe50:	83 ec 08             	sub    esp,0x8
c001fe53:	68 84 01 00 00       	push   0x184
c001fe58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe5c:	e8 ab a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe61:	83 c4 10             	add    esp,0x10
c001fe64:	83 c4 0c             	add    esp,0xc
c001fe67:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe68 <IOAPIC::~IOAPIC()>:
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001fe70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe74:	89 10                	mov    DWORD PTR [eax],edx
c001fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	50                   	push   eax
c001fe7e:	e8 c3 c7 fe ff       	call   c000c646 <Device::~Device()>
c001fe83:	83 c4 10             	add    esp,0x10
c001fe86:	90                   	nop
c001fe87:	83 c4 0c             	add    esp,0xc
c001fe8a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe8c <IOAPIC::~IOAPIC()>:
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	83 ec 0c             	sub    esp,0xc
c001fe92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe96:	e8 cd ff ff ff       	call   c001fe68 <IOAPIC::~IOAPIC()>
c001fe9b:	83 c4 10             	add    esp,0x10
c001fe9e:	83 ec 08             	sub    esp,0x8
c001fea1:	68 68 01 00 00       	push   0x168
c001fea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feaa:	e8 5d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	83 c4 0c             	add    esp,0xc
c001feb5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001feb8 <APICTimer::~APICTimer()>:
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	ba 78 30 02 c0       	mov    edx,0xc0023078
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	89 10                	mov    DWORD PTR [eax],edx
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	50                   	push   eax
c001fece:	e8 49 e2 fe ff       	call   c000e11c <Timer::~Timer()>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	90                   	nop
c001fed7:	83 c4 0c             	add    esp,0xc
c001feda:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fedc <APICTimer::~APICTimer()>:
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee6:	e8 cd ff ff ff       	call   c001feb8 <APICTimer::~APICTimer()>
c001feeb:	83 c4 10             	add    esp,0x10
c001feee:	83 ec 08             	sub    esp,0x8
c001fef1:	68 60 01 00 00       	push   0x160
c001fef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefa:	e8 0d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feff:	83 c4 10             	add    esp,0x10
c001ff02:	83 c4 0c             	add    esp,0xc
c001ff05:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff08 <PIT::~PIT()>:
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	ba c8 30 02 c0       	mov    edx,0xc00230c8
c001ff10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff14:	89 10                	mov    DWORD PTR [eax],edx
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	50                   	push   eax
c001ff1e:	e8 f9 e1 fe ff       	call   c000e11c <Timer::~Timer()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	90                   	nop
c001ff27:	83 c4 0c             	add    esp,0xc
c001ff2a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff2c <PIT::~PIT()>:
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	83 ec 0c             	sub    esp,0xc
c001ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff36:	e8 cd ff ff ff       	call   c001ff08 <PIT::~PIT()>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	83 ec 08             	sub    esp,0x8
c001ff41:	68 5c 01 00 00       	push   0x15c
c001ff46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4a:	e8 bd a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	83 c4 0c             	add    esp,0xc
c001ff55:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be dd 1e 02 c0       	mov    esi,0xc0021edd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be f9 1e 02 c0       	mov    esi,0xc0021ef9
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
