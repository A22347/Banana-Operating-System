
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 24 02 c0       	mov    eax,0xc0022408
c0000025:	3d 08 24 02 c0       	cmp    eax,0xc0022408
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 24 02 c0       	push   0xc0022408
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 24 02 c0       	mov    eax,0xc0022408
c0000051:	2d 08 24 02 c0       	sub    eax,0xc0022408
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 24 02 c0       	push   0xc0022408
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 0c f3 01 c0       	mov    ebx,0xc001f30c
c0000097:	81 eb 08 f3 01 c0    	sub    ebx,0xc001f308
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 08 f3 01 c0       	mov    esi,0xc001f308
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 24 02 c0       	push   0xc0022408
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 08 24 02 c0       	push   0xc0022408
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 fb 45 01 00       	call   c00148a8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 9c a4 00 00       	call   c000a761 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 d9 45 01 00       	call   c00148a8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 e6 4a 01 00       	call   c0014dd4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 81 51 01 00       	call   c0015478 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 e1 04 01 00       	jmp    c0010860 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0ce0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0ce0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0ce0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0ce0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 f3 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0ce0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0ce0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 24 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0bdc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 86 6b 01 00       	jmp    c0018960 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 b0 6b 01 00       	jmp    c00189a0 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 d1 6b 01 00       	jmp    c00189e0 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 80 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0a80]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 80 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a80]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 00 17 02 c0       	mov    edx,0xc0021700
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 3c f4 01 c0       	mov    edx,0xc001f43c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 42 f4 01 c0       	mov    eax,0xc001f442
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 00 f5 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b00]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 4b f4 01 c0       	mov    eax,0xc001f44b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 80 f5 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0a80]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 d0 f4 01 c0       	mov    eax,0xc001f4d0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb c0 f4 01 c0       	mov    ebx,0xc001f4c0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 a0 f4 01 c0       	mov    eax,0xc001f4a0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 52 f4 01 c0       	mov    edx,0xc001f452
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 5e f4 01 c0       	mov    edx,0xc001f45e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 72 f4 01 c0       	mov    edx,0xc001f472
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c a0 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f8a0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 a0 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f8a0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 e0 f5 01 c0       	mov    eax,0xc001f5e0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 a0 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a60]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 a0 f9 01 c0       	push   0xc001f9a0
c0006147:	e8 b8 31 01 00       	call   c0019304 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ae f9 01 c0       	push   0xc001f9ae
c000617f:	e8 80 31 01 00       	call   c0019304 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 e9 30 01 00       	call   c00192a8 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 bd f9 01 c0       	push   0xc001f9bd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 c0 f9 01 c0       	push   0xc001f9c0
c000682f:	e8 d0 2a 01 00       	call   c0019304 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 de 2a 01 00       	call   c0019320 <iso_kprintfd>
c0006842:	c7 04 24 c5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c5
c0006849:	e8 b6 2a 01 00       	call   c0019304 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 c6 2a 01 00       	call   c0019320 <iso_kprintfd>
c000685a:	c7 04 24 cb f9 01 c0 	mov    DWORD PTR [esp],0xc001f9cb
c0006861:	e8 9e 2a 01 00       	call   c0019304 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 ae 2a 01 00       	call   c0019320 <iso_kprintfd>
c0006872:	c7 04 24 d1 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d1
c0006879:	e8 86 2a 01 00       	call   c0019304 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 96 2a 01 00       	call   c0019320 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 bd f9 01 c0       	push   0xc001f9bd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 da f9 01 c0       	push   0xc001f9da
c0006a52:	e8 ad 28 01 00       	call   c0019304 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 e5 f9 01 c0       	push   0xc001f9e5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ec f9 01 c0       	push   0xc001f9ec
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 f3 f9 01 c0       	push   0xc001f9f3
c0006b69:	e8 96 27 01 00       	call   c0019304 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 fe f9 01 c0       	push   0xc001f9fe
c0006b84:	e8 7b 27 01 00       	call   c0019304 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 8c 52 00 00       	call   c000bf2a <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 0f fa 01 c0       	push   0xc001fa0f
c0006ccf:	e8 24 95 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 28 fa 01 c0       	push   0xc001fa28
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 04 df 00 00       	call   c0014c00 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 13 e1 00 00       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 e8 58 01 c0       	push   0xc00158e8
c0006d20:	52                   	push   edx
c0006d21:	e8 fe e0 00 00       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 f2 9c 00 00       	call   c0010a2c <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 24 fb 01 c0       	push   0xc001fb24
c0006d42:	e8 b1 94 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0006d47:	e8 bf ef 00 00       	call   c0015d0b <Vm::initialise8086()>
c0006d4c:	e8 fb 3f 00 00       	call   c000ad4c <Fs::initVFS()>
c0006d51:	c7 04 24 35 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa35
c0006d58:	e8 9b 94 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 24 fb 01 c0       	push   0xc001fb24
c0006d7c:	e8 77 94 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0006d81:	e8 52 99 00 00       	call   c00106d8 <Krnl::loadSystemEnv()>
c0006d86:	e8 af 9b 00 00       	call   c001093a <Krnl::setupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 4f fa 01 c0       	push   0xc001fa4f
c0006d95:	68 58 fa 01 c0       	push   0xc001fa58
c0006d9a:	e8 8b c1 00 00       	call   c0012f2a <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 dd 4a 00 00       	call   c000b884 <User::loadClockSettings(int)>
c0006da7:	c7 04 24 48 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb48
c0006dae:	e8 45 94 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 63 51 00 00       	call   c000bf28 <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 60 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa60
c0006dcc:	e8 27 94 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 71 fa 01 c0       	push   0xc001fa71
c0006de0:	e8 1f d8 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 56 da 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 75 e4 00 00       	call   c0015270 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 8d fa 01 c0       	push   0xc001fa8d
c0006e0f:	50                   	push   eax
c0006e10:	e8 8f 51 00 00       	call   c000bfa4 <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba 94 fb 01 c0       	mov    edx,0xc001fb94
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 f7 73 01 00       	call   c001e306 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 c1 87 00 00       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 9a 87 00 00       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 78 87 00 00       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 56 87 00 00       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 63 86 00 00       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 3e 86 00 00       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 56 72 01 00       	call   c001e2c0 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 a4 6e 01 00       	call   c001df30 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 54 86 00 00       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 96 fa 01 c0       	push   0xc001fa96
c00070fc:	e8 74 97 00 00       	call   c0010875 <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 9c fa 01 c0       	push   0xc001fa9c
c0007138:	e8 38 97 00 00       	call   c0010875 <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 5b 80 00 00       	jmp    c000f1e0 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 a2 fa 01 c0       	push   0xc001faa2
c00071db:	0f 94 05 40 1f 02 c0 	sete   BYTE PTR ds:0xc0021f40
c00071e2:	e8 11 90 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 57 7b 00 00       	call   c000ed54 <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 00 4c 00 00       	call   c000be0c <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 ba fa 01 c0 	mov    DWORD PTR [esp],0xc001faba
c0007225:	e8 ce 8f 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 86 85 00 00       	call   c000f7c6 <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 bd 4b 00 00       	call   c000be0c <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 68 fb 01 c0       	push   0xc001fb68
c000726c:	e8 87 8f 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0007271:	e8 6e fc 00 00       	call   c0016ee4 <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 d4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fad4
c000727d:	e8 76 8f 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 be dc 00 00       	call   c0014f4c <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 ef fa 01 c0       	push   0xc001faef
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 c5 36 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 00 fb 01 c0       	push   0xc001fb00
c0007305:	e8 6b 95 00 00       	call   c0010875 <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 0d fb 01 c0       	push   0xc001fb0d
c000731a:	e8 56 95 00 00       	call   c0010875 <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 17 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb17
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 3c 95 00 00       	jmp    c0010875 <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 85 f6 00 00       	call   c0016bb0 <HalSystemIdle()>
c000752b:	e8 92 73 01 00       	call   c001e8c2 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 c0 df 01 c0       	push   0xc001dfc0
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 d0 df 01 c0       	push   0xc001dfd0
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 da df 01 c0       	push   0xc001dfda
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 e4 df 01 c0       	push   0xc001dfe4
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 ee df 01 c0       	push   0xc001dfee
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 f8 df 01 c0       	push   0xc001dff8
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 02 e0 01 c0       	push   0xc001e002
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 0c e0 01 c0       	push   0xc001e00c
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 16 e0 01 c0       	push   0xc001e016
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 1e e0 01 c0       	push   0xc001e01e
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 28 e0 01 c0       	push   0xc001e028
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 30 e0 01 c0       	push   0xc001e030
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 38 e0 01 c0       	push   0xc001e038
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 40 e0 01 c0       	push   0xc001e040
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 5a e0 01 c0       	push   0xc001e05a
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 62 e0 01 c0       	push   0xc001e062
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 6c e0 01 c0       	push   0xc001e06c
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 76 e0 01 c0       	push   0xc001e076
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 80 e0 01 c0       	push   0xc001e080
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 1a e1 01 c0       	push   0xc001e11a
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 21 e1 01 c0       	push   0xc001e121
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 0c e1 01 c0       	push   0xc001e10c
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 13 e1 01 c0       	push   0xc001e113
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 8a e0 01 c0       	push   0xc001e08a
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 94 e0 01 c0       	push   0xc001e094
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 9e e0 01 c0       	push   0xc001e09e
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 a8 e0 01 c0       	push   0xc001e0a8
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 b2 e0 01 c0       	push   0xc001e0b2
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 bc e0 01 c0       	push   0xc001e0bc
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 c6 e0 01 c0       	push   0xc001e0c6
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 d0 e0 01 c0       	push   0xc001e0d0
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 da e0 01 c0       	push   0xc001e0da
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 e4 e0 01 c0       	push   0xc001e0e4
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 ee e0 01 c0       	push   0xc001e0ee
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 f8 e0 01 c0       	push   0xc001e0f8
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 02 e1 01 c0       	push   0xc001e102
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 5c e2 01 c0       	push   0xc001e25c
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 66 e2 01 c0       	push   0xc001e266
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 70 e2 01 c0       	push   0xc001e270
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 7a e2 01 c0       	push   0xc001e27a
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 84 e2 01 c0       	push   0xc001e284
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 8e e2 01 c0       	push   0xc001e28e
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 98 e2 01 c0       	push   0xc001e298
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 a2 e2 01 c0       	push   0xc001e2a2
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 c7 24 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 f5 15 00 00       	call   c0008f3c <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 16 e0 01 c0       	push   0xc001e016
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 2a 16 00 00       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 28 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f28
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d 28 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021f28
c00079dd:	e8 f4 03 00 00       	call   c0007dd6 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 f5 22 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 28 1f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021f28,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 28 1f 02 c0       	mov    eax,ds:0xc0021f28
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 b8 fb 01 c0       	push   0xc001fbb8
c0007a25:	e8 80 2f 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 e8 fb 01 c0       	push   0xc001fbe8
c0007a3c:	e8 34 8e 00 00       	call   c0010875 <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 ed fb 01 c0       	push   0xc001fbed
c0007a52:	e8 1e 8e 00 00       	call   c0010875 <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 58 23 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 7c 1f 00 00       	call   c0009a2a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 f4 fb 01 c0       	push   0xc001fbf4
c0007b74:	e8 31 2e 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 05 86 00 00       	call   c0010183 <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 af 03 00 00       	call   c0007f44 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 3f 1c 00 00       	call   c00097d9 <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 07 1f 00 00       	call   c0009aac <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 aa 6c 01 00       	call   c001e85a <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	6a 00                	push   0x0
c0007bc8:	6a 00                	push   0x0
c0007bca:	6a 00                	push   0x0
c0007bcc:	56                   	push   esi
c0007bcd:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd3:	e8 ee f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd8:	83 c4 14             	add    esp,0x14
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 95 1f 00 00       	call   c0009b76 <VAS::~VAS()>
c0007be1:	83 c4 30             	add    esp,0x30
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	5f                   	pop    edi
c0007be7:	c3                   	ret    

c0007be8 <Phys::allocateDMA(unsigned long)>:
c0007be8:	55                   	push   ebp
c0007be9:	31 ed                	xor    ebp,ebp
c0007beb:	57                   	push   edi
c0007bec:	56                   	push   esi
c0007bed:	31 f6                	xor    esi,esi
c0007bef:	53                   	push   ebx
c0007bf0:	31 db                	xor    ebx,ebx
c0007bf2:	83 ec 1c             	sub    esp,0x1c
c0007bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf9:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfe:	c1 e8 0c             	shr    eax,0xc
c0007c01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c05:	31 c0                	xor    eax,eax
c0007c07:	eb 1b                	jmp    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c09:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0c:	85 c0                	test   eax,eax
c0007c0e:	0f 44 eb             	cmove  ebp,ebx
c0007c11:	0f 44 f3             	cmove  esi,ebx
c0007c14:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c18:	74 37                	je     c0007c51 <Phys::allocateDMA(unsigned long)+0x69>
c0007c1a:	89 f8                	mov    eax,edi
c0007c1c:	83 c3 01             	add    ebx,0x1
c0007c1f:	83 fb 0f             	cmp    ebx,0xf
c0007c22:	7f 13                	jg     c0007c37 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c24:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2b:	74 dc                	je     c0007c09 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c3 01             	add    ebx,0x1
c0007c32:	83 fb 0f             	cmp    ebx,0xf
c0007c35:	7e ed                	jle    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c37:	83 ec 0c             	sub    esp,0xc
c0007c3a:	68 0c fc 01 c0       	push   0xc001fc0c
c0007c3f:	e8 31 8c 00 00       	call   c0010875 <KePanic(char const*)>
c0007c44:	83 c4 10             	add    esp,0x10
c0007c47:	31 c0                	xor    eax,eax
c0007c49:	83 c4 1c             	add    esp,0x1c
c0007c4c:	5b                   	pop    ebx
c0007c4d:	5e                   	pop    esi
c0007c4e:	5f                   	pop    edi
c0007c4f:	5d                   	pop    ebp
c0007c50:	c3                   	ret    
c0007c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c55:	89 f2                	mov    edx,esi
c0007c57:	c1 fa 04             	sar    edx,0x4
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	01 f1                	add    ecx,esi
c0007c60:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c63:	83 e9 01             	sub    ecx,0x1
c0007c66:	0f 48 ca             	cmovs  ecx,edx
c0007c69:	c1 f9 04             	sar    ecx,0x4
c0007c6c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c70:	74 06                	je     c0007c78 <Phys::allocateDMA(unsigned long)+0x90>
c0007c72:	89 eb                	mov    ebx,ebp
c0007c74:	31 c0                	xor    eax,eax
c0007c76:	eb b7                	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x47>
c0007c78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7c:	85 d2                	test   edx,edx
c0007c7e:	74 17                	je     c0007c97 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c80:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c86:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c90:	83 c2 01             	add    edx,0x1
c0007c93:	39 d0                	cmp    eax,edx
c0007c95:	75 f6                	jne    c0007c8d <Phys::allocateDMA(unsigned long)+0xa5>
c0007c97:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca5:	01 c2                	add    edx,eax
c0007ca7:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cad:	85 c9                	test   ecx,ecx
c0007caf:	74 17                	je     c0007cc8 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	68 0c fc 01 c0       	push   0xc001fc0c
c0007cb9:	e8 b7 8b 00 00       	call   c0010875 <KePanic(char const*)>
c0007cbe:	83 c4 10             	add    esp,0x10
c0007cc1:	89 f8                	mov    eax,edi
c0007cc3:	e9 54 ff ff ff       	jmp    c0007c1c <Phys::allocateDMA(unsigned long)+0x34>
c0007cc8:	c1 e6 0c             	shl    esi,0xc
c0007ccb:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd1:	e9 73 ff ff ff       	jmp    c0007c49 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cda:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ce0:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce5:	c1 ea 0c             	shr    edx,0xc
c0007ce8:	29 d0                	sub    eax,edx
c0007cea:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf8:	c1 e8 0c             	shr    eax,0xc
c0007cfb:	85 d2                	test   edx,edx
c0007cfd:	74 11                	je     c0007d10 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cff:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d04:	01 c2                	add    edx,eax
c0007d06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d09:	83 c0 01             	add    eax,0x1
c0007d0c:	39 d0                	cmp    eax,edx
c0007d0e:	75 f6                	jne    c0007d06 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d10:	c3                   	ret    

c0007d11 <Phys::setPageState(unsigned long, bool)>:
c0007d11:	57                   	push   edi
c0007d12:	56                   	push   esi
c0007d13:	8b 35 2c 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f2c
c0007d19:	53                   	push   ebx
c0007d1a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d27:	89 ca                	mov    edx,ecx
c0007d29:	83 e1 07             	and    ecx,0x7
c0007d2c:	c1 ea 03             	shr    edx,0x3
c0007d2f:	0f b6 c0             	movzx  eax,al
c0007d32:	d3 c3                	rol    ebx,cl
c0007d34:	01 d6                	add    esi,edx
c0007d36:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d39:	d3 e0                	shl    eax,cl
c0007d3b:	21 fb                	and    ebx,edi
c0007d3d:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3f:	8b 1d 2c 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f2c
c0007d45:	01 da                	add    edx,ebx
c0007d47:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d49:	09 c8                	or     eax,ecx
c0007d4b:	88 02                	mov    BYTE PTR [edx],al
c0007d4d:	5b                   	pop    ebx
c0007d4e:	5e                   	pop    esi
c0007d4f:	5f                   	pop    edi
c0007d50:	c3                   	ret    

c0007d51 <Phys::getPageState(unsigned long)>:
c0007d51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d55:	8b 15 2c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f2c
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	83 e1 07             	and    ecx,0x7
c0007d60:	c1 e8 03             	shr    eax,0x3
c0007d63:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d67:	d3 f8                	sar    eax,cl
c0007d69:	83 e0 01             	and    eax,0x1
c0007d6c:	c3                   	ret    

c0007d6d <Phys::freePage(unsigned long)>:
c0007d6d:	53                   	push   ebx
c0007d6e:	83 ec 08             	sub    esp,0x8
c0007d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d75:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d81:	76 41                	jbe    c0007dc4 <Phys::freePage(unsigned long)+0x57>
c0007d83:	c1 e8 0c             	shr    eax,0xc
c0007d86:	50                   	push   eax
c0007d87:	89 c3                	mov    ebx,eax
c0007d89:	e8 c3 ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007d8e:	5a                   	pop    edx
c0007d8f:	84 c0                	test   al,al
c0007d91:	74 20                	je     c0007db3 <Phys::freePage(unsigned long)+0x46>
c0007d93:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d98:	83 ec 08             	sub    esp,0x8
c0007d9b:	6a 00                	push   0x0
c0007d9d:	53                   	push   ebx
c0007d9e:	83 e8 01             	sub    eax,0x1
c0007da1:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da6:	e8 66 ff ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    
c0007db3:	c7 44 24 10 b1 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcb1
c0007dbb:	83 c4 08             	add    esp,0x8
c0007dbe:	5b                   	pop    ebx
c0007dbf:	e9 b1 8a 00 00       	jmp    c0010875 <KePanic(char const*)>
c0007dc4:	68 00 10 00 00       	push   0x1000
c0007dc9:	50                   	push   eax
c0007dca:	e8 07 ff ff ff       	call   c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dcf:	59                   	pop    ecx
c0007dd0:	5b                   	pop    ebx
c0007dd1:	83 c4 08             	add    esp,0x8
c0007dd4:	5b                   	pop    ebx
c0007dd5:	c3                   	ret    

c0007dd6 <Phys::allocatePage()>:
c0007dd6:	56                   	push   esi
c0007dd7:	53                   	push   ebx
c0007dd8:	83 ec 14             	sub    esp,0x14
c0007ddb:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de1:	89 f3                	mov    ebx,esi
c0007de3:	eb 0a                	jmp    c0007def <Phys::allocatePage()+0x19>
c0007de5:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007deb:	39 de                	cmp    esi,ebx
c0007ded:	74 26                	je     c0007e15 <Phys::allocatePage()+0x3f>
c0007def:	53                   	push   ebx
c0007df0:	e8 5c ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007df5:	5a                   	pop    edx
c0007df6:	84 c0                	test   al,al
c0007df8:	74 67                	je     c0007e61 <Phys::allocatePage()+0x8b>
c0007dfa:	83 c3 01             	add    ebx,0x1
c0007dfd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e03:	75 e0                	jne    c0007de5 <Phys::allocatePage()+0xf>
c0007e05:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0f:	31 db                	xor    ebx,ebx
c0007e11:	39 de                	cmp    esi,ebx
c0007e13:	75 da                	jne    c0007def <Phys::allocatePage()+0x19>
c0007e15:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e1a:	83 ec 0c             	sub    esp,0xc
c0007e1d:	83 f0 01             	xor    eax,0x1
c0007e20:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e33:	50                   	push   eax
c0007e34:	e8 25 28 00 00       	call   c000a65e <VAS::scanForEviction()>
c0007e39:	83 c4 10             	add    esp,0x10
c0007e3c:	85 c0                	test   eax,eax
c0007e3e:	75 48                	jne    c0007e88 <Phys::allocatePage()+0xb2>
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	68 34 fc 01 c0       	push   0xc001fc34
c0007e48:	e8 28 8a 00 00       	call   c0010875 <KePanic(char const*)>
c0007e4d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e53:	83 c4 10             	add    esp,0x10
c0007e56:	53                   	push   ebx
c0007e57:	e8 f5 fe ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007e5c:	5a                   	pop    edx
c0007e5d:	84 c0                	test   al,al
c0007e5f:	75 99                	jne    c0007dfa <Phys::allocatePage()+0x24>
c0007e61:	6a 01                	push   0x1
c0007e63:	53                   	push   ebx
c0007e64:	e8 a8 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e69:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6f:	59                   	pop    ecx
c0007e70:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e75:	5b                   	pop    ebx
c0007e76:	83 c2 01             	add    edx,0x1
c0007e79:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7f:	c1 e0 0c             	shl    eax,0xc
c0007e82:	83 c4 14             	add    esp,0x14
c0007e85:	5b                   	pop    ebx
c0007e86:	5e                   	pop    esi
c0007e87:	c3                   	ret    
c0007e88:	83 ec 08             	sub    esp,0x8
c0007e8b:	89 c2                	mov    edx,eax
c0007e8d:	6a 01                	push   0x1
c0007e8f:	c1 ea 0c             	shr    edx,0xc
c0007e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e96:	52                   	push   edx
c0007e97:	e8 75 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e9c:	83 c4 10             	add    esp,0x10
c0007e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea3:	eb dd                	jmp    c0007e82 <Phys::allocatePage()+0xac>

c0007ea5 <Phys::allocateContiguousPages(int)>:
c0007ea5:	57                   	push   edi
c0007ea6:	56                   	push   esi
c0007ea7:	53                   	push   ebx
c0007ea8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eac:	fa                   	cli    
c0007ead:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb2:	31 db                	xor    ebx,ebx
c0007eb4:	83 c0 01             	add    eax,0x1
c0007eb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebc:	85 db                	test   ebx,ebx
c0007ebe:	75 11                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007ec0:	e8 11 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	89 c7                	mov    edi,eax
c0007eca:	74 21                	je     c0007eed <Phys::allocateContiguousPages(int)+0x48>
c0007ecc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed1:	e8 00 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ed6:	89 da                	mov    edx,ebx
c0007ed8:	c1 e2 0c             	shl    edx,0xc
c0007edb:	01 fa                	add    edx,edi
c0007edd:	39 c2                	cmp    edx,eax
c0007edf:	74 22                	je     c0007f03 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee1:	83 fe 01             	cmp    esi,0x1
c0007ee4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee9:	89 c7                	mov    edi,eax
c0007eeb:	75 e4                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007eed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef2:	83 e8 01             	sub    eax,0x1
c0007ef5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007efa:	75 01                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x58>
c0007efc:	fb                   	sti    
c0007efd:	5b                   	pop    ebx
c0007efe:	89 f8                	mov    eax,edi
c0007f00:	5e                   	pop    esi
c0007f01:	5f                   	pop    edi
c0007f02:	c3                   	ret    
c0007f03:	83 c3 01             	add    ebx,0x1
c0007f06:	39 f3                	cmp    ebx,esi
c0007f08:	75 b2                	jne    c0007ebc <Phys::allocateContiguousPages(int)+0x17>
c0007f0a:	eb e1                	jmp    c0007eed <Phys::allocateContiguousPages(int)+0x48>

c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0c:	56                   	push   esi
c0007f0d:	53                   	push   ebx
c0007f0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f12:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f18:	73 06                	jae    c0007f20 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f1a:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f24:	c1 eb 0c             	shr    ebx,0xc
c0007f27:	c1 e8 0c             	shr    eax,0xc
c0007f2a:	39 d8                	cmp    eax,ebx
c0007f2c:	73 13                	jae    c0007f41 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2e:	6a 00                	push   0x0
c0007f30:	50                   	push   eax
c0007f31:	8d 70 01             	lea    esi,[eax+0x1]
c0007f34:	e8 d8 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 f0                	mov    eax,esi
c0007f3d:	5a                   	pop    edx
c0007f3e:	59                   	pop    ecx
c0007f3f:	75 ed                	jne    c0007f2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f41:	5b                   	pop    ebx
c0007f42:	5e                   	pop    esi
c0007f43:	c3                   	ret    

c0007f44 <Phys::physicalMemorySetup(unsigned int)>:
c0007f44:	55                   	push   ebp
c0007f45:	57                   	push   edi
c0007f46:	56                   	push   esi
c0007f47:	53                   	push   ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	83 ec 40             	sub    esp,0x40
c0007f4d:	6a 10                	push   0x10
c0007f4f:	6a 00                	push   0x0
c0007f51:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f56:	e8 95 85 ff ff       	call   c00004f0 <memset>
c0007f5b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f64:	05 00 10 00 00       	add    eax,0x1000
c0007f69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6d:	5a                   	pop    edx
c0007f6e:	59                   	pop    ecx
c0007f6f:	50                   	push   eax
c0007f70:	68 c7 fc 01 c0       	push   0xc001fcc7
c0007f75:	e8 30 2a 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0007f7a:	83 c4 10             	add    esp,0x10
c0007f7d:	83 ec 08             	sub    esp,0x8
c0007f80:	6a 01                	push   0x1
c0007f82:	53                   	push   ebx
c0007f83:	83 c3 01             	add    ebx,0x1
c0007f86:	e8 86 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f8b:	83 c4 10             	add    esp,0x10
c0007f8e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f94:	75 e7                	jne    c0007f7d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f96:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa1:	85 c0                	test   eax,eax
c0007fa3:	0f 84 43 01 00 00    	je     c00080ec <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007fa9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fb1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fb6:	e9 82 00 00 00       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007fbb:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc0:	89 c1                	mov    ecx,eax
c0007fc2:	39 f2                	cmp    edx,esi
c0007fc4:	19 f9                	sbb    ecx,edi
c0007fc6:	0f 82 c0 00 00 00    	jb     c000808c <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd0:	89 c5                	mov    ebp,eax
c0007fd2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fda:	19 cd                	sbb    ebp,ecx
c0007fdc:	0f 83 af 00 00 00    	jae    c0008091 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007fe2:	89 d6                	mov    esi,edx
c0007fe4:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fe9:	39 f2                	cmp    edx,esi
c0007feb:	89 cf                	mov    edi,ecx
c0007fed:	19 c8                	sbb    eax,ecx
c0007fef:	73 07                	jae    c0007ff8 <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007ff1:	be 00 00 0a 00       	mov    esi,0xa0000
c0007ff6:	31 ff                	xor    edi,edi
c0007ff8:	89 f2                	mov    edx,esi
c0007ffa:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fff:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008005:	89 f9                	mov    ecx,edi
c0008007:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000800b:	83 d1 ff             	adc    ecx,0xffffffff
c000800e:	39 d0                	cmp    eax,edx
c0008010:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	19 c8                	sbb    eax,ecx
c000801b:	0f 82 9d 01 00 00    	jb     c00081be <Phys::physicalMemorySetup(unsigned int)+0x27a>
c0008021:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008025:	83 c3 18             	add    ebx,0x18
c0008028:	83 c6 01             	add    esi,0x1
c000802b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000802f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008033:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008037:	0f 84 bf 00 00 00    	je     c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c000803d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000803f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008042:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008045:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008048:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000804c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000804f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008053:	01 f0                	add    eax,esi
c0008055:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008059:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000805d:	55                   	push   ebp
c000805e:	11 fa                	adc    edx,edi
c0008060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008064:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000806c:	50                   	push   eax
c000806d:	56                   	push   esi
c000806e:	68 64 fc 01 c0       	push   0xc001fc64
c0008073:	e8 32 29 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0008078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	09 f8                	or     eax,edi
c0008081:	75 79                	jne    c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0008083:	83 fd 01             	cmp    ebp,0x1
c0008086:	0f 84 2f ff ff ff    	je     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x77>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	75 90                	jne    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008091:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008095:	31 d2                	xor    edx,edx
c0008097:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000809b:	89 c8                	mov    eax,ecx
c000809d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080a1:	19 d1                	sbb    ecx,edx
c00080a3:	0f 82 78 ff ff ff    	jb     c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080a9:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080ae:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080b2:	b9 00 00 00 00       	mov    ecx,0x0
c00080b7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080bb:	0f 83 60 ff ff ff    	jae    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080c1:	39 c6                	cmp    esi,eax
c00080c3:	19 d7                	sbb    edi,edx
c00080c5:	0f 83 ff 00 00 00    	jae    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080d3:	29 c7                	sub    edi,eax
c00080d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080dd:	19 d5                	sbb    ebp,edx
c00080df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080e7:	e9 de 00 00 00       	jmp    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080ec:	83 ec 0c             	sub    esp,0xc
c00080ef:	68 df fc 01 c0       	push   0xc001fcdf
c00080f4:	e8 7c 87 00 00       	call   c0010875 <KePanic(char const*)>
c00080f9:	83 c4 10             	add    esp,0x10
c00080fc:	83 ec 08             	sub    esp,0x8
c00080ff:	bb 60 00 00 00       	mov    ebx,0x60
c0008104:	6a 00                	push   0x0
c0008106:	6a 06                	push   0x6
c0008108:	e8 04 fc ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000810d:	58                   	pop    eax
c000810e:	5a                   	pop    edx
c000810f:	6a 00                	push   0x0
c0008111:	6a 07                	push   0x7
c0008113:	e8 f9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008118:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000811e:	83 c4 10             	add    esp,0x10
c0008121:	83 c1 02             	add    ecx,0x2
c0008124:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	6a 00                	push   0x0
c000812f:	53                   	push   ebx
c0008130:	83 c3 01             	add    ebx,0x1
c0008133:	e8 d9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008141:	75 e7                	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c0008143:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008148:	bb 40 01 00 00       	mov    ebx,0x140
c000814d:	83 c0 20             	add    eax,0x20
c0008150:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008155:	eb 26                	jmp    c000817d <Phys::physicalMemorySetup(unsigned int)+0x239>
c0008157:	83 ec 08             	sub    esp,0x8
c000815a:	6a 00                	push   0x0
c000815c:	53                   	push   ebx
c000815d:	83 c3 01             	add    ebx,0x1
c0008160:	e8 ac fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008165:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	83 c0 01             	add    eax,0x1
c0008170:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008176:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000817b:	74 07                	je     c0008184 <Phys::physicalMemorySetup(unsigned int)+0x240>
c000817d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008182:	7e d3                	jle    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x213>
c0008184:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008189:	3d ff 07 00 00       	cmp    eax,0x7ff
c000818e:	7f 26                	jg     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0008190:	83 ec 08             	sub    esp,0x8
c0008193:	6a 00                	push   0x0
c0008195:	53                   	push   ebx
c0008196:	83 c3 01             	add    ebx,0x1
c0008199:	e8 73 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000819e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	83 c0 01             	add    eax,0x1
c00081a9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081af:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081b4:	75 d3                	jne    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081b6:	83 c4 3c             	add    esp,0x3c
c00081b9:	5b                   	pop    ebx
c00081ba:	5e                   	pop    esi
c00081bb:	5f                   	pop    edi
c00081bc:	5d                   	pop    ebp
c00081bd:	c3                   	ret    
c00081be:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081c2:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081ca:	83 ec 04             	sub    esp,0x4
c00081cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081d1:	56                   	push   esi
c00081d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081d6:	57                   	push   edi
c00081d7:	68 88 fc 01 c0       	push   0xc001fc88
c00081dc:	e8 c9 27 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00081e1:	5d                   	pop    ebp
c00081e2:	58                   	pop    eax
c00081e3:	56                   	push   esi
c00081e4:	57                   	push   edi
c00081e5:	e8 22 fd ff ff       	call   c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081f2:	83 c4 0c             	add    esp,0xc
c00081f5:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081ff:	01 f0                	add    eax,esi
c0008201:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008206:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000820d:	52                   	push   edx
c000820e:	50                   	push   eax
c000820f:	68 ed fc 01 c0       	push   0xc001fced
c0008214:	e8 91 27 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	e9 00 fe ff ff       	jmp    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008221:	90                   	nop

c0008222 <Pipe::isAtty()>:
c0008222:	31 c0                	xor    eax,eax
c0008224:	c3                   	ret    
c0008225:	90                   	nop

c0008226 <Pipe::~Pipe()>:
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	ba 4c fd 01 c0       	mov    edx,0xc001fd4c
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	89 10                	mov    DWORD PTR [eax],edx
c0008234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	50                   	push   eax
c000823c:	e8 5b 11 00 00       	call   c000939c <UnixFile::~UnixFile()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	90                   	nop
c0008245:	83 c4 0c             	add    esp,0xc
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <Pipe::~Pipe()>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 cd ff ff ff       	call   c0008226 <Pipe::~Pipe()>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	83 ec 08             	sub    esp,0x8
c000825f:	6a 20                	push   0x20
c0008261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008265:	e8 42 26 00 00       	call   c000a8ac <operator delete(void*, unsigned long)>
c000826a:	83 c4 10             	add    esp,0x10
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    
c0008271:	90                   	nop

c0008272 <Pipe::write(unsigned long long, void*, int*)>:
c0008272:	55                   	push   ebp
c0008273:	57                   	push   edi
c0008274:	56                   	push   esi
c0008275:	53                   	push   ebx
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000827d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008285:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000828c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008292:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008296:	89 d8                	mov    eax,ebx
c0008298:	89 d6                	mov    esi,edx
c000829a:	89 d7                	mov    edi,edx
c000829c:	c1 ff 1f             	sar    edi,0x1f
c000829f:	03 34 24             	add    esi,DWORD PTR [esp]
c00082a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a6:	c1 f8 1f             	sar    eax,0x1f
c00082a9:	39 f3                	cmp    ebx,esi
c00082ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b3:	19 f8                	sbb    eax,edi
c00082b5:	b8 01 00 00 00       	mov    eax,0x1
c00082ba:	72 72                	jb     c000832e <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	99                   	cdq    
c00082c6:	f7 fb                	idiv   ebx
c00082c8:	89 d8                	mov    eax,ebx
c00082ca:	29 d0                	sub    eax,edx
c00082cc:	89 d6                	mov    esi,edx
c00082ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d1:	89 c3                	mov    ebx,eax
c00082d3:	c1 fb 1f             	sar    ebx,0x1f
c00082d6:	39 c2                	cmp    edx,eax
c00082d8:	19 df                	sbb    edi,ebx
c00082da:	bb 00 00 00 00       	mov    ebx,0x0
c00082df:	72 04                	jb     c00082e5 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e1:	89 d3                	mov    ebx,edx
c00082e3:	29 c3                	sub    ebx,eax
c00082e5:	89 d0                	mov    eax,edx
c00082e7:	29 d8                	sub    eax,ebx
c00082e9:	74 0d                	je     c00082f8 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082eb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082ee:	89 c1                	mov    ecx,eax
c00082f0:	01 f7                	add    edi,esi
c00082f2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	74 0d                	je     c0008309 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00082fc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008300:	89 d9                	mov    ecx,ebx
c0008302:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008305:	89 c6                	mov    esi,eax
c0008307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008309:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000830c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008311:	75 10                	jne    c0008323 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008313:	83 ec 0c             	sub    esp,0xc
c0008316:	68 09 fd 01 c0       	push   0xc001fd09
c000831b:	e8 55 85 00 00       	call   c0010875 <KePanic(char const*)>
c0008320:	83 c4 10             	add    esp,0x10
c0008323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000832a:	89 08                	mov    DWORD PTR [eax],ecx
c000832c:	31 c0                	xor    eax,eax
c000832e:	83 c4 1c             	add    esp,0x1c
c0008331:	5b                   	pop    ebx
c0008332:	5e                   	pop    esi
c0008333:	5f                   	pop    edi
c0008334:	5d                   	pop    ebp
c0008335:	c3                   	ret    

c0008336 <Pipe::read(unsigned long long, void*, int*)>:
c0008336:	55                   	push   ebp
c0008337:	57                   	push   edi
c0008338:	56                   	push   esi
c0008339:	53                   	push   ebx
c000833a:	83 ec 1c             	sub    esp,0x1c
c000833d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008341:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008345:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008349:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000834c:	89 c8                	mov    eax,ecx
c000834e:	99                   	cdq    
c000834f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008353:	74 24                	je     c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008355:	39 f9                	cmp    ecx,edi
c0008357:	89 d1                	mov    ecx,edx
c0008359:	19 f1                	sbb    ecx,esi
c000835b:	73 1c                	jae    c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	fa                   	cli    
c000835e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008364:	e8 07 cd 00 00       	call   c0015070 <schedule()>
c0008369:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000836e:	48                   	dec    eax
c000836f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008374:	75 d3                	jne    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008376:	fb                   	sti    
c0008377:	eb d0                	jmp    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008379:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000837d:	39 f8                	cmp    eax,edi
c000837f:	89 d1                	mov    ecx,edx
c0008381:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 08                	jae    c0008391 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000838d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008391:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008394:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008397:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000839b:	29 f7                	sub    edi,esi
c000839d:	89 f8                	mov    eax,edi
c000839f:	99                   	cdq    
c00083a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083a4:	89 d0                	mov    eax,edx
c00083a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083aa:	19 c2                	sbb    edx,eax
c00083ac:	89 f8                	mov    eax,edi
c00083ae:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083b3:	89 ea                	mov    edx,ebp
c00083b5:	29 c2                	sub    edx,eax
c00083b7:	85 c0                	test   eax,eax
c00083b9:	74 0b                	je     c00083c6 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083bb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083be:	89 c1                	mov    ecx,eax
c00083c0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c6:	85 d2                	test   edx,edx
c00083c8:	74 0d                	je     c00083d7 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ce:	89 d1                	mov    ecx,edx
c00083d0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083d3:	89 c7                	mov    edi,eax
c00083d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083dd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e0:	99                   	cdq    
c00083e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083e5:	89 f7                	mov    edi,esi
c00083e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 49 63 01 00       	call   c001e740 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 26 fd 01 c0       	push   0xc001fd26
c000840c:	e8 64 84 00 00       	call   c0010875 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	83 c4 1c             	add    esp,0x1c
c0008421:	31 c0                	xor    eax,eax
c0008423:	5b                   	pop    ebx
c0008424:	5e                   	pop    esi
c0008425:	5f                   	pop    edi
c0008426:	5d                   	pop    ebp
c0008427:	c3                   	ret    

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 7c 0d 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 4c fd 01 c0       	mov    edx,0xc001fd4c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 55 f6 ff ff       	call   c0007acb <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 ed 0e 00 00       	call   c000939c <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 d1 23 00 00       	call   c000a8ac <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 f8 47 00 00       	call   c000ccee <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 7c f8 00 00       	call   c0017d98 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000853f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 60 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0a0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 60 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0a0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 18 1e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde1e8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 f0 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde210]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 ae f5 00 00       	call   c0017c2c <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	59                   	pop    ecx
c00086d2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086d7:	0f b6 c0             	movzx  eax,al
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f0:	01 f2                	add    edx,esi
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 0b f6 00 00       	jmp    c0017d34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 60 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd60
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 ff 80 00 00       	jmp    c0010875 <KePanic(char const*)>
c0008776:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	50                   	push   eax
c000878c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000878f:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008842:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008853:	83 ec 0c             	sub    esp,0xc
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 58 2f 00 00       	jmp    c000b82b <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088fe:	83 ec 0c             	sub    esp,0xc
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000896f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008973:	0f be c2             	movsx  eax,dl
c0008976:	83 f8 5b             	cmp    eax,0x5b
c0008979:	75 18                	jne    c0008993 <VgaText::putchar(char)+0x2b>
c000897b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000897f:	74 20                	je     c00089a1 <VgaText::putchar(char)+0x39>
c0008981:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008987:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000898e:	e9 b8 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008993:	83 f8 1b             	cmp    eax,0x1b
c0008996:	75 09                	jne    c00089a1 <VgaText::putchar(char)+0x39>
c0008998:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000899c:	e9 aa 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c00089a1:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089a5:	89 f9                	mov    ecx,edi
c00089a7:	84 c9                	test   cl,cl
c00089a9:	0f 84 8c 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xd3>
c00089af:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089b2:	80 f9 3e             	cmp    cl,0x3e
c00089b5:	77 70                	ja     c0008a27 <VgaText::putchar(char)+0xbf>
c00089b7:	83 f8 6d             	cmp    eax,0x6d
c00089ba:	75 3f                	jne    c00089fb <VgaText::putchar(char)+0x93>
c00089bc:	31 f6                	xor    esi,esi
c00089be:	31 d2                	xor    edx,edx
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c5:	7e 25                	jle    c00089ec <VgaText::putchar(char)+0x84>
c00089c7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089cc:	83 fa 3b             	cmp    edx,0x3b
c00089cf:	75 0f                	jne    c00089e0 <VgaText::putchar(char)+0x78>
c00089d1:	50                   	push   eax
c00089d2:	53                   	push   ebx
c00089d3:	e8 48 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089d8:	31 d2                	xor    edx,edx
c00089da:	59                   	pop    ecx
c00089db:	58                   	pop    eax
c00089dc:	31 c0                	xor    eax,eax
c00089de:	eb 09                	jmp    c00089e9 <VgaText::putchar(char)+0x81>
c00089e0:	6b c0 0a             	imul   eax,eax,0xa
c00089e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e7:	89 fa                	mov    edx,edi
c00089e9:	46                   	inc    esi
c00089ea:	eb d6                	jmp    c00089c2 <VgaText::putchar(char)+0x5a>
c00089ec:	84 d2                	test   dl,dl
c00089ee:	74 2f                	je     c0008a1f <VgaText::putchar(char)+0xb7>
c00089f0:	50                   	push   eax
c00089f1:	53                   	push   ebx
c00089f2:	e8 29 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089f7:	58                   	pop    eax
c00089f8:	5a                   	pop    edx
c00089f9:	eb 24                	jmp    c0008a1f <VgaText::putchar(char)+0xb7>
c00089fb:	83 f8 4a             	cmp    eax,0x4a
c00089fe:	75 1f                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a00:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a04:	75 19                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a06:	83 ec 0c             	sub    esp,0xc
c0008a09:	53                   	push   ebx
c0008a0a:	e8 95 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a0f:	83 c4 0c             	add    esp,0xc
c0008a12:	6a 00                	push   0x0
c0008a14:	6a 00                	push   0x0
c0008a16:	53                   	push   ebx
c0008a17:	e8 26 fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a25:	eb 24                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a27:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a2a:	83 f8 0e             	cmp    eax,0xe
c0008a2d:	7f 1c                	jg     c0008a4b <VgaText::putchar(char)+0xe3>
c0008a2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a32:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a35:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 50 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	5f                   	pop    edi
c0008a4e:	c3                   	ret    
c0008a4f:	90                   	nop

c0008a50 <VgaText::putx(unsigned int)>:
c0008a50:	57                   	push   edi
c0008a51:	b9 11 00 00 00       	mov    ecx,0x11
c0008a56:	56                   	push   esi
c0008a57:	be 6e fd 01 c0       	mov    esi,0xc001fd6e
c0008a5c:	53                   	push   ebx
c0008a5d:	83 ec 20             	sub    esp,0x20
c0008a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a64:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a68:	fc                   	cld    
c0008a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6b:	be 08 00 00 00       	mov    esi,0x8
c0008a70:	50                   	push   eax
c0008a71:	50                   	push   eax
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	c1 e8 1c             	shr    eax,0x1c
c0008a77:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a7c:	c1 e3 04             	shl    ebx,0x4
c0008a7f:	50                   	push   eax
c0008a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a84:	e8 df fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	4e                   	dec    esi
c0008a8d:	75 e1                	jne    c0008a70 <VgaText::putx(unsigned int)+0x20>
c0008a8f:	83 c4 20             	add    esp,0x20
c0008a92:	5b                   	pop    ebx
c0008a93:	5e                   	pop    esi
c0008a94:	5f                   	pop    edi
c0008a95:	c3                   	ret    

c0008a96 <VgaText::puts(char const*)>:
c0008a96:	53                   	push   ebx
c0008a97:	83 ec 08             	sub    esp,0x8
c0008a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa1:	85 c0                	test   eax,eax
c0008aa3:	74 12                	je     c0008ab7 <VgaText::puts(char const*)+0x21>
c0008aa5:	51                   	push   ecx
c0008aa6:	43                   	inc    ebx
c0008aa7:	51                   	push   ecx
c0008aa8:	50                   	push   eax
c0008aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aad:	e8 b6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	eb e7                	jmp    c0008a9e <VgaText::puts(char const*)+0x8>
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	c3                   	ret    

c0008abc <VgaText::write(unsigned long long, void*, int*)>:
c0008abc:	55                   	push   ebp
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	53                   	push   ebx
c0008ac0:	83 ec 0c             	sub    esp,0xc
c0008ac3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008acf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad9:	39 eb                	cmp    ebx,ebp
c0008adb:	74 13                	je     c0008af0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008add:	50                   	push   eax
c0008ade:	43                   	inc    ebx
c0008adf:	50                   	push   eax
c0008ae0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae4:	50                   	push   eax
c0008ae5:	56                   	push   esi
c0008ae6:	e8 7d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	eb e9                	jmp    c0008ad9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afb:	89 38                	mov    DWORD PTR [eax],edi
c0008afd:	83 c4 0c             	add    esp,0xc
c0008b00:	31 c0                	xor    eax,eax
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	5f                   	pop    edi
c0008b05:	5d                   	pop    ebp
c0008b06:	c3                   	ret    
c0008b07:	90                   	nop

c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b08:	55                   	push   ebp
c0008b09:	57                   	push   edi
c0008b0a:	56                   	push   esi
c0008b0b:	53                   	push   ebx
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b18:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b1f:	50                   	push   eax
c0008b20:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b25:	50                   	push   eax
c0008b26:	e8 c3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b2f:	5a                   	pop    edx
c0008b30:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b33:	59                   	pop    ecx
c0008b34:	0f b6 f8             	movzx  edi,al
c0008b37:	0f b7 db             	movzx  ebx,bx
c0008b3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b3e:	01 db                	add    ebx,ebx
c0008b40:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b43:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b46:	85 c0                	test   eax,eax
c0008b48:	0f 84 ef 00 00 00    	je     c0008c3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b4e:	83 f8 0d             	cmp    eax,0xd
c0008b51:	75 0c                	jne    c0008b5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b53:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b5a:	e9 d8 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b5f:	83 f8 0a             	cmp    eax,0xa
c0008b62:	75 44                	jne    c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b64:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b6b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b71:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b74:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b77:	75 0f                	jne    c0008b88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b79:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	55                   	push   ebp
c0008b80:	e8 7b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	83 ec 0c             	sub    esp,0xc
c0008b8b:	55                   	push   ebp
c0008b8c:	e8 79 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b98:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b9b:	0f b7 db             	movzx  ebx,bx
c0008b9e:	01 db                	add    ebx,ebx
c0008ba0:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008ba3:	e9 8f 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba8:	83 f8 08             	cmp    eax,0x8
c0008bab:	75 34                	jne    c0008be1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bad:	51                   	push   ecx
c0008bae:	51                   	push   ecx
c0008baf:	6a 01                	push   0x1
c0008bb1:	55                   	push   ebp
c0008bb2:	e8 bf fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bb7:	5b                   	pop    ebx
c0008bb8:	58                   	pop    eax
c0008bb9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bbc:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bbf:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bc2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bc5:	6a 20                	push   0x20
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 d5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcd:	83 c4 20             	add    esp,0x20
c0008bd0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bd4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bd7:	0f b7 db             	movzx  ebx,bx
c0008bda:	01 db                	add    ebx,ebx
c0008bdc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bdf:	eb 56                	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be1:	52                   	push   edx
c0008be2:	52                   	push   edx
c0008be3:	57                   	push   edi
c0008be4:	50                   	push   eax
c0008be5:	e8 a8 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf0:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bf6:	75 1d                	jne    c0008c15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bfe:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c0c:	50                   	push   eax
c0008c0d:	e8 22 f1 00 00       	call   c0017d34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c12:	83 c4 20             	add    esp,0x20
c0008c15:	50                   	push   eax
c0008c16:	83 c3 02             	add    ebx,0x2
c0008c19:	50                   	push   eax
c0008c1a:	6a 00                	push   0x0
c0008c1c:	55                   	push   ebp
c0008c1d:	e8 00 fc ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c29:	75 0c                	jne    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c2f:	0f b7 db             	movzx  ebx,bx
c0008c32:	01 db                	add    ebx,ebx
c0008c34:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c37:	46                   	inc    esi
c0008c38:	e9 06 ff ff ff       	jmp    c0008b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	55                   	push   ebp
c0008c41:	e8 c4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c46:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c4d:	83 c4 1c             	add    esp,0x1c
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	5d                   	pop    ebp
c0008c54:	c3                   	ret    
c0008c55:	90                   	nop

c0008c56 <VgaText::VgaText(char const*)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	83 ec 04             	sub    esp,0x4
c0008c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5f:	83 ec 08             	sub    esp,0x8
c0008c62:	6a 00                	push   0x0
c0008c64:	50                   	push   eax
c0008c65:	e8 4c 05 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	89 10                	mov    DWORD PTR [eax],edx
c0008c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c87:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	6a 01                	push   0x1
c0008cda:	e8 26 09 00 00       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0008cdf:	83 c4 10             	add    esp,0x10
c0008ce2:	89 c2                	mov    edx,eax
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ceb:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf8:	89 c6                	mov    esi,eax
c0008cfa:	e8 d7 f0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0008cff:	68 05 0c 00 00       	push   0xc05
c0008d04:	56                   	push   esi
c0008d05:	50                   	push   eax
c0008d06:	53                   	push   ebx
c0008d07:	e8 d8 0f 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d16:	83 ec 04             	sub    esp,0x4
c0008d19:	68 a0 0f 00 00       	push   0xfa0
c0008d1e:	6a 00                	push   0x0
c0008d20:	50                   	push   eax
c0008d21:	e8 ca 77 ff ff       	call   c00004f0 <memset>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	83 ec 04             	sub    esp,0x4
c0008d2c:	6a 00                	push   0x0
c0008d2e:	6a 07                	push   0x7
c0008d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d34:	e8 7b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d39:	83 c4 10             	add    esp,0x10
c0008d3c:	83 ec 04             	sub    esp,0x4
c0008d3f:	6a 00                	push   0x0
c0008d41:	6a 00                	push   0x0
c0008d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d47:	e8 f6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	83 ec 0c             	sub    esp,0xc
c0008d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d56:	e8 49 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d62:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	05 82 00 00 00       	add    eax,0x82
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	68 80 00 00 00       	push   0x80
c0008d77:	6a 00                	push   0x0
c0008d79:	50                   	push   eax
c0008d7a:	e8 71 77 ff ff       	call   c00004f0 <memset>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d86:	05 02 01 00 00       	add    eax,0x102
c0008d8b:	83 ec 04             	sub    esp,0x4
c0008d8e:	68 80 00 00 00       	push   0x80
c0008d93:	6a 00                	push   0x0
c0008d95:	50                   	push   eax
c0008d96:	e8 55 77 ff ff       	call   c00004f0 <memset>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	90                   	nop
c0008d9f:	83 c4 04             	add    esp,0x4
c0008da2:	5b                   	pop    ebx
c0008da3:	5e                   	pop    esi
c0008da4:	c3                   	ret    
c0008da5:	90                   	nop

c0008da6 <VgaText::receiveKey(unsigned char)>:
c0008da6:	55                   	push   ebp
c0008da7:	57                   	push   edi
c0008da8:	56                   	push   esi
c0008da9:	53                   	push   ebx
c0008daa:	83 ec 2c             	sub    esp,0x2c
c0008dad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db5:	89 fd                	mov    ebp,edi
c0008db7:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dbd:	0f 84 48 01 00 00    	je     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008dc3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc9:	83 fd 08             	cmp    ebp,0x8
c0008dcc:	75 6a                	jne    c0008e38 <VgaText::receiveKey(unsigned char)+0x92>
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	56                   	push   esi
c0008dd2:	e8 a9 77 ff ff       	call   c0000580 <strlen>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	85 c0                	test   eax,eax
c0008ddc:	0f 84 ef 00 00 00    	je     c0008ed1 <VgaText::receiveKey(unsigned char)+0x12b>
c0008de2:	50                   	push   eax
c0008de3:	50                   	push   eax
c0008de4:	6a 08                	push   0x8
c0008de6:	53                   	push   ebx
c0008de7:	e8 7c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dec:	89 34 24             	mov    DWORD PTR [esp],esi
c0008def:	e8 8c 77 ff ff       	call   c0000580 <strlen>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008dff:	83 fa 1f             	cmp    edx,0x1f
c0008e02:	89 d0                	mov    eax,edx
c0008e04:	7f 1c                	jg     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e06:	83 e8 08             	sub    eax,0x8
c0008e09:	3c 02                	cmp    al,0x2
c0008e0b:	76 15                	jbe    c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0d:	83 fa 0d             	cmp    edx,0xd
c0008e10:	74 10                	je     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e12:	57                   	push   edi
c0008e13:	57                   	push   edi
c0008e14:	68 7f fd 01 c0       	push   0xc001fd7f
c0008e19:	53                   	push   ebx
c0008e1a:	e8 77 fc ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	56                   	push   esi
c0008e26:	e8 55 77 ff ff       	call   c0000580 <strlen>
c0008e2b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e33:	e9 96 00 00 00       	jmp    c0008ece <VgaText::receiveKey(unsigned char)+0x128>
c0008e38:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	50                   	push   eax
c0008e42:	e8 39 77 ff ff       	call   c0000580 <strlen>
c0008e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e4e:	e8 2d 77 ff ff       	call   c0000580 <strlen>
c0008e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e57:	83 c4 10             	add    esp,0x10
c0008e5a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e5e:	3d 80 00 00 00       	cmp    eax,0x80
c0008e63:	0f 87 a2 00 00 00    	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008e69:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e6c:	3c 1e                	cmp    al,0x1e
c0008e6e:	77 35                	ja     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e70:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e73:	3c 01                	cmp    al,0x1
c0008e75:	76 2e                	jbe    c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e77:	83 fd 0d             	cmp    ebp,0xd
c0008e7a:	74 29                	je     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e82:	68 85 fd 01 c0       	push   0xc001fd85
c0008e87:	53                   	push   ebx
c0008e88:	e8 7b fc ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e8d:	8d 47 40             	lea    eax,[edi+0x40]
c0008e90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e93:	0f b6 c0             	movzx  eax,al
c0008e96:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e99:	50                   	push   eax
c0008e9a:	53                   	push   ebx
c0008e9b:	e8 f8 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea0:	83 c4 20             	add    esp,0x20
c0008ea3:	eb 11                	jmp    c0008eb6 <VgaText::receiveKey(unsigned char)+0x110>
c0008ea5:	51                   	push   ecx
c0008ea6:	89 f8                	mov    eax,edi
c0008ea8:	51                   	push   ecx
c0008ea9:	0f be c0             	movsx  eax,al
c0008eac:	50                   	push   eax
c0008ead:	53                   	push   ebx
c0008eae:	e8 b5 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ebb:	89 f8                	mov    eax,edi
c0008ebd:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec1:	52                   	push   edx
c0008ec2:	52                   	push   edx
c0008ec3:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ec7:	50                   	push   eax
c0008ec8:	56                   	push   esi
c0008ec9:	e8 a2 79 ff ff       	call   c0000870 <strcat>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ed8:	75 0f                	jne    c0008ee9 <VgaText::receiveKey(unsigned char)+0x143>
c0008eda:	83 fd 1c             	cmp    ebp,0x1c
c0008edd:	77 2c                	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008edf:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ee4:	0f a3 e8             	bt     eax,ebp
c0008ee7:	73 22                	jae    c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008ee9:	50                   	push   eax
c0008eea:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef0:	50                   	push   eax
c0008ef1:	56                   	push   esi
c0008ef2:	53                   	push   ebx
c0008ef3:	e8 78 79 ff ff       	call   c0000870 <strcat>
c0008ef8:	83 c4 0c             	add    esp,0xc
c0008efb:	68 80 00 00 00       	push   0x80
c0008f00:	6a 00                	push   0x0
c0008f02:	56                   	push   esi
c0008f03:	e8 e8 75 ff ff       	call   c00004f0 <memset>
c0008f08:	83 c4 10             	add    esp,0x10
c0008f0b:	83 c4 2c             	add    esp,0x2c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	90                   	nop

c0008f14 <VgaText::doUpdate()>:
c0008f14:	c3                   	ret    

c0008f15 <newTerminal(char*)>:
c0008f15:	83 ec 28             	sub    esp,0x28
c0008f18:	68 84 01 00 00       	push   0x184
c0008f1d:	e8 a9 eb ff ff       	call   c0007acb <malloc>
c0008f22:	5a                   	pop    edx
c0008f23:	59                   	pop    ecx
c0008f24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f28:	50                   	push   eax
c0008f29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f2d:	e8 24 fd ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0008f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f36:	83 c4 2c             	add    esp,0x2c
c0008f39:	c3                   	ret    
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::TSS()>:
c0008f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f47:	90                   	nop
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::setESP(unsigned long)>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f5b:	90                   	nop
c0008f5c:	5d                   	pop    ebp
c0008f5d:	c3                   	ret    
c0008f5e:	66 90                	xchg   ax,ax

c0008f60 <TSS::flush()>:
c0008f60:	55                   	push   ebp
c0008f61:	89 e5                	mov    ebp,esp
c0008f63:	83 ec 10             	sub    esp,0x10
c0008f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f6b:	83 c8 03             	or     eax,0x3
c0008f6e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f72:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f76:	66 89 d0             	mov    ax,dx
c0008f79:	0f 00 d8             	ltr    ax
c0008f7c:	90                   	nop
c0008f7d:	c9                   	leave  
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <TSS::setup(unsigned long, unsigned long)>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 18             	sub    esp,0x18
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	6a 68                	push   0x68
c0008f8b:	e8 3b eb ff ff       	call   c0007acb <malloc>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	89 c2                	mov    edx,eax
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa1:	83 ec 04             	sub    esp,0x4
c0008fa4:	6a 68                	push   0x68
c0008fa6:	6a 00                	push   0x0
c0008fa8:	50                   	push   eax
c0008fa9:	e8 42 75 ff ff       	call   c00004f0 <memset>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009026:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009032:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009048:	0f 20 da             	mov    edx,cr3
c000904b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009051:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	50                   	push   eax
c000905e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009061:	50                   	push   eax
c0009062:	e8 d3 e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0009067:	83 c4 10             	add    esp,0x10
c000906a:	83 ec 08             	sub    esp,0x8
c000906d:	6a 68                	push   0x68
c000906f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009072:	50                   	push   eax
c0009073:	e8 de e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0009078:	83 c4 10             	add    esp,0x10
c000907b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009082:	83 e0 0f             	and    eax,0xf
c0009085:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009088:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908b:	83 c8 40             	or     eax,0x40
c000908e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009091:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009096:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000909c:	05 78 01 00 00       	add    eax,0x178
c00090a1:	83 ec 04             	sub    esp,0x4
c00090a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 da e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	89 c2                	mov    edx,eax
c00090b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b8:	89 10                	mov    DWORD PTR [eax],edx
c00090ba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c5:	05 78 01 00 00       	add    eax,0x178
c00090ca:	83 ec 0c             	sub    esp,0xc
c00090cd:	50                   	push   eax
c00090ce:	e8 e1 e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090db:	c9                   	leave  
c00090dc:	c3                   	ret    
c00090dd:	90                   	nop

c00090de <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ee:	75 08                	jne    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f6:	eb 38                	jmp    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090fd:	75 17                	jne    c0009116 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009104:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009107:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000910d:	8b 10                	mov    edx,DWORD PTR [eax]
c000910f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009113:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009116:	89 c1                	mov    ecx,eax
c0009118:	83 e1 fd             	and    ecx,0xfffffffd
c000911b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009121:	74 cd                	je     c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009123:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009128:	83 e0 ef             	and    eax,0xffffffef
c000912b:	83 f8 08             	cmp    eax,0x8
c000912e:	76 c0                	jbe    c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009130:	31 c0                	xor    eax,eax
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::isAtty()>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000913b:	31 c0                	xor    eax,eax
c000913d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009143:	74 09                	je     c000914e <ReservedFilename::isAtty()+0x1a>
c0009145:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000914b:	0f 94 c0             	sete   al
c000914e:	c3                   	ret    
c000914f:	90                   	nop

c0009150 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000915f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009164:	75 08                	jne    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009166:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000916c:	eb 3d                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009173:	75 17                	jne    c000918c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000917a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000917d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009183:	8b 10                	mov    edx,DWORD PTR [eax]
c0009185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009189:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000918c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009191:	75 04                	jne    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009193:	89 0a                	mov    DWORD PTR [edx],ecx
c0009195:	eb 14                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009197:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000919c:	74 c8                	je     c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091a3:	83 e0 ef             	and    eax,0xffffffef
c00091a6:	83 f8 08             	cmp    eax,0x8
c00091a9:	76 bb                	jbe    c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ab:	31 c0                	xor    eax,eax
c00091ad:	c3                   	ret    

c00091ae <UnixFile::getFileDescriptor()>:
c00091ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::UnixFile(int)>:
c00091b6:	53                   	push   ebx
c00091b7:	83 ec 28             	sub    esp,0x28
c00091ba:	ba 5c fe 01 c0       	mov    edx,0xc001fe5c
c00091bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c3:	89 10                	mov    DWORD PTR [eax],edx
c00091c5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091cd:	0f 8f 90 01 00 00    	jg     c0009363 <UnixFile::UnixFile(int)+0x1ad>
c00091d3:	a1 a0 1f 02 c0       	mov    eax,ds:0xc0021fa0
c00091d8:	8d 50 01             	lea    edx,[eax+0x1]
c00091db:	89 15 a0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa0,edx
c00091e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091ef:	68 98 4f 02 c0       	push   0xc0024f98
c00091f4:	e8 2f 57 01 00       	call   c001e928 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009201:	83 f0 01             	xor    eax,0x1
c0009204:	0f b6 c0             	movzx  eax,al
c0009207:	85 c0                	test   eax,eax
c0009209:	0f 84 55 01 00 00    	je     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c000920f:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009216:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921e:	83 ec 0c             	sub    esp,0xc
c0009221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009225:	e8 a1 e8 ff ff       	call   c0007acb <malloc>
c000922a:	83 c4 10             	add    esp,0x10
c000922d:	89 c3                	mov    ebx,eax
c000922f:	83 ec 08             	sub    esp,0x8
c0009232:	68 03 ff ff 0f       	push   0xfffff03
c0009237:	53                   	push   ebx
c0009238:	e8 2d 01 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000923d:	83 c4 10             	add    esp,0x10
c0009240:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009246:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924e:	83 ec 0c             	sub    esp,0xc
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 71 e8 ff ff       	call   c0007acb <malloc>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	89 c3                	mov    ebx,eax
c000925f:	83 ec 08             	sub    esp,0x8
c0009262:	68 01 ff ff 0f       	push   0xfffff01
c0009267:	53                   	push   ebx
c0009268:	e8 fd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009276:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009285:	e8 41 e8 ff ff       	call   c0007acb <malloc>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 c3                	mov    ebx,eax
c000928f:	83 ec 08             	sub    esp,0x8
c0009292:	68 00 ff ff 0f       	push   0xfffff00
c0009297:	53                   	push   ebx
c0009298:	e8 cd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092a6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ae:	83 ec 0c             	sub    esp,0xc
c00092b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b5:	e8 11 e8 ff ff       	call   c0007acb <malloc>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 c3                	mov    ebx,eax
c00092bf:	83 ec 08             	sub    esp,0x8
c00092c2:	68 02 ff ff 0f       	push   0xfffff02
c00092c7:	53                   	push   ebx
c00092c8:	e8 9d 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092de:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092e3:	7f 7f                	jg     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c00092e5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092ed:	83 ec 0c             	sub    esp,0xc
c00092f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f4:	e8 d2 e7 ff ff       	call   c0007acb <malloc>
c00092f9:	83 c4 10             	add    esp,0x10
c00092fc:	89 c3                	mov    ebx,eax
c00092fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009302:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009307:	83 ec 08             	sub    esp,0x8
c000930a:	50                   	push   eax
c000930b:	53                   	push   ebx
c000930c:	e8 59 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009318:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000931f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009327:	83 ec 0c             	sub    esp,0xc
c000932a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932e:	e8 98 e7 ff ff       	call   c0007acb <malloc>
c0009333:	83 c4 10             	add    esp,0x10
c0009336:	89 c3                	mov    ebx,eax
c0009338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009341:	83 ec 08             	sub    esp,0x8
c0009344:	50                   	push   eax
c0009345:	53                   	push   ebx
c0009346:	e8 1f 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009352:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009359:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935e:	e9 7b ff ff ff       	jmp    c00092de <UnixFile::UnixFile(int)+0x128>
c0009363:	90                   	nop
c0009364:	83 c4 28             	add    esp,0x28
c0009367:	5b                   	pop    ebx
c0009368:	c3                   	ret    
c0009369:	90                   	nop

c000936a <ReservedFilename::ReservedFilename(int)>:
c000936a:	83 ec 0c             	sub    esp,0xc
c000936d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009371:	83 ec 08             	sub    esp,0x8
c0009374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009378:	50                   	push   eax
c0009379:	e8 38 fe ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	ba 78 fe 01 c0       	mov    edx,0xc001fe78
c0009386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938a:	89 10                	mov    DWORD PTR [eax],edx
c000938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009394:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009397:	90                   	nop
c0009398:	83 c4 0c             	add    esp,0xc
c000939b:	c3                   	ret    

c000939c <UnixFile::~UnixFile()>:
c000939c:	83 ec 1c             	sub    esp,0x1c
c000939f:	ba 5c fe 01 c0       	mov    edx,0xc001fe5c
c00093a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a8:	89 10                	mov    DWORD PTR [eax],edx
c00093aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b6:	7f 76                	jg     c000942e <UnixFile::~UnixFile()+0x92>
c00093b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 2f 56 01 00       	call   c001e9fc <LinkedList<UnixFile>::getFirstElement()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	68 98 4f 02 c0       	push   0xc0024f98
c00093dc:	e8 23 56 01 00       	call   c001ea04 <LinkedList<UnixFile>::removeFirst()>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093ec:	74 43                	je     c0009431 <UnixFile::~UnixFile()+0x95>
c00093ee:	83 ec 08             	sub    esp,0x8
c00093f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f5:	68 98 4f 02 c0       	push   0xc0024f98
c00093fa:	e8 29 55 01 00       	call   c001e928 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009406:	8d 50 01             	lea    edx,[eax+0x1]
c0009409:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000940d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009412:	0f 94 c0             	sete   al
c0009415:	0f b6 c0             	movzx  eax,al
c0009418:	85 c0                	test   eax,eax
c000941a:	74 a4                	je     c00093c0 <UnixFile::~UnixFile()+0x24>
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	68 34 fe 01 c0       	push   0xc001fe34
c0009424:	e8 4c 74 00 00       	call   c0010875 <KePanic(char const*)>
c0009429:	83 c4 10             	add    esp,0x10
c000942c:	eb 92                	jmp    c00093c0 <UnixFile::~UnixFile()+0x24>
c000942e:	90                   	nop
c000942f:	eb 01                	jmp    c0009432 <UnixFile::~UnixFile()+0x96>
c0009431:	90                   	nop
c0009432:	90                   	nop
c0009433:	83 c4 1c             	add    esp,0x1c
c0009436:	c3                   	ret    
c0009437:	90                   	nop

c0009438 <UnixFile::~UnixFile()>:
c0009438:	83 ec 0c             	sub    esp,0xc
c000943b:	83 ec 0c             	sub    esp,0xc
c000943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009442:	e8 55 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c0009447:	83 c4 10             	add    esp,0x10
c000944a:	83 ec 08             	sub    esp,0x8
c000944d:	6a 0c                	push   0xc
c000944f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009453:	e8 54 14 00 00       	call   c000a8ac <operator delete(void*, unsigned long)>
c0009458:	83 c4 10             	add    esp,0x10
c000945b:	83 c4 0c             	add    esp,0xc
c000945e:	c3                   	ret    
c000945f:	90                   	nop

c0009460 <ReservedFilename::~ReservedFilename()>:
c0009460:	83 ec 0c             	sub    esp,0xc
c0009463:	ba 78 fe 01 c0       	mov    edx,0xc001fe78
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	89 10                	mov    DWORD PTR [eax],edx
c000946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009472:	83 ec 0c             	sub    esp,0xc
c0009475:	50                   	push   eax
c0009476:	e8 21 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	90                   	nop
c000947f:	83 c4 0c             	add    esp,0xc
c0009482:	c3                   	ret    
c0009483:	90                   	nop

c0009484 <ReservedFilename::~ReservedFilename()>:
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	83 ec 0c             	sub    esp,0xc
c000948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948e:	e8 cd ff ff ff       	call   c0009460 <ReservedFilename::~ReservedFilename()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	6a 0c                	push   0xc
c000949b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949f:	e8 08 14 00 00       	call   c000a8ac <operator delete(void*, unsigned long)>
c00094a4:	83 c4 10             	add    esp,0x10
c00094a7:	83 c4 0c             	add    esp,0xc
c00094aa:	c3                   	ret    

c00094ab <getFromFileDescriptor(int)>:
c00094ab:	53                   	push   ebx
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bf:	7f 2c                	jg     c00094ed <getFromFileDescriptor(int)+0x42>
c00094c1:	83 ec 0c             	sub    esp,0xc
c00094c4:	68 98 4f 02 c0       	push   0xc0024f98
c00094c9:	e8 2e 55 01 00       	call   c001e9fc <LinkedList<UnixFile>::getFirstElement()>
c00094ce:	83 c4 10             	add    esp,0x10
c00094d1:	85 c0                	test   eax,eax
c00094d3:	75 04                	jne    c00094d9 <getFromFileDescriptor(int)+0x2e>
c00094d5:	31 c0                	xor    eax,eax
c00094d7:	eb 6e                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c00094d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094dc:	74 69                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094de:	52                   	push   edx
c00094df:	52                   	push   edx
c00094e0:	50                   	push   eax
c00094e1:	68 98 4f 02 c0       	push   0xc0024f98
c00094e6:	e8 bb 55 01 00       	call   c001eaa6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094eb:	eb e1                	jmp    c00094ce <getFromFileDescriptor(int)+0x23>
c00094ed:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f3:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094f8:	74 4d                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094fa:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009500:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009505:	74 40                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009507:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950d:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009512:	74 33                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009514:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951a:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000951f:	74 26                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009521:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009527:	83 f8 08             	cmp    eax,0x8
c000952a:	77 09                	ja     c0009535 <getFromFileDescriptor(int)+0x8a>
c000952c:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009533:	eb 12                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c0009535:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953b:	83 fb 08             	cmp    ebx,0x8
c000953e:	77 95                	ja     c00094d5 <getFromFileDescriptor(int)+0x2a>
c0009540:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009547:	83 c4 08             	add    esp,0x8
c000954a:	5b                   	pop    ebx
c000954b:	c3                   	ret    

c000954c <__static_initialization_and_destruction_0(int, int)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009554:	75 34                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009556:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955e:	75 2a                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	68 98 4f 02 c0       	push   0xc0024f98
c0009568:	e8 79 53 01 00       	call   c001e8e6 <LinkedList<UnixFile>::LinkedList()>
c000956d:	83 c4 10             	add    esp,0x10
c0009570:	83 ec 04             	sub    esp,0x4
c0009573:	68 24 1f 02 c0       	push   0xc0021f24
c0009578:	68 98 4f 02 c0       	push   0xc0024f98
c000957d:	68 e4 e8 01 c0       	push   0xc001e8e4
c0009582:	e8 d5 12 00 00       	call   c000a85c <__cxa_atexit>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	90                   	nop
c000958b:	83 c4 0c             	add    esp,0xc
c000958e:	c3                   	ret    

c000958f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958f:	83 ec 0c             	sub    esp,0xc
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	68 ff ff 00 00       	push   0xffff
c000959a:	6a 01                	push   0x1
c000959c:	e8 ab ff ff ff       	call   c000954c <__static_initialization_and_destruction_0(int, int)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	c3                   	ret    

c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a8:	53                   	push   ebx
c00095a9:	8b 15 a8 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fa8
c00095af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095bd:	89 d8                	mov    eax,ebx
c00095bf:	d1 e8                	shr    eax,1
c00095c1:	01 d0                	add    eax,edx
c00095c3:	80 e3 01             	and    bl,0x1
c00095c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c8:	75 09                	jne    c00095d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ca:	83 e2 f0             	and    edx,0xfffffff0
c00095cd:	09 ca                	or     edx,ecx
c00095cf:	88 10                	mov    BYTE PTR [eax],dl
c00095d1:	5b                   	pop    ebx
c00095d2:	c3                   	ret    
c00095d3:	0f b6 c9             	movzx  ecx,cl
c00095d6:	83 e2 0f             	and    edx,0xf
c00095d9:	c1 e1 04             	shl    ecx,0x4
c00095dc:	09 ca                	or     edx,ecx
c00095de:	88 10                	mov    BYTE PTR [eax],dl
c00095e0:	5b                   	pop    ebx
c00095e1:	c3                   	ret    

c00095e2 <Virt::getPageState(unsigned long)>:
c00095e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e6:	8b 0d a8 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fa8
c00095ec:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f2:	89 d0                	mov    eax,edx
c00095f4:	d1 e8                	shr    eax,1
c00095f6:	80 e2 01             	and    dl,0x1
c00095f9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095fc:	74 03                	je     c0009601 <Virt::getPageState(unsigned long)+0x1f>
c00095fe:	c1 e8 04             	shr    eax,0x4
c0009601:	83 e0 0f             	and    eax,0xf
c0009604:	c3                   	ret    

c0009605 <Virt::allocateKernelVirtualPages(int)>:
c0009605:	55                   	push   ebp
c0009606:	57                   	push   edi
c0009607:	56                   	push   esi
c0009608:	31 f6                	xor    esi,esi
c000960a:	53                   	push   ebx
c000960b:	31 db                	xor    ebx,ebx
c000960d:	83 ec 1c             	sub    esp,0x1c
c0009610:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009619:	8b 2d a4 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021fa4
c000961f:	55                   	push   ebp
c0009620:	e8 bd ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009625:	5a                   	pop    edx
c0009626:	84 c0                	test   al,al
c0009628:	75 3d                	jne    c0009667 <Virt::allocateKernelVirtualPages(int)+0x62>
c000962a:	85 db                	test   ebx,ebx
c000962c:	0f 44 f5             	cmove  esi,ebp
c000962f:	83 c3 01             	add    ebx,0x1
c0009632:	39 fb                	cmp    ebx,edi
c0009634:	74 5e                	je     c0009694 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009636:	83 c5 01             	add    ebp,0x1
c0009639:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000963f:	76 33                	jbe    c0009674 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009641:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009646:	c7 05 a4 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021fa4,0xc8000
c0009650:	75 2a                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009652:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009657:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000965c:	55                   	push   ebp
c000965d:	e8 80 ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009662:	5a                   	pop    edx
c0009663:	84 c0                	test   al,al
c0009665:	74 c3                	je     c000962a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009667:	83 c5 01             	add    ebp,0x1
c000966a:	31 db                	xor    ebx,ebx
c000966c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009672:	77 cd                	ja     c0009641 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009674:	89 2d a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,ebp
c000967a:	eb a3                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000967c:	83 ec 0c             	sub    esp,0xc
c000967f:	68 8c fe 01 c0       	push   0xc001fe8c
c0009684:	e8 ec 71 00 00       	call   c0010875 <KePanic(char const*)>
c0009689:	8b 2d a4 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021fa4
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	eb 8b                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009694:	89 35 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,esi
c000969a:	83 fb 01             	cmp    ebx,0x1
c000969d:	74 63                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000969f:	85 ff                	test   edi,edi
c00096a1:	74 41                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a3:	89 f0                	mov    eax,esi
c00096a5:	31 db                	xor    ebx,ebx
c00096a7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096aa:	eb 16                	jmp    c00096c2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096ac:	6a 01                	push   0x1
c00096ae:	83 c3 01             	add    ebx,0x1
c00096b1:	50                   	push   eax
c00096b2:	e8 f1 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b7:	39 fb                	cmp    ebx,edi
c00096b9:	58                   	pop    eax
c00096ba:	5a                   	pop    edx
c00096bb:	74 27                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096bd:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c00096c2:	8d 50 01             	lea    edx,[eax+0x1]
c00096c5:	85 db                	test   ebx,ebx
c00096c7:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c00096cd:	74 22                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096cf:	39 dd                	cmp    ebp,ebx
c00096d1:	75 d9                	jne    c00096ac <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096d3:	6a 03                	push   0x3
c00096d5:	83 c3 01             	add    ebx,0x1
c00096d8:	50                   	push   eax
c00096d9:	e8 ca fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096de:	39 fb                	cmp    ebx,edi
c00096e0:	59                   	pop    ecx
c00096e1:	58                   	pop    eax
c00096e2:	75 d9                	jne    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e4:	83 c4 1c             	add    esp,0x1c
c00096e7:	89 f0                	mov    eax,esi
c00096e9:	5b                   	pop    ebx
c00096ea:	c1 e0 0c             	shl    eax,0xc
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	5d                   	pop    ebp
c00096f0:	c3                   	ret    
c00096f1:	6a 02                	push   0x2
c00096f3:	bb 01 00 00 00       	mov    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 aa fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	58                   	pop    eax
c00096ff:	5a                   	pop    edx
c0009700:	eb bb                	jmp    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009702:	6a 04                	push   0x4
c0009704:	56                   	push   esi
c0009705:	8d 46 01             	lea    eax,[esi+0x1]
c0009708:	a3 a4 1f 02 c0       	mov    ds:0xc0021fa4,eax
c000970d:	e8 96 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009712:	89 f0                	mov    eax,esi
c0009714:	59                   	pop    ecx
c0009715:	c1 e0 0c             	shl    eax,0xc
c0009718:	5b                   	pop    ebx
c0009719:	83 c4 1c             	add    esp,0x1c
c000971c:	5b                   	pop    ebx
c000971d:	5e                   	pop    esi
c000971e:	5f                   	pop    edi
c000971f:	5d                   	pop    ebp
c0009720:	c3                   	ret    

c0009721 <Virt::freeSwapfilePage(unsigned long)>:
c0009721:	53                   	push   ebx
c0009722:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009728:	b8 01 00 00 00       	mov    eax,0x1
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	d3 e0                	shl    eax,cl
c0009733:	89 cb                	mov    ebx,ecx
c0009735:	c1 eb 05             	shr    ebx,0x5
c0009738:	f7 d0                	not    eax
c000973a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000973d:	21 c1                	and    ecx,eax
c000973f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009742:	5b                   	pop    ebx
c0009743:	c3                   	ret    

c0009744 <Virt::swapIDToSector(unsigned long)>:
c0009744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009748:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000974e:	8b 0d b4 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb4
c0009754:	0f af c2             	imul   eax,edx
c0009757:	01 c8                	add    eax,ecx
c0009759:	c3                   	ret    

c000975a <Virt::allocateSwapfilePage()>:
c000975a:	55                   	push   ebp
c000975b:	31 d2                	xor    edx,edx
c000975d:	57                   	push   edi
c000975e:	56                   	push   esi
c000975f:	53                   	push   ebx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009769:	8b 0d ac 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fac
c000976f:	89 d8                	mov    eax,ebx
c0009771:	f7 f1                	div    ecx
c0009773:	39 cb                	cmp    ebx,ecx
c0009775:	72 2f                	jb     c00097a6 <Virt::allocateSwapfilePage()+0x4c>
c0009777:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000977d:	8b 16                	mov    edx,DWORD PTR [esi]
c000977f:	f6 c2 01             	test   dl,0x1
c0009782:	74 3e                	je     c00097c2 <Virt::allocateSwapfilePage()+0x68>
c0009784:	31 c9                	xor    ecx,ecx
c0009786:	bf 01 00 00 00       	mov    edi,0x1
c000978b:	eb 12                	jmp    c000979f <Virt::allocateSwapfilePage()+0x45>
c000978d:	89 ca                	mov    edx,ecx
c000978f:	89 fd                	mov    ebp,edi
c0009791:	c1 ea 05             	shr    edx,0x5
c0009794:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009799:	d3 e5                	shl    ebp,cl
c000979b:	85 ea                	test   edx,ebp
c000979d:	74 2c                	je     c00097cb <Virt::allocateSwapfilePage()+0x71>
c000979f:	83 c1 01             	add    ecx,0x1
c00097a2:	39 c8                	cmp    eax,ecx
c00097a4:	77 e7                	ja     c000978d <Virt::allocateSwapfilePage()+0x33>
c00097a6:	83 ec 0c             	sub    esp,0xc
c00097a9:	68 24 00 02 c0       	push   0xc0020024
c00097ae:	e8 c2 70 00 00       	call   c0010875 <KePanic(char const*)>
c00097b3:	83 c4 10             	add    esp,0x10
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	83 c4 0c             	add    esp,0xc
c00097bb:	89 c8                	mov    eax,ecx
c00097bd:	5b                   	pop    ebx
c00097be:	5e                   	pop    esi
c00097bf:	5f                   	pop    edi
c00097c0:	5d                   	pop    ebp
c00097c1:	c3                   	ret    
c00097c2:	89 f3                	mov    ebx,esi
c00097c4:	bd 01 00 00 00       	mov    ebp,0x1
c00097c9:	31 c9                	xor    ecx,ecx
c00097cb:	09 ea                	or     edx,ebp
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	89 13                	mov    DWORD PTR [ebx],edx
c00097d1:	83 c4 0c             	add    esp,0xc
c00097d4:	5b                   	pop    ebx
c00097d5:	5e                   	pop    esi
c00097d6:	5f                   	pop    edi
c00097d7:	5d                   	pop    ebp
c00097d8:	c3                   	ret    

c00097d9 <Virt::virtualMemorySetup()>:
c00097d9:	53                   	push   ebx
c00097da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097df:	6a 0f                	push   0xf
c00097e1:	53                   	push   ebx
c00097e2:	83 c3 01             	add    ebx,0x1
c00097e5:	e8 be fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f0:	58                   	pop    eax
c00097f1:	5a                   	pop    edx
c00097f2:	75 eb                	jne    c00097df <Virt::virtualMemorySetup()+0x6>
c00097f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f9:	6a 00                	push   0x0
c00097fb:	53                   	push   ebx
c00097fc:	83 c3 01             	add    ebx,0x1
c00097ff:	e8 a4 fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000980a:	59                   	pop    ecx
c000980b:	58                   	pop    eax
c000980c:	75 eb                	jne    c00097f9 <Virt::virtualMemorySetup()+0x20>
c000980e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009813:	6a 0f                	push   0xf
c0009815:	53                   	push   ebx
c0009816:	83 c3 01             	add    ebx,0x1
c0009819:	e8 8a fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009824:	58                   	pop    eax
c0009825:	5a                   	pop    edx
c0009826:	75 eb                	jne    c0009813 <Virt::virtualMemorySetup()+0x3a>
c0009828:	5b                   	pop    ebx
c0009829:	c3                   	ret    

c000982a <Virt::setupPageSwapping(int)>:
c000982a:	53                   	push   ebx
c000982b:	83 ec 0c             	sub    esp,0xc
c000982e:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009837:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000983d:	8b 10                	mov    edx,DWORD PTR [eax]
c000983f:	53                   	push   ebx
c0009840:	68 3b 00 02 c0       	push   0xc002003b
c0009845:	50                   	push   eax
c0009846:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009849:	c1 e3 0b             	shl    ebx,0xb
c000984c:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0009852:	c1 eb 08             	shr    ebx,0x8
c0009855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009858:	c6 05 b8 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021fb8,0x43
c000985f:	c7 05 ac 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021fac,0x8
c0009869:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000986e:	e8 58 e2 ff ff       	call   c0007acb <malloc>
c0009873:	31 d2                	xor    edx,edx
c0009875:	83 c4 0c             	add    esp,0xc
c0009878:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000987d:	89 c1                	mov    ecx,eax
c000987f:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009884:	f7 35 ac 1f 02 c0    	div    DWORD PTR ds:0xc0021fac
c000988a:	c1 e8 05             	shr    eax,0x5
c000988d:	50                   	push   eax
c000988e:	6a 00                	push   0x0
c0009890:	51                   	push   ecx
c0009891:	e8 5a 6c ff ff       	call   c00004f0 <memset>
c0009896:	83 c4 18             	add    esp,0x18
c0009899:	5b                   	pop    ebx
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::VAS(VAS*)>:
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098b5:	83 ec 0c             	sub    esp,0xc
c00098b8:	68 ac fe 01 c0       	push   0xc001feac
c00098bd:	e8 b3 6f 00 00       	call   c0010875 <KePanic(char const*)>
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	90                   	nop
c00098c6:	83 c4 0c             	add    esp,0xc
c00098c9:	c3                   	ret    

c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ce:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098d3:	89 c2                	mov    edx,eax
c00098d5:	c1 ea 16             	shr    edx,0x16
c00098d8:	c1 e8 0a             	shr    eax,0xa
c00098db:	83 f9 01             	cmp    ecx,0x1
c00098de:	19 c9                	sbb    ecx,ecx
c00098e0:	25 fc 0f 00 00       	and    eax,0xffc
c00098e5:	c1 e2 0c             	shl    edx,0xc
c00098e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ee:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098f5:	01 d0                	add    eax,edx
c00098f7:	c3                   	ret    

c00098f8 <VAS::getPageTableEntry(unsigned long)>:
c00098f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098fc:	89 ca                	mov    edx,ecx
c00098fe:	c1 ea 16             	shr    edx,0x16
c0009901:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009907:	c1 e9 0a             	shr    ecx,0xa
c000990a:	c1 e0 0c             	shl    eax,0xc
c000990d:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009913:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009916:	c3                   	ret    

c0009917 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009917:	55                   	push   ebp
c0009918:	57                   	push   edi
c0009919:	bf 01 00 00 00       	mov    edi,0x1
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009927:	c1 ee 0c             	shr    esi,0xc
c000992a:	eb 3a                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000992c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009931:	83 ec 08             	sub    esp,0x8
c0009934:	55                   	push   ebp
c0009935:	50                   	push   eax
c0009936:	e8 bd ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009940:	f6 c4 04             	test   ah,0x4
c0009943:	75 5a                	jne    c000999f <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009945:	83 fb 04             	cmp    ebx,0x4
c0009948:	74 6b                	je     c00099b5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994a:	83 fb 02             	cmp    ebx,0x2
c000994d:	74 7f                	je     c00099ce <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 a3 00 00 00    	je     c00099fb <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 87 00 00 00    	je     c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 74 fc ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 b3                	jne    c000992c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 52 00 02 c0       	push   0xc0020052
c0009981:	e8 ef 6e 00 00       	call   c0010875 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000998f:	55                   	push   ebp
c0009990:	e8 63 ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 00                	mov    eax,DWORD PTR [eax]
c000999a:	f6 c4 04             	test   ah,0x4
c000999d:	74 c2                	je     c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000999f:	83 ec 0c             	sub    esp,0xc
c00099a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a7:	50                   	push   eax
c00099a8:	e8 c0 e3 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	83 fb 04             	cmp    ebx,0x4
c00099b3:	75 95                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099b5:	83 e7 01             	and    edi,0x1
c00099b8:	75 46                	jne    c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099ba:	c7 44 24 20 d0 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fed0
c00099c2:	83 c4 0c             	add    esp,0xc
c00099c5:	5b                   	pop    ebx
c00099c6:	5e                   	pop    esi
c00099c7:	5f                   	pop    edi
c00099c8:	5d                   	pop    ebp
c00099c9:	e9 a7 6e 00 00       	jmp    c0010875 <KePanic(char const*)>
c00099ce:	83 e7 01             	and    edi,0x1
c00099d1:	75 15                	jne    c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	68 6e 00 02 c0       	push   0xc002006e
c00099db:	e8 95 6e 00 00       	call   c0010875 <KePanic(char const*)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	e9 79 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e8:	83 ec 08             	sub    esp,0x8
c00099eb:	6a 00                	push   0x0
c00099ed:	56                   	push   esi
c00099ee:	e8 b5 fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	e9 66 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099fb:	83 e7 01             	and    edi,0x1
c00099fe:	75 16                	jne    c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a00:	83 ec 08             	sub    esp,0x8
c0009a03:	6a 00                	push   0x0
c0009a05:	56                   	push   esi
c0009a06:	e8 9d fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0b:	83 c4 10             	add    esp,0x10
c0009a0e:	83 c4 0c             	add    esp,0xc
c0009a11:	5b                   	pop    ebx
c0009a12:	5e                   	pop    esi
c0009a13:	5f                   	pop    edi
c0009a14:	5d                   	pop    ebp
c0009a15:	c3                   	ret    
c0009a16:	c7 44 24 20 8a 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc002008a
c0009a1e:	83 c4 0c             	add    esp,0xc
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	5f                   	pop    edi
c0009a24:	5d                   	pop    ebp
c0009a25:	e9 4b 6e 00 00       	jmp    c0010875 <KePanic(char const*)>

c0009a2a <VAS::freeAllocatedPages(unsigned long)>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a32:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a36:	74 09                	je     c0009a41 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a3c:	e9 d6 fe ff ff       	jmp    c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a41:	c7 44 24 04 f4 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fef4
c0009a49:	e9 5c 0f 00 00       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)>

c0009a4e <VAS::virtualToPhysical(unsigned long)>:
c0009a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a52:	50                   	push   eax
c0009a53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a57:	52                   	push   edx
c0009a58:	e8 9b fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a5d:	59                   	pop    ecx
c0009a5e:	5a                   	pop    edx
c0009a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a66:	c3                   	ret    
c0009a67:	90                   	nop

c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a68:	55                   	push   ebp
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a74:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a7c:	89 c3                	mov    ebx,eax
c0009a7e:	c1 e3 0c             	shl    ebx,0xc
c0009a81:	01 f3                	add    ebx,esi
c0009a83:	85 c0                	test   eax,eax
c0009a85:	7e 1f                	jle    c0009aa6 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a87:	56                   	push   esi
c0009a88:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a8e:	55                   	push   ebp
c0009a8f:	e8 64 fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a94:	5a                   	pop    edx
c0009a95:	59                   	pop    ecx
c0009a96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a9c:	21 f9                	and    ecx,edi
c0009a9e:	09 d1                	or     ecx,edx
c0009aa0:	39 f3                	cmp    ebx,esi
c0009aa2:	89 08                	mov    DWORD PTR [eax],ecx
c0009aa4:	75 e1                	jne    c0009a87 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009aa6:	5b                   	pop    ebx
c0009aa7:	5e                   	pop    esi
c0009aa8:	5f                   	pop    edi
c0009aa9:	5d                   	pop    ebp
c0009aaa:	c3                   	ret    
c0009aab:	90                   	nop

c0009aac <VAS::VAS()>:
c0009aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ae5:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009aea:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aef:	29 c2                	sub    edx,eax
c0009af1:	89 d0                	mov    eax,edx
c0009af3:	05 ff 0f 00 00       	add    eax,0xfff
c0009af8:	c1 e8 0c             	shr    eax,0xc
c0009afb:	89 c2                	mov    edx,eax
c0009afd:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b02:	6a 04                	push   0x4
c0009b04:	6a ff                	push   0xffffffff
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0c:	e8 57 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b11:	83 c4 14             	add    esp,0x14
c0009b14:	90                   	nop
c0009b15:	c3                   	ret    

c0009b16 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b21:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b28:	75 01                	jne    c0009b2b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b2a:	c3                   	ret    
c0009b2b:	68 80 00 00 00       	push   0x80
c0009b30:	6a ff                	push   0xffffffff
c0009b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b36:	50                   	push   eax
c0009b37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b3b:	52                   	push   edx
c0009b3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b40:	51                   	push   ecx
c0009b41:	e8 22 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b46:	83 c4 14             	add    esp,0x14
c0009b49:	c3                   	ret    

c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b55:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b5d:	83 f8 01             	cmp    eax,0x1
c0009b60:	19 c0                	sbb    eax,eax
c0009b62:	83 ca 03             	or     edx,0x3
c0009b65:	83 e0 fc             	and    eax,0xfffffffc
c0009b68:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b6f:	0f 20 d8             	mov    eax,cr3
c0009b72:	0f 22 d8             	mov    cr3,eax
c0009b75:	c3                   	ret    

c0009b76 <VAS::~VAS()>:
c0009b76:	83 ec 2c             	sub    esp,0x2c
c0009b79:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b81:	fa                   	cli    
c0009b82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b87:	83 c0 01             	add    eax,0x1
c0009b8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ba3:	6a 01                	push   0x1
c0009ba5:	50                   	push   eax
c0009ba6:	e8 9f ff ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bab:	83 c4 0c             	add    esp,0xc
c0009bae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bbe:	0f 8f d8 00 00 00    	jg     c0009c9c <VAS::~VAS()+0x126>
c0009bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bcf:	c1 e2 02             	shl    edx,0x2
c0009bd2:	01 d0                	add    eax,edx
c0009bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bde:	83 e0 01             	and    eax,0x1
c0009be1:	0f 84 ab 00 00 00    	je     c0009c92 <VAS::~VAS()+0x11c>
c0009be7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009bf7:	7f 74                	jg     c0009c6d <VAS::~VAS()+0xf7>
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	c1 e0 0a             	shl    eax,0xa
c0009c00:	89 c2                	mov    edx,eax
c0009c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c06:	01 d0                	add    eax,edx
c0009c08:	c1 e0 0c             	shl    eax,0xc
c0009c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c23:	6a 01                	push   0x1
c0009c25:	50                   	push   eax
c0009c26:	e8 9f fc ff ff       	call   c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c2b:	83 c4 0c             	add    esp,0xc
c0009c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c40:	25 01 04 00 00       	and    eax,0x401
c0009c45:	3d 01 04 00 00       	cmp    eax,0x401
c0009c4a:	75 1a                	jne    c0009c66 <VAS::~VAS()+0xf0>
c0009c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c55:	83 ec 0c             	sub    esp,0xc
c0009c58:	50                   	push   eax
c0009c59:	e8 0f e1 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c5e:	83 c4 10             	add    esp,0x10
c0009c61:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c66:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c6b:	eb 82                	jmp    c0009bef <VAS::~VAS()+0x79>
c0009c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c71:	25 00 04 00 00       	and    eax,0x400
c0009c76:	74 1a                	je     c0009c92 <VAS::~VAS()+0x11c>
c0009c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c81:	83 ec 0c             	sub    esp,0xc
c0009c84:	50                   	push   eax
c0009c85:	e8 e3 e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c92:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c97:	e9 1a ff ff ff       	jmp    c0009bb6 <VAS::~VAS()+0x40>
c0009c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ca3:	83 ec 0c             	sub    esp,0xc
c0009ca6:	50                   	push   eax
c0009ca7:	e8 6b fc ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 ae e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ccc:	83 e8 01             	sub    eax,0x1
c0009ccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd9:	85 c0                	test   eax,eax
c0009cdb:	75 01                	jne    c0009cde <VAS::~VAS()+0x168>
c0009cdd:	fb                   	sti    
c0009cde:	90                   	nop
c0009cdf:	83 c4 2c             	add    esp,0x2c
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009ce4:	55                   	push   ebp
c0009ce5:	57                   	push   edi
c0009ce6:	56                   	push   esi
c0009ce7:	53                   	push   ebx
c0009ce8:	83 ec 1c             	sub    esp,0x1c
c0009ceb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009cf7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cfd:	77 0b                	ja     c0009d0a <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009cff:	0f 20 d8             	mov    eax,cr3
c0009d02:	0f 20 d8             	mov    eax,cr3
c0009d05:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d08:	75 43                	jne    c0009d4d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009d0a:	89 d8                	mov    eax,ebx
c0009d0c:	09 f8                	or     eax,edi
c0009d0e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d13:	75 53                	jne    c0009d68 <VAS::mapPage(unsigned long, unsigned long, int)+0x84>
c0009d15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d18:	89 de                	mov    esi,ebx
c0009d1a:	c1 ee 16             	shr    esi,0x16
c0009d1d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d24:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d28:	74 50                	je     c0009d7a <VAS::mapPage(unsigned long, unsigned long, int)+0x96>
c0009d2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d2e:	c1 eb 0a             	shr    ebx,0xa
c0009d31:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d37:	c1 e6 0c             	shl    esi,0xc
c0009d3a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d40:	09 c7                	or     edi,eax
c0009d42:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d45:	83 c4 1c             	add    esp,0x1c
c0009d48:	5b                   	pop    ebx
c0009d49:	5e                   	pop    esi
c0009d4a:	5f                   	pop    edi
c0009d4b:	5d                   	pop    ebp
c0009d4c:	c3                   	ret    
c0009d4d:	83 ec 0c             	sub    esp,0xc
c0009d50:	68 18 ff 01 c0       	push   0xc001ff18
c0009d55:	e8 50 0c 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0009d5a:	89 d8                	mov    eax,ebx
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	09 f8                	or     eax,edi
c0009d61:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d66:	74 ad                	je     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	68 80 ff 01 c0       	push   0xc001ff80
c0009d70:	e8 00 6b 00 00       	call   c0010875 <KePanic(char const*)>
c0009d75:	83 c4 10             	add    esp,0x10
c0009d78:	eb 9b                	jmp    c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7e:	e8 53 e0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009d83:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d94:	6a 01                	push   0x1
c0009d96:	e8 6a f8 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009da2:	6a 01                	push   0x1
c0009da4:	50                   	push   eax
c0009da5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009da9:	52                   	push   edx
c0009daa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dae:	51                   	push   ecx
c0009daf:	e8 4a 02 00 00       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	68 00 10 00 00       	push   0x1000
c0009dbc:	6a 00                	push   0x0
c0009dbe:	50                   	push   eax
c0009dbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc3:	e8 28 67 ff ff       	call   c00004f0 <memset>
c0009dc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dcc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcf:	e8 43 fb ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ddc:	83 c4 10             	add    esp,0x10
c0009ddf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009de2:	0d 07 04 00 00       	or     eax,0x407
c0009de7:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dea:	e9 3b ff ff ff       	jmp    c0009d2a <VAS::mapPage(unsigned long, unsigned long, int)+0x46>
c0009def:	90                   	nop

c0009df0 <VAS::allocatePages(int, int)>:
c0009df0:	55                   	push   ebp
c0009df1:	57                   	push   edi
c0009df2:	56                   	push   esi
c0009df3:	53                   	push   ebx
c0009df4:	83 ec 1c             	sub    esp,0x1c
c0009df7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009dfc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e0c:	83 e0 01             	and    eax,0x1
c0009e0f:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e13:	89 c7                	mov    edi,eax
c0009e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e19:	0f 85 d6 00 00 00    	jne    c0009ef5 <VAS::allocatePages(int, int)+0x105>
c0009e1f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e26:	85 c0                	test   eax,eax
c0009e28:	0f 84 ab 00 00 00    	je     c0009ed9 <VAS::allocatePages(int, int)+0xe9>
c0009e2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e32:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e3a:	c1 e6 0c             	shl    esi,0xc
c0009e3d:	01 de                	add    esi,ebx
c0009e3f:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e42:	85 c0                	test   eax,eax
c0009e44:	7e 3a                	jle    c0009e80 <VAS::allocatePages(int, int)+0x90>
c0009e46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e4e:	80 cc 04             	or     ah,0x4
c0009e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e55:	89 f8                	mov    eax,edi
c0009e57:	0f b6 f8             	movzx  edi,al
c0009e5a:	e8 77 df ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009e5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e63:	52                   	push   edx
c0009e64:	53                   	push   ebx
c0009e65:	50                   	push   eax
c0009e66:	55                   	push   ebp
c0009e67:	e8 78 fe ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	85 ff                	test   edi,edi
c0009e71:	74 03                	je     c0009e76 <VAS::allocatePages(int, int)+0x86>
c0009e73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7c:	39 de                	cmp    esi,ebx
c0009e7e:	75 da                	jne    c0009e5a <VAS::allocatePages(int, int)+0x6a>
c0009e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e84:	85 c9                	test   ecx,ecx
c0009e86:	75 12                	jne    c0009e9a <VAS::allocatePages(int, int)+0xaa>
c0009e88:	0f 20 d8             	mov    eax,cr3
c0009e8b:	0f 22 d8             	mov    cr3,eax
c0009e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e92:	83 c4 1c             	add    esp,0x1c
c0009e95:	5b                   	pop    ebx
c0009e96:	5e                   	pop    esi
c0009e97:	5f                   	pop    edi
c0009e98:	5d                   	pop    ebp
c0009e99:	c3                   	ret    
c0009e9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9e:	c1 ee 0a             	shr    esi,0xa
c0009ea1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ea7:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ead:	c1 eb 0a             	shr    ebx,0xa
c0009eb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009eb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ebc:	39 c3                	cmp    ebx,eax
c0009ebe:	77 ce                	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec9:	39 d8                	cmp    eax,ebx
c0009ecb:	73 f3                	jae    c0009ec0 <VAS::allocatePages(int, int)+0xd0>
c0009ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ed1:	83 c4 1c             	add    esp,0x1c
c0009ed4:	5b                   	pop    ebx
c0009ed5:	5e                   	pop    esi
c0009ed6:	5f                   	pop    edi
c0009ed7:	5d                   	pop    ebp
c0009ed8:	c3                   	ret    
c0009ed9:	83 ec 0c             	sub    esp,0xc
c0009edc:	68 a4 ff 01 c0       	push   0xc001ffa4
c0009ee1:	e8 8f 69 00 00       	call   c0010875 <KePanic(char const*)>
c0009ee6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eed:	83 c4 10             	add    esp,0x10
c0009ef0:	e9 39 ff ff ff       	jmp    c0009e2e <VAS::allocatePages(int, int)+0x3e>
c0009ef5:	83 ec 0c             	sub    esp,0xc
c0009ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009efc:	50                   	push   eax
c0009efd:	e8 03 f7 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f0e:	0f 87 a4 00 00 00    	ja     c0009fb8 <VAS::allocatePages(int, int)+0x1c8>
c0009f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f18:	85 c0                	test   eax,eax
c0009f1a:	7e 44                	jle    c0009f60 <VAS::allocatePages(int, int)+0x170>
c0009f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f28:	c1 e0 0c             	shl    eax,0xc
c0009f2b:	01 d8                	add    eax,ebx
c0009f2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f31:	89 f8                	mov    eax,edi
c0009f33:	81 ce 00 04 00 00    	or     esi,0x400
c0009f39:	0f b6 f8             	movzx  edi,al
c0009f3c:	e8 95 de ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009f41:	56                   	push   esi
c0009f42:	53                   	push   ebx
c0009f43:	50                   	push   eax
c0009f44:	55                   	push   ebp
c0009f45:	e8 9a fd ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	85 ff                	test   edi,edi
c0009f4f:	74 03                	je     c0009f54 <VAS::allocatePages(int, int)+0x164>
c0009f51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f54:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f5a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f5e:	75 dc                	jne    c0009f3c <VAS::allocatePages(int, int)+0x14c>
c0009f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f64:	85 c0                	test   eax,eax
c0009f66:	0f 84 1c ff ff ff    	je     c0009e88 <VAS::allocatePages(int, int)+0x98>
c0009f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f74:	c1 e0 0c             	shl    eax,0xc
c0009f77:	01 d0                	add    eax,edx
c0009f79:	89 d3                	mov    ebx,edx
c0009f7b:	c1 eb 0a             	shr    ebx,0xa
c0009f7e:	c1 e8 0a             	shr    eax,0xa
c0009f81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f87:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f92:	2d 00 00 40 00       	sub    eax,0x400000
c0009f97:	39 c3                	cmp    ebx,eax
c0009f99:	0f 87 ef fe ff ff    	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009f9f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fa8:	39 d8                	cmp    eax,ebx
c0009faa:	73 f3                	jae    c0009f9f <VAS::allocatePages(int, int)+0x1af>
c0009fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fb0:	83 c4 1c             	add    esp,0x1c
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	5f                   	pop    edi
c0009fb6:	5d                   	pop    ebp
c0009fb7:	c3                   	ret    
c0009fb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc3:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fca:	0f 84 44 ff ff ff    	je     c0009f14 <VAS::allocatePages(int, int)+0x124>
c0009fd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fd4:	80 cc 01             	or     ah,0x1
c0009fd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fdb:	e9 34 ff ff ff       	jmp    c0009f14 <VAS::allocatePages(int, int)+0x124>

c0009fe0 <VAS::setCPUSpecific(unsigned long)>:
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	6a 05                	push   0x5
c0009fe5:	68 00 00 40 c2       	push   0xc2400000
c0009fea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fee:	50                   	push   eax
c0009fef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ff3:	52                   	push   edx
c0009ff4:	e8 eb fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	c3                   	ret    
c0009ffd:	90                   	nop

c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009ffe:	55                   	push   ebp
c0009fff:	57                   	push   edi
c000a000:	56                   	push   esi
c000a001:	53                   	push   ebx
c000a002:	83 ec 1c             	sub    esp,0x1c
c000a005:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a00a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a00e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a012:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a022:	83 e0 01             	and    eax,0x1
c000a025:	85 c9                	test   ecx,ecx
c000a027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02b:	7e 3e                	jle    c000a06b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6d>
c000a02d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a031:	89 f3                	mov    ebx,esi
c000a033:	0f b6 f8             	movzx  edi,al
c000a036:	c1 e2 0c             	shl    edx,0xc
c000a039:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000a03c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a040:	55                   	push   ebp
c000a041:	53                   	push   ebx
c000a042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a046:	29 f0                	sub    eax,esi
c000a048:	01 d8                	add    eax,ebx
c000a04a:	50                   	push   eax
c000a04b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04f:	52                   	push   edx
c000a050:	e8 8f fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	85 ff                	test   edi,edi
c000a05a:	74 03                	je     c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x61>
c000a05c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a05f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a065:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a069:	75 d5                	jne    c000a040 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a06f:	85 c0                	test   eax,eax
c000a071:	75 10                	jne    c000a083 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x85>
c000a073:	0f 20 d8             	mov    eax,cr3
c000a076:	0f 22 d8             	mov    cr3,eax
c000a079:	83 c4 1c             	add    esp,0x1c
c000a07c:	89 f0                	mov    eax,esi
c000a07e:	5b                   	pop    ebx
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	5d                   	pop    ebp
c000a082:	c3                   	ret    
c000a083:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a087:	89 f3                	mov    ebx,esi
c000a089:	c1 eb 0a             	shr    ebx,0xa
c000a08c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a092:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a098:	c1 e0 0c             	shl    eax,0xc
c000a09b:	01 f0                	add    eax,esi
c000a09d:	c1 e8 0a             	shr    eax,0xa
c000a0a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0a5:	2d 00 00 40 00       	sub    eax,0x400000
c000a0aa:	39 c3                	cmp    ebx,eax
c000a0ac:	77 cb                	ja     c000a079 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7b>
c000a0ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b7:	39 d8                	cmp    eax,ebx
c000a0b9:	73 f3                	jae    c000a0ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb0>
c000a0bb:	83 c4 1c             	add    esp,0x1c
c000a0be:	89 f0                	mov    eax,esi
c000a0c0:	5b                   	pop    ebx
c000a0c1:	5e                   	pop    esi
c000a0c2:	5f                   	pop    edi
c000a0c3:	5d                   	pop    ebp
c000a0c4:	c3                   	ret    
c000a0c5:	90                   	nop

c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c6:	55                   	push   ebp
c000a0c7:	57                   	push   edi
c000a0c8:	56                   	push   esi
c000a0c9:	53                   	push   ebx
c000a0ca:	83 ec 1c             	sub    esp,0x1c
c000a0cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a0d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0e1:	09 d8                	or     eax,ebx
c000a0e3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0e8:	75 4b                	jne    c000a135 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0ed:	89 de                	mov    esi,ebx
c000a0ef:	c1 ee 16             	shr    esi,0x16
c000a0f2:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c000a0f9:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c000a0fd:	74 48                	je     c000a147 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c000a0ff:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a104:	c1 eb 0a             	shr    ebx,0xa
c000a107:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a10b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a10f:	83 ff 01             	cmp    edi,0x1
c000a112:	19 c0                	sbb    eax,eax
c000a114:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a11a:	c1 e6 0c             	shl    esi,0xc
c000a11d:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a122:	01 f3                	add    ebx,esi
c000a124:	09 ca                	or     edx,ecx
c000a126:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a12d:	83 c4 1c             	add    esp,0x1c
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	5d                   	pop    ebp
c000a134:	c3                   	ret    
c000a135:	83 ec 0c             	sub    esp,0xc
c000a138:	68 d0 ff 01 c0       	push   0xc001ffd0
c000a13d:	e8 33 67 00 00       	call   c0010875 <KePanic(char const*)>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	eb a3                	jmp    c000a0ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a147:	e8 8a dc ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a14c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a159:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a15d:	6a 01                	push   0x1
c000a15f:	e8 a1 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a164:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a16b:	6a 01                	push   0x1
c000a16d:	50                   	push   eax
c000a16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a172:	50                   	push   eax
c000a173:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a177:	51                   	push   ecx
c000a178:	e8 81 fe ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17d:	83 c4 1c             	add    esp,0x1c
c000a180:	68 00 10 00 00       	push   0x1000
c000a185:	6a 00                	push   0x0
c000a187:	50                   	push   eax
c000a188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a18c:	e8 5f 63 ff ff       	call   c00004f0 <memset>
c000a191:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a195:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a198:	e8 7a f7 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000a19d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a1a7:	81 ca 07 04 00 00    	or     edx,0x407
c000a1ad:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a1b0:	e9 4a ff ff ff       	jmp    c000a0ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a1b5:	90                   	nop

c000a1b6 <VAS::VAS(bool)>:
c000a1b6:	53                   	push   ebx
c000a1b7:	83 ec 28             	sub    esp,0x28
c000a1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1e3:	e8 ee db ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a1e8:	89 c2                	mov    edx,eax
c000a1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1f7:	83 ec 0c             	sub    esp,0xc
c000a1fa:	6a 01                	push   0x1
c000a1fc:	e8 04 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	89 c2                	mov    edx,eax
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a20d:	83 ec 0c             	sub    esp,0xc
c000a210:	6a 03                	push   0x3
c000a212:	6a 01                	push   0x1
c000a214:	52                   	push   edx
c000a215:	50                   	push   eax
c000a216:	53                   	push   ebx
c000a217:	e8 e2 fd ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a21c:	83 c4 20             	add    esp,0x20
c000a21f:	89 c2                	mov    edx,eax
c000a221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a225:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a228:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a230:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a238:	7f 1d                	jg     c000a257 <VAS::VAS(bool)+0xa1>
c000a23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a23e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a241:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a245:	c1 e2 02             	shl    edx,0x2
c000a248:	01 d0                	add    eax,edx
c000a24a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a250:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a255:	eb d9                	jmp    c000a230 <VAS::VAS(bool)+0x7a>
c000a257:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a25f:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a267:	7f 7e                	jg     c000a2e7 <VAS::VAS(bool)+0x131>
c000a269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a26d:	2d 00 02 00 00       	sub    eax,0x200
c000a272:	c1 e0 0c             	shl    eax,0xc
c000a275:	83 c8 05             	or     eax,0x5
c000a278:	89 c2                	mov    edx,eax
c000a27a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a27f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a285:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a28b:	83 e0 10             	and    eax,0x10
c000a28e:	0f b6 c0             	movzx  eax,al
c000a291:	85 c0                	test   eax,eax
c000a293:	74 07                	je     c000a29c <VAS::VAS(bool)+0xe6>
c000a295:	b8 00 01 00 00       	mov    eax,0x100
c000a29a:	eb 05                	jmp    c000a2a1 <VAS::VAS(bool)+0xeb>
c000a29c:	b8 00 00 00 00       	mov    eax,0x0
c000a2a1:	09 d0                	or     eax,edx
c000a2a3:	89 c1                	mov    ecx,eax
c000a2a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2b0:	c1 e2 02             	shl    edx,0x2
c000a2b3:	01 d0                	add    eax,edx
c000a2b5:	89 ca                	mov    edx,ecx
c000a2b7:	89 10                	mov    DWORD PTR [eax],edx
c000a2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2bd:	2d 40 03 00 00       	sub    eax,0x340
c000a2c2:	83 f8 7f             	cmp    eax,0x7f
c000a2c5:	77 16                	ja     c000a2dd <VAS::VAS(bool)+0x127>
c000a2c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2d2:	c1 e2 02             	shl    edx,0x2
c000a2d5:	01 d0                	add    eax,edx
c000a2d7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2dd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2e2:	e9 78 ff ff ff       	jmp    c000a25f <VAS::VAS(bool)+0xa9>
c000a2e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f2:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f8:	83 e0 10             	and    eax,0x10
c000a2fb:	0f b6 c0             	movzx  eax,al
c000a2fe:	85 c0                	test   eax,eax
c000a300:	74 07                	je     c000a309 <VAS::VAS(bool)+0x153>
c000a302:	b8 03 41 00 00       	mov    eax,0x4103
c000a307:	eb 05                	jmp    c000a30e <VAS::VAS(bool)+0x158>
c000a309:	b8 03 40 00 00       	mov    eax,0x4003
c000a30e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a312:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a315:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a31b:	89 02                	mov    DWORD PTR [edx],eax
c000a31d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a328:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a32e:	83 ec 08             	sub    esp,0x8
c000a331:	50                   	push   eax
c000a332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a336:	e8 a5 fc ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c000a33b:	83 c4 10             	add    esp,0x10
c000a33e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a342:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a345:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a350:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a356:	83 e0 10             	and    eax,0x10
c000a359:	0f b6 c0             	movzx  eax,al
c000a35c:	85 c0                	test   eax,eax
c000a35e:	74 07                	je     c000a367 <VAS::VAS(bool)+0x1b1>
c000a360:	b8 00 01 00 00       	mov    eax,0x100
c000a365:	eb 05                	jmp    c000a36c <VAS::VAS(bool)+0x1b6>
c000a367:	b8 00 00 00 00       	mov    eax,0x0
c000a36c:	09 c2                	or     edx,eax
c000a36e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a372:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a375:	05 fc 0f 00 00       	add    eax,0xffc
c000a37a:	83 ca 03             	or     edx,0x3
c000a37d:	89 10                	mov    DWORD PTR [eax],edx
c000a37f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	50                   	push   eax
c000a38e:	e8 0d 1d 00 00       	call   c000c0a0 <Device::getName()>
c000a393:	83 c4 10             	add    esp,0x10
c000a396:	83 ec 08             	sub    esp,0x8
c000a399:	68 a4 00 02 c0       	push   0xc00200a4
c000a39e:	50                   	push   eax
c000a39f:	e8 dc 63 ff ff       	call   c0000780 <strcmp>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	0f 94 c0             	sete   al
c000a3ac:	0f b6 c0             	movzx  eax,al
c000a3af:	85 c0                	test   eax,eax
c000a3b1:	0f 84 8b 00 00 00    	je     c000a442 <VAS::VAS(bool)+0x28c>
c000a3b7:	fa                   	cli    
c000a3b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3bd:	83 c0 01             	add    eax,0x1
c000a3c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3c5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d0:	05 7c 09 00 00       	add    eax,0x97c
c000a3d5:	83 ec 0c             	sub    esp,0xc
c000a3d8:	50                   	push   eax
c000a3d9:	e8 e8 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e6:	89 c3                	mov    ebx,eax
c000a3e8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f3:	05 7c 09 00 00       	add    eax,0x97c
c000a3f8:	83 ec 0c             	sub    esp,0xc
c000a3fb:	50                   	push   eax
c000a3fc:	e8 c5 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 ec 08             	sub    esp,0x8
c000a407:	50                   	push   eax
c000a408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a40c:	e8 e7 f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	8b 00                	mov    eax,DWORD PTR [eax]
c000a416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a41b:	6a 11                	push   0x11
c000a41d:	53                   	push   ebx
c000a41e:	50                   	push   eax
c000a41f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a423:	e8 bc f8 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a430:	83 e8 01             	sub    eax,0x1
c000a433:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a438:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a43d:	85 c0                	test   eax,eax
c000a43f:	75 01                	jne    c000a442 <VAS::VAS(bool)+0x28c>
c000a441:	fb                   	sti    
c000a442:	90                   	nop
c000a443:	83 c4 28             	add    esp,0x28
c000a446:	5b                   	pop    ebx
c000a447:	c3                   	ret    

c000a448 <VAS::evict(unsigned long)>:
c000a448:	55                   	push   ebp
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 1c             	sub    esp,0x1c
c000a44f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a45b:	e8 fa f2 ff ff       	call   c000975a <Virt::allocateSwapfilePage()>
c000a460:	89 c7                	mov    edi,eax
c000a462:	a1 ac 1f 02 c0       	mov    eax,ds:0xc0021fac
c000a467:	85 c0                	test   eax,eax
c000a469:	7e 40                	jle    c000a4ab <VAS::evict(unsigned long)+0x63>
c000a46b:	89 ee                	mov    esi,ebp
c000a46d:	31 db                	xor    ebx,ebx
c000a46f:	83 ec 0c             	sub    esp,0xc
c000a472:	57                   	push   edi
c000a473:	e8 cc f2 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a478:	31 d2                	xor    edx,edx
c000a47a:	89 34 24             	mov    DWORD PTR [esp],esi
c000a47d:	81 c6 00 02 00 00    	add    esi,0x200
c000a483:	6a 01                	push   0x1
c000a485:	52                   	push   edx
c000a486:	01 d8                	add    eax,ebx
c000a488:	83 c3 01             	add    ebx,0x1
c000a48b:	50                   	push   eax
c000a48c:	0f be 05 b8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fb8
c000a493:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a49a:	50                   	push   eax
c000a49b:	e8 c2 2d 00 00       	call   c000d262 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4a0:	83 c4 20             	add    esp,0x20
c000a4a3:	39 1d ac 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fac,ebx
c000a4a9:	7f c4                	jg     c000a46f <VAS::evict(unsigned long)+0x27>
c000a4ab:	c1 e7 0b             	shl    edi,0xb
c000a4ae:	83 ec 08             	sub    esp,0x8
c000a4b1:	55                   	push   ebp
c000a4b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4b6:	50                   	push   eax
c000a4b7:	e8 3c f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4be:	89 d3                	mov    ebx,edx
c000a4c0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a4c6:	09 d7                	or     edi,edx
c000a4c8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a4ce:	89 38                	mov    DWORD PTR [eax],edi
c000a4d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a4d3:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a4d9:	83 c2 01             	add    edx,0x1
c000a4dc:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a4e2:	e8 86 d8 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c000a4e7:	0f 20 d8             	mov    eax,cr3
c000a4ea:	0f 22 d8             	mov    cr3,eax
c000a4ed:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4f3:	51                   	push   ecx
c000a4f4:	55                   	push   ebp
c000a4f5:	53                   	push   ebx
c000a4f6:	68 f4 ff 01 c0       	push   0xc001fff4
c000a4fb:	e8 aa 04 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a500:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a505:	c7 44 24 50 b2 00 02 c0 	mov    DWORD PTR [esp+0x50],0xc00200b2
c000a50d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a511:	8d 50 01             	lea    edx,[eax+0x1]
c000a514:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a51a:	83 c4 3c             	add    esp,0x3c
c000a51d:	5b                   	pop    ebx
c000a51e:	5e                   	pop    esi
c000a51f:	5f                   	pop    edi
c000a520:	5d                   	pop    ebp
c000a521:	e9 84 04 00 00       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)>

c000a526 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a526:	55                   	push   ebp
c000a527:	57                   	push   edi
c000a528:	56                   	push   esi
c000a529:	53                   	push   ebx
c000a52a:	83 ec 1c             	sub    esp,0x1c
c000a52d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a531:	81 ff ff ff bf ff    	cmp    edi,0xffbfffff
c000a537:	77 60                	ja     c000a599 <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c000a539:	83 ec 08             	sub    esp,0x8
c000a53c:	57                   	push   edi
c000a53d:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000a543:	68 d5 00 02 c0       	push   0xc00200d5
c000a548:	e8 5d 04 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a54d:	58                   	pop    eax
c000a54e:	5a                   	pop    edx
c000a54f:	57                   	push   edi
c000a550:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a554:	51                   	push   ecx
c000a555:	e8 9e f3 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a55a:	83 c4 10             	add    esp,0x10
c000a55d:	85 c0                	test   eax,eax
c000a55f:	89 c3                	mov    ebx,eax
c000a561:	0f 95 c0             	setne  al
c000a564:	85 ff                	test   edi,edi
c000a566:	0f 95 c2             	setne  dl
c000a569:	21 d0                	and    eax,edx
c000a56b:	a8 01                	test   al,0x1
c000a56d:	89 c5                	mov    ebp,eax
c000a56f:	75 0a                	jne    c000a57b <VAS::tryLoadBackOffDisk(unsigned long)+0x55>
c000a571:	83 c4 1c             	add    esp,0x1c
c000a574:	89 e8                	mov    eax,ebp
c000a576:	5b                   	pop    ebx
c000a577:	5e                   	pop    esi
c000a578:	5f                   	pop    edi
c000a579:	5d                   	pop    ebp
c000a57a:	c3                   	ret    
c000a57b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a57d:	89 c2                	mov    edx,eax
c000a57f:	81 e2 01 04 00 00    	and    edx,0x401
c000a585:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a58b:	74 1e                	je     c000a5ab <VAS::tryLoadBackOffDisk(unsigned long)+0x85>
c000a58d:	83 c4 1c             	add    esp,0x1c
c000a590:	31 ed                	xor    ebp,ebp
c000a592:	5b                   	pop    ebx
c000a593:	89 e8                	mov    eax,ebp
c000a595:	5e                   	pop    esi
c000a596:	5f                   	pop    edi
c000a597:	5d                   	pop    ebp
c000a598:	c3                   	ret    
c000a599:	83 ec 0c             	sub    esp,0xc
c000a59c:	68 c3 00 02 c0       	push   0xc00200c3
c000a5a1:	e8 cf 62 00 00       	call   c0010875 <KePanic(char const*)>
c000a5a6:	83 c4 10             	add    esp,0x10
c000a5a9:	eb 8e                	jmp    c000a539 <VAS::tryLoadBackOffDisk(unsigned long)+0x13>
c000a5ab:	c1 e8 0b             	shr    eax,0xb
c000a5ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5b2:	e8 1f d8 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a5b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a5b9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5bf:	09 c2                	or     edx,eax
c000a5c1:	81 ca 01 08 00 00    	or     edx,0x801
c000a5c7:	89 13                	mov    DWORD PTR [ebx],edx
c000a5c9:	a1 ac 1f 02 c0       	mov    eax,ds:0xc0021fac
c000a5ce:	85 c0                	test   eax,eax
c000a5d0:	7e 44                	jle    c000a616 <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a5d2:	89 fe                	mov    esi,edi
c000a5d4:	31 db                	xor    ebx,ebx
c000a5d6:	83 ec 0c             	sub    esp,0xc
c000a5d9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a5dd:	51                   	push   ecx
c000a5de:	e8 61 f1 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a5e3:	31 d2                	xor    edx,edx
c000a5e5:	89 34 24             	mov    DWORD PTR [esp],esi
c000a5e8:	81 c6 00 02 00 00    	add    esi,0x200
c000a5ee:	6a 01                	push   0x1
c000a5f0:	52                   	push   edx
c000a5f1:	01 d8                	add    eax,ebx
c000a5f3:	83 c3 01             	add    ebx,0x1
c000a5f6:	50                   	push   eax
c000a5f7:	0f be 05 b8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fb8
c000a5fe:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a605:	50                   	push   eax
c000a606:	e8 eb 2b 00 00       	call   c000d1f6 <LogicalDisk::read(unsigned long long, int, void*)>
c000a60b:	83 c4 20             	add    esp,0x20
c000a60e:	39 1d ac 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fac,ebx
c000a614:	7f c0                	jg     c000a5d6 <VAS::tryLoadBackOffDisk(unsigned long)+0xb0>
c000a616:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a61b:	83 ec 04             	sub    esp,0x4
c000a61e:	83 e8 01             	sub    eax,0x1
c000a621:	50                   	push   eax
c000a622:	57                   	push   edi
c000a623:	68 e8 00 02 c0       	push   0xc00200e8
c000a628:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a62d:	e8 78 03 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a632:	58                   	pop    eax
c000a633:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a637:	52                   	push   edx
c000a638:	e8 e4 f0 ff ff       	call   c0009721 <Virt::freeSwapfilePage(unsigned long)>
c000a63d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a642:	83 c4 10             	add    esp,0x10
c000a645:	83 e8 01             	sub    eax,0x1
c000a648:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a64d:	85 c0                	test   eax,eax
c000a64f:	75 01                	jne    c000a652 <VAS::tryLoadBackOffDisk(unsigned long)+0x12c>
c000a651:	fb                   	sti    
c000a652:	0f 20 d8             	mov    eax,cr3
c000a655:	0f 22 d8             	mov    cr3,eax
c000a658:	e9 14 ff ff ff       	jmp    c000a571 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c000a65d:	90                   	nop

c000a65e <VAS::scanForEviction()>:
c000a65e:	57                   	push   edi
c000a65f:	56                   	push   esi
c000a660:	31 f6                	xor    esi,esi
c000a662:	53                   	push   ebx
c000a663:	83 ec 10             	sub    esp,0x10
c000a666:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a66a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a66d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a673:	75 0e                	jne    c000a683 <VAS::scanForEviction()+0x25>
c000a675:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a678:	89 da                	mov    edx,ebx
c000a67a:	c1 ea 16             	shr    edx,0x16
c000a67d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a681:	74 57                	je     c000a6da <VAS::scanForEviction()+0x7c>
c000a683:	53                   	push   ebx
c000a684:	57                   	push   edi
c000a685:	e8 6e f2 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a68a:	5a                   	pop    edx
c000a68b:	59                   	pop    ecx
c000a68c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a68e:	89 d1                	mov    ecx,edx
c000a690:	c1 e9 0c             	shr    ecx,0xc
c000a693:	74 10                	je     c000a6a5 <VAS::scanForEviction()+0x47>
c000a695:	89 d1                	mov    ecx,edx
c000a697:	81 e1 01 08 00 00    	and    ecx,0x801
c000a69d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a6a3:	74 40                	je     c000a6e5 <VAS::scanForEviction()+0x87>
c000a6a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a6ab:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6b1:	76 2d                	jbe    c000a6e0 <VAS::scanForEviction()+0x82>
c000a6b3:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a6ba:	83 c6 01             	add    esi,0x1
c000a6bd:	83 fe 03             	cmp    esi,0x3
c000a6c0:	74 32                	je     c000a6f4 <VAS::scanForEviction()+0x96>
c000a6c2:	31 db                	xor    ebx,ebx
c000a6c4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6ca:	75 b7                	jne    c000a683 <VAS::scanForEviction()+0x25>
c000a6cc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a6cf:	89 da                	mov    edx,ebx
c000a6d1:	c1 ea 16             	shr    edx,0x16
c000a6d4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6d8:	75 a9                	jne    c000a683 <VAS::scanForEviction()+0x25>
c000a6da:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6e0:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a6e3:	eb 88                	jmp    c000a66d <VAS::scanForEviction()+0xf>
c000a6e5:	f6 c2 20             	test   dl,0x20
c000a6e8:	74 13                	je     c000a6fd <VAS::scanForEviction()+0x9f>
c000a6ea:	83 e2 df             	and    edx,0xffffffdf
c000a6ed:	89 10                	mov    DWORD PTR [eax],edx
c000a6ef:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a6f2:	eb b1                	jmp    c000a6a5 <VAS::scanForEviction()+0x47>
c000a6f4:	83 c4 10             	add    esp,0x10
c000a6f7:	31 c0                	xor    eax,eax
c000a6f9:	5b                   	pop    ebx
c000a6fa:	5e                   	pop    esi
c000a6fb:	5f                   	pop    edi
c000a6fc:	c3                   	ret    
c000a6fd:	89 d0                	mov    eax,edx
c000a6ff:	83 ec 08             	sub    esp,0x8
c000a702:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a707:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a70b:	53                   	push   ebx
c000a70c:	68 fd 00 02 c0       	push   0xc00200fd
c000a711:	e8 94 02 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a716:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a719:	58                   	pop    eax
c000a71a:	5a                   	pop    edx
c000a71b:	51                   	push   ecx
c000a71c:	57                   	push   edi
c000a71d:	e8 26 fd ff ff       	call   c000a448 <VAS::evict(unsigned long)>
c000a722:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a725:	5b                   	pop    ebx
c000a726:	5e                   	pop    esi
c000a727:	50                   	push   eax
c000a728:	68 11 01 02 c0       	push   0xc0020111
c000a72d:	e8 78 02 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a732:	58                   	pop    eax
c000a733:	5a                   	pop    edx
c000a734:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a738:	50                   	push   eax
c000a739:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a73d:	68 24 01 02 c0       	push   0xc0020124
c000a742:	e8 63 02 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a747:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a74a:	83 c4 10             	add    esp,0x10
c000a74d:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a753:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a756:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a75a:	83 c4 10             	add    esp,0x10
c000a75d:	5b                   	pop    ebx
c000a75e:	5e                   	pop    esi
c000a75f:	5f                   	pop    edi
c000a760:	c3                   	ret    

c000a761 <mapVASFirstTime>:
c000a761:	55                   	push   ebp
c000a762:	57                   	push   edi
c000a763:	56                   	push   esi
c000a764:	53                   	push   ebx
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a76d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a770:	83 fa 01             	cmp    edx,0x1
c000a773:	0f 84 cb 00 00 00    	je     c000a844 <mapVASFirstTime+0xe3>
c000a779:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a77c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a781:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a786:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a789:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a78f:	c1 e5 15             	shl    ebp,0x15
c000a792:	29 eb                	sub    ebx,ebp
c000a794:	29 ef                	sub    edi,ebp
c000a796:	e8 3b d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a79b:	83 ec 0c             	sub    esp,0xc
c000a79e:	68 03 04 00 00       	push   0x403
c000a7a3:	6a 01                	push   0x1
c000a7a5:	53                   	push   ebx
c000a7a6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7ac:	50                   	push   eax
c000a7ad:	56                   	push   esi
c000a7ae:	e8 4b f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7b3:	83 c4 20             	add    esp,0x20
c000a7b6:	39 fb                	cmp    ebx,edi
c000a7b8:	75 dc                	jne    c000a796 <mapVASFirstTime+0x35>
c000a7ba:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7bf:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7c4:	29 eb                	sub    ebx,ebp
c000a7c6:	29 ef                	sub    edi,ebp
c000a7c8:	e8 09 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a7cd:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a7d1:	83 fa 01             	cmp    edx,0x1
c000a7d4:	19 d2                	sbb    edx,edx
c000a7d6:	83 ec 0c             	sub    esp,0xc
c000a7d9:	83 e2 04             	and    edx,0x4
c000a7dc:	81 c2 03 04 00 00    	add    edx,0x403
c000a7e2:	52                   	push   edx
c000a7e3:	6a 01                	push   0x1
c000a7e5:	53                   	push   ebx
c000a7e6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7ec:	50                   	push   eax
c000a7ed:	56                   	push   esi
c000a7ee:	e8 0b f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7f3:	83 c4 20             	add    esp,0x20
c000a7f6:	39 df                	cmp    edi,ebx
c000a7f8:	75 ce                	jne    c000a7c8 <mapVASFirstTime+0x67>
c000a7fa:	83 ec 0c             	sub    esp,0xc
c000a7fd:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a802:	6a 04                	push   0x4
c000a804:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a80a:	6a ff                	push   0xffffffff
c000a80c:	c1 eb 0c             	shr    ebx,0xc
c000a80f:	53                   	push   ebx
c000a810:	68 00 30 02 c0       	push   0xc0023000
c000a815:	56                   	push   esi
c000a816:	e8 4d f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a81b:	83 c4 14             	add    esp,0x14
c000a81e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a823:	6a 04                	push   0x4
c000a825:	6a ff                	push   0xffffffff
c000a827:	53                   	push   ebx
c000a828:	68 00 30 02 c0       	push   0xc0023000
c000a82d:	50                   	push   eax
c000a82e:	e8 35 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a833:	0f 20 d8             	mov    eax,cr3
c000a836:	0f 22 d8             	mov    cr3,eax
c000a839:	83 c4 20             	add    esp,0x20
c000a83c:	83 c4 0c             	add    esp,0xc
c000a83f:	5b                   	pop    ebx
c000a840:	5e                   	pop    esi
c000a841:	5f                   	pop    edi
c000a842:	5d                   	pop    ebp
c000a843:	c3                   	ret    
c000a844:	83 ec 0c             	sub    esp,0xc
c000a847:	68 31 01 02 c0       	push   0xc0020131
c000a84c:	e8 59 01 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a851:	83 c4 10             	add    esp,0x10
c000a854:	83 c4 0c             	add    esp,0xc
c000a857:	5b                   	pop    ebx
c000a858:	5e                   	pop    esi
c000a859:	5f                   	pop    edi
c000a85a:	5d                   	pop    ebp
c000a85b:	c3                   	ret    

c000a85c <__cxa_atexit>:
c000a85c:	31 c0                	xor    eax,eax
c000a85e:	c3                   	ret    

c000a85f <__cxa_finalize>:
c000a85f:	c3                   	ret    

c000a860 <__stack_chk_fail>:
c000a860:	55                   	push   ebp
c000a861:	89 e5                	mov    ebp,esp
c000a863:	83 ec 10             	sub    esp,0x10
c000a866:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a869:	68 4a 01 02 c0       	push   0xc002014a
c000a86e:	e8 37 01 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a873:	58                   	pop    eax
c000a874:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a877:	5a                   	pop    edx
c000a878:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a87b:	68 4a 01 02 c0       	push   0xc002014a
c000a880:	e8 25 01 00 00       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000a885:	c7 04 24 52 01 02 c0 	mov    DWORD PTR [esp],0xc0020152
c000a88c:	e8 e4 5f 00 00       	call   c0010875 <KePanic(char const*)>
c000a891:	83 c4 10             	add    esp,0x10
c000a894:	c9                   	leave  
c000a895:	c3                   	ret    

c000a896 <__cxa_pure_virtual>:
c000a896:	83 ec 18             	sub    esp,0x18
c000a899:	68 6a 01 02 c0       	push   0xc002016a
c000a89e:	e8 d2 5f 00 00       	call   c0010875 <KePanic(char const*)>
c000a8a3:	83 c4 1c             	add    esp,0x1c
c000a8a6:	c3                   	ret    

c000a8a7 <operator new[](unsigned long)>:
c000a8a7:	e9 1f d2 ff ff       	jmp    c0007acb <malloc>

c000a8ac <operator delete(void*, unsigned long)>:
c000a8ac:	e9 3a d2 ff ff       	jmp    c0007aeb <rfree>

c000a8b1 <operator delete[](void*)>:
c000a8b1:	e9 35 d2 ff ff       	jmp    c0007aeb <rfree>

c000a8b6 <operator delete[](void*, unsigned long)>:
c000a8b6:	e9 30 d2 ff ff       	jmp    c0007aeb <rfree>

c000a8bb <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8bb:	55                   	push   ebp
c000a8bc:	57                   	push   edi
c000a8bd:	56                   	push   esi
c000a8be:	53                   	push   ebx
c000a8bf:	83 ec 20             	sub    esp,0x20
c000a8c2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a8c6:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a8ce:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a8d2:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a8da:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a8de:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a8e6:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a8ee:	89 f7                	mov    edi,esi
c000a8f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a8f5:	89 eb                	mov    ebx,ebp
c000a8f7:	eb 02                	jmp    c000a8fb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a8f9:	89 c7                	mov    edi,eax
c000a8fb:	31 d2                	xor    edx,edx
c000a8fd:	89 f8                	mov    eax,edi
c000a8ff:	f7 f1                	div    ecx
c000a901:	83 c3 01             	add    ebx,0x1
c000a904:	39 cf                	cmp    edi,ecx
c000a906:	73 f1                	jae    c000a8f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a908:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a90b:	eb 02                	jmp    c000a90f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a90d:	89 c6                	mov    esi,eax
c000a90f:	31 d2                	xor    edx,edx
c000a911:	89 f0                	mov    eax,esi
c000a913:	f7 f1                	div    ecx
c000a915:	83 eb 01             	sub    ebx,0x1
c000a918:	39 ce                	cmp    esi,ecx
c000a91a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a91e:	88 13                	mov    BYTE PTR [ebx],dl
c000a920:	73 eb                	jae    c000a90d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a922:	83 c4 20             	add    esp,0x20
c000a925:	89 e8                	mov    eax,ebp
c000a927:	5b                   	pop    ebx
c000a928:	5e                   	pop    esi
c000a929:	5f                   	pop    edi
c000a92a:	5d                   	pop    ebp
c000a92b:	c3                   	ret    

c000a92c <Dbg::logc(char)>:
c000a92c:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a933:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a937:	75 12                	jne    c000a94b <Dbg::logc(char)+0x1f>
c000a939:	ba fd 03 00 00       	mov    edx,0x3fd
c000a93e:	ec                   	in     al,dx
c000a93f:	a8 20                	test   al,0x20
c000a941:	74 fb                	je     c000a93e <Dbg::logc(char)+0x12>
c000a943:	ba f8 03 00 00       	mov    edx,0x3f8
c000a948:	88 c8                	mov    al,cl
c000a94a:	ee                   	out    dx,al
c000a94b:	c3                   	ret    

c000a94c <Dbg::logs(char*)>:
c000a94c:	53                   	push   ebx
c000a94d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a951:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a954:	85 c0                	test   eax,eax
c000a956:	74 11                	je     c000a969 <Dbg::logs(char*)+0x1d>
c000a958:	50                   	push   eax
c000a959:	83 c3 01             	add    ebx,0x1
c000a95c:	e8 cb ff ff ff       	call   c000a92c <Dbg::logc(char)>
c000a961:	58                   	pop    eax
c000a962:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a965:	85 c0                	test   eax,eax
c000a967:	75 ef                	jne    c000a958 <Dbg::logs(char*)+0xc>
c000a969:	5b                   	pop    ebx
c000a96a:	c3                   	ret    

c000a96b <Dbg::logWriteInt(unsigned int)>:
c000a96b:	83 ec 10             	sub    esp,0x10
c000a96e:	6a 0a                	push   0xa
c000a970:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a974:	50                   	push   eax
c000a975:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a979:	50                   	push   eax
c000a97a:	e8 3c ff ff ff       	call   c000a8bb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a97f:	50                   	push   eax
c000a980:	e8 c7 ff ff ff       	call   c000a94c <Dbg::logs(char*)>
c000a985:	83 c4 20             	add    esp,0x20
c000a988:	c3                   	ret    

c000a989 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a989:	83 ec 10             	sub    esp,0x10
c000a98c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a990:	50                   	push   eax
c000a991:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a995:	50                   	push   eax
c000a996:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a99a:	52                   	push   edx
c000a99b:	e8 1b ff ff ff       	call   c000a8bb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9a0:	50                   	push   eax
c000a9a1:	e8 a6 ff ff ff       	call   c000a94c <Dbg::logs(char*)>
c000a9a6:	83 c4 20             	add    esp,0x20
c000a9a9:	c3                   	ret    

c000a9aa <Dbg::kprintf(char const*, ...)>:
c000a9aa:	55                   	push   ebp
c000a9ab:	57                   	push   edi
c000a9ac:	56                   	push   esi
c000a9ad:	53                   	push   ebx
c000a9ae:	83 ec 0c             	sub    esp,0xc
c000a9b1:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9bc:	74 08                	je     c000a9c6 <Dbg::kprintf(char const*, ...)+0x1c>
c000a9be:	83 c4 0c             	add    esp,0xc
c000a9c1:	5b                   	pop    ebx
c000a9c2:	5e                   	pop    esi
c000a9c3:	5f                   	pop    edi
c000a9c4:	5d                   	pop    ebp
c000a9c5:	c3                   	ret    
c000a9c6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a9ca:	31 ff                	xor    edi,edi
c000a9cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9d0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9d3:	85 c0                	test   eax,eax
c000a9d5:	74 e7                	je     c000a9be <Dbg::kprintf(char const*, ...)+0x14>
c000a9d7:	8d 77 01             	lea    esi,[edi+0x1]
c000a9da:	83 f8 25             	cmp    eax,0x25
c000a9dd:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9e0:	75 47                	jne    c000aa29 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9e2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9e5:	83 c7 02             	add    edi,0x2
c000a9e8:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9eb:	83 e8 25             	sub    eax,0x25
c000a9ee:	0f b6 c0             	movzx  eax,al
c000a9f1:	83 f8 53             	cmp    eax,0x53
c000a9f4:	0f 87 ce 00 00 00    	ja     c000aac8 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9fa:	ff 24 85 80 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfe80]
c000aa01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa05:	89 c8                	mov    eax,ecx
c000aa07:	83 c1 04             	add    ecx,0x4
c000aa0a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa0e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000aa10:	55                   	push   ebp
c000aa11:	e8 55 ff ff ff       	call   c000a96b <Dbg::logWriteInt(unsigned int)>
c000aa16:	58                   	pop    eax
c000aa17:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa1a:	85 c0                	test   eax,eax
c000aa1c:	74 a0                	je     c000a9be <Dbg::kprintf(char const*, ...)+0x14>
c000aa1e:	8d 77 01             	lea    esi,[edi+0x1]
c000aa21:	83 f8 25             	cmp    eax,0x25
c000aa24:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa27:	74 b9                	je     c000a9e2 <Dbg::kprintf(char const*, ...)+0x38>
c000aa29:	50                   	push   eax
c000aa2a:	89 f7                	mov    edi,esi
c000aa2c:	e8 fb fe ff ff       	call   c000a92c <Dbg::logc(char)>
c000aa31:	89 ee                	mov    esi,ebp
c000aa33:	58                   	pop    eax
c000aa34:	eb e1                	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa3a:	89 c8                	mov    eax,ecx
c000aa3c:	83 c1 04             	add    ecx,0x4
c000aa3f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa43:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa45:	50                   	push   eax
c000aa46:	e8 01 ff ff ff       	call   c000a94c <Dbg::logs(char*)>
c000aa4b:	58                   	pop    eax
c000aa4c:	eb c9                	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa52:	89 d0                	mov    eax,edx
c000aa54:	83 c2 04             	add    edx,0x4
c000aa57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa5b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa5d:	50                   	push   eax
c000aa5e:	e8 08 ff ff ff       	call   c000a96b <Dbg::logWriteInt(unsigned int)>
c000aa63:	58                   	pop    eax
c000aa64:	eb b1                	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa6a:	89 d0                	mov    eax,edx
c000aa6c:	83 c2 04             	add    edx,0x4
c000aa6f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa73:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa76:	50                   	push   eax
c000aa77:	e8 b0 fe ff ff       	call   c000a92c <Dbg::logc(char)>
c000aa7c:	58                   	pop    eax
c000aa7d:	eb 98                	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa83:	89 c8                	mov    eax,ecx
c000aa85:	83 c1 04             	add    ecx,0x4
c000aa88:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa8c:	6a 10                	push   0x10
c000aa8e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa90:	51                   	push   ecx
c000aa91:	e8 f3 fe ff ff       	call   c000a989 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa96:	5d                   	pop    ebp
c000aa97:	58                   	pop    eax
c000aa98:	e9 7a ff ff ff       	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aaa1:	89 d0                	mov    eax,edx
c000aaa3:	83 c2 08             	add    edx,0x8
c000aaa6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaaa:	6a 10                	push   0x10
c000aaac:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaae:	50                   	push   eax
c000aaaf:	e8 d5 fe ff ff       	call   c000a989 <Dbg::logWriteIntBase(unsigned int, int)>
c000aab4:	58                   	pop    eax
c000aab5:	5a                   	pop    edx
c000aab6:	e9 5c ff ff ff       	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>
c000aabb:	6a 25                	push   0x25
c000aabd:	e8 6a fe ff ff       	call   c000a92c <Dbg::logc(char)>
c000aac2:	5a                   	pop    edx
c000aac3:	e9 4f ff ff ff       	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>
c000aac8:	6a 25                	push   0x25
c000aaca:	e8 5d fe ff ff       	call   c000a92c <Dbg::logc(char)>
c000aacf:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aad3:	50                   	push   eax
c000aad4:	e8 53 fe ff ff       	call   c000a92c <Dbg::logc(char)>
c000aad9:	5a                   	pop    edx
c000aada:	59                   	pop    ecx
c000aadb:	e9 37 ff ff ff       	jmp    c000aa17 <Dbg::kprintf(char const*, ...)+0x6d>

c000aae0 <File::read(unsigned long long, void*, int*)>:
c000aae0:	53                   	push   ebx
c000aae1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aae5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aae9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aaf0:	83 f8 19             	cmp    eax,0x19
c000aaf3:	77 35                	ja     c000ab2a <File::read(unsigned long long, void*, int*)+0x4a>
c000aaf5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aafc:	85 c0                	test   eax,eax
c000aafe:	74 2a                	je     c000ab2a <File::read(unsigned long long, void*, int*)+0x4a>
c000ab00:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab06:	85 c0                	test   eax,eax
c000ab08:	74 20                	je     c000ab2a <File::read(unsigned long long, void*, int*)+0x4a>
c000ab0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab0e:	74 21                	je     c000ab31 <File::read(unsigned long long, void*, int*)+0x51>
c000ab10:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab16:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab24:	5b                   	pop    ebx
c000ab25:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab28:	ff e0                	jmp    eax
c000ab2a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab2f:	eb 05                	jmp    c000ab36 <File::read(unsigned long long, void*, int*)+0x56>
c000ab31:	b8 05 00 00 00       	mov    eax,0x5
c000ab36:	5b                   	pop    ebx
c000ab37:	c3                   	ret    

c000ab38 <File::write(unsigned long long, void*, int*)>:
c000ab38:	53                   	push   ebx
c000ab39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab41:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab48:	83 f8 19             	cmp    eax,0x19
c000ab4b:	77 35                	ja     c000ab82 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab4d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab54:	85 c0                	test   eax,eax
c000ab56:	74 2a                	je     c000ab82 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab58:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab5e:	85 c0                	test   eax,eax
c000ab60:	74 20                	je     c000ab82 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab66:	74 21                	je     c000ab89 <File::write(unsigned long long, void*, int*)+0x51>
c000ab68:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab6a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab6e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab7c:	5b                   	pop    ebx
c000ab7d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab80:	ff e0                	jmp    eax
c000ab82:	b8 0b 00 00 00       	mov    eax,0xb
c000ab87:	eb 05                	jmp    c000ab8e <File::write(unsigned long long, void*, int*)+0x56>
c000ab89:	b8 05 00 00 00       	mov    eax,0x5
c000ab8e:	5b                   	pop    ebx
c000ab8f:	c3                   	ret    

c000ab90 <Directory::read(unsigned long long, void*, int*)>:
c000ab90:	53                   	push   ebx
c000ab91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab99:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aba0:	83 f8 19             	cmp    eax,0x19
c000aba3:	77 35                	ja     c000abda <Directory::read(unsigned long long, void*, int*)+0x4a>
c000aba5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abac:	85 c0                	test   eax,eax
c000abae:	74 2a                	je     c000abda <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abb0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abb6:	85 c0                	test   eax,eax
c000abb8:	74 20                	je     c000abda <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abbe:	74 21                	je     c000abe1 <Directory::read(unsigned long long, void*, int*)+0x51>
c000abc0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abc2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abc6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abd4:	5b                   	pop    ebx
c000abd5:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000abd8:	ff e0                	jmp    eax
c000abda:	b8 0b 00 00 00       	mov    eax,0xb
c000abdf:	eb 05                	jmp    c000abe6 <Directory::read(unsigned long long, void*, int*)+0x56>
c000abe1:	b8 05 00 00 00       	mov    eax,0x5
c000abe6:	5b                   	pop    ebx
c000abe7:	c3                   	ret    

c000abe8 <Directory::write(unsigned long long, void*, int*)>:
c000abe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abec:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000abf3:	b8 0b 00 00 00       	mov    eax,0xb
c000abf8:	83 fa 19             	cmp    edx,0x19
c000abfb:	77 18                	ja     c000ac15 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abfd:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ac04:	85 d2                	test   edx,edx
c000ac06:	74 0d                	je     c000ac15 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac08:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac0f:	19 c0                	sbb    eax,eax
c000ac11:	83 e0 0a             	and    eax,0xa
c000ac14:	40                   	inc    eax
c000ac15:	c3                   	ret    

c000ac16 <File::isAtty()>:
c000ac16:	31 c0                	xor    eax,eax
c000ac18:	c3                   	ret    
c000ac19:	90                   	nop

c000ac1a <Directory::isAtty()>:
c000ac1a:	31 c0                	xor    eax,eax
c000ac1c:	c3                   	ret    
c000ac1d:	90                   	nop

c000ac1e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac1e:	b8 0a 00 00 00       	mov    eax,0xa
c000ac23:	c3                   	ret    

c000ac24 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac24:	b8 0a 00 00 00       	mov    eax,0xa
c000ac29:	c3                   	ret    

c000ac2a <Filesystem::allocateSwapfile(char const*, int)>:
c000ac2a:	31 c0                	xor    eax,eax
c000ac2c:	31 d2                	xor    edx,edx
c000ac2e:	c3                   	ret    
c000ac2f:	90                   	nop

c000ac30 <File::~File()>:
c000ac30:	83 ec 0c             	sub    esp,0xc
c000ac33:	ba 40 03 02 c0       	mov    edx,0xc0020340
c000ac38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac3c:	89 10                	mov    DWORD PTR [eax],edx
c000ac3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac42:	83 ec 0c             	sub    esp,0xc
c000ac45:	50                   	push   eax
c000ac46:	e8 51 e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac4b:	83 c4 10             	add    esp,0x10
c000ac4e:	90                   	nop
c000ac4f:	83 c4 0c             	add    esp,0xc
c000ac52:	c3                   	ret    
c000ac53:	90                   	nop

c000ac54 <File::~File()>:
c000ac54:	83 ec 0c             	sub    esp,0xc
c000ac57:	83 ec 0c             	sub    esp,0xc
c000ac5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5e:	e8 cd ff ff ff       	call   c000ac30 <File::~File()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	83 ec 08             	sub    esp,0x8
c000ac69:	68 14 01 00 00       	push   0x114
c000ac6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac72:	e8 35 fc ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	83 c4 0c             	add    esp,0xc
c000ac7d:	c3                   	ret    

c000ac7e <Directory::~Directory()>:
c000ac7e:	83 ec 0c             	sub    esp,0xc
c000ac81:	ba 5c 03 02 c0       	mov    edx,0xc002035c
c000ac86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac8a:	89 10                	mov    DWORD PTR [eax],edx
c000ac8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	50                   	push   eax
c000ac94:	e8 03 e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac99:	83 c4 10             	add    esp,0x10
c000ac9c:	90                   	nop
c000ac9d:	83 c4 0c             	add    esp,0xc
c000aca0:	c3                   	ret    
c000aca1:	90                   	nop

c000aca2 <Directory::~Directory()>:
c000aca2:	83 ec 0c             	sub    esp,0xc
c000aca5:	83 ec 0c             	sub    esp,0xc
c000aca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acac:	e8 cd ff ff ff       	call   c000ac7e <Directory::~Directory()>
c000acb1:	83 c4 10             	add    esp,0x10
c000acb4:	83 ec 08             	sub    esp,0x8
c000acb7:	68 14 01 00 00       	push   0x114
c000acbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc0:	e8 e7 fb ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000acc5:	83 c4 10             	add    esp,0x10
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <Filesystem::Filesystem()>:
c000accc:	ba d8 02 02 c0       	mov    edx,0xc00202d8
c000acd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd5:	89 10                	mov    DWORD PTR [eax],edx
c000acd7:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000acdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ace4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace8:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000aced:	90                   	nop
c000acee:	c3                   	ret    
c000acef:	90                   	nop

c000acf0 <Filesystem::~Filesystem()>:
c000acf0:	ba d8 02 02 c0       	mov    edx,0xc00202d8
c000acf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acf9:	89 10                	mov    DWORD PTR [eax],edx
c000acfb:	90                   	nop
c000acfc:	c3                   	ret    
c000acfd:	90                   	nop

c000acfe <Filesystem::~Filesystem()>:
c000acfe:	83 ec 0c             	sub    esp,0xc
c000ad01:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad05:	e8 e6 ff ff ff       	call   c000acf0 <Filesystem::~Filesystem()>
c000ad0a:	83 c4 04             	add    esp,0x4
c000ad0d:	83 ec 08             	sub    esp,0x8
c000ad10:	6a 08                	push   0x8
c000ad12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad16:	e8 91 fb ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000ad1b:	83 c4 10             	add    esp,0x10
c000ad1e:	83 c4 0c             	add    esp,0xc
c000ad21:	c3                   	ret    

c000ad22 <Fs::getcwd(Process*, char*, int)>:
c000ad22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad26:	31 c0                	xor    eax,eax
c000ad28:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad2c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad2f:	7d 15                	jge    c000ad46 <Fs::getcwd(Process*, char*, int)+0x24>
c000ad31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad35:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad3c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad3f:	84 c9                	test   cl,cl
c000ad41:	74 06                	je     c000ad49 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad43:	40                   	inc    eax
c000ad44:	eb e2                	jmp    c000ad28 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad46:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad49:	31 c0                	xor    eax,eax
c000ad4b:	c3                   	ret    

c000ad4c <Fs::initVFS()>:
c000ad4c:	83 ec 18             	sub    esp,0x18
c000ad4f:	6a 08                	push   0x8
c000ad51:	e8 75 cd ff ff       	call   c0007acb <malloc>
c000ad56:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad59:	e8 a2 dd 00 00       	call   c0018b00 <FAT::FAT()>
c000ad5e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad65:	e8 61 cd ff ff       	call   c0007acb <malloc>
c000ad6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad6d:	e8 b6 ec 00 00       	call   c0019a28 <ISO9660::ISO9660()>
c000ad72:	83 c4 1c             	add    esp,0x1c
c000ad75:	c3                   	ret    

c000ad76 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad76:	55                   	push   ebp
c000ad77:	57                   	push   edi
c000ad78:	56                   	push   esi
c000ad79:	53                   	push   ebx
c000ad7a:	81 ec 20 04 00 00    	sub    esp,0x420
c000ad80:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ad87:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ad8e:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ad95:	68 00 04 00 00       	push   0x400
c000ad9a:	6a 00                	push   0x0
c000ad9c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ada0:	56                   	push   esi
c000ada1:	e8 4a 57 ff ff       	call   c00004f0 <memset>
c000ada6:	83 c4 10             	add    esp,0x10
c000ada9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000adad:	75 0b                	jne    c000adba <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000adaf:	50                   	push   eax
c000adb0:	50                   	push   eax
c000adb1:	57                   	push   edi
c000adb2:	56                   	push   esi
c000adb3:	e8 98 58 ff ff       	call   c0000650 <strcpy>
c000adb8:	eb 45                	jmp    c000adff <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000adba:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000adbd:	83 f8 2f             	cmp    eax,0x2f
c000adc0:	74 05                	je     c000adc7 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000adc2:	83 f8 5c             	cmp    eax,0x5c
c000adc5:	75 19                	jne    c000ade0 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000adc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000adca:	3c 60                	cmp    al,0x60
c000adcc:	7e 03                	jle    c000add1 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000adce:	83 e8 20             	sub    eax,0x20
c000add1:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000add5:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000addc:	50                   	push   eax
c000addd:	50                   	push   eax
c000adde:	eb 18                	jmp    c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000ade0:	50                   	push   eax
c000ade1:	50                   	push   eax
c000ade2:	55                   	push   ebp
c000ade3:	56                   	push   esi
c000ade4:	e8 67 58 ff ff       	call   c0000650 <strcpy>
c000ade9:	5a                   	pop    edx
c000adea:	59                   	pop    ecx
c000adeb:	68 53 12 02 c0       	push   0xc0021253
c000adf0:	56                   	push   esi
c000adf1:	e8 7a 5a ff ff       	call   c0000870 <strcat>
c000adf6:	5d                   	pop    ebp
c000adf7:	58                   	pop    eax
c000adf8:	57                   	push   edi
c000adf9:	56                   	push   esi
c000adfa:	e8 71 5a ff ff       	call   c0000870 <strcat>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000ae06:	3c 60                	cmp    al,0x60
c000ae08:	7e 03                	jle    c000ae0d <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000ae0a:	83 e8 20             	sub    eax,0x20
c000ae0d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ae11:	88 03                	mov    BYTE PTR [ebx],al
c000ae13:	b8 03 00 00 00       	mov    eax,0x3
c000ae18:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ae1f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae25:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae29:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000ae31:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ae35:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000ae3a:	89 fa                	mov    edx,edi
c000ae3c:	0f be ea             	movsx  ebp,dl
c000ae3f:	85 ed                	test   ebp,ebp
c000ae41:	0f 84 af 00 00 00    	je     c000aef6 <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000ae47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae4b:	42                   	inc    edx
c000ae4c:	83 fd 2f             	cmp    ebp,0x2f
c000ae4f:	74 05                	je     c000ae56 <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000ae51:	83 fd 5c             	cmp    ebp,0x5c
c000ae54:	75 14                	jne    c000ae6a <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae56:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae5b:	89 c5                	mov    ebp,eax
c000ae5d:	74 0b                	je     c000ae6a <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae5f:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae63:	40                   	inc    eax
c000ae64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae68:	eb c7                	jmp    c000ae31 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000ae6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae6e:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ae73:	89 f9                	mov    ecx,edi
c000ae75:	0f be e9             	movsx  ebp,cl
c000ae78:	75 63                	jne    c000aedd <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae7a:	83 fd 2e             	cmp    ebp,0x2e
c000ae7d:	75 5e                	jne    c000aedd <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae83:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ae88:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ae8d:	74 18                	je     c000aea7 <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ae8f:	83 fd 2e             	cmp    ebp,0x2e
c000ae92:	74 57                	je     c000aeeb <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae94:	89 ca                	mov    edx,ecx
c000ae96:	42                   	inc    edx
c000ae97:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae9b:	83 f9 2f             	cmp    ecx,0x2f
c000ae9e:	74 f6                	je     c000ae96 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000aea0:	83 f9 5c             	cmp    ecx,0x5c
c000aea3:	74 f1                	je     c000ae96 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000aea5:	eb bd                	jmp    c000ae64 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aea7:	83 fd 2e             	cmp    ebp,0x2e
c000aeaa:	74 3f                	je     c000aeeb <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000aeac:	83 f8 03             	cmp    eax,0x3
c000aeaf:	74 b3                	je     c000ae64 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aeb1:	42                   	inc    edx
c000aeb2:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000aeb6:	83 f9 2f             	cmp    ecx,0x2f
c000aeb9:	74 f6                	je     c000aeb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aebb:	83 f9 5c             	cmp    ecx,0x5c
c000aebe:	74 f1                	je     c000aeb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aec0:	48                   	dec    eax
c000aec1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aec5:	75 06                	jne    c000aecd <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000aec7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aecb:	eb f3                	jmp    c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aecd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aed1:	74 07                	je     c000aeda <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000aed3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aed7:	48                   	dec    eax
c000aed8:	eb f3                	jmp    c000aecd <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000aeda:	40                   	inc    eax
c000aedb:	eb 87                	jmp    c000ae64 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aedd:	83 fd 2f             	cmp    ebp,0x2f
c000aee0:	74 82                	je     c000ae64 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aee2:	83 fd 5c             	cmp    ebp,0x5c
c000aee5:	0f 84 79 ff ff ff    	je     c000ae64 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aeeb:	89 f9                	mov    ecx,edi
c000aeed:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000aef0:	40                   	inc    eax
c000aef1:	e9 6e ff ff ff       	jmp    c000ae64 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aef6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aefa:	83 ec 0c             	sub    esp,0xc
c000aefd:	53                   	push   ebx
c000aefe:	e8 7d 56 ff ff       	call   c0000580 <strlen>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000af0b:	75 26                	jne    c000af33 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000af0d:	83 ec 0c             	sub    esp,0xc
c000af10:	53                   	push   ebx
c000af11:	e8 6a 56 ff ff       	call   c0000580 <strlen>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af1e:	74 26                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	53                   	push   ebx
c000af24:	e8 57 56 ff ff       	call   c0000580 <strlen>
c000af29:	83 c4 10             	add    esp,0x10
c000af2c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af31:	eb c7                	jmp    c000aefa <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	53                   	push   ebx
c000af37:	e8 44 56 ff ff       	call   c0000580 <strlen>
c000af3c:	83 c4 10             	add    esp,0x10
c000af3f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af44:	74 c7                	je     c000af0d <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000af46:	81 c4 1c 04 00 00    	add    esp,0x41c
c000af4c:	5b                   	pop    ebx
c000af4d:	5e                   	pop    esi
c000af4e:	5f                   	pop    edi
c000af4f:	5d                   	pop    ebp
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <File::File(char const*, Process*)>:
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af59:	83 ec 08             	sub    esp,0x8
c000af5c:	6a 00                	push   0x0
c000af5e:	50                   	push   eax
c000af5f:	e8 52 e2 ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000af64:	83 c4 10             	add    esp,0x10
c000af67:	ba 40 03 02 c0       	mov    edx,0xc0020340
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	89 10                	mov    DWORD PTR [eax],edx
c000af72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af80:	83 c0 0d             	add    eax,0xd
c000af83:	83 ec 04             	sub    esp,0x4
c000af86:	52                   	push   edx
c000af87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af8b:	50                   	push   eax
c000af8c:	e8 e5 fd ff ff       	call   c000ad76 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af9b:	83 e8 41             	sub    eax,0x41
c000af9e:	88 c2                	mov    dl,al
c000afa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afae:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afbc:	0f b6 c0             	movzx  eax,al
c000afbf:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afc6:	85 c0                	test   eax,eax
c000afc8:	74 3e                	je     c000b008 <File::File(char const*, Process*)+0xb6>
c000afca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afce:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afd4:	0f b6 c0             	movzx  eax,al
c000afd7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afde:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000afe4:	85 c0                	test   eax,eax
c000afe6:	75 20                	jne    c000b008 <File::File(char const*, Process*)+0xb6>
c000afe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aff2:	0f b6 c0             	movzx  eax,al
c000aff5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000affc:	83 ec 0c             	sub    esp,0xc
c000afff:	50                   	push   eax
c000b000:	e8 2f 21 00 00       	call   c000d134 <LogicalDisk::mount()>
c000b005:	83 c4 10             	add    esp,0x10
c000b008:	90                   	nop
c000b009:	83 c4 0c             	add    esp,0xc
c000b00c:	c3                   	ret    
c000b00d:	90                   	nop

c000b00e <File::open(FileOpenMode)>:
c000b00e:	53                   	push   ebx
c000b00f:	b8 0b 00 00 00       	mov    eax,0xb
c000b014:	83 ec 08             	sub    esp,0x8
c000b017:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b01b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b022:	83 fa 19             	cmp    edx,0x19
c000b025:	77 40                	ja     c000b067 <File::open(FileOpenMode)+0x59>
c000b027:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b02e:	85 d2                	test   edx,edx
c000b030:	74 35                	je     c000b067 <File::open(FileOpenMode)+0x59>
c000b032:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b038:	85 d2                	test   edx,edx
c000b03a:	74 2b                	je     c000b067 <File::open(FileOpenMode)+0x59>
c000b03c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b040:	b8 06 00 00 00       	mov    eax,0x6
c000b045:	75 20                	jne    c000b067 <File::open(FileOpenMode)+0x59>
c000b047:	8b 02                	mov    eax,DWORD PTR [edx]
c000b049:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b04f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b053:	51                   	push   ecx
c000b054:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b057:	51                   	push   ecx
c000b058:	52                   	push   edx
c000b059:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b05c:	83 c4 10             	add    esp,0x10
c000b05f:	85 c0                	test   eax,eax
c000b061:	75 04                	jne    c000b067 <File::open(FileOpenMode)+0x59>
c000b063:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b067:	83 c4 08             	add    esp,0x8
c000b06a:	5b                   	pop    ebx
c000b06b:	c3                   	ret    

c000b06c <File::close()>:
c000b06c:	53                   	push   ebx
c000b06d:	b8 0b 00 00 00       	mov    eax,0xb
c000b072:	83 ec 08             	sub    esp,0x8
c000b075:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b079:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b080:	83 f9 19             	cmp    ecx,0x19
c000b083:	77 41                	ja     c000b0c6 <File::close()+0x5a>
c000b085:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b08c:	85 db                	test   ebx,ebx
c000b08e:	74 36                	je     c000b0c6 <File::close()+0x5a>
c000b090:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b097:	74 2d                	je     c000b0c6 <File::close()+0x5a>
c000b099:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b09d:	b8 05 00 00 00       	mov    eax,0x5
c000b0a2:	74 22                	je     c000b0c6 <File::close()+0x5a>
c000b0a4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b0a8:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0af:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0b5:	53                   	push   ebx
c000b0b6:	53                   	push   ebx
c000b0b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b0b9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b0bf:	50                   	push   eax
c000b0c0:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b0c3:	83 c4 10             	add    esp,0x10
c000b0c6:	83 c4 08             	add    esp,0x8
c000b0c9:	5b                   	pop    ebx
c000b0ca:	c3                   	ret    
c000b0cb:	90                   	nop

c000b0cc <File::seek(unsigned long long)>:
c000b0cc:	56                   	push   esi
c000b0cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b0d2:	53                   	push   ebx
c000b0d3:	51                   	push   ecx
c000b0d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0e0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0e7:	83 fa 19             	cmp    edx,0x19
c000b0ea:	77 31                	ja     c000b11d <File::seek(unsigned long long)+0x51>
c000b0ec:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0f3:	85 d2                	test   edx,edx
c000b0f5:	74 26                	je     c000b11d <File::seek(unsigned long long)+0x51>
c000b0f7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0fd:	85 d2                	test   edx,edx
c000b0ff:	74 1c                	je     c000b11d <File::seek(unsigned long long)+0x51>
c000b101:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b105:	b8 05 00 00 00       	mov    eax,0x5
c000b10a:	74 11                	je     c000b11d <File::seek(unsigned long long)+0x51>
c000b10c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b10e:	53                   	push   ebx
c000b10f:	51                   	push   ecx
c000b110:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b116:	52                   	push   edx
c000b117:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b11a:	83 c4 10             	add    esp,0x10
c000b11d:	5a                   	pop    edx
c000b11e:	5b                   	pop    ebx
c000b11f:	5e                   	pop    esi
c000b120:	c3                   	ret    
c000b121:	90                   	nop

c000b122 <File::tell(unsigned long long*)>:
c000b122:	83 ec 0c             	sub    esp,0xc
c000b125:	b8 0b 00 00 00       	mov    eax,0xb
c000b12a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b12e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b135:	83 fa 19             	cmp    edx,0x19
c000b138:	77 34                	ja     c000b16e <File::tell(unsigned long long*)+0x4c>
c000b13a:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b141:	85 d2                	test   edx,edx
c000b143:	74 29                	je     c000b16e <File::tell(unsigned long long*)+0x4c>
c000b145:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b14b:	85 d2                	test   edx,edx
c000b14d:	74 1f                	je     c000b16e <File::tell(unsigned long long*)+0x4c>
c000b14f:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b153:	b8 05 00 00 00       	mov    eax,0x5
c000b158:	74 14                	je     c000b16e <File::tell(unsigned long long*)+0x4c>
c000b15a:	50                   	push   eax
c000b15b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b15d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b161:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b167:	52                   	push   edx
c000b168:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	83 c4 0c             	add    esp,0xc
c000b171:	c3                   	ret    

c000b172 <File::rewind()>:
c000b172:	83 ec 10             	sub    esp,0x10
c000b175:	6a 00                	push   0x0
c000b177:	6a 00                	push   0x0
c000b179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b17d:	e8 4a ff ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c000b182:	83 c4 1c             	add    esp,0x1c
c000b185:	c3                   	ret    

c000b186 <File::unlink()>:
c000b186:	83 ec 0c             	sub    esp,0xc
c000b189:	b8 0b 00 00 00       	mov    eax,0xb
c000b18e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b192:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b199:	83 f9 19             	cmp    ecx,0x19
c000b19c:	77 2f                	ja     c000b1cd <File::unlink()+0x47>
c000b19e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1a5:	85 c9                	test   ecx,ecx
c000b1a7:	74 24                	je     c000b1cd <File::unlink()+0x47>
c000b1a9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1af:	85 c9                	test   ecx,ecx
c000b1b1:	74 1a                	je     c000b1cd <File::unlink()+0x47>
c000b1b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1b7:	b8 06 00 00 00       	mov    eax,0x6
c000b1bc:	75 0f                	jne    c000b1cd <File::unlink()+0x47>
c000b1be:	50                   	push   eax
c000b1bf:	83 c2 0d             	add    edx,0xd
c000b1c2:	50                   	push   eax
c000b1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1c5:	52                   	push   edx
c000b1c6:	51                   	push   ecx
c000b1c7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1ca:	83 c4 10             	add    esp,0x10
c000b1cd:	83 c4 0c             	add    esp,0xc
c000b1d0:	c3                   	ret    
c000b1d1:	90                   	nop

c000b1d2 <File::rename(char const*)>:
c000b1d2:	83 ec 0c             	sub    esp,0xc
c000b1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1e5:	83 f9 19             	cmp    ecx,0x19
c000b1e8:	77 32                	ja     c000b21c <File::rename(char const*)+0x4a>
c000b1ea:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1f1:	85 c9                	test   ecx,ecx
c000b1f3:	74 27                	je     c000b21c <File::rename(char const*)+0x4a>
c000b1f5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1fb:	85 c9                	test   ecx,ecx
c000b1fd:	74 1d                	je     c000b21c <File::rename(char const*)+0x4a>
c000b1ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b203:	b8 06 00 00 00       	mov    eax,0x6
c000b208:	75 12                	jne    c000b21c <File::rename(char const*)+0x4a>
c000b20a:	50                   	push   eax
c000b20b:	83 c2 0d             	add    edx,0xd
c000b20e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b210:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b214:	52                   	push   edx
c000b215:	51                   	push   ecx
c000b216:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	83 c4 0c             	add    esp,0xc
c000b21f:	c3                   	ret    

c000b220 <File::chfatattr(unsigned char, unsigned char)>:
c000b220:	57                   	push   edi
c000b221:	b8 0b 00 00 00       	mov    eax,0xb
c000b226:	56                   	push   esi
c000b227:	53                   	push   ebx
c000b228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b230:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b234:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b23b:	83 f9 19             	cmp    ecx,0x19
c000b23e:	77 37                	ja     c000b277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b240:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b247:	85 c9                	test   ecx,ecx
c000b249:	74 2c                	je     c000b277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b24b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b251:	85 c9                	test   ecx,ecx
c000b253:	74 22                	je     c000b277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b255:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b259:	b8 06 00 00 00       	mov    eax,0x6
c000b25e:	75 17                	jne    c000b277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b260:	89 f0                	mov    eax,esi
c000b262:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b264:	0f b6 db             	movzx  ebx,bl
c000b267:	0f b6 f0             	movzx  esi,al
c000b26a:	83 c2 0d             	add    edx,0xd
c000b26d:	56                   	push   esi
c000b26e:	53                   	push   ebx
c000b26f:	52                   	push   edx
c000b270:	51                   	push   ecx
c000b271:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b274:	83 c4 10             	add    esp,0x10
c000b277:	5b                   	pop    ebx
c000b278:	5e                   	pop    esi
c000b279:	5f                   	pop    edi
c000b27a:	c3                   	ret    
c000b27b:	90                   	nop

c000b27c <File::exists()>:
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	31 c0                	xor    eax,eax
c000b281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b285:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b28c:	83 f9 19             	cmp    ecx,0x19
c000b28f:	77 24                	ja     c000b2b5 <File::exists()+0x39>
c000b291:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b298:	85 c9                	test   ecx,ecx
c000b29a:	74 19                	je     c000b2b5 <File::exists()+0x39>
c000b29c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2a2:	85 c9                	test   ecx,ecx
c000b2a4:	74 0f                	je     c000b2b5 <File::exists()+0x39>
c000b2a6:	50                   	push   eax
c000b2a7:	83 c2 0d             	add    edx,0xd
c000b2aa:	50                   	push   eax
c000b2ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ad:	52                   	push   edx
c000b2ae:	51                   	push   ecx
c000b2af:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2b2:	83 c4 10             	add    esp,0x10
c000b2b5:	83 c4 0c             	add    esp,0xc
c000b2b8:	c3                   	ret    
c000b2b9:	90                   	nop

c000b2ba <File::stat(unsigned long long*, bool*)>:
c000b2ba:	56                   	push   esi
c000b2bb:	53                   	push   ebx
c000b2bc:	50                   	push   eax
c000b2bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b2c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d5:	83 f9 19             	cmp    ecx,0x19
c000b2d8:	77 3d                	ja     c000b317 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2da:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2e1:	85 c9                	test   ecx,ecx
c000b2e3:	74 32                	je     c000b317 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2eb:	85 c9                	test   ecx,ecx
c000b2ed:	74 28                	je     c000b317 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f5:	74 13                	je     c000b30a <File::stat(unsigned long long*, bool*)+0x50>
c000b2f7:	83 ec 04             	sub    esp,0x4
c000b2fa:	56                   	push   esi
c000b2fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b301:	51                   	push   ecx
c000b302:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b305:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b308:	eb 0a                	jmp    c000b314 <File::stat(unsigned long long*, bool*)+0x5a>
c000b30a:	53                   	push   ebx
c000b30b:	83 c2 0d             	add    edx,0xd
c000b30e:	56                   	push   esi
c000b30f:	52                   	push   edx
c000b310:	51                   	push   ecx
c000b311:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b314:	83 c4 10             	add    esp,0x10
c000b317:	5a                   	pop    edx
c000b318:	5b                   	pop    ebx
c000b319:	5e                   	pop    esi
c000b31a:	c3                   	ret    

c000b31b <Fs::setcwd(Process*, char*)>:
c000b31b:	55                   	push   ebp
c000b31c:	57                   	push   edi
c000b31d:	56                   	push   esi
c000b31e:	53                   	push   ebx
c000b31f:	81 ec 20 02 00 00    	sub    esp,0x220
c000b325:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b32c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b332:	57                   	push   edi
c000b333:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b33a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b33e:	56                   	push   esi
c000b33f:	e8 32 fa ff ff       	call   c000ad76 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b344:	89 34 24             	mov    DWORD PTR [esp],esi
c000b347:	e8 34 52 ff ff       	call   c0000580 <strlen>
c000b34c:	83 c4 10             	add    esp,0x10
c000b34f:	83 f8 02             	cmp    eax,0x2
c000b352:	77 15                	ja     c000b369 <Fs::setcwd(Process*, char*)+0x4e>
c000b354:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b359:	83 eb 41             	sub    ebx,0x41
c000b35c:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b363:	85 c0                	test   eax,eax
c000b365:	75 1c                	jne    c000b383 <Fs::setcwd(Process*, char*)+0x68>
c000b367:	eb 2f                	jmp    c000b398 <Fs::setcwd(Process*, char*)+0x7d>
c000b369:	83 ec 0c             	sub    esp,0xc
c000b36c:	56                   	push   esi
c000b36d:	e8 0e 52 ff ff       	call   c0000580 <strlen>
c000b372:	83 c4 10             	add    esp,0x10
c000b375:	83 f8 03             	cmp    eax,0x3
c000b378:	75 57                	jne    c000b3d1 <Fs::setcwd(Process*, char*)+0xb6>
c000b37a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b37f:	75 50                	jne    c000b3d1 <Fs::setcwd(Process*, char*)+0xb6>
c000b381:	eb d1                	jmp    c000b354 <Fs::setcwd(Process*, char*)+0x39>
c000b383:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b38a:	75 0c                	jne    c000b398 <Fs::setcwd(Process*, char*)+0x7d>
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	50                   	push   eax
c000b390:	e8 9f 1d 00 00       	call   c000d134 <LogicalDisk::mount()>
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	83 fb 19             	cmp    ebx,0x19
c000b39b:	b8 03 00 00 00       	mov    eax,0x3
c000b3a0:	0f 87 c6 00 00 00    	ja     c000b46c <Fs::setcwd(Process*, char*)+0x151>
c000b3a6:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3ad:	b8 05 00 00 00       	mov    eax,0x5
c000b3b2:	85 d2                	test   edx,edx
c000b3b4:	0f 84 b2 00 00 00    	je     c000b46c <Fs::setcwd(Process*, char*)+0x151>
c000b3ba:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3c1:	b8 06 00 00 00       	mov    eax,0x6
c000b3c6:	0f 85 92 00 00 00    	jne    c000b45e <Fs::setcwd(Process*, char*)+0x143>
c000b3cc:	e9 9b 00 00 00       	jmp    c000b46c <Fs::setcwd(Process*, char*)+0x151>
c000b3d1:	83 ec 0c             	sub    esp,0xc
c000b3d4:	68 14 01 00 00       	push   0x114
c000b3d9:	e8 ed c6 ff ff       	call   c0007acb <malloc>
c000b3de:	83 c4 0c             	add    esp,0xc
c000b3e1:	55                   	push   ebp
c000b3e2:	56                   	push   esi
c000b3e3:	50                   	push   eax
c000b3e4:	89 c3                	mov    ebx,eax
c000b3e6:	e8 67 fb ff ff       	call   c000af52 <File::File(char const*, Process*)>
c000b3eb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3f0:	83 c4 0c             	add    esp,0xc
c000b3f3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3f7:	50                   	push   eax
c000b3f8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3fc:	50                   	push   eax
c000b3fd:	53                   	push   ebx
c000b3fe:	e8 b7 fe ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	83 f8 02             	cmp    eax,0x2
c000b409:	74 27                	je     c000b432 <Fs::setcwd(Process*, char*)+0x117>
c000b40b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b410:	75 1c                	jne    c000b42e <Fs::setcwd(Process*, char*)+0x113>
c000b412:	85 db                	test   ebx,ebx
c000b414:	b8 02 00 00 00       	mov    eax,0x2
c000b419:	74 51                	je     c000b46c <Fs::setcwd(Process*, char*)+0x151>
c000b41b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41d:	83 ec 0c             	sub    esp,0xc
c000b420:	53                   	push   ebx
c000b421:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	b8 02 00 00 00       	mov    eax,0x2
c000b42c:	eb 3e                	jmp    c000b46c <Fs::setcwd(Process*, char*)+0x151>
c000b42e:	85 c0                	test   eax,eax
c000b430:	74 1c                	je     c000b44e <Fs::setcwd(Process*, char*)+0x133>
c000b432:	85 db                	test   ebx,ebx
c000b434:	b8 01 00 00 00       	mov    eax,0x1
c000b439:	74 31                	je     c000b46c <Fs::setcwd(Process*, char*)+0x151>
c000b43b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43d:	83 ec 0c             	sub    esp,0xc
c000b440:	53                   	push   ebx
c000b441:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b444:	83 c4 10             	add    esp,0x10
c000b447:	b8 01 00 00 00       	mov    eax,0x1
c000b44c:	eb 1e                	jmp    c000b46c <Fs::setcwd(Process*, char*)+0x151>
c000b44e:	85 db                	test   ebx,ebx
c000b450:	74 0c                	je     c000b45e <Fs::setcwd(Process*, char*)+0x143>
c000b452:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	53                   	push   ebx
c000b458:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	50                   	push   eax
c000b45f:	50                   	push   eax
c000b460:	56                   	push   esi
c000b461:	57                   	push   edi
c000b462:	e8 e9 51 ff ff       	call   c0000650 <strcpy>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	31 c0                	xor    eax,eax
c000b46c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b472:	5b                   	pop    ebx
c000b473:	5e                   	pop    esi
c000b474:	5f                   	pop    edi
c000b475:	5d                   	pop    ebp
c000b476:	c3                   	ret    
c000b477:	90                   	nop

c000b478 <Directory::Directory(char const*, Process*)>:
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47f:	83 ec 08             	sub    esp,0x8
c000b482:	6a 00                	push   0x0
c000b484:	50                   	push   eax
c000b485:	e8 2c dd ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000b48a:	83 c4 10             	add    esp,0x10
c000b48d:	ba 5c 03 02 c0       	mov    edx,0xc002035c
c000b492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b496:	89 10                	mov    DWORD PTR [eax],edx
c000b498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b49c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a6:	83 c0 0d             	add    eax,0xd
c000b4a9:	83 ec 04             	sub    esp,0x4
c000b4ac:	52                   	push   edx
c000b4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b1:	50                   	push   eax
c000b4b2:	e8 bf f8 ff ff       	call   c000ad76 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4b7:	83 c4 10             	add    esp,0x10
c000b4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4be:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b4c1:	83 e8 41             	sub    eax,0x41
c000b4c4:	88 c2                	mov    dl,al
c000b4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ca:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4dc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4e2:	0f b6 c0             	movzx  eax,al
c000b4e5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4ec:	85 c0                	test   eax,eax
c000b4ee:	74 3e                	je     c000b52e <Directory::Directory(char const*, Process*)+0xb6>
c000b4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4fa:	0f b6 c0             	movzx  eax,al
c000b4fd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b504:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b50a:	85 c0                	test   eax,eax
c000b50c:	75 20                	jne    c000b52e <Directory::Directory(char const*, Process*)+0xb6>
c000b50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b512:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b518:	0f b6 c0             	movzx  eax,al
c000b51b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b522:	83 ec 0c             	sub    esp,0xc
c000b525:	50                   	push   eax
c000b526:	e8 09 1c 00 00       	call   c000d134 <LogicalDisk::mount()>
c000b52b:	83 c4 10             	add    esp,0x10
c000b52e:	90                   	nop
c000b52f:	83 c4 0c             	add    esp,0xc
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Directory::open()>:
c000b534:	53                   	push   ebx
c000b535:	b8 0b 00 00 00       	mov    eax,0xb
c000b53a:	83 ec 08             	sub    esp,0x8
c000b53d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b541:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b548:	83 fa 19             	cmp    edx,0x19
c000b54b:	77 3d                	ja     c000b58a <Directory::open()+0x56>
c000b54d:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b554:	85 d2                	test   edx,edx
c000b556:	74 32                	je     c000b58a <Directory::open()+0x56>
c000b558:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b55e:	85 d2                	test   edx,edx
c000b560:	74 28                	je     c000b58a <Directory::open()+0x56>
c000b562:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b566:	b8 06 00 00 00       	mov    eax,0x6
c000b56b:	75 1d                	jne    c000b58a <Directory::open()+0x56>
c000b56d:	50                   	push   eax
c000b56e:	8b 02                	mov    eax,DWORD PTR [edx]
c000b570:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b576:	51                   	push   ecx
c000b577:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b57a:	51                   	push   ecx
c000b57b:	52                   	push   edx
c000b57c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	85 c0                	test   eax,eax
c000b584:	75 04                	jne    c000b58a <Directory::open()+0x56>
c000b586:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b58a:	83 c4 08             	add    esp,0x8
c000b58d:	5b                   	pop    ebx
c000b58e:	c3                   	ret    
c000b58f:	90                   	nop

c000b590 <Directory::close()>:
c000b590:	53                   	push   ebx
c000b591:	b8 0b 00 00 00       	mov    eax,0xb
c000b596:	83 ec 08             	sub    esp,0x8
c000b599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b59d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5a4:	83 f9 19             	cmp    ecx,0x19
c000b5a7:	77 41                	ja     c000b5ea <Directory::close()+0x5a>
c000b5a9:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5b0:	85 db                	test   ebx,ebx
c000b5b2:	74 36                	je     c000b5ea <Directory::close()+0x5a>
c000b5b4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5bb:	74 2d                	je     c000b5ea <Directory::close()+0x5a>
c000b5bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5c1:	b8 05 00 00 00       	mov    eax,0x5
c000b5c6:	74 22                	je     c000b5ea <Directory::close()+0x5a>
c000b5c8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b5cc:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5d3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5d9:	53                   	push   ebx
c000b5da:	53                   	push   ebx
c000b5db:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5dd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b5e3:	50                   	push   eax
c000b5e4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	83 c4 08             	add    esp,0x8
c000b5ed:	5b                   	pop    ebx
c000b5ee:	c3                   	ret    
c000b5ef:	90                   	nop

c000b5f0 <Directory::unlink()>:
c000b5f0:	83 ec 0c             	sub    esp,0xc
c000b5f3:	b8 0b 00 00 00       	mov    eax,0xb
c000b5f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b603:	83 f9 19             	cmp    ecx,0x19
c000b606:	77 2f                	ja     c000b637 <Directory::unlink()+0x47>
c000b608:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b60f:	85 c9                	test   ecx,ecx
c000b611:	74 24                	je     c000b637 <Directory::unlink()+0x47>
c000b613:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b619:	85 c9                	test   ecx,ecx
c000b61b:	74 1a                	je     c000b637 <Directory::unlink()+0x47>
c000b61d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b621:	b8 06 00 00 00       	mov    eax,0x6
c000b626:	75 0f                	jne    c000b637 <Directory::unlink()+0x47>
c000b628:	50                   	push   eax
c000b629:	83 c2 0d             	add    edx,0xd
c000b62c:	50                   	push   eax
c000b62d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b62f:	52                   	push   edx
c000b630:	51                   	push   ecx
c000b631:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b634:	83 c4 10             	add    esp,0x10
c000b637:	83 c4 0c             	add    esp,0xc
c000b63a:	c3                   	ret    
c000b63b:	90                   	nop

c000b63c <Directory::rename(char const*)>:
c000b63c:	83 ec 0c             	sub    esp,0xc
c000b63f:	b8 0b 00 00 00       	mov    eax,0xb
c000b644:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b648:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b64f:	83 f9 19             	cmp    ecx,0x19
c000b652:	77 32                	ja     c000b686 <Directory::rename(char const*)+0x4a>
c000b654:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b65b:	85 c9                	test   ecx,ecx
c000b65d:	74 27                	je     c000b686 <Directory::rename(char const*)+0x4a>
c000b65f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b665:	85 c9                	test   ecx,ecx
c000b667:	74 1d                	je     c000b686 <Directory::rename(char const*)+0x4a>
c000b669:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b66d:	b8 06 00 00 00       	mov    eax,0x6
c000b672:	75 12                	jne    c000b686 <Directory::rename(char const*)+0x4a>
c000b674:	50                   	push   eax
c000b675:	83 c2 0d             	add    edx,0xd
c000b678:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b67a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b67e:	52                   	push   edx
c000b67f:	51                   	push   ecx
c000b680:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b683:	83 c4 10             	add    esp,0x10
c000b686:	83 c4 0c             	add    esp,0xc
c000b689:	c3                   	ret    

c000b68a <Directory::exists()>:
c000b68a:	83 ec 0c             	sub    esp,0xc
c000b68d:	31 c0                	xor    eax,eax
c000b68f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b693:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b69a:	83 f9 19             	cmp    ecx,0x19
c000b69d:	77 24                	ja     c000b6c3 <Directory::exists()+0x39>
c000b69f:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6a6:	85 c9                	test   ecx,ecx
c000b6a8:	74 19                	je     c000b6c3 <Directory::exists()+0x39>
c000b6aa:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6b0:	85 c9                	test   ecx,ecx
c000b6b2:	74 0f                	je     c000b6c3 <Directory::exists()+0x39>
c000b6b4:	50                   	push   eax
c000b6b5:	83 c2 0d             	add    edx,0xd
c000b6b8:	50                   	push   eax
c000b6b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6bb:	52                   	push   edx
c000b6bc:	51                   	push   ecx
c000b6bd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6c0:	83 c4 10             	add    esp,0x10
c000b6c3:	83 c4 0c             	add    esp,0xc
c000b6c6:	c3                   	ret    
c000b6c7:	90                   	nop

c000b6c8 <Directory::read(dirent*)>:
c000b6c8:	83 ec 1c             	sub    esp,0x1c
c000b6cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b6d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b6d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6db:	83 f9 19             	cmp    ecx,0x19
c000b6de:	77 30                	ja     c000b710 <Directory::read(dirent*)+0x48>
c000b6e0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6e7:	85 c9                	test   ecx,ecx
c000b6e9:	74 25                	je     c000b710 <Directory::read(dirent*)+0x48>
c000b6eb:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b6f2:	74 1c                	je     c000b710 <Directory::read(dirent*)+0x48>
c000b6f4:	83 ec 0c             	sub    esp,0xc
c000b6f7:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6f9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6fd:	51                   	push   ecx
c000b6fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b702:	6a 00                	push   0x0
c000b704:	68 10 01 00 00       	push   0x110
c000b709:	52                   	push   edx
c000b70a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b70d:	83 c4 20             	add    esp,0x20
c000b710:	83 c4 1c             	add    esp,0x1c
c000b713:	c3                   	ret    

c000b714 <Directory::create()>:
c000b714:	83 ec 0c             	sub    esp,0xc
c000b717:	b8 0b 00 00 00       	mov    eax,0xb
c000b71c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b720:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b727:	83 f9 19             	cmp    ecx,0x19
c000b72a:	77 2f                	ja     c000b75b <Directory::create()+0x47>
c000b72c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b733:	85 c9                	test   ecx,ecx
c000b735:	74 24                	je     c000b75b <Directory::create()+0x47>
c000b737:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b73d:	85 c9                	test   ecx,ecx
c000b73f:	74 1a                	je     c000b75b <Directory::create()+0x47>
c000b741:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b745:	b8 06 00 00 00       	mov    eax,0x6
c000b74a:	75 0f                	jne    c000b75b <Directory::create()+0x47>
c000b74c:	50                   	push   eax
c000b74d:	83 c2 0d             	add    edx,0xd
c000b750:	50                   	push   eax
c000b751:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b753:	52                   	push   edx
c000b754:	51                   	push   ecx
c000b755:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b758:	83 c4 10             	add    esp,0x10
c000b75b:	83 c4 0c             	add    esp,0xc
c000b75e:	c3                   	ret    
c000b75f:	90                   	nop

c000b760 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b760:	b8 0a 00 00 00       	mov    eax,0xa
c000b765:	c3                   	ret    
c000b766:	66 90                	xchg   ax,ax

c000b768 <Bus::Bus(char const*)>:
c000b768:	83 ec 0c             	sub    esp,0xc
c000b76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76f:	83 ec 08             	sub    esp,0x8
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	50                   	push   eax
c000b777:	e8 28 08 00 00       	call   c000bfa4 <Device::Device(char const*)>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	ba 78 03 02 c0       	mov    edx,0xc0020378
c000b784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b788:	89 10                	mov    DWORD PTR [eax],edx
c000b78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b798:	90                   	nop
c000b799:	83 c4 0c             	add    esp,0xc
c000b79c:	c3                   	ret    
c000b79d:	90                   	nop
c000b79e:	66 90                	xchg   ax,ax

c000b7a0 <Bus::~Bus()>:
c000b7a0:	83 ec 0c             	sub    esp,0xc
c000b7a3:	ba 78 03 02 c0       	mov    edx,0xc0020378
c000b7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ac:	89 10                	mov    DWORD PTR [eax],edx
c000b7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b2:	83 ec 0c             	sub    esp,0xc
c000b7b5:	50                   	push   eax
c000b7b6:	e8 53 05 00 00       	call   c000bd0e <Device::~Device()>
c000b7bb:	83 c4 10             	add    esp,0x10
c000b7be:	90                   	nop
c000b7bf:	83 c4 0c             	add    esp,0xc
c000b7c2:	c3                   	ret    
c000b7c3:	90                   	nop

c000b7c4 <Bus::~Bus()>:
c000b7c4:	83 ec 0c             	sub    esp,0xc
c000b7c7:	83 ec 0c             	sub    esp,0xc
c000b7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ce:	e8 cd ff ff ff       	call   c000b7a0 <Bus::~Bus()>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	83 ec 08             	sub    esp,0x8
c000b7d9:	68 58 01 00 00       	push   0x158
c000b7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e2:	e8 c5 f0 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	83 c4 0c             	add    esp,0xc
c000b7ed:	c3                   	ret    

c000b7ee <beepThread(void*)>:
c000b7ee:	83 ec 0c             	sub    esp,0xc
c000b7f1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7fa:	48                   	dec    eax
c000b7fb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b800:	75 01                	jne    c000b803 <beepThread(void*)+0x15>
c000b802:	fb                   	sti    
c000b803:	6b c2 0a             	imul   eax,edx,0xa
c000b806:	83 ec 0c             	sub    esp,0xc
c000b809:	50                   	push   eax
c000b80a:	e8 7d 9b 00 00       	call   c001538c <milliTenthSleep(unsigned int)>
c000b80f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b816:	e8 54 ba 00 00       	call   c001726f <HalMakeBeep(int)>
c000b81b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b823:	83 c4 1c             	add    esp,0x1c
c000b826:	e9 45 9a 00 00       	jmp    c0015270 <blockTask(TaskState)>

c000b82b <Krnl::beep(int, int, bool)>:
c000b82b:	56                   	push   esi
c000b82c:	53                   	push   ebx
c000b82d:	83 ec 10             	sub    esp,0x10
c000b830:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b834:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	e8 2e ba 00 00       	call   c001726f <HalMakeBeep(int)>
c000b841:	89 f0                	mov    eax,esi
c000b843:	83 c4 10             	add    esp,0x10
c000b846:	84 c0                	test   al,al
c000b848:	74 1e                	je     c000b868 <Krnl::beep(int, int, bool)+0x3d>
c000b84a:	6b db 0a             	imul   ebx,ebx,0xa
c000b84d:	83 ec 0c             	sub    esp,0xc
c000b850:	53                   	push   ebx
c000b851:	e8 36 9b 00 00       	call   c001538c <milliTenthSleep(unsigned int)>
c000b856:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b85e:	83 c4 14             	add    esp,0x14
c000b861:	5b                   	pop    ebx
c000b862:	5e                   	pop    esi
c000b863:	e9 07 ba 00 00       	jmp    c001726f <HalMakeBeep(int)>
c000b868:	68 e6 00 00 00       	push   0xe6
c000b86d:	53                   	push   ebx
c000b86e:	68 ee b7 00 c0       	push   0xc000b7ee
c000b873:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b879:	e8 a6 95 00 00       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c000b87e:	83 c4 14             	add    esp,0x14
c000b881:	5b                   	pop    ebx
c000b882:	5e                   	pop    esi
c000b883:	c3                   	ret    

c000b884 <User::loadClockSettings(int)>:
c000b884:	53                   	push   ebx
c000b885:	83 ec 14             	sub    esp,0x14
c000b888:	68 14 01 00 00       	push   0x114
c000b88d:	e8 39 c2 ff ff       	call   c0007acb <malloc>
c000b892:	83 c4 0c             	add    esp,0xc
c000b895:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b89b:	68 9c 03 02 c0       	push   0xc002039c
c000b8a0:	50                   	push   eax
c000b8a1:	89 c3                	mov    ebx,eax
c000b8a3:	e8 aa f6 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c000b8a8:	58                   	pop    eax
c000b8a9:	5a                   	pop    edx
c000b8aa:	6a 01                	push   0x1
c000b8ac:	53                   	push   ebx
c000b8ad:	e8 5c f7 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c000b8b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8b5:	e8 b2 f7 ff ff       	call   c000b06c <File::close()>
c000b8ba:	83 c4 10             	add    esp,0x10
c000b8bd:	85 db                	test   ebx,ebx
c000b8bf:	74 0f                	je     c000b8d0 <User::loadClockSettings(int)+0x4c>
c000b8c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8ca:	83 c4 08             	add    esp,0x8
c000b8cd:	5b                   	pop    ebx
c000b8ce:	ff e0                	jmp    eax
c000b8d0:	83 c4 08             	add    esp,0x8
c000b8d3:	5b                   	pop    ebx
c000b8d4:	c3                   	ret    
c000b8d5:	90                   	nop

c000b8d6 <Clock::Clock(char const*)>:
c000b8d6:	83 ec 0c             	sub    esp,0xc
c000b8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8dd:	83 ec 08             	sub    esp,0x8
c000b8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e4:	50                   	push   eax
c000b8e5:	e8 ba 06 00 00       	call   c000bfa4 <Device::Device(char const*)>
c000b8ea:	83 c4 10             	add    esp,0x10
c000b8ed:	ba c4 03 02 c0       	mov    edx,0xc00203c4
c000b8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f6:	89 10                	mov    DWORD PTR [eax],edx
c000b8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b906:	90                   	nop
c000b907:	83 c4 0c             	add    esp,0xc
c000b90a:	c3                   	ret    
c000b90b:	90                   	nop

c000b90c <Clock::~Clock()>:
c000b90c:	83 ec 0c             	sub    esp,0xc
c000b90f:	ba c4 03 02 c0       	mov    edx,0xc00203c4
c000b914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b918:	89 10                	mov    DWORD PTR [eax],edx
c000b91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91e:	83 ec 0c             	sub    esp,0xc
c000b921:	50                   	push   eax
c000b922:	e8 e7 03 00 00       	call   c000bd0e <Device::~Device()>
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	90                   	nop
c000b92b:	83 c4 0c             	add    esp,0xc
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Clock::~Clock()>:
c000b930:	83 ec 0c             	sub    esp,0xc
c000b933:	83 ec 0c             	sub    esp,0xc
c000b936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93a:	e8 cd ff ff ff       	call   c000b90c <Clock::~Clock()>
c000b93f:	83 c4 10             	add    esp,0x10
c000b942:	83 ec 08             	sub    esp,0x8
c000b945:	68 58 01 00 00       	push   0x158
c000b94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94e:	e8 59 ef ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000b953:	83 c4 10             	add    esp,0x10
c000b956:	83 c4 0c             	add    esp,0xc
c000b959:	c3                   	ret    

c000b95a <Clock::timeInSecondsLocal()>:
c000b95a:	53                   	push   ebx
c000b95b:	83 ec 14             	sub    esp,0x14
c000b95e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b962:	8b 10                	mov    edx,DWORD PTR [eax]
c000b964:	50                   	push   eax
c000b965:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b968:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b96f:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b975:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b97b:	89 cb                	mov    ebx,ecx
c000b97d:	c1 fb 1f             	sar    ebx,0x1f
c000b980:	01 c8                	add    eax,ecx
c000b982:	11 da                	adc    edx,ebx
c000b984:	83 c4 10             	add    esp,0x10
c000b987:	31 c9                	xor    ecx,ecx
c000b989:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b990:	74 05                	je     c000b997 <Clock::timeInSecondsLocal()+0x3d>
c000b992:	b9 08 07 00 00       	mov    ecx,0x708
c000b997:	31 db                	xor    ebx,ebx
c000b999:	01 c8                	add    eax,ecx
c000b99b:	11 da                	adc    edx,ebx
c000b99d:	83 c4 08             	add    esp,0x8
c000b9a0:	5b                   	pop    ebx
c000b9a1:	c3                   	ret    

c000b9a2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b9a2:	57                   	push   edi
c000b9a3:	56                   	push   esi
c000b9a4:	53                   	push   ebx
c000b9a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9b3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9b6:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9bd:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9c3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9c9:	99                   	cdq    
c000b9ca:	29 c6                	sub    esi,eax
c000b9cc:	19 d7                	sbb    edi,edx
c000b9ce:	89 f0                	mov    eax,esi
c000b9d0:	31 f6                	xor    esi,esi
c000b9d2:	89 fa                	mov    edx,edi
c000b9d4:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9db:	74 05                	je     c000b9e2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9dd:	be 08 07 00 00       	mov    esi,0x708
c000b9e2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9e6:	31 ff                	xor    edi,edi
c000b9e8:	29 f0                	sub    eax,esi
c000b9ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9ee:	19 fa                	sbb    edx,edi
c000b9f0:	89 d8                	mov    eax,ebx
c000b9f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9f6:	5b                   	pop    ebx
c000b9f7:	5e                   	pop    esi
c000b9f8:	5f                   	pop    edi
c000b9f9:	ff e0                	jmp    eax

c000b9fb <datetimeToSeconds(datetime_t)>:
c000b9fb:	55                   	push   ebp
c000b9fc:	57                   	push   edi
c000b9fd:	56                   	push   esi
c000b9fe:	53                   	push   ebx
c000b9ff:	83 ec 0c             	sub    esp,0xc
c000ba02:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba0a:	89 f7                	mov    edi,esi
c000ba0c:	89 f0                	mov    eax,esi
c000ba0e:	0f b6 cf             	movzx  ecx,bh
c000ba11:	0f b6 c4             	movzx  eax,ah
c000ba14:	c1 ef 10             	shr    edi,0x10
c000ba17:	89 da                	mov    edx,ebx
c000ba19:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000ba1c:	89 f9                	mov    ecx,edi
c000ba1e:	0f b6 f9             	movzx  edi,cl
c000ba21:	89 f1                	mov    ecx,esi
c000ba23:	6b c0 3c             	imul   eax,eax,0x3c
c000ba26:	0f b6 f1             	movzx  esi,cl
c000ba29:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000ba2f:	0f b6 db             	movzx  ebx,bl
c000ba32:	c1 ea 10             	shr    edx,0x10
c000ba35:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000ba3b:	01 f8                	add    eax,edi
c000ba3d:	01 f0                	add    eax,esi
c000ba3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba42:	c1 f8 1f             	sar    eax,0x1f
c000ba45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba49:	89 e8                	mov    eax,ebp
c000ba4b:	0f b6 c0             	movzx  eax,al
c000ba4e:	8b 0c 85 00 04 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfc00]
c000ba55:	83 f8 01             	cmp    eax,0x1
c000ba58:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000ba5c:	0f b7 da             	movzx  ebx,dx
c000ba5f:	76 27                	jbe    c000ba88 <datetimeToSeconds(datetime_t)+0x8d>
c000ba61:	80 e2 03             	and    dl,0x3
c000ba64:	75 22                	jne    c000ba88 <datetimeToSeconds(datetime_t)+0x8d>
c000ba66:	31 d2                	xor    edx,edx
c000ba68:	be 64 00 00 00       	mov    esi,0x64
c000ba6d:	89 d8                	mov    eax,ebx
c000ba6f:	f7 f6                	div    esi
c000ba71:	85 d2                	test   edx,edx
c000ba73:	75 12                	jne    c000ba87 <datetimeToSeconds(datetime_t)+0x8c>
c000ba75:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba7b:	be 90 01 00 00       	mov    esi,0x190
c000ba80:	99                   	cdq    
c000ba81:	f7 fe                	idiv   esi
c000ba83:	85 d2                	test   edx,edx
c000ba85:	75 01                	jne    c000ba88 <datetimeToSeconds(datetime_t)+0x8d>
c000ba87:	41                   	inc    ecx
c000ba88:	83 fb 46             	cmp    ebx,0x46
c000ba8b:	76 48                	jbe    c000bad5 <datetimeToSeconds(datetime_t)+0xda>
c000ba8d:	be 46 00 00 00       	mov    esi,0x46
c000ba92:	bf 64 00 00 00       	mov    edi,0x64
c000ba97:	bd 90 01 00 00       	mov    ebp,0x190
c000ba9c:	f7 c6 03 00 00 00    	test   esi,0x3
c000baa2:	b8 6d 01 00 00       	mov    eax,0x16d
c000baa7:	75 23                	jne    c000bacc <datetimeToSeconds(datetime_t)+0xd1>
c000baa9:	89 f0                	mov    eax,esi
c000baab:	99                   	cdq    
c000baac:	f7 ff                	idiv   edi
c000baae:	b8 6e 01 00 00       	mov    eax,0x16e
c000bab3:	85 d2                	test   edx,edx
c000bab5:	75 15                	jne    c000bacc <datetimeToSeconds(datetime_t)+0xd1>
c000bab7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000babd:	99                   	cdq    
c000babe:	f7 fd                	idiv   ebp
c000bac0:	83 fa 01             	cmp    edx,0x1
c000bac3:	19 c0                	sbb    eax,eax
c000bac5:	f7 d0                	not    eax
c000bac7:	05 6e 01 00 00       	add    eax,0x16e
c000bacc:	46                   	inc    esi
c000bacd:	01 c1                	add    ecx,eax
c000bacf:	39 de                	cmp    esi,ebx
c000bad1:	7c c9                	jl     c000ba9c <datetimeToSeconds(datetime_t)+0xa1>
c000bad3:	eb 34                	jmp    c000bb09 <datetimeToSeconds(datetime_t)+0x10e>
c000bad5:	74 32                	je     c000bb09 <datetimeToSeconds(datetime_t)+0x10e>
c000bad7:	b8 45 00 00 00       	mov    eax,0x45
c000badc:	89 c2                	mov    edx,eax
c000bade:	83 e2 03             	and    edx,0x3
c000bae1:	39 d8                	cmp    eax,ebx
c000bae3:	7e 0f                	jle    c000baf4 <datetimeToSeconds(datetime_t)+0xf9>
c000bae5:	83 fa 01             	cmp    edx,0x1
c000bae8:	19 d2                	sbb    edx,edx
c000baea:	48                   	dec    eax
c000baeb:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000baf2:	eb e8                	jmp    c000badc <datetimeToSeconds(datetime_t)+0xe1>
c000baf4:	85 d2                	test   edx,edx
c000baf6:	b8 6d 01 00 00       	mov    eax,0x16d
c000bafb:	75 0a                	jne    c000bb07 <datetimeToSeconds(datetime_t)+0x10c>
c000bafd:	83 fb 01             	cmp    ebx,0x1
c000bb00:	19 c0                	sbb    eax,eax
c000bb02:	05 6e 01 00 00       	add    eax,0x16e
c000bb07:	29 c1                	sub    ecx,eax
c000bb09:	b8 80 51 01 00       	mov    eax,0x15180
c000bb0e:	f7 e9                	imul   ecx
c000bb10:	03 04 24             	add    eax,DWORD PTR [esp]
c000bb13:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb17:	83 c4 0c             	add    esp,0xc
c000bb1a:	5b                   	pop    ebx
c000bb1b:	5e                   	pop    esi
c000bb1c:	5f                   	pop    edi
c000bb1d:	5d                   	pop    ebp
c000bb1e:	c3                   	ret    
c000bb1f:	90                   	nop

c000bb20 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb20:	57                   	push   edi
c000bb21:	56                   	push   esi
c000bb22:	53                   	push   ebx
c000bb23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb27:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb29:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb34:	e8 c2 fe ff ff       	call   c000b9fb <datetimeToSeconds(datetime_t)>
c000bb39:	59                   	pop    ecx
c000bb3a:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb41:	5b                   	pop    ebx
c000bb42:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb48:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb4e:	89 cb                	mov    ebx,ecx
c000bb50:	c1 fb 1f             	sar    ebx,0x1f
c000bb53:	29 c8                	sub    eax,ecx
c000bb55:	19 da                	sbb    edx,ebx
c000bb57:	31 c9                	xor    ecx,ecx
c000bb59:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb60:	74 05                	je     c000bb67 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb62:	b9 08 07 00 00       	mov    ecx,0x708
c000bb67:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb6b:	31 db                	xor    ebx,ebx
c000bb6d:	29 c8                	sub    eax,ecx
c000bb6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb73:	19 da                	sbb    edx,ebx
c000bb75:	89 f8                	mov    eax,edi
c000bb77:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb7b:	5b                   	pop    ebx
c000bb7c:	5e                   	pop    esi
c000bb7d:	5f                   	pop    edi
c000bb7e:	ff e0                	jmp    eax

c000bb80 <secondsToDatetime(unsigned long long)>:
c000bb80:	55                   	push   ebp
c000bb81:	57                   	push   edi
c000bb82:	56                   	push   esi
c000bb83:	53                   	push   ebx
c000bb84:	83 ec 1c             	sub    esp,0x1c
c000bb87:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb8b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb93:	6a 00                	push   0x0
c000bb95:	68 80 51 01 00       	push   0x15180
c000bb9a:	55                   	push   ebp
c000bb9b:	57                   	push   edi
c000bb9c:	e8 9f 2a 01 00       	call   c001e640 <__udivdi3>
c000bba1:	83 c4 10             	add    esp,0x10
c000bba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bba8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bbae:	6a 00                	push   0x0
c000bbb0:	68 80 51 01 00       	push   0x15180
c000bbb5:	55                   	push   ebp
c000bbb6:	57                   	push   edi
c000bbb7:	bf 10 0e 00 00       	mov    edi,0xe10
c000bbbc:	e8 7f 2b 01 00       	call   c001e740 <__umoddi3>
c000bbc1:	83 c4 10             	add    esp,0x10
c000bbc4:	99                   	cdq    
c000bbc5:	f7 ff                	idiv   edi
c000bbc7:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbcc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbcf:	89 d0                	mov    eax,edx
c000bbd1:	99                   	cdq    
c000bbd2:	f7 ff                	idiv   edi
c000bbd4:	85 db                	test   ebx,ebx
c000bbd6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbd9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbdc:	79 11                	jns    c000bbef <secondsToDatetime(unsigned long long)+0x6f>
c000bbde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbe2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbe8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbed:	eb 07                	jmp    c000bbf6 <secondsToDatetime(unsigned long long)+0x76>
c000bbef:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbf4:	89 d8                	mov    eax,ebx
c000bbf6:	99                   	cdq    
c000bbf7:	bf b4 05 00 00       	mov    edi,0x5b4
c000bbfc:	f7 f9                	idiv   ecx
c000bbfe:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bc03:	31 d2                	xor    edx,edx
c000bc05:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bc0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc0e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc16:	01 c3                	add    ebx,eax
c000bc18:	89 d8                	mov    eax,ebx
c000bc1a:	f7 f1                	div    ecx
c000bc1c:	31 d2                	xor    edx,edx
c000bc1e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc21:	89 d8                	mov    eax,ebx
c000bc23:	f7 f7                	div    edi
c000bc25:	31 d2                	xor    edx,edx
c000bc27:	29 c1                	sub    ecx,eax
c000bc29:	89 d8                	mov    eax,ebx
c000bc2b:	f7 f5                	div    ebp
c000bc2d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc32:	31 d2                	xor    edx,edx
c000bc34:	29 c1                	sub    ecx,eax
c000bc36:	89 c8                	mov    eax,ecx
c000bc38:	f7 f5                	div    ebp
c000bc3a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc3f:	31 d2                	xor    edx,edx
c000bc41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc45:	89 c8                	mov    eax,ecx
c000bc47:	f7 f5                	div    ebp
c000bc49:	31 d2                	xor    edx,edx
c000bc4b:	01 c3                	add    ebx,eax
c000bc4d:	89 c8                	mov    eax,ecx
c000bc4f:	f7 f7                	div    edi
c000bc51:	bf 99 00 00 00       	mov    edi,0x99
c000bc56:	31 d2                	xor    edx,edx
c000bc58:	29 c3                	sub    ebx,eax
c000bc5a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc62:	29 c3                	sub    ebx,eax
c000bc64:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc67:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc6a:	83 c1 02             	add    ecx,0x2
c000bc6d:	89 c8                	mov    eax,ecx
c000bc6f:	bb 05 00 00 00       	mov    ebx,0x5
c000bc74:	f7 f7                	div    edi
c000bc76:	31 d2                	xor    edx,edx
c000bc78:	89 c7                	mov    edi,eax
c000bc7a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc80:	83 c0 02             	add    eax,0x2
c000bc83:	f7 f3                	div    ebx
c000bc85:	89 eb                	mov    ebx,ebp
c000bc87:	29 c3                	sub    ebx,eax
c000bc89:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc8f:	88 1e                	mov    BYTE PTR [esi],bl
c000bc91:	19 c0                	sbb    eax,eax
c000bc93:	31 d2                	xor    edx,edx
c000bc95:	83 e0 0c             	and    eax,0xc
c000bc98:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc9c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bca4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bca8:	83 f9 01             	cmp    ecx,0x1
c000bcab:	0f 96 c2             	setbe  dl
c000bcae:	41                   	inc    ecx
c000bcaf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bcb2:	01 d0                	add    eax,edx
c000bcb4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bcb8:	83 c4 1c             	add    esp,0x1c
c000bcbb:	89 f0                	mov    eax,esi
c000bcbd:	5b                   	pop    ebx
c000bcbe:	5e                   	pop    esi
c000bcbf:	5f                   	pop    edi
c000bcc0:	5d                   	pop    ebp
c000bcc1:	c2 04 00             	ret    0x4

c000bcc4 <Clock::timeInDatetimeLocal()>:
c000bcc4:	53                   	push   ebx
c000bcc5:	83 ec 14             	sub    esp,0x14
c000bcc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bccc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcd0:	e8 85 fc ff ff       	call   c000b95a <Clock::timeInSecondsLocal()>
c000bcd5:	83 c4 0c             	add    esp,0xc
c000bcd8:	52                   	push   edx
c000bcd9:	50                   	push   eax
c000bcda:	53                   	push   ebx
c000bcdb:	e8 a0 fe ff ff       	call   c000bb80 <secondsToDatetime(unsigned long long)>
c000bce0:	89 d8                	mov    eax,ebx
c000bce2:	83 c4 14             	add    esp,0x14
c000bce5:	5b                   	pop    ebx
c000bce6:	c2 04 00             	ret    0x4
c000bce9:	90                   	nop

c000bcea <Device::hibernate()>:
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <Device::wake()>:
c000bcec:	c3                   	ret    
c000bced:	90                   	nop

c000bcee <Device::detect()>:
c000bcee:	c3                   	ret    
c000bcef:	90                   	nop

c000bcf0 <Device::disableLegacy()>:
c000bcf0:	c3                   	ret    
c000bcf1:	90                   	nop

c000bcf2 <Device::powerSaving(PowerSavingLevel)>:
c000bcf2:	c3                   	ret    
c000bcf3:	90                   	nop

c000bcf4 <DriverlessDevice::close(int, int, void*)>:
c000bcf4:	31 c0                	xor    eax,eax
c000bcf6:	c3                   	ret    
c000bcf7:	90                   	nop

c000bcf8 <DriverlessDevice::detect()>:
c000bcf8:	c3                   	ret    
c000bcf9:	90                   	nop

c000bcfa <DriverlessDevice::open(int, int, void*)>:
c000bcfa:	83 ec 18             	sub    esp,0x18
c000bcfd:	68 30 04 02 c0       	push   0xc0020430
c000bd02:	e8 6e 4b 00 00       	call   c0010875 <KePanic(char const*)>
c000bd07:	83 c8 ff             	or     eax,0xffffffff
c000bd0a:	83 c4 1c             	add    esp,0x1c
c000bd0d:	c3                   	ret    

c000bd0e <Device::~Device()>:
c000bd0e:	ba 90 04 02 c0       	mov    edx,0xc0020490
c000bd13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd17:	89 10                	mov    DWORD PTR [eax],edx
c000bd19:	90                   	nop
c000bd1a:	c3                   	ret    
c000bd1b:	90                   	nop

c000bd1c <Device::~Device()>:
c000bd1c:	83 ec 0c             	sub    esp,0xc
c000bd1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bd23:	e8 e6 ff ff ff       	call   c000bd0e <Device::~Device()>
c000bd28:	83 c4 04             	add    esp,0x4
c000bd2b:	83 ec 08             	sub    esp,0x8
c000bd2e:	68 58 01 00 00       	push   0x158
c000bd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd37:	e8 70 eb ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000bd3c:	83 c4 10             	add    esp,0x10
c000bd3f:	83 c4 0c             	add    esp,0xc
c000bd42:	c3                   	ret    
c000bd43:	90                   	nop

c000bd44 <Device::findAndLoadDriver()>:
c000bd44:	c7 44 24 04 4e 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc002044e
c000bd4c:	e9 59 ec ff ff       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)>
c000bd51:	90                   	nop

c000bd52 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd52:	57                   	push   edi
c000bd53:	b9 09 00 00 00       	mov    ecx,0x9
c000bd58:	56                   	push   esi
c000bd59:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd5d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd61:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd6b:	81 c7 18 01 00 00    	add    edi,0x118
c000bd71:	fc                   	cld    
c000bd72:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd74:	5e                   	pop    esi
c000bd75:	5f                   	pop    edi
c000bd76:	c3                   	ret    
c000bd77:	90                   	nop

c000bd78 <Device::preOpenACPI(void*, char*, char*)>:
c000bd78:	57                   	push   edi
c000bd79:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd7e:	56                   	push   esi
c000bd7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd8b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd95:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd9b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bda1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bda3:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bda9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdad:	b9 0e 00 00 00       	mov    ecx,0xe
c000bdb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdb4:	5e                   	pop    esi
c000bdb5:	5f                   	pop    edi
c000bdb6:	c3                   	ret    
c000bdb7:	90                   	nop

c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bdb8:	53                   	push   ebx
c000bdb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bdc9:	0f b6 c0             	movzx  eax,al
c000bdcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdd4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bdd8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bddc:	5b                   	pop    ebx
c000bddd:	e9 aa 05 00 00       	jmp    c000c38c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bde2 <Device::getParent()>:
c000bde2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bde6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bdec:	c3                   	ret    
c000bded:	90                   	nop

c000bdee <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bdee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bdf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdf6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bdfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be07:	e9 f7 06 00 00       	jmp    c000c503 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000be0c <Device::addChild(Device*)>:
c000be0c:	53                   	push   ebx
c000be0d:	83 ec 08             	sub    esp,0x8
c000be10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be18:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be1e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be24:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be26:	85 d2                	test   edx,edx
c000be28:	74 04                	je     c000be2e <Device::addChild(Device*)+0x22>
c000be2a:	89 d3                	mov    ebx,edx
c000be2c:	eb f6                	jmp    c000be24 <Device::addChild(Device*)+0x18>
c000be2e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be31:	83 ec 0c             	sub    esp,0xc
c000be34:	6a 08                	push   0x8
c000be36:	e8 90 bc ff ff       	call   c0007acb <malloc>
c000be3b:	89 03                	mov    DWORD PTR [ebx],eax
c000be3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be4a:	83 c4 18             	add    esp,0x18
c000be4d:	5b                   	pop    ebx
c000be4e:	c3                   	ret    
c000be4f:	90                   	nop

c000be50 <Device::removeAllChildren()>:
c000be50:	56                   	push   esi
c000be51:	53                   	push   ebx
c000be52:	52                   	push   edx
c000be53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be57:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be60:	74 17                	je     c000be79 <Device::removeAllChildren()+0x29>
c000be62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be65:	85 c0                	test   eax,eax
c000be67:	74 0c                	je     c000be75 <Device::removeAllChildren()+0x25>
c000be69:	8b 10                	mov    edx,DWORD PTR [eax]
c000be6b:	83 ec 0c             	sub    esp,0xc
c000be6e:	50                   	push   eax
c000be6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be72:	83 c4 10             	add    esp,0x10
c000be75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be77:	eb e4                	jmp    c000be5d <Device::removeAllChildren()+0xd>
c000be79:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be85:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be92:	58                   	pop    eax
c000be93:	5b                   	pop    ebx
c000be94:	5e                   	pop    esi
c000be95:	c3                   	ret    

c000be96 <Device::hibernateAll()>:
c000be96:	53                   	push   ebx
c000be97:	83 ec 14             	sub    esp,0x14
c000be9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bea0:	53                   	push   ebx
c000bea1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bea4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beb0:	74 0f                	je     c000bec1 <Device::hibernateAll()+0x2b>
c000beb2:	83 ec 0c             	sub    esp,0xc
c000beb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beb8:	e8 d9 ff ff ff       	call   c000be96 <Device::hibernateAll()>
c000bebd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bebf:	eb e9                	jmp    c000beaa <Device::hibernateAll()+0x14>
c000bec1:	83 c4 08             	add    esp,0x8
c000bec4:	5b                   	pop    ebx
c000bec5:	c3                   	ret    

c000bec6 <Device::wakeAll()>:
c000bec6:	53                   	push   ebx
c000bec7:	83 ec 14             	sub    esp,0x14
c000beca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bece:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bed0:	53                   	push   ebx
c000bed1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bed4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beda:	83 c4 10             	add    esp,0x10
c000bedd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bee0:	74 0f                	je     c000bef1 <Device::wakeAll()+0x2b>
c000bee2:	83 ec 0c             	sub    esp,0xc
c000bee5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bee8:	e8 d9 ff ff ff       	call   c000bec6 <Device::wakeAll()>
c000beed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beef:	eb e9                	jmp    c000beda <Device::wakeAll()+0x14>
c000bef1:	83 c4 08             	add    esp,0x8
c000bef4:	5b                   	pop    ebx
c000bef5:	c3                   	ret    

c000bef6 <Device::detectAll()>:
c000bef6:	53                   	push   ebx
c000bef7:	83 ec 14             	sub    esp,0x14
c000befa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000befe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf00:	53                   	push   ebx
c000bf01:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bf04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf0a:	83 c4 10             	add    esp,0x10
c000bf0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf10:	74 0f                	je     c000bf21 <Device::detectAll()+0x2b>
c000bf12:	83 ec 0c             	sub    esp,0xc
c000bf15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf18:	e8 d9 ff ff ff       	call   c000bef6 <Device::detectAll()>
c000bf1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf1f:	eb e9                	jmp    c000bf0a <Device::detectAll()+0x14>
c000bf21:	83 c4 08             	add    esp,0x8
c000bf24:	5b                   	pop    ebx
c000bf25:	c3                   	ret    

c000bf26 <Device::disableLegacyAll()>:
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Device::loadDriversForAll()>:
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <Device::closeAll()>:
c000bf2a:	53                   	push   ebx
c000bf2b:	83 ec 08             	sub    esp,0x8
c000bf2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf34:	6a 00                	push   0x0
c000bf36:	6a 00                	push   0x0
c000bf38:	6a 00                	push   0x0
c000bf3a:	53                   	push   ebx
c000bf3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf3e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf44:	83 c4 10             	add    esp,0x10
c000bf47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf4a:	74 0f                	je     c000bf5b <Device::closeAll()+0x31>
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf52:	e8 d3 ff ff ff       	call   c000bf2a <Device::closeAll()>
c000bf57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf59:	eb e9                	jmp    c000bf44 <Device::closeAll()+0x1a>
c000bf5b:	83 c4 08             	add    esp,0x8
c000bf5e:	5b                   	pop    ebx
c000bf5f:	c3                   	ret    

c000bf60 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf60:	56                   	push   esi
c000bf61:	53                   	push   ebx
c000bf62:	83 ec 0c             	sub    esp,0xc
c000bf65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf69:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf6f:	56                   	push   esi
c000bf70:	53                   	push   ebx
c000bf71:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf80:	74 0f                	je     c000bf91 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf82:	52                   	push   edx
c000bf83:	52                   	push   edx
c000bf84:	56                   	push   esi
c000bf85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf88:	e8 d3 ff ff ff       	call   c000bf60 <Device::powerSavingAll(PowerSavingLevel)>
c000bf8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf8f:	eb e9                	jmp    c000bf7a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf91:	58                   	pop    eax
c000bf92:	5b                   	pop    ebx
c000bf93:	5e                   	pop    esi
c000bf94:	c3                   	ret    
c000bf95:	90                   	nop

c000bf96 <Device::setName(char const*)>:
c000bf96:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf9e:	e9 ad 46 ff ff       	jmp    c0000650 <strcpy>
c000bfa3:	90                   	nop

c000bfa4 <Device::Device(char const*)>:
c000bfa4:	83 ec 1c             	sub    esp,0x1c
c000bfa7:	ba 90 04 02 c0       	mov    edx,0xc0020490
c000bfac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb0:	89 10                	mov    DWORD PTR [eax],edx
c000bfb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfea:	83 ec 08             	sub    esp,0x8
c000bfed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff5:	e8 9c ff ff ff       	call   c000bf96 <Device::setName(char const*)>
c000bffa:	83 c4 10             	add    esp,0x10
c000bffd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c005:	83 ec 0c             	sub    esp,0xc
c000c008:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c00c:	e8 ba ba ff ff       	call   c0007acb <malloc>
c000c011:	83 c4 10             	add    esp,0x10
c000c014:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c01a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c021:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c025:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c035:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c03f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c045:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c04c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c050:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c05b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c066:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c074:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c07e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c082:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c08c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c090:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c09a:	90                   	nop
c000c09b:	83 c4 1c             	add    esp,0x1c
c000c09e:	c3                   	ret    
c000c09f:	90                   	nop

c000c0a0 <Device::getName()>:
c000c0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0a4:	05 d0 00 00 00       	add    eax,0xd0
c000c0a9:	c3                   	ret    

c000c0aa <DriverlessDevice::DriverlessDevice(char const*)>:
c000c0aa:	83 ec 0c             	sub    esp,0xc
c000c0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b1:	83 ec 08             	sub    esp,0x8
c000c0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b8:	50                   	push   eax
c000c0b9:	e8 e6 fe ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000c0be:	83 c4 10             	add    esp,0x10
c000c0c1:	ba bc 04 02 c0       	mov    edx,0xc00204bc
c000c0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ca:	89 10                	mov    DWORD PTR [eax],edx
c000c0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0da:	90                   	nop
c000c0db:	83 c4 0c             	add    esp,0xc
c000c0de:	c3                   	ret    
c000c0df:	90                   	nop

c000c0e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0e0:	57                   	push   edi
c000c0e1:	56                   	push   esi
c000c0e2:	53                   	push   ebx
c000c0e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0ef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0f5:	75 0c                	jne    c000c103 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0f7:	52                   	push   edx
c000c0f8:	52                   	push   edx
c000c0f9:	53                   	push   ebx
c000c0fa:	56                   	push   esi
c000c0fb:	e8 f2 29 01 00       	call   c001eaf2 <LinkedList<Device>::addElement(Device*)>
c000c100:	83 c4 10             	add    esp,0x10
c000c103:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c109:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c10c:	74 12                	je     c000c120 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c10e:	50                   	push   eax
c000c10f:	57                   	push   edi
c000c110:	56                   	push   esi
c000c111:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c114:	e8 c7 ff ff ff       	call   c000c0e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c119:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	eb e9                	jmp    c000c109 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c120:	5b                   	pop    ebx
c000c121:	5e                   	pop    esi
c000c122:	5f                   	pop    edi
c000c123:	c3                   	ret    

c000c124 <getDevicesOfType(DeviceType)>:
c000c124:	53                   	push   ebx
c000c125:	83 ec 14             	sub    esp,0x14
c000c128:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c12c:	53                   	push   ebx
c000c12d:	e8 9c 2a 01 00       	call   c001ebce <LinkedList<Device>::LinkedList()>
c000c132:	83 c4 0c             	add    esp,0xc
c000c135:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c139:	53                   	push   ebx
c000c13a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c140:	e8 9b ff ff ff       	call   c000c0e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c145:	83 c4 18             	add    esp,0x18
c000c148:	89 d8                	mov    eax,ebx
c000c14a:	5b                   	pop    ebx
c000c14b:	c2 04 00             	ret    0x4
c000c14e:	66 90                	xchg   ax,ax

c000c150 <HardDiskController::HardDiskController(char const*)>:
c000c150:	83 ec 0c             	sub    esp,0xc
c000c153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c157:	83 ec 08             	sub    esp,0x8
c000c15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15e:	50                   	push   eax
c000c15f:	e8 40 fe ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000c164:	83 c4 10             	add    esp,0x10
c000c167:	ba e8 04 02 c0       	mov    edx,0xc00204e8
c000c16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c170:	89 10                	mov    DWORD PTR [eax],edx
c000c172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c176:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c180:	90                   	nop
c000c181:	83 c4 0c             	add    esp,0xc
c000c184:	c3                   	ret    
c000c185:	90                   	nop
c000c186:	66 90                	xchg   ax,ax

c000c188 <HardDiskController::~HardDiskController()>:
c000c188:	83 ec 0c             	sub    esp,0xc
c000c18b:	ba e8 04 02 c0       	mov    edx,0xc00204e8
c000c190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c194:	89 10                	mov    DWORD PTR [eax],edx
c000c196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19a:	83 ec 0c             	sub    esp,0xc
c000c19d:	50                   	push   eax
c000c19e:	e8 6b fb ff ff       	call   c000bd0e <Device::~Device()>
c000c1a3:	83 c4 10             	add    esp,0x10
c000c1a6:	90                   	nop
c000c1a7:	83 c4 0c             	add    esp,0xc
c000c1aa:	c3                   	ret    
c000c1ab:	90                   	nop

c000c1ac <HardDiskController::~HardDiskController()>:
c000c1ac:	83 ec 0c             	sub    esp,0xc
c000c1af:	83 ec 0c             	sub    esp,0xc
c000c1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b6:	e8 cd ff ff ff       	call   c000c188 <HardDiskController::~HardDiskController()>
c000c1bb:	83 c4 10             	add    esp,0x10
c000c1be:	83 ec 08             	sub    esp,0x8
c000c1c1:	68 58 01 00 00       	push   0x158
c000c1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1ca:	e8 dd e6 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000c1cf:	83 c4 10             	add    esp,0x10
c000c1d2:	83 c4 0c             	add    esp,0xc
c000c1d5:	c3                   	ret    

c000c1d6 <PhysicalDisk::eject()>:
c000c1d6:	83 c8 ff             	or     eax,0xffffffff
c000c1d9:	c3                   	ret    

c000c1da <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1da:	83 ec 0c             	sub    esp,0xc
c000c1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e1:	83 ec 08             	sub    esp,0x8
c000c1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1e8:	50                   	push   eax
c000c1e9:	e8 b6 fd ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000c1ee:	83 c4 10             	add    esp,0x10
c000c1f1:	ba 14 05 02 c0       	mov    edx,0xc0020514
c000c1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1fa:	89 10                	mov    DWORD PTR [eax],edx
c000c1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c200:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c216:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c224:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c228:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c232:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c23c:	90                   	nop
c000c23d:	83 c4 0c             	add    esp,0xc
c000c240:	c3                   	ret    
c000c241:	90                   	nop

c000c242 <PhysicalDisk::startCache()>:
c000c242:	56                   	push   esi
c000c243:	53                   	push   ebx
c000c244:	83 ec 10             	sub    esp,0x10
c000c247:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c24b:	6a 44                	push   0x44
c000c24d:	e8 79 b8 ff ff       	call   c0007acb <malloc>
c000c252:	89 c6                	mov    esi,eax
c000c254:	58                   	pop    eax
c000c255:	5a                   	pop    edx
c000c256:	53                   	push   ebx
c000c257:	56                   	push   esi
c000c258:	e8 83 17 00 00       	call   c000d9e0 <VCache::VCache(PhysicalDisk*)>
c000c25d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c263:	83 c4 14             	add    esp,0x14
c000c266:	5b                   	pop    ebx
c000c267:	5e                   	pop    esi
c000c268:	c3                   	ret    
c000c269:	90                   	nop

c000c26a <PhysicalDisk::~PhysicalDisk()>:
c000c26a:	83 ec 0c             	sub    esp,0xc
c000c26d:	ba 14 05 02 c0       	mov    edx,0xc0020514
c000c272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c276:	89 10                	mov    DWORD PTR [eax],edx
c000c278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27c:	83 ec 0c             	sub    esp,0xc
c000c27f:	50                   	push   eax
c000c280:	e8 89 fa ff ff       	call   c000bd0e <Device::~Device()>
c000c285:	83 c4 10             	add    esp,0x10
c000c288:	90                   	nop
c000c289:	83 c4 0c             	add    esp,0xc
c000c28c:	c3                   	ret    
c000c28d:	90                   	nop

c000c28e <PhysicalDisk::~PhysicalDisk()>:
c000c28e:	83 ec 0c             	sub    esp,0xc
c000c291:	83 ec 0c             	sub    esp,0xc
c000c294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c298:	e8 cd ff ff ff       	call   c000c26a <PhysicalDisk::~PhysicalDisk()>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	83 ec 08             	sub    esp,0x8
c000c2a3:	68 6c 01 00 00       	push   0x16c
c000c2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ac:	e8 fb e5 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000c2b1:	83 c4 10             	add    esp,0x10
c000c2b4:	83 c4 0c             	add    esp,0xc
c000c2b7:	c3                   	ret    

c000c2b8 <int_handler>:
c000c2b8:	55                   	push   ebp
c000c2b9:	57                   	push   edi
c000c2ba:	56                   	push   esi
c000c2bb:	53                   	push   ebx
c000c2bc:	83 ec 0c             	sub    esp,0xc
c000c2bf:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c2ca:	74 0b                	je     c000c2d7 <int_handler+0x1f>
c000c2cc:	fa                   	cli    
c000c2cd:	f4                   	hlt    
c000c2ce:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2d5:	75 f5                	jne    c000c2cc <int_handler+0x14>
c000c2d7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2da:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2dd:	83 f8 17             	cmp    eax,0x17
c000c2e0:	76 40                	jbe    c000c322 <int_handler+0x6a>
c000c2e2:	c1 e6 04             	shl    esi,0x4
c000c2e5:	31 db                	xor    ebx,ebx
c000c2e7:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2ed:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2f3:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2f7:	85 c0                	test   eax,eax
c000c2f9:	74 13                	je     c000c30e <int_handler+0x56>
c000c2fb:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2ff:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c302:	74 2c                	je     c000c330 <int_handler+0x78>
c000c304:	83 ec 08             	sub    esp,0x8
c000c307:	52                   	push   edx
c000c308:	57                   	push   edi
c000c309:	ff d0                	call   eax
c000c30b:	83 c4 10             	add    esp,0x10
c000c30e:	83 c3 01             	add    ebx,0x1
c000c311:	83 fb 04             	cmp    ebx,0x4
c000c314:	75 dd                	jne    c000c2f3 <int_handler+0x3b>
c000c316:	83 c4 0c             	add    esp,0xc
c000c319:	31 c0                	xor    eax,eax
c000c31b:	5b                   	pop    ebx
c000c31c:	31 d2                	xor    edx,edx
c000c31e:	5e                   	pop    esi
c000c31f:	5f                   	pop    edi
c000c320:	5d                   	pop    ebp
c000c321:	c3                   	ret    
c000c322:	83 ec 0c             	sub    esp,0xc
c000c325:	50                   	push   eax
c000c326:	e8 81 af 00 00       	call   c00172ac <HalEndOfInterrupt(int)>
c000c32b:	83 c4 10             	add    esp,0x10
c000c32e:	eb b2                	jmp    c000c2e2 <int_handler+0x2a>
c000c330:	83 ec 08             	sub    esp,0x8
c000c333:	52                   	push   edx
c000c334:	57                   	push   edi
c000c335:	ff d0                	call   eax
c000c337:	83 c4 10             	add    esp,0x10
c000c33a:	83 c4 0c             	add    esp,0xc
c000c33d:	5b                   	pop    ebx
c000c33e:	5e                   	pop    esi
c000c33f:	5f                   	pop    edi
c000c340:	5d                   	pop    ebp
c000c341:	c3                   	ret    

c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c342:	56                   	push   esi
c000c343:	31 c0                	xor    eax,eax
c000c345:	53                   	push   ebx
c000c346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c34a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c34e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c352:	89 ca                	mov    edx,ecx
c000c354:	c1 e2 04             	shl    edx,0x4
c000c357:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c35f:	74 17                	je     c000c378 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c361:	83 c0 01             	add    eax,0x1
c000c364:	83 f8 04             	cmp    eax,0x4
c000c367:	75 ee                	jne    c000c357 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c369:	c7 44 24 0c 44 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020544
c000c371:	5b                   	pop    ebx
c000c372:	5e                   	pop    esi
c000c373:	e9 fd 44 00 00       	jmp    c0010875 <KePanic(char const*)>
c000c378:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c37b:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c382:	5b                   	pop    ebx
c000c383:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c38a:	5e                   	pop    esi
c000c38b:	c3                   	ret    

c000c38c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c38c:	55                   	push   ebp
c000c38d:	57                   	push   edi
c000c38e:	56                   	push   esi
c000c38f:	53                   	push   ebx
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c399:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c39d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3a1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c3a8:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c3ab:	74 57                	je     c000c404 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c3ad:	84 c0                	test   al,al
c000c3af:	89 c7                	mov    edi,eax
c000c3b1:	74 1d                	je     c000c3d0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c3b3:	83 fe 0f             	cmp    esi,0xf
c000c3b6:	0f 8f d9 00 00 00    	jg     c000c495 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c3bc:	0f b6 b6 c0 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde040]
c000c3c3:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c3cb:	d1 ef                	shr    edi,1
c000c3cd:	83 e7 01             	and    edi,0x1
c000c3d0:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3d5:	83 ec 08             	sub    esp,0x8
c000c3d8:	31 db                	xor    ebx,ebx
c000c3da:	50                   	push   eax
c000c3db:	68 51 05 02 c0       	push   0xc0020551
c000c3e0:	e8 c5 e5 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000c3e5:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3ea:	83 c4 10             	add    esp,0x10
c000c3ed:	85 c0                	test   eax,eax
c000c3ef:	7f 59                	jg     c000c44a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c3f1:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c3f4:	83 ec 0c             	sub    esp,0xc
c000c3f7:	68 68 05 02 c0       	push   0xc0020568
c000c3fc:	e8 74 44 00 00       	call   c0010875 <KePanic(char const*)>
c000c401:	83 c4 10             	add    esp,0x10
c000c404:	89 e8                	mov    eax,ebp
c000c406:	31 d2                	xor    edx,edx
c000c408:	c1 e0 04             	shl    eax,0x4
c000c40b:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c412:	85 c9                	test   ecx,ecx
c000c414:	0f 84 92 00 00 00    	je     c000c4ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c41a:	83 c2 01             	add    edx,0x1
c000c41d:	83 fa 04             	cmp    edx,0x4
c000c420:	75 e9                	jne    c000c40b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c422:	83 ec 0c             	sub    esp,0xc
c000c425:	68 bc 05 02 c0       	push   0xc00205bc
c000c42a:	e8 46 44 00 00       	call   c0010875 <KePanic(char const*)>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c437:	83 c4 0c             	add    esp,0xc
c000c43a:	5b                   	pop    ebx
c000c43b:	5e                   	pop    esi
c000c43c:	5f                   	pop    edi
c000c43d:	5d                   	pop    ebp
c000c43e:	c3                   	ret    
c000c43f:	83 c3 01             	add    ebx,0x1
c000c442:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c448:	7e a7                	jle    c000c3f1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c44a:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c451:	83 ec 08             	sub    esp,0x8
c000c454:	56                   	push   esi
c000c455:	55                   	push   ebp
c000c456:	e8 c5 15 01 00       	call   c001da20 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c45b:	83 c4 10             	add    esp,0x10
c000c45e:	84 c0                	test   al,al
c000c460:	74 dd                	je     c000c43f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c462:	89 f8                	mov    eax,edi
c000c464:	83 ec 04             	sub    esp,0x4
c000c467:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c46e:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c471:	0f b6 f8             	movzx  edi,al
c000c474:	57                   	push   edi
c000c475:	89 e8                	mov    eax,ebp
c000c477:	6a 00                	push   0x0
c000c479:	0f b6 c0             	movzx  eax,al
c000c47c:	50                   	push   eax
c000c47d:	89 f0                	mov    eax,esi
c000c47f:	6a 00                	push   0x0
c000c481:	0f b6 c0             	movzx  eax,al
c000c484:	6a 00                	push   0x0
c000c486:	50                   	push   eax
c000c487:	53                   	push   ebx
c000c488:	e8 ff 16 01 00       	call   c001db8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c48d:	83 c4 20             	add    esp,0x20
c000c490:	e9 6f ff ff ff       	jmp    c000c404 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c495:	83 ec 0c             	sub    esp,0xc
c000c498:	31 ff                	xor    edi,edi
c000c49a:	68 84 05 02 c0       	push   0xc0020584
c000c49f:	e8 d1 43 00 00       	call   c0010875 <KePanic(char const*)>
c000c4a4:	83 c4 10             	add    esp,0x10
c000c4a7:	e9 24 ff ff ff       	jmp    c000c3d0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c4ac:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c4af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c4b3:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c4ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c4be:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c4c5:	83 c4 0c             	add    esp,0xc
c000c4c8:	89 f0                	mov    eax,esi
c000c4ca:	5b                   	pop    ebx
c000c4cb:	5e                   	pop    esi
c000c4cc:	5f                   	pop    edi
c000c4cd:	5d                   	pop    ebp
c000c4ce:	c3                   	ret    

c000c4cf <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4d7:	c1 e0 04             	shl    eax,0x4
c000c4da:	8d 50 10             	lea    edx,[eax+0x10]
c000c4dd:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4e3:	74 08                	je     c000c4ed <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4e5:	83 c0 04             	add    eax,0x4
c000c4e8:	39 d0                	cmp    eax,edx
c000c4ea:	75 f1                	jne    c000c4dd <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4ec:	c3                   	ret    
c000c4ed:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4f7:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c501:	eb e2                	jmp    c000c4e5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c503 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c503:	56                   	push   esi
c000c504:	53                   	push   ebx
c000c505:	83 ec 04             	sub    esp,0x4
c000c508:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c50d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c511:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c515:	74 0e                	je     c000c525 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c517:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c51c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c523:	75 34                	jne    c000c559 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c525:	8d 43 20             	lea    eax,[ebx+0x20]
c000c528:	c1 e0 04             	shl    eax,0x4
c000c52b:	8d 50 10             	lea    edx,[eax+0x10]
c000c52e:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c534:	74 0d                	je     c000c543 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c536:	83 c0 04             	add    eax,0x4
c000c539:	39 d0                	cmp    eax,edx
c000c53b:	75 f1                	jne    c000c52e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c53d:	83 c4 04             	add    esp,0x4
c000c540:	5b                   	pop    ebx
c000c541:	5e                   	pop    esi
c000c542:	c3                   	ret    
c000c543:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c54d:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c557:	eb dd                	jmp    c000c536 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c559:	83 fb 0f             	cmp    ebx,0xf
c000c55c:	7f 09                	jg     c000c567 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c55e:	0f b6 9b c0 1f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde040]
c000c565:	eb be                	jmp    c000c525 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c567:	83 ec 0c             	sub    esp,0xc
c000c56a:	68 75 05 02 c0       	push   0xc0020575
c000c56f:	e8 01 43 00 00       	call   c0010875 <KePanic(char const*)>
c000c574:	83 c4 10             	add    esp,0x10
c000c577:	eb ac                	jmp    c000c525 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c579 <setupINTS()>:
c000c579:	31 c0                	xor    eax,eax
c000c57b:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c585:	83 c0 10             	add    eax,0x10
c000c588:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c592:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c59c:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c5a6:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c5b0:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c5ba:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c5c4:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c5ce:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5d3:	75 a6                	jne    c000c57b <setupINTS()+0x2>
c000c5d5:	c3                   	ret    

c000c5d6 <convertLegacyIRQNumber(int)>:
c000c5d6:	83 ec 0c             	sub    esp,0xc
c000c5d9:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5e3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5ea:	74 0c                	je     c000c5f8 <convertLegacyIRQNumber(int)+0x22>
c000c5ec:	83 f8 0f             	cmp    eax,0xf
c000c5ef:	7f 0b                	jg     c000c5fc <convertLegacyIRQNumber(int)+0x26>
c000c5f1:	0f b6 80 c0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde040]
c000c5f8:	83 c4 0c             	add    esp,0xc
c000c5fb:	c3                   	ret    
c000c5fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c600:	83 ec 0c             	sub    esp,0xc
c000c603:	68 84 05 02 c0       	push   0xc0020584
c000c608:	e8 68 42 00 00       	call   c0010875 <KePanic(char const*)>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c614:	83 c4 0c             	add    esp,0xc
c000c617:	c3                   	ret    

c000c618 <startGUI(void*)>:
c000c618:	55                   	push   ebp
c000c619:	89 e5                	mov    ebp,esp
c000c61b:	53                   	push   ebx
c000c61c:	83 ec 04             	sub    esp,0x4
c000c61f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c624:	83 e8 01             	sub    eax,0x1
c000c627:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c62c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c631:	85 c0                	test   eax,eax
c000c633:	75 01                	jne    c000c636 <startGUI(void*)+0x1e>
c000c635:	fb                   	sti    
c000c636:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c63c:	83 ec 08             	sub    esp,0x8
c000c63f:	6a 01                	push   0x1
c000c641:	68 e1 05 02 c0       	push   0xc00205e1
c000c646:	e8 b9 7f 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c000c64b:	83 c4 10             	add    esp,0x10
c000c64e:	83 ec 08             	sub    esp,0x8
c000c651:	53                   	push   ebx
c000c652:	50                   	push   eax
c000c653:	e8 ec 81 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c000c658:	83 c4 10             	add    esp,0x10
c000c65b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c661:	83 ec 08             	sub    esp,0x8
c000c664:	6a 01                	push   0x1
c000c666:	68 fb 05 02 c0       	push   0xc00205fb
c000c66b:	e8 94 7f 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c000c670:	83 c4 10             	add    esp,0x10
c000c673:	83 ec 08             	sub    esp,0x8
c000c676:	53                   	push   ebx
c000c677:	50                   	push   eax
c000c678:	e8 c7 81 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c000c67d:	83 c4 10             	add    esp,0x10
c000c680:	90                   	nop
c000c681:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c684:	c9                   	leave  
c000c685:	c3                   	ret    

c000c686 <startGUIVESA(void*)>:
c000c686:	55                   	push   ebp
c000c687:	89 e5                	mov    ebp,esp
c000c689:	53                   	push   ebx
c000c68a:	83 ec 04             	sub    esp,0x4
c000c68d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c692:	83 e8 01             	sub    eax,0x1
c000c695:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c69a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c69f:	85 c0                	test   eax,eax
c000c6a1:	75 01                	jne    c000c6a4 <startGUIVESA(void*)+0x1e>
c000c6a3:	fb                   	sti    
c000c6a4:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6aa:	83 ec 08             	sub    esp,0x8
c000c6ad:	6a 01                	push   0x1
c000c6af:	68 19 06 02 c0       	push   0xc0020619
c000c6b4:	e8 4b 7f 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c000c6b9:	83 c4 10             	add    esp,0x10
c000c6bc:	83 ec 08             	sub    esp,0x8
c000c6bf:	53                   	push   ebx
c000c6c0:	50                   	push   eax
c000c6c1:	e8 7e 81 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c000c6c6:	83 c4 10             	add    esp,0x10
c000c6c9:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6cf:	83 ec 08             	sub    esp,0x8
c000c6d2:	6a 01                	push   0x1
c000c6d4:	68 fb 05 02 c0       	push   0xc00205fb
c000c6d9:	e8 26 7f 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c000c6de:	83 c4 10             	add    esp,0x10
c000c6e1:	83 ec 08             	sub    esp,0x8
c000c6e4:	53                   	push   ebx
c000c6e5:	50                   	push   eax
c000c6e6:	e8 59 81 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c000c6eb:	83 c4 10             	add    esp,0x10
c000c6ee:	90                   	nop
c000c6ef:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c6f2:	c9                   	leave  
c000c6f3:	c3                   	ret    

c000c6f4 <sendKeyToTerminal(unsigned char)>:
c000c6f4:	55                   	push   ebp
c000c6f5:	89 e5                	mov    ebp,esp
c000c6f7:	83 ec 28             	sub    esp,0x28
c000c6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6fd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c700:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c705:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c709:	83 ec 08             	sub    esp,0x8
c000c70c:	52                   	push   edx
c000c70d:	50                   	push   eax
c000c70e:	e8 93 c6 ff ff       	call   c0008da6 <VgaText::receiveKey(unsigned char)>
c000c713:	83 c4 10             	add    esp,0x10
c000c716:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c71a:	83 f8 0a             	cmp    eax,0xa
c000c71d:	74 16                	je     c000c735 <sendKeyToTerminal(unsigned char)+0x41>
c000c71f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c723:	83 f8 03             	cmp    eax,0x3
c000c726:	74 0d                	je     c000c735 <sendKeyToTerminal(unsigned char)+0x41>
c000c728:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c72c:	83 f8 1c             	cmp    eax,0x1c
c000c72f:	0f 85 97 00 00 00    	jne    c000c7cc <sendKeyToTerminal(unsigned char)+0xd8>
c000c735:	fa                   	cli    
c000c736:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c73b:	83 c0 01             	add    eax,0x1
c000c73e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c743:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c748:	83 c0 01             	add    eax,0x1
c000c74b:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c750:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c755:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c758:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c762:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c766:	74 1f                	je     c000c787 <sendKeyToTerminal(unsigned char)+0x93>
c000c768:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c76b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c76e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c771:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c774:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c777:	83 ec 0c             	sub    esp,0xc
c000c77a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c77d:	e8 e6 8d 00 00       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c000c782:	83 c4 10             	add    esp,0x10
c000c785:	eb db                	jmp    c000c762 <sendKeyToTerminal(unsigned char)+0x6e>
c000c787:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c78c:	83 e8 01             	sub    eax,0x1
c000c78f:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c794:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c799:	85 c0                	test   eax,eax
c000c79b:	75 18                	jne    c000c7b5 <sendKeyToTerminal(unsigned char)+0xc1>
c000c79d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c7a2:	85 c0                	test   eax,eax
c000c7a4:	74 0f                	je     c000c7b5 <sendKeyToTerminal(unsigned char)+0xc1>
c000c7a6:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c7b0:	e8 bb 88 00 00       	call   c0015070 <schedule()>
c000c7b5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7ba:	83 e8 01             	sub    eax,0x1
c000c7bd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7c2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7c7:	85 c0                	test   eax,eax
c000c7c9:	75 01                	jne    c000c7cc <sendKeyToTerminal(unsigned char)+0xd8>
c000c7cb:	fb                   	sti    
c000c7cc:	90                   	nop
c000c7cd:	c9                   	leave  
c000c7ce:	c3                   	ret    

c000c7cf <sendKeyboardToken(KeyboardToken)>:
c000c7cf:	55                   	push   ebp
c000c7d0:	89 e5                	mov    ebp,esp
c000c7d2:	83 ec 18             	sub    esp,0x18
c000c7d5:	e8 eb 40 00 00       	call   c00108c5 <Krnl::userIOReceived()>
c000c7da:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e0:	0f b7 c0             	movzx  eax,ax
c000c7e3:	83 f2 01             	xor    edx,0x1
c000c7e6:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7ec:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7f1:	85 c0                	test   eax,eax
c000c7f3:	74 24                	je     c000c819 <sendKeyboardToken(KeyboardToken)+0x4a>
c000c7f5:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000c7fb:	83 ec 04             	sub    esp,0x4
c000c7fe:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c803:	83 ec 08             	sub    esp,0x8
c000c806:	89 e0                	mov    eax,esp
c000c808:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c80b:	89 08                	mov    DWORD PTR [eax],ecx
c000c80d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c810:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000c814:	ff d2                	call   edx
c000c816:	83 c4 10             	add    esp,0x10
c000c819:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c81d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c820:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c825:	0f b6 d2             	movzx  edx,dl
c000c828:	0f b6 c0             	movzx  eax,al
c000c82b:	39 c2                	cmp    edx,eax
c000c82d:	74 1c                	je     c000c84b <sendKeyboardToken(KeyboardToken)+0x7c>
c000c82f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c832:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c837:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c83c:	0f b6 c0             	movzx  eax,al
c000c83f:	83 ec 0c             	sub    esp,0xc
c000c842:	50                   	push   eax
c000c843:	e8 ba bc ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000c848:	83 c4 10             	add    esp,0x10
c000c84b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c84e:	0f b6 c0             	movzx  eax,al
c000c851:	85 c0                	test   eax,eax
c000c853:	0f 84 da 00 00 00    	je     c000c933 <sendKeyboardToken(KeyboardToken)+0x164>
c000c859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c85c:	0f b7 c0             	movzx  eax,ax
c000c85f:	3d 18 03 00 00       	cmp    eax,0x318
c000c864:	75 06                	jne    c000c86c <sendKeyboardToken(KeyboardToken)+0x9d>
c000c866:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c86c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c86f:	0f b7 c0             	movzx  eax,ax
c000c872:	3d 19 03 00 00       	cmp    eax,0x319
c000c877:	75 06                	jne    c000c87f <sendKeyboardToken(KeyboardToken)+0xb0>
c000c879:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c87f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c882:	0f b7 c0             	movzx  eax,ax
c000c885:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c88a:	75 06                	jne    c000c892 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c88c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c895:	0f b7 c0             	movzx  eax,ax
c000c898:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c89d:	75 06                	jne    c000c8a5 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c89f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c8a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a8:	0f b7 c0             	movzx  eax,ax
c000c8ab:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c8b0:	75 06                	jne    c000c8b8 <sendKeyboardToken(KeyboardToken)+0xe9>
c000c8b2:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c8b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8bb:	0f b7 c0             	movzx  eax,ax
c000c8be:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8c3:	75 06                	jne    c000c8cb <sendKeyboardToken(KeyboardToken)+0xfc>
c000c8c5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ce:	0f b7 c0             	movzx  eax,ax
c000c8d1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8d6:	75 06                	jne    c000c8de <sendKeyboardToken(KeyboardToken)+0x10f>
c000c8d8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e1:	0f b7 c0             	movzx  eax,ax
c000c8e4:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8e9:	75 06                	jne    c000c8f1 <sendKeyboardToken(KeyboardToken)+0x122>
c000c8eb:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c8f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f4:	0f b7 c0             	movzx  eax,ax
c000c8f7:	3d 20 03 00 00       	cmp    eax,0x320
c000c8fc:	75 06                	jne    c000c904 <sendKeyboardToken(KeyboardToken)+0x135>
c000c8fe:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c907:	0f b7 c0             	movzx  eax,ax
c000c90a:	3d 21 03 00 00       	cmp    eax,0x321
c000c90f:	75 06                	jne    c000c917 <sendKeyboardToken(KeyboardToken)+0x148>
c000c911:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c91a:	0f b7 c0             	movzx  eax,ax
c000c91d:	3d 22 03 00 00       	cmp    eax,0x322
c000c922:	0f 85 f1 00 00 00    	jne    c000ca19 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c928:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c92e:	e9 e6 00 00 00       	jmp    c000ca19 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c936:	0f b7 c0             	movzx  eax,ax
c000c939:	3d 18 03 00 00       	cmp    eax,0x318
c000c93e:	75 0a                	jne    c000c94a <sendKeyboardToken(KeyboardToken)+0x17b>
c000c940:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c946:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c94a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c94d:	0f b7 c0             	movzx  eax,ax
c000c950:	3d 19 03 00 00       	cmp    eax,0x319
c000c955:	75 0a                	jne    c000c961 <sendKeyboardToken(KeyboardToken)+0x192>
c000c957:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c95d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c964:	0f b7 c0             	movzx  eax,ax
c000c967:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c96c:	75 0a                	jne    c000c978 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c96e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c974:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c97b:	0f b7 c0             	movzx  eax,ax
c000c97e:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c983:	75 0a                	jne    c000c98f <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c985:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c98b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c98f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c992:	0f b7 c0             	movzx  eax,ax
c000c995:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c99a:	75 0a                	jne    c000c9a6 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c99c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c9a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a9:	0f b7 c0             	movzx  eax,ax
c000c9ac:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c9b1:	75 0a                	jne    c000c9bd <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c9b3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c0:	0f b7 c0             	movzx  eax,ax
c000c9c3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9c8:	75 0a                	jne    c000c9d4 <sendKeyboardToken(KeyboardToken)+0x205>
c000c9ca:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d7:	0f b7 c0             	movzx  eax,ax
c000c9da:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9df:	75 0a                	jne    c000c9eb <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9e1:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ee:	0f b7 c0             	movzx  eax,ax
c000c9f1:	3d 20 03 00 00       	cmp    eax,0x320
c000c9f6:	75 0a                	jne    c000ca02 <sendKeyboardToken(KeyboardToken)+0x233>
c000c9f8:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9fe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca05:	0f b7 c0             	movzx  eax,ax
c000ca08:	3d 21 03 00 00       	cmp    eax,0x321
c000ca0d:	75 0a                	jne    c000ca19 <sendKeyboardToken(KeyboardToken)+0x24a>
c000ca0f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca1c:	0f b7 c0             	movzx  eax,ax
c000ca1f:	3d 00 02 00 00       	cmp    eax,0x200
c000ca24:	75 2f                	jne    c000ca55 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca26:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca2b:	83 f0 01             	xor    eax,0x1
c000ca2e:	0f b6 c0             	movzx  eax,al
c000ca31:	85 c0                	test   eax,eax
c000ca33:	74 20                	je     c000ca55 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca35:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca3a:	6a 01                	push   0x1
c000ca3c:	6a 00                	push   0x0
c000ca3e:	68 18 c6 00 c0       	push   0xc000c618
c000ca43:	50                   	push   eax
c000ca44:	e8 db 83 00 00       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c000ca49:	83 c4 10             	add    esp,0x10
c000ca4c:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca53:	eb 3a                	jmp    c000ca8f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca58:	0f b7 c0             	movzx  eax,ax
c000ca5b:	3d 01 02 00 00       	cmp    eax,0x201
c000ca60:	75 2d                	jne    c000ca8f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca62:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca67:	83 f0 01             	xor    eax,0x1
c000ca6a:	0f b6 c0             	movzx  eax,al
c000ca6d:	85 c0                	test   eax,eax
c000ca6f:	74 1e                	je     c000ca8f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca71:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca76:	6a 01                	push   0x1
c000ca78:	6a 00                	push   0x0
c000ca7a:	68 86 c6 00 c0       	push   0xc000c686
c000ca7f:	50                   	push   eax
c000ca80:	e8 9f 83 00 00       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca92:	0f b7 c0             	movzx  eax,ax
c000ca95:	3d 25 03 00 00       	cmp    eax,0x325
c000ca9a:	75 06                	jne    c000caa2 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca9c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000caa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa5:	0f b7 c0             	movzx  eax,ax
c000caa8:	3d 24 03 00 00       	cmp    eax,0x324
c000caad:	75 06                	jne    c000cab5 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000caaf:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab8:	0f b7 c0             	movzx  eax,ax
c000cabb:	3d 23 03 00 00       	cmp    eax,0x323
c000cac0:	75 06                	jne    c000cac8 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cac2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cacb:	0f b7 c0             	movzx  eax,ax
c000cace:	3d 26 03 00 00       	cmp    eax,0x326
c000cad3:	75 06                	jne    c000cadb <sendKeyboardToken(KeyboardToken)+0x30c>
c000cad5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cadb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cade:	0f b7 c0             	movzx  eax,ax
c000cae1:	3d 27 03 00 00       	cmp    eax,0x327
c000cae6:	75 06                	jne    c000caee <sendKeyboardToken(KeyboardToken)+0x31f>
c000cae8:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000caee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf1:	0f b7 c0             	movzx  eax,ax
c000caf4:	3d 22 03 00 00       	cmp    eax,0x322
c000caf9:	75 06                	jne    c000cb01 <sendKeyboardToken(KeyboardToken)+0x332>
c000cafb:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb01:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb05:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb08:	83 f0 01             	xor    eax,0x1
c000cb0b:	0f b6 c0             	movzx  eax,al
c000cb0e:	85 c0                	test   eax,eax
c000cb10:	74 7c                	je     c000cb8e <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cb12:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cb17:	0f b6 c0             	movzx  eax,al
c000cb1a:	85 c0                	test   eax,eax
c000cb1c:	74 43                	je     c000cb61 <sendKeyboardToken(KeyboardToken)+0x392>
c000cb1e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb22:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 2b                	je     c000cb55 <sendKeyboardToken(KeyboardToken)+0x386>
c000cb2a:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb30:	89 d0                	mov    eax,edx
c000cb32:	c1 e0 02             	shl    eax,0x2
c000cb35:	01 d0                	add    eax,edx
c000cb37:	d1 e0                	shl    eax,1
c000cb39:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb41:	0f b7 c0             	movzx  eax,ax
c000cb44:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb47:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb4c:	01 d0                	add    eax,edx
c000cb4e:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb53:	eb 71                	jmp    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb55:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb5f:	eb 65                	jmp    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb61:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb66:	85 c0                	test   eax,eax
c000cb68:	74 18                	je     c000cb82 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb6a:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb6f:	0f b6 c0             	movzx  eax,al
c000cb72:	83 ec 0c             	sub    esp,0xc
c000cb75:	50                   	push   eax
c000cb76:	e8 79 fb ff ff       	call   c000c6f4 <sendKeyToTerminal(unsigned char)>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb82:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb8c:	eb 38                	jmp    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb91:	0f b7 c0             	movzx  eax,ax
c000cb94:	3d 01 01 00 00       	cmp    eax,0x101
c000cb99:	75 2b                	jne    c000cbc6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb9b:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cba0:	85 c0                	test   eax,eax
c000cba2:	74 18                	je     c000cbbc <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cba4:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cba9:	0f b6 c0             	movzx  eax,al
c000cbac:	83 ec 0c             	sub    esp,0xc
c000cbaf:	50                   	push   eax
c000cbb0:	e8 3f fb ff ff       	call   c000c6f4 <sendKeyToTerminal(unsigned char)>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbbc:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbc6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbc9:	83 f0 01             	xor    eax,0x1
c000cbcc:	0f b6 c0             	movzx  eax,al
c000cbcf:	85 c0                	test   eax,eax
c000cbd1:	74 5a                	je     c000cc2d <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbd3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbd6:	83 f0 01             	xor    eax,0x1
c000cbd9:	0f b6 c0             	movzx  eax,al
c000cbdc:	85 c0                	test   eax,eax
c000cbde:	74 4d                	je     c000cc2d <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbe0:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbe5:	83 f0 01             	xor    eax,0x1
c000cbe8:	0f b6 c0             	movzx  eax,al
c000cbeb:	85 c0                	test   eax,eax
c000cbed:	74 3e                	je     c000cc2d <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf2:	0f b7 c0             	movzx  eax,ax
c000cbf5:	83 f8 1f             	cmp    eax,0x1f
c000cbf8:	76 0b                	jbe    c000cc05 <sendKeyboardToken(KeyboardToken)+0x436>
c000cbfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfd:	0f b7 c0             	movzx  eax,ax
c000cc00:	83 f8 7e             	cmp    eax,0x7e
c000cc03:	76 16                	jbe    c000cc1b <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc08:	0f b7 c0             	movzx  eax,ax
c000cc0b:	83 f8 0a             	cmp    eax,0xa
c000cc0e:	74 0b                	je     c000cc1b <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc13:	0f b7 c0             	movzx  eax,ax
c000cc16:	83 f8 08             	cmp    eax,0x8
c000cc19:	75 12                	jne    c000cc2d <sendKeyboardToken(KeyboardToken)+0x45e>
c000cc1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1e:	0f b6 c0             	movzx  eax,al
c000cc21:	83 ec 0c             	sub    esp,0xc
c000cc24:	50                   	push   eax
c000cc25:	e8 ca fa ff ff       	call   c000c6f4 <sendKeyToTerminal(unsigned char)>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc30:	83 f0 01             	xor    eax,0x1
c000cc33:	0f b6 c0             	movzx  eax,al
c000cc36:	85 c0                	test   eax,eax
c000cc38:	74 5d                	je     c000cc97 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc3a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc3d:	83 f0 01             	xor    eax,0x1
c000cc40:	0f b6 c0             	movzx  eax,al
c000cc43:	85 c0                	test   eax,eax
c000cc45:	74 50                	je     c000cc97 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc47:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	85 c0                	test   eax,eax
c000cc51:	74 44                	je     c000cc97 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc56:	0f b7 c0             	movzx  eax,ax
c000cc59:	83 f8 3f             	cmp    eax,0x3f
c000cc5c:	76 39                	jbe    c000cc97 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc61:	0f b7 c0             	movzx  eax,ax
c000cc64:	83 f8 7f             	cmp    eax,0x7f
c000cc67:	77 2e                	ja     c000cc97 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6c:	88 c2                	mov    dl,al
c000cc6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc71:	0f b7 c0             	movzx  eax,ax
c000cc74:	83 f8 5f             	cmp    eax,0x5f
c000cc77:	76 04                	jbe    c000cc7d <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc79:	b0 20                	mov    al,0x20
c000cc7b:	eb 02                	jmp    c000cc7f <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc7d:	b0 00                	mov    al,0x0
c000cc7f:	89 d1                	mov    ecx,edx
c000cc81:	29 c1                	sub    ecx,eax
c000cc83:	89 c8                	mov    eax,ecx
c000cc85:	83 e8 40             	sub    eax,0x40
c000cc88:	0f b6 c0             	movzx  eax,al
c000cc8b:	83 ec 0c             	sub    esp,0xc
c000cc8e:	50                   	push   eax
c000cc8f:	e8 60 fa ff ff       	call   c000c6f4 <sendKeyToTerminal(unsigned char)>
c000cc94:	83 c4 10             	add    esp,0x10
c000cc97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc9a:	0f b7 c0             	movzx  eax,ax
c000cc9d:	3d 00 03 00 00       	cmp    eax,0x300
c000cca2:	75 12                	jne    c000ccb6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cca4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cca7:	83 f0 01             	xor    eax,0x1
c000ccaa:	0f b6 c0             	movzx  eax,al
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	74 05                	je     c000ccb6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ccb1:	e8 4d b8 ff ff       	call   c0008503 <doTerminalCycle()>
c000ccb6:	90                   	nop
c000ccb7:	c9                   	leave  
c000ccb8:	c3                   	ret    

c000ccb9 <clearInternalKeybuffer(VgaText*)>:
c000ccb9:	55                   	push   ebp
c000ccba:	89 e5                	mov    ebp,esp
c000ccbc:	83 ec 08             	sub    esp,0x8
c000ccbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccc2:	05 02 01 00 00       	add    eax,0x102
c000ccc7:	83 ec 0c             	sub    esp,0xc
c000ccca:	50                   	push   eax
c000cccb:	e8 b0 38 ff ff       	call   c0000580 <strlen>
c000ccd0:	83 c4 10             	add    esp,0x10
c000ccd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccd6:	81 c2 02 01 00 00    	add    edx,0x102
c000ccdc:	83 ec 04             	sub    esp,0x4
c000ccdf:	50                   	push   eax
c000cce0:	6a 00                	push   0x0
c000cce2:	52                   	push   edx
c000cce3:	e8 08 38 ff ff       	call   c00004f0 <memset>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	90                   	nop
c000ccec:	c9                   	leave  
c000cced:	c3                   	ret    

c000ccee <readKeyboard(VgaText*, char*, unsigned long)>:
c000ccee:	55                   	push   ebp
c000ccef:	89 e5                	mov    ebp,esp
c000ccf1:	83 ec 18             	sub    esp,0x18
c000ccf4:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ccf9:	85 c0                	test   eax,eax
c000ccfb:	74 2a                	je     c000cd27 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ccfd:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd03:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000cd09:	83 ec 04             	sub    esp,0x4
c000cd0c:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cd11:	83 ec 08             	sub    esp,0x8
c000cd14:	89 e0                	mov    eax,esp
c000cd16:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000cd19:	89 08                	mov    DWORD PTR [eax],ecx
c000cd1b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000cd1e:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cd22:	ff d2                	call   edx
c000cd24:	83 c4 10             	add    esp,0x10
c000cd27:	fb                   	sti    
c000cd28:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd2f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd33:	0f 84 0d 01 00 00    	je     c000ce46 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cd39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd3c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd42:	0f be c0             	movsx  eax,al
c000cd45:	85 c0                	test   eax,eax
c000cd47:	75 2c                	jne    c000cd75 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd49:	fa                   	cli    
c000cd4a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd4f:	83 c0 01             	add    eax,0x1
c000cd52:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd57:	e8 14 83 00 00       	call   c0015070 <schedule()>
c000cd5c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd61:	83 e8 01             	sub    eax,0x1
c000cd64:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd69:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd6e:	85 c0                	test   eax,eax
c000cd70:	75 c7                	jne    c000cd39 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd72:	fb                   	sti    
c000cd73:	eb c4                	jmp    c000cd39 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd75:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd78:	8d 50 01             	lea    edx,[eax+0x1]
c000cd7b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd81:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd87:	88 10                	mov    BYTE PTR [eax],dl
c000cd89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd92:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd95:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd99:	83 f8 03             	cmp    eax,0x3
c000cd9c:	75 1e                	jne    c000cdbc <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cda3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cda5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cda8:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdae:	83 ec 08             	sub    esp,0x8
c000cdb1:	6a 02                	push   0x2
c000cdb3:	50                   	push   eax
c000cdb4:	e8 56 3f 00 00       	call   c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdc0:	83 f8 1c             	cmp    eax,0x1c
c000cdc3:	75 1e                	jne    c000cde3 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cdc5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdca:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdcc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdcf:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdd5:	83 ec 08             	sub    esp,0x8
c000cdd8:	6a 09                	push   0x9
c000cdda:	50                   	push   eax
c000cddb:	e8 2f 3f 00 00       	call   c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>
c000cde0:	83 c4 10             	add    esp,0x10
c000cde3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cde6:	05 02 01 00 00       	add    eax,0x102
c000cdeb:	83 ec 0c             	sub    esp,0xc
c000cdee:	50                   	push   eax
c000cdef:	e8 8c 37 ff ff       	call   c0000580 <strlen>
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdfa:	81 c2 02 01 00 00    	add    edx,0x102
c000ce00:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ce03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce06:	81 c2 02 01 00 00    	add    edx,0x102
c000ce0c:	83 ec 04             	sub    esp,0x4
c000ce0f:	50                   	push   eax
c000ce10:	51                   	push   ecx
c000ce11:	52                   	push   edx
c000ce12:	e8 b9 35 ff ff       	call   c00003d0 <memmove>
c000ce17:	83 c4 10             	add    esp,0x10
c000ce1a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ce1e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ce22:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce26:	83 f8 0a             	cmp    eax,0xa
c000ce29:	74 16                	je     c000ce41 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce2b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce2f:	83 f8 03             	cmp    eax,0x3
c000ce32:	74 0d                	je     c000ce41 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce34:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce38:	83 f8 1c             	cmp    eax,0x1c
c000ce3b:	0f 85 ee fe ff ff    	jne    c000cd2f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce44:	eb 03                	jmp    c000ce49 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce49:	c9                   	leave  
c000ce4a:	c3                   	ret    
c000ce4b:	90                   	nop

c000ce4c <Keyboard::Keyboard(char const*)>:
c000ce4c:	83 ec 0c             	sub    esp,0xc
c000ce4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce53:	83 ec 08             	sub    esp,0x8
c000ce56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5a:	50                   	push   eax
c000ce5b:	e8 44 f1 ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000ce60:	83 c4 10             	add    esp,0x10
c000ce63:	ba 3c 06 02 c0       	mov    edx,0xc002063c
c000ce68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6c:	89 10                	mov    DWORD PTR [eax],edx
c000ce6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce72:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce7c:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce83:	90                   	nop
c000ce84:	83 c4 0c             	add    esp,0xc
c000ce87:	c3                   	ret    

c000ce88 <Keyboard::~Keyboard()>:
c000ce88:	83 ec 0c             	sub    esp,0xc
c000ce8b:	ba 3c 06 02 c0       	mov    edx,0xc002063c
c000ce90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce94:	89 10                	mov    DWORD PTR [eax],edx
c000ce96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce9a:	83 ec 0c             	sub    esp,0xc
c000ce9d:	50                   	push   eax
c000ce9e:	e8 6b ee ff ff       	call   c000bd0e <Device::~Device()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	90                   	nop
c000cea7:	83 c4 0c             	add    esp,0xc
c000ceaa:	c3                   	ret    
c000ceab:	90                   	nop

c000ceac <Keyboard::~Keyboard()>:
c000ceac:	83 ec 0c             	sub    esp,0xc
c000ceaf:	83 ec 0c             	sub    esp,0xc
c000ceb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb6:	e8 cd ff ff ff       	call   c000ce88 <Keyboard::~Keyboard()>
c000cebb:	83 c4 10             	add    esp,0x10
c000cebe:	83 ec 08             	sub    esp,0x8
c000cec1:	68 5c 01 00 00       	push   0x15c
c000cec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceca:	e8 dd d9 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000cecf:	83 c4 10             	add    esp,0x10
c000ced2:	83 c4 0c             	add    esp,0xc
c000ced5:	c3                   	ret    

c000ced6 <LogicalDisk::close(int, int, void*)>:
c000ced6:	83 c8 ff             	or     eax,0xffffffff
c000ced9:	c3                   	ret    

c000ceda <LogicalDisk::~LogicalDisk()>:
c000ceda:	83 ec 0c             	sub    esp,0xc
c000cedd:	ba b4 06 02 c0       	mov    edx,0xc00206b4
c000cee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee6:	89 10                	mov    DWORD PTR [eax],edx
c000cee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceec:	83 ec 0c             	sub    esp,0xc
c000ceef:	50                   	push   eax
c000cef0:	e8 19 ee ff ff       	call   c000bd0e <Device::~Device()>
c000cef5:	83 c4 10             	add    esp,0x10
c000cef8:	90                   	nop
c000cef9:	83 c4 0c             	add    esp,0xc
c000cefc:	c3                   	ret    
c000cefd:	90                   	nop

c000cefe <LogicalDisk::~LogicalDisk()>:
c000cefe:	83 ec 0c             	sub    esp,0xc
c000cf01:	83 ec 0c             	sub    esp,0xc
c000cf04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf08:	e8 cd ff ff ff       	call   c000ceda <LogicalDisk::~LogicalDisk()>
c000cf0d:	83 c4 10             	add    esp,0x10
c000cf10:	83 ec 08             	sub    esp,0x8
c000cf13:	68 78 01 00 00       	push   0x178
c000cf18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1c:	e8 8b d9 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000cf21:	83 c4 10             	add    esp,0x10
c000cf24:	83 c4 0c             	add    esp,0xc
c000cf27:	c3                   	ret    

c000cf28 <LogicalDisk::open(int, int, void*)>:
c000cf28:	83 ec 18             	sub    esp,0x18
c000cf2b:	68 68 06 02 c0       	push   0xc0020668
c000cf30:	e8 40 39 00 00       	call   c0010875 <KePanic(char const*)>
c000cf35:	83 c8 ff             	or     eax,0xffffffff
c000cf38:	83 c4 1c             	add    esp,0x1c
c000cf3b:	c3                   	ret    

c000cf3c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf3c:	53                   	push   ebx
c000cf3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf49:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf4f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf55:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf5b:	77 10                	ja     c000cf6d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf5d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf63:	89 d3                	mov    ebx,edx
c000cf65:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf6b:	72 05                	jb     c000cf72 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf6d:	83 c8 ff             	or     eax,0xffffffff
c000cf70:	89 c2                	mov    edx,eax
c000cf72:	5b                   	pop    ebx
c000cf73:	c3                   	ret    

c000cf74 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf74:	56                   	push   esi
c000cf75:	83 c8 ff             	or     eax,0xffffffff
c000cf78:	53                   	push   ebx
c000cf79:	89 c2                	mov    edx,eax
c000cf7b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf87:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf8d:	77 27                	ja     c000cfb6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf8f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf95:	89 d8                	mov    eax,ebx
c000cf97:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfa2:	89 c2                	mov    edx,eax
c000cfa4:	73 10                	jae    c000cfb6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfa6:	89 c8                	mov    eax,ecx
c000cfa8:	89 da                	mov    edx,ebx
c000cfaa:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfb0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfb6:	5b                   	pop    ebx
c000cfb7:	5e                   	pop    esi
c000cfb8:	c3                   	ret    
c000cfb9:	90                   	nop

c000cfba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfba:	83 ec 1c             	sub    esp,0x1c
c000cfbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfcd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfd1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfe0:	83 ec 08             	sub    esp,0x8
c000cfe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfe7:	50                   	push   eax
c000cfe8:	e8 b7 ef ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000cfed:	83 c4 10             	add    esp,0x10
c000cff0:	ba b4 06 02 c0       	mov    edx,0xc00206b4
c000cff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cff9:	89 10                	mov    DWORD PTR [eax],edx
c000cffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfff:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d00a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d015:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d020:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d02a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d02e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d032:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d036:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d03c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d042:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d046:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d049:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d04d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d053:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d059:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d05d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d061:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d06b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d075:	90                   	nop
c000d076:	83 c4 1c             	add    esp,0x1c
c000d079:	c3                   	ret    

c000d07a <LogicalDisk::assignDriveLetter()>:
c000d07a:	55                   	push   ebp
c000d07b:	57                   	push   edi
c000d07c:	56                   	push   esi
c000d07d:	53                   	push   ebx
c000d07e:	83 ec 14             	sub    esp,0x14
c000d081:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d085:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d08b:	b0 41                	mov    al,0x41
c000d08d:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d093:	84 d2                	test   dl,dl
c000d095:	75 02                	jne    c000d099 <LogicalDisk::assignDriveLetter()+0x1f>
c000d097:	b0 43                	mov    al,0x43
c000d099:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d09f:	0f b6 ca             	movzx  ecx,dl
c000d0a2:	0f be e8             	movsx  ebp,al
c000d0a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d0a9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d0ad:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d0b3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d0b7:	3c 43                	cmp    al,0x43
c000d0b9:	75 10                	jne    c000d0cb <LogicalDisk::assignDriveLetter()+0x51>
c000d0bb:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0c2:	75 5a                	jne    c000d11e <LogicalDisk::assignDriveLetter()+0xa4>
c000d0c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d0c9:	75 53                	jne    c000d11e <LogicalDisk::assignDriveLetter()+0xa4>
c000d0cb:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0ce:	ba 01 00 00 00       	mov    edx,0x1
c000d0d3:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0d6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d0d9:	d3 e2                	shl    edx,cl
c000d0db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0df:	89 d7                	mov    edi,edx
c000d0e1:	89 d6                	mov    esi,edx
c000d0e3:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0e7:	c1 ff 1f             	sar    edi,0x1f
c000d0ea:	21 f9                	and    ecx,edi
c000d0ec:	09 d1                	or     ecx,edx
c000d0ee:	75 2e                	jne    c000d11e <LogicalDisk::assignDriveLetter()+0xa4>
c000d0f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0f4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0f8:	09 f2                	or     edx,esi
c000d0fa:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0fd:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d103:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d107:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d10d:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d114:	09 fa                	or     edx,edi
c000d116:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d11c:	eb 0d                	jmp    c000d12b <LogicalDisk::assignDriveLetter()+0xb1>
c000d11e:	8d 50 01             	lea    edx,[eax+0x1]
c000d121:	45                   	inc    ebp
c000d122:	80 fa 5b             	cmp    dl,0x5b
c000d125:	88 d0                	mov    al,dl
c000d127:	75 8e                	jne    c000d0b7 <LogicalDisk::assignDriveLetter()+0x3d>
c000d129:	31 c0                	xor    eax,eax
c000d12b:	83 c4 14             	add    esp,0x14
c000d12e:	5b                   	pop    ebx
c000d12f:	5e                   	pop    esi
c000d130:	5f                   	pop    edi
c000d131:	5d                   	pop    ebp
c000d132:	c3                   	ret    
c000d133:	90                   	nop

c000d134 <LogicalDisk::mount()>:
c000d134:	56                   	push   esi
c000d135:	53                   	push   ebx
c000d136:	53                   	push   ebx
c000d137:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d13b:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d141:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d14b:	85 db                	test   ebx,ebx
c000d14d:	74 27                	je     c000d176 <LogicalDisk::mount()+0x42>
c000d14f:	51                   	push   ecx
c000d150:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d157:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d159:	83 e8 41             	sub    eax,0x41
c000d15c:	50                   	push   eax
c000d15d:	56                   	push   esi
c000d15e:	53                   	push   ebx
c000d15f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d162:	83 c4 10             	add    esp,0x10
c000d165:	84 c0                	test   al,al
c000d167:	74 08                	je     c000d171 <LogicalDisk::mount()+0x3d>
c000d169:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d16f:	eb 07                	jmp    c000d178 <LogicalDisk::mount()+0x44>
c000d171:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d174:	eb d5                	jmp    c000d14b <LogicalDisk::mount()+0x17>
c000d176:	31 c0                	xor    eax,eax
c000d178:	5a                   	pop    edx
c000d179:	5b                   	pop    ebx
c000d17a:	5e                   	pop    esi
c000d17b:	c3                   	ret    

c000d17c <LogicalDisk::unmount()>:
c000d17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d180:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d18a:	c3                   	ret    
c000d18b:	90                   	nop

c000d18c <LogicalDisk::eject()>:
c000d18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d190:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d196:	8b 10                	mov    edx,DWORD PTR [eax]
c000d198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d19c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d19f:	90                   	nop

c000d1a0 <LogicalDisk::unassignDriveLetter()>:
c000d1a0:	57                   	push   edi
c000d1a1:	56                   	push   esi
c000d1a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1a6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d1ad:	85 c9                	test   ecx,ecx
c000d1af:	75 0f                	jne    c000d1c0 <LogicalDisk::unassignDriveLetter()+0x20>
c000d1b1:	c7 44 24 0c 8c 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc002068c
c000d1b9:	5e                   	pop    esi
c000d1ba:	5f                   	pop    edi
c000d1bb:	e9 b5 36 00 00       	jmp    c0010875 <KePanic(char const*)>
c000d1c0:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1c7:	83 e9 41             	sub    ecx,0x41
c000d1ca:	b8 01 00 00 00       	mov    eax,0x1
c000d1cf:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1da:	d3 e0                	shl    eax,cl
c000d1dc:	89 c7                	mov    edi,eax
c000d1de:	f7 d0                	not    eax
c000d1e0:	c1 ff 1f             	sar    edi,0x1f
c000d1e3:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d1e9:	89 fe                	mov    esi,edi
c000d1eb:	f7 d6                	not    esi
c000d1ed:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1f3:	5e                   	pop    esi
c000d1f4:	5f                   	pop    edi
c000d1f5:	c3                   	ret    

c000d1f6 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1f6:	57                   	push   edi
c000d1f7:	56                   	push   esi
c000d1f8:	53                   	push   ebx
c000d1f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d201:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d205:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d209:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d20f:	77 41                	ja     c000d252 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d211:	99                   	cdq    
c000d212:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d218:	01 c8                	add    eax,ecx
c000d21a:	11 da                	adc    edx,ebx
c000d21c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d222:	19 d7                	sbb    edi,edx
c000d224:	72 33                	jb     c000d259 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d226:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d22c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d232:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d236:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d23a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d240:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d246:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d24a:	5b                   	pop    ebx
c000d24b:	5e                   	pop    esi
c000d24c:	5f                   	pop    edi
c000d24d:	e9 d4 0a 00 00       	jmp    c000dd26 <VCache::read(unsigned long long, int, void*)>
c000d252:	b8 05 00 00 00       	mov    eax,0x5
c000d257:	eb 05                	jmp    c000d25e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d259:	b8 07 00 00 00       	mov    eax,0x7
c000d25e:	5b                   	pop    ebx
c000d25f:	5e                   	pop    esi
c000d260:	5f                   	pop    edi
c000d261:	c3                   	ret    

c000d262 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d262:	57                   	push   edi
c000d263:	56                   	push   esi
c000d264:	53                   	push   ebx
c000d265:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d269:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d26d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d271:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d275:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d27b:	77 41                	ja     c000d2be <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d27d:	99                   	cdq    
c000d27e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d284:	01 c8                	add    eax,ecx
c000d286:	11 da                	adc    edx,ebx
c000d288:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d28e:	19 d7                	sbb    edi,edx
c000d290:	72 33                	jb     c000d2c5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d292:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d298:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d29e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2a2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2a6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b6:	5b                   	pop    ebx
c000d2b7:	5e                   	pop    esi
c000d2b8:	5f                   	pop    edi
c000d2b9:	e9 6e 09 00 00       	jmp    c000dc2c <VCache::write(unsigned long long, int, void*)>
c000d2be:	b8 05 00 00 00       	mov    eax,0x5
c000d2c3:	eb 05                	jmp    c000d2ca <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2c5:	b8 07 00 00 00       	mov    eax,0x7
c000d2ca:	5b                   	pop    ebx
c000d2cb:	5e                   	pop    esi
c000d2cc:	5f                   	pop    edi
c000d2cd:	c3                   	ret    
c000d2ce:	66 90                	xchg   ax,ax

c000d2d0 <Mouse::Mouse(char const*)>:
c000d2d0:	83 ec 0c             	sub    esp,0xc
c000d2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d7:	83 ec 08             	sub    esp,0x8
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	50                   	push   eax
c000d2df:	e8 c0 ec ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000d2e4:	83 c4 10             	add    esp,0x10
c000d2e7:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000d2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f0:	89 10                	mov    DWORD PTR [eax],edx
c000d2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d300:	90                   	nop
c000d301:	83 c4 0c             	add    esp,0xc
c000d304:	c3                   	ret    
c000d305:	90                   	nop
c000d306:	66 90                	xchg   ax,ax

c000d308 <Mouse::~Mouse()>:
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000d310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d314:	89 10                	mov    DWORD PTR [eax],edx
c000d316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31a:	83 ec 0c             	sub    esp,0xc
c000d31d:	50                   	push   eax
c000d31e:	e8 eb e9 ff ff       	call   c000bd0e <Device::~Device()>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <Mouse::~Mouse()>:
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	83 ec 0c             	sub    esp,0xc
c000d332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d336:	e8 cd ff ff ff       	call   c000d308 <Mouse::~Mouse()>
c000d33b:	83 c4 10             	add    esp,0x10
c000d33e:	83 ec 08             	sub    esp,0x8
c000d341:	68 58 01 00 00       	push   0x158
c000d346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d34a:	e8 5d d5 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	83 c4 0c             	add    esp,0xc
c000d355:	c3                   	ret    

c000d356 <NIC::getMAC()>:
c000d356:	31 c0                	xor    eax,eax
c000d358:	31 d2                	xor    edx,edx
c000d35a:	c3                   	ret    
c000d35b:	90                   	nop

c000d35c <NIC::write(int, unsigned char*, int*)>:
c000d35c:	b8 01 00 00 00       	mov    eax,0x1
c000d361:	c3                   	ret    

c000d362 <NIC::NIC(char const*)>:
c000d362:	83 ec 0c             	sub    esp,0xc
c000d365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d369:	83 ec 08             	sub    esp,0x8
c000d36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d370:	50                   	push   eax
c000d371:	e8 2e ec ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000d376:	83 c4 10             	add    esp,0x10
c000d379:	ba 0c 07 02 c0       	mov    edx,0xc002070c
c000d37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d382:	89 10                	mov    DWORD PTR [eax],edx
c000d384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d388:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d392:	90                   	nop
c000d393:	83 c4 0c             	add    esp,0xc
c000d396:	c3                   	ret    
c000d397:	90                   	nop

c000d398 <NIC::~NIC()>:
c000d398:	83 ec 0c             	sub    esp,0xc
c000d39b:	ba 0c 07 02 c0       	mov    edx,0xc002070c
c000d3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a4:	89 10                	mov    DWORD PTR [eax],edx
c000d3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3aa:	83 ec 0c             	sub    esp,0xc
c000d3ad:	50                   	push   eax
c000d3ae:	e8 5b e9 ff ff       	call   c000bd0e <Device::~Device()>
c000d3b3:	83 c4 10             	add    esp,0x10
c000d3b6:	90                   	nop
c000d3b7:	83 c4 0c             	add    esp,0xc
c000d3ba:	c3                   	ret    
c000d3bb:	90                   	nop

c000d3bc <NIC::~NIC()>:
c000d3bc:	83 ec 0c             	sub    esp,0xc
c000d3bf:	83 ec 0c             	sub    esp,0xc
c000d3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c6:	e8 cd ff ff ff       	call   c000d398 <NIC::~NIC()>
c000d3cb:	83 c4 10             	add    esp,0x10
c000d3ce:	83 ec 08             	sub    esp,0x8
c000d3d1:	68 58 01 00 00       	push   0x158
c000d3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3da:	e8 cd d4 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000d3df:	83 c4 10             	add    esp,0x10
c000d3e2:	83 c4 0c             	add    esp,0xc
c000d3e5:	c3                   	ret    

c000d3e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3e6:	55                   	push   ebp
c000d3e7:	57                   	push   edi
c000d3e8:	56                   	push   esi
c000d3e9:	53                   	push   ebx
c000d3ea:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3f0:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d3f7:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d3fe:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d405:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d40c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d410:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d414:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d41b:	e8 80 ec ff ff       	call   c000c0a0 <Device::getName()>
c000d420:	5a                   	pop    edx
c000d421:	59                   	pop    ecx
c000d422:	50                   	push   eax
c000d423:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d427:	55                   	push   ebp
c000d428:	e8 23 32 ff ff       	call   c0000650 <strcpy>
c000d42d:	5b                   	pop    ebx
c000d42e:	58                   	pop    eax
c000d42f:	68 38 07 02 c0       	push   0xc0020738
c000d434:	55                   	push   ebp
c000d435:	e8 36 34 ff ff       	call   c0000870 <strcat>
c000d43a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d441:	e8 85 a6 ff ff       	call   c0007acb <malloc>
c000d446:	83 c4 0c             	add    esp,0xc
c000d449:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d44d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d451:	89 c3                	mov    ebx,eax
c000d453:	57                   	push   edi
c000d454:	56                   	push   esi
c000d455:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d45c:	55                   	push   ebp
c000d45d:	50                   	push   eax
c000d45e:	e8 57 fb ff ff       	call   c000cfba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d463:	83 c4 14             	add    esp,0x14
c000d466:	53                   	push   ebx
c000d467:	e8 0e fc ff ff       	call   c000d07a <LogicalDisk::assignDriveLetter()>
c000d46c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d46f:	e8 c0 fc ff ff       	call   c000d134 <LogicalDisk::mount()>
c000d474:	58                   	pop    eax
c000d475:	5a                   	pop    edx
c000d476:	53                   	push   ebx
c000d477:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d47e:	e8 89 e9 ff ff       	call   c000be0c <Device::addChild(Device*)>
c000d483:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d489:	5b                   	pop    ebx
c000d48a:	5e                   	pop    esi
c000d48b:	5f                   	pop    edi
c000d48c:	5d                   	pop    ebp
c000d48d:	c3                   	ret    

c000d48e <createPartitionsForDisk(PhysicalDisk*)>:
c000d48e:	55                   	push   ebp
c000d48f:	57                   	push   edi
c000d490:	56                   	push   esi
c000d491:	53                   	push   ebx
c000d492:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d498:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d49f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4a5:	3d 00 02 00 00       	cmp    eax,0x200
c000d4aa:	74 27                	je     c000d4d3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4ac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4b2:	83 ec 10             	sub    esp,0x10
c000d4b5:	99                   	cdq    
c000d4b6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d4bc:	52                   	push   edx
c000d4bd:	50                   	push   eax
c000d4be:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d4c2:	c1 e6 0a             	shl    esi,0xa
c000d4c5:	89 fd                	mov    ebp,edi
c000d4c7:	55                   	push   ebp
c000d4c8:	56                   	push   esi
c000d4c9:	e8 72 11 01 00       	call   c001e640 <__udivdi3>
c000d4ce:	e9 b9 00 00 00       	jmp    c000d58c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4d3:	83 ec 0c             	sub    esp,0xc
c000d4d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4d8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4dc:	56                   	push   esi
c000d4dd:	6a 01                	push   0x1
c000d4df:	6a 00                	push   0x0
c000d4e1:	6a 00                	push   0x0
c000d4e3:	53                   	push   ebx
c000d4e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4e7:	83 c4 20             	add    esp,0x20
c000d4ea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4f2:	75 0a                	jne    c000d4fe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4f4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4fc:	74 2c                	je     c000d52a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d504:	83 ec 10             	sub    esp,0x10
c000d507:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d50d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d513:	89 f7                	mov    edi,esi
c000d515:	c1 ff 1f             	sar    edi,0x1f
c000d518:	57                   	push   edi
c000d519:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d51d:	56                   	push   esi
c000d51e:	c1 e0 0a             	shl    eax,0xa
c000d521:	52                   	push   edx
c000d522:	50                   	push   eax
c000d523:	e8 18 11 01 00       	call   c001e640 <__udivdi3>
c000d528:	eb 62                	jmp    c000d58c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d52a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d531:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d538:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d53f:	89 cf                	mov    edi,ecx
c000d541:	83 e2 7f             	and    edx,0x7f
c000d544:	83 e7 7f             	and    edi,0x7f
c000d547:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d54a:	83 e0 7f             	and    eax,0x7f
c000d54d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d550:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d557:	83 e0 7f             	and    eax,0x7f
c000d55a:	01 d0                	add    eax,edx
c000d55c:	84 c0                	test   al,al
c000d55e:	89 c5                	mov    ebp,eax
c000d560:	74 41                	je     c000d5a3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d562:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d568:	83 ec 10             	sub    esp,0x10
c000d56b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d571:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d577:	89 f7                	mov    edi,esi
c000d579:	c1 ff 1f             	sar    edi,0x1f
c000d57c:	57                   	push   edi
c000d57d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d581:	56                   	push   esi
c000d582:	c1 e0 0a             	shl    eax,0xa
c000d585:	52                   	push   edx
c000d586:	50                   	push   eax
c000d587:	e8 b4 10 01 00       	call   c001e640 <__udivdi3>
c000d58c:	83 c4 14             	add    esp,0x14
c000d58f:	52                   	push   edx
c000d590:	50                   	push   eax
c000d591:	6a 00                	push   0x0
c000d593:	6a 00                	push   0x0
c000d595:	53                   	push   ebx
c000d596:	e8 4b fe ff ff       	call   c000d3e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d59b:	83 c4 20             	add    esp,0x20
c000d59e:	e9 73 01 00 00       	jmp    c000d716 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d5a3:	89 f0                	mov    eax,esi
c000d5a5:	31 c9                	xor    ecx,ecx
c000d5a7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5ae:	75 02                	jne    c000d5b2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d5b0:	89 cd                	mov    ebp,ecx
c000d5b2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d5ba:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5c1:	83 c0 10             	add    eax,0x10
c000d5c4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d5cc:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d5d3:	c1 e2 08             	shl    edx,0x8
c000d5d6:	c1 e6 10             	shl    esi,0x10
c000d5d9:	09 f2                	or     edx,esi
c000d5db:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d5e2:	09 f2                	or     edx,esi
c000d5e4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d5eb:	c1 e6 18             	shl    esi,0x18
c000d5ee:	09 f2                	or     edx,esi
c000d5f0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d5f7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5fb:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d602:	c1 e6 10             	shl    esi,0x10
c000d605:	c1 e2 08             	shl    edx,0x8
c000d608:	09 f2                	or     edx,esi
c000d60a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d611:	09 f2                	or     edx,esi
c000d613:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d61a:	c1 e6 18             	shl    esi,0x18
c000d61d:	09 f2                	or     edx,esi
c000d61f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d623:	41                   	inc    ecx
c000d624:	83 f9 04             	cmp    ecx,0x4
c000d627:	0f 85 7a ff ff ff    	jne    c000d5a7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d631:	83 f0 01             	xor    eax,0x1
c000d634:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d638:	75 4f                	jne    c000d689 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d63a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d63e:	83 f0 01             	xor    eax,0x1
c000d641:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d645:	75 42                	jne    c000d689 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d647:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d64d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d655:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d65b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d663:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d669:	89 f7                	mov    edi,esi
c000d66b:	c1 ff 1f             	sar    edi,0x1f
c000d66e:	57                   	push   edi
c000d66f:	56                   	push   esi
c000d670:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d674:	52                   	push   edx
c000d675:	c1 e0 0a             	shl    eax,0xa
c000d678:	50                   	push   eax
c000d679:	e8 c2 0f 01 00       	call   c001e640 <__udivdi3>
c000d67e:	83 c4 10             	add    esp,0x10
c000d681:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d685:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d689:	89 e8                	mov    eax,ebp
c000d68b:	0f b6 e8             	movzx  ebp,al
c000d68e:	85 ed                	test   ebp,ebp
c000d690:	74 50                	je     c000d6e2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d692:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d696:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d69a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d69e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d6a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6a6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6ae:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d6be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6c2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d6c6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6ca:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d6ce:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6d2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6d6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6da:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6de:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6e2:	31 ed                	xor    ebp,ebp
c000d6e4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6e8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6ec:	89 f8                	mov    eax,edi
c000d6ee:	09 f0                	or     eax,esi
c000d6f0:	74 1e                	je     c000d710 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6f2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6f6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6fa:	89 d1                	mov    ecx,edx
c000d6fc:	09 c1                	or     ecx,eax
c000d6fe:	74 10                	je     c000d710 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	57                   	push   edi
c000d704:	56                   	push   esi
c000d705:	52                   	push   edx
c000d706:	50                   	push   eax
c000d707:	53                   	push   ebx
c000d708:	e8 d9 fc ff ff       	call   c000d3e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d70d:	83 c4 20             	add    esp,0x20
c000d710:	45                   	inc    ebp
c000d711:	83 fd 04             	cmp    ebp,0x4
c000d714:	75 ce                	jne    c000d6e4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d716:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d71c:	5b                   	pop    ebx
c000d71d:	5e                   	pop    esi
c000d71e:	5f                   	pop    edi
c000d71f:	5d                   	pop    ebp
c000d720:	c3                   	ret    
c000d721:	66 90                	xchg   ax,ax
c000d723:	90                   	nop

c000d724 <Serial::Serial(char const*)>:
c000d724:	83 ec 0c             	sub    esp,0xc
c000d727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72b:	83 ec 08             	sub    esp,0x8
c000d72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d732:	50                   	push   eax
c000d733:	e8 6c e8 ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000d738:	83 c4 10             	add    esp,0x10
c000d73b:	ba 4c 07 02 c0       	mov    edx,0xc002074c
c000d740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d744:	89 10                	mov    DWORD PTR [eax],edx
c000d746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d754:	90                   	nop
c000d755:	83 c4 0c             	add    esp,0xc
c000d758:	c3                   	ret    
c000d759:	90                   	nop
c000d75a:	66 90                	xchg   ax,ax

c000d75c <Serial::~Serial()>:
c000d75c:	83 ec 0c             	sub    esp,0xc
c000d75f:	ba 4c 07 02 c0       	mov    edx,0xc002074c
c000d764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d768:	89 10                	mov    DWORD PTR [eax],edx
c000d76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76e:	83 ec 0c             	sub    esp,0xc
c000d771:	50                   	push   eax
c000d772:	e8 97 e5 ff ff       	call   c000bd0e <Device::~Device()>
c000d777:	83 c4 10             	add    esp,0x10
c000d77a:	90                   	nop
c000d77b:	83 c4 0c             	add    esp,0xc
c000d77e:	c3                   	ret    
c000d77f:	90                   	nop

c000d780 <Serial::~Serial()>:
c000d780:	83 ec 0c             	sub    esp,0xc
c000d783:	83 ec 0c             	sub    esp,0xc
c000d786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78a:	e8 cd ff ff ff       	call   c000d75c <Serial::~Serial()>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	83 ec 08             	sub    esp,0x8
c000d795:	68 58 01 00 00       	push   0x158
c000d79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79e:	e8 09 d1 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000d7a3:	83 c4 10             	add    esp,0x10
c000d7a6:	83 c4 0c             	add    esp,0xc
c000d7a9:	c3                   	ret    
c000d7aa:	66 90                	xchg   ax,ax

c000d7ac <Timer::Timer(char const*)>:
c000d7ac:	83 ec 0c             	sub    esp,0xc
c000d7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b3:	83 ec 08             	sub    esp,0x8
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	50                   	push   eax
c000d7bb:	e8 e4 e7 ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000d7c0:	83 c4 10             	add    esp,0x10
c000d7c3:	ba 90 07 02 c0       	mov    edx,0xc0020790
c000d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cc:	89 10                	mov    DWORD PTR [eax],edx
c000d7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7dc:	90                   	nop
c000d7dd:	83 c4 0c             	add    esp,0xc
c000d7e0:	c3                   	ret    
c000d7e1:	90                   	nop
c000d7e2:	66 90                	xchg   ax,ax

c000d7e4 <Timer::~Timer()>:
c000d7e4:	83 ec 0c             	sub    esp,0xc
c000d7e7:	ba 90 07 02 c0       	mov    edx,0xc0020790
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	89 10                	mov    DWORD PTR [eax],edx
c000d7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f6:	83 ec 0c             	sub    esp,0xc
c000d7f9:	50                   	push   eax
c000d7fa:	e8 0f e5 ff ff       	call   c000bd0e <Device::~Device()>
c000d7ff:	83 c4 10             	add    esp,0x10
c000d802:	90                   	nop
c000d803:	83 c4 0c             	add    esp,0xc
c000d806:	c3                   	ret    
c000d807:	90                   	nop

c000d808 <Timer::~Timer()>:
c000d808:	83 ec 0c             	sub    esp,0xc
c000d80b:	83 ec 0c             	sub    esp,0xc
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	e8 cd ff ff ff       	call   c000d7e4 <Timer::~Timer()>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	83 ec 08             	sub    esp,0x8
c000d81d:	68 5c 01 00 00       	push   0x15c
c000d822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d826:	e8 81 d0 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000d82b:	83 c4 10             	add    esp,0x10
c000d82e:	83 c4 0c             	add    esp,0xc
c000d831:	c3                   	ret    

c000d832 <Timer::read()>:
c000d832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d836:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d83c:	c3                   	ret    

c000d83d <setupTimer(int)>:
c000d83d:	53                   	push   ebx
c000d83e:	83 ec 14             	sub    esp,0x14
c000d841:	68 5c 01 00 00       	push   0x15c
c000d846:	e8 80 a2 ff ff       	call   c0007acb <malloc>
c000d84b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d84e:	89 c3                	mov    ebx,eax
c000d850:	e8 53 06 01 00       	call   c001dea8 <PIT::PIT()>
c000d855:	58                   	pop    eax
c000d856:	5a                   	pop    edx
c000d857:	53                   	push   ebx
c000d858:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d85e:	e8 a9 e5 ff ff       	call   c000be0c <Device::addChild(Device*)>
c000d863:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d865:	6a 00                	push   0x0
c000d867:	6a 00                	push   0x0
c000d869:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86d:	53                   	push   ebx
c000d86e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d871:	83 c4 28             	add    esp,0x28
c000d874:	89 d8                	mov    eax,ebx
c000d876:	5b                   	pop    ebx
c000d877:	c3                   	ret    

c000d878 <timerHandler(unsigned int)>:
c000d878:	56                   	push   esi
c000d879:	53                   	push   ebx
c000d87a:	51                   	push   ecx
c000d87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d87f:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d885:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d88c:	0f 84 4a 01 00 00    	je     c000d9dc <timerHandler(unsigned int)+0x164>
c000d892:	fa                   	cli    
c000d893:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d899:	83 ec 0c             	sub    esp,0xc
c000d89c:	68 78 81 02 c0       	push   0xc0028178
c000d8a1:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d8a7:	e8 64 13 01 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8ac:	83 c4 10             	add    esp,0x10
c000d8af:	84 c0                	test   al,al
c000d8b1:	0f 85 a1 00 00 00    	jne    c000d958 <timerHandler(unsigned int)+0xe0>
c000d8b7:	83 ec 0c             	sub    esp,0xc
c000d8ba:	68 78 81 02 c0       	push   0xc0028178
c000d8bf:	e8 68 13 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8c4:	83 c4 10             	add    esp,0x10
c000d8c7:	89 c6                	mov    esi,eax
c000d8c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8cc:	83 ec 0c             	sub    esp,0xc
c000d8cf:	68 78 81 02 c0       	push   0xc0028178
c000d8d4:	e8 53 13 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8d9:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8e0:	89 c3                	mov    ebx,eax
c000d8e2:	e8 4d 13 01 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8ea:	83 c4 10             	add    esp,0x10
c000d8ed:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8f3:	77 23                	ja     c000d918 <timerHandler(unsigned int)+0xa0>
c000d8f5:	83 ec 0c             	sub    esp,0xc
c000d8f8:	53                   	push   ebx
c000d8f9:	e8 6a 7c 00 00       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	39 de                	cmp    esi,ebx
c000d903:	75 27                	jne    c000d92c <timerHandler(unsigned int)+0xb4>
c000d905:	83 ec 0c             	sub    esp,0xc
c000d908:	68 78 81 02 c0       	push   0xc0028178
c000d90d:	e8 1a 13 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d912:	89 c6                	mov    esi,eax
c000d914:	eb 12                	jmp    c000d928 <timerHandler(unsigned int)+0xb0>
c000d916:	66 90                	xchg   ax,ax
c000d918:	52                   	push   edx
c000d919:	52                   	push   edx
c000d91a:	53                   	push   ebx
c000d91b:	68 78 81 02 c0       	push   0xc0028178
c000d920:	e8 cb 13 01 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d925:	8d 76 00             	lea    esi,[esi+0x0]
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	90                   	nop
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	68 78 81 02 c0       	push   0xc0028178
c000d934:	e8 d7 12 01 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d939:	83 c4 10             	add    esp,0x10
c000d93c:	84 c0                	test   al,al
c000d93e:	75 18                	jne    c000d958 <timerHandler(unsigned int)+0xe0>
c000d940:	83 ec 0c             	sub    esp,0xc
c000d943:	68 78 81 02 c0       	push   0xc0028178
c000d948:	e8 df 12 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	39 f0                	cmp    eax,esi
c000d952:	0f 85 74 ff ff ff    	jne    c000d8cc <timerHandler(unsigned int)+0x54>
c000d958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d95d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d961:	74 41                	je     c000d9a4 <timerHandler(unsigned int)+0x12c>
c000d963:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d96a:	74 38                	je     c000d9a4 <timerHandler(unsigned int)+0x12c>
c000d96c:	fa                   	cli    
c000d96d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d973:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d978:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d97e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d981:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d987:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d98a:	72 08                	jb     c000d994 <timerHandler(unsigned int)+0x11c>
c000d98c:	e8 df 76 00 00       	call   c0015070 <schedule()>
c000d991:	8d 76 00             	lea    esi,[esi+0x0]
c000d994:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d999:	48                   	dec    eax
c000d99a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d99f:	75 03                	jne    c000d9a4 <timerHandler(unsigned int)+0x12c>
c000d9a1:	fb                   	sti    
c000d9a2:	66 90                	xchg   ax,ax
c000d9a4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d9a9:	48                   	dec    eax
c000d9aa:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d9af:	75 1b                	jne    c000d9cc <timerHandler(unsigned int)+0x154>
c000d9b1:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d9b8:	74 12                	je     c000d9cc <timerHandler(unsigned int)+0x154>
c000d9ba:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9c4:	e8 a7 76 00 00       	call   c0015070 <schedule()>
c000d9c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9d1:	48                   	dec    eax
c000d9d2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9d7:	75 03                	jne    c000d9dc <timerHandler(unsigned int)+0x164>
c000d9d9:	fb                   	sti    
c000d9da:	66 90                	xchg   ax,ax
c000d9dc:	58                   	pop    eax
c000d9dd:	5b                   	pop    ebx
c000d9de:	5e                   	pop    esi
c000d9df:	c3                   	ret    

c000d9e0 <VCache::VCache(PhysicalDisk*)>:
c000d9e0:	53                   	push   ebx
c000d9e1:	83 ec 18             	sub    esp,0x18
c000d9e4:	ba c0 07 02 c0       	mov    edx,0xc00207c0
c000d9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ed:	89 10                	mov    DWORD PTR [eax],edx
c000d9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da09:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da10:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da1b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da22:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da38:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da40:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da47:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da52:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da62:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da71:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da79:	83 ec 0c             	sub    esp,0xc
c000da7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da80:	e8 46 a0 ff ff       	call   c0007acb <malloc>
c000da85:	83 c4 10             	add    esp,0x10
c000da88:	89 c3                	mov    ebx,eax
c000da8a:	83 ec 0c             	sub    esp,0xc
c000da8d:	53                   	push   ebx
c000da8e:	e8 7d 73 00 00       	call   c0014e10 <Mutex::Mutex()>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000daa5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daac:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dab3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dab7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dabd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dac4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dac8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dace:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dad4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dad8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dadb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dae6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daf0:	05 00 02 00 00       	add    eax,0x200
c000daf5:	c1 e0 03             	shl    eax,0x3
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	50                   	push   eax
c000dafc:	e8 ca 9f ff ff       	call   c0007acb <malloc>
c000db01:	83 c4 10             	add    esp,0x10
c000db04:	89 c2                	mov    edx,eax
c000db06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db11:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db1c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db24:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db2a:	89 d0                	mov    eax,edx
c000db2c:	c1 e0 02             	shl    eax,0x2
c000db2f:	01 d0                	add    eax,edx
c000db31:	c1 e0 04             	shl    eax,0x4
c000db34:	83 ec 0c             	sub    esp,0xc
c000db37:	50                   	push   eax
c000db38:	e8 8e 9f ff ff       	call   c0007acb <malloc>
c000db3d:	83 c4 10             	add    esp,0x10
c000db40:	89 c2                	mov    edx,eax
c000db42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db46:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db49:	90                   	nop
c000db4a:	83 c4 18             	add    esp,0x18
c000db4d:	5b                   	pop    ebx
c000db4e:	c3                   	ret    
c000db4f:	90                   	nop

c000db50 <VCache::invalidateReadBuffer()>:
c000db50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db54:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db5a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db5e:	c3                   	ret    
c000db5f:	90                   	nop

c000db60 <VCache::writeWriteBuffer()>:
c000db60:	53                   	push   ebx
c000db61:	83 ec 08             	sub    esp,0x8
c000db64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db68:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db6c:	74 1e                	je     c000db8c <VCache::writeWriteBuffer()+0x2c>
c000db6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	8b 10                	mov    edx,DWORD PTR [eax]
c000db76:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db79:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db7c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db7f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db82:	50                   	push   eax
c000db83:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db86:	83 c4 20             	add    esp,0x20
c000db89:	8d 76 00             	lea    esi,[esi+0x0]
c000db8c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db93:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db9a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db9e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dba5:	83 c4 08             	add    esp,0x8
c000dba8:	5b                   	pop    ebx
c000dba9:	c3                   	ret    
c000dbaa:	66 90                	xchg   ax,ax

c000dbac <VCache::~VCache()>:
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	ba c0 07 02 c0       	mov    edx,0xc00207c0
c000dbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb8:	89 10                	mov    DWORD PTR [eax],edx
c000dbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbe:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbc1:	0f b6 c0             	movzx  eax,al
c000dbc4:	85 c0                	test   eax,eax
c000dbc6:	74 10                	je     c000dbd8 <VCache::~VCache()+0x2c>
c000dbc8:	83 ec 0c             	sub    esp,0xc
c000dbcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcf:	e8 8c ff ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dbd4:	83 c4 10             	add    esp,0x10
c000dbd7:	90                   	nop
c000dbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbdc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbdf:	83 ec 0c             	sub    esp,0xc
c000dbe2:	50                   	push   eax
c000dbe3:	e8 f3 9e ff ff       	call   c0007adb <free>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbf2:	83 ec 0c             	sub    esp,0xc
c000dbf5:	50                   	push   eax
c000dbf6:	e8 e0 9e ff ff       	call   c0007adb <free>
c000dbfb:	83 c4 10             	add    esp,0x10
c000dbfe:	90                   	nop
c000dbff:	83 c4 0c             	add    esp,0xc
c000dc02:	c3                   	ret    
c000dc03:	90                   	nop

c000dc04 <VCache::~VCache()>:
c000dc04:	83 ec 0c             	sub    esp,0xc
c000dc07:	83 ec 0c             	sub    esp,0xc
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	e8 99 ff ff ff       	call   c000dbac <VCache::~VCache()>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	83 ec 08             	sub    esp,0x8
c000dc19:	6a 44                	push   0x44
c000dc1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1f:	e8 88 cc ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000dc24:	83 c4 10             	add    esp,0x10
c000dc27:	83 c4 0c             	add    esp,0xc
c000dc2a:	c3                   	ret    
c000dc2b:	90                   	nop

c000dc2c <VCache::write(unsigned long long, int, void*)>:
c000dc2c:	55                   	push   ebp
c000dc2d:	57                   	push   edi
c000dc2e:	56                   	push   esi
c000dc2f:	53                   	push   ebx
c000dc30:	83 ec 1c             	sub    esp,0x1c
c000dc33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc3b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dc3f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc43:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc4b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc4f:	74 0f                	je     c000dc60 <VCache::write(unsigned long long, int, void*)+0x34>
c000dc51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc55:	53                   	push   ebx
c000dc56:	e8 f5 fe ff ff       	call   c000db50 <VCache::invalidateReadBuffer()>
c000dc5b:	58                   	pop    eax
c000dc5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc60:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc64:	74 66                	je     c000dccc <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc66:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc6d:	99                   	cdq    
c000dc6e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc71:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc74:	89 c6                	mov    esi,eax
c000dc76:	31 ce                	xor    esi,ecx
c000dc78:	89 d0                	mov    eax,edx
c000dc7a:	31 e8                	xor    eax,ebp
c000dc7c:	09 c6                	or     esi,eax
c000dc7e:	75 38                	jne    c000dcb8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc80:	83 ff 01             	cmp    edi,0x1
c000dc83:	75 33                	jne    c000dcb8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc85:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc88:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dc8c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc90:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc96:	0f af f9             	imul   edi,ecx
c000dc99:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc9e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dca1:	40                   	inc    eax
c000dca2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dca5:	83 f8 50             	cmp    eax,0x50
c000dca8:	75 72                	jne    c000dd1c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcaa:	83 ec 0c             	sub    esp,0xc
c000dcad:	53                   	push   ebx
c000dcae:	e8 ad fe ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dcb3:	83 c4 10             	add    esp,0x10
c000dcb6:	eb 64                	jmp    c000dd1c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dcbc:	83 ec 0c             	sub    esp,0xc
c000dcbf:	53                   	push   ebx
c000dcc0:	e8 9b fe ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dcc5:	83 c4 10             	add    esp,0x10
c000dcc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dccc:	83 ff 4f             	cmp    edi,0x4f
c000dccf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcd2:	7f 20                	jg     c000dcf4 <VCache::write(unsigned long long, int, void*)+0xc8>
c000dcd4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dcd7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcdb:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dcde:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dce1:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dce4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dce8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcf0:	eb 2a                	jmp    c000dd1c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcf2:	66 90                	xchg   ax,ax
c000dcf4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcfa:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcfe:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dd02:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dd06:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dd0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd0e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd11:	83 c4 1c             	add    esp,0x1c
c000dd14:	5b                   	pop    ebx
c000dd15:	5e                   	pop    esi
c000dd16:	5f                   	pop    edi
c000dd17:	5d                   	pop    ebp
c000dd18:	ff e0                	jmp    eax
c000dd1a:	66 90                	xchg   ax,ax
c000dd1c:	83 c4 1c             	add    esp,0x1c
c000dd1f:	31 c0                	xor    eax,eax
c000dd21:	5b                   	pop    ebx
c000dd22:	5e                   	pop    esi
c000dd23:	5f                   	pop    edi
c000dd24:	5d                   	pop    ebp
c000dd25:	c3                   	ret    

c000dd26 <VCache::read(unsigned long long, int, void*)>:
c000dd26:	55                   	push   ebp
c000dd27:	57                   	push   edi
c000dd28:	56                   	push   esi
c000dd29:	53                   	push   ebx
c000dd2a:	83 ec 1c             	sub    esp,0x1c
c000dd2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dd39:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd3d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd45:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd49:	74 0d                	je     c000dd58 <VCache::read(unsigned long long, int, void*)+0x32>
c000dd4b:	83 ec 0c             	sub    esp,0xc
c000dd4e:	57                   	push   edi
c000dd4f:	e8 0c fe ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dd54:	83 c4 10             	add    esp,0x10
c000dd57:	90                   	nop
c000dd58:	83 fd 01             	cmp    ebp,0x1
c000dd5b:	0f 85 93 00 00 00    	jne    c000ddf4 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd61:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd64:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd6e:	0f 85 80 00 00 00    	jne    c000ddf4 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd74:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dd77:	89 cd                	mov    ebp,ecx
c000dd79:	f7 dd                	neg    ebp
c000dd7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dd7f:	89 e8                	mov    eax,ebp
c000dd81:	21 dd                	and    ebp,ebx
c000dd83:	c1 f8 1f             	sar    eax,0x1f
c000dd86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd8a:	89 e8                	mov    eax,ebp
c000dd8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd90:	21 f5                	and    ebp,esi
c000dd92:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd96:	89 ea                	mov    edx,ebp
c000dd98:	74 2e                	je     c000ddc8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd9a:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd9d:	75 29                	jne    c000ddc8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd9f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dda2:	75 24                	jne    c000ddc8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dda4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dda7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ddad:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000ddb0:	8d 70 ff             	lea    esi,[eax-0x1]
c000ddb3:	21 f3                	and    ebx,esi
c000ddb5:	0f af d9             	imul   ebx,ecx
c000ddb8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000ddbb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ddbf:	89 de                	mov    esi,ebx
c000ddc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddc3:	31 c0                	xor    eax,eax
c000ddc5:	eb 61                	jmp    c000de28 <VCache::read(unsigned long long, int, void*)+0x102>
c000ddc7:	90                   	nop
c000ddc8:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ddd2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ddd6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ddd9:	8b 36                	mov    esi,DWORD PTR [esi]
c000dddb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ddde:	51                   	push   ecx
c000dddf:	52                   	push   edx
c000dde0:	50                   	push   eax
c000dde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dde5:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dde8:	83 c4 20             	add    esp,0x20
c000ddeb:	85 c0                	test   eax,eax
c000dded:	75 39                	jne    c000de28 <VCache::read(unsigned long long, int, void*)+0x102>
c000ddef:	eb b3                	jmp    c000dda4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ddf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf4:	83 ec 0c             	sub    esp,0xc
c000ddf7:	57                   	push   edi
c000ddf8:	e8 53 fd ff ff       	call   c000db50 <VCache::invalidateReadBuffer()>
c000ddfd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de04:	8b 10                	mov    edx,DWORD PTR [eax]
c000de06:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000de0a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000de0e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000de12:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000de16:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de1a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de1d:	83 c4 2c             	add    esp,0x2c
c000de20:	5b                   	pop    ebx
c000de21:	5e                   	pop    esi
c000de22:	5f                   	pop    edi
c000de23:	5d                   	pop    ebp
c000de24:	ff e0                	jmp    eax
c000de26:	66 90                	xchg   ax,ax
c000de28:	83 c4 1c             	add    esp,0x1c
c000de2b:	5b                   	pop    ebx
c000de2c:	5e                   	pop    esi
c000de2d:	5f                   	pop    edi
c000de2e:	5d                   	pop    ebp
c000de2f:	c3                   	ret    

c000de30 <Video::putrect(int, int, int, int, unsigned int)>:
c000de30:	55                   	push   ebp
c000de31:	57                   	push   edi
c000de32:	56                   	push   esi
c000de33:	53                   	push   ebx
c000de34:	83 ec 1c             	sub    esp,0x1c
c000de37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de3f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de43:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de4f:	01 df                	add    edi,ebx
c000de51:	39 fb                	cmp    ebx,edi
c000de53:	7d 1f                	jge    c000de74 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de55:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de59:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de5d:	7d 12                	jge    c000de71 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de5f:	8b 16                	mov    edx,DWORD PTR [esi]
c000de61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de65:	53                   	push   ebx
c000de66:	55                   	push   ebp
c000de67:	45                   	inc    ebp
c000de68:	56                   	push   esi
c000de69:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de6c:	83 c4 10             	add    esp,0x10
c000de6f:	eb e8                	jmp    c000de59 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de71:	43                   	inc    ebx
c000de72:	eb dd                	jmp    c000de51 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de74:	83 c4 1c             	add    esp,0x1c
c000de77:	5b                   	pop    ebx
c000de78:	5e                   	pop    esi
c000de79:	5f                   	pop    edi
c000de7a:	5d                   	pop    ebp
c000de7b:	c3                   	ret    

c000de7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de7c:	55                   	push   ebp
c000de7d:	57                   	push   edi
c000de7e:	31 ff                	xor    edi,edi
c000de80:	56                   	push   esi
c000de81:	53                   	push   ebx
c000de82:	83 ec 1c             	sub    esp,0x1c
c000de85:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de8d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de94:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de9d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dea1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dea5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dea8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000deac:	01 f9                	add    ecx,edi
c000deae:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000deb2:	7d 2f                	jge    c000dee3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000deb4:	31 f6                	xor    esi,esi
c000deb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000deba:	01 f2                	add    edx,esi
c000debc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dec0:	7d 1a                	jge    c000dedc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dec2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dec5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000dec8:	46                   	inc    esi
c000dec9:	51                   	push   ecx
c000deca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dece:	52                   	push   edx
c000decf:	55                   	push   ebp
c000ded0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ded3:	83 c4 10             	add    esp,0x10
c000ded6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000deda:	eb da                	jmp    c000deb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dedc:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dee0:	47                   	inc    edi
c000dee1:	eb c5                	jmp    c000dea8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dee3:	83 c4 1c             	add    esp,0x1c
c000dee6:	5b                   	pop    ebx
c000dee7:	5e                   	pop    esi
c000dee8:	5f                   	pop    edi
c000dee9:	5d                   	pop    ebp
c000deea:	c3                   	ret    
c000deeb:	90                   	nop

c000deec <Video::blit(unsigned int*, int, int, int, int)>:
c000deec:	55                   	push   ebp
c000deed:	ba 00 00 00 00       	mov    edx,0x0
c000def2:	57                   	push   edi
c000def3:	56                   	push   esi
c000def4:	53                   	push   ebx
c000def5:	83 ec 1c             	sub    esp,0x1c
c000def8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000defc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000df00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df04:	85 c0                	test   eax,eax
c000df06:	0f 49 d0             	cmovns edx,eax
c000df09:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000df10:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000df14:	89 eb                	mov    ebx,ebp
c000df16:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000df1a:	01 ea                	add    edx,ebp
c000df1c:	39 da                	cmp    edx,ebx
c000df1e:	7e 54                	jle    c000df74 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000df20:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df26:	7c 4c                	jl     c000df74 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000df28:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df30:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df34:	01 c1                	add    ecx,eax
c000df36:	39 f9                	cmp    ecx,edi
c000df38:	7e 2f                	jle    c000df69 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000df3a:	83 c2 04             	add    edx,0x4
c000df3d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df43:	7c 21                	jl     c000df66 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000df45:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df49:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df4b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000df4e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df52:	55                   	push   ebp
c000df53:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df57:	56                   	push   esi
c000df58:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df66:	47                   	inc    edi
c000df67:	eb c7                	jmp    c000df30 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df69:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df6d:	43                   	inc    ebx
c000df6e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df72:	eb a2                	jmp    c000df16 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df74:	83 c4 1c             	add    esp,0x1c
c000df77:	5b                   	pop    ebx
c000df78:	5e                   	pop    esi
c000df79:	5f                   	pop    edi
c000df7a:	5d                   	pop    ebp
c000df7b:	c3                   	ret    

c000df7c <Video::clearScreen(unsigned int)>:
c000df7c:	57                   	push   edi
c000df7d:	56                   	push   esi
c000df7e:	53                   	push   ebx
c000df7f:	31 db                	xor    ebx,ebx
c000df81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df85:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df8b:	7e 1f                	jle    c000dfac <Video::clearScreen(unsigned int)+0x30>
c000df8d:	31 ff                	xor    edi,edi
c000df8f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df95:	7e 12                	jle    c000dfa9 <Video::clearScreen(unsigned int)+0x2d>
c000df97:	8b 06                	mov    eax,DWORD PTR [esi]
c000df99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9d:	53                   	push   ebx
c000df9e:	57                   	push   edi
c000df9f:	47                   	inc    edi
c000dfa0:	56                   	push   esi
c000dfa1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfa4:	83 c4 10             	add    esp,0x10
c000dfa7:	eb e6                	jmp    c000df8f <Video::clearScreen(unsigned int)+0x13>
c000dfa9:	43                   	inc    ebx
c000dfaa:	eb d9                	jmp    c000df85 <Video::clearScreen(unsigned int)+0x9>
c000dfac:	5b                   	pop    ebx
c000dfad:	5e                   	pop    esi
c000dfae:	5f                   	pop    edi
c000dfaf:	c3                   	ret    

c000dfb0 <Video::putpixel(int, int, unsigned int)>:
c000dfb0:	c7 44 24 04 c8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207c8
c000dfb8:	e9 b8 28 00 00       	jmp    c0010875 <KePanic(char const*)>
c000dfbd:	90                   	nop

c000dfbe <Video::readPixelApprox(int, int)>:
c000dfbe:	83 ec 18             	sub    esp,0x18
c000dfc1:	68 e9 07 02 c0       	push   0xc00207e9
c000dfc6:	e8 aa 28 00 00       	call   c0010875 <KePanic(char const*)>
c000dfcb:	31 c0                	xor    eax,eax
c000dfcd:	83 c4 1c             	add    esp,0x1c
c000dfd0:	c3                   	ret    
c000dfd1:	90                   	nop

c000dfd2 <Video::Video(char const*)>:
c000dfd2:	83 ec 0c             	sub    esp,0xc
c000dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd9:	83 ec 08             	sub    esp,0x8
c000dfdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe0:	50                   	push   eax
c000dfe1:	e8 be df ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000dfe6:	83 c4 10             	add    esp,0x10
c000dfe9:	ba 64 08 02 c0       	mov    edx,0xc0020864
c000dfee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff2:	89 10                	mov    DWORD PTR [eax],edx
c000dff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e002:	90                   	nop
c000e003:	83 c4 0c             	add    esp,0xc
c000e006:	c3                   	ret    
c000e007:	90                   	nop

c000e008 <Video::~Video()>:
c000e008:	83 ec 0c             	sub    esp,0xc
c000e00b:	ba 64 08 02 c0       	mov    edx,0xc0020864
c000e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e014:	89 10                	mov    DWORD PTR [eax],edx
c000e016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	50                   	push   eax
c000e01e:	e8 eb dc ff ff       	call   c000bd0e <Device::~Device()>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	90                   	nop
c000e027:	83 c4 0c             	add    esp,0xc
c000e02a:	c3                   	ret    
c000e02b:	90                   	nop

c000e02c <Video::~Video()>:
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	83 ec 0c             	sub    esp,0xc
c000e032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e036:	e8 cd ff ff ff       	call   c000e008 <Video::~Video()>
c000e03b:	83 c4 10             	add    esp,0x10
c000e03e:	83 ec 08             	sub    esp,0x8
c000e041:	68 64 01 00 00       	push   0x164
c000e046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04a:	e8 5d c8 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	83 c4 0c             	add    esp,0xc
c000e055:	c3                   	ret    

c000e056 <Video::isMonochrome()>:
c000e056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e05a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e060:	c3                   	ret    
c000e061:	90                   	nop

c000e062 <Video::getWidth()>:
c000e062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e066:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e06c:	c3                   	ret    
c000e06d:	90                   	nop

c000e06e <Video::getHeight()>:
c000e06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e072:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e078:	c3                   	ret    
c000e079:	90                   	nop

c000e07a <Video::drawCursor(int, int, unsigned int*, int)>:
c000e07a:	55                   	push   ebp
c000e07b:	57                   	push   edi
c000e07c:	56                   	push   esi
c000e07d:	53                   	push   ebx
c000e07e:	83 ec 2c             	sub    esp,0x2c
c000e081:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e085:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e089:	83 f8 01             	cmp    eax,0x1
c000e08c:	19 c9                	sbb    ecx,ecx
c000e08e:	31 db                	xor    ebx,ebx
c000e090:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e094:	89 ce                	mov    esi,ecx
c000e096:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e09e:	f7 d6                	not    esi
c000e0a0:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e0a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0aa:	01 d8                	add    eax,ebx
c000e0ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0b0:	57                   	push   edi
c000e0b1:	e8 b8 ff ff ff       	call   c000e06e <Video::getHeight()>
c000e0b6:	59                   	pop    ecx
c000e0b7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0bb:	7e 70                	jle    c000e12d <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e0bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0c1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e0c5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0d0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0db:	89 e8                	mov    eax,ebp
c000e0dd:	83 c0 20             	add    eax,0x20
c000e0e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0e4:	57                   	push   edi
c000e0e5:	e8 78 ff ff ff       	call   c000e062 <Video::getWidth()>
c000e0ea:	5a                   	pop    edx
c000e0eb:	39 c5                	cmp    ebp,eax
c000e0ed:	7d 34                	jge    c000e123 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0ef:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0f4:	74 05                	je     c000e0fb <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0f6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0f8:	56                   	push   esi
c000e0f9:	eb 0d                	jmp    c000e108 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0fb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e100:	74 12                	je     c000e114 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e102:	8b 07                	mov    eax,DWORD PTR [edi]
c000e104:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e108:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e10c:	55                   	push   ebp
c000e10d:	57                   	push   edi
c000e10e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e111:	83 c4 10             	add    esp,0x10
c000e114:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e118:	45                   	inc    ebp
c000e119:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e11d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e121:	75 c1                	jne    c000e0e4 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e123:	43                   	inc    ebx
c000e124:	83 fb 20             	cmp    ebx,0x20
c000e127:	0f 85 79 ff ff ff    	jne    c000e0a6 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e12d:	83 c4 2c             	add    esp,0x2c
c000e130:	5b                   	pop    ebx
c000e131:	5e                   	pop    esi
c000e132:	5f                   	pop    edi
c000e133:	5d                   	pop    ebp
c000e134:	c3                   	ret    
c000e135:	90                   	nop

c000e136 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e136:	55                   	push   ebp
c000e137:	57                   	push   edi
c000e138:	56                   	push   esi
c000e139:	53                   	push   ebx
c000e13a:	83 ec 28             	sub    esp,0x28
c000e13d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e141:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e145:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e149:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e14d:	c1 e7 08             	shl    edi,0x8
c000e150:	01 c7                	add    edi,eax
c000e152:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e156:	c1 e6 08             	shl    esi,0x8
c000e159:	01 f0                	add    eax,esi
c000e15b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e15f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e163:	0f af c7             	imul   eax,edi
c000e166:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e16d:	50                   	push   eax
c000e16e:	e8 58 99 ff ff       	call   c0007acb <malloc>
c000e173:	83 c4 10             	add    esp,0x10
c000e176:	85 c0                	test   eax,eax
c000e178:	89 c5                	mov    ebp,eax
c000e17a:	75 10                	jne    c000e18c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e17c:	83 ec 0c             	sub    esp,0xc
c000e17f:	68 14 08 02 c0       	push   0xc0020814
c000e184:	e8 ec 26 00 00       	call   c0010875 <KePanic(char const*)>
c000e189:	83 c4 10             	add    esp,0x10
c000e18c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e190:	ba 12 00 00 00       	mov    edx,0x12
c000e195:	85 c0                	test   eax,eax
c000e197:	74 11                	je     c000e1aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e199:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e19d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e1a1:	c1 fa 03             	sar    edx,0x3
c000e1a4:	0f af d1             	imul   edx,ecx
c000e1a7:	83 c2 12             	add    edx,0x12
c000e1aa:	85 ff                	test   edi,edi
c000e1ac:	74 06                	je     c000e1b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e1ae:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1b2:	75 12                	jne    c000e1c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e1b4:	83 ec 0c             	sub    esp,0xc
c000e1b7:	68 24 08 02 c0       	push   0xc0020824
c000e1bc:	e8 e9 c7 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000e1c1:	e9 b8 00 00 00       	jmp    c000e27e <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e1c6:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1ca:	83 f9 02             	cmp    ecx,0x2
c000e1cd:	0f 85 96 00 00 00    	jne    c000e269 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e1d3:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1d8:	75 0e                	jne    c000e1e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1da:	85 c0                	test   eax,eax
c000e1dc:	75 0a                	jne    c000e1e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1de:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1e1:	83 e8 18             	sub    eax,0x18
c000e1e4:	a8 f7                	test   al,0xf7
c000e1e6:	74 0a                	je     c000e1f2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1e8:	83 ec 0c             	sub    esp,0xc
c000e1eb:	68 39 08 02 c0       	push   0xc0020839
c000e1f0:	eb 7f                	jmp    c000e271 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1fa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e202:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e206:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e20a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e212:	75 0c                	jne    c000e220 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e214:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e219:	c1 e1 18             	shl    ecx,0x18
c000e21c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e220:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e225:	46                   	inc    esi
c000e226:	89 c8                	mov    eax,ecx
c000e228:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e22d:	c1 e0 10             	shl    eax,0x10
c000e230:	c1 e1 08             	shl    ecx,0x8
c000e233:	09 c1                	or     ecx,eax
c000e235:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e239:	09 c1                	or     ecx,eax
c000e23b:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e23f:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e243:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e247:	c1 f8 03             	sar    eax,0x3
c000e24a:	01 c2                	add    edx,eax
c000e24c:	89 f0                	mov    eax,esi
c000e24e:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e252:	39 c7                	cmp    edi,eax
c000e254:	7f b0                	jg     c000e206 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e256:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e25a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e25e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e261:	7e 22                	jle    c000e285 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e263:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e267:	eb 99                	jmp    c000e202 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e269:	50                   	push   eax
c000e26a:	50                   	push   eax
c000e26b:	51                   	push   ecx
c000e26c:	68 47 08 02 c0       	push   0xc0020847
c000e271:	e8 34 c7 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000e276:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e279:	e8 5d 98 ff ff       	call   c0007adb <free>
c000e27e:	83 c4 10             	add    esp,0x10
c000e281:	31 ed                	xor    ebp,ebp
c000e283:	eb 0f                	jmp    c000e294 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e285:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e289:	89 38                	mov    DWORD PTR [eax],edi
c000e28b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e28f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e292:	89 38                	mov    DWORD PTR [eax],edi
c000e294:	83 c4 1c             	add    esp,0x1c
c000e297:	89 e8                	mov    eax,ebp
c000e299:	5b                   	pop    ebx
c000e29a:	5e                   	pop    esi
c000e29b:	5f                   	pop    edi
c000e29c:	5d                   	pop    ebp
c000e29d:	c3                   	ret    

c000e29e <Video::putTGA(int, int, unsigned char*, int)>:
c000e29e:	55                   	push   ebp
c000e29f:	57                   	push   edi
c000e2a0:	56                   	push   esi
c000e2a1:	53                   	push   ebx
c000e2a2:	83 ec 28             	sub    esp,0x28
c000e2a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2a9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e2ad:	50                   	push   eax
c000e2ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2b2:	50                   	push   eax
c000e2b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2bb:	57                   	push   edi
c000e2bc:	e8 75 fe ff ff       	call   c000e136 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2c1:	83 c4 20             	add    esp,0x20
c000e2c4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2c8:	85 c0                	test   eax,eax
c000e2ca:	74 35                	je     c000e301 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2cc:	89 c6                	mov    esi,eax
c000e2ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2d6:	39 d8                	cmp    eax,ebx
c000e2d8:	7e 27                	jle    c000e301 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2da:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e2e2:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e2e6:	39 e9                	cmp    ecx,ebp
c000e2e8:	7e 14                	jle    c000e2fe <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2ea:	83 c6 04             	add    esi,0x4
c000e2ed:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e2ef:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e2f2:	53                   	push   ebx
c000e2f3:	55                   	push   ebp
c000e2f4:	45                   	inc    ebp
c000e2f5:	57                   	push   edi
c000e2f6:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2f9:	83 c4 10             	add    esp,0x10
c000e2fc:	eb e0                	jmp    c000e2de <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2fe:	43                   	inc    ebx
c000e2ff:	eb cd                	jmp    c000e2ce <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e301:	83 c4 1c             	add    esp,0x1c
c000e304:	5b                   	pop    ebx
c000e305:	5e                   	pop    esi
c000e306:	5f                   	pop    edi
c000e307:	5d                   	pop    ebp
c000e308:	c3                   	ret    
c000e309:	66 90                	xchg   ax,ax
c000e30b:	90                   	nop

c000e30c <ACPI::close(int, int, void*)>:
c000e30c:	83 ec 1c             	sub    esp,0x1c
c000e30f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e317:	74 0b                	je     c000e324 <ACPI::close(int, int, void*)+0x18>
c000e319:	b8 00 00 00 00       	mov    eax,0x0
c000e31e:	e9 99 00 00 00       	jmp    c000e3bc <ACPI::close(int, int, void*)+0xb0>
c000e323:	90                   	nop
c000e324:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e329:	75 29                	jne    c000e354 <ACPI::close(int, int, void*)+0x48>
c000e32b:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e330:	85 c0                	test   eax,eax
c000e332:	74 08                	je     c000e33c <ACPI::close(int, int, void*)+0x30>
c000e334:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e339:	ff d0                	call   eax
c000e33b:	90                   	nop
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	68 a8 08 02 c0       	push   0xc00208a8
c000e344:	e8 2c 25 00 00       	call   c0010875 <KePanic(char const*)>
c000e349:	83 c4 10             	add    esp,0x10
c000e34c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e351:	eb 69                	jmp    c000e3bc <ACPI::close(int, int, void*)+0xb0>
c000e353:	90                   	nop
c000e354:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e359:	75 59                	jne    c000e3b4 <ACPI::close(int, int, void*)+0xa8>
c000e35b:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e360:	85 c0                	test   eax,eax
c000e362:	74 08                	je     c000e36c <ACPI::close(int, int, void*)+0x60>
c000e364:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e369:	ff d0                	call   eax
c000e36b:	90                   	nop
c000e36c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e371:	8d 76 00             	lea    esi,[esi+0x0]
c000e374:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e379:	83 e0 02             	and    eax,0x2
c000e37c:	74 1e                	je     c000e39c <ACPI::close(int, int, void*)+0x90>
c000e37e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e385:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e389:	89 c2                	mov    edx,eax
c000e38b:	ec                   	in     al,dx
c000e38c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e390:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e394:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e398:	eb da                	jmp    c000e374 <ACPI::close(int, int, void*)+0x68>
c000e39a:	66 90                	xchg   ax,ax
c000e39c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e3a3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e3a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3b0:	ee                   	out    dx,al
c000e3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3bc:	83 c4 1c             	add    esp,0x1c
c000e3bf:	c3                   	ret    

c000e3c0 <findRSDP()>:
c000e3c0:	83 ec 1c             	sub    esp,0x1c
c000e3c3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3c8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3ce:	83 e0 04             	and    eax,0x4
c000e3d1:	0f b6 c0             	movzx  eax,al
c000e3d4:	85 c0                	test   eax,eax
c000e3d6:	75 08                	jne    c000e3e0 <findRSDP()+0x20>
c000e3d8:	b8 00 00 00 00       	mov    eax,0x0
c000e3dd:	eb 75                	jmp    c000e454 <findRSDP()+0x94>
c000e3df:	90                   	nop
c000e3e0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3e5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3ea:	7f 1c                	jg     c000e408 <findRSDP()+0x48>
c000e3ec:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3f1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3f7:	83 e2 fb             	and    edx,0xfffffffb
c000e3fa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e400:	b8 00 00 00 00       	mov    eax,0x0
c000e405:	eb 4d                	jmp    c000e454 <findRSDP()+0x94>
c000e407:	90                   	nop
c000e408:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e410:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e418:	77 32                	ja     c000e44c <findRSDP()+0x8c>
c000e41a:	83 ec 04             	sub    esp,0x4
c000e41d:	6a 08                	push   0x8
c000e41f:	68 43 09 02 c0       	push   0xc0020943
c000e424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e428:	e8 53 1f ff ff       	call   c0000380 <memcmp>
c000e42d:	83 c4 10             	add    esp,0x10
c000e430:	85 c0                	test   eax,eax
c000e432:	0f 94 c0             	sete   al
c000e435:	0f b6 c0             	movzx  eax,al
c000e438:	85 c0                	test   eax,eax
c000e43a:	74 08                	je     c000e444 <findRSDP()+0x84>
c000e43c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e440:	eb 12                	jmp    c000e454 <findRSDP()+0x94>
c000e442:	66 90                	xchg   ax,ax
c000e444:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e449:	eb c5                	jmp    c000e410 <findRSDP()+0x50>
c000e44b:	90                   	nop
c000e44c:	b8 00 00 00 00       	mov    eax,0x0
c000e451:	8d 76 00             	lea    esi,[esi+0x0]
c000e454:	83 c4 1c             	add    esp,0x1c
c000e457:	c3                   	ret    

c000e458 <loadACPITables(unsigned char*)>:
c000e458:	57                   	push   edi
c000e459:	56                   	push   esi
c000e45a:	53                   	push   ebx
c000e45b:	83 ec 60             	sub    esp,0x60
c000e45e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e463:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e469:	83 e0 04             	and    eax,0x4
c000e46c:	0f b6 c0             	movzx  eax,al
c000e46f:	85 c0                	test   eax,eax
c000e471:	0f 84 41 02 00 00    	je     c000e6b8 <loadACPITables(unsigned char*)+0x260>
c000e477:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e47c:	0f b6 c0             	movzx  eax,al
c000e47f:	85 c0                	test   eax,eax
c000e481:	74 79                	je     c000e4fc <loadACPITables(unsigned char*)+0xa4>
c000e483:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e487:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e48b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e48f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e492:	83 e8 24             	sub    eax,0x24
c000e495:	c1 e8 03             	shr    eax,0x3
c000e498:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e49c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e4a4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4a8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4ac:	0f 8d ba 00 00 00    	jge    c000e56c <loadACPITables(unsigned char*)+0x114>
c000e4b2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4b6:	83 c0 24             	add    eax,0x24
c000e4b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4bd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4c1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4c5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4c9:	c1 e0 03             	shl    eax,0x3
c000e4cc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4d0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4d9:	89 c1                	mov    ecx,eax
c000e4db:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4e0:	8d 50 01             	lea    edx,[eax+0x1]
c000e4e3:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4e9:	89 ca                	mov    edx,ecx
c000e4eb:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4f2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4f7:	eb ab                	jmp    c000e4a4 <loadACPITables(unsigned char*)+0x4c>
c000e4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4fc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e500:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e504:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e50b:	83 e8 24             	sub    eax,0x24
c000e50e:	c1 e8 02             	shr    eax,0x2
c000e511:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e515:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e51d:	8d 76 00             	lea    esi,[esi+0x0]
c000e520:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e524:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e528:	7d 42                	jge    c000e56c <loadACPITables(unsigned char*)+0x114>
c000e52a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e52e:	83 c0 24             	add    eax,0x24
c000e531:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e535:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e539:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e53d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e541:	c1 e0 02             	shl    eax,0x2
c000e544:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e548:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e54c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e54e:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e553:	8d 50 01             	lea    edx,[eax+0x1]
c000e556:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e55c:	89 ca                	mov    edx,ecx
c000e55e:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e565:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e56a:	eb b4                	jmp    c000e520 <loadACPITables(unsigned char*)+0xc8>
c000e56c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e574:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e579:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e57d:	0f 8d 39 01 00 00    	jge    c000e6bc <loadACPITables(unsigned char*)+0x264>
c000e583:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e587:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e58e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e592:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e596:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e59a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e59e:	25 ff 0f 00 00       	and    eax,0xfff
c000e5a3:	89 c6                	mov    esi,eax
c000e5a5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5ab:	83 ec 0c             	sub    esp,0xc
c000e5ae:	6a 01                	push   0x1
c000e5b0:	e8 50 b0 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e5b5:	83 c4 10             	add    esp,0x10
c000e5b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5c2:	83 ec 0c             	sub    esp,0xc
c000e5c5:	6a 01                	push   0x1
c000e5c7:	6a 01                	push   0x1
c000e5c9:	50                   	push   eax
c000e5ca:	52                   	push   edx
c000e5cb:	53                   	push   ebx
c000e5cc:	e8 2d ba ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5d1:	83 c4 20             	add    esp,0x20
c000e5d4:	09 f0                	or     eax,esi
c000e5d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5de:	c1 e0 03             	shl    eax,0x3
c000e5e1:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5f2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e602:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e60a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e60e:	89 c6                	mov    esi,eax
c000e610:	89 d7                	mov    edi,edx
c000e612:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e614:	89 c8                	mov    eax,ecx
c000e616:	89 fa                	mov    edx,edi
c000e618:	89 f3                	mov    ebx,esi
c000e61a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e61e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e622:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e626:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e62a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e62d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e631:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e635:	05 00 10 00 00       	add    eax,0x1000
c000e63a:	c1 e8 0c             	shr    eax,0xc
c000e63d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e645:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e649:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e64d:	25 ff 0f 00 00       	and    eax,0xfff
c000e652:	89 c6                	mov    esi,eax
c000e654:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e65a:	83 ec 0c             	sub    esp,0xc
c000e65d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e661:	e8 9f af ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e666:	83 c4 10             	add    esp,0x10
c000e669:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e66d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e673:	83 ec 0c             	sub    esp,0xc
c000e676:	6a 01                	push   0x1
c000e678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e67c:	50                   	push   eax
c000e67d:	52                   	push   edx
c000e67e:	53                   	push   ebx
c000e67f:	e8 7a b9 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e684:	83 c4 20             	add    esp,0x20
c000e687:	09 f0                	or     eax,esi
c000e689:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e68d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e691:	83 ec 0c             	sub    esp,0xc
c000e694:	50                   	push   eax
c000e695:	e8 7d b2 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000e69a:	83 c4 10             	add    esp,0x10
c000e69d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e6a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e6a5:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e6ac:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e6b1:	e9 be fe ff ff       	jmp    c000e574 <loadACPITables(unsigned char*)+0x11c>
c000e6b6:	66 90                	xchg   ax,ax
c000e6b8:	90                   	nop
c000e6b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6bc:	83 c4 60             	add    esp,0x60
c000e6bf:	5b                   	pop    ebx
c000e6c0:	5e                   	pop    esi
c000e6c1:	5f                   	pop    edi
c000e6c2:	c3                   	ret    
c000e6c3:	90                   	nop

c000e6c4 <findRSDT(unsigned char*)>:
c000e6c4:	57                   	push   edi
c000e6c5:	56                   	push   esi
c000e6c6:	53                   	push   ebx
c000e6c7:	83 ec 50             	sub    esp,0x50
c000e6ca:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e6cf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6d5:	83 e0 04             	and    eax,0x4
c000e6d8:	0f b6 c0             	movzx  eax,al
c000e6db:	85 c0                	test   eax,eax
c000e6dd:	75 0d                	jne    c000e6ec <findRSDT(unsigned char*)+0x28>
c000e6df:	b8 00 00 00 00       	mov    eax,0x0
c000e6e4:	e9 2b 01 00 00       	jmp    c000e814 <findRSDT(unsigned char*)+0x150>
c000e6e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6ec:	89 e0                	mov    eax,esp
c000e6ee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6f2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6fa:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e706:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e70a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e70e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e712:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e716:	89 c6                	mov    esi,eax
c000e718:	89 d7                	mov    edi,edx
c000e71a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e71c:	89 c8                	mov    eax,ecx
c000e71e:	89 fa                	mov    edx,edi
c000e720:	89 f3                	mov    ebx,esi
c000e722:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e726:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e72a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e72e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e732:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e736:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e73e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e746:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e752:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e756:	25 ff 0f 00 00       	and    eax,0xfff
c000e75b:	89 c6                	mov    esi,eax
c000e75d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e763:	83 ec 0c             	sub    esp,0xc
c000e766:	6a 02                	push   0x2
c000e768:	e8 98 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e774:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	6a 01                	push   0x1
c000e77f:	6a 02                	push   0x2
c000e781:	50                   	push   eax
c000e782:	52                   	push   edx
c000e783:	53                   	push   ebx
c000e784:	e8 75 b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e789:	83 c4 20             	add    esp,0x20
c000e78c:	09 f0                	or     eax,esi
c000e78e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e792:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e796:	25 ff 0f 00 00       	and    eax,0xfff
c000e79b:	89 c6                	mov    esi,eax
c000e79d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e7a3:	83 ec 0c             	sub    esp,0xc
c000e7a6:	6a 02                	push   0x2
c000e7a8:	e8 58 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e7ad:	83 c4 10             	add    esp,0x10
c000e7b0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7b4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	6a 01                	push   0x1
c000e7bf:	6a 02                	push   0x2
c000e7c1:	50                   	push   eax
c000e7c2:	52                   	push   edx
c000e7c3:	53                   	push   ebx
c000e7c4:	e8 35 b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7c9:	83 c4 20             	add    esp,0x20
c000e7cc:	09 f0                	or     eax,esi
c000e7ce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7d2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7d7:	85 c0                	test   eax,eax
c000e7d9:	75 11                	jne    c000e7ec <findRSDT(unsigned char*)+0x128>
c000e7db:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7ea:	eb 24                	jmp    c000e810 <findRSDT(unsigned char*)+0x14c>
c000e7ec:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7f1:	83 f8 02             	cmp    eax,0x2
c000e7f4:	75 12                	jne    c000e808 <findRSDT(unsigned char*)+0x144>
c000e7f6:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7fd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e801:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e805:	eb 09                	jmp    c000e810 <findRSDT(unsigned char*)+0x14c>
c000e807:	90                   	nop
c000e808:	b8 00 00 00 00       	mov    eax,0x0
c000e80d:	eb 05                	jmp    c000e814 <findRSDT(unsigned char*)+0x150>
c000e80f:	90                   	nop
c000e810:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e814:	83 c4 50             	add    esp,0x50
c000e817:	5b                   	pop    ebx
c000e818:	5e                   	pop    esi
c000e819:	5f                   	pop    edi
c000e81a:	c3                   	ret    
c000e81b:	90                   	nop

c000e81c <findDataTable(unsigned char*, char*)>:
c000e81c:	83 ec 1c             	sub    esp,0x1c
c000e81f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e824:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e82a:	83 e0 04             	and    eax,0x4
c000e82d:	0f b6 c0             	movzx  eax,al
c000e830:	85 c0                	test   eax,eax
c000e832:	75 08                	jne    c000e83c <findDataTable(unsigned char*, char*)+0x20>
c000e834:	b8 00 00 00 00       	mov    eax,0x0
c000e839:	eb 5d                	jmp    c000e898 <findDataTable(unsigned char*, char*)+0x7c>
c000e83b:	90                   	nop
c000e83c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e844:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e849:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e84d:	7d 41                	jge    c000e890 <findDataTable(unsigned char*, char*)+0x74>
c000e84f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e853:	c1 e0 03             	shl    eax,0x3
c000e856:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e85b:	83 ec 04             	sub    esp,0x4
c000e85e:	6a 04                	push   0x4
c000e860:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e864:	50                   	push   eax
c000e865:	e8 16 1b ff ff       	call   c0000380 <memcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	0f b6 c0             	movzx  eax,al
c000e875:	85 c0                	test   eax,eax
c000e877:	74 0f                	je     c000e888 <findDataTable(unsigned char*, char*)+0x6c>
c000e879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87d:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e884:	eb 12                	jmp    c000e898 <findDataTable(unsigned char*, char*)+0x7c>
c000e886:	66 90                	xchg   ax,ax
c000e888:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e88d:	eb b5                	jmp    c000e844 <findDataTable(unsigned char*, char*)+0x28>
c000e88f:	90                   	nop
c000e890:	b8 00 00 00 00       	mov    eax,0x0
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	83 c4 1c             	add    esp,0x1c
c000e89b:	c3                   	ret    

c000e89c <scanMADT()>:
c000e89c:	53                   	push   ebx
c000e89d:	83 ec 38             	sub    esp,0x38
c000e8a0:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e8a5:	25 00 04 00 00       	and    eax,0x400
c000e8aa:	74 14                	je     c000e8c0 <scanMADT()+0x24>
c000e8ac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8b1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8b7:	83 e2 fb             	and    edx,0xfffffffb
c000e8ba:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8c0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8c5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8cb:	83 e0 04             	and    eax,0x4
c000e8ce:	0f b6 c0             	movzx  eax,al
c000e8d1:	85 c0                	test   eax,eax
c000e8d3:	0f 84 6b 04 00 00    	je     c000ed44 <scanMADT()+0x4a8>
c000e8d9:	e8 e2 fa ff ff       	call   c000e3c0 <findRSDP()>
c000e8de:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8e3:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8e8:	85 c0                	test   eax,eax
c000e8ea:	75 1c                	jne    c000e908 <scanMADT()+0x6c>
c000e8ec:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8f1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8f7:	83 e2 fb             	and    edx,0xfffffffb
c000e8fa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e900:	e9 47 04 00 00       	jmp    c000ed4c <scanMADT()+0x4b0>
c000e905:	8d 76 00             	lea    esi,[esi+0x0]
c000e908:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e90d:	83 ec 0c             	sub    esp,0xc
c000e910:	50                   	push   eax
c000e911:	e8 ae fd ff ff       	call   c000e6c4 <findRSDT(unsigned char*)>
c000e916:	83 c4 10             	add    esp,0x10
c000e919:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e91e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e923:	85 c0                	test   eax,eax
c000e925:	75 19                	jne    c000e940 <scanMADT()+0xa4>
c000e927:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e92c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e932:	83 e2 fb             	and    edx,0xfffffffb
c000e935:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e93b:	e9 0c 04 00 00       	jmp    c000ed4c <scanMADT()+0x4b0>
c000e940:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e945:	83 ec 0c             	sub    esp,0xc
c000e948:	50                   	push   eax
c000e949:	e8 0a fb ff ff       	call   c000e458 <loadACPITables(unsigned char*)>
c000e94e:	83 c4 10             	add    esp,0x10
c000e951:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e956:	83 ec 08             	sub    esp,0x8
c000e959:	68 4c 09 02 c0       	push   0xc002094c
c000e95e:	50                   	push   eax
c000e95f:	e8 b8 fe ff ff       	call   c000e81c <findDataTable(unsigned char*, char*)>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e96b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e970:	75 1a                	jne    c000e98c <scanMADT()+0xf0>
c000e972:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e977:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e97d:	83 e2 fe             	and    edx,0xfffffffe
c000e980:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e986:	e9 c1 03 00 00       	jmp    c000ed4c <scanMADT()+0x4b0>
c000e98b:	90                   	nop
c000e98c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e994:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e99b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e99f:	0f 87 a7 03 00 00    	ja     c000ed4c <scanMADT()+0x4b0>
c000e9a5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e9ad:	0f 87 99 03 00 00    	ja     c000ed4c <scanMADT()+0x4b0>
c000e9b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9ca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9ce:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e9d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9e5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9e9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9ee:	83 f8 02             	cmp    eax,0x2
c000e9f1:	0f 86 51 03 00 00    	jbe    c000ed48 <scanMADT()+0x4ac>
c000e9f7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9fc:	85 c0                	test   eax,eax
c000e9fe:	75 58                	jne    c000ea58 <scanMADT()+0x1bc>
c000ea00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea04:	8d 50 01             	lea    edx,[eax+0x1]
c000ea07:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea0b:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea11:	0f b6 d2             	movzx  edx,dl
c000ea14:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea18:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea1c:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ea22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea26:	8d 50 01             	lea    edx,[eax+0x1]
c000ea29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea2d:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea33:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea36:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea3c:	0f b6 d2             	movzx  edx,dl
c000ea3f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea43:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea47:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea4d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea52:	e9 d9 02 00 00       	jmp    c000ed30 <scanMADT()+0x494>
c000ea57:	90                   	nop
c000ea58:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea5d:	83 f8 01             	cmp    eax,0x1
c000ea60:	0f 85 1a 01 00 00    	jne    c000eb80 <scanMADT()+0x2e4>
c000ea66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea6a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea71:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea77:	0f b6 d2             	movzx  edx,dl
c000ea7a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea7e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea82:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea88:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea95:	01 d0                	add    eax,edx
c000ea97:	83 c0 2c             	add    eax,0x2c
c000ea9a:	8a 00                	mov    al,BYTE PTR [eax]
c000ea9c:	0f b6 d0             	movzx  edx,al
c000ea9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa3:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaaa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eaae:	0f b6 c0             	movzx  eax,al
c000eab1:	c1 e0 08             	shl    eax,0x8
c000eab4:	89 d1                	mov    ecx,edx
c000eab6:	09 c1                	or     ecx,eax
c000eab8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabc:	8d 50 02             	lea    edx,[eax+0x2]
c000eabf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eac7:	0f b6 c0             	movzx  eax,al
c000eaca:	c1 e0 10             	shl    eax,0x10
c000eacd:	09 c1                	or     ecx,eax
c000eacf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead3:	8d 50 03             	lea    edx,[eax+0x3]
c000ead6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eada:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eade:	0f b6 c0             	movzx  eax,al
c000eae1:	c1 e0 18             	shl    eax,0x18
c000eae4:	09 c1                	or     ecx,eax
c000eae6:	89 ca                	mov    edx,ecx
c000eae8:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eaed:	0f b6 c0             	movzx  eax,al
c000eaf0:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eaf7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eafc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb04:	01 d0                	add    eax,edx
c000eb06:	83 c0 2c             	add    eax,0x2c
c000eb09:	8a 00                	mov    al,BYTE PTR [eax]
c000eb0b:	0f b6 d0             	movzx  edx,al
c000eb0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb12:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb19:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb1d:	0f b6 c0             	movzx  eax,al
c000eb20:	c1 e0 08             	shl    eax,0x8
c000eb23:	89 d1                	mov    ecx,edx
c000eb25:	09 c1                	or     ecx,eax
c000eb27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb2b:	8d 50 02             	lea    edx,[eax+0x2]
c000eb2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb32:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb36:	0f b6 c0             	movzx  eax,al
c000eb39:	c1 e0 10             	shl    eax,0x10
c000eb3c:	09 c1                	or     ecx,eax
c000eb3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb42:	8d 50 03             	lea    edx,[eax+0x3]
c000eb45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb49:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb4d:	0f b6 c0             	movzx  eax,al
c000eb50:	c1 e0 18             	shl    eax,0x18
c000eb53:	09 c1                	or     ecx,eax
c000eb55:	89 ca                	mov    edx,ecx
c000eb57:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb5c:	0f b6 c0             	movzx  eax,al
c000eb5f:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb66:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb6b:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb70:	83 c0 01             	add    eax,0x1
c000eb73:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb78:	e9 b3 01 00 00       	jmp    c000ed30 <scanMADT()+0x494>
c000eb7d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb80:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb85:	83 f8 02             	cmp    eax,0x2
c000eb88:	0f 85 ea 00 00 00    	jne    c000ec78 <scanMADT()+0x3dc>
c000eb8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb92:	8d 50 01             	lea    edx,[eax+0x1]
c000eb95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb9d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eba1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eba5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eba9:	8d 50 01             	lea    edx,[eax+0x1]
c000ebac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebb8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc4:	01 d0                	add    eax,edx
c000ebc6:	83 c0 2c             	add    eax,0x2c
c000ebc9:	8a 00                	mov    al,BYTE PTR [eax]
c000ebcb:	0f b6 d0             	movzx  edx,al
c000ebce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebd2:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebd9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebdd:	0f b6 c0             	movzx  eax,al
c000ebe0:	c1 e0 08             	shl    eax,0x8
c000ebe3:	89 d1                	mov    ecx,edx
c000ebe5:	09 c1                	or     ecx,eax
c000ebe7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebeb:	8d 50 02             	lea    edx,[eax+0x2]
c000ebee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebf2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebf6:	0f b6 c0             	movzx  eax,al
c000ebf9:	c1 e0 10             	shl    eax,0x10
c000ebfc:	09 c1                	or     ecx,eax
c000ebfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec02:	8d 50 03             	lea    edx,[eax+0x3]
c000ec05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec09:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec0d:	0f b6 c0             	movzx  eax,al
c000ec10:	c1 e0 18             	shl    eax,0x18
c000ec13:	09 c8                	or     eax,ecx
c000ec15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec19:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec26:	01 d0                	add    eax,edx
c000ec28:	83 c0 2c             	add    eax,0x2c
c000ec2b:	8a 00                	mov    al,BYTE PTR [eax]
c000ec2d:	0f b6 d0             	movzx  edx,al
c000ec30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec34:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec3b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec3f:	0f b6 c0             	movzx  eax,al
c000ec42:	c1 e0 08             	shl    eax,0x8
c000ec45:	09 d0                	or     eax,edx
c000ec47:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec4c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec51:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec5a:	88 90 c0 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde040],dl
c000ec60:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec65:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ec6a:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec72:	e9 b9 00 00 00       	jmp    c000ed30 <scanMADT()+0x494>
c000ec77:	90                   	nop
c000ec78:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec7d:	83 f8 04             	cmp    eax,0x4
c000ec80:	0f 85 9a 00 00 00    	jne    c000ed20 <scanMADT()+0x484>
c000ec86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec8a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec95:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec99:	0f b6 c0             	movzx  eax,al
c000ec9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eca0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eca4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca8:	01 d0                	add    eax,edx
c000ecaa:	83 c0 2c             	add    eax,0x2c
c000ecad:	8a 00                	mov    al,BYTE PTR [eax]
c000ecaf:	0f b6 d0             	movzx  edx,al
c000ecb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecb6:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecbd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecc1:	0f b6 c0             	movzx  eax,al
c000ecc4:	c1 e0 08             	shl    eax,0x8
c000ecc7:	09 d0                	or     eax,edx
c000ecc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eccd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecd6:	8d 50 01             	lea    edx,[eax+0x1]
c000ecd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ece1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ece5:	0f b6 c0             	movzx  eax,al
c000ece8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecf0:	c1 e0 08             	shl    eax,0x8
c000ecf3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecf7:	89 c1                	mov    ecx,eax
c000ecf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfd:	c1 e0 18             	shl    eax,0x18
c000ed00:	89 c3                	mov    ebx,eax
c000ed02:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ed07:	8d 50 01             	lea    edx,[eax+0x1]
c000ed0a:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ed10:	09 d9                	or     ecx,ebx
c000ed12:	89 ca                	mov    edx,ecx
c000ed14:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ed1b:	eb 13                	jmp    c000ed30 <scanMADT()+0x494>
c000ed1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed20:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ed25:	83 f8 05             	cmp    eax,0x5
c000ed28:	75 06                	jne    c000ed30 <scanMADT()+0x494>
c000ed2a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed2f:	90                   	nop
c000ed30:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ed35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed39:	01 d0                	add    eax,edx
c000ed3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed3f:	e9 50 fc ff ff       	jmp    c000e994 <scanMADT()+0xf8>
c000ed44:	90                   	nop
c000ed45:	eb 05                	jmp    c000ed4c <scanMADT()+0x4b0>
c000ed47:	90                   	nop
c000ed48:	90                   	nop
c000ed49:	8d 76 00             	lea    esi,[esi+0x0]
c000ed4c:	83 c4 38             	add    esp,0x38
c000ed4f:	5b                   	pop    ebx
c000ed50:	c3                   	ret    
c000ed51:	90                   	nop
c000ed52:	66 90                	xchg   ax,ax

c000ed54 <ACPI::ACPI()>:
c000ed54:	83 ec 0c             	sub    esp,0xc
c000ed57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed5b:	83 ec 08             	sub    esp,0x8
c000ed5e:	68 51 09 02 c0       	push   0xc0020951
c000ed63:	50                   	push   eax
c000ed64:	e8 3b d2 ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000ed69:	83 c4 10             	add    esp,0x10
c000ed6c:	ba c0 0a 02 c0       	mov    edx,0xc0020ac0
c000ed71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed75:	89 10                	mov    DWORD PTR [eax],edx
c000ed77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed7b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed86:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed94:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed9e:	e8 f9 fa ff ff       	call   c000e89c <scanMADT()>
c000eda3:	90                   	nop
c000eda4:	83 c4 0c             	add    esp,0xc
c000eda7:	c3                   	ret    

c000eda8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000eda8:	83 ec 2c             	sub    esp,0x2c
c000edab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000edaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edb3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000edb7:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000edbb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000edc0:	88 c8                	mov    al,cl
c000edc2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edc6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000edcb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edd3:	90                   	nop
c000edd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edd8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edde:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ede2:	0f 8d b0 00 00 00    	jge    c000ee98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ede8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edf0:	83 c2 2a             	add    edx,0x2a
c000edf3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edf7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000edfc:	0f b7 c0             	movzx  eax,ax
c000edff:	39 c2                	cmp    edx,eax
c000ee01:	0f 85 85 00 00 00    	jne    c000ee8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ee07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee0f:	83 c2 2a             	add    edx,0x2a
c000ee12:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee16:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ee1b:	0f b6 c0             	movzx  eax,al
c000ee1e:	39 c2                	cmp    edx,eax
c000ee20:	75 6a                	jne    c000ee8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ee22:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee27:	85 c0                	test   eax,eax
c000ee29:	74 3d                	je     c000ee68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ee2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee33:	83 c2 2a             	add    edx,0x2a
c000ee36:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee41:	39 c2                	cmp    edx,eax
c000ee43:	74 13                	je     c000ee58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	68 cc 08 02 c0       	push   0xc00208cc
c000ee4d:	e8 23 1a 00 00       	call   c0010875 <KePanic(char const*)>
c000ee52:	83 c4 10             	add    esp,0x10
c000ee55:	8d 76 00             	lea    esi,[esi+0x0]
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	68 56 09 02 c0       	push   0xc0020956
c000ee60:	e8 10 1a 00 00       	call   c0010875 <KePanic(char const*)>
c000ee65:	83 c4 10             	add    esp,0x10
c000ee68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee74:	83 c2 2a             	add    edx,0x2a
c000ee77:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee7b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee7d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee80:	89 01                	mov    DWORD PTR [ecx],eax
c000ee82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee8a:	66 90                	xchg   ax,ax
c000ee8c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee91:	e9 3e ff ff ff       	jmp    c000edd4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee96:	66 90                	xchg   ax,ax
c000ee98:	90                   	nop
c000ee99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee9d:	83 c4 2c             	add    esp,0x2c
c000eea0:	c2 04 00             	ret    0x4
c000eea3:	90                   	nop

c000eea4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000eea4:	83 ec 1c             	sub    esp,0x1c
c000eea7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eeab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eeaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeb3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeb8:	88 c8                	mov    al,cl
c000eeba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eebe:	88 d0                	mov    al,dl
c000eec0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed2:	83 c2 2a             	add    edx,0x2a
c000eed5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000eed9:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000eedd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeeb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eeee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eef2:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000eef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eefb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef01:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ef05:	83 c0 01             	add    eax,0x1
c000ef08:	88 c1                	mov    cl,al
c000ef0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0e:	83 c2 2a             	add    edx,0x2a
c000ef11:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef19:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef23:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef2a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef32:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef38:	8d 50 01             	lea    edx,[eax+0x1]
c000ef3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef3f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef49:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef4f:	3d 00 02 00 00       	cmp    eax,0x200
c000ef54:	75 12                	jne    c000ef68 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef56:	83 ec 0c             	sub    esp,0xc
c000ef59:	68 65 09 02 c0       	push   0xc0020965
c000ef5e:	e8 12 19 00 00       	call   c0010875 <KePanic(char const*)>
c000ef63:	83 c4 10             	add    esp,0x10
c000ef66:	66 90                	xchg   ax,ax
c000ef68:	90                   	nop
c000ef69:	83 c4 1c             	add    esp,0x1c
c000ef6c:	c3                   	ret    
c000ef6d:	90                   	nop
c000ef6e:	66 90                	xchg   ax,ax

c000ef70 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef70:	b8 00 00 00 00       	mov    eax,0x0
c000ef75:	c3                   	ret    
c000ef76:	66 90                	xchg   ax,ax

c000ef78 <ACPI::detectPCI()>:
c000ef78:	53                   	push   ebx
c000ef79:	83 ec 28             	sub    esp,0x28
c000ef7c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef81:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef86:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef8b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef91:	83 e0 04             	and    eax,0x4
c000ef94:	0f b6 c0             	movzx  eax,al
c000ef97:	85 c0                	test   eax,eax
c000ef99:	74 2d                	je     c000efc8 <ACPI::detectPCI()+0x50>
c000ef9b:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000efa0:	83 ec 08             	sub    esp,0x8
c000efa3:	68 82 09 02 c0       	push   0xc0020982
c000efa8:	50                   	push   eax
c000efa9:	e8 6e f8 ff ff       	call   c000e81c <findDataTable(unsigned char*, char*)>
c000efae:	83 c4 10             	add    esp,0x10
c000efb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efb5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efba:	74 0c                	je     c000efc8 <ACPI::detectPCI()+0x50>
c000efbc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efc1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efc6:	66 90                	xchg   ax,ax
c000efc8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd4:	8a 00                	mov    al,BYTE PTR [eax]
c000efd6:	0f b6 c0             	movzx  eax,al
c000efd9:	83 f8 01             	cmp    eax,0x1
c000efdc:	75 0e                	jne    c000efec <ACPI::detectPCI()+0x74>
c000efde:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efe8:	eb 2e                	jmp    c000f018 <ACPI::detectPCI()+0xa0>
c000efea:	66 90                	xchg   ax,ax
c000efec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eff0:	8a 00                	mov    al,BYTE PTR [eax]
c000eff2:	0f b6 c0             	movzx  eax,al
c000eff5:	83 f8 02             	cmp    eax,0x2
c000eff8:	75 1e                	jne    c000f018 <ACPI::detectPCI()+0xa0>
c000effa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efff:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f004:	85 c0                	test   eax,eax
c000f006:	74 10                	je     c000f018 <ACPI::detectPCI()+0xa0>
c000f008:	83 ec 0c             	sub    esp,0xc
c000f00b:	68 fc 08 02 c0       	push   0xc00208fc
c000f010:	e8 60 18 00 00       	call   c0010875 <KePanic(char const*)>
c000f015:	83 c4 10             	add    esp,0x10
c000f018:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f01c:	83 f0 01             	xor    eax,0x1
c000f01f:	0f b6 c0             	movzx  eax,al
c000f022:	85 c0                	test   eax,eax
c000f024:	74 46                	je     c000f06c <ACPI::detectPCI()+0xf4>
c000f026:	e8 05 11 ff ff       	call   c0000130 <manualPCIProbe>
c000f02b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f02f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f034:	75 0e                	jne    c000f044 <ACPI::detectPCI()+0xcc>
c000f036:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f03b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f040:	eb 2a                	jmp    c000f06c <ACPI::detectPCI()+0xf4>
c000f042:	66 90                	xchg   ax,ax
c000f044:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f049:	75 21                	jne    c000f06c <ACPI::detectPCI()+0xf4>
c000f04b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f050:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f055:	85 c0                	test   eax,eax
c000f057:	74 13                	je     c000f06c <ACPI::detectPCI()+0xf4>
c000f059:	83 ec 0c             	sub    esp,0xc
c000f05c:	68 fc 08 02 c0       	push   0xc00208fc
c000f061:	e8 0f 18 00 00       	call   c0010875 <KePanic(char const*)>
c000f066:	83 c4 10             	add    esp,0x10
c000f069:	8d 76 00             	lea    esi,[esi+0x0]
c000f06c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f071:	85 c0                	test   eax,eax
c000f073:	0f 84 87 00 00 00    	je     c000f100 <ACPI::detectPCI()+0x188>
c000f079:	83 ec 0c             	sub    esp,0xc
c000f07c:	68 87 09 02 c0       	push   0xc0020987
c000f081:	e8 72 11 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c000f086:	83 c4 10             	add    esp,0x10
c000f089:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f091:	83 ec 0c             	sub    esp,0xc
c000f094:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f098:	e8 2e 8a ff ff       	call   c0007acb <malloc>
c000f09d:	83 c4 10             	add    esp,0x10
c000f0a0:	89 c3                	mov    ebx,eax
c000f0a2:	83 ec 0c             	sub    esp,0xc
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 c7 af 00 00       	call   c001a072 <PCI::PCI()>
c000f0ab:	83 c4 10             	add    esp,0x10
c000f0ae:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f0b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0b6:	83 ec 08             	sub    esp,0x8
c000f0b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0bd:	50                   	push   eax
c000f0be:	e8 49 cd ff ff       	call   c000be0c <Device::addChild(Device*)>
c000f0c3:	83 c4 10             	add    esp,0x10
c000f0c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0cc:	83 c0 08             	add    eax,0x8
c000f0cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f0d6:	85 d2                	test   edx,edx
c000f0d8:	74 0a                	je     c000f0e4 <ACPI::detectPCI()+0x16c>
c000f0da:	ba 01 00 00 00       	mov    edx,0x1
c000f0df:	eb 0b                	jmp    c000f0ec <ACPI::detectPCI()+0x174>
c000f0e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e4:	ba 02 00 00 00       	mov    edx,0x2
c000f0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0ec:	6a 00                	push   0x0
c000f0ee:	6a 00                	push   0x0
c000f0f0:	52                   	push   edx
c000f0f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0f5:	ff d0                	call   eax
c000f0f7:	83 c4 10             	add    esp,0x10
c000f0fa:	e9 91 00 00 00       	jmp    c000f190 <ACPI::detectPCI()+0x218>
c000f0ff:	90                   	nop
c000f100:	83 ec 0c             	sub    esp,0xc
c000f103:	68 9f 09 02 c0       	push   0xc002099f
c000f108:	e8 eb 10 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c000f10d:	83 c4 10             	add    esp,0x10
c000f110:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f117:	83 ec 0c             	sub    esp,0xc
c000f11a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f11e:	e8 a8 89 ff ff       	call   c0007acb <malloc>
c000f123:	83 c4 10             	add    esp,0x10
c000f126:	89 c3                	mov    ebx,eax
c000f128:	83 ec 0c             	sub    esp,0xc
c000f12b:	53                   	push   ebx
c000f12c:	e8 e9 ba 00 00       	call   c001ac1a <IDE::IDE()>
c000f131:	83 c4 10             	add    esp,0x10
c000f134:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f13c:	83 ec 08             	sub    esp,0x8
c000f13f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f143:	50                   	push   eax
c000f144:	e8 c3 cc ff ff       	call   c000be0c <Device::addChild(Device*)>
c000f149:	83 c4 10             	add    esp,0x10
c000f14c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f150:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f15a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f15e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f167:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f16b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f178:	8b 00                	mov    eax,DWORD PTR [eax]
c000f17a:	83 c0 08             	add    eax,0x8
c000f17d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f17f:	6a 00                	push   0x0
c000f181:	6a 00                	push   0x0
c000f183:	6a 00                	push   0x0
c000f185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f189:	ff d0                	call   eax
c000f18b:	83 c4 10             	add    esp,0x10
c000f18e:	66 90                	xchg   ax,ax
c000f190:	90                   	nop
c000f191:	83 c4 28             	add    esp,0x28
c000f194:	5b                   	pop    ebx
c000f195:	c3                   	ret    
c000f196:	66 90                	xchg   ax,ax

c000f198 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f198:	83 ec 1c             	sub    esp,0x1c
c000f19b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f19f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f1a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f1a6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1ab:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1b0:	83 ec 08             	sub    esp,0x8
c000f1b3:	52                   	push   edx
c000f1b4:	50                   	push   eax
c000f1b5:	e8 d8 7f ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f1ba:	83 c4 10             	add    esp,0x10
c000f1bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1c1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1c6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1cb:	83 ec 04             	sub    esp,0x4
c000f1ce:	6a 01                	push   0x1
c000f1d0:	52                   	push   edx
c000f1d1:	50                   	push   eax
c000f1d2:	e8 d3 80 ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1d7:	83 c4 10             	add    esp,0x10
c000f1da:	90                   	nop
c000f1db:	83 c4 1c             	add    esp,0x1c
c000f1de:	c3                   	ret    
c000f1df:	90                   	nop

c000f1e0 <ACPI::sleep()>:
c000f1e0:	83 ec 0c             	sub    esp,0xc
c000f1e3:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1e8:	85 c0                	test   eax,eax
c000f1ea:	74 08                	je     c000f1f4 <ACPI::sleep()+0x14>
c000f1ec:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1f1:	ff d0                	call   eax
c000f1f3:	90                   	nop
c000f1f4:	90                   	nop
c000f1f5:	83 c4 0c             	add    esp,0xc
c000f1f8:	c3                   	ret    
c000f1f9:	90                   	nop
c000f1fa:	66 90                	xchg   ax,ax

c000f1fc <ACPI::open(int, int, void*)>:
c000f1fc:	55                   	push   ebp
c000f1fd:	89 e5                	mov    ebp,esp
c000f1ff:	53                   	push   ebx
c000f200:	81 ec 74 01 00 00    	sub    esp,0x174
c000f206:	83 ec 0c             	sub    esp,0xc
c000f209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f20c:	e8 67 fd ff ff       	call   c000ef78 <ACPI::detectPCI()>
c000f211:	83 c4 10             	add    esp,0x10
c000f214:	83 ec 0c             	sub    esp,0xc
c000f217:	68 24 09 02 c0       	push   0xc0020924
c000f21c:	e8 d7 0f 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c000f221:	83 c4 10             	add    esp,0x10
c000f224:	b8 4c 05 00 00       	mov    eax,0x54c
c000f229:	8a 00                	mov    al,BYTE PTR [eax]
c000f22b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f22e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f232:	83 f8 01             	cmp    eax,0x1
c000f235:	75 15                	jne    c000f24c <ACPI::open(int, int, void*)+0x50>
c000f237:	83 ec 0c             	sub    esp,0xc
c000f23a:	68 b4 09 02 c0       	push   0xc00209b4
c000f23f:	e8 3e 49 00 00       	call   c0013b82 <Thr::loadKernelSymbolTable(char const*)>
c000f244:	83 c4 10             	add    esp,0x10
c000f247:	eb 33                	jmp    c000f27c <ACPI::open(int, int, void*)+0x80>
c000f249:	8d 76 00             	lea    esi,[esi+0x0]
c000f24c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f250:	3d bb 00 00 00       	cmp    eax,0xbb
c000f255:	75 15                	jne    c000f26c <ACPI::open(int, int, void*)+0x70>
c000f257:	83 ec 0c             	sub    esp,0xc
c000f25a:	68 d2 09 02 c0       	push   0xc00209d2
c000f25f:	e8 1e 49 00 00       	call   c0013b82 <Thr::loadKernelSymbolTable(char const*)>
c000f264:	83 c4 10             	add    esp,0x10
c000f267:	eb 13                	jmp    c000f27c <ACPI::open(int, int, void*)+0x80>
c000f269:	8d 76 00             	lea    esi,[esi+0x0]
c000f26c:	83 ec 0c             	sub    esp,0xc
c000f26f:	68 f0 09 02 c0       	push   0xc00209f0
c000f274:	e8 fc 15 00 00       	call   c0010875 <KePanic(char const*)>
c000f279:	83 c4 10             	add    esp,0x10
c000f27c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f280:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f287:	83 ec 0c             	sub    esp,0xc
c000f28a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f28d:	e8 39 88 ff ff       	call   c0007acb <malloc>
c000f292:	83 c4 10             	add    esp,0x10
c000f295:	89 c3                	mov    ebx,eax
c000f297:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f29c:	83 ec 04             	sub    esp,0x4
c000f29f:	50                   	push   eax
c000f2a0:	68 0a 0a 02 c0       	push   0xc0020a0a
c000f2a5:	53                   	push   ebx
c000f2a6:	e8 a7 bc ff ff       	call   c000af52 <File::File(char const*, Process*)>
c000f2ab:	83 c4 10             	add    esp,0x10
c000f2ae:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2b1:	83 ec 08             	sub    esp,0x8
c000f2b4:	6a 01                	push   0x1
c000f2b6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2b9:	e8 50 bd ff ff       	call   c000b00e <File::open(FileOpenMode)>
c000f2be:	83 c4 10             	add    esp,0x10
c000f2c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f2c4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f2c8:	75 12                	jne    c000f2dc <ACPI::open(int, int, void*)+0xe0>
c000f2ca:	83 ec 0c             	sub    esp,0xc
c000f2cd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2d0:	e8 97 bd ff ff       	call   c000b06c <File::close()>
c000f2d5:	83 c4 10             	add    esp,0x10
c000f2d8:	eb 06                	jmp    c000f2e0 <ACPI::open(int, int, void*)+0xe4>
c000f2da:	66 90                	xchg   ax,ax
c000f2dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f2e0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f2e4:	74 16                	je     c000f2fc <ACPI::open(int, int, void*)+0x100>
c000f2e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2eb:	83 c0 08             	add    eax,0x8
c000f2ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f0:	83 ec 0c             	sub    esp,0xc
c000f2f3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2f6:	ff d0                	call   eax
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	90                   	nop
c000f2fc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f2ff:	83 f0 01             	xor    eax,0x1
c000f302:	0f b6 c0             	movzx  eax,al
c000f305:	85 c0                	test   eax,eax
c000f307:	74 3b                	je     c000f344 <ACPI::open(int, int, void*)+0x148>
c000f309:	83 ec 0c             	sub    esp,0xc
c000f30c:	68 28 0a 02 c0       	push   0xc0020a28
c000f311:	e8 e2 0e 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c000f316:	83 c4 10             	add    esp,0x10
c000f319:	83 ec 04             	sub    esp,0x4
c000f31c:	6a 0c                	push   0xc
c000f31e:	68 43 0a 02 c0       	push   0xc0020a43
c000f323:	68 54 0a 02 c0       	push   0xc0020a54
c000f328:	e8 fd 3b 00 00       	call   c0012f2a <Reg::readIntWithDefault(char*, char*, int)>
c000f32d:	83 c4 10             	add    esp,0x10
c000f330:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f333:	83 ec 0c             	sub    esp,0xc
c000f336:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f339:	e8 ec a4 ff ff       	call   c000982a <Virt::setupPageSwapping(int)>
c000f33e:	83 c4 10             	add    esp,0x10
c000f341:	8d 76 00             	lea    esi,[esi+0x0]
c000f344:	83 ec 0c             	sub    esp,0xc
c000f347:	68 35 fa 01 c0       	push   0xc001fa35
c000f34c:	e8 a7 0e 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c000f351:	83 c4 10             	add    esp,0x10
c000f354:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f357:	83 ec 08             	sub    esp,0x8
c000f35a:	6a 13                	push   0x13
c000f35c:	50                   	push   eax
c000f35d:	e8 c2 cd ff ff       	call   c000c124 <getDevicesOfType(DeviceType)>
c000f362:	83 c4 0c             	add    esp,0xc
c000f365:	8d 76 00             	lea    esi,[esi+0x0]
c000f368:	83 ec 0c             	sub    esp,0xc
c000f36b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f36e:	50                   	push   eax
c000f36f:	e8 ac fa 00 00       	call   c001ee20 <LinkedList<Device>::isEmpty()>
c000f374:	83 c4 10             	add    esp,0x10
c000f377:	83 f0 01             	xor    eax,0x1
c000f37a:	0f b6 c0             	movzx  eax,al
c000f37d:	85 c0                	test   eax,eax
c000f37f:	0f 84 1f 01 00 00    	je     c000f4a4 <ACPI::open(int, int, void*)+0x2a8>
c000f385:	83 ec 0c             	sub    esp,0xc
c000f388:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f38b:	50                   	push   eax
c000f38c:	e8 ab fa 00 00       	call   c001ee3c <LinkedList<Device>::getFirstElement()>
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f397:	83 ec 0c             	sub    esp,0xc
c000f39a:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f39d:	50                   	push   eax
c000f39e:	e8 a1 fa 00 00       	call   c001ee44 <LinkedList<Device>::removeFirst()>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f3a9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f3ac:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f3af:	b8 24 00 00 00       	mov    eax,0x24
c000f3b4:	83 e0 fc             	and    eax,0xfffffffc
c000f3b7:	89 c3                	mov    ebx,eax
c000f3b9:	b8 00 00 00 00       	mov    eax,0x0
c000f3be:	66 90                	xchg   ax,ax
c000f3c0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f3c7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f3ce:	83 c0 04             	add    eax,0x4
c000f3d1:	39 d8                	cmp    eax,ebx
c000f3d3:	72 eb                	jb     c000f3c0 <ACPI::open(int, int, void*)+0x1c4>
c000f3d5:	83 ec 08             	sub    esp,0x8
c000f3d8:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f3de:	50                   	push   eax
c000f3df:	83 ec 24             	sub    esp,0x24
c000f3e2:	89 e1                	mov    ecx,esp
c000f3e4:	b8 24 00 00 00       	mov    eax,0x24
c000f3e9:	83 e0 fc             	and    eax,0xfffffffc
c000f3ec:	89 c3                	mov    ebx,eax
c000f3ee:	b8 00 00 00 00       	mov    eax,0x0
c000f3f3:	90                   	nop
c000f3f4:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f3fb:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f3fe:	83 c0 04             	add    eax,0x4
c000f401:	39 d8                	cmp    eax,ebx
c000f403:	72 ef                	jb     c000f3f4 <ACPI::open(int, int, void*)+0x1f8>
c000f405:	e8 50 b1 00 00       	call   c001a55a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f40a:	83 c4 30             	add    esp,0x30
c000f40d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f410:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f414:	0f 84 4e ff ff ff    	je     c000f368 <ACPI::open(int, int, void*)+0x16c>
c000f41a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f421:	83 ec 0c             	sub    esp,0xc
c000f424:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f427:	e8 9f 86 ff ff       	call   c0007acb <malloc>
c000f42c:	83 c4 10             	add    esp,0x10
c000f42f:	89 c3                	mov    ebx,eax
c000f431:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f436:	83 ec 04             	sub    esp,0x4
c000f439:	50                   	push   eax
c000f43a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f43d:	53                   	push   ebx
c000f43e:	e8 0f bb ff ff       	call   c000af52 <File::File(char const*, Process*)>
c000f443:	83 c4 10             	add    esp,0x10
c000f446:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f449:	83 ec 0c             	sub    esp,0xc
c000f44c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f44f:	e8 28 be ff ff       	call   c000b27c <File::exists()>
c000f454:	83 c4 10             	add    esp,0x10
c000f457:	0f b6 c0             	movzx  eax,al
c000f45a:	85 c0                	test   eax,eax
c000f45c:	74 22                	je     c000f480 <ACPI::open(int, int, void*)+0x284>
c000f45e:	83 ec 08             	sub    esp,0x8
c000f461:	6a 01                	push   0x1
c000f463:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f466:	e8 99 51 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c000f46b:	83 c4 10             	add    esp,0x10
c000f46e:	83 ec 08             	sub    esp,0x8
c000f471:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f474:	50                   	push   eax
c000f475:	e8 ca 53 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	8d 76 00             	lea    esi,[esi+0x0]
c000f480:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f484:	0f 84 de fe ff ff    	je     c000f368 <ACPI::open(int, int, void*)+0x16c>
c000f48a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f48d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48f:	83 c0 08             	add    eax,0x8
c000f492:	8b 00                	mov    eax,DWORD PTR [eax]
c000f494:	83 ec 0c             	sub    esp,0xc
c000f497:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f49a:	ff d0                	call   eax
c000f49c:	83 c4 10             	add    esp,0x10
c000f49f:	e9 c4 fe ff ff       	jmp    c000f368 <ACPI::open(int, int, void*)+0x16c>
c000f4a4:	83 ec 0c             	sub    esp,0xc
c000f4a7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f4aa:	50                   	push   eax
c000f4ab:	e8 6c f9 00 00       	call   c001ee1c <LinkedList<Device>::~LinkedList()>
c000f4b0:	83 c4 10             	add    esp,0x10
c000f4b3:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f4b9:	83 ec 08             	sub    esp,0x8
c000f4bc:	6a 01                	push   0x1
c000f4be:	68 5b 0a 02 c0       	push   0xc0020a5b
c000f4c3:	e8 3c 51 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c000f4c8:	83 c4 10             	add    esp,0x10
c000f4cb:	83 ec 08             	sub    esp,0x8
c000f4ce:	53                   	push   ebx
c000f4cf:	50                   	push   eax
c000f4d0:	e8 6f 53 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f4dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4e3:	83 e0 04             	and    eax,0x4
c000f4e6:	0f b6 c0             	movzx  eax,al
c000f4e9:	85 c0                	test   eax,eax
c000f4eb:	0f 84 e3 00 00 00    	je     c000f5d4 <ACPI::open(int, int, void*)+0x3d8>
c000f4f1:	83 ec 0c             	sub    esp,0xc
c000f4f4:	68 78 0a 02 c0       	push   0xc0020a78
c000f4f9:	e8 fa 0c 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f508:	83 ec 0c             	sub    esp,0xc
c000f50b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f50e:	e8 b8 85 ff ff       	call   c0007acb <malloc>
c000f513:	83 c4 10             	add    esp,0x10
c000f516:	89 c3                	mov    ebx,eax
c000f518:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f51d:	83 ec 04             	sub    esp,0x4
c000f520:	50                   	push   eax
c000f521:	68 95 0a 02 c0       	push   0xc0020a95
c000f526:	53                   	push   ebx
c000f527:	e8 26 ba ff ff       	call   c000af52 <File::File(char const*, Process*)>
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f532:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f536:	74 1c                	je     c000f554 <ACPI::open(int, int, void*)+0x358>
c000f538:	83 ec 0c             	sub    esp,0xc
c000f53b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f53e:	e8 39 bd ff ff       	call   c000b27c <File::exists()>
c000f543:	83 c4 10             	add    esp,0x10
c000f546:	0f b6 c0             	movzx  eax,al
c000f549:	85 c0                	test   eax,eax
c000f54b:	74 07                	je     c000f554 <ACPI::open(int, int, void*)+0x358>
c000f54d:	b0 01                	mov    al,0x1
c000f54f:	eb 07                	jmp    c000f558 <ACPI::open(int, int, void*)+0x35c>
c000f551:	8d 76 00             	lea    esi,[esi+0x0]
c000f554:	b0 00                	mov    al,0x0
c000f556:	66 90                	xchg   ax,ax
c000f558:	0f b6 c0             	movzx  eax,al
c000f55b:	85 c0                	test   eax,eax
c000f55d:	74 21                	je     c000f580 <ACPI::open(int, int, void*)+0x384>
c000f55f:	83 ec 08             	sub    esp,0x8
c000f562:	6a 01                	push   0x1
c000f564:	68 95 0a 02 c0       	push   0xc0020a95
c000f569:	e8 96 50 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c000f56e:	83 c4 10             	add    esp,0x10
c000f571:	83 ec 08             	sub    esp,0x8
c000f574:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f577:	50                   	push   eax
c000f578:	e8 c7 52 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c000f57d:	83 c4 10             	add    esp,0x10
c000f580:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f584:	74 1e                	je     c000f5a4 <ACPI::open(int, int, void*)+0x3a8>
c000f586:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f58a:	74 18                	je     c000f5a4 <ACPI::open(int, int, void*)+0x3a8>
c000f58c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f58f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f591:	83 c0 08             	add    eax,0x8
c000f594:	8b 00                	mov    eax,DWORD PTR [eax]
c000f596:	83 ec 0c             	sub    esp,0xc
c000f599:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f59c:	ff d0                	call   eax
c000f59e:	83 c4 10             	add    esp,0x10
c000f5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5a4:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f5a9:	83 ec 08             	sub    esp,0x8
c000f5ac:	68 b2 0a 02 c0       	push   0xc0020ab2
c000f5b1:	50                   	push   eax
c000f5b2:	e8 65 f2 ff ff       	call   c000e81c <findDataTable(unsigned char*, char*)>
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f5bd:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f5c1:	74 11                	je     c000f5d4 <ACPI::open(int, int, void*)+0x3d8>
c000f5c3:	83 ec 08             	sub    esp,0x8
c000f5c6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f5c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f5cc:	e8 c7 fb ff ff       	call   c000f198 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5d1:	83 c4 10             	add    esp,0x10
c000f5d4:	b8 00 00 00 00       	mov    eax,0x0
c000f5d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f5dc:	c9                   	leave  
c000f5dd:	c3                   	ret    

c000f5de <CPU::close(int, int, void*)>:
c000f5de:	31 c0                	xor    eax,eax
c000f5e0:	c3                   	ret    
c000f5e1:	90                   	nop

c000f5e2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5e2:	60                   	pusha  
c000f5e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5ef:	9c                   	pushf  
c000f5f0:	fa                   	cli    
c000f5f1:	0f 09                	wbinvd 
c000f5f3:	0f 30                	wrmsr  
c000f5f5:	9d                   	popf   
c000f5f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5fa:	89 02                	mov    DWORD PTR [edx],eax
c000f5fc:	61                   	popa   
c000f5fd:	c3                   	ret    

c000f5fe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5fe:	60                   	pusha  
c000f5ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f603:	9c                   	pushf  
c000f604:	fa                   	cli    
c000f605:	0f 09                	wbinvd 
c000f607:	31 c0                	xor    eax,eax
c000f609:	31 d2                	xor    edx,edx
c000f60b:	0f 32                	rdmsr  
c000f60d:	9d                   	popf   
c000f60e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f612:	89 02                	mov    DWORD PTR [edx],eax
c000f614:	61                   	popa   
c000f615:	c3                   	ret    

c000f616 <CPU::AMD_K6_writeback(int, int, int)>:
c000f616:	56                   	push   esi
c000f617:	53                   	push   ebx
c000f618:	83 ec 10             	sub    esp,0x10
c000f61b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f624:	75 5d                	jne    c000f683 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f626:	83 f8 08             	cmp    eax,0x8
c000f629:	75 09                	jne    c000f634 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f62b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f630:	7e 13                	jle    c000f645 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f632:	eb 30                	jmp    c000f664 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f634:	83 f8 06             	cmp    eax,0x6
c000f637:	7c 4a                	jl     c000f683 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f639:	83 f8 07             	cmp    eax,0x7
c000f63c:	7e 07                	jle    c000f645 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f63e:	83 f8 09             	cmp    eax,0x9
c000f641:	74 21                	je     c000f664 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f643:	eb 3e                	jmp    c000f683 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f645:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f64b:	89 e6                	mov    esi,esp
c000f64d:	56                   	push   esi
c000f64e:	68 82 00 00 c0       	push   0xc0000082
c000f653:	e8 a6 ff ff ff       	call   c000f5fe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f658:	c1 eb 15             	shr    ebx,0x15
c000f65b:	56                   	push   esi
c000f65c:	83 e3 7e             	and    ebx,0x7e
c000f65f:	6a 00                	push   0x0
c000f661:	53                   	push   ebx
c000f662:	eb 12                	jmp    c000f676 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f664:	89 e3                	mov    ebx,esp
c000f666:	53                   	push   ebx
c000f667:	68 82 00 00 c0       	push   0xc0000082
c000f66c:	e8 8d ff ff ff       	call   c000f5fe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f671:	53                   	push   ebx
c000f672:	6a 00                	push   0x0
c000f674:	6a 00                	push   0x0
c000f676:	68 82 00 00 c0       	push   0xc0000082
c000f67b:	e8 62 ff ff ff       	call   c000f5e2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f680:	83 c4 18             	add    esp,0x18
c000f683:	83 c4 10             	add    esp,0x10
c000f686:	5b                   	pop    ebx
c000f687:	5e                   	pop    esi
c000f688:	c3                   	ret    
c000f689:	90                   	nop

c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f68a:	55                   	push   ebp
c000f68b:	57                   	push   edi
c000f68c:	56                   	push   esi
c000f68d:	53                   	push   ebx
c000f68e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f692:	39 05 d0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fd0,eax
c000f698:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f69c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f6a0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f6a4:	75 23                	jne    c000f6c9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f6a6:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f6ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6af:	89 06                	mov    DWORD PTR [esi],eax
c000f6b1:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f6b6:	89 07                	mov    DWORD PTR [edi],eax
c000f6b8:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f6bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6c0:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f6c5:	89 02                	mov    DWORD PTR [edx],eax
c000f6c7:	eb 3f                	jmp    c000f708 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6c9:	31 c9                	xor    ecx,ecx
c000f6cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6cf:	0f a2                	cpuid  
c000f6d1:	89 06                	mov    DWORD PTR [esi],eax
c000f6d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6d7:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6d9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6dc:	89 10                	mov    DWORD PTR [eax],edx
c000f6de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6e2:	a3 d0 1f 02 c0       	mov    ds:0xc0021fd0,eax
c000f6e7:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6e9:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6ee:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6f0:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6f8:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f701:	8b 00                	mov    eax,DWORD PTR [eax]
c000f703:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f708:	5b                   	pop    ebx
c000f709:	5e                   	pop    esi
c000f70a:	5f                   	pop    edi
c000f70b:	5d                   	pop    ebp
c000f70c:	c3                   	ret    
c000f70d:	90                   	nop

c000f70e <CPU::cpuidCheckEDX(unsigned int)>:
c000f70e:	83 ec 10             	sub    esp,0x10
c000f711:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f715:	50                   	push   eax
c000f716:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71a:	50                   	push   eax
c000f71b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71f:	50                   	push   eax
c000f720:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f724:	50                   	push   eax
c000f725:	6a 01                	push   0x1
c000f727:	e8 5e ff ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f72c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f730:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f734:	0f 95 c0             	setne  al
c000f737:	83 c4 24             	add    esp,0x24
c000f73a:	c3                   	ret    
c000f73b:	90                   	nop

c000f73c <CPU::cpuidCheckECX(unsigned int)>:
c000f73c:	83 ec 10             	sub    esp,0x10
c000f73f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f743:	50                   	push   eax
c000f744:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f748:	50                   	push   eax
c000f749:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74d:	50                   	push   eax
c000f74e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f752:	50                   	push   eax
c000f753:	6a 01                	push   0x1
c000f755:	e8 30 ff ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f75a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f75e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f762:	0f 95 c0             	setne  al
c000f765:	83 c4 24             	add    esp,0x24
c000f768:	c3                   	ret    
c000f769:	90                   	nop

c000f76a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f76a:	83 ec 10             	sub    esp,0x10
c000f76d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f771:	50                   	push   eax
c000f772:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f776:	50                   	push   eax
c000f777:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77b:	50                   	push   eax
c000f77c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f780:	50                   	push   eax
c000f781:	6a 07                	push   0x7
c000f783:	e8 02 ff ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f788:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f78c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f790:	0f 95 c0             	setne  al
c000f793:	83 c4 24             	add    esp,0x24
c000f796:	c3                   	ret    
c000f797:	90                   	nop

c000f798 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f798:	83 ec 10             	sub    esp,0x10
c000f79b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79f:	50                   	push   eax
c000f7a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a4:	50                   	push   eax
c000f7a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a9:	50                   	push   eax
c000f7aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ae:	50                   	push   eax
c000f7af:	6a 07                	push   0x7
c000f7b1:	e8 d4 fe ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7ba:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7be:	0f 95 c0             	setne  al
c000f7c1:	83 c4 24             	add    esp,0x24
c000f7c4:	c3                   	ret    
c000f7c5:	90                   	nop

c000f7c6 <CPU::CPU()>:
c000f7c6:	83 ec 0c             	sub    esp,0xc
c000f7c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7cd:	83 ec 08             	sub    esp,0x8
c000f7d0:	68 d5 0b 02 c0       	push   0xc0020bd5
c000f7d5:	50                   	push   eax
c000f7d6:	e8 c9 c7 ff ff       	call   c000bfa4 <Device::Device(char const*)>
c000f7db:	83 c4 10             	add    esp,0x10
c000f7de:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c000f7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e7:	89 10                	mov    DWORD PTR [eax],edx
c000f7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ed:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7fb:	05 78 01 00 00       	add    eax,0x178
c000f800:	83 ec 0c             	sub    esp,0xc
c000f803:	50                   	push   eax
c000f804:	e8 6b 7b ff ff       	call   c0007374 <GDT::GDT()>
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f810:	05 7c 09 00 00       	add    eax,0x97c
c000f815:	83 ec 0c             	sub    esp,0xc
c000f818:	50                   	push   eax
c000f819:	e8 a6 7d ff ff       	call   c00075c4 <IDT::IDT()>
c000f81e:	83 c4 10             	add    esp,0x10
c000f821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f825:	05 7c 11 00 00       	add    eax,0x117c
c000f82a:	83 ec 0c             	sub    esp,0xc
c000f82d:	50                   	push   eax
c000f82e:	e8 09 97 ff ff       	call   c0008f3c <TSS::TSS()>
c000f833:	83 c4 10             	add    esp,0x10
c000f836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f83a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f845:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f84f:	90                   	nop
c000f850:	83 c4 0c             	add    esp,0xc
c000f853:	c3                   	ret    

c000f854 <CPU::displayFeatures()>:
c000f854:	c3                   	ret    
c000f855:	90                   	nop

c000f856 <CPU::detectFeatures()>:
c000f856:	55                   	push   ebp
c000f857:	57                   	push   edi
c000f858:	56                   	push   esi
c000f859:	53                   	push   ebx
c000f85a:	83 ec 30             	sub    esp,0x30
c000f85d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f861:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f86b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f871:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f878:	6a 0d                	push   0xd
c000f87a:	6a 00                	push   0x0
c000f87c:	55                   	push   ebp
c000f87d:	e8 6e 0c ff ff       	call   c00004f0 <memset>
c000f882:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f887:	83 c4 10             	add    esp,0x10
c000f88a:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f891:	0f 84 db 05 00 00    	je     c000fe72 <CPU::detectFeatures()+0x61c>
c000f897:	83 ec 0c             	sub    esp,0xc
c000f89a:	89 ef                	mov    edi,ebp
c000f89c:	6a 10                	push   0x10
c000f89e:	e8 6b fe ff ff       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c000f8a3:	83 e0 01             	and    eax,0x1
c000f8a6:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8a9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8af:	83 e0 fd             	and    eax,0xfffffffd
c000f8b2:	09 d0                	or     eax,edx
c000f8b4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8ba:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8c1:	e8 48 fe ff ff       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c000f8c6:	83 e0 01             	and    eax,0x1
c000f8c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8d0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8d6:	83 e0 fb             	and    eax,0xfffffffb
c000f8d9:	09 d0                	or     eax,edx
c000f8db:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8e1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8e8:	e8 21 fe ff ff       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c000f8ed:	83 e0 01             	and    eax,0x1
c000f8f0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8f7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8fd:	83 e0 f7             	and    eax,0xfffffff7
c000f900:	09 d0                	or     eax,edx
c000f902:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f908:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f90f:	e8 fa fd ff ff       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c000f914:	83 e0 01             	and    eax,0x1
c000f917:	c1 e0 04             	shl    eax,0x4
c000f91a:	89 c2                	mov    edx,eax
c000f91c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f922:	83 e0 ef             	and    eax,0xffffffef
c000f925:	09 d0                	or     eax,edx
c000f927:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f92d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f934:	e8 d5 fd ff ff       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c000f939:	83 e0 01             	and    eax,0x1
c000f93c:	c1 e0 05             	shl    eax,0x5
c000f93f:	89 c2                	mov    edx,eax
c000f941:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f947:	83 e0 df             	and    eax,0xffffffdf
c000f94a:	09 d0                	or     eax,edx
c000f94c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f952:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f959:	e8 b0 fd ff ff       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c000f95e:	83 e0 01             	and    eax,0x1
c000f961:	8d 14 00             	lea    edx,[eax+eax*1]
c000f964:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f96a:	83 e0 fd             	and    eax,0xfffffffd
c000f96d:	09 d0                	or     eax,edx
c000f96f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f975:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f97c:	e8 8d fd ff ff       	call   c000f70e <CPU::cpuidCheckEDX(unsigned int)>
c000f981:	83 e0 01             	and    eax,0x1
c000f984:	c1 e0 06             	shl    eax,0x6
c000f987:	89 c2                	mov    edx,eax
c000f989:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f98f:	83 e0 bf             	and    eax,0xffffffbf
c000f992:	09 d0                	or     eax,edx
c000f994:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f99a:	58                   	pop    eax
c000f99b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f99f:	50                   	push   eax
c000f9a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a4:	50                   	push   eax
c000f9a5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f9a9:	56                   	push   esi
c000f9aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9ae:	50                   	push   eax
c000f9af:	6a 00                	push   0x0
c000f9b1:	e8 d4 fc ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9b6:	b8 04 00 00 00       	mov    eax,0x4
c000f9bb:	89 c1                	mov    ecx,eax
c000f9bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9bf:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9c5:	89 c1                	mov    ecx,eax
c000f9c7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9cd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9d3:	89 c1                	mov    ecx,eax
c000f9d5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9db:	83 c4 18             	add    esp,0x18
c000f9de:	68 e4 0a 02 c0       	push   0xc0020ae4
c000f9e3:	55                   	push   ebp
c000f9e4:	e8 97 0d ff ff       	call   c0000780 <strcmp>
c000f9e9:	83 c4 10             	add    esp,0x10
c000f9ec:	85 c0                	test   eax,eax
c000f9ee:	75 0f                	jne    c000f9ff <CPU::detectFeatures()+0x1a9>
c000f9f0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9fa:	e9 22 02 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000f9ff:	50                   	push   eax
c000fa00:	50                   	push   eax
c000fa01:	68 f1 0a 02 c0       	push   0xc0020af1
c000fa06:	55                   	push   ebp
c000fa07:	e8 74 0d ff ff       	call   c0000780 <strcmp>
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	85 c0                	test   eax,eax
c000fa11:	74 dd                	je     c000f9f0 <CPU::detectFeatures()+0x19a>
c000fa13:	50                   	push   eax
c000fa14:	50                   	push   eax
c000fa15:	68 fe 0a 02 c0       	push   0xc0020afe
c000fa1a:	55                   	push   ebp
c000fa1b:	e8 60 0d ff ff       	call   c0000780 <strcmp>
c000fa20:	83 c4 10             	add    esp,0x10
c000fa23:	85 c0                	test   eax,eax
c000fa25:	74 2a                	je     c000fa51 <CPU::detectFeatures()+0x1fb>
c000fa27:	50                   	push   eax
c000fa28:	50                   	push   eax
c000fa29:	68 0b 0b 02 c0       	push   0xc0020b0b
c000fa2e:	55                   	push   ebp
c000fa2f:	e8 4c 0d ff ff       	call   c0000780 <strcmp>
c000fa34:	83 c4 10             	add    esp,0x10
c000fa37:	85 c0                	test   eax,eax
c000fa39:	74 16                	je     c000fa51 <CPU::detectFeatures()+0x1fb>
c000fa3b:	50                   	push   eax
c000fa3c:	50                   	push   eax
c000fa3d:	68 18 0b 02 c0       	push   0xc0020b18
c000fa42:	55                   	push   ebp
c000fa43:	e8 38 0d ff ff       	call   c0000780 <strcmp>
c000fa48:	83 c4 10             	add    esp,0x10
c000fa4b:	85 c0                	test   eax,eax
c000fa4d:	74 48                	je     c000fa97 <CPU::detectFeatures()+0x241>
c000fa4f:	eb 0f                	jmp    c000fa60 <CPU::detectFeatures()+0x20a>
c000fa51:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa5b:	e9 c1 01 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fa60:	50                   	push   eax
c000fa61:	50                   	push   eax
c000fa62:	68 25 0b 02 c0       	push   0xc0020b25
c000fa67:	55                   	push   ebp
c000fa68:	e8 13 0d ff ff       	call   c0000780 <strcmp>
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	85 c0                	test   eax,eax
c000fa72:	74 23                	je     c000fa97 <CPU::detectFeatures()+0x241>
c000fa74:	57                   	push   edi
c000fa75:	57                   	push   edi
c000fa76:	68 32 0b 02 c0       	push   0xc0020b32
c000fa7b:	55                   	push   ebp
c000fa7c:	e8 ff 0c ff ff       	call   c0000780 <strcmp>
c000fa81:	83 c4 10             	add    esp,0x10
c000fa84:	85 c0                	test   eax,eax
c000fa86:	75 1e                	jne    c000faa6 <CPU::detectFeatures()+0x250>
c000fa88:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa92:	e9 8a 01 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fa97:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000faa1:	e9 7b 01 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000faa6:	56                   	push   esi
c000faa7:	56                   	push   esi
c000faa8:	68 3f 0b 02 c0       	push   0xc0020b3f
c000faad:	55                   	push   ebp
c000faae:	e8 cd 0c ff ff       	call   c0000780 <strcmp>
c000fab3:	83 c4 10             	add    esp,0x10
c000fab6:	85 c0                	test   eax,eax
c000fab8:	75 0f                	jne    c000fac9 <CPU::detectFeatures()+0x273>
c000faba:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fac4:	e9 58 01 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fac9:	51                   	push   ecx
c000faca:	51                   	push   ecx
c000facb:	68 fe 0a 02 c0       	push   0xc0020afe
c000fad0:	55                   	push   ebp
c000fad1:	e8 aa 0c ff ff       	call   c0000780 <strcmp>
c000fad6:	83 c4 10             	add    esp,0x10
c000fad9:	85 c0                	test   eax,eax
c000fadb:	75 0f                	jne    c000faec <CPU::detectFeatures()+0x296>
c000fadd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fae7:	e9 35 01 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000faec:	52                   	push   edx
c000faed:	52                   	push   edx
c000faee:	68 4c 0b 02 c0       	push   0xc0020b4c
c000faf3:	55                   	push   ebp
c000faf4:	e8 87 0c ff ff       	call   c0000780 <strcmp>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	85 c0                	test   eax,eax
c000fafe:	75 0f                	jne    c000fb0f <CPU::detectFeatures()+0x2b9>
c000fb00:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb0a:	e9 12 01 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fb0f:	50                   	push   eax
c000fb10:	50                   	push   eax
c000fb11:	68 59 0b 02 c0       	push   0xc0020b59
c000fb16:	55                   	push   ebp
c000fb17:	e8 64 0c ff ff       	call   c0000780 <strcmp>
c000fb1c:	83 c4 10             	add    esp,0x10
c000fb1f:	85 c0                	test   eax,eax
c000fb21:	75 0f                	jne    c000fb32 <CPU::detectFeatures()+0x2dc>
c000fb23:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb2d:	e9 ef 00 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fb32:	50                   	push   eax
c000fb33:	50                   	push   eax
c000fb34:	68 66 0b 02 c0       	push   0xc0020b66
c000fb39:	55                   	push   ebp
c000fb3a:	e8 41 0c ff ff       	call   c0000780 <strcmp>
c000fb3f:	83 c4 10             	add    esp,0x10
c000fb42:	85 c0                	test   eax,eax
c000fb44:	75 0f                	jne    c000fb55 <CPU::detectFeatures()+0x2ff>
c000fb46:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb50:	e9 cc 00 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fb55:	50                   	push   eax
c000fb56:	50                   	push   eax
c000fb57:	68 73 0b 02 c0       	push   0xc0020b73
c000fb5c:	55                   	push   ebp
c000fb5d:	e8 1e 0c ff ff       	call   c0000780 <strcmp>
c000fb62:	83 c4 10             	add    esp,0x10
c000fb65:	85 c0                	test   eax,eax
c000fb67:	75 0f                	jne    c000fb78 <CPU::detectFeatures()+0x322>
c000fb69:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb73:	e9 a9 00 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fb78:	50                   	push   eax
c000fb79:	50                   	push   eax
c000fb7a:	68 80 0b 02 c0       	push   0xc0020b80
c000fb7f:	55                   	push   ebp
c000fb80:	e8 fb 0b ff ff       	call   c0000780 <strcmp>
c000fb85:	83 c4 10             	add    esp,0x10
c000fb88:	85 c0                	test   eax,eax
c000fb8a:	75 0f                	jne    c000fb9b <CPU::detectFeatures()+0x345>
c000fb8c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb96:	e9 86 00 00 00       	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fb9b:	50                   	push   eax
c000fb9c:	50                   	push   eax
c000fb9d:	68 8d 0b 02 c0       	push   0xc0020b8d
c000fba2:	55                   	push   ebp
c000fba3:	e8 d8 0b ff ff       	call   c0000780 <strcmp>
c000fba8:	83 c4 10             	add    esp,0x10
c000fbab:	85 c0                	test   eax,eax
c000fbad:	75 0c                	jne    c000fbbb <CPU::detectFeatures()+0x365>
c000fbaf:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbb9:	eb 66                	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fbbb:	50                   	push   eax
c000fbbc:	50                   	push   eax
c000fbbd:	68 9a 0b 02 c0       	push   0xc0020b9a
c000fbc2:	55                   	push   ebp
c000fbc3:	e8 b8 0b ff ff       	call   c0000780 <strcmp>
c000fbc8:	83 c4 10             	add    esp,0x10
c000fbcb:	85 c0                	test   eax,eax
c000fbcd:	75 0c                	jne    c000fbdb <CPU::detectFeatures()+0x385>
c000fbcf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbd9:	eb 46                	jmp    c000fc21 <CPU::detectFeatures()+0x3cb>
c000fbdb:	57                   	push   edi
c000fbdc:	57                   	push   edi
c000fbdd:	68 a7 0b 02 c0       	push   0xc0020ba7
c000fbe2:	55                   	push   ebp
c000fbe3:	e8 98 0b ff ff       	call   c0000780 <strcmp>
c000fbe8:	83 c4 10             	add    esp,0x10
c000fbeb:	85 c0                	test   eax,eax
c000fbed:	74 e0                	je     c000fbcf <CPU::detectFeatures()+0x379>
c000fbef:	56                   	push   esi
c000fbf0:	56                   	push   esi
c000fbf1:	68 b4 0b 02 c0       	push   0xc0020bb4
c000fbf6:	55                   	push   ebp
c000fbf7:	e8 84 0b ff ff       	call   c0000780 <strcmp>
c000fbfc:	83 c4 10             	add    esp,0x10
c000fbff:	85 c0                	test   eax,eax
c000fc01:	74 cc                	je     c000fbcf <CPU::detectFeatures()+0x379>
c000fc03:	51                   	push   ecx
c000fc04:	51                   	push   ecx
c000fc05:	68 c1 0b 02 c0       	push   0xc0020bc1
c000fc0a:	55                   	push   ebp
c000fc0b:	e8 70 0b ff ff       	call   c0000780 <strcmp>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	85 c0                	test   eax,eax
c000fc15:	74 b8                	je     c000fbcf <CPU::detectFeatures()+0x379>
c000fc17:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc21:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc26:	0f 86 be 00 00 00    	jbe    c000fcea <CPU::detectFeatures()+0x494>
c000fc2c:	83 ec 0c             	sub    esp,0xc
c000fc2f:	68 80 00 00 00       	push   0x80
c000fc34:	e8 31 fb ff ff       	call   c000f76a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc39:	83 e0 01             	and    eax,0x1
c000fc3c:	c1 e0 06             	shl    eax,0x6
c000fc3f:	89 c2                	mov    edx,eax
c000fc41:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc47:	83 e0 bf             	and    eax,0xffffffbf
c000fc4a:	09 d0                	or     eax,edx
c000fc4c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc52:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc59:	e8 0c fb ff ff       	call   c000f76a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc5e:	83 e0 01             	and    eax,0x1
c000fc61:	c1 e0 04             	shl    eax,0x4
c000fc64:	89 c2                	mov    edx,eax
c000fc66:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc6c:	83 e0 ef             	and    eax,0xffffffef
c000fc6f:	09 d0                	or     eax,edx
c000fc71:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc77:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc7e:	e8 e7 fa ff ff       	call   c000f76a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc83:	89 c2                	mov    edx,eax
c000fc85:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc8b:	c1 e2 07             	shl    edx,0x7
c000fc8e:	83 e0 7f             	and    eax,0x7f
c000fc91:	09 d0                	or     eax,edx
c000fc93:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc99:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fca0:	e8 f3 fa ff ff       	call   c000f798 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fca5:	83 e0 01             	and    eax,0x1
c000fca8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fcaf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcb5:	83 e0 f7             	and    eax,0xfffffff7
c000fcb8:	09 d0                	or     eax,edx
c000fcba:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcc0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fcc7:	e8 cc fa ff ff       	call   c000f798 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	83 e0 01             	and    eax,0x1
c000fcd2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcd9:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcdf:	83 e0 fb             	and    eax,0xfffffffb
c000fce2:	09 d0                	or     eax,edx
c000fce4:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcea:	83 ec 0c             	sub    esp,0xc
c000fced:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcf1:	50                   	push   eax
c000fcf2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcf6:	50                   	push   eax
c000fcf7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcfb:	57                   	push   edi
c000fcfc:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fd00:	56                   	push   esi
c000fd01:	6a 01                	push   0x1
c000fd03:	e8 82 f9 ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd0c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fd12:	89 c1                	mov    ecx,eax
c000fd14:	83 e1 0f             	and    ecx,0xf
c000fd17:	83 e2 f0             	and    edx,0xfffffff0
c000fd1a:	09 ca                	or     edx,ecx
c000fd1c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd22:	89 c2                	mov    edx,eax
c000fd24:	c1 ea 04             	shr    edx,0x4
c000fd27:	83 e2 0f             	and    edx,0xf
c000fd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fd2e:	89 d1                	mov    ecx,edx
c000fd30:	83 c4 20             	add    esp,0x20
c000fd33:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd39:	c1 e1 06             	shl    ecx,0x6
c000fd3c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd42:	09 ca                	or     edx,ecx
c000fd44:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd4b:	89 c2                	mov    edx,eax
c000fd4d:	c1 ea 08             	shr    edx,0x8
c000fd50:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd56:	83 e2 0f             	and    edx,0xf
c000fd59:	89 d5                	mov    ebp,edx
c000fd5b:	83 e5 03             	and    ebp,0x3
c000fd5e:	c1 e5 06             	shl    ebp,0x6
c000fd61:	83 e1 3f             	and    ecx,0x3f
c000fd64:	09 e9                	or     ecx,ebp
c000fd66:	89 d5                	mov    ebp,edx
c000fd68:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd6e:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd74:	c1 ed 02             	shr    ebp,0x2
c000fd77:	83 e1 c0             	and    ecx,0xffffffc0
c000fd7a:	09 e9                	or     ecx,ebp
c000fd7c:	89 c5                	mov    ebp,eax
c000fd7e:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd84:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd8a:	c1 ed 08             	shr    ebp,0x8
c000fd8d:	83 e5 30             	and    ebp,0x30
c000fd90:	83 e1 cf             	and    ecx,0xffffffcf
c000fd93:	09 e9                	or     ecx,ebp
c000fd95:	83 fa 06             	cmp    edx,0x6
c000fd98:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd9e:	74 05                	je     c000fda5 <CPU::detectFeatures()+0x54f>
c000fda0:	83 fa 0f             	cmp    edx,0xf
c000fda3:	75 64                	jne    c000fe09 <CPU::detectFeatures()+0x5b3>
c000fda5:	89 c1                	mov    ecx,eax
c000fda7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fdad:	c1 e9 10             	shr    ecx,0x10
c000fdb0:	c1 e1 04             	shl    ecx,0x4
c000fdb3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fdb7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fdbd:	0f b6 c9             	movzx  ecx,cl
c000fdc0:	c1 e1 06             	shl    ecx,0x6
c000fdc3:	09 e9                	or     ecx,ebp
c000fdc5:	83 fa 0f             	cmp    edx,0xf
c000fdc8:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fdcf:	75 38                	jne    c000fe09 <CPU::detectFeatures()+0x5b3>
c000fdd1:	c1 e8 14             	shr    eax,0x14
c000fdd4:	83 c0 0f             	add    eax,0xf
c000fdd7:	0f b6 c0             	movzx  eax,al
c000fdda:	89 c2                	mov    edx,eax
c000fddc:	c1 e8 02             	shr    eax,0x2
c000fddf:	83 e2 03             	and    edx,0x3
c000fde2:	89 d1                	mov    ecx,edx
c000fde4:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fdea:	c1 e1 06             	shl    ecx,0x6
c000fded:	83 e2 3f             	and    edx,0x3f
c000fdf0:	09 ca                	or     edx,ecx
c000fdf2:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdf8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdfe:	83 e2 c0             	and    edx,0xffffffc0
c000fe01:	09 d0                	or     eax,edx
c000fe03:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fe09:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe0f:	83 ec 0c             	sub    esp,0xc
c000fe12:	83 c8 07             	or     eax,0x7
c000fe15:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe1b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe1f:	50                   	push   eax
c000fe20:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe24:	55                   	push   ebp
c000fe25:	57                   	push   edi
c000fe26:	56                   	push   esi
c000fe27:	68 00 00 00 80       	push   0x80000000
c000fe2c:	e8 59 f8 ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe31:	83 c4 20             	add    esp,0x20
c000fe34:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe3c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe40:	76 1e                	jbe    c000fe60 <CPU::detectFeatures()+0x60a>
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	50                   	push   eax
c000fe46:	55                   	push   ebp
c000fe47:	57                   	push   edi
c000fe48:	56                   	push   esi
c000fe49:	68 01 00 00 80       	push   0x80000001
c000fe4e:	e8 37 f8 ff ff       	call   c000f68a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe53:	83 c4 20             	add    esp,0x20
c000fe56:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe60:	52                   	push   edx
c000fe61:	52                   	push   edx
c000fe62:	68 cd 0b 02 c0       	push   0xc0020bcd
c000fe67:	53                   	push   ebx
c000fe68:	e8 29 c1 ff ff       	call   c000bf96 <Device::setName(char const*)>
c000fe6d:	83 c4 10             	add    esp,0x10
c000fe70:	eb 69                	jmp    c000fedb <CPU::detectFeatures()+0x685>
c000fe72:	50                   	push   eax
c000fe73:	50                   	push   eax
c000fe74:	68 32 0b 02 c0       	push   0xc0020b32
c000fe79:	55                   	push   ebp
c000fe7a:	e8 d1 07 ff ff       	call   c0000650 <strcpy>
c000fe7f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe89:	e8 35 03 ff ff       	call   c00001c3 <is486>
c000fe8e:	83 c4 10             	add    esp,0x10
c000fe91:	85 c0                	test   eax,eax
c000fe93:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe99:	74 1f                	je     c000feba <CPU::detectFeatures()+0x664>
c000fe9b:	83 c8 07             	or     eax,0x7
c000fe9e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fea4:	0f 20 c0             	mov    eax,cr0
c000fea7:	83 e0 14             	and    eax,0x14
c000feaa:	83 f8 04             	cmp    eax,0x4
c000fead:	75 10                	jne    c000febf <CPU::detectFeatures()+0x669>
c000feaf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feb5:	83 e0 fd             	and    eax,0xfffffffd
c000feb8:	eb 1b                	jmp    c000fed5 <CPU::detectFeatures()+0x67f>
c000feba:	83 e0 f8             	and    eax,0xfffffff8
c000febd:	eb df                	jmp    c000fe9e <CPU::detectFeatures()+0x648>
c000febf:	e8 da 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fec4:	83 e0 01             	and    eax,0x1
c000fec7:	8d 14 00             	lea    edx,[eax+eax*1]
c000feca:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fed0:	83 e0 fd             	and    eax,0xfffffffd
c000fed3:	09 d0                	or     eax,edx
c000fed5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fedb:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fee2:	74 17                	je     c000fefb <CPU::detectFeatures()+0x6a5>
c000fee4:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000feea:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000fef0:	83 c8 10             	or     eax,0x10
c000fef3:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fef9:	eb 20                	jmp    c000ff1b <CPU::detectFeatures()+0x6c5>
c000fefb:	e8 9e 02 ff ff       	call   c000019e <hasLegacyFPU>
c000ff00:	83 e0 01             	and    eax,0x1
c000ff03:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff06:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff0c:	83 e0 fd             	and    eax,0xfffffffd
c000ff0f:	09 d0                	or     eax,edx
c000ff11:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff17:	a8 02                	test   al,0x2
c000ff19:	75 c9                	jne    c000fee4 <CPU::detectFeatures()+0x68e>
c000ff1b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff22:	83 c4 2c             	add    esp,0x2c
c000ff25:	5b                   	pop    ebx
c000ff26:	5e                   	pop    esi
c000ff27:	5f                   	pop    edi
c000ff28:	5d                   	pop    ebp
c000ff29:	c3                   	ret    

c000ff2a <CPU::setupSMEP()>:
c000ff2a:	0f 20 e0             	mov    eax,cr4
c000ff2d:	0d 00 00 10 00       	or     eax,0x100000
c000ff32:	0f 22 e0             	mov    cr4,eax
c000ff35:	c3                   	ret    

c000ff36 <CPU::setupUMIP()>:
c000ff36:	0f 20 e0             	mov    eax,cr4
c000ff39:	80 cc 08             	or     ah,0x8
c000ff3c:	0f 22 e0             	mov    cr4,eax
c000ff3f:	c3                   	ret    

c000ff40 <CPU::setupTSC()>:
c000ff40:	0f 20 e0             	mov    eax,cr4
c000ff43:	83 c8 04             	or     eax,0x4
c000ff46:	0f 22 e0             	mov    cr4,eax
c000ff49:	c3                   	ret    

c000ff4a <CPU::setupLargePages()>:
c000ff4a:	0f 20 e0             	mov    eax,cr4
c000ff4d:	83 c8 10             	or     eax,0x10
c000ff50:	0f 22 e0             	mov    cr4,eax
c000ff53:	c3                   	ret    

c000ff54 <CPU::setupPAT()>:
c000ff54:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff59:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff60:	74 2c                	je     c000ff8e <CPU::setupPAT()+0x3a>
c000ff62:	53                   	push   ebx
c000ff63:	83 ec 10             	sub    esp,0x10
c000ff66:	68 77 02 00 00       	push   0x277
c000ff6b:	50                   	push   eax
c000ff6c:	e8 69 71 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c000ff71:	83 e2 f8             	and    edx,0xfffffff8
c000ff74:	83 ca 01             	or     edx,0x1
c000ff77:	52                   	push   edx
c000ff78:	50                   	push   eax
c000ff79:	68 77 02 00 00       	push   0x277
c000ff7e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff84:	e8 7d 71 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff89:	83 c4 28             	add    esp,0x28
c000ff8c:	5b                   	pop    ebx
c000ff8d:	c3                   	ret    
c000ff8e:	c3                   	ret    
c000ff8f:	90                   	nop

c000ff90 <CPU::setupMTRR()>:
c000ff90:	c3                   	ret    
c000ff91:	90                   	nop

c000ff92 <CPU::setupGlobalPages()>:
c000ff92:	0f 20 e0             	mov    eax,cr4
c000ff95:	0c 80                	or     al,0x80
c000ff97:	0f 22 e0             	mov    cr4,eax
c000ff9a:	c3                   	ret    
c000ff9b:	90                   	nop

c000ff9c <CPU::allowUsermodeDataAccess()>:
c000ff9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffa0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffa7:	74 03                	je     c000ffac <CPU::allowUsermodeDataAccess()+0x10>
c000ffa9:	0f 01 cb             	stac   
c000ffac:	c3                   	ret    
c000ffad:	90                   	nop

c000ffae <CPU::prohibitUsermodeDataAccess()>:
c000ffae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffb2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffb9:	74 03                	je     c000ffbe <CPU::prohibitUsermodeDataAccess()+0x10>
c000ffbb:	0f 01 ca             	clac   
c000ffbe:	c3                   	ret    
c000ffbf:	90                   	nop

c000ffc0 <CPU::setupSMAP()>:
c000ffc0:	0f 20 e0             	mov    eax,cr4
c000ffc3:	0d 00 00 20 00       	or     eax,0x200000
c000ffc8:	0f 22 e0             	mov    cr4,eax
c000ffcb:	eb e1                	jmp    c000ffae <CPU::prohibitUsermodeDataAccess()>
c000ffcd:	90                   	nop

c000ffce <CPU::setupFeatures()>:
c000ffce:	53                   	push   ebx
c000ffcf:	83 ec 08             	sub    esp,0x8
c000ffd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffd6:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffdd:	74 18                	je     c000fff7 <CPU::setupFeatures()+0x29>
c000ffdf:	83 ec 0c             	sub    esp,0xc
c000ffe2:	68 d9 0b 02 c0       	push   0xc0020bd9
c000ffe7:	e8 be a9 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c000ffec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffef:	e8 42 ff ff ff       	call   c000ff36 <CPU::setupUMIP()>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fffe:	74 18                	je     c0010018 <CPU::setupFeatures()+0x4a>
c0010000:	83 ec 0c             	sub    esp,0xc
c0010003:	68 e3 0b 02 c0       	push   0xc0020be3
c0010008:	e8 9d a9 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001000d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010010:	e8 2b ff ff ff       	call   c000ff40 <CPU::setupTSC()>
c0010015:	83 c4 10             	add    esp,0x10
c0010018:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001001f:	74 18                	je     c0010039 <CPU::setupFeatures()+0x6b>
c0010021:	83 ec 0c             	sub    esp,0xc
c0010024:	68 ec 0b 02 c0       	push   0xc0020bec
c0010029:	e8 7c a9 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001002e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010031:	e8 14 ff ff ff       	call   c000ff4a <CPU::setupLargePages()>
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010040:	74 18                	je     c001005a <CPU::setupFeatures()+0x8c>
c0010042:	83 ec 0c             	sub    esp,0xc
c0010045:	68 f5 0b 02 c0       	push   0xc0020bf5
c001004a:	e8 5b a9 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001004f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010052:	e8 3b ff ff ff       	call   c000ff92 <CPU::setupGlobalPages()>
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010061:	74 18                	je     c001007b <CPU::setupFeatures()+0xad>
c0010063:	83 ec 0c             	sub    esp,0xc
c0010066:	68 07 0c 02 c0       	push   0xc0020c07
c001006b:	e8 3a a9 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0010070:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010073:	e8 dc fe ff ff       	call   c000ff54 <CPU::setupPAT()>
c0010078:	83 c4 10             	add    esp,0x10
c001007b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010082:	74 11                	je     c0010095 <CPU::setupFeatures()+0xc7>
c0010084:	c7 44 24 10 10 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c10
c001008c:	83 c4 08             	add    esp,0x8
c001008f:	5b                   	pop    ebx
c0010090:	e9 15 a9 ff ff       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)>
c0010095:	83 c4 08             	add    esp,0x8
c0010098:	5b                   	pop    ebx
c0010099:	c3                   	ret    

c001009a <CPU::open(int, int, void*)>:
c001009a:	57                   	push   edi
c001009b:	56                   	push   esi
c001009c:	53                   	push   ebx
c001009d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100a1:	83 ec 0c             	sub    esp,0xc
c00100a4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00100a8:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00100ae:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100b4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100ba:	50                   	push   eax
c00100bb:	e8 16 73 ff ff       	call   c00073d6 <GDT::setup()>
c00100c0:	83 c4 0c             	add    esp,0xc
c00100c3:	6a 00                	push   0x0
c00100c5:	68 ef be ad de       	push   0xdeadbeef
c00100ca:	57                   	push   edi
c00100cb:	e8 b0 8e ff ff       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c00100d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100d3:	e8 88 8e ff ff       	call   c0008f60 <TSS::flush()>
c00100d8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100de:	89 04 24             	mov    DWORD PTR [esp],eax
c00100e1:	e8 54 75 ff ff       	call   c000763a <IDT::setup()>
c00100e6:	b8 00 04 00 00       	mov    eax,0x400
c00100eb:	0f 23 f8             	mov    db7,eax
c00100ee:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100f8:	e8 d9 7c ff ff       	call   c0007dd6 <Phys::allocatePage()>
c00100fd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010103:	89 30                	mov    DWORD PTR [eax],esi
c0010105:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001010b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001010e:	58                   	pop    eax
c001010f:	5a                   	pop    edx
c0010110:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010116:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001011a:	e8 c1 9e ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c001011f:	c7 04 24 1a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1a
c0010126:	e8 cd 00 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c001012b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001012e:	e8 23 f7 ff ff       	call   c000f856 <CPU::detectFeatures()>
c0010133:	c7 04 24 3d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3d
c001013a:	e8 b9 00 00 00       	call   c00101f8 <KeSetBootMessage(char const*)>
c001013f:	e8 75 6f 00 00       	call   c00170b9 <HalInitialise()>
c0010144:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010149:	83 e0 10             	and    eax,0x10
c001014c:	83 f8 01             	cmp    eax,0x1
c001014f:	19 c0                	sbb    eax,eax
c0010151:	83 e0 46             	and    eax,0x46
c0010154:	83 c0 1e             	add    eax,0x1e
c0010157:	89 04 24             	mov    DWORD PTR [esp],eax
c001015a:	e8 de d6 ff ff       	call   c000d83d <setupTimer(int)>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010169:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001016f:	74 0c                	je     c001017d <CPU::open(int, int, void*)+0xe3>
c0010171:	83 ec 0c             	sub    esp,0xc
c0010174:	53                   	push   ebx
c0010175:	e8 54 fe ff ff       	call   c000ffce <CPU::setupFeatures()>
c001017a:	83 c4 10             	add    esp,0x10
c001017d:	5b                   	pop    ebx
c001017e:	31 c0                	xor    eax,eax
c0010180:	5e                   	pop    esi
c0010181:	5f                   	pop    edi
c0010182:	c3                   	ret    

c0010183 <KeDisplaySplashScreen()>:
c0010183:	55                   	push   ebp
c0010184:	bd 05 00 00 00       	mov    ebp,0x5
c0010189:	57                   	push   edi
c001018a:	bf e0 1f 02 c0       	mov    edi,0xc0021fe0
c001018f:	56                   	push   esi
c0010190:	be 0a 00 00 00       	mov    esi,0xa
c0010195:	53                   	push   ebx
c0010196:	31 db                	xor    ebx,ebx
c0010198:	83 ec 0c             	sub    esp,0xc
c001019b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001019e:	85 d2                	test   edx,edx
c00101a0:	89 d0                	mov    eax,edx
c00101a2:	74 4c                	je     c00101f0 <KeDisplaySplashScreen()+0x6d>
c00101a4:	80 bb 16 20 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffddfea],0xdb
c00101ab:	75 13                	jne    c00101c0 <KeDisplaySplashScreen()+0x3d>
c00101ad:	0f b6 8b 15 20 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffddfeb]
c00101b4:	83 e1 fe             	and    ecx,0xfffffffe
c00101b7:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00101bd:	75 01                	jne    c00101c0 <KeDisplaySplashScreen()+0x3d>
c00101bf:	46                   	inc    esi
c00101c0:	83 fa 0d             	cmp    edx,0xd
c00101c3:	74 28                	je     c00101ed <KeDisplaySplashScreen()+0x6a>
c00101c5:	83 fa 0a             	cmp    edx,0xa
c00101c8:	75 0a                	jne    c00101d4 <KeDisplaySplashScreen()+0x51>
c00101ca:	45                   	inc    ebp
c00101cb:	be 0a 00 00 00       	mov    esi,0xa
c00101d0:	31 db                	xor    ebx,ebx
c00101d2:	eb 19                	jmp    c00101ed <KeDisplaySplashScreen()+0x6a>
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	0f be c0             	movsx  eax,al
c00101da:	55                   	push   ebp
c00101db:	8d 14 33             	lea    edx,[ebx+esi*1]
c00101de:	43                   	inc    ebx
c00101df:	52                   	push   edx
c00101e0:	6a 00                	push   0x0
c00101e2:	6a 0e                	push   0xe
c00101e4:	50                   	push   eax
c00101e5:	e8 4a 7b 00 00       	call   c0017d34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101ea:	83 c4 20             	add    esp,0x20
c00101ed:	47                   	inc    edi
c00101ee:	eb ab                	jmp    c001019b <KeDisplaySplashScreen()+0x18>
c00101f0:	83 c4 0c             	add    esp,0xc
c00101f3:	5b                   	pop    ebx
c00101f4:	5e                   	pop    esi
c00101f5:	5f                   	pop    edi
c00101f6:	5d                   	pop    ebp
c00101f7:	c3                   	ret    

c00101f8 <KeSetBootMessage(char const*)>:
c00101f8:	57                   	push   edi
c00101f9:	56                   	push   esi
c00101fa:	53                   	push   ebx
c00101fb:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010201:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010208:	68 9e 00 00 00       	push   0x9e
c001020d:	6a 00                	push   0x0
c001020f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010213:	56                   	push   esi
c0010214:	e8 d7 02 ff ff       	call   c00004f0 <memset>
c0010219:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001021c:	e8 5f 03 ff ff       	call   c0000580 <strlen>
c0010221:	ba 50 00 00 00       	mov    edx,0x50
c0010226:	83 c4 10             	add    esp,0x10
c0010229:	31 c9                	xor    ecx,ecx
c001022b:	29 c2                	sub    edx,eax
c001022d:	83 e2 fe             	and    edx,0xfffffffe
c0010230:	01 f2                	add    edx,esi
c0010232:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010237:	84 c0                	test   al,al
c0010239:	74 0a                	je     c0010245 <KeSetBootMessage(char const*)+0x4d>
c001023b:	80 cc 0f             	or     ah,0xf
c001023e:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010242:	41                   	inc    ecx
c0010243:	eb ed                	jmp    c0010232 <KeSetBootMessage(char const*)+0x3a>
c0010245:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001024a:	b9 9e 00 00 00       	mov    ecx,0x9e
c001024f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010251:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010257:	5b                   	pop    ebx
c0010258:	5e                   	pop    esi
c0010259:	5f                   	pop    edi
c001025a:	c3                   	ret    
c001025b:	90                   	nop

c001025c <EnvVarContainer::getEnv(char const*)>:
c001025c:	57                   	push   edi
c001025d:	56                   	push   esi
c001025e:	53                   	push   ebx
c001025f:	31 db                	xor    ebx,ebx
c0010261:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010265:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010267:	7e 2b                	jle    c0010294 <EnvVarContainer::getEnv(char const*)+0x38>
c0010269:	50                   	push   eax
c001026a:	50                   	push   eax
c001026b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001026e:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010275:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010278:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001027c:	e8 ff 04 ff ff       	call   c0000780 <strcmp>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	85 c0                	test   eax,eax
c0010286:	75 09                	jne    c0010291 <EnvVarContainer::getEnv(char const*)+0x35>
c0010288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001028b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001028f:	eb 05                	jmp    c0010296 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010291:	43                   	inc    ebx
c0010292:	eb d1                	jmp    c0010265 <EnvVarContainer::getEnv(char const*)+0x9>
c0010294:	31 c0                	xor    eax,eax
c0010296:	5b                   	pop    ebx
c0010297:	5e                   	pop    esi
c0010298:	5f                   	pop    edi
c0010299:	c3                   	ret    

c001029a <EnvVarContainer::setEnv(char const*, char const*)>:
c001029a:	55                   	push   ebp
c001029b:	57                   	push   edi
c001029c:	56                   	push   esi
c001029d:	53                   	push   ebx
c001029e:	83 ec 28             	sub    esp,0x28
c00102a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00102a5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00102a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00102ad:	56                   	push   esi
c00102ae:	e8 cd 02 ff ff       	call   c0000580 <strlen>
c00102b3:	40                   	inc    eax
c00102b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00102b7:	e8 0f 78 ff ff       	call   c0007acb <malloc>
c00102bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102c3:	e8 b8 02 ff ff       	call   c0000580 <strlen>
c00102c8:	40                   	inc    eax
c00102c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00102cc:	e8 fa 77 ff ff       	call   c0007acb <malloc>
c00102d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00102d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102d8:	e8 a3 02 ff ff       	call   c0000580 <strlen>
c00102dd:	83 c4 0c             	add    esp,0xc
c00102e0:	40                   	inc    eax
c00102e1:	50                   	push   eax
c00102e2:	6a 00                	push   0x0
c00102e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102e8:	e8 03 02 ff ff       	call   c00004f0 <memset>
c00102ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00102f0:	e8 8b 02 ff ff       	call   c0000580 <strlen>
c00102f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102f9:	8d 48 01             	lea    ecx,[eax+0x1]
c00102fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010301:	89 de                	mov    esi,ebx
c0010303:	e8 78 02 ff ff       	call   c0000580 <strlen>
c0010308:	83 c4 0c             	add    esp,0xc
c001030b:	40                   	inc    eax
c001030c:	50                   	push   eax
c001030d:	6a 00                	push   0x0
c001030f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010313:	e8 d8 01 ff ff       	call   c00004f0 <memset>
c0010318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001031b:	e8 60 02 ff ff       	call   c0000580 <strlen>
c0010320:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010324:	8d 48 01             	lea    ecx,[eax+0x1]
c0010327:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010329:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001032c:	40                   	inc    eax
c001032d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010330:	c1 e0 03             	shl    eax,0x3
c0010333:	5a                   	pop    edx
c0010334:	59                   	pop    ecx
c0010335:	50                   	push   eax
c0010336:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010339:	e8 79 77 ff ff       	call   c0007ab7 <realloc>
c001033e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010341:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010345:	b9 08 00 00 00       	mov    ecx,0x8
c001034a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001034d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010351:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010353:	83 c4 2c             	add    esp,0x2c
c0010356:	5b                   	pop    ebx
c0010357:	5e                   	pop    esi
c0010358:	5f                   	pop    edi
c0010359:	5d                   	pop    ebp
c001035a:	c3                   	ret    
c001035b:	90                   	nop

c001035c <EnvVarContainer::deleteEnv(char const*)>:
c001035c:	c3                   	ret    
c001035d:	90                   	nop

c001035e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001035e:	55                   	push   ebp
c001035f:	57                   	push   edi
c0010360:	56                   	push   esi
c0010361:	53                   	push   ebx
c0010362:	81 ec 38 01 00 00    	sub    esp,0x138
c0010368:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001036f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010376:	68 14 01 00 00       	push   0x114
c001037b:	e8 4b 77 ff ff       	call   c0007acb <malloc>
c0010380:	83 c4 0c             	add    esp,0xc
c0010383:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010386:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001038d:	89 c3                	mov    ebx,eax
c001038f:	50                   	push   eax
c0010390:	e8 bd ab ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0010395:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010398:	e8 df ae ff ff       	call   c000b27c <File::exists()>
c001039d:	83 c4 10             	add    esp,0x10
c00103a0:	84 c0                	test   al,al
c00103a2:	75 31                	jne    c00103d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00103a4:	50                   	push   eax
c00103a5:	50                   	push   eax
c00103a6:	6a 12                	push   0x12
c00103a8:	53                   	push   ebx
c00103a9:	e8 60 ac ff ff       	call   c000b00e <File::open(FileOpenMode)>
c00103ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103b0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00103b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00103b6:	e8 c5 01 ff ff       	call   c0000580 <strlen>
c00103bb:	5a                   	pop    edx
c00103bc:	31 d2                	xor    edx,edx
c00103be:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103c2:	51                   	push   ecx
c00103c3:	56                   	push   esi
c00103c4:	52                   	push   edx
c00103c5:	50                   	push   eax
c00103c6:	53                   	push   ebx
c00103c7:	ff d7                	call   edi
c00103c9:	83 c4 14             	add    esp,0x14
c00103cc:	53                   	push   ebx
c00103cd:	e8 9a ac ff ff       	call   c000b06c <File::close()>
c00103d2:	83 c4 10             	add    esp,0x10
c00103d5:	56                   	push   esi
c00103d6:	31 f6                	xor    esi,esi
c00103d8:	68 00 01 00 00       	push   0x100
c00103dd:	6a 00                	push   0x0
c00103df:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103e3:	50                   	push   eax
c00103e4:	e8 07 01 ff ff       	call   c00004f0 <memset>
c00103e9:	5f                   	pop    edi
c00103ea:	58                   	pop    eax
c00103eb:	6a 01                	push   0x1
c00103ed:	53                   	push   ebx
c00103ee:	e8 1b ac ff ff       	call   c000b00e <File::open(FileOpenMode)>
c00103f3:	83 c4 10             	add    esp,0x10
c00103f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103fe:	83 ec 0c             	sub    esp,0xc
c0010401:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010403:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010407:	51                   	push   ecx
c0010408:	8d 54 24 23          	lea    edx,[esp+0x23]
c001040c:	52                   	push   edx
c001040d:	6a 00                	push   0x0
c001040f:	6a 01                	push   0x1
c0010411:	53                   	push   ebx
c0010412:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010415:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c001041a:	83 c4 20             	add    esp,0x20
c001041d:	83 fa 0d             	cmp    edx,0xd
c0010420:	89 d0                	mov    eax,edx
c0010422:	0f 84 0a 01 00 00    	je     c0010532 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010428:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001042d:	0f 84 f0 00 00 00    	je     c0010523 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010433:	83 fa 0a             	cmp    edx,0xa
c0010436:	74 13                	je     c001044b <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010438:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001043d:	74 0c                	je     c001044b <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c001043f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010445:	0f 8e d8 00 00 00    	jle    c0010523 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001044b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001044f:	83 ec 0c             	sub    esp,0xc
c0010452:	8d 78 01             	lea    edi,[eax+0x1]
c0010455:	57                   	push   edi
c0010456:	e8 70 76 ff ff       	call   c0007acb <malloc>
c001045b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001045f:	8d 56 04             	lea    edx,[esi+0x4]
c0010462:	89 14 24             	mov    DWORD PTR [esp],edx
c0010465:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001046d:	e8 59 76 ff ff       	call   c0007acb <malloc>
c0010472:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010476:	83 c4 0c             	add    esp,0xc
c0010479:	57                   	push   edi
c001047a:	6a 00                	push   0x0
c001047c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010480:	e8 6b 00 ff ff       	call   c00004f0 <memset>
c0010485:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010489:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001048d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010491:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010493:	83 c4 0c             	add    esp,0xc
c0010496:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001049a:	52                   	push   edx
c001049b:	6a 00                	push   0x0
c001049d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00104a1:	e8 4a 00 ff ff       	call   c00004f0 <memset>
c00104a6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00104aa:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00104ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00104b1:	e8 ca 00 ff ff       	call   c0000580 <strlen>
c00104b6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00104ba:	89 c1                	mov    ecx,eax
c00104bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104c1:	83 c4 10             	add    esp,0x10
c00104c4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00104c7:	40                   	inc    eax
c00104c8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00104cb:	85 d2                	test   edx,edx
c00104cd:	75 0c                	jne    c00104db <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c00104cf:	83 ec 0c             	sub    esp,0xc
c00104d2:	6a 08                	push   0x8
c00104d4:	e8 f2 75 ff ff       	call   c0007acb <malloc>
c00104d9:	eb 0c                	jmp    c00104e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c00104db:	51                   	push   ecx
c00104dc:	51                   	push   ecx
c00104dd:	c1 e0 03             	shl    eax,0x3
c00104e0:	50                   	push   eax
c00104e1:	52                   	push   edx
c00104e2:	e8 d0 75 ff ff       	call   c0007ab7 <realloc>
c00104e7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104ea:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104ed:	83 c4 10             	add    esp,0x10
c00104f0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104f3:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104f7:	b9 08 00 00 00       	mov    ecx,0x8
c00104fc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010500:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010502:	50                   	push   eax
c0010503:	31 f6                	xor    esi,esi
c0010505:	68 00 01 00 00       	push   0x100
c001050a:	6a 00                	push   0x0
c001050c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010510:	50                   	push   eax
c0010511:	e8 da ff fe ff       	call   c00004f0 <memset>
c0010516:	83 c4 10             	add    esp,0x10
c0010519:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010521:	eb 0f                	jmp    c0010532 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010523:	3c 3d                	cmp    al,0x3d
c0010525:	74 07                	je     c001052e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0010527:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001052b:	46                   	inc    esi
c001052c:	eb 04                	jmp    c0010532 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001052e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010532:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010537:	0f 85 c1 fe ff ff    	jne    c00103fe <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001053d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010543:	5b                   	pop    ebx
c0010544:	5e                   	pop    esi
c0010545:	5f                   	pop    edi
c0010546:	5d                   	pop    ebp
c0010547:	c3                   	ret    

c0010548 <EnvVarContainer::__loadSystem()>:
c0010548:	83 ec 10             	sub    esp,0x10
c001054b:	68 40 21 02 c0       	push   0xc0022140
c0010550:	68 80 0c 02 c0       	push   0xc0020c80
c0010555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010559:	e8 00 fe ff ff       	call   c001035e <EnvVarContainer::loadFrom(char const*, char const*)>
c001055e:	83 c4 1c             	add    esp,0x1c
c0010561:	c3                   	ret    

c0010562 <EnvVarContainer::__loadUser()>:
c0010562:	c3                   	ret    
c0010563:	90                   	nop

c0010564 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010568:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001056e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010572:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010576:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001057d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010584:	90                   	nop
c0010585:	c3                   	ret    

c0010586 <EnvVarContainer::~EnvVarContainer()>:
c0010586:	83 ec 0c             	sub    esp,0xc
c0010589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010590:	85 c0                	test   eax,eax
c0010592:	74 1d                	je     c00105b1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010598:	8b 00                	mov    eax,DWORD PTR [eax]
c001059a:	85 c0                	test   eax,eax
c001059c:	74 13                	je     c00105b1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00105a5:	83 ec 0c             	sub    esp,0xc
c00105a8:	50                   	push   eax
c00105a9:	e8 2d 75 ff ff       	call   c0007adb <free>
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	90                   	nop
c00105b2:	83 c4 0c             	add    esp,0xc
c00105b5:	c3                   	ret    

c00105b6 <Krnl::getEnv(Process*, char const*)>:
c00105b6:	53                   	push   ebx
c00105b7:	83 ec 08             	sub    esp,0x8
c00105ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105be:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c00105c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105c8:	74 04                	je     c00105ce <Krnl::getEnv(Process*, char const*)+0x18>
c00105ca:	85 c0                	test   eax,eax
c00105cc:	75 0b                	jne    c00105d9 <Krnl::getEnv(Process*, char const*)+0x23>
c00105ce:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105d3:	85 c0                	test   eax,eax
c00105d5:	75 19                	jne    c00105f0 <Krnl::getEnv(Process*, char const*)+0x3a>
c00105d7:	eb 27                	jmp    c0010600 <Krnl::getEnv(Process*, char const*)+0x4a>
c00105d9:	52                   	push   edx
c00105da:	52                   	push   edx
c00105db:	53                   	push   ebx
c00105dc:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105e2:	e8 75 fc ff ff       	call   c001025c <EnvVarContainer::getEnv(char const*)>
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	85 c0                	test   eax,eax
c00105ec:	75 28                	jne    c0010616 <Krnl::getEnv(Process*, char const*)+0x60>
c00105ee:	eb de                	jmp    c00105ce <Krnl::getEnv(Process*, char const*)+0x18>
c00105f0:	52                   	push   edx
c00105f1:	52                   	push   edx
c00105f2:	53                   	push   ebx
c00105f3:	50                   	push   eax
c00105f4:	e8 63 fc ff ff       	call   c001025c <EnvVarContainer::getEnv(char const*)>
c00105f9:	83 c4 10             	add    esp,0x10
c00105fc:	85 c0                	test   eax,eax
c00105fe:	75 16                	jne    c0010616 <Krnl::getEnv(Process*, char const*)+0x60>
c0010600:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010604:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010609:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001060d:	83 c4 08             	add    esp,0x8
c0010610:	5b                   	pop    ebx
c0010611:	e9 46 fc ff ff       	jmp    c001025c <EnvVarContainer::getEnv(char const*)>
c0010616:	83 c4 08             	add    esp,0x8
c0010619:	5b                   	pop    ebx
c001061a:	c3                   	ret    

c001061b <Krnl::setEnvSystem(char const*, char const*)>:
c001061b:	83 ec 10             	sub    esp,0x10
c001061e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010622:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010626:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c001062c:	e8 69 fc ff ff       	call   c001029a <EnvVarContainer::setEnv(char const*, char const*)>
c0010631:	83 c4 1c             	add    esp,0x1c
c0010634:	c3                   	ret    

c0010635 <Krnl::setEnvUser(char const*, char const*)>:
c0010635:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001063a:	85 c0                	test   eax,eax
c001063c:	74 15                	je     c0010653 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001063e:	83 ec 10             	sub    esp,0x10
c0010641:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010645:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010649:	50                   	push   eax
c001064a:	e8 4b fc ff ff       	call   c001029a <EnvVarContainer::setEnv(char const*, char const*)>
c001064f:	83 c4 1c             	add    esp,0x1c
c0010652:	c3                   	ret    
c0010653:	c3                   	ret    

c0010654 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010658:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001065e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010662:	e9 33 fc ff ff       	jmp    c001029a <EnvVarContainer::setEnv(char const*, char const*)>

c0010667 <Krnl::deleteEnvSystem(char const*)>:
c0010667:	c3                   	ret    

c0010668 <Krnl::deleteEnvUser(char const*)>:
c0010668:	c3                   	ret    

c0010669 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010669:	c3                   	ret    

c001066a <Krnl::newProcessEnv(Process*)>:
c001066a:	83 ec 28             	sub    esp,0x28
c001066d:	6a 0c                	push   0xc
c001066f:	e8 57 74 ff ff       	call   c0007acb <malloc>
c0010674:	5a                   	pop    edx
c0010675:	59                   	pop    ecx
c0010676:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001067a:	50                   	push   eax
c001067b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001067f:	e8 e0 fe ff ff       	call   c0010564 <EnvVarContainer::EnvVarContainer(Process*)>
c0010684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010688:	83 c4 2c             	add    esp,0x2c
c001068b:	c3                   	ret    

c001068c <Krnl::copyProcessEnv(Process*, Process*)>:
c001068c:	57                   	push   edi
c001068d:	56                   	push   esi
c001068e:	53                   	push   ebx
c001068f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010693:	83 ec 0c             	sub    esp,0xc
c0010696:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001069c:	6a 0c                	push   0xc
c001069e:	e8 28 74 ff ff       	call   c0007acb <malloc>
c00106a3:	89 c3                	mov    ebx,eax
c00106a5:	58                   	pop    eax
c00106a6:	5a                   	pop    edx
c00106a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ab:	53                   	push   ebx
c00106ac:	e8 b3 fe ff ff       	call   c0010564 <EnvVarContainer::EnvVarContainer(Process*)>
c00106b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00106b3:	89 03                	mov    DWORD PTR [ebx],eax
c00106b5:	c1 e0 03             	shl    eax,0x3
c00106b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00106bb:	e8 0b 74 ff ff       	call   c0007acb <malloc>
c00106c0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00106c3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00106c5:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00106c8:	89 c7                	mov    edi,eax
c00106ca:	c1 e1 03             	shl    ecx,0x3
c00106cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	89 d8                	mov    eax,ebx
c00106d4:	5b                   	pop    ebx
c00106d5:	5e                   	pop    esi
c00106d6:	5f                   	pop    edi
c00106d7:	c3                   	ret    

c00106d8 <Krnl::loadSystemEnv()>:
c00106d8:	53                   	push   ebx
c00106d9:	83 ec 14             	sub    esp,0x14
c00106dc:	6a 0c                	push   0xc
c00106de:	e8 e8 73 ff ff       	call   c0007acb <malloc>
c00106e3:	89 c3                	mov    ebx,eax
c00106e5:	58                   	pop    eax
c00106e6:	5a                   	pop    edx
c00106e7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106ed:	53                   	push   ebx
c00106ee:	e8 71 fe ff ff       	call   c0010564 <EnvVarContainer::EnvVarContainer(Process*)>
c00106f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106f6:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106fc:	e8 47 fe ff ff       	call   c0010548 <EnvVarContainer::__loadSystem()>
c0010701:	83 c4 18             	add    esp,0x18
c0010704:	5b                   	pop    ebx
c0010705:	c3                   	ret    

c0010706 <Krnl::loadUserEnv()>:
c0010706:	53                   	push   ebx
c0010707:	83 ec 14             	sub    esp,0x14
c001070a:	6a 0c                	push   0xc
c001070c:	e8 ba 73 ff ff       	call   c0007acb <malloc>
c0010711:	89 c3                	mov    ebx,eax
c0010713:	58                   	pop    eax
c0010714:	5a                   	pop    edx
c0010715:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001071b:	53                   	push   ebx
c001071c:	e8 43 fe ff ff       	call   c0010564 <EnvVarContainer::EnvVarContainer(Process*)>
c0010721:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010727:	83 c4 18             	add    esp,0x18
c001072a:	5b                   	pop    ebx
c001072b:	c3                   	ret    

c001072c <Krnl::flushEnv()>:
c001072c:	c3                   	ret    

c001072d <Krnl::getProcessTotalEnvCount(Process*)>:
c001072d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010731:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010737:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001073d:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010742:	8b 00                	mov    eax,DWORD PTR [eax]
c0010744:	03 01                	add    eax,DWORD PTR [ecx]
c0010746:	85 d2                	test   edx,edx
c0010748:	74 02                	je     c001074c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001074a:	03 02                	add    eax,DWORD PTR [edx]
c001074c:	c3                   	ret    

c001074d <Krnl::getProcessEnvPair(Process*, int)>:
c001074d:	57                   	push   edi
c001074e:	56                   	push   esi
c001074f:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010755:	53                   	push   ebx
c0010756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001075a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001075e:	85 f6                	test   esi,esi
c0010760:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010764:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001076a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001076c:	75 16                	jne    c0010784 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001076e:	39 c2                	cmp    edx,eax
c0010770:	7c 16                	jl     c0010788 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010772:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010778:	8b 31                	mov    esi,DWORD PTR [ecx]
c001077a:	01 c6                	add    esi,eax
c001077c:	39 d6                	cmp    esi,edx
c001077e:	7e 3c                	jle    c00107bc <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010780:	29 c2                	sub    edx,eax
c0010782:	eb 04                	jmp    c0010788 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010784:	39 c2                	cmp    edx,eax
c0010786:	7d 05                	jge    c001078d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010788:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001078b:	eb 20                	jmp    c00107ad <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001078d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001078f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010792:	39 d1                	cmp    ecx,edx
c0010794:	7e 04                	jle    c001079a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010796:	29 c2                	sub    edx,eax
c0010798:	eb 10                	jmp    c00107aa <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001079a:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c00107a0:	03 0e                	add    ecx,DWORD PTR [esi]
c00107a2:	39 d1                	cmp    ecx,edx
c00107a4:	7e 16                	jle    c00107bc <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00107a6:	29 c2                	sub    edx,eax
c00107a8:	29 fa                	sub    edx,edi
c00107aa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00107ad:	8d 14 d0             	lea    edx,[eax+edx*8]
c00107b0:	8b 02                	mov    eax,DWORD PTR [edx]
c00107b2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00107b5:	89 03                	mov    DWORD PTR [ebx],eax
c00107b7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00107ba:	eb 1d                	jmp    c00107d9 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00107bc:	83 ec 0c             	sub    esp,0xc
c00107bf:	68 a2 0c 02 c0       	push   0xc0020ca2
c00107c4:	e8 ac 00 00 00       	call   c0010875 <KePanic(char const*)>
c00107c9:	83 c4 10             	add    esp,0x10
c00107cc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00107d2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00107d9:	89 d8                	mov    eax,ebx
c00107db:	5b                   	pop    ebx
c00107dc:	5e                   	pop    esi
c00107dd:	5f                   	pop    edi
c00107de:	c2 04 00             	ret    0x4

c00107e1 <CPU::current()>:
c00107e1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107ec:	c3                   	ret    

c00107ed <operator new(unsigned long)>:
c00107ed:	e9 d9 72 ff ff       	jmp    c0007acb <malloc>

c00107f2 <operator delete(void*)>:
c00107f2:	e9 f4 72 ff ff       	jmp    c0007aeb <rfree>

c00107f7 <disableIRQs()>:
c00107f7:	fa                   	cli    
c00107f8:	c3                   	ret    

c00107f9 <enableIRQs()>:
c00107f9:	fb                   	sti    
c00107fa:	c3                   	ret    

c00107fb <lockScheduler()>:
c00107fb:	fa                   	cli    
c00107fc:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010802:	c3                   	ret    

c0010803 <unlockScheduler()>:
c0010803:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010808:	48                   	dec    eax
c0010809:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001080e:	75 01                	jne    c0010811 <unlockScheduler()+0xe>
c0010810:	fb                   	sti    
c0010811:	c3                   	ret    

c0010812 <lockStuff()>:
c0010812:	fa                   	cli    
c0010813:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010819:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c001081f:	c3                   	ret    

c0010820 <unlockStuff()>:
c0010820:	83 ec 0c             	sub    esp,0xc
c0010823:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010828:	48                   	dec    eax
c0010829:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001082e:	75 18                	jne    c0010848 <unlockStuff()+0x28>
c0010830:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010837:	74 0f                	je     c0010848 <unlockStuff()+0x28>
c0010839:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010843:	e8 28 48 00 00       	call   c0015070 <schedule()>
c0010848:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001084d:	48                   	dec    eax
c001084e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010853:	75 01                	jne    c0010856 <unlockStuff()+0x36>
c0010855:	fb                   	sti    
c0010856:	83 c4 0c             	add    esp,0xc
c0010859:	c3                   	ret    

c001085a <Virt::getAKernelVAS()>:
c001085a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001085f:	c3                   	ret    

c0010860 <__not_memcpy>:
c0010860:	57                   	push   edi
c0010861:	56                   	push   esi
c0010862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010866:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001086a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001086e:	89 c7                	mov    edi,eax
c0010870:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010872:	5e                   	pop    esi
c0010873:	5f                   	pop    edi
c0010874:	c3                   	ret    

c0010875 <KePanic(char const*)>:
c0010875:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c001087c:	e9 11 67 00 00       	jmp    c0016f92 <HalPanic(char const*)>

c0010881 <Krnl::powerThread(void*)>:
c0010881:	83 ec 0c             	sub    esp,0xc
c0010884:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010889:	48                   	dec    eax
c001088a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001088f:	75 01                	jne    c0010892 <Krnl::powerThread(void*)+0x11>
c0010891:	fb                   	sti    
c0010892:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010899:	83 ec 0c             	sub    esp,0xc
c001089c:	6a 0a                	push   0xa
c001089e:	e8 fd 4a 00 00       	call   c00153a0 <sleep(unsigned int)>
c00108a3:	83 c4 10             	add    esp,0x10
c00108a6:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c00108ad:	eb e3                	jmp    c0010892 <Krnl::powerThread(void*)+0x11>

c00108af <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00108af:	57                   	push   edi
c00108b0:	b9 09 00 00 00       	mov    ecx,0x9
c00108b5:	56                   	push   esi
c00108b6:	bf 60 79 02 c0       	mov    edi,0xc0027960
c00108bb:	fc                   	cld    
c00108bc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00108c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108c2:	5e                   	pop    esi
c00108c3:	5f                   	pop    edi
c00108c4:	c3                   	ret    

c00108c5 <Krnl::userIOReceived()>:
c00108c5:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108cf:	c3                   	ret    

c00108d0 <Krnl::handlePowerButton()>:
c00108d0:	83 ec 0c             	sub    esp,0xc
c00108d3:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00108d8:	83 f8 02             	cmp    eax,0x2
c00108db:	75 10                	jne    c00108ed <Krnl::handlePowerButton()+0x1d>
c00108dd:	83 ec 0c             	sub    esp,0xc
c00108e0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108e6:	e8 57 68 ff ff       	call   c0007142 <Computer::shutdown()>
c00108eb:	eb 11                	jmp    c00108fe <Krnl::handlePowerButton()+0x2e>
c00108ed:	48                   	dec    eax
c00108ee:	75 11                	jne    c0010901 <Krnl::handlePowerButton()+0x31>
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108f9:	e8 74 68 ff ff       	call   c0007172 <Computer::sleep()>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	83 c4 0c             	add    esp,0xc
c0010904:	c3                   	ret    

c0010905 <Krnl::handleSleepButton()>:
c0010905:	83 ec 0c             	sub    esp,0xc
c0010908:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001090d:	83 f8 02             	cmp    eax,0x2
c0010910:	75 10                	jne    c0010922 <Krnl::handleSleepButton()+0x1d>
c0010912:	83 ec 0c             	sub    esp,0xc
c0010915:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001091b:	e8 22 68 ff ff       	call   c0007142 <Computer::shutdown()>
c0010920:	eb 11                	jmp    c0010933 <Krnl::handleSleepButton()+0x2e>
c0010922:	48                   	dec    eax
c0010923:	75 11                	jne    c0010936 <Krnl::handleSleepButton()+0x31>
c0010925:	83 ec 0c             	sub    esp,0xc
c0010928:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001092e:	e8 3f 68 ff ff       	call   c0007172 <Computer::sleep()>
c0010933:	83 c4 10             	add    esp,0x10
c0010936:	83 c4 0c             	add    esp,0xc
c0010939:	c3                   	ret    

c001093a <Krnl::setupPowerManager()>:
c001093a:	83 ec 0c             	sub    esp,0xc
c001093d:	68 f0 00 00 00       	push   0xf0
c0010942:	6a 00                	push   0x0
c0010944:	68 81 08 01 c0       	push   0xc0010881
c0010949:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001094f:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010959:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010960:	e8 bf 44 00 00       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c0010965:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c001096f:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010979:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010983:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001098d:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010997:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c00109a1:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c00109ab:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c00109b5:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c00109bf:	83 c4 1c             	add    esp,0x1c
c00109c2:	c3                   	ret    

c00109c3 <KeRand()>:
c00109c3:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c00109cd:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c00109d7:	53                   	push   ebx
c00109d8:	01 c1                	add    ecx,eax
c00109da:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109df:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109e5:	01 ca                	add    edx,ecx
c00109e7:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109ec:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109f1:	83 d2 00             	adc    edx,0x0
c00109f4:	0f b7 da             	movzx  ebx,dx
c00109f7:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109fd:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010a01:	5b                   	pop    ebx
c0010a02:	c3                   	ret    

c0010a03 <KeSeedRand(unsigned int)>:
c0010a03:	53                   	push   ebx
c0010a04:	83 ec 08             	sub    esp,0x8
c0010a07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a0b:	e8 99 68 00 00       	call   c00172a9 <HalGetRand()>
c0010a10:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010a1a:	31 d8                	xor    eax,ebx
c0010a1c:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a21:	e8 9d ff ff ff       	call   c00109c3 <KeRand()>
c0010a26:	83 c4 08             	add    esp,0x8
c0010a29:	5b                   	pop    ebx
c0010a2a:	eb 97                	jmp    c00109c3 <KeRand()>

c0010a2c <KeInitRand()>:
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	e8 6a 66 00 00       	call   c001709e <HalQueryPerformanceCounter()>
c0010a34:	0f 20 da             	mov    edx,cr3
c0010a37:	0f 22 da             	mov    cr3,edx
c0010a3a:	0f 20 da             	mov    edx,cr3
c0010a3d:	0f 22 da             	mov    cr3,edx
c0010a40:	0f 20 da             	mov    edx,cr3
c0010a43:	0f 22 da             	mov    cr3,edx
c0010a46:	0f 20 da             	mov    edx,cr3
c0010a49:	0f 22 da             	mov    cr3,edx
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a54:	50                   	push   eax
c0010a55:	e8 a9 ff ff ff       	call   c0010a03 <KeSeedRand(unsigned int)>
c0010a5a:	83 c4 1c             	add    esp,0x1c
c0010a5d:	c3                   	ret    
c0010a5e:	66 90                	xchg   ax,ax

c0010a60 <KeResolveCompatibilitySymbol(char*)>:
c0010a60:	83 ec 0c             	sub    esp,0xc
c0010a63:	83 ec 08             	sub    esp,0x8
c0010a66:	68 bc 0c 02 c0       	push   0xc0020cbc
c0010a6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a6f:	e8 0c fd fe ff       	call   c0000780 <strcmp>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	85 c0                	test   eax,eax
c0010a79:	0f 94 c0             	sete   al
c0010a7c:	0f b6 c0             	movzx  eax,al
c0010a7f:	85 c0                	test   eax,eax
c0010a81:	74 0d                	je     c0010a90 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a83:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a88:	e9 8b 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a90:	83 ec 08             	sub    esp,0x8
c0010a93:	68 c5 0c 02 c0       	push   0xc0020cc5
c0010a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a9c:	e8 df fc fe ff       	call   c0000780 <strcmp>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	0f 94 c0             	sete   al
c0010aa9:	0f b6 c0             	movzx  eax,al
c0010aac:	85 c0                	test   eax,eax
c0010aae:	74 0c                	je     c0010abc <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010ab0:	b8 40 e6 01 c0       	mov    eax,0xc001e640
c0010ab5:	e9 5e 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aba:	66 90                	xchg   ax,ax
c0010abc:	83 ec 08             	sub    esp,0x8
c0010abf:	68 cf 0c 02 c0       	push   0xc0020ccf
c0010ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac8:	e8 b3 fc fe ff       	call   c0000780 <strcmp>
c0010acd:	83 c4 10             	add    esp,0x10
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	0f 94 c0             	sete   al
c0010ad5:	0f b6 c0             	movzx  eax,al
c0010ad8:	85 c0                	test   eax,eax
c0010ada:	74 0c                	je     c0010ae8 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010adc:	b8 74 e3 01 c0       	mov    eax,0xc001e374
c0010ae1:	e9 32 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	83 ec 08             	sub    esp,0x8
c0010aeb:	68 d8 0c 02 c0       	push   0xc0020cd8
c0010af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af4:	e8 87 fc fe ff       	call   c0000780 <strcmp>
c0010af9:	83 c4 10             	add    esp,0x10
c0010afc:	85 c0                	test   eax,eax
c0010afe:	0f 94 c0             	sete   al
c0010b01:	0f b6 c0             	movzx  eax,al
c0010b04:	85 c0                	test   eax,eax
c0010b06:	74 0c                	je     c0010b14 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010b08:	b8 75 08 01 c0       	mov    eax,0xc0010875
c0010b0d:	e9 06 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	83 ec 08             	sub    esp,0x8
c0010b17:	68 eb 0c 02 c0       	push   0xc0020ceb
c0010b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b20:	e8 5b fc fe ff       	call   c0000780 <strcmp>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	0f 94 c0             	sete   al
c0010b2d:	0f b6 c0             	movzx  eax,al
c0010b30:	85 c0                	test   eax,eax
c0010b32:	74 0c                	je     c0010b40 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b34:	b8 f8 01 01 c0       	mov    eax,0xc00101f8
c0010b39:	e9 da 00 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b3e:	66 90                	xchg   ax,ax
c0010b40:	83 ec 08             	sub    esp,0x8
c0010b43:	68 08 0d 02 c0       	push   0xc0020d08
c0010b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4c:	e8 2f fc fe ff       	call   c0000780 <strcmp>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	85 c0                	test   eax,eax
c0010b56:	0f 94 c0             	sete   al
c0010b59:	0f b6 c0             	movzx  eax,al
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	74 0c                	je     c0010b6c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b60:	b8 40 e7 01 c0       	mov    eax,0xc001e740
c0010b65:	e9 ae 00 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	83 ec 08             	sub    esp,0x8
c0010b6f:	68 12 0d 02 c0       	push   0xc0020d12
c0010b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b78:	e8 03 fc fe ff       	call   c0000780 <strcmp>
c0010b7d:	83 c4 10             	add    esp,0x10
c0010b80:	85 c0                	test   eax,eax
c0010b82:	0f 94 c0             	sete   al
c0010b85:	0f b6 c0             	movzx  eax,al
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	74 0c                	je     c0010b98 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b8c:	b8 c0 e4 01 c0       	mov    eax,0xc001e4c0
c0010b91:	e9 82 00 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b96:	66 90                	xchg   ax,ax
c0010b98:	83 ec 08             	sub    esp,0x8
c0010b9b:	68 1b 0d 02 c0       	push   0xc0020d1b
c0010ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba4:	e8 d7 fb fe ff       	call   c0000780 <strcmp>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	85 c0                	test   eax,eax
c0010bae:	0f 94 c0             	sete   al
c0010bb1:	0f b6 c0             	movzx  eax,al
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	74 08                	je     c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010bb8:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010bbd:	eb 59                	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bbf:	90                   	nop
c0010bc0:	83 ec 08             	sub    esp,0x8
c0010bc3:	68 33 0d 02 c0       	push   0xc0020d33
c0010bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bcc:	e8 af fb fe ff       	call   c0000780 <strcmp>
c0010bd1:	83 c4 10             	add    esp,0x10
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	0f 94 c0             	sete   al
c0010bd9:	0f b6 c0             	movzx  eax,al
c0010bdc:	85 c0                	test   eax,eax
c0010bde:	74 08                	je     c0010be8 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010be0:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010be5:	eb 31                	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010be7:	90                   	nop
c0010be8:	83 ec 08             	sub    esp,0x8
c0010beb:	68 40 0d 02 c0       	push   0xc0020d40
c0010bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf4:	e8 87 fb fe ff       	call   c0000780 <strcmp>
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	85 c0                	test   eax,eax
c0010bfe:	0f 94 c0             	sete   al
c0010c01:	0f b6 c0             	movzx  eax,al
c0010c04:	85 c0                	test   eax,eax
c0010c06:	74 08                	je     c0010c10 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010c08:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010c0d:	eb 09                	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c0f:	90                   	nop
c0010c10:	b8 00 00 00 00       	mov    eax,0x0
c0010c15:	8d 76 00             	lea    esi,[esi+0x0]
c0010c18:	83 c4 0c             	add    esp,0xc
c0010c1b:	c3                   	ret    

c0010c1c <KiSigKill(int)>:
c0010c1c:	83 ec 0c             	sub    esp,0xc
c0010c1f:	6a 00                	push   0x0
c0010c21:	6a 00                	push   0x0
c0010c23:	6a ff                	push   0xffffffff
c0010c25:	6a 01                	push   0x1
c0010c27:	e8 26 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c2c:	83 c4 1c             	add    esp,0x1c
c0010c2f:	c3                   	ret    

c0010c30 <KiDefaultSignalHandlerIgnore(int)>:
c0010c30:	c3                   	ret    

c0010c31 <KiDefaultSignalHandlerPause(int)>:
c0010c31:	57                   	push   edi
c0010c32:	b9 07 00 00 00       	mov    ecx,0x7
c0010c37:	56                   	push   esi
c0010c38:	be 89 0d 02 c0       	mov    esi,0xc0020d89
c0010c3d:	83 ec 24             	sub    esp,0x24
c0010c40:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c44:	fc                   	cld    
c0010c45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c47:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c4b:	50                   	push   eax
c0010c4c:	6a 00                	push   0x0
c0010c4e:	6a 00                	push   0x0
c0010c50:	6a 27                	push   0x27
c0010c52:	e8 fb 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c57:	83 c4 34             	add    esp,0x34
c0010c5a:	5e                   	pop    esi
c0010c5b:	5f                   	pop    edi
c0010c5c:	c3                   	ret    

c0010c5d <KiDefaultSignalHandlerResume(int)>:
c0010c5d:	57                   	push   edi
c0010c5e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c63:	56                   	push   esi
c0010c64:	be a5 0d 02 c0       	mov    esi,0xc0020da5
c0010c69:	83 ec 24             	sub    esp,0x24
c0010c6c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c70:	fc                   	cld    
c0010c71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c73:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c77:	50                   	push   eax
c0010c78:	6a 00                	push   0x0
c0010c7a:	6a 00                	push   0x0
c0010c7c:	6a 27                	push   0x27
c0010c7e:	e8 cf 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c83:	83 c4 34             	add    esp,0x34
c0010c86:	5e                   	pop    esi
c0010c87:	5f                   	pop    edi
c0010c88:	c3                   	ret    

c0010c89 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c89:	e9 4d 6e ff ff       	jmp    c0007adb <free>

c0010c8e <KeInitSignals()>:
c0010c8e:	53                   	push   ebx
c0010c8f:	83 ec 14             	sub    esp,0x14
c0010c92:	68 c8 00 00 00       	push   0xc8
c0010c97:	e8 2f 6e ff ff       	call   c0007acb <malloc>
c0010c9c:	83 c4 0c             	add    esp,0xc
c0010c9f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010ca9:	89 c3                	mov    ebx,eax
c0010cab:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010cb5:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010cbb:	6a 20                	push   0x20
c0010cbd:	6a 00                	push   0x0
c0010cbf:	50                   	push   eax
c0010cc0:	e8 2b f8 fe ff       	call   c00004f0 <memset>
c0010cc5:	83 c4 0c             	add    esp,0xc
c0010cc8:	6a 44                	push   0x44
c0010cca:	6a 00                	push   0x0
c0010ccc:	53                   	push   ebx
c0010ccd:	e8 1e f8 fe ff       	call   c00004f0 <memset>
c0010cd2:	83 c4 18             	add    esp,0x18
c0010cd5:	89 d8                	mov    eax,ebx
c0010cd7:	5b                   	pop    ebx
c0010cd8:	c3                   	ret    

c0010cd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010cd9:	53                   	push   ebx
c0010cda:	b8 01 00 00 00       	mov    eax,0x1
c0010cdf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ce3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ce7:	83 f9 10             	cmp    ecx,0x10
c0010cea:	7f 21                	jg     c0010d0d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010cf3:	89 03                	mov    DWORD PTR [ebx],eax
c0010cf5:	b8 01 00 00 00       	mov    eax,0x1
c0010cfa:	d3 e0                	shl    eax,cl
c0010cfc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010d00:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010d03:	31 c0                	xor    eax,eax
c0010d05:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010d0d:	5b                   	pop    ebx
c0010d0e:	c3                   	ret    

c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010d0f:	55                   	push   ebp
c0010d10:	57                   	push   edi
c0010d11:	bf 08 00 00 00       	mov    edi,0x8
c0010d16:	56                   	push   esi
c0010d17:	53                   	push   ebx
c0010d18:	83 ec 18             	sub    esp,0x18
c0010d1b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d1f:	68 c2 0d 02 c0       	push   0xc0020dc2
c0010d24:	e8 81 9c ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0010d29:	83 c4 10             	add    esp,0x10
c0010d2c:	31 c9                	xor    ecx,ecx
c0010d2e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d35:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010d3b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d3f:	99                   	cdq    
c0010d40:	f7 ff                	idiv   edi
c0010d42:	8d 42 24             	lea    eax,[edx+0x24]
c0010d45:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d49:	85 f6                	test   esi,esi
c0010d4b:	75 1a                	jne    c0010d67 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d4d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d51:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d55:	50                   	push   eax
c0010d56:	50                   	push   eax
c0010d57:	52                   	push   edx
c0010d58:	68 d3 0d 02 c0       	push   0xc0020dd3
c0010d5d:	e8 48 9c ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0010d62:	83 c4 10             	add    esp,0x10
c0010d65:	eb 1b                	jmp    c0010d82 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d67:	41                   	inc    ecx
c0010d68:	83 f9 08             	cmp    ecx,0x8
c0010d6b:	75 ce                	jne    c0010d3b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d6d:	83 ec 0c             	sub    esp,0xc
c0010d70:	be 01 00 00 00       	mov    esi,0x1
c0010d75:	68 f4 0d 02 c0       	push   0xc0020df4
c0010d7a:	e8 2b 9c ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0010d7f:	83 c4 10             	add    esp,0x10
c0010d82:	83 c4 0c             	add    esp,0xc
c0010d85:	89 f0                	mov    eax,esi
c0010d87:	5b                   	pop    ebx
c0010d88:	5e                   	pop    esi
c0010d89:	5f                   	pop    edi
c0010d8a:	5d                   	pop    ebp
c0010d8b:	c3                   	ret    

c0010d8c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d8c:	55                   	push   ebp
c0010d8d:	57                   	push   edi
c0010d8e:	56                   	push   esi
c0010d8f:	53                   	push   ebx
c0010d90:	51                   	push   ecx
c0010d91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d95:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d9c:	0f 84 af 00 00 00    	je     c0010e51 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010da2:	31 c9                	xor    ecx,ecx
c0010da4:	bf 08 00 00 00       	mov    edi,0x8
c0010da9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010daf:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010db2:	99                   	cdq    
c0010db3:	f7 ff                	idiv   edi
c0010db5:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010dbc:	85 ed                	test   ebp,ebp
c0010dbe:	0f 84 9e 00 00 00    	je     c0010e62 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010dc4:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010dca:	89 e9                	mov    ecx,ebp
c0010dcc:	bf 01 00 00 00       	mov    edi,0x1
c0010dd1:	d3 e7                	shl    edi,cl
c0010dd3:	31 c9                	xor    ecx,ecx
c0010dd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dd8:	b8 01 00 00 00       	mov    eax,0x1
c0010ddd:	d3 e0                	shl    eax,cl
c0010ddf:	85 04 24             	test   DWORD PTR [esp],eax
c0010de2:	74 06                	je     c0010dea <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010de4:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010de8:	75 67                	jne    c0010e51 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dea:	41                   	inc    ecx
c0010deb:	83 f9 11             	cmp    ecx,0x11
c0010dee:	75 e8                	jne    c0010dd8 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010df3:	46                   	inc    esi
c0010df4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dfa:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010e05:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e0c:	09 f8                	or     eax,edi
c0010e0e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010e14:	31 c0                	xor    eax,eax
c0010e16:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010e1e:	74 09                	je     c0010e29 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010e20:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010e27:	eb 06                	jmp    c0010e2f <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010e29:	40                   	inc    eax
c0010e2a:	83 f8 08             	cmp    eax,0x8
c0010e2d:	75 e7                	jne    c0010e16 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010e2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010e33:	83 fd 09             	cmp    ebp,0x9
c0010e36:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e39:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e3b:	75 07                	jne    c0010e44 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010e3d:	b8 1c 0c 01 c0       	mov    eax,0xc0010c1c
c0010e42:	eb 31                	jmp    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e44:	83 f8 01             	cmp    eax,0x1
c0010e47:	75 0c                	jne    c0010e55 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e49:	f7 d7                	not    edi
c0010e4b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e51:	31 c0                	xor    eax,eax
c0010e53:	eb 20                	jmp    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 1c                	jne    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e59:	8b 04 ad a0 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdde60]
c0010e60:	eb 13                	jmp    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e62:	41                   	inc    ecx
c0010e63:	46                   	inc    esi
c0010e64:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e6a:	83 f9 08             	cmp    ecx,0x8
c0010e6d:	0f 85 36 ff ff ff    	jne    c0010da9 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e73:	eb dc                	jmp    c0010e51 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e75:	5a                   	pop    edx
c0010e76:	5b                   	pop    ebx
c0010e77:	5e                   	pop    esi
c0010e78:	5f                   	pop    edi
c0010e79:	5d                   	pop    ebp
c0010e7a:	c3                   	ret    

c0010e7b <KiCheckSignalZ>:
c0010e7b:	83 ec 10             	sub    esp,0x10
c0010e7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e82:	50                   	push   eax
c0010e83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e8b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e91:	e8 f6 fe ff ff       	call   c0010d8c <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e96:	5a                   	pop    edx
c0010e97:	31 d2                	xor    edx,edx
c0010e99:	59                   	pop    ecx
c0010e9a:	85 c0                	test   eax,eax
c0010e9c:	74 19                	je     c0010eb7 <KiCheckSignalZ+0x3c>
c0010e9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010ea4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010ea7:	89 02                	mov    DWORD PTR [edx],eax
c0010ea9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010eb4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010eb7:	89 d0                	mov    eax,edx
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	c3                   	ret    

c0010ebd <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010ebd:	56                   	push   esi
c0010ebe:	53                   	push   ebx
c0010ebf:	bb 01 00 00 00       	mov    ebx,0x1
c0010ec4:	52                   	push   edx
c0010ec5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ec9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ecd:	d3 e3                	shl    ebx,cl
c0010ecf:	83 f9 10             	cmp    ecx,0x10
c0010ed2:	7f 08                	jg     c0010edc <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010ed4:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010eda:	75 10                	jne    c0010eec <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010edc:	83 ec 0c             	sub    esp,0xc
c0010edf:	68 05 0e 02 c0       	push   0xc0020e05
c0010ee4:	e8 8c f9 ff ff       	call   c0010875 <KePanic(char const*)>
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	f7 d3                	not    ebx
c0010eee:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010ef4:	58                   	pop    eax
c0010ef5:	5b                   	pop    ebx
c0010ef6:	5e                   	pop    esi
c0010ef7:	c3                   	ret    

c0010ef8 <KiFinishSignalZ>:
c0010ef8:	53                   	push   ebx
c0010ef9:	83 ec 10             	sub    esp,0x10
c0010efc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010f00:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f0b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f11:	e8 a7 ff ff ff       	call   c0010ebd <KeCompleteSignal(SigHandlerBlock*, int)>
c0010f16:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f1c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010f23:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010f2a:	83 c4 18             	add    esp,0x18
c0010f2d:	5b                   	pop    ebx
c0010f2e:	c3                   	ret    

c0010f2f <SysSeekDir(regs*)>:
c0010f2f:	31 c0                	xor    eax,eax
c0010f31:	31 d2                	xor    edx,edx
c0010f33:	c3                   	ret    

c0010f34 <SysTellDir(regs*)>:
c0010f34:	31 c0                	xor    eax,eax
c0010f36:	31 d2                	xor    edx,edx
c0010f38:	c3                   	ret    

c0010f39 <SysVerify(regs*)>:
c0010f39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f3d:	31 d2                	xor    edx,edx
c0010f3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f42:	c3                   	ret    

c0010f43 <SysGetArgc(regs*)>:
c0010f43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f4b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f51:	89 c2                	mov    edx,eax
c0010f53:	c1 fa 1f             	sar    edx,0x1f
c0010f56:	c3                   	ret    

c0010f57 <SysTTYName(regs*)>:
c0010f57:	b8 01 00 00 00       	mov    eax,0x1
c0010f5c:	31 d2                	xor    edx,edx
c0010f5e:	c3                   	ret    

c0010f5f <SysFormatDisk(regs*)>:
c0010f5f:	56                   	push   esi
c0010f60:	53                   	push   ebx
c0010f61:	83 ec 04             	sub    esp,0x4
c0010f64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f68:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f6e:	eb 2a                	jmp    c0010f9a <SysFormatDisk(regs*)+0x3b>
c0010f70:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f73:	83 ec 0c             	sub    esp,0xc
c0010f76:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f7b:	51                   	push   ecx
c0010f7c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f7f:	51                   	push   ecx
c0010f80:	50                   	push   eax
c0010f81:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f88:	50                   	push   eax
c0010f89:	53                   	push   ebx
c0010f8a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f8d:	83 c4 20             	add    esp,0x20
c0010f90:	83 f8 08             	cmp    eax,0x8
c0010f93:	89 c1                	mov    ecx,eax
c0010f95:	75 14                	jne    c0010fab <SysFormatDisk(regs*)+0x4c>
c0010f97:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f9a:	85 db                	test   ebx,ebx
c0010f9c:	75 d2                	jne    c0010f70 <SysFormatDisk(regs*)+0x11>
c0010f9e:	b8 03 00 00 00       	mov    eax,0x3
c0010fa3:	31 d2                	xor    edx,edx
c0010fa5:	83 c4 04             	add    esp,0x4
c0010fa8:	5b                   	pop    ebx
c0010fa9:	5e                   	pop    esi
c0010faa:	c3                   	ret    
c0010fab:	85 c0                	test   eax,eax
c0010fad:	74 13                	je     c0010fc2 <SysFormatDisk(regs*)+0x63>
c0010faf:	31 d2                	xor    edx,edx
c0010fb1:	83 f9 09             	cmp    ecx,0x9
c0010fb4:	b8 01 00 00 00       	mov    eax,0x1
c0010fb9:	74 ea                	je     c0010fa5 <SysFormatDisk(regs*)+0x46>
c0010fbb:	b8 02 00 00 00       	mov    eax,0x2
c0010fc0:	eb e1                	jmp    c0010fa3 <SysFormatDisk(regs*)+0x44>
c0010fc2:	31 c0                	xor    eax,eax
c0010fc4:	eb dd                	jmp    c0010fa3 <SysFormatDisk(regs*)+0x44>

c0010fc6 <SysSetDiskVolumeLabel(regs*)>:
c0010fc6:	56                   	push   esi
c0010fc7:	53                   	push   ebx
c0010fc8:	83 ec 04             	sub    esp,0x4
c0010fcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fcf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fd2:	83 f8 19             	cmp    eax,0x19
c0010fd5:	77 33                	ja     c001100a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fd7:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010fde:	85 c9                	test   ecx,ecx
c0010fe0:	74 28                	je     c001100a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fe2:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010fe5:	85 db                	test   ebx,ebx
c0010fe7:	74 21                	je     c001100a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fe9:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010fef:	85 d2                	test   edx,edx
c0010ff1:	74 17                	je     c001100a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010ff3:	8b 32                	mov    esi,DWORD PTR [edx]
c0010ff5:	53                   	push   ebx
c0010ff6:	50                   	push   eax
c0010ff7:	51                   	push   ecx
c0010ff8:	52                   	push   edx
c0010ff9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010ffc:	83 c4 10             	add    esp,0x10
c0010fff:	83 c4 04             	add    esp,0x4
c0011002:	5b                   	pop    ebx
c0011003:	5e                   	pop    esi
c0011004:	89 c2                	mov    edx,eax
c0011006:	c1 fa 1f             	sar    edx,0x1f
c0011009:	c3                   	ret    
c001100a:	83 c4 04             	add    esp,0x4
c001100d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011012:	5b                   	pop    ebx
c0011013:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011018:	5e                   	pop    esi
c0011019:	c3                   	ret    

c001101a <SysGetDiskVolumeLabel(regs*)>:
c001101a:	57                   	push   edi
c001101b:	56                   	push   esi
c001101c:	53                   	push   ebx
c001101d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011021:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011024:	83 fa 19             	cmp    edx,0x19
c0011027:	77 3c                	ja     c0011065 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011029:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0011030:	85 c9                	test   ecx,ecx
c0011032:	74 31                	je     c0011065 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011034:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011037:	85 db                	test   ebx,ebx
c0011039:	74 2a                	je     c0011065 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001103b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001103e:	85 f6                	test   esi,esi
c0011040:	74 23                	je     c0011065 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011042:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011048:	85 c0                	test   eax,eax
c001104a:	74 19                	je     c0011065 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001104c:	83 ec 0c             	sub    esp,0xc
c001104f:	8b 38                	mov    edi,DWORD PTR [eax]
c0011051:	56                   	push   esi
c0011052:	53                   	push   ebx
c0011053:	52                   	push   edx
c0011054:	51                   	push   ecx
c0011055:	50                   	push   eax
c0011056:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011059:	83 c4 20             	add    esp,0x20
c001105c:	5b                   	pop    ebx
c001105d:	5e                   	pop    esi
c001105e:	89 c2                	mov    edx,eax
c0011060:	c1 fa 1f             	sar    edx,0x1f
c0011063:	5f                   	pop    edi
c0011064:	c3                   	ret    
c0011065:	5b                   	pop    ebx
c0011066:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001106b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011070:	5e                   	pop    esi
c0011071:	5f                   	pop    edi
c0011072:	c3                   	ret    

c0011073 <SysShutdown(regs*)>:
c0011073:	57                   	push   edi
c0011074:	56                   	push   esi
c0011075:	83 ec 04             	sub    esp,0x4
c0011078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001107f:	85 c0                	test   eax,eax
c0011081:	74 1e                	je     c00110a1 <SysShutdown(regs*)+0x2e>
c0011083:	83 f8 01             	cmp    eax,0x1
c0011086:	74 5f                	je     c00110e7 <SysShutdown(regs*)+0x74>
c0011088:	83 f8 02             	cmp    eax,0x2
c001108b:	be ff ff ff ff       	mov    esi,0xffffffff
c0011090:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011095:	74 32                	je     c00110c9 <SysShutdown(regs*)+0x56>
c0011097:	83 c4 04             	add    esp,0x4
c001109a:	89 f0                	mov    eax,esi
c001109c:	5e                   	pop    esi
c001109d:	89 fa                	mov    edx,edi
c001109f:	5f                   	pop    edi
c00110a0:	c3                   	ret    
c00110a1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110a6:	be ff ff ff ff       	mov    esi,0xffffffff
c00110ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00110b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00110b2:	6a 00                	push   0x0
c00110b4:	6a 00                	push   0x0
c00110b6:	6a 00                	push   0x0
c00110b8:	50                   	push   eax
c00110b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110bc:	83 c4 10             	add    esp,0x10
c00110bf:	89 f0                	mov    eax,esi
c00110c1:	83 c4 04             	add    esp,0x4
c00110c4:	89 fa                	mov    edx,edi
c00110c6:	5e                   	pop    esi
c00110c7:	5f                   	pop    edi
c00110c8:	c3                   	ret    
c00110c9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00110d0:	6a 00                	push   0x0
c00110d2:	6a 00                	push   0x0
c00110d4:	6a 01                	push   0x1
c00110d6:	50                   	push   eax
c00110d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110da:	83 c4 10             	add    esp,0x10
c00110dd:	89 f0                	mov    eax,esi
c00110df:	83 c4 04             	add    esp,0x4
c00110e2:	89 fa                	mov    edx,edi
c00110e4:	5e                   	pop    esi
c00110e5:	5f                   	pop    edi
c00110e6:	c3                   	ret    
c00110e7:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110ec:	85 c0                	test   eax,eax
c00110ee:	74 02                	je     c00110f2 <SysShutdown(regs*)+0x7f>
c00110f0:	ff d0                	call   eax
c00110f2:	31 f6                	xor    esi,esi
c00110f4:	83 c4 04             	add    esp,0x4
c00110f7:	89 f0                	mov    eax,esi
c00110f9:	31 ff                	xor    edi,edi
c00110fb:	5e                   	pop    esi
c00110fc:	89 fa                	mov    edx,edi
c00110fe:	5f                   	pop    edi
c00110ff:	c3                   	ret    

c0011100 <SysRealpath(regs*)>:
c0011100:	53                   	push   ebx
c0011101:	83 ec 08             	sub    esp,0x8
c0011104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011108:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001110b:	85 c9                	test   ecx,ecx
c001110d:	74 37                	je     c0011146 <SysRealpath(regs*)+0x46>
c001110f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011112:	31 d2                	xor    edx,edx
c0011114:	b8 01 00 00 00       	mov    eax,0x1
c0011119:	85 db                	test   ebx,ebx
c001111b:	75 05                	jne    c0011122 <SysRealpath(regs*)+0x22>
c001111d:	83 c4 08             	add    esp,0x8
c0011120:	5b                   	pop    ebx
c0011121:	c3                   	ret    
c0011122:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011127:	83 ec 04             	sub    esp,0x4
c001112a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001112d:	05 0c 01 00 00       	add    eax,0x10c
c0011132:	50                   	push   eax
c0011133:	51                   	push   ecx
c0011134:	53                   	push   ebx
c0011135:	e8 3c 9c ff ff       	call   c000ad76 <Fs::standardiseFiles(char*, char const*, char const*)>
c001113a:	83 c4 10             	add    esp,0x10
c001113d:	31 c0                	xor    eax,eax
c001113f:	31 d2                	xor    edx,edx
c0011141:	83 c4 08             	add    esp,0x8
c0011144:	5b                   	pop    ebx
c0011145:	c3                   	ret    
c0011146:	b8 01 00 00 00       	mov    eax,0x1
c001114b:	31 d2                	xor    edx,edx
c001114d:	eb f2                	jmp    c0011141 <SysRealpath(regs*)+0x41>

c001114f <SysReadDir(regs*)>:
c001114f:	53                   	push   ebx
c0011150:	83 ec 18             	sub    esp,0x18
c0011153:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011157:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001115a:	83 f8 02             	cmp    eax,0x2
c001115d:	76 4f                	jbe    c00111ae <SysReadDir(regs*)+0x5f>
c001115f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011166:	77 52                	ja     c00111ba <SysReadDir(regs*)+0x6b>
c0011168:	83 ec 0c             	sub    esp,0xc
c001116b:	50                   	push   eax
c001116c:	e8 3a 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011171:	83 c4 10             	add    esp,0x10
c0011174:	85 c0                	test   eax,eax
c0011176:	74 42                	je     c00111ba <SysReadDir(regs*)+0x6b>
c0011178:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011180:	83 ec 0c             	sub    esp,0xc
c0011183:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011187:	8b 10                	mov    edx,DWORD PTR [eax]
c0011189:	51                   	push   ecx
c001118a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001118d:	51                   	push   ecx
c001118e:	6a 00                	push   0x0
c0011190:	68 10 01 00 00       	push   0x110
c0011195:	50                   	push   eax
c0011196:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011199:	83 c4 20             	add    esp,0x20
c001119c:	85 c0                	test   eax,eax
c001119e:	89 c1                	mov    ecx,eax
c00111a0:	74 27                	je     c00111c9 <SysReadDir(regs*)+0x7a>
c00111a2:	31 d2                	xor    edx,edx
c00111a4:	83 f9 07             	cmp    ecx,0x7
c00111a7:	b8 02 00 00 00       	mov    eax,0x2
c00111ac:	75 16                	jne    c00111c4 <SysReadDir(regs*)+0x75>
c00111ae:	b8 01 00 00 00       	mov    eax,0x1
c00111b3:	31 d2                	xor    edx,edx
c00111b5:	83 c4 18             	add    esp,0x18
c00111b8:	5b                   	pop    ebx
c00111b9:	c3                   	ret    
c00111ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111c4:	83 c4 18             	add    esp,0x18
c00111c7:	5b                   	pop    ebx
c00111c8:	c3                   	ret    
c00111c9:	31 c0                	xor    eax,eax
c00111cb:	31 d2                	xor    edx,edx
c00111cd:	eb e6                	jmp    c00111b5 <SysReadDir(regs*)+0x66>

c00111cf <SysIsATTY(regs*)>:
c00111cf:	83 ec 0c             	sub    esp,0xc
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111d9:	83 f8 02             	cmp    eax,0x2
c00111dc:	76 07                	jbe    c00111e5 <SysIsATTY(regs*)+0x16>
c00111de:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111e3:	75 26                	jne    c001120b <SysIsATTY(regs*)+0x3c>
c00111e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111f3:	85 c0                	test   eax,eax
c00111f5:	74 24                	je     c001121b <SysIsATTY(regs*)+0x4c>
c00111f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00111f9:	83 ec 0c             	sub    esp,0xc
c00111fc:	50                   	push   eax
c00111fd:	ff 12                	call   DWORD PTR [edx]
c00111ff:	83 c4 10             	add    esp,0x10
c0011202:	31 d2                	xor    edx,edx
c0011204:	83 c4 0c             	add    esp,0xc
c0011207:	0f b6 c0             	movzx  eax,al
c001120a:	c3                   	ret    
c001120b:	83 ec 0c             	sub    esp,0xc
c001120e:	50                   	push   eax
c001120f:	e8 97 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011214:	83 c4 10             	add    esp,0x10
c0011217:	85 c0                	test   eax,eax
c0011219:	75 dc                	jne    c00111f7 <SysIsATTY(regs*)+0x28>
c001121b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011220:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011225:	83 c4 0c             	add    esp,0xc
c0011228:	c3                   	ret    

c0011229 <SysSeek(regs*)>:
c0011229:	56                   	push   esi
c001122a:	53                   	push   ebx
c001122b:	83 ec 04             	sub    esp,0x4
c001122e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011232:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011235:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011238:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c001123e:	77 33                	ja     c0011273 <SysSeek(regs*)+0x4a>
c0011240:	83 ec 0c             	sub    esp,0xc
c0011243:	51                   	push   ecx
c0011244:	e8 62 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011249:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001124c:	83 c4 0c             	add    esp,0xc
c001124f:	31 db                	xor    ebx,ebx
c0011251:	53                   	push   ebx
c0011252:	51                   	push   ecx
c0011253:	50                   	push   eax
c0011254:	e8 73 9e ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	85 c0                	test   eax,eax
c001125e:	0f 95 c0             	setne  al
c0011261:	31 d2                	xor    edx,edx
c0011263:	0f b6 c0             	movzx  eax,al
c0011266:	f7 d8                	neg    eax
c0011268:	83 d2 00             	adc    edx,0x0
c001126b:	83 c4 04             	add    esp,0x4
c001126e:	5b                   	pop    ebx
c001126f:	f7 da                	neg    edx
c0011271:	5e                   	pop    esi
c0011272:	c3                   	ret    
c0011273:	83 c4 04             	add    esp,0x4
c0011276:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001127b:	5b                   	pop    ebx
c001127c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011281:	5e                   	pop    esi
c0011282:	c3                   	ret    

c0011283 <SysTell(regs*)>:
c0011283:	53                   	push   ebx
c0011284:	83 ec 08             	sub    esp,0x8
c0011287:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001128b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001128e:	83 f8 02             	cmp    eax,0x2
c0011291:	76 4e                	jbe    c00112e1 <SysTell(regs*)+0x5e>
c0011293:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011298:	76 19                	jbe    c00112b3 <SysTell(regs*)+0x30>
c001129a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001129d:	31 d2                	xor    edx,edx
c001129f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ac:	83 c4 08             	add    esp,0x8
c00112af:	31 c0                	xor    eax,eax
c00112b1:	5b                   	pop    ebx
c00112b2:	c3                   	ret    
c00112b3:	83 ec 0c             	sub    esp,0xc
c00112b6:	50                   	push   eax
c00112b7:	e8 ef 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00112bc:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00112bf:	5a                   	pop    edx
c00112c0:	59                   	pop    ecx
c00112c1:	53                   	push   ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 5a 9e ff ff       	call   c000b122 <File::tell(unsigned long long*)>
c00112c8:	83 c4 10             	add    esp,0x10
c00112cb:	85 c0                	test   eax,eax
c00112cd:	0f 95 c0             	setne  al
c00112d0:	31 d2                	xor    edx,edx
c00112d2:	0f b6 c0             	movzx  eax,al
c00112d5:	f7 d8                	neg    eax
c00112d7:	83 d2 00             	adc    edx,0x0
c00112da:	83 c4 08             	add    esp,0x8
c00112dd:	5b                   	pop    ebx
c00112de:	f7 da                	neg    edx
c00112e0:	c3                   	ret    
c00112e1:	83 c4 08             	add    esp,0x8
c00112e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112e9:	5b                   	pop    ebx
c00112ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ef:	c3                   	ret    

c00112f0 <SysSize(regs*)>:
c00112f0:	53                   	push   ebx
c00112f1:	83 ec 18             	sub    esp,0x18
c00112f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112fb:	83 f8 02             	cmp    eax,0x2
c00112fe:	76 54                	jbe    c0011354 <SysSize(regs*)+0x64>
c0011300:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011305:	76 19                	jbe    c0011320 <SysSize(regs*)+0x30>
c0011307:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001130a:	31 d2                	xor    edx,edx
c001130c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011312:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011319:	83 c4 18             	add    esp,0x18
c001131c:	31 c0                	xor    eax,eax
c001131e:	5b                   	pop    ebx
c001131f:	c3                   	ret    
c0011320:	83 ec 0c             	sub    esp,0xc
c0011323:	50                   	push   eax
c0011324:	e8 82 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011329:	83 c4 0c             	add    esp,0xc
c001132c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011330:	52                   	push   edx
c0011331:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011334:	52                   	push   edx
c0011335:	50                   	push   eax
c0011336:	e8 7f 9f ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	85 c0                	test   eax,eax
c0011340:	0f 95 c0             	setne  al
c0011343:	31 d2                	xor    edx,edx
c0011345:	0f b6 c0             	movzx  eax,al
c0011348:	f7 d8                	neg    eax
c001134a:	83 d2 00             	adc    edx,0x0
c001134d:	83 c4 18             	add    esp,0x18
c0011350:	5b                   	pop    ebx
c0011351:	f7 da                	neg    edx
c0011353:	c3                   	ret    
c0011354:	83 c4 18             	add    esp,0x18
c0011357:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001135c:	5b                   	pop    ebx
c001135d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011362:	c3                   	ret    

c0011363 <SysSizeFromFilename(regs*)>:
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 10             	sub    esp,0x10
c0011369:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001136d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011370:	83 fb 02             	cmp    ebx,0x2
c0011373:	0f 86 83 00 00 00    	jbe    c00113fc <SysSizeFromFilename(regs*)+0x99>
c0011379:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001137f:	76 1b                	jbe    c001139c <SysSizeFromFilename(regs*)+0x39>
c0011381:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011384:	31 d2                	xor    edx,edx
c0011386:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001138c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011393:	83 c4 10             	add    esp,0x10
c0011396:	31 c0                	xor    eax,eax
c0011398:	5b                   	pop    ebx
c0011399:	5e                   	pop    esi
c001139a:	5f                   	pop    edi
c001139b:	c3                   	ret    
c001139c:	83 ec 0c             	sub    esp,0xc
c001139f:	68 14 01 00 00       	push   0x114
c00113a4:	e8 22 67 ff ff       	call   c0007acb <malloc>
c00113a9:	83 c4 0c             	add    esp,0xc
c00113ac:	89 c7                	mov    edi,eax
c00113ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113b6:	50                   	push   eax
c00113b7:	53                   	push   ebx
c00113b8:	57                   	push   edi
c00113b9:	e8 94 9b ff ff       	call   c000af52 <File::File(char const*, Process*)>
c00113be:	83 c4 0c             	add    esp,0xc
c00113c1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00113c5:	50                   	push   eax
c00113c6:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00113c9:	52                   	push   edx
c00113ca:	57                   	push   edi
c00113cb:	e8 ea 9e ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	85 ff                	test   edi,edi
c00113d5:	89 c3                	mov    ebx,eax
c00113d7:	74 0c                	je     c00113e5 <SysSizeFromFilename(regs*)+0x82>
c00113d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	57                   	push   edi
c00113df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113e2:	83 c4 10             	add    esp,0x10
c00113e5:	31 c0                	xor    eax,eax
c00113e7:	85 db                	test   ebx,ebx
c00113e9:	0f 95 c0             	setne  al
c00113ec:	31 d2                	xor    edx,edx
c00113ee:	f7 d8                	neg    eax
c00113f0:	83 d2 00             	adc    edx,0x0
c00113f3:	83 c4 10             	add    esp,0x10
c00113f6:	5b                   	pop    ebx
c00113f7:	f7 da                	neg    edx
c00113f9:	5e                   	pop    esi
c00113fa:	5f                   	pop    edi
c00113fb:	c3                   	ret    
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011404:	5b                   	pop    ebx
c0011405:	ba ff ff ff ff       	mov    edx,0xffffffff
c001140a:	5e                   	pop    esi
c001140b:	5f                   	pop    edi
c001140c:	c3                   	ret    

c001140d <SysClose(regs*)>:
c001140d:	53                   	push   ebx
c001140e:	83 ec 08             	sub    esp,0x8
c0011411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011415:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011418:	83 f8 02             	cmp    eax,0x2
c001141b:	76 41                	jbe    c001145e <SysClose(regs*)+0x51>
c001141d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011423:	83 fa 01             	cmp    edx,0x1
c0011426:	76 2d                	jbe    c0011455 <SysClose(regs*)+0x48>
c0011428:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001142d:	77 2f                	ja     c001145e <SysClose(regs*)+0x51>
c001142f:	83 ec 0c             	sub    esp,0xc
c0011432:	50                   	push   eax
c0011433:	e8 73 80 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011438:	89 04 24             	mov    DWORD PTR [esp],eax
c001143b:	89 c3                	mov    ebx,eax
c001143d:	e8 2a 9c ff ff       	call   c000b06c <File::close()>
c0011442:	83 c4 10             	add    esp,0x10
c0011445:	85 db                	test   ebx,ebx
c0011447:	74 0c                	je     c0011455 <SysClose(regs*)+0x48>
c0011449:	8b 03                	mov    eax,DWORD PTR [ebx]
c001144b:	83 ec 0c             	sub    esp,0xc
c001144e:	53                   	push   ebx
c001144f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011452:	83 c4 10             	add    esp,0x10
c0011455:	83 c4 08             	add    esp,0x8
c0011458:	31 c0                	xor    eax,eax
c001145a:	5b                   	pop    ebx
c001145b:	31 d2                	xor    edx,edx
c001145d:	c3                   	ret    
c001145e:	83 c4 08             	add    esp,0x8
c0011461:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011466:	5b                   	pop    ebx
c0011467:	ba ff ff ff ff       	mov    edx,0xffffffff
c001146c:	c3                   	ret    

c001146d <SysOpenDir(regs*)>:
c001146d:	56                   	push   esi
c001146e:	53                   	push   ebx
c001146f:	83 ec 04             	sub    esp,0x4
c0011472:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011476:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011479:	85 c9                	test   ecx,ecx
c001147b:	74 5d                	je     c00114da <SysOpenDir(regs*)+0x6d>
c001147d:	83 ec 0c             	sub    esp,0xc
c0011480:	68 14 01 00 00       	push   0x114
c0011485:	e8 41 66 ff ff       	call   c0007acb <malloc>
c001148a:	83 c4 0c             	add    esp,0xc
c001148d:	89 c6                	mov    esi,eax
c001148f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011494:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011497:	50                   	push   eax
c0011498:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001149b:	52                   	push   edx
c001149c:	56                   	push   esi
c001149d:	e8 d6 9f ff ff       	call   c000b478 <Directory::Directory(char const*, Process*)>
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	85 f6                	test   esi,esi
c00114a7:	74 31                	je     c00114da <SysOpenDir(regs*)+0x6d>
c00114a9:	83 ec 0c             	sub    esp,0xc
c00114ac:	56                   	push   esi
c00114ad:	e8 82 a0 ff ff       	call   c000b534 <Directory::open()>
c00114b2:	83 c4 10             	add    esp,0x10
c00114b5:	85 c0                	test   eax,eax
c00114b7:	75 21                	jne    c00114da <SysOpenDir(regs*)+0x6d>
c00114b9:	83 ec 0c             	sub    esp,0xc
c00114bc:	56                   	push   esi
c00114bd:	e8 ec 7c ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00114c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00114c5:	83 c4 10             	add    esp,0x10
c00114c8:	89 02                	mov    DWORD PTR [edx],eax
c00114ca:	c1 f8 1f             	sar    eax,0x1f
c00114cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114d0:	83 c4 04             	add    esp,0x4
c00114d3:	31 c0                	xor    eax,eax
c00114d5:	5b                   	pop    ebx
c00114d6:	31 d2                	xor    edx,edx
c00114d8:	5e                   	pop    esi
c00114d9:	c3                   	ret    
c00114da:	83 c4 04             	add    esp,0x4
c00114dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114e2:	5b                   	pop    ebx
c00114e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114e8:	5e                   	pop    esi
c00114e9:	c3                   	ret    

c00114ea <SysMakeDir(regs*)>:
c00114ea:	56                   	push   esi
c00114eb:	53                   	push   ebx
c00114ec:	83 ec 10             	sub    esp,0x10
c00114ef:	68 14 01 00 00       	push   0x114
c00114f4:	e8 d2 65 ff ff       	call   c0007acb <malloc>
c00114f9:	83 c4 0c             	add    esp,0xc
c00114fc:	89 c3                	mov    ebx,eax
c00114fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011503:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011506:	50                   	push   eax
c0011507:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001150b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001150e:	52                   	push   edx
c001150f:	53                   	push   ebx
c0011510:	e8 63 9f ff ff       	call   c000b478 <Directory::Directory(char const*, Process*)>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	85 db                	test   ebx,ebx
c001151a:	74 2c                	je     c0011548 <SysMakeDir(regs*)+0x5e>
c001151c:	83 ec 0c             	sub    esp,0xc
c001151f:	53                   	push   ebx
c0011520:	e8 ef a1 ff ff       	call   c000b714 <Directory::create()>
c0011525:	89 c6                	mov    esi,eax
c0011527:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011529:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001152c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	31 c0                	xor    eax,eax
c0011534:	85 f6                	test   esi,esi
c0011536:	0f 95 c0             	setne  al
c0011539:	31 d2                	xor    edx,edx
c001153b:	f7 d8                	neg    eax
c001153d:	83 d2 00             	adc    edx,0x0
c0011540:	83 c4 04             	add    esp,0x4
c0011543:	5b                   	pop    ebx
c0011544:	f7 da                	neg    edx
c0011546:	5e                   	pop    esi
c0011547:	c3                   	ret    
c0011548:	83 c4 04             	add    esp,0x4
c001154b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011550:	5b                   	pop    ebx
c0011551:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011556:	5e                   	pop    esi
c0011557:	c3                   	ret    

c0011558 <SysCloseDir(regs*)>:
c0011558:	53                   	push   ebx
c0011559:	ba ff ff ff ff       	mov    edx,0xffffffff
c001155e:	83 ec 08             	sub    esp,0x8
c0011561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011565:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011568:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001156d:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011570:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011576:	77 2a                	ja     c00115a2 <SysCloseDir(regs*)+0x4a>
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	51                   	push   ecx
c001157c:	e8 2a 7f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011581:	89 04 24             	mov    DWORD PTR [esp],eax
c0011584:	89 c3                	mov    ebx,eax
c0011586:	e8 05 a0 ff ff       	call   c000b590 <Directory::close()>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	85 db                	test   ebx,ebx
c0011590:	74 0c                	je     c001159e <SysCloseDir(regs*)+0x46>
c0011592:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011594:	83 ec 0c             	sub    esp,0xc
c0011597:	53                   	push   ebx
c0011598:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001159b:	83 c4 10             	add    esp,0x10
c001159e:	31 c0                	xor    eax,eax
c00115a0:	31 d2                	xor    edx,edx
c00115a2:	83 c4 08             	add    esp,0x8
c00115a5:	5b                   	pop    ebx
c00115a6:	c3                   	ret    

c00115a7 <SysWait(regs*)>:
c00115a7:	83 ec 10             	sub    esp,0x10
c00115aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115ae:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00115b1:	52                   	push   edx
c00115b2:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00115b5:	51                   	push   ecx
c00115b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115b9:	50                   	push   eax
c00115ba:	e8 e9 3c 00 00       	call   c00152a8 <waitTask(int, int*, int)>
c00115bf:	83 c4 1c             	add    esp,0x1c
c00115c2:	89 c2                	mov    edx,eax
c00115c4:	c1 fa 1f             	sar    edx,0x1f
c00115c7:	c3                   	ret    

c00115c8 <SysNotImpl(regs*)>:
c00115c8:	83 ec 18             	sub    esp,0x18
c00115cb:	68 16 0e 02 c0       	push   0xc0020e16
c00115d0:	e8 a0 f2 ff ff       	call   c0010875 <KePanic(char const*)>
c00115d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115da:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115df:	83 c4 1c             	add    esp,0x1c
c00115e2:	c3                   	ret    

c00115e3 <SysPanic(regs*)>:
c00115e3:	83 ec 18             	sub    esp,0x18
c00115e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115ea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115ed:	50                   	push   eax
c00115ee:	e8 82 f2 ff ff       	call   c0010875 <KePanic(char const*)>
c00115f3:	b8 01 00 00 00       	mov    eax,0x1
c00115f8:	31 d2                	xor    edx,edx
c00115fa:	83 c4 1c             	add    esp,0x1c
c00115fd:	c3                   	ret    

c00115fe <SysRmdir(regs*)>:
c00115fe:	56                   	push   esi
c00115ff:	53                   	push   ebx
c0011600:	83 ec 10             	sub    esp,0x10
c0011603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011607:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001160a:	68 14 01 00 00       	push   0x114
c001160f:	e8 b7 64 ff ff       	call   c0007acb <malloc>
c0011614:	83 c4 0c             	add    esp,0xc
c0011617:	89 c3                	mov    ebx,eax
c0011619:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001161e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011621:	50                   	push   eax
c0011622:	56                   	push   esi
c0011623:	53                   	push   ebx
c0011624:	e8 29 99 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0011629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001162c:	e8 55 9b ff ff       	call   c000b186 <File::unlink()>
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	85 db                	test   ebx,ebx
c0011636:	89 c6                	mov    esi,eax
c0011638:	74 0c                	je     c0011646 <SysRmdir(regs*)+0x48>
c001163a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	53                   	push   ebx
c0011640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	31 c0                	xor    eax,eax
c0011648:	85 f6                	test   esi,esi
c001164a:	0f 95 c0             	setne  al
c001164d:	31 d2                	xor    edx,edx
c001164f:	f7 d8                	neg    eax
c0011651:	83 d2 00             	adc    edx,0x0
c0011654:	83 c4 04             	add    esp,0x4
c0011657:	5b                   	pop    ebx
c0011658:	f7 da                	neg    edx
c001165a:	5e                   	pop    esi
c001165b:	c3                   	ret    

c001165c <SysUnlink(regs*)>:
c001165c:	56                   	push   esi
c001165d:	53                   	push   ebx
c001165e:	83 ec 10             	sub    esp,0x10
c0011661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011665:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011668:	68 14 01 00 00       	push   0x114
c001166d:	e8 59 64 ff ff       	call   c0007acb <malloc>
c0011672:	83 c4 0c             	add    esp,0xc
c0011675:	89 c3                	mov    ebx,eax
c0011677:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001167c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001167f:	50                   	push   eax
c0011680:	56                   	push   esi
c0011681:	53                   	push   ebx
c0011682:	e8 cb 98 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0011687:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001168a:	e8 f7 9a ff ff       	call   c000b186 <File::unlink()>
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	85 db                	test   ebx,ebx
c0011694:	89 c6                	mov    esi,eax
c0011696:	74 0c                	je     c00116a4 <SysUnlink(regs*)+0x48>
c0011698:	8b 03                	mov    eax,DWORD PTR [ebx]
c001169a:	83 ec 0c             	sub    esp,0xc
c001169d:	53                   	push   ebx
c001169e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	31 c0                	xor    eax,eax
c00116a6:	85 f6                	test   esi,esi
c00116a8:	0f 95 c0             	setne  al
c00116ab:	31 d2                	xor    edx,edx
c00116ad:	f7 d8                	neg    eax
c00116af:	83 d2 00             	adc    edx,0x0
c00116b2:	83 c4 04             	add    esp,0x4
c00116b5:	5b                   	pop    ebx
c00116b6:	f7 da                	neg    edx
c00116b8:	5e                   	pop    esi
c00116b9:	c3                   	ret    

c00116ba <SysGetArgv(regs*)>:
c00116ba:	83 ec 0c             	sub    esp,0xc
c00116bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116c1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116c4:	85 c0                	test   eax,eax
c00116c6:	78 2c                	js     c00116f4 <SysGetArgv(regs*)+0x3a>
c00116c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116ce:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116d1:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116d7:	7d 1b                	jge    c00116f4 <SysGetArgv(regs*)+0x3a>
c00116d9:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116e0:	85 c0                	test   eax,eax
c00116e2:	74 18                	je     c00116fc <SysGetArgv(regs*)+0x42>
c00116e4:	83 ec 08             	sub    esp,0x8
c00116e7:	50                   	push   eax
c00116e8:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116eb:	50                   	push   eax
c00116ec:	e8 5f ef fe ff       	call   c0000650 <strcpy>
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	31 c0                	xor    eax,eax
c00116f6:	31 d2                	xor    edx,edx
c00116f8:	83 c4 0c             	add    esp,0xc
c00116fb:	c3                   	ret    
c00116fc:	b8 01 00 00 00       	mov    eax,0x1
c0011701:	31 d2                	xor    edx,edx
c0011703:	83 c4 0c             	add    esp,0xc
c0011706:	c3                   	ret    

c0011707 <SysUSleep(regs*)>:
c0011707:	83 ec 1c             	sub    esp,0x1c
c001170a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001170e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011711:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011714:	6a 00                	push   0x0
c0011716:	6a 64                	push   0x64
c0011718:	52                   	push   edx
c0011719:	50                   	push   eax
c001171a:	e8 21 cf 00 00       	call   c001e640 <__udivdi3>
c001171f:	83 c4 14             	add    esp,0x14
c0011722:	50                   	push   eax
c0011723:	e8 64 3c 00 00       	call   c001538c <milliTenthSleep(unsigned int)>
c0011728:	31 c0                	xor    eax,eax
c001172a:	31 d2                	xor    edx,edx
c001172c:	83 c4 1c             	add    esp,0x1c
c001172f:	c3                   	ret    

c0011730 <SysSpawn(regs*)>:
c0011730:	56                   	push   esi
c0011731:	53                   	push   ebx
c0011732:	83 ec 04             	sub    esp,0x4
c0011735:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011739:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001173c:	85 f6                	test   esi,esi
c001173e:	75 0a                	jne    c001174a <SysSpawn(regs*)+0x1a>
c0011740:	83 c4 04             	add    esp,0x4
c0011743:	31 c0                	xor    eax,eax
c0011745:	5b                   	pop    ebx
c0011746:	31 d2                	xor    edx,edx
c0011748:	5e                   	pop    esi
c0011749:	c3                   	ret    
c001174a:	83 ec 0c             	sub    esp,0xc
c001174d:	68 24 07 00 00       	push   0x724
c0011752:	e8 74 63 ff ff       	call   c0007acb <malloc>
c0011757:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011760:	89 c6                	mov    esi,eax
c0011762:	31 c0                	xor    eax,eax
c0011764:	85 c9                	test   ecx,ecx
c0011766:	75 08                	jne    c0011770 <SysSpawn(regs*)+0x40>
c0011768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001176d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011770:	52                   	push   edx
c0011771:	50                   	push   eax
c0011772:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011775:	50                   	push   eax
c0011776:	56                   	push   esi
c0011777:	e8 78 32 00 00       	call   c00149f4 <Process::Process(char const*, Process*, char**)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011786:	75 b8                	jne    c0011740 <SysSpawn(regs*)+0x10>
c0011788:	83 ec 0c             	sub    esp,0xc
c001178b:	56                   	push   esi
c001178c:	e8 9b 37 00 00       	call   c0014f2c <Process::createUserThread()>
c0011791:	8b 06                	mov    eax,DWORD PTR [esi]
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	83 c4 04             	add    esp,0x4
c0011799:	5b                   	pop    ebx
c001179a:	89 c2                	mov    edx,eax
c001179c:	c1 fa 1f             	sar    edx,0x1f
c001179f:	5e                   	pop    esi
c00117a0:	c3                   	ret    

c00117a1 <SysGetEnv(regs*)>:
c00117a1:	57                   	push   edi
c00117a2:	56                   	push   esi
c00117a3:	53                   	push   ebx
c00117a4:	83 ec 1c             	sub    esp,0x1c
c00117a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00117b0:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00117b3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00117b6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117b9:	51                   	push   ecx
c00117ba:	e8 6e ef ff ff       	call   c001072d <Krnl::getProcessTotalEnvCount(Process*)>
c00117bf:	83 c4 10             	add    esp,0x10
c00117c2:	39 c7                	cmp    edi,eax
c00117c4:	7c 12                	jl     c00117d8 <SysGetEnv(regs*)+0x37>
c00117c6:	31 c0                	xor    eax,eax
c00117c8:	31 d2                	xor    edx,edx
c00117ca:	85 f6                	test   esi,esi
c00117cc:	74 03                	je     c00117d1 <SysGetEnv(regs*)+0x30>
c00117ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	5b                   	pop    ebx
c00117d5:	5e                   	pop    esi
c00117d6:	5f                   	pop    edi
c00117d7:	c3                   	ret    
c00117d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117dc:	83 ec 04             	sub    esp,0x4
c00117df:	57                   	push   edi
c00117e0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117e6:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117e9:	57                   	push   edi
c00117ea:	50                   	push   eax
c00117eb:	e8 5d ef ff ff       	call   c001074d <Krnl::getProcessEnvPair(Process*, int)>
c00117f0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117fb:	83 c4 0c             	add    esp,0xc
c00117fe:	85 d2                	test   edx,edx
c0011800:	75 23                	jne    c0011825 <SysGetEnv(regs*)+0x84>
c0011802:	83 ec 0c             	sub    esp,0xc
c0011805:	50                   	push   eax
c0011806:	e8 75 ed fe ff       	call   c0000580 <strlen>
c001180b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001180e:	89 c3                	mov    ebx,eax
c0011810:	e8 6b ed fe ff       	call   c0000580 <strlen>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	31 d2                	xor    edx,edx
c001181a:	83 c4 10             	add    esp,0x10
c001181d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011821:	5b                   	pop    ebx
c0011822:	5e                   	pop    esi
c0011823:	5f                   	pop    edi
c0011824:	c3                   	ret    
c0011825:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011828:	83 ec 08             	sub    esp,0x8
c001182b:	50                   	push   eax
c001182c:	56                   	push   esi
c001182d:	e8 1e ee fe ff       	call   c0000650 <strcpy>
c0011832:	58                   	pop    eax
c0011833:	5a                   	pop    edx
c0011834:	68 30 0e 02 c0       	push   0xc0020e30
c0011839:	56                   	push   esi
c001183a:	e8 31 f0 fe ff       	call   c0000870 <strcat>
c001183f:	59                   	pop    ecx
c0011840:	5b                   	pop    ebx
c0011841:	57                   	push   edi
c0011842:	56                   	push   esi
c0011843:	e8 28 f0 fe ff       	call   c0000870 <strcat>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	31 c0                	xor    eax,eax
c001184d:	83 c4 10             	add    esp,0x10
c0011850:	31 d2                	xor    edx,edx
c0011852:	5b                   	pop    ebx
c0011853:	5e                   	pop    esi
c0011854:	5f                   	pop    edi
c0011855:	c3                   	ret    

c0011856 <SysSetFatAttrib(regs*)>:
c0011856:	57                   	push   edi
c0011857:	56                   	push   esi
c0011858:	53                   	push   ebx
c0011859:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001185d:	83 ec 0c             	sub    esp,0xc
c0011860:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011863:	68 14 01 00 00       	push   0x114
c0011868:	e8 5e 62 ff ff       	call   c0007acb <malloc>
c001186d:	83 c4 0c             	add    esp,0xc
c0011870:	89 c3                	mov    ebx,eax
c0011872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011877:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001187a:	50                   	push   eax
c001187b:	57                   	push   edi
c001187c:	53                   	push   ebx
c001187d:	e8 d0 96 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0011882:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011885:	83 c4 0c             	add    esp,0xc
c0011888:	0f b6 d4             	movzx  edx,ah
c001188b:	0f b6 c0             	movzx  eax,al
c001188e:	52                   	push   edx
c001188f:	50                   	push   eax
c0011890:	53                   	push   ebx
c0011891:	e8 8a 99 ff ff       	call   c000b220 <File::chfatattr(unsigned char, unsigned char)>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	85 db                	test   ebx,ebx
c001189b:	89 c6                	mov    esi,eax
c001189d:	74 0c                	je     c00118ab <SysSetFatAttrib(regs*)+0x55>
c001189f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118a1:	83 ec 0c             	sub    esp,0xc
c00118a4:	53                   	push   ebx
c00118a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a8:	83 c4 10             	add    esp,0x10
c00118ab:	5b                   	pop    ebx
c00118ac:	31 c0                	xor    eax,eax
c00118ae:	85 f6                	test   esi,esi
c00118b0:	0f 95 c0             	setne  al
c00118b3:	31 d2                	xor    edx,edx
c00118b5:	5e                   	pop    esi
c00118b6:	f7 d8                	neg    eax
c00118b8:	83 d2 00             	adc    edx,0x0
c00118bb:	f7 da                	neg    edx
c00118bd:	5f                   	pop    edi
c00118be:	c3                   	ret    

c00118bf <SysPipe(regs*)>:
c00118bf:	57                   	push   edi
c00118c0:	56                   	push   esi
c00118c1:	53                   	push   ebx
c00118c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c6:	83 ec 0c             	sub    esp,0xc
c00118c9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00118cc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118cf:	6a 20                	push   0x20
c00118d1:	e8 f5 61 ff ff       	call   c0007acb <malloc>
c00118d6:	89 c3                	mov    ebx,eax
c00118d8:	58                   	pop    eax
c00118d9:	5a                   	pop    edx
c00118da:	68 00 50 00 00       	push   0x5000
c00118df:	53                   	push   ebx
c00118e0:	e8 43 6b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00118e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118e8:	e8 c1 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118ed:	89 07                	mov    DWORD PTR [edi],eax
c00118ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118f2:	e8 b7 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118f7:	83 c4 10             	add    esp,0x10
c00118fa:	31 d2                	xor    edx,edx
c00118fc:	89 06                	mov    DWORD PTR [esi],eax
c00118fe:	31 c0                	xor    eax,eax
c0011900:	5b                   	pop    ebx
c0011901:	5e                   	pop    esi
c0011902:	5f                   	pop    edi
c0011903:	c3                   	ret    

c0011904 <SysGetUnixTime(regs*)>:
c0011904:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011909:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001190f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011913:	e9 42 a0 ff ff       	jmp    c000b95a <Clock::timeInSecondsLocal()>

c0011918 <string_ends_with(char const*, char const*)>:
c0011918:	57                   	push   edi
c0011919:	56                   	push   esi
c001191a:	53                   	push   ebx
c001191b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001191f:	83 ec 0c             	sub    esp,0xc
c0011922:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011926:	53                   	push   ebx
c0011927:	e8 54 ec fe ff       	call   c0000580 <strlen>
c001192c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001192f:	89 c6                	mov    esi,eax
c0011931:	e8 4a ec fe ff       	call   c0000580 <strlen>
c0011936:	83 c4 10             	add    esp,0x10
c0011939:	31 d2                	xor    edx,edx
c001193b:	39 c6                	cmp    esi,eax
c001193d:	7d 06                	jge    c0011945 <string_ends_with(char const*, char const*)+0x2d>
c001193f:	5b                   	pop    ebx
c0011940:	89 d0                	mov    eax,edx
c0011942:	5e                   	pop    esi
c0011943:	5f                   	pop    edi
c0011944:	c3                   	ret    
c0011945:	83 ec 08             	sub    esp,0x8
c0011948:	29 c6                	sub    esi,eax
c001194a:	57                   	push   edi
c001194b:	01 f3                	add    ebx,esi
c001194d:	53                   	push   ebx
c001194e:	e8 2d ee fe ff       	call   c0000780 <strcmp>
c0011953:	83 c4 10             	add    esp,0x10
c0011956:	31 d2                	xor    edx,edx
c0011958:	5b                   	pop    ebx
c0011959:	5e                   	pop    esi
c001195a:	85 c0                	test   eax,eax
c001195c:	5f                   	pop    edi
c001195d:	0f 94 c2             	sete   dl
c0011960:	89 d0                	mov    eax,edx
c0011962:	c3                   	ret    

c0011963 <SysOpen(regs*)>:
c0011963:	56                   	push   esi
c0011964:	53                   	push   ebx
c0011965:	81 ec 04 01 00 00    	sub    esp,0x104
c001196b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011972:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011975:	85 c0                	test   eax,eax
c0011977:	0f 84 c5 01 00 00    	je     c0011b42 <SysOpen(regs*)+0x1df>
c001197d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011980:	85 c0                	test   eax,eax
c0011982:	0f 84 ba 01 00 00    	je     c0011b42 <SysOpen(regs*)+0x1df>
c0011988:	83 ec 04             	sub    esp,0x4
c001198b:	68 32 0e 02 c0       	push   0xc0020e32
c0011990:	50                   	push   eax
c0011991:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011995:	56                   	push   esi
c0011996:	e8 db 93 ff ff       	call   c000ad76 <Fs::standardiseFiles(char*, char const*, char const*)>
c001199b:	89 34 24             	mov    DWORD PTR [esp],esi
c001199e:	e8 dd eb fe ff       	call   c0000580 <strlen>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	83 e8 01             	sub    eax,0x1
c00119a9:	74 29                	je     c00119d4 <SysOpen(regs*)+0x71>
c00119ab:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00119af:	83 fa 2e             	cmp    edx,0x2e
c00119b2:	74 1c                	je     c00119d0 <SysOpen(regs*)+0x6d>
c00119b4:	83 fa 3a             	cmp    edx,0x3a
c00119b7:	74 17                	je     c00119d0 <SysOpen(regs*)+0x6d>
c00119b9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00119bd:	83 e8 01             	sub    eax,0x1
c00119c0:	74 12                	je     c00119d4 <SysOpen(regs*)+0x71>
c00119c2:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00119c6:	83 fa 3a             	cmp    edx,0x3a
c00119c9:	74 05                	je     c00119d0 <SysOpen(regs*)+0x6d>
c00119cb:	83 fa 2e             	cmp    edx,0x2e
c00119ce:	75 e9                	jne    c00119b9 <SysOpen(regs*)+0x56>
c00119d0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	68 36 0e 02 c0       	push   0xc0020e36
c00119dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119df:	50                   	push   eax
c00119e0:	e8 33 ff ff ff       	call   c0011918 <string_ends_with(char const*, char const*)>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	85 c0                	test   eax,eax
c00119ea:	74 1d                	je     c0011a09 <SysOpen(regs*)+0xa6>
c00119ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119ef:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119fc:	81 c4 04 01 00 00    	add    esp,0x104
c0011a02:	31 c0                	xor    eax,eax
c0011a04:	5b                   	pop    ebx
c0011a05:	31 d2                	xor    edx,edx
c0011a07:	5e                   	pop    esi
c0011a08:	c3                   	ret    
c0011a09:	83 ec 08             	sub    esp,0x8
c0011a0c:	68 3b 0e 02 c0       	push   0xc0020e3b
c0011a11:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a14:	50                   	push   eax
c0011a15:	e8 fe fe ff ff       	call   c0011918 <string_ends_with(char const*, char const*)>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	85 c0                	test   eax,eax
c0011a1f:	75 cb                	jne    c00119ec <SysOpen(regs*)+0x89>
c0011a21:	83 ec 08             	sub    esp,0x8
c0011a24:	68 37 0e 02 c0       	push   0xc0020e37
c0011a29:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a2c:	50                   	push   eax
c0011a2d:	e8 4e ed fe ff       	call   c0000780 <strcmp>
c0011a32:	83 c4 10             	add    esp,0x10
c0011a35:	85 c0                	test   eax,eax
c0011a37:	74 b3                	je     c00119ec <SysOpen(regs*)+0x89>
c0011a39:	83 ec 08             	sub    esp,0x8
c0011a3c:	68 36 0e 02 c0       	push   0xc0020e36
c0011a41:	56                   	push   esi
c0011a42:	e8 d1 fe ff ff       	call   c0011918 <string_ends_with(char const*, char const*)>
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	85 c0                	test   eax,eax
c0011a4c:	75 9e                	jne    c00119ec <SysOpen(regs*)+0x89>
c0011a4e:	83 ec 08             	sub    esp,0x8
c0011a51:	68 40 0e 02 c0       	push   0xc0020e40
c0011a56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a59:	50                   	push   eax
c0011a5a:	e8 b9 fe ff ff       	call   c0011918 <string_ends_with(char const*, char const*)>
c0011a5f:	83 c4 10             	add    esp,0x10
c0011a62:	85 c0                	test   eax,eax
c0011a64:	0f 85 eb 00 00 00    	jne    c0011b55 <SysOpen(regs*)+0x1f2>
c0011a6a:	83 ec 08             	sub    esp,0x8
c0011a6d:	68 45 0e 02 c0       	push   0xc0020e45
c0011a72:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a75:	50                   	push   eax
c0011a76:	e8 9d fe ff ff       	call   c0011918 <string_ends_with(char const*, char const*)>
c0011a7b:	83 c4 10             	add    esp,0x10
c0011a7e:	85 c0                	test   eax,eax
c0011a80:	0f 85 cf 00 00 00    	jne    c0011b55 <SysOpen(regs*)+0x1f2>
c0011a86:	83 ec 08             	sub    esp,0x8
c0011a89:	68 41 0e 02 c0       	push   0xc0020e41
c0011a8e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a91:	51                   	push   ecx
c0011a92:	e8 e9 ec fe ff       	call   c0000780 <strcmp>
c0011a97:	83 c4 10             	add    esp,0x10
c0011a9a:	85 c0                	test   eax,eax
c0011a9c:	0f 84 b3 00 00 00    	je     c0011b55 <SysOpen(regs*)+0x1f2>
c0011aa2:	83 ec 08             	sub    esp,0x8
c0011aa5:	68 40 0e 02 c0       	push   0xc0020e40
c0011aaa:	56                   	push   esi
c0011aab:	e8 68 fe ff ff       	call   c0011918 <string_ends_with(char const*, char const*)>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	85 c0                	test   eax,eax
c0011ab5:	0f 85 9a 00 00 00    	jne    c0011b55 <SysOpen(regs*)+0x1f2>
c0011abb:	83 ec 0c             	sub    esp,0xc
c0011abe:	68 14 01 00 00       	push   0x114
c0011ac3:	e8 03 60 ff ff       	call   c0007acb <malloc>
c0011ac8:	83 c4 0c             	add    esp,0xc
c0011acb:	89 c6                	mov    esi,eax
c0011acd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ad5:	50                   	push   eax
c0011ad6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ad9:	52                   	push   edx
c0011ada:	56                   	push   esi
c0011adb:	e8 72 94 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0011ae0:	83 c4 10             	add    esp,0x10
c0011ae3:	85 f6                	test   esi,esi
c0011ae5:	74 5b                	je     c0011b42 <SysOpen(regs*)+0x1df>
c0011ae7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aea:	0f b6 c2             	movzx  eax,dl
c0011aed:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011af0:	89 d0                	mov    eax,edx
c0011af2:	83 e0 01             	and    eax,0x1
c0011af5:	f6 c2 02             	test   dl,0x2
c0011af8:	74 03                	je     c0011afd <SysOpen(regs*)+0x19a>
c0011afa:	83 c8 02             	or     eax,0x2
c0011afd:	f6 c2 04             	test   dl,0x4
c0011b00:	74 03                	je     c0011b05 <SysOpen(regs*)+0x1a2>
c0011b02:	83 c8 04             	or     eax,0x4
c0011b05:	f6 c2 08             	test   dl,0x8
c0011b08:	74 03                	je     c0011b0d <SysOpen(regs*)+0x1aa>
c0011b0a:	83 c8 0a             	or     eax,0xa
c0011b0d:	80 e2 10             	and    dl,0x10
c0011b10:	74 03                	je     c0011b15 <SysOpen(regs*)+0x1b2>
c0011b12:	83 c8 12             	or     eax,0x12
c0011b15:	83 ec 08             	sub    esp,0x8
c0011b18:	50                   	push   eax
c0011b19:	56                   	push   esi
c0011b1a:	e8 ef 94 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	85 c0                	test   eax,eax
c0011b24:	75 1c                	jne    c0011b42 <SysOpen(regs*)+0x1df>
c0011b26:	83 ec 0c             	sub    esp,0xc
c0011b29:	56                   	push   esi
c0011b2a:	e8 7f 76 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011b2f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b32:	83 c4 10             	add    esp,0x10
c0011b35:	89 02                	mov    DWORD PTR [edx],eax
c0011b37:	c1 f8 1f             	sar    eax,0x1f
c0011b3a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b3d:	e9 ba fe ff ff       	jmp    c00119fc <SysOpen(regs*)+0x99>
c0011b42:	81 c4 04 01 00 00    	add    esp,0x104
c0011b48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b4d:	5b                   	pop    ebx
c0011b4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b53:	5e                   	pop    esi
c0011b54:	c3                   	ret    
c0011b55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b58:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b5e:	e9 92 fe ff ff       	jmp    c00119f5 <SysOpen(regs*)+0x92>

c0011b63 <KeSystemCall(regs*, void*)>:
c0011b63:	53                   	push   ebx
c0011b64:	83 ec 08             	sub    esp,0x8
c0011b67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b6b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b6e:	83 f8 3b             	cmp    eax,0x3b
c0011b71:	77 16                	ja     c0011b89 <KeSystemCall(regs*, void*)+0x26>
c0011b73:	8b 14 85 00 22 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdde00]
c0011b7a:	85 d2                	test   edx,edx
c0011b7c:	74 0b                	je     c0011b89 <KeSystemCall(regs*, void*)+0x26>
c0011b7e:	83 ec 0c             	sub    esp,0xc
c0011b81:	53                   	push   ebx
c0011b82:	ff d2                	call   edx
c0011b84:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b87:	eb 0d                	jmp    c0011b96 <KeSystemCall(regs*, void*)+0x33>
c0011b89:	52                   	push   edx
c0011b8a:	52                   	push   edx
c0011b8b:	50                   	push   eax
c0011b8c:	68 4a 0e 02 c0       	push   0xc0020e4a
c0011b91:	e8 14 8e ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b9e:	83 c4 08             	add    esp,0x8
c0011ba1:	31 d2                	xor    edx,edx
c0011ba3:	5b                   	pop    ebx
c0011ba4:	c3                   	ret    
c0011ba5:	66 90                	xchg   ax,ax
c0011ba7:	90                   	nop

c0011ba8 <KeSwitchEndian16(unsigned short)>:
c0011ba8:	83 ec 04             	sub    esp,0x4
c0011bab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011baf:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011bb3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011bb7:	c1 f8 08             	sar    eax,0x8
c0011bba:	89 c2                	mov    edx,eax
c0011bbc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011bc0:	c1 e0 08             	shl    eax,0x8
c0011bc3:	09 d0                	or     eax,edx
c0011bc5:	83 c4 04             	add    esp,0x4
c0011bc8:	c3                   	ret    
c0011bc9:	8d 76 00             	lea    esi,[esi+0x0]

c0011bcc <KeSwitchEndian32(unsigned int)>:
c0011bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd0:	c1 e8 18             	shr    eax,0x18
c0011bd3:	89 c2                	mov    edx,eax
c0011bd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd9:	c1 e0 08             	shl    eax,0x8
c0011bdc:	25 00 00 ff 00       	and    eax,0xff0000
c0011be1:	09 c2                	or     edx,eax
c0011be3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be7:	c1 e8 08             	shr    eax,0x8
c0011bea:	25 00 ff 00 00       	and    eax,0xff00
c0011bef:	09 c2                	or     edx,eax
c0011bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf5:	c1 e0 18             	shl    eax,0x18
c0011bf8:	09 d0                	or     eax,edx
c0011bfa:	c3                   	ret    
c0011bfb:	90                   	nop

c0011bfc <EthernetCRC32(unsigned char*, int)>:
c0011bfc:	83 ec 10             	sub    esp,0x10
c0011bff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011c04:	75 0a                	jne    c0011c10 <EthernetCRC32(unsigned char*, int)+0x14>
c0011c06:	b8 00 00 00 00       	mov    eax,0x0
c0011c0b:	e9 8c 00 00 00       	jmp    c0011c9c <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c10:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011c15:	7f 09                	jg     c0011c20 <EthernetCRC32(unsigned char*, int)+0x24>
c0011c17:	b8 00 00 00 00       	mov    eax,0x0
c0011c1c:	eb 7e                	jmp    c0011c9c <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c1e:	66 90                	xchg   ax,ax
c0011c20:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c34:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c38:	7d 5a                	jge    c0011c94 <EthernetCRC32(unsigned char*, int)+0x98>
c0011c3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c42:	01 d0                	add    eax,edx
c0011c44:	8a 00                	mov    al,BYTE PTR [eax]
c0011c46:	0f b6 c0             	movzx  eax,al
c0011c49:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c4d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c55:	8d 76 00             	lea    esi,[esi+0x0]
c0011c58:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c5d:	7f 2d                	jg     c0011c8c <EthernetCRC32(unsigned char*, int)+0x90>
c0011c5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c63:	83 e0 01             	and    eax,0x1
c0011c66:	74 10                	je     c0011c78 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6c:	d1 e8                	shr    eax,1
c0011c6e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c73:	eb 0b                	jmp    c0011c80 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c75:	8d 76 00             	lea    esi,[esi+0x0]
c0011c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7c:	d1 e8                	shr    eax,1
c0011c7e:	66 90                	xchg   ax,ax
c0011c80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c84:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c89:	eb cd                	jmp    c0011c58 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c8b:	90                   	nop
c0011c8c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c91:	eb 9d                	jmp    c0011c30 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c93:	90                   	nop
c0011c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c98:	f7 d0                	not    eax
c0011c9a:	66 90                	xchg   ax,ax
c0011c9c:	83 c4 10             	add    esp,0x10
c0011c9f:	c3                   	ret    

c0011ca0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011ca0:	83 ec 2c             	sub    esp,0x2c
c0011ca3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ca7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011cac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cbb:	0f b7 c0             	movzx  eax,ax
c0011cbe:	3d 06 08 00 00       	cmp    eax,0x806
c0011cc3:	75 13                	jne    c0011cd8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011cc5:	83 ec 0c             	sub    esp,0xc
c0011cc8:	68 5e 0e 02 c0       	push   0xc0020e5e
c0011ccd:	e8 d8 8c ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0011cd2:	83 c4 10             	add    esp,0x10
c0011cd5:	eb 25                	jmp    c0011cfc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cd7:	90                   	nop
c0011cd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cdf:	0f b7 c0             	movzx  eax,ax
c0011ce2:	3d 00 08 00 00       	cmp    eax,0x800
c0011ce7:	75 13                	jne    c0011cfc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011ce9:	83 ec 0c             	sub    esp,0xc
c0011cec:	68 74 0e 02 c0       	push   0xc0020e74
c0011cf1:	e8 b4 8c ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0011cfc:	90                   	nop
c0011cfd:	83 c4 2c             	add    esp,0x2c
c0011d00:	c3                   	ret    

c0011d01 <CmOpen(char const*)>:
c0011d01:	57                   	push   edi
c0011d02:	56                   	push   esi
c0011d03:	53                   	push   ebx
c0011d04:	83 ec 1c             	sub    esp,0x1c
c0011d07:	6a 30                	push   0x30
c0011d09:	e8 bd 5d ff ff       	call   c0007acb <malloc>
c0011d0e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d15:	89 c3                	mov    ebx,eax
c0011d17:	e8 af 5d ff ff       	call   c0007acb <malloc>
c0011d1c:	83 c4 0c             	add    esp,0xc
c0011d1f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011d25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d29:	89 c6                	mov    esi,eax
c0011d2b:	50                   	push   eax
c0011d2c:	e8 21 92 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0011d31:	83 c4 0c             	add    esp,0xc
c0011d34:	89 33                	mov    DWORD PTR [ebx],esi
c0011d36:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d3a:	50                   	push   eax
c0011d3b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d3f:	50                   	push   eax
c0011d40:	56                   	push   esi
c0011d41:	e8 74 95 ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c0011d46:	5a                   	pop    edx
c0011d47:	59                   	pop    ecx
c0011d48:	6a 01                	push   0x1
c0011d4a:	ff 33                	push   DWORD PTR [ebx]
c0011d4c:	e8 bd 92 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0011d51:	5e                   	pop    esi
c0011d52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d56:	e8 70 5d ff ff       	call   c0007acb <malloc>
c0011d5b:	5a                   	pop    edx
c0011d5c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d60:	89 c7                	mov    edi,eax
c0011d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d64:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d66:	56                   	push   esi
c0011d67:	57                   	push   edi
c0011d68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d70:	50                   	push   eax
c0011d71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d74:	83 c4 14             	add    esp,0x14
c0011d77:	ff 33                	push   DWORD PTR [ebx]
c0011d79:	e8 ee 92 ff ff       	call   c000b06c <File::close()>
c0011d7e:	59                   	pop    ecx
c0011d7f:	58                   	pop    eax
c0011d80:	6a 13                	push   0x13
c0011d82:	ff 33                	push   DWORD PTR [ebx]
c0011d84:	e8 85 92 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0011d89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d90:	57                   	push   edi
c0011d91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d99:	50                   	push   eax
c0011d9a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d9d:	83 c4 14             	add    esp,0x14
c0011da0:	57                   	push   edi
c0011da1:	e8 35 5d ff ff       	call   c0007adb <free>
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011dac:	75 10                	jne    c0011dbe <CmOpen(char const*)+0xbd>
c0011dae:	83 ec 0c             	sub    esp,0xc
c0011db1:	68 89 0e 02 c0       	push   0xc0020e89
c0011db6:	e8 ba ea ff ff       	call   c0010875 <KePanic(char const*)>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	50                   	push   eax
c0011dbf:	6a 00                	push   0x0
c0011dc1:	6a 00                	push   0x0
c0011dc3:	ff 33                	push   DWORD PTR [ebx]
c0011dc5:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011dc8:	e8 ff 92 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0011dcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dcf:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dd1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011dd4:	57                   	push   edi
c0011dd5:	6a 00                	push   0x0
c0011dd7:	6a 2b                	push   0x2b
c0011dd9:	50                   	push   eax
c0011dda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ddd:	83 c4 1c             	add    esp,0x1c
c0011de0:	6a 00                	push   0x0
c0011de2:	6a 00                	push   0x0
c0011de4:	ff 33                	push   DWORD PTR [ebx]
c0011de6:	e8 e1 92 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0011deb:	83 c4 0c             	add    esp,0xc
c0011dee:	6a 08                	push   0x8
c0011df0:	68 9a 0e 02 c0       	push   0xc0020e9a
c0011df5:	57                   	push   edi
c0011df6:	e8 85 e5 fe ff       	call   c0000380 <memcmp>
c0011dfb:	83 c4 10             	add    esp,0x10
c0011dfe:	85 c0                	test   eax,eax
c0011e00:	74 10                	je     c0011e12 <CmOpen(char const*)+0x111>
c0011e02:	83 ec 0c             	sub    esp,0xc
c0011e05:	68 a3 0e 02 c0       	push   0xc0020ea3
c0011e0a:	e8 66 ea ff ff       	call   c0010875 <KePanic(char const*)>
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011e16:	83 c4 10             	add    esp,0x10
c0011e19:	89 d8                	mov    eax,ebx
c0011e1b:	5b                   	pop    ebx
c0011e1c:	5e                   	pop    esi
c0011e1d:	5f                   	pop    edi
c0011e1e:	c3                   	ret    

c0011e1f <CmClose(Reghive_Tag*)>:
c0011e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e23:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011e27:	74 0b                	je     c0011e34 <CmClose(Reghive_Tag*)+0x15>
c0011e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e2f:	e9 38 92 ff ff       	jmp    c000b06c <File::close()>
c0011e34:	c3                   	ret    

c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e35:	53                   	push   ebx
c0011e36:	83 ec 18             	sub    esp,0x18
c0011e39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e3d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e41:	74 29                	je     c0011e6c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e43:	50                   	push   eax
c0011e44:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e49:	99                   	cdq    
c0011e4a:	52                   	push   edx
c0011e4b:	50                   	push   eax
c0011e4c:	ff 33                	push   DWORD PTR [ebx]
c0011e4e:	e8 79 92 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0011e53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e55:	5a                   	pop    edx
c0011e56:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e5c:	51                   	push   ecx
c0011e5d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e61:	6a 00                	push   0x0
c0011e63:	6a 2b                	push   0x2b
c0011e65:	50                   	push   eax
c0011e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e69:	83 c4 20             	add    esp,0x20
c0011e6c:	83 c4 18             	add    esp,0x18
c0011e6f:	5b                   	pop    ebx
c0011e70:	c3                   	ret    

c0011e71 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e71:	55                   	push   ebp
c0011e72:	57                   	push   edi
c0011e73:	56                   	push   esi
c0011e74:	53                   	push   ebx
c0011e75:	31 db                	xor    ebx,ebx
c0011e77:	83 ec 70             	sub    esp,0x70
c0011e7a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e7e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e85:	50                   	push   eax
c0011e86:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e8d:	55                   	push   ebp
c0011e8e:	e8 a2 ff ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e93:	83 c4 10             	add    esp,0x10
c0011e96:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e9b:	c1 e0 08             	shl    eax,0x8
c0011e9e:	89 c2                	mov    edx,eax
c0011ea0:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011ea5:	09 d0                	or     eax,edx
c0011ea7:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011eac:	c1 e0 08             	shl    eax,0x8
c0011eaf:	09 d0                	or     eax,edx
c0011eb1:	74 25                	je     c0011ed8 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011eb3:	52                   	push   edx
c0011eb4:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011eb8:	52                   	push   edx
c0011eb9:	6b fb 0d             	imul   edi,ebx,0xd
c0011ebc:	50                   	push   eax
c0011ebd:	55                   	push   ebp
c0011ebe:	e8 72 ff ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ec3:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011ec7:	b9 27 00 00 00       	mov    ecx,0x27
c0011ecc:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011ed3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	83 c3 03             	add    ebx,0x3
c0011edb:	83 fb 15             	cmp    ebx,0x15
c0011ede:	75 b6                	jne    c0011e96 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011ee0:	83 c4 6c             	add    esp,0x6c
c0011ee3:	5b                   	pop    ebx
c0011ee4:	5e                   	pop    esi
c0011ee5:	5f                   	pop    edi
c0011ee6:	5d                   	pop    ebp
c0011ee7:	c3                   	ret    

c0011ee8 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011ee8:	83 ec 40             	sub    esp,0x40
c0011eeb:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011eef:	50                   	push   eax
c0011ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ef4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ef8:	e8 38 ff ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011efd:	83 c4 10             	add    esp,0x10
c0011f00:	83 c8 ff             	or     eax,0xffffffff
c0011f03:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011f08:	75 19                	jne    c0011f23 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011f0a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011f0f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011f14:	c1 e0 08             	shl    eax,0x8
c0011f17:	09 c2                	or     edx,eax
c0011f19:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011f1e:	c1 e0 10             	shl    eax,0x10
c0011f21:	09 d0                	or     eax,edx
c0011f23:	83 c4 3c             	add    esp,0x3c
c0011f26:	c3                   	ret    

c0011f27 <CmGetNext(Reghive_Tag*, int)>:
c0011f27:	83 ec 40             	sub    esp,0x40
c0011f2a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f2e:	50                   	push   eax
c0011f2f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f33:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f37:	e8 f9 fe ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f3c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f41:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f46:	c1 e0 08             	shl    eax,0x8
c0011f49:	09 c2                	or     edx,eax
c0011f4b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f50:	83 c4 4c             	add    esp,0x4c
c0011f53:	c1 e0 10             	shl    eax,0x10
c0011f56:	09 d0                	or     eax,edx
c0011f58:	c3                   	ret    

c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f59:	53                   	push   ebx
c0011f5a:	83 ec 18             	sub    esp,0x18
c0011f5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f61:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f65:	74 29                	je     c0011f90 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f67:	50                   	push   eax
c0011f68:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f6d:	99                   	cdq    
c0011f6e:	52                   	push   edx
c0011f6f:	50                   	push   eax
c0011f70:	ff 33                	push   DWORD PTR [ebx]
c0011f72:	e8 55 91 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0011f77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f79:	5a                   	pop    edx
c0011f7a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f80:	51                   	push   ecx
c0011f81:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f85:	6a 00                	push   0x0
c0011f87:	6a 2b                	push   0x2b
c0011f89:	50                   	push   eax
c0011f8a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f8d:	83 c4 20             	add    esp,0x20
c0011f90:	83 c4 18             	add    esp,0x18
c0011f93:	5b                   	pop    ebx
c0011f94:	c3                   	ret    

c0011f95 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f95:	53                   	push   ebx
c0011f96:	83 ec 3c             	sub    esp,0x3c
c0011f99:	6a 2b                	push   0x2b
c0011f9b:	6a 00                	push   0x0
c0011f9d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011fa1:	53                   	push   ebx
c0011fa2:	e8 49 e5 fe ff       	call   c00004f0 <memset>
c0011fa7:	83 c4 0c             	add    esp,0xc
c0011faa:	53                   	push   ebx
c0011fab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011faf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fb3:	e8 a1 ff ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fb8:	83 c4 48             	add    esp,0x48
c0011fbb:	5b                   	pop    ebx
c0011fbc:	c3                   	ret    

c0011fbd <CmUpdateHeader(Reghive_Tag*)>:
c0011fbd:	83 ec 0c             	sub    esp,0xc
c0011fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fc4:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011fc8:	74 10                	je     c0011fda <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011fca:	52                   	push   edx
c0011fcb:	8d 50 05             	lea    edx,[eax+0x5]
c0011fce:	52                   	push   edx
c0011fcf:	6a 00                	push   0x0
c0011fd1:	50                   	push   eax
c0011fd2:	e8 82 ff ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fd7:	83 c4 10             	add    esp,0x10
c0011fda:	83 c4 0c             	add    esp,0xc
c0011fdd:	c3                   	ret    

c0011fde <CmExpand(Reghive_Tag*, int)>:
c0011fde:	55                   	push   ebp
c0011fdf:	57                   	push   edi
c0011fe0:	83 cf ff             	or     edi,0xffffffff
c0011fe3:	56                   	push   esi
c0011fe4:	53                   	push   ebx
c0011fe5:	83 ec 3c             	sub    esp,0x3c
c0011fe8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011fec:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011ff0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ff4:	74 59                	je     c001204f <CmExpand(Reghive_Tag*, int)+0x71>
c0011ff6:	50                   	push   eax
c0011ff7:	31 d2                	xor    edx,edx
c0011ff9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011ffd:	31 ff                	xor    edi,edi
c0011fff:	52                   	push   edx
c0012000:	50                   	push   eax
c0012001:	ff 33                	push   DWORD PTR [ebx]
c0012003:	e8 c4 90 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0012008:	83 c4 0c             	add    esp,0xc
c001200b:	6a 2b                	push   0x2b
c001200d:	6a 00                	push   0x0
c001200f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012013:	55                   	push   ebp
c0012014:	e8 d7 e4 fe ff       	call   c00004f0 <memset>
c0012019:	83 c4 10             	add    esp,0x10
c001201c:	39 f7                	cmp    edi,esi
c001201e:	7d 1b                	jge    c001203b <CmExpand(Reghive_Tag*, int)+0x5d>
c0012020:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012022:	83 ec 0c             	sub    esp,0xc
c0012025:	47                   	inc    edi
c0012026:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001202a:	8b 10                	mov    edx,DWORD PTR [eax]
c001202c:	51                   	push   ecx
c001202d:	55                   	push   ebp
c001202e:	6a 00                	push   0x0
c0012030:	6a 2b                	push   0x2b
c0012032:	50                   	push   eax
c0012033:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012036:	83 c4 20             	add    esp,0x20
c0012039:	eb e1                	jmp    c001201c <CmExpand(Reghive_Tag*, int)+0x3e>
c001203b:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	01 fe                	add    esi,edi
c0012043:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012046:	53                   	push   ebx
c0012047:	e8 71 ff ff ff       	call   c0011fbd <CmUpdateHeader(Reghive_Tag*)>
c001204c:	83 c4 10             	add    esp,0x10
c001204f:	83 c4 3c             	add    esp,0x3c
c0012052:	89 f8                	mov    eax,edi
c0012054:	5b                   	pop    ebx
c0012055:	5e                   	pop    esi
c0012056:	5f                   	pop    edi
c0012057:	5d                   	pop    ebp
c0012058:	c3                   	ret    

c0012059 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012059:	55                   	push   ebp
c001205a:	57                   	push   edi
c001205b:	56                   	push   esi
c001205c:	53                   	push   ebx
c001205d:	83 cb ff             	or     ebx,0xffffffff
c0012060:	83 ec 1c             	sub    esp,0x1c
c0012063:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012067:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001206b:	74 68                	je     c00120d5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001206d:	51                   	push   ecx
c001206e:	be 2b 00 00 00       	mov    esi,0x2b
c0012073:	6a 00                	push   0x0
c0012075:	31 ff                	xor    edi,edi
c0012077:	6a 00                	push   0x0
c0012079:	31 db                	xor    ebx,ebx
c001207b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001207e:	e8 49 90 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0012083:	83 c4 10             	add    esp,0x10
c0012086:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012089:	76 3b                	jbe    c00120c6 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001208b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001208e:	83 ec 0c             	sub    esp,0xc
c0012091:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012095:	8b 10                	mov    edx,DWORD PTR [eax]
c0012097:	51                   	push   ecx
c0012098:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001209c:	51                   	push   ecx
c001209d:	6a 00                	push   0x0
c001209f:	6a 01                	push   0x1
c00120a1:	50                   	push   eax
c00120a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120a5:	83 c4 20             	add    esp,0x20
c00120a8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120ad:	74 26                	je     c00120d5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00120af:	52                   	push   edx
c00120b0:	43                   	inc    ebx
c00120b1:	57                   	push   edi
c00120b2:	56                   	push   esi
c00120b3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00120b6:	e8 11 90 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c00120bb:	83 c6 2b             	add    esi,0x2b
c00120be:	83 d7 00             	adc    edi,0x0
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	eb c0                	jmp    c0012086 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00120c6:	50                   	push   eax
c00120c7:	50                   	push   eax
c00120c8:	6a 40                	push   0x40
c00120ca:	55                   	push   ebp
c00120cb:	e8 0e ff ff ff       	call   c0011fde <CmExpand(Reghive_Tag*, int)>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	89 c3                	mov    ebx,eax
c00120d5:	83 c4 1c             	add    esp,0x1c
c00120d8:	89 d8                	mov    eax,ebx
c00120da:	5b                   	pop    ebx
c00120db:	5e                   	pop    esi
c00120dc:	5f                   	pop    edi
c00120dd:	5d                   	pop    ebp
c00120de:	c3                   	ret    

c00120df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120df:	55                   	push   ebp
c00120e0:	57                   	push   edi
c00120e1:	56                   	push   esi
c00120e2:	53                   	push   ebx
c00120e3:	81 ec 88 00 00 00    	sub    esp,0x88
c00120e9:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120f0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120f7:	e8 5d ff ff ff       	call   c0012059 <CmFindUnusedExtent(Reghive_Tag*)>
c00120fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012100:	83 c4 0c             	add    esp,0xc
c0012103:	6a 2b                	push   0x2b
c0012105:	6a 00                	push   0x0
c0012107:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001210b:	55                   	push   ebp
c001210c:	e8 df e3 fe ff       	call   c00004f0 <memset>
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	85 db                	test   ebx,ebx
c0012116:	74 12                	je     c001212a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012118:	51                   	push   ecx
c0012119:	55                   	push   ebp
c001211a:	53                   	push   ebx
c001211b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012122:	e8 0e fd ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001212e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012135:	b9 2b 00 00 00       	mov    ecx,0x2b
c001213a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001213c:	85 db                	test   ebx,ebx
c001213e:	74 49                	je     c0012189 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012140:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012145:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001214a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001214e:	c1 e0 08             	shl    eax,0x8
c0012151:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012157:	09 c8                	or     eax,ecx
c0012159:	74 11                	je     c001216c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001215b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001215f:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012163:	c1 e8 10             	shr    eax,0x10
c0012166:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001216a:	eb 0f                	jmp    c001217b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c001216c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012171:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012176:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001217b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001217f:	c1 ea 08             	shr    edx,0x8
c0012182:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012187:	eb 0f                	jmp    c0012198 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012189:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001218e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012193:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012198:	52                   	push   edx
c0012199:	8d 44 24 49          	lea    eax,[esp+0x49]
c001219d:	50                   	push   eax
c001219e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121a2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121a9:	e8 ab fd ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00121ae:	83 c4 10             	add    esp,0x10
c00121b1:	85 db                	test   ebx,ebx
c00121b3:	74 12                	je     c00121c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00121b5:	50                   	push   eax
c00121b6:	55                   	push   ebp
c00121b7:	53                   	push   ebx
c00121b8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121bf:	e8 95 fd ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00121c4:	83 c4 10             	add    esp,0x10
c00121c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121cb:	83 c4 7c             	add    esp,0x7c
c00121ce:	5b                   	pop    ebx
c00121cf:	5e                   	pop    esi
c00121d0:	5f                   	pop    edi
c00121d1:	5d                   	pop    ebp
c00121d2:	c3                   	ret    

c00121d3 <CmSetString(Reghive_Tag*, int, char const*)>:
c00121d3:	55                   	push   ebp
c00121d4:	57                   	push   edi
c00121d5:	56                   	push   esi
c00121d6:	53                   	push   ebx
c00121d7:	bb 27 00 00 00       	mov    ebx,0x27
c00121dc:	81 ec 88 00 00 00    	sub    esp,0x88
c00121e2:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00121e9:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121f0:	e8 8b e3 fe ff       	call   c0000580 <strlen>
c00121f5:	8d 48 26             	lea    ecx,[eax+0x26]
c00121f8:	89 c8                	mov    eax,ecx
c00121fa:	99                   	cdq    
c00121fb:	f7 fb                	idiv   ebx
c00121fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001220a:	7e 10                	jle    c001221c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001220c:	83 ec 0c             	sub    esp,0xc
c001220f:	68 b4 0e 02 c0       	push   0xc0020eb4
c0012214:	e8 5c e6 ff ff       	call   c0010875 <KePanic(char const*)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	53                   	push   ebx
c001221d:	31 ed                	xor    ebp,ebp
c001221f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012223:	53                   	push   ebx
c0012224:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001222b:	57                   	push   edi
c001222c:	e8 04 fc ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012238:	89 f0                	mov    eax,esi
c001223a:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c001223e:	c1 e0 08             	shl    eax,0x8
c0012241:	09 c6                	or     esi,eax
c0012243:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012247:	c1 e6 08             	shl    esi,0x8
c001224a:	09 c6                	or     esi,eax
c001224c:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012250:	7e 72                	jle    c00122c4 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012252:	85 f6                	test   esi,esi
c0012254:	75 25                	jne    c001227b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012256:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001225b:	8d 44 24 45          	lea    eax,[esp+0x45]
c001225f:	50                   	push   eax
c0012260:	6a 00                	push   0x0
c0012262:	6a 00                	push   0x0
c0012264:	57                   	push   edi
c0012265:	e8 75 fe ff ff       	call   c00120df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001226a:	83 c4 10             	add    esp,0x10
c001226d:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012270:	89 c6                	mov    esi,eax
c0012272:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012275:	c1 f8 10             	sar    eax,0x10
c0012278:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001227b:	51                   	push   ecx
c001227c:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012280:	52                   	push   edx
c0012281:	56                   	push   esi
c0012282:	57                   	push   edi
c0012283:	e8 ad fb ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012288:	83 c4 0c             	add    esp,0xc
c001228b:	6a 27                	push   0x27
c001228d:	6a 00                	push   0x0
c001228f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012293:	51                   	push   ecx
c0012294:	e8 57 e2 fe ff       	call   c00004f0 <memset>
c0012299:	6b c5 27             	imul   eax,ebp,0x27
c001229c:	83 c4 0c             	add    esp,0xc
c001229f:	6a 27                	push   0x27
c00122a1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00122a8:	50                   	push   eax
c00122a9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00122ad:	51                   	push   ecx
c00122ae:	e8 dd e3 fe ff       	call   c0000690 <strncpy>
c00122b3:	83 c4 0c             	add    esp,0xc
c00122b6:	8d 54 24 49          	lea    edx,[esp+0x49]
c00122ba:	52                   	push   edx
c00122bb:	56                   	push   esi
c00122bc:	57                   	push   edi
c00122bd:	e8 97 fc ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122c2:	eb 19                	jmp    c00122dd <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00122c4:	85 f6                	test   esi,esi
c00122c6:	74 18                	je     c00122e0 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00122c8:	52                   	push   edx
c00122c9:	52                   	push   edx
c00122ca:	56                   	push   esi
c00122cb:	57                   	push   edi
c00122cc:	e8 c4 fc ff ff       	call   c0011f95 <CmFreeExtent(Reghive_Tag*, int)>
c00122d1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00122d5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122d9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122dd:	83 c4 10             	add    esp,0x10
c00122e0:	45                   	inc    ebp
c00122e1:	83 c3 03             	add    ebx,0x3
c00122e4:	83 fd 07             	cmp    ebp,0x7
c00122e7:	0f 85 47 ff ff ff    	jne    c0012234 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122ed:	50                   	push   eax
c00122ee:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122f2:	50                   	push   eax
c00122f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122fa:	57                   	push   edi
c00122fb:	e8 59 fc ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012300:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012306:	5b                   	pop    ebx
c0012307:	5e                   	pop    esi
c0012308:	5f                   	pop    edi
c0012309:	5d                   	pop    ebp
c001230a:	c3                   	ret    

c001230b <CmGetMatch(char*, char*, bool, bool*)>:
c001230b:	56                   	push   esi
c001230c:	53                   	push   ebx
c001230d:	50                   	push   eax
c001230e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012313:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012317:	74 25                	je     c001233e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012319:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001231c:	31 db                	xor    ebx,ebx
c001231e:	50                   	push   eax
c001231f:	50                   	push   eax
c0012320:	8d 04 9d 00 23 02 c0 	lea    eax,[ebx*4-0x3ffddd00]
c0012327:	50                   	push   eax
c0012328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001232c:	e8 4f e4 fe ff       	call   c0000780 <strcmp>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	85 c0                	test   eax,eax
c0012336:	74 2e                	je     c0012366 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012338:	43                   	inc    ebx
c0012339:	83 fb 3f             	cmp    ebx,0x3f
c001233c:	75 e0                	jne    c001231e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001233e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012341:	31 db                	xor    ebx,ebx
c0012343:	51                   	push   ecx
c0012344:	51                   	push   ecx
c0012345:	8d 04 9d 00 23 02 c0 	lea    eax,[ebx*4-0x3ffddd00]
c001234c:	50                   	push   eax
c001234d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012351:	e8 2a e4 fe ff       	call   c0000780 <strcmp>
c0012356:	83 c4 10             	add    esp,0x10
c0012359:	85 c0                	test   eax,eax
c001235b:	74 09                	je     c0012366 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001235d:	43                   	inc    ebx
c001235e:	83 fb 3f             	cmp    ebx,0x3f
c0012361:	75 e0                	jne    c0012343 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012363:	83 cb ff             	or     ebx,0xffffffff
c0012366:	5a                   	pop    edx
c0012367:	89 d8                	mov    eax,ebx
c0012369:	5b                   	pop    ebx
c001236a:	5e                   	pop    esi
c001236b:	c3                   	ret    

c001236c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001236c:	55                   	push   ebp
c001236d:	31 c0                	xor    eax,eax
c001236f:	57                   	push   edi
c0012370:	56                   	push   esi
c0012371:	53                   	push   ebx
c0012372:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012376:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001237a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001237e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012382:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012384:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012387:	83 fd 1f             	cmp    ebp,0x1f
c001238a:	7f 0b                	jg     c0012397 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001238c:	0f b6 c2             	movzx  eax,dl
c001238f:	d3 e0                	shl    eax,cl
c0012391:	09 07                	or     DWORD PTR [edi],eax
c0012393:	b0 01                	mov    al,0x1
c0012395:	01 33                	add    DWORD PTR [ebx],esi
c0012397:	5b                   	pop    ebx
c0012398:	5e                   	pop    esi
c0012399:	5f                   	pop    edi
c001239a:	5d                   	pop    ebp
c001239b:	c3                   	ret    

c001239c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001239c:	57                   	push   edi
c001239d:	56                   	push   esi
c001239e:	53                   	push   ebx
c001239f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00123a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123a7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00123ab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00123af:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00123b1:	7c 17                	jl     c00123ca <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00123b3:	8b 17                	mov    edx,DWORD PTR [edi]
c00123b5:	b8 01 00 00 00       	mov    eax,0x1
c00123ba:	d3 e0                	shl    eax,cl
c00123bc:	48                   	dec    eax
c00123bd:	21 d0                	and    eax,edx
c00123bf:	d3 ea                	shr    edx,cl
c00123c1:	89 17                	mov    DWORD PTR [edi],edx
c00123c3:	29 0b                	sub    DWORD PTR [ebx],ecx
c00123c5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123c8:	eb 05                	jmp    c00123cf <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00123ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123cd:	31 c0                	xor    eax,eax
c00123cf:	5b                   	pop    ebx
c00123d0:	5e                   	pop    esi
c00123d1:	5f                   	pop    edi
c00123d2:	c3                   	ret    

c00123d3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00123d3:	83 ec 40             	sub    esp,0x40
c00123d6:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123da:	50                   	push   eax
c00123db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123e3:	e8 4d fa ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123e8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123ec:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123f0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123f4:	89 10                	mov    DWORD PTR [eax],edx
c00123f6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123f9:	83 c4 4c             	add    esp,0x4c
c00123fc:	c3                   	ret    

c00123fd <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123fd:	55                   	push   ebp
c00123fe:	57                   	push   edi
c00123ff:	56                   	push   esi
c0012400:	53                   	push   ebx
c0012401:	83 ec 40             	sub    esp,0x40
c0012404:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012408:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001240c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012410:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012414:	53                   	push   ebx
c0012415:	56                   	push   esi
c0012416:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001241a:	e8 16 fa ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001241f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012423:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012427:	83 c4 0c             	add    esp,0xc
c001242a:	53                   	push   ebx
c001242b:	56                   	push   esi
c001242c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012430:	e8 24 fb ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012435:	83 c4 4c             	add    esp,0x4c
c0012438:	5b                   	pop    ebx
c0012439:	5e                   	pop    esi
c001243a:	5f                   	pop    edi
c001243b:	5d                   	pop    ebp
c001243c:	c3                   	ret    

c001243d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001243d:	55                   	push   ebp
c001243e:	57                   	push   edi
c001243f:	56                   	push   esi
c0012440:	31 f6                	xor    esi,esi
c0012442:	53                   	push   ebx
c0012443:	31 db                	xor    ebx,ebx
c0012445:	83 ec 40             	sub    esp,0x40
c0012448:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012450:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012458:	6a 12                	push   0x12
c001245a:	68 ee 00 00 00       	push   0xee
c001245f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012463:	e8 88 e0 fe ff       	call   c00004f0 <memset>
c0012468:	83 c4 10             	add    esp,0x10
c001246b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001246f:	6a 08                	push   0x8
c0012471:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012475:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012479:	50                   	push   eax
c001247a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001247e:	55                   	push   ebp
c001247f:	57                   	push   edi
c0012480:	e8 e7 fe ff ff       	call   c001236c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001248c:	50                   	push   eax
c001248d:	6a 06                	push   0x6
c001248f:	55                   	push   ebp
c0012490:	57                   	push   edi
c0012491:	e8 06 ff ff ff       	call   c001239c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012496:	83 c4 10             	add    esp,0x10
c0012499:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001249e:	74 07                	je     c00124a7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00124a0:	46                   	inc    esi
c00124a1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00124a5:	eb e1                	jmp    c0012488 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00124a7:	43                   	inc    ebx
c00124a8:	83 fb 12             	cmp    ebx,0x12
c00124ab:	75 c2                	jne    c001246f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00124ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00124b1:	31 f6                	xor    esi,esi
c00124b3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00124b6:	50                   	push   eax
c00124b7:	50                   	push   eax
c00124b8:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00124bd:	46                   	inc    esi
c00124be:	8d 04 85 00 23 02 c0 	lea    eax,[eax*4-0x3ffddd00]
c00124c5:	50                   	push   eax
c00124c6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124ca:	e8 a1 e3 fe ff       	call   c0000870 <strcat>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	83 fe 18             	cmp    esi,0x18
c00124d5:	75 df                	jne    c00124b6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00124d7:	83 c4 3c             	add    esp,0x3c
c00124da:	31 c0                	xor    eax,eax
c00124dc:	5b                   	pop    ebx
c00124dd:	5e                   	pop    esi
c00124de:	5f                   	pop    edi
c00124df:	5d                   	pop    ebp
c00124e0:	c3                   	ret    

c00124e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124e1:	83 ec 40             	sub    esp,0x40
c00124e4:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124e8:	50                   	push   eax
c00124e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124f1:	e8 3f f9 ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124f6:	58                   	pop    eax
c00124f7:	5a                   	pop    edx
c00124f8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124fc:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012500:	50                   	push   eax
c0012501:	e8 37 ff ff ff       	call   c001243d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012506:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001250b:	83 c4 4c             	add    esp,0x4c
c001250e:	c3                   	ret    

c001250f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001250f:	55                   	push   ebp
c0012510:	57                   	push   edi
c0012511:	56                   	push   esi
c0012512:	53                   	push   ebx
c0012513:	31 db                	xor    ebx,ebx
c0012515:	83 ec 70             	sub    esp,0x70
c0012518:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001251f:	6a 30                	push   0x30
c0012521:	6a 00                	push   0x0
c0012523:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012527:	56                   	push   esi
c0012528:	e8 c3 df fe ff       	call   c00004f0 <memset>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	83 ec 0c             	sub    esp,0xc
c0012533:	57                   	push   edi
c0012534:	e8 47 e0 fe ff       	call   c0000580 <strlen>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	39 d8                	cmp    eax,ebx
c001253e:	76 16                	jbe    c0012556 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012540:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012544:	83 ec 0c             	sub    esp,0xc
c0012547:	50                   	push   eax
c0012548:	e8 13 e4 fe ff       	call   c0000960 <toupper>
c001254d:	83 c4 10             	add    esp,0x10
c0012550:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012553:	43                   	inc    ebx
c0012554:	eb da                	jmp    c0012530 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012556:	52                   	push   edx
c0012557:	31 db                	xor    ebx,ebx
c0012559:	6a 18                	push   0x18
c001255b:	31 ff                	xor    edi,edi
c001255d:	6a 3f                	push   0x3f
c001255f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012563:	50                   	push   eax
c0012564:	e8 87 df fe ff       	call   c00004f0 <memset>
c0012569:	83 c4 10             	add    esp,0x10
c001256c:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012570:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012574:	84 c0                	test   al,al
c0012576:	0f 84 af 00 00 00    	je     c001262b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001257c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012580:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012583:	83 ec 0c             	sub    esp,0xc
c0012586:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001258b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001258f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012593:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012598:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001259c:	56                   	push   esi
c001259d:	e8 de df fe ff       	call   c0000580 <strlen>
c00125a2:	83 c4 10             	add    esp,0x10
c00125a5:	85 c0                	test   eax,eax
c00125a7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00125ab:	74 0b                	je     c00125b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00125ad:	50                   	push   eax
c00125ae:	6a 01                	push   0x1
c00125b0:	56                   	push   esi
c00125b1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00125b5:	50                   	push   eax
c00125b6:	eb 0a                	jmp    c00125c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00125b8:	50                   	push   eax
c00125b9:	6a 00                	push   0x0
c00125bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00125bf:	50                   	push   eax
c00125c0:	6a 00                	push   0x0
c00125c2:	e8 44 fd ff ff       	call   c001230b <CmGetMatch(char*, char*, bool, bool*)>
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	83 f8 ff             	cmp    eax,0xffffffff
c00125cd:	75 1a                	jne    c00125e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00125cf:	83 ec 0c             	sub    esp,0xc
c00125d2:	68 c9 0e 02 c0       	push   0xc0020ec9
c00125d7:	e8 99 e2 ff ff       	call   c0010875 <KePanic(char const*)>
c00125dc:	83 c4 10             	add    esp,0x10
c00125df:	b8 02 00 00 00       	mov    eax,0x2
c00125e4:	e9 bb 00 00 00       	jmp    c00126a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125e9:	83 ff 18             	cmp    edi,0x18
c00125ec:	75 1a                	jne    c0012608 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125ee:	83 ec 0c             	sub    esp,0xc
c00125f1:	68 de 0e 02 c0       	push   0xc0020ede
c00125f6:	e8 7a e2 ff ff       	call   c0010875 <KePanic(char const*)>
c00125fb:	83 c4 10             	add    esp,0x10
c00125fe:	b8 01 00 00 00       	mov    eax,0x1
c0012603:	e9 9c 00 00 00       	jmp    c00126a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012608:	47                   	inc    edi
c0012609:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001260e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012612:	0f 45 dd             	cmovne ebx,ebp
c0012615:	83 ec 0c             	sub    esp,0xc
c0012618:	56                   	push   esi
c0012619:	e8 62 df fe ff       	call   c0000580 <strlen>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	85 c0                	test   eax,eax
c0012623:	74 06                	je     c001262b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012625:	43                   	inc    ebx
c0012626:	e9 41 ff ff ff       	jmp    c001256c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001262b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012633:	31 db                	xor    ebx,ebx
c0012635:	31 ff                	xor    edi,edi
c0012637:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001263f:	50                   	push   eax
c0012640:	6a 12                	push   0x12
c0012642:	68 ee 00 00 00       	push   0xee
c0012647:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001264e:	e8 9d de fe ff       	call   c00004f0 <memset>
c0012653:	83 c4 10             	add    esp,0x10
c0012656:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001265a:	83 fb 17             	cmp    ebx,0x17
c001265d:	7e 26                	jle    c0012685 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c001265f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012663:	50                   	push   eax
c0012664:	6a 08                	push   0x8
c0012666:	55                   	push   ebp
c0012667:	56                   	push   esi
c0012668:	e8 2f fd ff ff       	call   c001239c <CmGetShift(unsigned int*, int*, int, bool*)>
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012675:	74 26                	je     c001269d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012677:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001267e:	4b                   	dec    ebx
c001267f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012682:	47                   	inc    edi
c0012683:	eb 1c                	jmp    c00126a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012685:	6a 06                	push   0x6
c0012687:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c001268c:	50                   	push   eax
c001268d:	55                   	push   ebp
c001268e:	56                   	push   esi
c001268f:	e8 d8 fc ff ff       	call   c001236c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	84 c0                	test   al,al
c0012699:	75 06                	jne    c00126a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001269b:	eb c2                	jmp    c001265f <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c001269d:	31 c0                	xor    eax,eax
c001269f:	eb 03                	jmp    c00126a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00126a1:	43                   	inc    ebx
c00126a2:	eb b2                	jmp    c0012656 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00126a4:	83 c4 6c             	add    esp,0x6c
c00126a7:	5b                   	pop    ebx
c00126a8:	5e                   	pop    esi
c00126a9:	5f                   	pop    edi
c00126aa:	5d                   	pop    ebp
c00126ab:	c3                   	ret    

c00126ac <CmCreateString(Reghive_Tag*, int, char const*)>:
c00126ac:	53                   	push   ebx
c00126ad:	83 ec 3c             	sub    esp,0x3c
c00126b0:	6a 2b                	push   0x2b
c00126b2:	6a 00                	push   0x0
c00126b4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00126b8:	53                   	push   ebx
c00126b9:	e8 32 de fe ff       	call   c00004f0 <memset>
c00126be:	58                   	pop    eax
c00126bf:	5a                   	pop    edx
c00126c0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00126c4:	50                   	push   eax
c00126c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126c9:	e8 41 fe ff ff       	call   c001250f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126ce:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00126d3:	83 c4 0c             	add    esp,0xc
c00126d6:	6a 15                	push   0x15
c00126d8:	6a 00                	push   0x0
c00126da:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126de:	50                   	push   eax
c00126df:	e8 0c de fe ff       	call   c00004f0 <memset>
c00126e4:	53                   	push   ebx
c00126e5:	6a 00                	push   0x0
c00126e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126ef:	e8 eb f9 ff ff       	call   c00120df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126f4:	83 c4 58             	add    esp,0x58
c00126f7:	5b                   	pop    ebx
c00126f8:	c3                   	ret    

c00126f9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126f9:	56                   	push   esi
c00126fa:	53                   	push   ebx
c00126fb:	83 ec 48             	sub    esp,0x48
c00126fe:	6a 12                	push   0x12
c0012700:	68 ff 00 00 00       	push   0xff
c0012705:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012709:	56                   	push   esi
c001270a:	e8 e1 dd fe ff       	call   c00004f0 <memset>
c001270f:	5a                   	pop    edx
c0012710:	59                   	pop    ecx
c0012711:	56                   	push   esi
c0012712:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012716:	e8 f4 fd ff ff       	call   c001250f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001271b:	83 c4 10             	add    esp,0x10
c001271e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012722:	85 db                	test   ebx,ebx
c0012724:	74 42                	je     c0012768 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012726:	50                   	push   eax
c0012727:	8d 44 24 19          	lea    eax,[esp+0x19]
c001272b:	50                   	push   eax
c001272c:	53                   	push   ebx
c001272d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012731:	e8 ff f6 ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012736:	83 c4 0c             	add    esp,0xc
c0012739:	6a 12                	push   0x12
c001273b:	8d 44 24 21          	lea    eax,[esp+0x21]
c001273f:	50                   	push   eax
c0012740:	56                   	push   esi
c0012741:	e8 3a dc fe ff       	call   c0000380 <memcmp>
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	85 c0                	test   eax,eax
c001274b:	74 1e                	je     c001276b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001274d:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012752:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012757:	c1 e3 08             	shl    ebx,0x8
c001275a:	09 d8                	or     eax,ebx
c001275c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012761:	c1 e3 10             	shl    ebx,0x10
c0012764:	09 c3                	or     ebx,eax
c0012766:	eb ba                	jmp    c0012722 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012768:	83 cb ff             	or     ebx,0xffffffff
c001276b:	83 c4 44             	add    esp,0x44
c001276e:	89 d8                	mov    eax,ebx
c0012770:	5b                   	pop    ebx
c0012771:	5e                   	pop    esi
c0012772:	c3                   	ret    

c0012773 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012773:	57                   	push   edi
c0012774:	56                   	push   esi
c0012775:	53                   	push   ebx
c0012776:	83 ec 34             	sub    esp,0x34
c0012779:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001277d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012781:	6a 2b                	push   0x2b
c0012783:	6a 00                	push   0x0
c0012785:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012789:	53                   	push   ebx
c001278a:	e8 61 dd fe ff       	call   c00004f0 <memset>
c001278f:	58                   	pop    eax
c0012790:	5a                   	pop    edx
c0012791:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012795:	50                   	push   eax
c0012796:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001279a:	e8 70 fd ff ff       	call   c001250f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001279f:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00127a3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00127a7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00127ab:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00127af:	53                   	push   ebx
c00127b0:	6a 00                	push   0x0
c00127b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127ba:	e8 20 f9 ff ff       	call   c00120df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127bf:	83 c4 50             	add    esp,0x50
c00127c2:	5b                   	pop    ebx
c00127c3:	5e                   	pop    esi
c00127c4:	5f                   	pop    edi
c00127c5:	c3                   	ret    

c00127c6 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00127c6:	55                   	push   ebp
c00127c7:	57                   	push   edi
c00127c8:	56                   	push   esi
c00127c9:	53                   	push   ebx
c00127ca:	83 ec 40             	sub    esp,0x40
c00127cd:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00127d1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127d5:	6a 2b                	push   0x2b
c00127d7:	6a 00                	push   0x0
c00127d9:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127dd:	56                   	push   esi
c00127de:	e8 0d dd fe ff       	call   c00004f0 <memset>
c00127e3:	5f                   	pop    edi
c00127e4:	89 ef                	mov    edi,ebp
c00127e6:	58                   	pop    eax
c00127e7:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127eb:	50                   	push   eax
c00127ec:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127f0:	e8 1a fd ff ff       	call   c001250f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127f5:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127fa:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127ff:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012804:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012809:	83 c4 10             	add    esp,0x10
c001280c:	85 ed                	test   ebp,ebp
c001280e:	74 14                	je     c0012824 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012810:	51                   	push   ecx
c0012811:	51                   	push   ecx
c0012812:	57                   	push   edi
c0012813:	53                   	push   ebx
c0012814:	e8 0e f7 ff ff       	call   c0011f27 <CmGetNext(Reghive_Tag*, int)>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	85 c0                	test   eax,eax
c001281e:	74 04                	je     c0012824 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012820:	89 c7                	mov    edi,eax
c0012822:	eb e8                	jmp    c001280c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012824:	56                   	push   esi
c0012825:	6a 00                	push   0x0
c0012827:	57                   	push   edi
c0012828:	53                   	push   ebx
c0012829:	e8 b1 f8 ff ff       	call   c00120df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001282e:	83 c4 0c             	add    esp,0xc
c0012831:	56                   	push   esi
c0012832:	50                   	push   eax
c0012833:	89 c7                	mov    edi,eax
c0012835:	53                   	push   ebx
c0012836:	e8 fa f5 ff ff       	call   c0011e35 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001283b:	58                   	pop    eax
c001283c:	5a                   	pop    edx
c001283d:	6a 6c                	push   0x6c
c001283f:	6a 00                	push   0x0
c0012841:	6a 00                	push   0x0
c0012843:	68 ef 0e 02 c0       	push   0xc0020eef
c0012848:	57                   	push   edi
c0012849:	53                   	push   ebx
c001284a:	e8 24 ff ff ff       	call   c0012773 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001284f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012853:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012857:	c1 e8 10             	shr    eax,0x10
c001285a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001285e:	83 c4 1c             	add    esp,0x1c
c0012861:	56                   	push   esi
c0012862:	57                   	push   edi
c0012863:	53                   	push   ebx
c0012864:	e8 f0 f6 ff ff       	call   c0011f59 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012869:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001286e:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012873:	c1 e0 08             	shl    eax,0x8
c0012876:	09 c2                	or     edx,eax
c0012878:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001287d:	83 c4 4c             	add    esp,0x4c
c0012880:	5b                   	pop    ebx
c0012881:	5e                   	pop    esi
c0012882:	c1 e0 10             	shl    eax,0x10
c0012885:	09 d0                	or     eax,edx
c0012887:	5f                   	pop    edi
c0012888:	5d                   	pop    ebp
c0012889:	c3                   	ret    

c001288a <zStrtok(char*, char const*)>:
c001288a:	55                   	push   ebp
c001288b:	57                   	push   edi
c001288c:	56                   	push   esi
c001288d:	53                   	push   ebx
c001288e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012892:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012896:	85 db                	test   ebx,ebx
c0012898:	74 2f                	je     c00128c9 <zStrtok(char*, char const*)+0x3f>
c001289a:	85 c0                	test   eax,eax
c001289c:	75 09                	jne    c00128a7 <zStrtok(char*, char const*)+0x1d>
c001289e:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00128a3:	85 c0                	test   eax,eax
c00128a5:	74 50                	je     c00128f7 <zStrtok(char*, char const*)+0x6d>
c00128a7:	31 c9                	xor    ecx,ecx
c00128a9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00128ad:	74 03                	je     c00128b2 <zStrtok(char*, char const*)+0x28>
c00128af:	41                   	inc    ecx
c00128b0:	eb f7                	jmp    c00128a9 <zStrtok(char*, char const*)+0x1f>
c00128b2:	31 d2                	xor    edx,edx
c00128b4:	39 ca                	cmp    edx,ecx
c00128b6:	74 15                	je     c00128cd <zStrtok(char*, char const*)+0x43>
c00128b8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00128bc:	8d 3c 10             	lea    edi,[eax+edx*1]
c00128bf:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00128c2:	39 ee                	cmp    esi,ebp
c00128c4:	74 13                	je     c00128d9 <zStrtok(char*, char const*)+0x4f>
c00128c6:	42                   	inc    edx
c00128c7:	eb eb                	jmp    c00128b4 <zStrtok(char*, char const*)+0x2a>
c00128c9:	31 c0                	xor    eax,eax
c00128cb:	eb 2a                	jmp    c00128f7 <zStrtok(char*, char const*)+0x6d>
c00128cd:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c00128d7:	eb 1e                	jmp    c00128f7 <zStrtok(char*, char const*)+0x6d>
c00128d9:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128dc:	39 ce                	cmp    esi,ecx
c00128de:	75 0a                	jne    c00128ea <zStrtok(char*, char const*)+0x60>
c00128e0:	40                   	inc    eax
c00128e1:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128e6:	89 d8                	mov    eax,ebx
c00128e8:	eb 0d                	jmp    c00128f7 <zStrtok(char*, char const*)+0x6d>
c00128ea:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128ed:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128f1:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128f7:	5b                   	pop    ebx
c00128f8:	5e                   	pop    esi
c00128f9:	5f                   	pop    edi
c00128fa:	5d                   	pop    ebp
c00128fb:	c3                   	ret    

c00128fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128fc:	57                   	push   edi
c00128fd:	56                   	push   esi
c00128fe:	53                   	push   ebx
c00128ff:	81 ec 08 01 00 00    	sub    esp,0x108
c0012905:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001290c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012913:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012917:	53                   	push   ebx
c0012918:	e8 33 dd fe ff       	call   c0000650 <strcpy>
c001291d:	59                   	pop    ecx
c001291e:	5e                   	pop    esi
c001291f:	68 53 12 02 c0       	push   0xc0021253
c0012924:	53                   	push   ebx
c0012925:	bb 01 00 00 00       	mov    ebx,0x1
c001292a:	e8 5b ff ff ff       	call   c001288a <zStrtok(char*, char const*)>
c001292f:	83 c4 10             	add    esp,0x10
c0012932:	85 c0                	test   eax,eax
c0012934:	74 3b                	je     c0012971 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012936:	52                   	push   edx
c0012937:	50                   	push   eax
c0012938:	6a 01                	push   0x1
c001293a:	57                   	push   edi
c001293b:	e8 b9 fd ff ff       	call   c00126f9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012940:	59                   	pop    ecx
c0012941:	5e                   	pop    esi
c0012942:	89 c3                	mov    ebx,eax
c0012944:	68 53 12 02 c0       	push   0xc0021253
c0012949:	6a 00                	push   0x0
c001294b:	e8 3a ff ff ff       	call   c001288a <zStrtok(char*, char const*)>
c0012950:	83 c4 10             	add    esp,0x10
c0012953:	85 c0                	test   eax,eax
c0012955:	89 c6                	mov    esi,eax
c0012957:	74 18                	je     c0012971 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012959:	52                   	push   edx
c001295a:	52                   	push   edx
c001295b:	53                   	push   ebx
c001295c:	57                   	push   edi
c001295d:	e8 86 f5 ff ff       	call   c0011ee8 <CmEnterDirectory(Reghive_Tag*, int)>
c0012962:	83 c4 10             	add    esp,0x10
c0012965:	83 f8 ff             	cmp    eax,0xffffffff
c0012968:	89 c3                	mov    ebx,eax
c001296a:	74 05                	je     c0012971 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001296c:	50                   	push   eax
c001296d:	56                   	push   esi
c001296e:	53                   	push   ebx
c001296f:	eb c9                	jmp    c001293a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012971:	81 c4 00 01 00 00    	add    esp,0x100
c0012977:	89 d8                	mov    eax,ebx
c0012979:	5b                   	pop    ebx
c001297a:	5e                   	pop    esi
c001297b:	5f                   	pop    edi
c001297c:	c3                   	ret    

c001297d <CmDisplayTree(Reghive_Tag*, int, int)>:
c001297d:	55                   	push   ebp
c001297e:	57                   	push   edi
c001297f:	56                   	push   esi
c0012980:	53                   	push   ebx
c0012981:	83 ec 5c             	sub    esp,0x5c
c0012984:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012988:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001298c:	85 db                	test   ebx,ebx
c001298e:	0f 8e 84 00 00 00    	jle    c0012a18 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012994:	57                   	push   edi
c0012995:	31 ed                	xor    ebp,ebp
c0012997:	6a 32                	push   0x32
c0012999:	6a 00                	push   0x0
c001299b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001299f:	57                   	push   edi
c00129a0:	e8 4b db fe ff       	call   c00004f0 <memset>
c00129a5:	83 c4 0c             	add    esp,0xc
c00129a8:	57                   	push   edi
c00129a9:	53                   	push   ebx
c00129aa:	56                   	push   esi
c00129ab:	e8 31 fb ff ff       	call   c00124e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00129b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00129bb:	7d 13                	jge    c00129d0 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00129bd:	83 ec 0c             	sub    esp,0xc
c00129c0:	45                   	inc    ebp
c00129c1:	68 c4 15 02 c0       	push   0xc00215c4
c00129c6:	e8 df 7f ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00129cb:	83 c4 10             	add    esp,0x10
c00129ce:	eb e7                	jmp    c00129b7 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00129d0:	51                   	push   ecx
c00129d1:	57                   	push   edi
c00129d2:	53                   	push   ebx
c00129d3:	68 f5 0e 02 c0       	push   0xc0020ef5
c00129d8:	e8 cd 7f ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00129dd:	83 c4 10             	add    esp,0x10
c00129e0:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129e5:	75 1e                	jne    c0012a05 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129e7:	52                   	push   edx
c00129e8:	52                   	push   edx
c00129e9:	53                   	push   ebx
c00129ea:	56                   	push   esi
c00129eb:	e8 f8 f4 ff ff       	call   c0011ee8 <CmEnterDirectory(Reghive_Tag*, int)>
c00129f0:	83 c4 0c             	add    esp,0xc
c00129f3:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129f7:	8d 51 04             	lea    edx,[ecx+0x4]
c00129fa:	52                   	push   edx
c00129fb:	50                   	push   eax
c00129fc:	56                   	push   esi
c00129fd:	e8 7b ff ff ff       	call   c001297d <CmDisplayTree(Reghive_Tag*, int, int)>
c0012a02:	83 c4 10             	add    esp,0x10
c0012a05:	50                   	push   eax
c0012a06:	50                   	push   eax
c0012a07:	53                   	push   ebx
c0012a08:	56                   	push   esi
c0012a09:	e8 19 f5 ff ff       	call   c0011f27 <CmGetNext(Reghive_Tag*, int)>
c0012a0e:	83 c4 10             	add    esp,0x10
c0012a11:	89 c3                	mov    ebx,eax
c0012a13:	e9 74 ff ff ff       	jmp    c001298c <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012a18:	83 c4 5c             	add    esp,0x5c
c0012a1b:	5b                   	pop    ebx
c0012a1c:	5e                   	pop    esi
c0012a1d:	5f                   	pop    edi
c0012a1e:	5d                   	pop    ebp
c0012a1f:	c3                   	ret    

c0012a20 <CmSplitFinalSlashInPlace(char*)>:
c0012a20:	53                   	push   ebx
c0012a21:	83 ec 14             	sub    esp,0x14
c0012a24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a28:	53                   	push   ebx
c0012a29:	e8 52 db fe ff       	call   c0000580 <strlen>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	48                   	dec    eax
c0012a32:	85 c0                	test   eax,eax
c0012a34:	74 15                	je     c0012a4b <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a36:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a3a:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a3d:	75 09                	jne    c0012a48 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a3f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a42:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a46:	eb 05                	jmp    c0012a4d <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a48:	48                   	dec    eax
c0012a49:	eb e7                	jmp    c0012a32 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a4b:	31 c0                	xor    eax,eax
c0012a4d:	83 c4 08             	add    esp,0x8
c0012a50:	5b                   	pop    ebx
c0012a51:	c3                   	ret    

c0012a52 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a52:	55                   	push   ebp
c0012a53:	57                   	push   edi
c0012a54:	56                   	push   esi
c0012a55:	53                   	push   ebx
c0012a56:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a5c:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a63:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012a66:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a6d:	89 f0                	mov    eax,esi
c0012a6f:	3c 40                	cmp    al,0x40
c0012a71:	75 1b                	jne    c0012a8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012a73:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a76:	85 c0                	test   eax,eax
c0012a78:	74 08                	je     c0012a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a7a:	83 f8 3a             	cmp    eax,0x3a
c0012a7d:	74 03                	je     c0012a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a7f:	43                   	inc    ebx
c0012a80:	eb f1                	jmp    c0012a73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012a82:	85 c0                	test   eax,eax
c0012a84:	0f 84 45 01 00 00    	je     c0012bcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a8a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a8d:	43                   	inc    ebx
c0012a8e:	50                   	push   eax
c0012a8f:	6a 40                	push   0x40
c0012a91:	6a 00                	push   0x0
c0012a93:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a97:	50                   	push   eax
c0012a98:	e8 53 da fe ff       	call   c00004f0 <memset>
c0012a9d:	89 f1                	mov    ecx,esi
c0012a9f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012aa6:	31 c0                	xor    eax,eax
c0012aa8:	83 c4 10             	add    esp,0x10
c0012aab:	0f be f1             	movsx  esi,cl
c0012aae:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012ab1:	85 d2                	test   edx,edx
c0012ab3:	89 d1                	mov    ecx,edx
c0012ab5:	0f 84 14 01 00 00    	je     c0012bcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012abb:	3d c7 00 00 00       	cmp    eax,0xc7
c0012ac0:	0f 8f 09 01 00 00    	jg     c0012bcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012ac6:	83 fa 0a             	cmp    edx,0xa
c0012ac9:	0f 85 f1 00 00 00    	jne    c0012bc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012acf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ad4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012ad9:	89 c8                	mov    eax,ecx
c0012adb:	a8 df                	test   al,0xdf
c0012add:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ae2:	83 f9 23             	cmp    ecx,0x23
c0012ae5:	0f 94 c2             	sete   dl
c0012ae8:	89 d5                	mov    ebp,edx
c0012aea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012aee:	09 ea                	or     edx,ebp
c0012af0:	80 e2 01             	and    dl,0x1
c0012af3:	75 47                	jne    c0012b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012af5:	83 e8 09             	sub    eax,0x9
c0012af8:	3c 01                	cmp    al,0x1
c0012afa:	76 40                	jbe    c0012b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012afc:	83 f9 5b             	cmp    ecx,0x5b
c0012aff:	75 42                	jne    c0012b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012b01:	83 fe 40             	cmp    esi,0x40
c0012b04:	75 36                	jne    c0012b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b06:	83 ec 0c             	sub    esp,0xc
c0012b09:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012b0d:	55                   	push   ebp
c0012b0e:	e8 6d da fe ff       	call   c0000580 <strlen>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	83 f8 3f             	cmp    eax,0x3f
c0012b19:	0f 87 b0 00 00 00    	ja     c0012bcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b1f:	50                   	push   eax
c0012b20:	50                   	push   eax
c0012b21:	55                   	push   ebp
c0012b22:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012b26:	55                   	push   ebp
c0012b27:	e8 24 db fe ff       	call   c0000650 <strcpy>
c0012b2c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b2f:	e8 4c da fe ff       	call   c0000580 <strlen>
c0012b34:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b39:	83 c4 10             	add    esp,0x10
c0012b3c:	31 d2                	xor    edx,edx
c0012b3e:	e9 84 00 00 00       	jmp    c0012bc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012b43:	83 fe 40             	cmp    esi,0x40
c0012b46:	74 06                	je     c0012b4e <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012b48:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b4c:	eb 19                	jmp    c0012b67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b4e:	51                   	push   ecx
c0012b4f:	51                   	push   ecx
c0012b50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b54:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b58:	50                   	push   eax
c0012b59:	e8 22 dc fe ff       	call   c0000780 <strcmp>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	85 c0                	test   eax,eax
c0012b63:	75 d7                	jne    c0012b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b65:	eb e1                	jmp    c0012b48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012b67:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012b6a:	85 c9                	test   ecx,ecx
c0012b6c:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b71:	83 f9 3d             	cmp    ecx,0x3d
c0012b74:	0f 94 c0             	sete   al
c0012b77:	89 c5                	mov    ebp,eax
c0012b79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b7d:	09 e8                	or     eax,ebp
c0012b7f:	a8 01                	test   al,0x1
c0012b81:	89 c5                	mov    ebp,eax
c0012b83:	75 03                	jne    c0012b88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012b85:	42                   	inc    edx
c0012b86:	eb df                	jmp    c0012b67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b88:	85 c9                	test   ecx,ecx
c0012b8a:	74 43                	je     c0012bcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b90:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b93:	52                   	push   edx
c0012b94:	52                   	push   edx
c0012b95:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b99:	50                   	push   eax
c0012b9a:	53                   	push   ebx
c0012b9b:	e8 e0 db fe ff       	call   c0000780 <strcmp>
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ba7:	85 c0                	test   eax,eax
c0012ba9:	75 91                	jne    c0012b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012bab:	50                   	push   eax
c0012bac:	42                   	inc    edx
c0012bad:	50                   	push   eax
c0012bae:	52                   	push   edx
c0012baf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012bb6:	e8 95 da fe ff       	call   c0000650 <strcpy>
c0012bbb:	83 c4 10             	add    esp,0x10
c0012bbe:	eb 11                	jmp    c0012bd1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012bc0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012bc4:	8d 50 01             	lea    edx,[eax+0x1]
c0012bc7:	47                   	inc    edi
c0012bc8:	89 d0                	mov    eax,edx
c0012bca:	e9 df fe ff ff       	jmp    c0012aae <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012bcf:	31 ed                	xor    ebp,ebp
c0012bd1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012bd7:	89 e8                	mov    eax,ebp
c0012bd9:	5b                   	pop    ebx
c0012bda:	5e                   	pop    esi
c0012bdb:	5f                   	pop    edi
c0012bdc:	5d                   	pop    ebp
c0012bdd:	c3                   	ret    

c0012bde <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012bde:	57                   	push   edi
c0012bdf:	56                   	push   esi
c0012be0:	53                   	push   ebx
c0012be1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012be7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012bee:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012bf5:	53                   	push   ebx
c0012bf6:	e8 85 d9 fe ff       	call   c0000580 <strlen>
c0012bfb:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bfe:	89 c7                	mov    edi,eax
c0012c00:	e8 7b d9 fe ff       	call   c0000580 <strlen>
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c0c:	3d ff 00 00 00       	cmp    eax,0xff
c0012c11:	0f 87 d3 00 00 00    	ja     c0012cea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c17:	57                   	push   edi
c0012c18:	57                   	push   edi
c0012c19:	56                   	push   esi
c0012c1a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c1e:	56                   	push   esi
c0012c1f:	e8 2c da fe ff       	call   c0000650 <strcpy>
c0012c24:	58                   	pop    eax
c0012c25:	5a                   	pop    edx
c0012c26:	68 53 12 02 c0       	push   0xc0021253
c0012c2b:	56                   	push   esi
c0012c2c:	e8 3f dc fe ff       	call   c0000870 <strcat>
c0012c31:	59                   	pop    ecx
c0012c32:	5f                   	pop    edi
c0012c33:	53                   	push   ebx
c0012c34:	56                   	push   esi
c0012c35:	e8 36 dc fe ff       	call   c0000870 <strcat>
c0012c3a:	58                   	pop    eax
c0012c3b:	5a                   	pop    edx
c0012c3c:	68 ff 0e 02 c0       	push   0xc0020eff
c0012c41:	56                   	push   esi
c0012c42:	e8 29 dc fe ff       	call   c0000870 <strcat>
c0012c47:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c4e:	e8 78 4e ff ff       	call   c0007acb <malloc>
c0012c53:	83 c4 0c             	add    esp,0xc
c0012c56:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c5c:	56                   	push   esi
c0012c5d:	50                   	push   eax
c0012c5e:	89 c3                	mov    ebx,eax
c0012c60:	e8 ed 82 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0012c65:	83 c4 10             	add    esp,0x10
c0012c68:	85 db                	test   ebx,ebx
c0012c6a:	74 7e                	je     c0012cea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c6c:	51                   	push   ecx
c0012c6d:	51                   	push   ecx
c0012c6e:	6a 01                	push   0x1
c0012c70:	53                   	push   ebx
c0012c71:	e8 98 83 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0012c76:	83 c4 10             	add    esp,0x10
c0012c79:	85 c0                	test   eax,eax
c0012c7b:	74 08                	je     c0012c85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c7d:	83 ec 0c             	sub    esp,0xc
c0012c80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c82:	53                   	push   ebx
c0012c83:	eb 5f                	jmp    c0012ce4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c85:	52                   	push   edx
c0012c86:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c8a:	50                   	push   eax
c0012c8b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c8f:	50                   	push   eax
c0012c90:	53                   	push   ebx
c0012c91:	e8 24 86 ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c0012c96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	89 c1                	mov    ecx,eax
c0012c9f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012ca3:	74 31                	je     c0012cd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	50                   	push   eax
c0012ca9:	e8 1d 4e ff ff       	call   c0007acb <malloc>
c0012cae:	89 c6                	mov    esi,eax
c0012cb0:	58                   	pop    eax
c0012cb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012cb7:	52                   	push   edx
c0012cb8:	56                   	push   esi
c0012cb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012cbd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012cc1:	53                   	push   ebx
c0012cc2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012cc5:	83 c4 20             	add    esp,0x20
c0012cc8:	85 c0                	test   eax,eax
c0012cca:	75 0a                	jne    c0012cd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cd0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012cd4:	74 18                	je     c0012cee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012cd6:	83 ec 0c             	sub    esp,0xc
c0012cd9:	53                   	push   ebx
c0012cda:	e8 8d 83 ff ff       	call   c000b06c <File::close()>
c0012cdf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ce1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ce4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ce7:	83 c4 10             	add    esp,0x10
c0012cea:	31 c0                	xor    eax,eax
c0012cec:	eb 3b                	jmp    c0012d29 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012cee:	83 ec 0c             	sub    esp,0xc
c0012cf1:	53                   	push   ebx
c0012cf2:	e8 75 83 ff ff       	call   c000b06c <File::close()>
c0012cf7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cfc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cff:	83 c4 0c             	add    esp,0xc
c0012d02:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d09:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d10:	56                   	push   esi
c0012d11:	e8 3c fd ff ff       	call   c0012a52 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d16:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d19:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d1d:	e8 b9 4d ff ff       	call   c0007adb <free>
c0012d22:	83 c4 10             	add    esp,0x10
c0012d25:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d29:	81 c4 20 01 00 00    	add    esp,0x120
c0012d2f:	5b                   	pop    ebx
c0012d30:	5e                   	pop    esi
c0012d31:	5f                   	pop    edi
c0012d32:	c3                   	ret    

c0012d33 <Reg::getLine(char*, char*, char*)>:
c0012d33:	57                   	push   edi
c0012d34:	56                   	push   esi
c0012d35:	53                   	push   ebx
c0012d36:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d3a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d42:	57                   	push   edi
c0012d43:	56                   	push   esi
c0012d44:	53                   	push   ebx
c0012d45:	68 04 0f 02 c0       	push   0xc0020f04
c0012d4a:	e8 8f fe ff ff       	call   c0012bde <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d4f:	83 c4 10             	add    esp,0x10
c0012d52:	84 c0                	test   al,al
c0012d54:	75 10                	jne    c0012d66 <Reg::getLine(char*, char*, char*)+0x33>
c0012d56:	57                   	push   edi
c0012d57:	56                   	push   esi
c0012d58:	53                   	push   ebx
c0012d59:	68 29 0f 02 c0       	push   0xc0020f29
c0012d5e:	e8 7b fe ff ff       	call   c0012bde <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d63:	83 c4 10             	add    esp,0x10
c0012d66:	5b                   	pop    ebx
c0012d67:	5e                   	pop    esi
c0012d68:	5f                   	pop    edi
c0012d69:	c3                   	ret    

c0012d6a <Reg::readInt(char*, char*, int*)>:
c0012d6a:	55                   	push   ebp
c0012d6b:	57                   	push   edi
c0012d6c:	56                   	push   esi
c0012d6d:	53                   	push   ebx
c0012d6e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d74:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d78:	55                   	push   ebp
c0012d79:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d80:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d87:	e8 a7 ff ff ff       	call   c0012d33 <Reg::getLine(char*, char*, char*)>
c0012d8c:	83 c4 10             	add    esp,0x10
c0012d8f:	84 c0                	test   al,al
c0012d91:	0f 84 b6 00 00 00    	je     c0012e4d <Reg::readInt(char*, char*, int*)+0xe3>
c0012d97:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d9c:	83 fa 2b             	cmp    edx,0x2b
c0012d9f:	74 0c                	je     c0012dad <Reg::readInt(char*, char*, int*)+0x43>
c0012da1:	83 fa 2d             	cmp    edx,0x2d
c0012da4:	75 0e                	jne    c0012db4 <Reg::readInt(char*, char*, int*)+0x4a>
c0012da6:	ba 01 00 00 00       	mov    edx,0x1
c0012dab:	eb 0b                	jmp    c0012db8 <Reg::readInt(char*, char*, int*)+0x4e>
c0012dad:	ba 01 00 00 00       	mov    edx,0x1
c0012db2:	eb 02                	jmp    c0012db6 <Reg::readInt(char*, char*, int*)+0x4c>
c0012db4:	31 d2                	xor    edx,edx
c0012db6:	31 c0                	xor    eax,eax
c0012db8:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012dbd:	be 0a 00 00 00       	mov    esi,0xa
c0012dc2:	75 21                	jne    c0012de5 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dc4:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012dc9:	83 f9 78             	cmp    ecx,0x78
c0012dcc:	75 0a                	jne    c0012dd8 <Reg::readInt(char*, char*, int*)+0x6e>
c0012dce:	83 c2 02             	add    edx,0x2
c0012dd1:	be 10 00 00 00       	mov    esi,0x10
c0012dd6:	eb 0d                	jmp    c0012de5 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dd8:	83 f9 62             	cmp    ecx,0x62
c0012ddb:	75 08                	jne    c0012de5 <Reg::readInt(char*, char*, int*)+0x7b>
c0012ddd:	83 c2 02             	add    edx,0x2
c0012de0:	be 02 00 00 00       	mov    esi,0x2
c0012de5:	01 d5                	add    ebp,edx
c0012de7:	31 d2                	xor    edx,edx
c0012de9:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012ded:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012df1:	85 c9                	test   ecx,ecx
c0012df3:	0f 94 c3             	sete   bl
c0012df6:	83 f9 0d             	cmp    ecx,0xd
c0012df9:	89 df                	mov    edi,ebx
c0012dfb:	0f 94 c3             	sete   bl
c0012dfe:	09 df                	or     edi,ebx
c0012e00:	89 fb                	mov    ebx,edi
c0012e02:	83 e7 01             	and    edi,0x1
c0012e05:	75 35                	jne    c0012e3c <Reg::readInt(char*, char*, int*)+0xd2>
c0012e07:	0f af d6             	imul   edx,esi
c0012e0a:	83 fe 10             	cmp    esi,0x10
c0012e0d:	75 26                	jne    c0012e35 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e0f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012e13:	83 ef 41             	sub    edi,0x41
c0012e16:	89 fb                	mov    ebx,edi
c0012e18:	80 fb 05             	cmp    bl,0x5
c0012e1b:	77 06                	ja     c0012e23 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e1d:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012e21:	eb 16                	jmp    c0012e39 <Reg::readInt(char*, char*, int*)+0xcf>
c0012e23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e27:	83 eb 61             	sub    ebx,0x61
c0012e2a:	80 fb 05             	cmp    bl,0x5
c0012e2d:	77 06                	ja     c0012e35 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e2f:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012e33:	eb 04                	jmp    c0012e39 <Reg::readInt(char*, char*, int*)+0xcf>
c0012e35:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012e39:	45                   	inc    ebp
c0012e3a:	eb ad                	jmp    c0012de9 <Reg::readInt(char*, char*, int*)+0x7f>
c0012e3c:	84 c0                	test   al,al
c0012e3e:	74 02                	je     c0012e42 <Reg::readInt(char*, char*, int*)+0xd8>
c0012e40:	f7 da                	neg    edx
c0012e42:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e49:	89 10                	mov    DWORD PTR [eax],edx
c0012e4b:	88 d8                	mov    al,bl
c0012e4d:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e53:	5b                   	pop    ebx
c0012e54:	5e                   	pop    esi
c0012e55:	5f                   	pop    edi
c0012e56:	5d                   	pop    ebp
c0012e57:	c3                   	ret    

c0012e58 <Reg::readString(char*, char*, char*, int)>:
c0012e58:	57                   	push   edi
c0012e59:	56                   	push   esi
c0012e5a:	53                   	push   ebx
c0012e5b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e61:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e65:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e6c:	57                   	push   edi
c0012e6d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e74:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e7b:	e8 b3 fe ff ff       	call   c0012d33 <Reg::getLine(char*, char*, char*)>
c0012e80:	83 c4 10             	add    esp,0x10
c0012e83:	84 c0                	test   al,al
c0012e85:	89 c6                	mov    esi,eax
c0012e87:	74 44                	je     c0012ecd <Reg::readString(char*, char*, char*, int)+0x75>
c0012e89:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e90:	31 c0                	xor    eax,eax
c0012e92:	4a                   	dec    edx
c0012e93:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e96:	84 c9                	test   cl,cl
c0012e98:	74 0f                	je     c0012ea9 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e9a:	39 c2                	cmp    edx,eax
c0012e9c:	7e 0b                	jle    c0012ea9 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e9e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012ea1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012ea6:	40                   	inc    eax
c0012ea7:	eb ea                	jmp    c0012e93 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012ea9:	83 ec 0c             	sub    esp,0xc
c0012eac:	53                   	push   ebx
c0012ead:	e8 ce d6 fe ff       	call   c0000580 <strlen>
c0012eb2:	83 c4 10             	add    esp,0x10
c0012eb5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012eba:	75 11                	jne    c0012ecd <Reg::readString(char*, char*, char*, int)+0x75>
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	53                   	push   ebx
c0012ec0:	e8 bb d6 fe ff       	call   c0000580 <strlen>
c0012ec5:	83 c4 10             	add    esp,0x10
c0012ec8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ecd:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012ed3:	89 f0                	mov    eax,esi
c0012ed5:	5b                   	pop    ebx
c0012ed6:	5e                   	pop    esi
c0012ed7:	5f                   	pop    edi
c0012ed8:	c3                   	ret    

c0012ed9 <Reg::readBool(char*, char*, bool*)>:
c0012ed9:	83 ec 20             	sub    esp,0x20
c0012edc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ee0:	50                   	push   eax
c0012ee1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee9:	e8 7c fe ff ff       	call   c0012d6a <Reg::readInt(char*, char*, int*)>
c0012eee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012ef2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ef7:	0f 95 02             	setne  BYTE PTR [edx]
c0012efa:	83 c4 2c             	add    esp,0x2c
c0012efd:	c3                   	ret    

c0012efe <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012efe:	53                   	push   ebx
c0012eff:	83 ec 1c             	sub    esp,0x1c
c0012f02:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012f06:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012f0a:	50                   	push   eax
c0012f0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f13:	e8 c1 ff ff ff       	call   c0012ed9 <Reg::readBool(char*, char*, bool*)>
c0012f18:	83 c4 10             	add    esp,0x10
c0012f1b:	84 c0                	test   al,al
c0012f1d:	74 04                	je     c0012f23 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012f1f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012f23:	83 c4 18             	add    esp,0x18
c0012f26:	88 d8                	mov    al,bl
c0012f28:	5b                   	pop    ebx
c0012f29:	c3                   	ret    

c0012f2a <Reg::readIntWithDefault(char*, char*, int)>:
c0012f2a:	53                   	push   ebx
c0012f2b:	83 ec 1c             	sub    esp,0x1c
c0012f2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f32:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f36:	50                   	push   eax
c0012f37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f3f:	e8 26 fe ff ff       	call   c0012d6a <Reg::readInt(char*, char*, int*)>
c0012f44:	83 c4 10             	add    esp,0x10
c0012f47:	84 c0                	test   al,al
c0012f49:	74 04                	je     c0012f4f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f4f:	83 c4 18             	add    esp,0x18
c0012f52:	89 d8                	mov    eax,ebx
c0012f54:	5b                   	pop    ebx
c0012f55:	c3                   	ret    

c0012f56 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f56:	57                   	push   edi
c0012f57:	56                   	push   esi
c0012f58:	53                   	push   ebx
c0012f59:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f5d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f65:	56                   	push   esi
c0012f66:	57                   	push   edi
c0012f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6f:	e8 e4 fe ff ff       	call   c0012e58 <Reg::readString(char*, char*, char*, int)>
c0012f74:	83 c4 10             	add    esp,0x10
c0012f77:	84 c0                	test   al,al
c0012f79:	75 16                	jne    c0012f91 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f7b:	50                   	push   eax
c0012f7c:	56                   	push   esi
c0012f7d:	6a 00                	push   0x0
c0012f7f:	57                   	push   edi
c0012f80:	e8 6b d5 fe ff       	call   c00004f0 <memset>
c0012f85:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f88:	89 de                	mov    esi,ebx
c0012f8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f8c:	83 c4 10             	add    esp,0x10
c0012f8f:	89 df                	mov    edi,ebx
c0012f91:	5b                   	pop    ebx
c0012f92:	89 f8                	mov    eax,edi
c0012f94:	5e                   	pop    esi
c0012f95:	5f                   	pop    edi
c0012f96:	c3                   	ret    

c0012f97 <SysEject(regs*)>:
c0012f97:	83 ec 0c             	sub    esp,0xc
c0012f9a:	83 ca ff             	or     edx,0xffffffff
c0012f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012fa4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012fa9:	83 e9 41             	sub    ecx,0x41
c0012fac:	83 f9 19             	cmp    ecx,0x19
c0012faf:	77 18                	ja     c0012fc9 <SysEject(regs*)+0x32>
c0012fb1:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012fb8:	85 c9                	test   ecx,ecx
c0012fba:	74 0d                	je     c0012fc9 <SysEject(regs*)+0x32>
c0012fbc:	83 ec 0c             	sub    esp,0xc
c0012fbf:	51                   	push   ecx
c0012fc0:	e8 c7 a1 ff ff       	call   c000d18c <LogicalDisk::eject()>
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	99                   	cdq    
c0012fc9:	83 c4 0c             	add    esp,0xc
c0012fcc:	c3                   	ret    

c0012fcd <SysExit(regs*)>:
c0012fcd:	83 ec 18             	sub    esp,0x18
c0012fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fd4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fd7:	e8 14 2a 00 00       	call   c00159f0 <terminateTask(int)>
c0012fdc:	83 c8 ff             	or     eax,0xffffffff
c0012fdf:	83 c4 1c             	add    esp,0x1c
c0012fe2:	89 c2                	mov    edx,eax
c0012fe4:	c3                   	ret    

c0012fe5 <SysGetCwd(regs*)>:
c0012fe5:	83 ec 10             	sub    esp,0x10
c0012fe8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fec:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012ff2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ff7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012ffa:	e8 23 7d ff ff       	call   c000ad22 <Fs::getcwd(Process*, char*, int)>
c0012fff:	83 c4 1c             	add    esp,0x1c
c0013002:	99                   	cdq    
c0013003:	c3                   	ret    

c0013004 <SysGetPID(regs*)>:
c0013004:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013009:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001300c:	8b 00                	mov    eax,DWORD PTR [eax]
c001300e:	99                   	cdq    
c001300f:	c3                   	ret    

c0013010 <SysGetRAMData(regs*)>:
c0013010:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c001301a:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0013020:	99                   	cdq    
c0013021:	f7 f9                	idiv   ecx
c0013023:	c1 e0 18             	shl    eax,0x18
c0013026:	09 c8                	or     eax,ecx
c0013028:	99                   	cdq    
c0013029:	c3                   	ret    

c001302a <SysGetVGAPtr(regs*)>:
c001302a:	55                   	push   ebp
c001302b:	57                   	push   edi
c001302c:	56                   	push   esi
c001302d:	53                   	push   ebx
c001302e:	83 ec 18             	sub    esp,0x18
c0013031:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013035:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013038:	e8 7f 24 00 00       	call   c00154bc <Thr::processFromPID(int)>
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	89 c1                	mov    ecx,eax
c0013042:	b8 01 00 00 00       	mov    eax,0x1
c0013047:	85 c9                	test   ecx,ecx
c0013049:	74 57                	je     c00130a2 <SysGetVGAPtr(regs*)+0x78>
c001304b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001304f:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013055:	74 0c                	je     c0013063 <SysGetVGAPtr(regs*)+0x39>
c0013057:	83 ec 0c             	sub    esp,0xc
c001305a:	55                   	push   ebp
c001305b:	e8 f9 56 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013066:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001306b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001306e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013070:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013073:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013076:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001307c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001307f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013082:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013088:	50                   	push   eax
c0013089:	50                   	push   eax
c001308a:	68 44 0f 02 c0       	push   0xc0020f44
c001308f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013092:	05 a8 0f 00 00       	add    eax,0xfa8
c0013097:	50                   	push   eax
c0013098:	e8 b3 d5 fe ff       	call   c0000650 <strcpy>
c001309d:	83 c4 10             	add    esp,0x10
c00130a0:	31 c0                	xor    eax,eax
c00130a2:	83 c4 0c             	add    esp,0xc
c00130a5:	31 d2                	xor    edx,edx
c00130a7:	5b                   	pop    ebx
c00130a8:	5e                   	pop    esi
c00130a9:	5f                   	pop    edi
c00130aa:	5d                   	pop    ebp
c00130ab:	c3                   	ret    

c00130ac <SysKill(regs*)>:
c00130ac:	53                   	push   ebx
c00130ad:	83 ec 08             	sub    esp,0x8
c00130b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130b4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00130b8:	75 16                	jne    c00130d0 <SysKill(regs*)+0x24>
c00130ba:	83 ec 0c             	sub    esp,0xc
c00130bd:	68 4e 0f 02 c0       	push   0xc0020f4e
c00130c2:	e8 ae d7 ff ff       	call   c0010875 <KePanic(char const*)>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	e9 89 00 00 00       	jmp    c0013158 <SysKill(regs*)+0xac>
c00130cf:	90                   	nop
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	68 84 81 02 c0       	push   0xc0028184
c00130d8:	e8 4f bb 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130dd:	8d 76 00             	lea    esi,[esi+0x0]
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	85 c0                	test   eax,eax
c00130e5:	74 19                	je     c0013100 <SysKill(regs*)+0x54>
c00130e7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130ea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130ed:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130ef:	74 33                	je     c0013124 <SysKill(regs*)+0x78>
c00130f1:	52                   	push   edx
c00130f2:	52                   	push   edx
c00130f3:	50                   	push   eax
c00130f4:	68 84 81 02 c0       	push   0xc0028184
c00130f9:	e8 4e be 00 00       	call   c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130fe:	eb e0                	jmp    c00130e0 <SysKill(regs*)+0x34>
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	68 78 81 02 c0       	push   0xc0028178
c0013108:	e8 1f bb 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001310d:	8d 76 00             	lea    esi,[esi+0x0]
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	85 c0                	test   eax,eax
c0013115:	74 41                	je     c0013158 <SysKill(regs*)+0xac>
c0013117:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001311a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001311d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001311f:	75 27                	jne    c0013148 <SysKill(regs*)+0x9c>
c0013121:	8d 76 00             	lea    esi,[esi+0x0]
c0013124:	51                   	push   ecx
c0013125:	51                   	push   ecx
c0013126:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001312e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013131:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013137:	e8 d3 db ff ff       	call   c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	31 c0                	xor    eax,eax
c0013141:	31 d2                	xor    edx,edx
c0013143:	eb 1b                	jmp    c0013160 <SysKill(regs*)+0xb4>
c0013145:	8d 76 00             	lea    esi,[esi+0x0]
c0013148:	52                   	push   edx
c0013149:	52                   	push   edx
c001314a:	50                   	push   eax
c001314b:	68 78 81 02 c0       	push   0xc0028178
c0013150:	e8 f7 bd 00 00       	call   c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013155:	eb b9                	jmp    c0013110 <SysKill(regs*)+0x64>
c0013157:	90                   	nop
c0013158:	83 c8 ff             	or     eax,0xffffffff
c001315b:	89 c2                	mov    edx,eax
c001315d:	8d 76 00             	lea    esi,[esi+0x0]
c0013160:	83 c4 08             	add    esp,0x8
c0013163:	5b                   	pop    ebx
c0013164:	c3                   	ret    

c0013165 <SysLoadDLL(regs*)>:
c0013165:	56                   	push   esi
c0013166:	31 d2                	xor    edx,edx
c0013168:	53                   	push   ebx
c0013169:	b8 01 00 00 00       	mov    eax,0x1
c001316e:	51                   	push   ecx
c001316f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013173:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013177:	0f 84 8c 00 00 00    	je     c0013209 <SysLoadDLL(regs*)+0xa4>
c001317d:	83 ec 0c             	sub    esp,0xc
c0013180:	68 14 01 00 00       	push   0x114
c0013185:	e8 41 49 ff ff       	call   c0007acb <malloc>
c001318a:	83 c4 0c             	add    esp,0xc
c001318d:	89 c3                	mov    ebx,eax
c001318f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013194:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013197:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001319a:	53                   	push   ebx
c001319b:	e8 b2 7d ff ff       	call   c000af52 <File::File(char const*, Process*)>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	31 d2                	xor    edx,edx
c00131a5:	85 db                	test   ebx,ebx
c00131a7:	b8 02 00 00 00       	mov    eax,0x2
c00131ac:	74 5b                	je     c0013209 <SysLoadDLL(regs*)+0xa4>
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	53                   	push   ebx
c00131b2:	e8 c5 80 ff ff       	call   c000b27c <File::exists()>
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	84 c0                	test   al,al
c00131bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131be:	75 11                	jne    c00131d1 <SysLoadDLL(regs*)+0x6c>
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	53                   	push   ebx
c00131c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131c7:	83 c4 10             	add    esp,0x10
c00131ca:	b8 03 00 00 00       	mov    eax,0x3
c00131cf:	eb 36                	jmp    c0013207 <SysLoadDLL(regs*)+0xa2>
c00131d1:	83 ec 0c             	sub    esp,0xc
c00131d4:	53                   	push   ebx
c00131d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131d8:	58                   	pop    eax
c00131d9:	5a                   	pop    edx
c00131da:	6a 00                	push   0x0
c00131dc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131df:	e8 20 14 00 00       	call   c0014604 <Thr::loadDLL(char const*, bool)>
c00131e4:	83 c4 10             	add    esp,0x10
c00131e7:	31 d2                	xor    edx,edx
c00131e9:	89 c1                	mov    ecx,eax
c00131eb:	b8 04 00 00 00       	mov    eax,0x4
c00131f0:	85 c9                	test   ecx,ecx
c00131f2:	74 15                	je     c0013209 <SysLoadDLL(regs*)+0xa4>
c00131f4:	53                   	push   ebx
c00131f5:	53                   	push   ebx
c00131f6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131fc:	51                   	push   ecx
c00131fd:	e8 42 16 00 00       	call   c0014844 <Thr::executeDLL(unsigned long, void*)>
c0013202:	83 c4 10             	add    esp,0x10
c0013205:	31 c0                	xor    eax,eax
c0013207:	31 d2                	xor    edx,edx
c0013209:	59                   	pop    ecx
c001320a:	5b                   	pop    ebx
c001320b:	5e                   	pop    esi
c001320c:	c3                   	ret    

c001320d <SysRead(regs*)>:
c001320d:	57                   	push   edi
c001320e:	56                   	push   esi
c001320f:	53                   	push   ebx
c0013210:	83 ec 10             	sub    esp,0x10
c0013213:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013217:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001321a:	83 f8 02             	cmp    eax,0x2
c001321d:	77 10                	ja     c001322f <SysRead(regs*)+0x22>
c001321f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013224:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013227:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001322d:	eb 0e                	jmp    c001323d <SysRead(regs*)+0x30>
c001322f:	83 ec 0c             	sub    esp,0xc
c0013232:	50                   	push   eax
c0013233:	e8 73 62 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0013238:	83 c4 10             	add    esp,0x10
c001323b:	89 c1                	mov    ecx,eax
c001323d:	83 c8 ff             	or     eax,0xffffffff
c0013240:	85 c9                	test   ecx,ecx
c0013242:	89 c2                	mov    edx,eax
c0013244:	74 28                	je     c001326e <SysRead(regs*)+0x61>
c0013246:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001324e:	83 ec 0c             	sub    esp,0xc
c0013251:	31 ff                	xor    edi,edi
c0013253:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013257:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013259:	52                   	push   edx
c001325a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001325d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013260:	57                   	push   edi
c0013261:	56                   	push   esi
c0013262:	51                   	push   ecx
c0013263:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013266:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001326a:	83 c4 20             	add    esp,0x20
c001326d:	99                   	cdq    
c001326e:	83 c4 10             	add    esp,0x10
c0013271:	5b                   	pop    ebx
c0013272:	5e                   	pop    esi
c0013273:	5f                   	pop    edi
c0013274:	c3                   	ret    

c0013275 <SysRegisterSignal(regs*)>:
c0013275:	83 ec 18             	sub    esp,0x18
c0013278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001327c:	6a 00                	push   0x0
c001327e:	6a 00                	push   0x0
c0013280:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013283:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001328b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001328e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013294:	e8 40 da ff ff       	call   c0010cd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013299:	83 c4 2c             	add    esp,0x2c
c001329c:	99                   	cdq    
c001329d:	c3                   	ret    

c001329e <SysRegistryGetTypeFromPath(regs*)>:
c001329e:	57                   	push   edi
c001329f:	56                   	push   esi
c00132a0:	53                   	push   ebx
c00132a1:	81 ec 38 01 00 00    	sub    esp,0x138
c00132a7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00132ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132b1:	68 6f 0f 02 c0       	push   0xc0020f6f
c00132b6:	e8 ef 76 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00132bb:	5a                   	pop    edx
c00132bc:	59                   	pop    ecx
c00132bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132c3:	e8 34 f6 ff ff       	call   c00128fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132c8:	5f                   	pop    edi
c00132c9:	5a                   	pop    edx
c00132ca:	89 c6                	mov    esi,eax
c00132cc:	50                   	push   eax
c00132cd:	68 8f 0f 02 c0       	push   0xc0020f8f
c00132d2:	e8 d3 76 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00132d7:	83 c4 10             	add    esp,0x10
c00132da:	85 f6                	test   esi,esi
c00132dc:	74 28                	je     c0013306 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00132de:	50                   	push   eax
c00132df:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132e3:	57                   	push   edi
c00132e4:	56                   	push   esi
c00132e5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132e8:	e8 f4 f1 ff ff       	call   c00124e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132ed:	83 c4 0c             	add    esp,0xc
c00132f0:	57                   	push   edi
c00132f1:	50                   	push   eax
c00132f2:	89 c3                	mov    ebx,eax
c00132f4:	68 97 0f 02 c0       	push   0xc0020f97
c00132f9:	e8 ac 76 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00132fe:	89 d8                	mov    eax,ebx
c0013300:	83 c4 10             	add    esp,0x10
c0013303:	99                   	cdq    
c0013304:	eb 05                	jmp    c001330b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013306:	83 c8 ff             	or     eax,0xffffffff
c0013309:	89 c2                	mov    edx,eax
c001330b:	81 c4 30 01 00 00    	add    esp,0x130
c0013311:	5b                   	pop    ebx
c0013312:	5e                   	pop    esi
c0013313:	5f                   	pop    edi
c0013314:	c3                   	ret    

c0013315 <SysRegistryReadExtent(regs*)>:
c0013315:	83 ec 1c             	sub    esp,0x1c
c0013318:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001331c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001331f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013322:	85 c0                	test   eax,eax
c0013324:	79 1f                	jns    c0013345 <SysRegistryReadExtent(regs*)+0x30>
c0013326:	52                   	push   edx
c0013327:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001332c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013330:	52                   	push   edx
c0013331:	50                   	push   eax
c0013332:	51                   	push   ecx
c0013333:	e8 9b f0 ff ff       	call   c00123d3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001333c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013340:	83 c4 10             	add    esp,0x10
c0013343:	eb 14                	jmp    c0013359 <SysRegistryReadExtent(regs*)+0x44>
c0013345:	83 ec 04             	sub    esp,0x4
c0013348:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001334b:	50                   	push   eax
c001334c:	51                   	push   ecx
c001334d:	e8 1f eb ff ff       	call   c0011e71 <CmGetString(Reghive_Tag*, int, char*)>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	31 c0                	xor    eax,eax
c0013357:	31 d2                	xor    edx,edx
c0013359:	83 c4 1c             	add    esp,0x1c
c001335c:	c3                   	ret    

c001335d <SysRegistryPathToExtentLookup(regs*)>:
c001335d:	53                   	push   ebx
c001335e:	83 ec 10             	sub    esp,0x10
c0013361:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013365:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013368:	68 ad 0f 02 c0       	push   0xc0020fad
c001336d:	e8 38 76 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0013372:	58                   	pop    eax
c0013373:	5a                   	pop    edx
c0013374:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013377:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001337a:	e8 7d f5 ff ff       	call   c00128fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001337f:	83 c4 18             	add    esp,0x18
c0013382:	5b                   	pop    ebx
c0013383:	99                   	cdq    
c0013384:	c3                   	ret    

c0013385 <SysRegistryEnterDirectory(regs*)>:
c0013385:	53                   	push   ebx
c0013386:	83 ec 10             	sub    esp,0x10
c0013389:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001338d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013390:	68 d0 0f 02 c0       	push   0xc0020fd0
c0013395:	e8 10 76 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001339a:	58                   	pop    eax
c001339b:	5a                   	pop    edx
c001339c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001339f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133a2:	e8 41 eb ff ff       	call   c0011ee8 <CmEnterDirectory(Reghive_Tag*, int)>
c00133a7:	83 c4 18             	add    esp,0x18
c00133aa:	5b                   	pop    ebx
c00133ab:	99                   	cdq    
c00133ac:	c3                   	ret    

c00133ad <SysRegistryGetNext(regs*)>:
c00133ad:	53                   	push   ebx
c00133ae:	83 ec 10             	sub    esp,0x10
c00133b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133b5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133b8:	68 ee 0f 02 c0       	push   0xc0020fee
c00133bd:	e8 e8 75 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00133c2:	58                   	pop    eax
c00133c3:	5a                   	pop    edx
c00133c4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133ca:	e8 58 eb ff ff       	call   c0011f27 <CmGetNext(Reghive_Tag*, int)>
c00133cf:	83 c4 18             	add    esp,0x18
c00133d2:	5b                   	pop    ebx
c00133d3:	99                   	cdq    
c00133d4:	c3                   	ret    

c00133d5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00133d5:	57                   	push   edi
c00133d6:	56                   	push   esi
c00133d7:	53                   	push   ebx
c00133d8:	81 ec 34 01 00 00    	sub    esp,0x134
c00133de:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133e5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133e9:	57                   	push   edi
c00133ea:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133f0:	e8 ec f0 ff ff       	call   c00124e1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133f5:	89 c3                	mov    ebx,eax
c00133f7:	58                   	pop    eax
c00133f8:	5a                   	pop    edx
c00133f9:	57                   	push   edi
c00133fa:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133fd:	e8 4e d2 fe ff       	call   c0000650 <strcpy>
c0013402:	81 c4 40 01 00 00    	add    esp,0x140
c0013408:	89 d8                	mov    eax,ebx
c001340a:	5b                   	pop    ebx
c001340b:	99                   	cdq    
c001340c:	5e                   	pop    esi
c001340d:	5f                   	pop    edi
c001340e:	c3                   	ret    

c001340f <SysRegistryOpen(regs*)>:
c001340f:	83 ec 18             	sub    esp,0x18
c0013412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013416:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013419:	e8 e3 e8 ff ff       	call   c0011d01 <CmOpen(char const*)>
c001341e:	83 c4 1c             	add    esp,0x1c
c0013421:	99                   	cdq    
c0013422:	c3                   	ret    

c0013423 <SysRegistryClose(regs*)>:
c0013423:	83 ec 18             	sub    esp,0x18
c0013426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001342a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001342d:	e8 ed e9 ff ff       	call   c0011e1f <CmClose(Reghive_Tag*)>
c0013432:	31 c0                	xor    eax,eax
c0013434:	31 d2                	xor    edx,edx
c0013436:	83 c4 1c             	add    esp,0x1c
c0013439:	c3                   	ret    

c001343a <SysSbrk(regs*)>:
c001343a:	56                   	push   esi
c001343b:	53                   	push   ebx
c001343c:	50                   	push   eax
c001343d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013442:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013446:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013449:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001344c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013452:	85 db                	test   ebx,ebx
c0013454:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013457:	74 02                	je     c001345b <SysSbrk(regs*)+0x21>
c0013459:	79 06                	jns    c0013461 <SysSbrk(regs*)+0x27>
c001345b:	89 f0                	mov    eax,esi
c001345d:	31 d2                	xor    edx,edx
c001345f:	eb 2a                	jmp    c001348b <SysSbrk(regs*)+0x51>
c0013461:	83 c8 ff             	or     eax,0xffffffff
c0013464:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001346a:	89 c2                	mov    edx,eax
c001346c:	77 1d                	ja     c001348b <SysSbrk(regs*)+0x51>
c001346e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013474:	50                   	push   eax
c0013475:	68 07 0c 00 00       	push   0xc07
c001347a:	c1 ea 0c             	shr    edx,0xc
c001347d:	52                   	push   edx
c001347e:	51                   	push   ecx
c001347f:	e8 6c 69 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c0013484:	89 f0                	mov    eax,esi
c0013486:	31 d2                	xor    edx,edx
c0013488:	83 c4 10             	add    esp,0x10
c001348b:	59                   	pop    ecx
c001348c:	5b                   	pop    ebx
c001348d:	5e                   	pop    esi
c001348e:	c3                   	ret    

c001348f <SysSetCwd(regs*)>:
c001348f:	83 ec 14             	sub    esp,0x14
c0013492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013496:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013499:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001349e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134a1:	e8 75 7e ff ff       	call   c000b31b <Fs::setcwd(Process*, char*)>
c00134a6:	83 c4 1c             	add    esp,0x1c
c00134a9:	99                   	cdq    
c00134aa:	c3                   	ret    

c00134ab <SysSetTime(regs*)>:
c00134ab:	55                   	push   ebp
c00134ac:	31 c9                	xor    ecx,ecx
c00134ae:	57                   	push   edi
c00134af:	bd 0c 00 00 00       	mov    ebp,0xc
c00134b4:	56                   	push   esi
c00134b5:	53                   	push   ebx
c00134b6:	31 db                	xor    ebx,ebx
c00134b8:	83 ec 10             	sub    esp,0x10
c00134bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134bf:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134c2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00134c5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00134c8:	89 c2                	mov    edx,eax
c00134ca:	c1 e8 05             	shr    eax,0x5
c00134cd:	83 e2 1f             	and    edx,0x1f
c00134d0:	42                   	inc    edx
c00134d1:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00134d7:	c1 e7 10             	shl    edi,0x10
c00134da:	88 d1                	mov    cl,dl
c00134dc:	31 d2                	xor    edx,edx
c00134de:	f7 f5                	div    ebp
c00134e0:	89 dd                	mov    ebp,ebx
c00134e2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134e8:	88 d5                	mov    ch,dl
c00134ea:	31 d2                	xor    edx,edx
c00134ec:	0f b7 c1             	movzx  eax,cx
c00134ef:	09 f8                	or     eax,edi
c00134f1:	bf 3c 00 00 00       	mov    edi,0x3c
c00134f6:	89 c1                	mov    ecx,eax
c00134f8:	89 f0                	mov    eax,esi
c00134fa:	f7 f7                	div    edi
c00134fc:	c1 e2 10             	shl    edx,0x10
c00134ff:	09 d5                	or     ebp,edx
c0013501:	31 d2                	xor    edx,edx
c0013503:	f7 f7                	div    edi
c0013505:	89 eb                	mov    ebx,ebp
c0013507:	bf 10 0e 00 00       	mov    edi,0xe10
c001350c:	89 f0                	mov    eax,esi
c001350e:	88 d7                	mov    bh,dl
c0013510:	31 d2                	xor    edx,edx
c0013512:	f7 f7                	div    edi
c0013514:	bf 18 00 00 00       	mov    edi,0x18
c0013519:	31 d2                	xor    edx,edx
c001351b:	f7 f7                	div    edi
c001351d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013522:	88 d3                	mov    bl,dl
c0013524:	53                   	push   ebx
c0013525:	51                   	push   ecx
c0013526:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001352c:	e8 ef 85 ff ff       	call   c000bb20 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013531:	83 c4 1c             	add    esp,0x1c
c0013534:	31 d2                	xor    edx,edx
c0013536:	5b                   	pop    ebx
c0013537:	5e                   	pop    esi
c0013538:	83 f0 01             	xor    eax,0x1
c001353b:	5f                   	pop    edi
c001353c:	0f b6 c0             	movzx  eax,al
c001353f:	5d                   	pop    ebp
c0013540:	c3                   	ret    

c0013541 <SysTimezone(regs*)>:
c0013541:	53                   	push   ebx
c0013542:	83 ec 08             	sub    esp,0x8
c0013545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013549:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001354d:	75 17                	jne    c0013566 <SysTimezone(regs*)+0x25>
c001354f:	83 ec 0c             	sub    esp,0xc
c0013552:	68 05 10 02 c0       	push   0xc0021005
c0013557:	e8 4e 74 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001355c:	83 c8 ff             	or     eax,0xffffffff
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	89 c2                	mov    edx,eax
c0013564:	eb 20                	jmp    c0013586 <SysTimezone(regs*)+0x45>
c0013566:	83 ec 0c             	sub    esp,0xc
c0013569:	68 1a 10 02 c0       	push   0xc002101a
c001356e:	e8 37 74 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0013573:	58                   	pop    eax
c0013574:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013577:	e8 08 83 ff ff       	call   c000b884 <User::loadClockSettings(int)>
c001357c:	83 c4 10             	add    esp,0x10
c001357f:	b8 01 00 00 00       	mov    eax,0x1
c0013584:	31 d2                	xor    edx,edx
c0013586:	83 c4 08             	add    esp,0x8
c0013589:	5b                   	pop    ebx
c001358a:	c3                   	ret    

c001358b <SysWrite(regs*)>:
c001358b:	57                   	push   edi
c001358c:	56                   	push   esi
c001358d:	53                   	push   ebx
c001358e:	83 ec 10             	sub    esp,0x10
c0013591:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013595:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013598:	83 f8 02             	cmp    eax,0x2
c001359b:	77 10                	ja     c00135ad <SysWrite(regs*)+0x22>
c001359d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135a5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00135ab:	eb 0e                	jmp    c00135bb <SysWrite(regs*)+0x30>
c00135ad:	83 ec 0c             	sub    esp,0xc
c00135b0:	50                   	push   eax
c00135b1:	e8 f5 5e ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	89 c1                	mov    ecx,eax
c00135bb:	83 c8 ff             	or     eax,0xffffffff
c00135be:	85 c9                	test   ecx,ecx
c00135c0:	89 c2                	mov    edx,eax
c00135c2:	74 28                	je     c00135ec <SysWrite(regs*)+0x61>
c00135c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135cc:	83 ec 0c             	sub    esp,0xc
c00135cf:	31 ff                	xor    edi,edi
c00135d1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135d7:	52                   	push   edx
c00135d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135db:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135de:	57                   	push   edi
c00135df:	56                   	push   esi
c00135e0:	51                   	push   ecx
c00135e1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135e8:	83 c4 20             	add    esp,0x20
c00135eb:	99                   	cdq    
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	5b                   	pop    ebx
c00135f0:	5e                   	pop    esi
c00135f1:	5f                   	pop    edi
c00135f2:	c3                   	ret    

c00135f3 <SysWsbe(regs*)>:
c00135f3:	57                   	push   edi
c00135f4:	b9 0b 00 00 00       	mov    ecx,0xb
c00135f9:	56                   	push   esi
c00135fa:	be 59 10 02 c0       	mov    esi,0xc0021059
c00135ff:	53                   	push   ebx
c0013600:	83 ec 30             	sub    esp,0x30
c0013603:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013607:	fc                   	cld    
c0013608:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001360a:	83 ec 0c             	sub    esp,0xc
c001360d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013616:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013619:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001361f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013621:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013624:	57                   	push   edi
c0013625:	e8 56 cf fe ff       	call   c0000580 <strlen>
c001362a:	5a                   	pop    edx
c001362b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001362f:	52                   	push   edx
c0013630:	31 d2                	xor    edx,edx
c0013632:	57                   	push   edi
c0013633:	52                   	push   edx
c0013634:	50                   	push   eax
c0013635:	56                   	push   esi
c0013636:	ff d3                	call   ebx
c0013638:	83 c4 14             	add    esp,0x14
c001363b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001363f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013642:	e8 a9 23 00 00       	call   c00159f0 <terminateTask(int)>
c0013647:	83 c4 40             	add    esp,0x40
c001364a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001364f:	5b                   	pop    ebx
c0013650:	31 d2                	xor    edx,edx
c0013652:	5e                   	pop    esi
c0013653:	5f                   	pop    edi
c0013654:	c3                   	ret    

c0013655 <SysYield(regs*)>:
c0013655:	83 ec 0c             	sub    esp,0xc
c0013658:	fa                   	cli    
c0013659:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001365f:	e8 0c 1a 00 00       	call   c0015070 <schedule()>
c0013664:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013669:	48                   	dec    eax
c001366a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001366f:	75 01                	jne    c0013672 <SysYield(regs*)+0x1d>
c0013671:	fb                   	sti    
c0013672:	31 c0                	xor    eax,eax
c0013674:	31 d2                	xor    edx,edx
c0013676:	83 c4 0c             	add    esp,0xc
c0013679:	c3                   	ret    

c001367a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001367a:	55                   	push   ebp
c001367b:	57                   	push   edi
c001367c:	56                   	push   esi
c001367d:	53                   	push   ebx
c001367e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013684:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001368f:	74 3b                	je     c00136cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013691:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013699:	74 31                	je     c00136cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001369b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00136a3:	75 27                	jne    c00136cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00136a5:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00136ac:	05 00 10 00 00       	add    eax,0x1000
c00136b1:	89 c2                	mov    edx,eax
c00136b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00136b8:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00136bf:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00136c5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00136cc:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00136d3:	83 ec 0c             	sub    esp,0xc
c00136d6:	6a 01                	push   0x1
c00136d8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136de:	e8 22 5f ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c00136e3:	83 c4 10             	add    esp,0x10
c00136e6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136ec:	89 c3                	mov    ebx,eax
c00136ee:	0f 86 26 01 00 00    	jbe    c001381a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00136f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136fc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013703:	c1 ee 0c             	shr    esi,0xc
c0013706:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001370a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013711:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013718:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001371c:	29 ef                	sub    edi,ebp
c001371e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013722:	0f 83 f9 00 00 00    	jae    c0013821 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013728:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001372e:	b8 00 10 00 00       	mov    eax,0x1000
c0013733:	0f 47 f8             	cmova  edi,eax
c0013736:	83 ec 0c             	sub    esp,0xc
c0013739:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013740:	31 d2                	xor    edx,edx
c0013742:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013744:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013748:	50                   	push   eax
c0013749:	8d 74 24 30          	lea    esi,[esp+0x30]
c001374d:	56                   	push   esi
c001374e:	52                   	push   edx
c001374f:	57                   	push   edi
c0013750:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013757:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001375a:	83 c4 20             	add    esp,0x20
c001375d:	85 c0                	test   eax,eax
c001375f:	75 06                	jne    c0013767 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013761:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013765:	74 13                	je     c001377a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013767:	83 ec 0c             	sub    esp,0xc
c001376a:	53                   	push   ebx
c001376b:	e8 a7 61 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0013770:	83 c4 10             	add    esp,0x10
c0013773:	31 c0                	xor    eax,eax
c0013775:	e9 7c 01 00 00       	jmp    c00138f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001377a:	fa                   	cli    
c001377b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013781:	e8 50 46 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0013786:	6a 07                	push   0x7
c0013788:	53                   	push   ebx
c0013789:	50                   	push   eax
c001378a:	89 c7                	mov    edi,eax
c001378c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013791:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013794:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001379a:	e8 45 65 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001379f:	83 c4 0c             	add    esp,0xc
c00137a2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00137a9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137af:	6a 00                	push   0x0
c00137b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137b9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137bf:	e8 86 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c00137c4:	58                   	pop    eax
c00137c5:	5a                   	pop    edx
c00137c6:	68 07 0c 00 00       	push   0xc07
c00137cb:	55                   	push   ebp
c00137cc:	57                   	push   edi
c00137cd:	89 df                	mov    edi,ebx
c00137cf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00137d6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137dc:	6a 00                	push   0x0
c00137de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137e6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137ec:	e8 d5 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137f1:	b9 00 10 00 00       	mov    ecx,0x1000
c00137f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137fd:	83 c4 20             	add    esp,0x20
c0013800:	48                   	dec    eax
c0013801:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013806:	85 c0                	test   eax,eax
c0013808:	75 01                	jne    c001380b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001380a:	fb                   	sti    
c001380b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001380f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013815:	e9 f0 fe ff ff       	jmp    c001370a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001381a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013821:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013828:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001382e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013834:	0f 86 ae 00 00 00    	jbe    c00138e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001383a:	fa                   	cli    
c001383b:	51                   	push   ecx
c001383c:	31 ff                	xor    edi,edi
c001383e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013845:	c1 ee 0c             	shr    esi,0xc
c0013848:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001384e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013854:	6a 00                	push   0x0
c0013856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001385b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001385e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013864:	e8 e1 62 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0013869:	83 c4 10             	add    esp,0x10
c001386c:	e8 65 45 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0013871:	47                   	inc    edi
c0013872:	6a 07                	push   0x7
c0013874:	53                   	push   ebx
c0013875:	50                   	push   eax
c0013876:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001387a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013880:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013883:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013889:	e8 56 64 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001388e:	58                   	pop    eax
c001388f:	5a                   	pop    edx
c0013890:	68 07 0c 00 00       	push   0xc07
c0013895:	55                   	push   ebp
c0013896:	81 c5 00 10 00 00    	add    ebp,0x1000
c001389c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138a0:	50                   	push   eax
c00138a1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00138a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138ae:	6a 00                	push   0x0
c00138b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138be:	e8 03 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00138c3:	83 c4 1c             	add    esp,0x1c
c00138c6:	68 00 10 00 00       	push   0x1000
c00138cb:	6a 00                	push   0x0
c00138cd:	53                   	push   ebx
c00138ce:	e8 1d cc fe ff       	call   c00004f0 <memset>
c00138d3:	83 c4 10             	add    esp,0x10
c00138d6:	39 fe                	cmp    esi,edi
c00138d8:	77 92                	ja     c001386c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00138da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138df:	48                   	dec    eax
c00138e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138e5:	75 01                	jne    c00138e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138e7:	fb                   	sti    
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	53                   	push   ebx
c00138ec:	e8 26 60 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c00138f1:	83 c4 10             	add    esp,0x10
c00138f4:	b0 01                	mov    al,0x1
c00138f6:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138fc:	5b                   	pop    ebx
c00138fd:	5e                   	pop    esi
c00138fe:	5f                   	pop    edi
c00138ff:	5d                   	pop    ebp
c0013900:	c3                   	ret    

c0013901 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013901:	55                   	push   ebp
c0013902:	57                   	push   edi
c0013903:	56                   	push   esi
c0013904:	53                   	push   ebx
c0013905:	83 ec 48             	sub    esp,0x48
c0013908:	68 14 01 00 00       	push   0x114
c001390d:	e8 b9 41 ff ff       	call   c0007acb <malloc>
c0013912:	83 c4 0c             	add    esp,0xc
c0013915:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013919:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001391d:	89 c7                	mov    edi,eax
c001391f:	50                   	push   eax
c0013920:	e8 2d 76 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0013925:	58                   	pop    eax
c0013926:	5a                   	pop    edx
c0013927:	6a 01                	push   0x1
c0013929:	57                   	push   edi
c001392a:	e8 df 76 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	85 c0                	test   eax,eax
c0013934:	0f 85 4c 01 00 00    	jne    c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001393a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013942:	83 ec 0c             	sub    esp,0xc
c0013945:	6a 34                	push   0x34
c0013947:	e8 7f 41 ff ff       	call   c0007acb <malloc>
c001394c:	89 c3                	mov    ebx,eax
c001394e:	58                   	pop    eax
c001394f:	8b 07                	mov    eax,DWORD PTR [edi]
c0013951:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013955:	56                   	push   esi
c0013956:	53                   	push   ebx
c0013957:	6a 00                	push   0x0
c0013959:	6a 34                	push   0x34
c001395b:	57                   	push   edi
c001395c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001395f:	83 c4 20             	add    esp,0x20
c0013962:	85 c0                	test   eax,eax
c0013964:	0f 85 1c 01 00 00    	jne    c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001396a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013970:	0f 85 10 01 00 00    	jne    c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013976:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013979:	85 c0                	test   eax,eax
c001397b:	0f 84 05 01 00 00    	je     c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013981:	31 d2                	xor    edx,edx
c0013983:	55                   	push   ebp
c0013984:	52                   	push   edx
c0013985:	50                   	push   eax
c0013986:	57                   	push   edi
c0013987:	e8 40 77 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c001398c:	83 c4 10             	add    esp,0x10
c001398f:	85 c0                	test   eax,eax
c0013991:	0f 85 ef 00 00 00    	jne    c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013997:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001399a:	83 ec 0c             	sub    esp,0xc
c001399d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00139a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00139a5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00139a9:	0f af c2             	imul   eax,edx
c00139ac:	50                   	push   eax
c00139ad:	e8 19 41 ff ff       	call   c0007acb <malloc>
c00139b2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00139b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00139bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139bf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00139c3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00139c7:	0f af c2             	imul   eax,edx
c00139ca:	99                   	cdq    
c00139cb:	52                   	push   edx
c00139cc:	50                   	push   eax
c00139cd:	57                   	push   edi
c00139ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139d1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00139d4:	83 c4 20             	add    esp,0x20
c00139d7:	85 c0                	test   eax,eax
c00139d9:	0f 84 a7 00 00 00    	je     c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139df:	31 d2                	xor    edx,edx
c00139e1:	51                   	push   ecx
c00139e2:	52                   	push   edx
c00139e3:	50                   	push   eax
c00139e4:	57                   	push   edi
c00139e5:	e8 e2 76 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c00139ea:	83 c4 10             	add    esp,0x10
c00139ed:	85 c0                	test   eax,eax
c00139ef:	0f 85 91 00 00 00    	jne    c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139f5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139f9:	83 ec 0c             	sub    esp,0xc
c00139fc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a00:	0f af c2             	imul   eax,edx
c0013a03:	50                   	push   eax
c0013a04:	e8 c2 40 ff ff       	call   c0007acb <malloc>
c0013a09:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013a0b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a16:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a1a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a1e:	0f af c2             	imul   eax,edx
c0013a21:	99                   	cdq    
c0013a22:	52                   	push   edx
c0013a23:	50                   	push   eax
c0013a24:	57                   	push   edi
c0013a25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a28:	83 c4 20             	add    esp,0x20
c0013a2b:	31 c9                	xor    ecx,ecx
c0013a2d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a35:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013a39:	0f b7 e9             	movzx  ebp,cx
c0013a3c:	0f 83 86 00 00 00    	jae    c0013ac8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013a42:	c1 e5 05             	shl    ebp,0x5
c0013a45:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013a49:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013a4d:	75 73                	jne    c0013ac2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013a4f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013a56:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013a59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a5d:	52                   	push   edx
c0013a5e:	31 d2                	xor    edx,edx
c0013a60:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013a63:	52                   	push   edx
c0013a64:	50                   	push   eax
c0013a65:	57                   	push   edi
c0013a66:	e8 61 76 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a72:	85 c0                	test   eax,eax
c0013a74:	74 17                	je     c0013a8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013a76:	83 ec 0c             	sub    esp,0xc
c0013a79:	68 85 10 02 c0       	push   0xc0021085
c0013a7e:	e8 27 6f ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	31 c0                	xor    eax,eax
c0013a88:	e9 8b 00 00 00       	jmp    c0013b18 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013a8d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a91:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a94:	83 ec 0c             	sub    esp,0xc
c0013a97:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a9a:	50                   	push   eax
c0013a9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a9f:	56                   	push   esi
c0013aa0:	57                   	push   edi
c0013aa1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013aa5:	e8 d0 fb ff ff       	call   c001367a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013aaa:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013aae:	83 c4 20             	add    esp,0x20
c0013ab1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013ab5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ab9:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013abe:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013ac2:	41                   	inc    ecx
c0013ac3:	e9 6d ff ff ff       	jmp    c0013a35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013ac8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013acc:	83 ec 0c             	sub    esp,0xc
c0013acf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ad3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ad7:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013add:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013ae3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ae8:	05 00 10 00 00       	add    eax,0x1000
c0013aed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af4:	e8 e2 3f ff ff       	call   c0007adb <free>
c0013af9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013afc:	e8 da 3f ff ff       	call   c0007adb <free>
c0013b01:	58                   	pop    eax
c0013b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b06:	e8 d0 3f ff ff       	call   c0007adb <free>
c0013b0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013b0e:	e8 59 75 ff ff       	call   c000b06c <File::close()>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	b0 01                	mov    al,0x1
c0013b18:	83 c4 3c             	add    esp,0x3c
c0013b1b:	5b                   	pop    ebx
c0013b1c:	5e                   	pop    esi
c0013b1d:	5f                   	pop    edi
c0013b1e:	5d                   	pop    ebp
c0013b1f:	c3                   	ret    

c0013b20 <Thr::runtimeReferenceHelper()>:
c0013b20:	83 ec 18             	sub    esp,0x18
c0013b23:	68 8d 10 02 c0       	push   0xc002108d
c0013b28:	e8 7d 6e ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0013b2d:	fa                   	cli    
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	eb fe                	jmp    c0013b31 <Thr::runtimeReferenceHelper()+0x11>

c0013b33 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b33:	57                   	push   edi
c0013b34:	56                   	push   esi
c0013b35:	53                   	push   ebx
c0013b36:	31 db                	xor    ebx,ebx
c0013b38:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b3e:	7e 3c                	jle    c0013b7c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b40:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b47:	31 ff                	xor    edi,edi
c0013b49:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b50:	7e 27                	jle    c0013b79 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b52:	50                   	push   eax
c0013b53:	50                   	push   eax
c0013b54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b58:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b5a:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b61:	50                   	push   eax
c0013b62:	e8 19 cc fe ff       	call   c0000780 <strcmp>
c0013b67:	83 c4 10             	add    esp,0x10
c0013b6a:	85 c0                	test   eax,eax
c0013b6c:	75 05                	jne    c0013b73 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b6e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b71:	eb 0b                	jmp    c0013b7e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b73:	83 c6 10             	add    esi,0x10
c0013b76:	47                   	inc    edi
c0013b77:	eb d0                	jmp    c0013b49 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b79:	43                   	inc    ebx
c0013b7a:	eb bc                	jmp    c0013b38 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b7c:	31 c0                	xor    eax,eax
c0013b7e:	5b                   	pop    ebx
c0013b7f:	5e                   	pop    esi
c0013b80:	5f                   	pop    edi
c0013b81:	c3                   	ret    

c0013b82 <Thr::loadKernelSymbolTable(char const*)>:
c0013b82:	55                   	push   ebp
c0013b83:	57                   	push   edi
c0013b84:	56                   	push   esi
c0013b85:	53                   	push   ebx
c0013b86:	83 ec 68             	sub    esp,0x68
c0013b89:	68 14 01 00 00       	push   0x114
c0013b8e:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b94:	e8 32 3f ff ff       	call   c0007acb <malloc>
c0013b99:	83 c4 0c             	add    esp,0xc
c0013b9c:	56                   	push   esi
c0013b9d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013ba1:	89 c3                	mov    ebx,eax
c0013ba3:	50                   	push   eax
c0013ba4:	e8 a9 73 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0013ba9:	5e                   	pop    esi
c0013baa:	5f                   	pop    edi
c0013bab:	6a 01                	push   0x1
c0013bad:	53                   	push   ebx
c0013bae:	e8 5b 74 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	85 c0                	test   eax,eax
c0013bb8:	74 0a                	je     c0013bc4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	68 af 10 02 c0       	push   0xc00210af
c0013bc2:	eb 34                	jmp    c0013bf8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013bc4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	6a 34                	push   0x34
c0013bd1:	e8 f5 3e ff ff       	call   c0007acb <malloc>
c0013bd6:	59                   	pop    ecx
c0013bd7:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013bdb:	89 c7                	mov    edi,eax
c0013bdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bdf:	56                   	push   esi
c0013be0:	57                   	push   edi
c0013be1:	6a 00                	push   0x0
c0013be3:	6a 34                	push   0x34
c0013be5:	53                   	push   ebx
c0013be6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013be9:	83 c4 20             	add    esp,0x20
c0013bec:	85 c0                	test   eax,eax
c0013bee:	74 17                	je     c0013c07 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	68 c6 10 02 c0       	push   0xc00210c6
c0013bf8:	e8 78 cc ff ff       	call   c0010875 <KePanic(char const*)>
c0013bfd:	83 c4 10             	add    esp,0x10
c0013c00:	31 c0                	xor    eax,eax
c0013c02:	e9 31 02 00 00       	jmp    c0013e38 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013c07:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013c0d:	75 e1                	jne    c0013bf0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c0f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013c12:	85 c0                	test   eax,eax
c0013c14:	74 da                	je     c0013bf0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c16:	52                   	push   edx
c0013c17:	31 d2                	xor    edx,edx
c0013c19:	52                   	push   edx
c0013c1a:	50                   	push   eax
c0013c1b:	53                   	push   ebx
c0013c1c:	e8 ab 74 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	85 c0                	test   eax,eax
c0013c26:	75 c8                	jne    c0013bf0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	31 ed                	xor    ebp,ebp
c0013c31:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c35:	0f af c2             	imul   eax,edx
c0013c38:	50                   	push   eax
c0013c39:	e8 8d 3e ff ff       	call   c0007acb <malloc>
c0013c3e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c40:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c4b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c4f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c53:	0f af c2             	imul   eax,edx
c0013c56:	99                   	cdq    
c0013c57:	52                   	push   edx
c0013c58:	50                   	push   eax
c0013c59:	53                   	push   ebx
c0013c5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c5d:	83 c4 20             	add    esp,0x20
c0013c60:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c68:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c70:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c80:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c84:	0f b7 f5             	movzx  esi,bp
c0013c87:	0f 83 a7 00 00 00    	jae    c0013d34 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c8d:	6b f6 28             	imul   esi,esi,0x28
c0013c90:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c94:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c9b:	50                   	push   eax
c0013c9c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013ca0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ca4:	8b 16                	mov    edx,DWORD PTR [esi]
c0013ca6:	6b c0 28             	imul   eax,eax,0x28
c0013ca9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013cad:	89 d0                	mov    eax,edx
c0013caf:	31 d2                	xor    edx,edx
c0013cb1:	52                   	push   edx
c0013cb2:	50                   	push   eax
c0013cb3:	53                   	push   ebx
c0013cb4:	e8 13 74 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013cb9:	83 c4 0c             	add    esp,0xc
c0013cbc:	6a 20                	push   0x20
c0013cbe:	6a 00                	push   0x0
c0013cc0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013cc4:	52                   	push   edx
c0013cc5:	e8 26 c8 fe ff       	call   c00004f0 <memset>
c0013cca:	58                   	pop    eax
c0013ccb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ccd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013cd1:	51                   	push   ecx
c0013cd2:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013cd6:	52                   	push   edx
c0013cd7:	6a 00                	push   0x0
c0013cd9:	6a 1f                	push   0x1f
c0013cdb:	53                   	push   ebx
c0013cdc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cdf:	83 c4 18             	add    esp,0x18
c0013ce2:	68 dd 10 02 c0       	push   0xc00210dd
c0013ce7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013ceb:	52                   	push   edx
c0013cec:	e8 8f ca fe ff       	call   c0000780 <strcmp>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	85 c0                	test   eax,eax
c0013cf6:	75 0f                	jne    c0013d07 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cf8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d07:	50                   	push   eax
c0013d08:	50                   	push   eax
c0013d09:	68 e5 10 02 c0       	push   0xc00210e5
c0013d0e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013d12:	50                   	push   eax
c0013d13:	e8 68 ca fe ff       	call   c0000780 <strcmp>
c0013d18:	83 c4 10             	add    esp,0x10
c0013d1b:	85 c0                	test   eax,eax
c0013d1d:	75 0f                	jne    c0013d2e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013d1f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d2e:	45                   	inc    ebp
c0013d2f:	e9 4c ff ff ff       	jmp    c0013c80 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d39:	75 10                	jne    c0013d4b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013d3b:	83 ec 0c             	sub    esp,0xc
c0013d3e:	68 ed 10 02 c0       	push   0xc00210ed
c0013d43:	e8 2d cb ff ff       	call   c0010875 <KePanic(char const*)>
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d50:	75 10                	jne    c0013d62 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	68 ed 10 02 c0       	push   0xc00210ed
c0013d5a:	e8 16 cb ff ff       	call   c0010875 <KePanic(char const*)>
c0013d5f:	83 c4 10             	add    esp,0x10
c0013d62:	50                   	push   eax
c0013d63:	31 d2                	xor    edx,edx
c0013d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d69:	52                   	push   edx
c0013d6a:	50                   	push   eax
c0013d6b:	53                   	push   ebx
c0013d6c:	e8 5b 73 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013d71:	5a                   	pop    edx
c0013d72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d76:	e8 50 3d ff ff       	call   c0007acb <malloc>
c0013d7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d7f:	31 c9                	xor    ecx,ecx
c0013d81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d87:	5e                   	pop    esi
c0013d88:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d8c:	55                   	push   ebp
c0013d8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d91:	51                   	push   ecx
c0013d92:	52                   	push   edx
c0013d93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d97:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d9b:	53                   	push   ebx
c0013d9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d9f:	83 c4 14             	add    esp,0x14
c0013da2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013da6:	e8 20 3d ff ff       	call   c0007acb <malloc>
c0013dab:	89 c6                	mov    esi,eax
c0013dad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013daf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013db2:	56                   	push   esi
c0013db3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013db7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013dbb:	51                   	push   ecx
c0013dbc:	52                   	push   edx
c0013dbd:	53                   	push   ebx
c0013dbe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013dc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013dc5:	83 c4 1c             	add    esp,0x1c
c0013dc8:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013dce:	c1 e8 04             	shr    eax,0x4
c0013dd1:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013dd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ddc:	31 d2                	xor    edx,edx
c0013dde:	52                   	push   edx
c0013ddf:	50                   	push   eax
c0013de0:	53                   	push   ebx
c0013de1:	e8 e6 72 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013de6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013de8:	31 d2                	xor    edx,edx
c0013dea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ded:	56                   	push   esi
c0013dee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013df2:	52                   	push   edx
c0013df3:	50                   	push   eax
c0013df4:	53                   	push   ebx
c0013df5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013df8:	83 c4 14             	add    esp,0x14
c0013dfb:	53                   	push   ebx
c0013dfc:	e8 6b 72 ff ff       	call   c000b06c <File::close()>
c0013e01:	5d                   	pop    ebp
c0013e02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e06:	e8 d0 3c ff ff       	call   c0007adb <free>
c0013e0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e0e:	e8 c8 3c ff ff       	call   c0007adb <free>
c0013e13:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013e18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e1c:	83 c4 10             	add    esp,0x10
c0013e1f:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013e26:	8d 50 01             	lea    edx,[eax+0x1]
c0013e29:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e30:	b0 01                	mov    al,0x1
c0013e32:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e38:	83 c4 5c             	add    esp,0x5c
c0013e3b:	5b                   	pop    ebx
c0013e3c:	5e                   	pop    esi
c0013e3d:	5f                   	pop    edi
c0013e3e:	5d                   	pop    ebp
c0013e3f:	c3                   	ret    

c0013e40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e40:	55                   	push   ebp
c0013e41:	57                   	push   edi
c0013e42:	56                   	push   esi
c0013e43:	53                   	push   ebx
c0013e44:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e4a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e51:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013e57:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0013e5b:	68 14 01 00 00       	push   0x114
c0013e60:	e8 66 3c ff ff       	call   c0007acb <malloc>
c0013e65:	83 c4 0c             	add    esp,0xc
c0013e68:	56                   	push   esi
c0013e69:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e70:	50                   	push   eax
c0013e71:	89 c3                	mov    ebx,eax
c0013e73:	e8 da 70 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0013e78:	5f                   	pop    edi
c0013e79:	5d                   	pop    ebp
c0013e7a:	6a 01                	push   0x1
c0013e7c:	53                   	push   ebx
c0013e7d:	e8 8c 71 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	85 c0                	test   eax,eax
c0013e87:	0f 85 b3 06 00 00    	jne    c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e8d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e95:	83 ec 0c             	sub    esp,0xc
c0013e98:	6a 34                	push   0x34
c0013e9a:	e8 2c 3c ff ff       	call   c0007acb <malloc>
c0013e9f:	5e                   	pop    esi
c0013ea0:	8d 74 24 54          	lea    esi,[esp+0x54]
c0013ea4:	89 c5                	mov    ebp,eax
c0013ea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ea8:	56                   	push   esi
c0013ea9:	55                   	push   ebp
c0013eaa:	6a 00                	push   0x0
c0013eac:	6a 34                	push   0x34
c0013eae:	53                   	push   ebx
c0013eaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013eb2:	83 c4 20             	add    esp,0x20
c0013eb5:	85 c0                	test   eax,eax
c0013eb7:	0f 85 83 06 00 00    	jne    c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ebd:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013ec4:	0f 85 76 06 00 00    	jne    c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013eca:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013ecd:	85 c0                	test   eax,eax
c0013ecf:	0f 84 6b 06 00 00    	je     c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ed5:	31 d2                	xor    edx,edx
c0013ed7:	51                   	push   ecx
c0013ed8:	52                   	push   edx
c0013ed9:	50                   	push   eax
c0013eda:	53                   	push   ebx
c0013edb:	e8 ec 71 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	85 c0                	test   eax,eax
c0013ee5:	0f 85 55 06 00 00    	jne    c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013eeb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013eee:	83 ec 0c             	sub    esp,0xc
c0013ef1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013ef5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013ef9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013efd:	0f af c2             	imul   eax,edx
c0013f00:	50                   	push   eax
c0013f01:	e8 c5 3b ff ff       	call   c0007acb <malloc>
c0013f06:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f08:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f13:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013f17:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013f1b:	0f af c2             	imul   eax,edx
c0013f1e:	99                   	cdq    
c0013f1f:	52                   	push   edx
c0013f20:	50                   	push   eax
c0013f21:	53                   	push   ebx
c0013f22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f25:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013f28:	83 c4 20             	add    esp,0x20
c0013f2b:	85 c0                	test   eax,eax
c0013f2d:	0f 84 0d 06 00 00    	je     c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f33:	52                   	push   edx
c0013f34:	31 d2                	xor    edx,edx
c0013f36:	52                   	push   edx
c0013f37:	50                   	push   eax
c0013f38:	53                   	push   ebx
c0013f39:	e8 8e 71 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013f3e:	83 c4 10             	add    esp,0x10
c0013f41:	85 c0                	test   eax,eax
c0013f43:	0f 85 f7 05 00 00    	jne    c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f49:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f4d:	83 ec 0c             	sub    esp,0xc
c0013f50:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f54:	0f af c2             	imul   eax,edx
c0013f57:	50                   	push   eax
c0013f58:	e8 6e 3b ff ff       	call   c0007acb <malloc>
c0013f5d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f5f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f6e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f72:	0f af c2             	imul   eax,edx
c0013f75:	99                   	cdq    
c0013f76:	52                   	push   edx
c0013f77:	50                   	push   eax
c0013f78:	53                   	push   ebx
c0013f79:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f7c:	83 c4 20             	add    esp,0x20
c0013f7f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0013f85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013f88:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0013f8c:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0013f90:	73 78                	jae    c001400a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0013f92:	c1 e7 05             	shl    edi,0x5
c0013f95:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013f99:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013f9c:	75 63                	jne    c0014001 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0013f9e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013fa1:	31 d2                	xor    edx,edx
c0013fa3:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0013fa6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013faa:	50                   	push   eax
c0013fab:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013fae:	52                   	push   edx
c0013faf:	50                   	push   eax
c0013fb0:	53                   	push   ebx
c0013fb1:	e8 16 71 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c0013fb6:	83 c4 10             	add    esp,0x10
c0013fb9:	85 c0                	test   eax,eax
c0013fbb:	0f 85 7f 05 00 00    	jne    c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013fc1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013fc8:	83 ec 0c             	sub    esp,0xc
c0013fcb:	31 d2                	xor    edx,edx
c0013fcd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013fd1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013fd3:	01 c6                	add    esi,eax
c0013fd5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fdc:	50                   	push   eax
c0013fdd:	56                   	push   esi
c0013fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe2:	52                   	push   edx
c0013fe3:	50                   	push   eax
c0013fe4:	53                   	push   ebx
c0013fe5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fe8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013feb:	83 c4 1c             	add    esp,0x1c
c0013fee:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013ff1:	50                   	push   eax
c0013ff2:	6a 00                	push   0x0
c0013ff4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013ff8:	56                   	push   esi
c0013ff9:	e8 f2 c4 fe ff       	call   c00004f0 <memset>
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	66 ff 04 24          	inc    WORD PTR [esp]
c0014005:	e9 7b ff ff ff       	jmp    c0013f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c001400a:	50                   	push   eax
c001400b:	68 00 01 00 00       	push   0x100
c0014010:	6a 00                	push   0x0
c0014012:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014016:	50                   	push   eax
c0014017:	e8 d4 c4 fe ff       	call   c00004f0 <memset>
c001401c:	83 c4 0c             	add    esp,0xc
c001401f:	68 00 01 00 00       	push   0x100
c0014024:	6a 00                	push   0x0
c0014026:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001402d:	50                   	push   eax
c001402e:	e8 bd c4 fe ff       	call   c00004f0 <memset>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001403d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014044:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001404c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014054:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001405c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014064:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014068:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001406c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014071:	0f 83 16 01 00 00    	jae    c001418d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014077:	6b ff 28             	imul   edi,edi,0x28
c001407a:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001407e:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014081:	51                   	push   ecx
c0014082:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014086:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001408a:	8b 07                	mov    eax,DWORD PTR [edi]
c001408c:	6b d2 28             	imul   edx,edx,0x28
c001408f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014093:	31 d2                	xor    edx,edx
c0014095:	52                   	push   edx
c0014096:	50                   	push   eax
c0014097:	53                   	push   ebx
c0014098:	e8 2f 70 ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c001409d:	83 c4 0c             	add    esp,0xc
c00140a0:	6a 20                	push   0x20
c00140a2:	6a 00                	push   0x0
c00140a4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140ab:	51                   	push   ecx
c00140ac:	e8 3f c4 fe ff       	call   c00004f0 <memset>
c00140b1:	58                   	pop    eax
c00140b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b4:	8d 54 24 58          	lea    edx,[esp+0x58]
c00140b8:	52                   	push   edx
c00140b9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00140c0:	51                   	push   ecx
c00140c1:	6a 00                	push   0x0
c00140c3:	6a 1f                	push   0x1f
c00140c5:	53                   	push   ebx
c00140c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c9:	83 c4 1c             	add    esp,0x1c
c00140cc:	6a 09                	push   0x9
c00140ce:	68 07 11 02 c0       	push   0xc0021107
c00140d3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140da:	51                   	push   ecx
c00140db:	e8 a0 c2 fe ff       	call   c0000380 <memcmp>
c00140e0:	83 c4 10             	add    esp,0x10
c00140e3:	85 c0                	test   eax,eax
c00140e5:	75 1a                	jne    c0014101 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00140e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140ed:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00140f1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140f4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140fb:	89 d0                	mov    eax,edx
c00140fd:	40                   	inc    eax
c00140fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014101:	52                   	push   edx
c0014102:	6a 09                	push   0x9
c0014104:	68 11 11 02 c0       	push   0xc0021111
c0014109:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014110:	50                   	push   eax
c0014111:	e8 6a c2 fe ff       	call   c0000380 <memcmp>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	85 c0                	test   eax,eax
c001411b:	75 1a                	jne    c0014137 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c001411d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014120:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014123:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014127:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001412a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014131:	89 d0                	mov    eax,edx
c0014133:	40                   	inc    eax
c0014134:	89 04 24             	mov    DWORD PTR [esp],eax
c0014137:	50                   	push   eax
c0014138:	50                   	push   eax
c0014139:	68 dd 10 02 c0       	push   0xc00210dd
c001413e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014145:	50                   	push   eax
c0014146:	e8 35 c6 fe ff       	call   c0000780 <strcmp>
c001414b:	83 c4 10             	add    esp,0x10
c001414e:	85 c0                	test   eax,eax
c0014150:	75 0b                	jne    c001415d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014152:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014156:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014159:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001415d:	50                   	push   eax
c001415e:	50                   	push   eax
c001415f:	68 e5 10 02 c0       	push   0xc00210e5
c0014164:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001416b:	50                   	push   eax
c001416c:	e8 0f c6 fe ff       	call   c0000780 <strcmp>
c0014171:	83 c4 10             	add    esp,0x10
c0014174:	85 c0                	test   eax,eax
c0014176:	75 0b                	jne    c0014183 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014178:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001417c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001417f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014183:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014188:	e9 d7 fe ff ff       	jmp    c0014064 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001418d:	50                   	push   eax
c001418e:	31 d2                	xor    edx,edx
c0014190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014194:	52                   	push   edx
c0014195:	50                   	push   eax
c0014196:	53                   	push   ebx
c0014197:	e8 30 6f ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c001419c:	58                   	pop    eax
c001419d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141a1:	e8 25 39 ff ff       	call   c0007acb <malloc>
c00141a6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141a8:	31 d2                	xor    edx,edx
c00141aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00141ae:	58                   	pop    eax
c00141af:	8d 74 24 54          	lea    esi,[esp+0x54]
c00141b3:	56                   	push   esi
c00141b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00141b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141bc:	52                   	push   edx
c00141bd:	50                   	push   eax
c00141be:	53                   	push   ebx
c00141bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141c2:	83 c4 14             	add    esp,0x14
c00141c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141c9:	e8 fd 38 ff ff       	call   c0007acb <malloc>
c00141ce:	31 d2                	xor    edx,edx
c00141d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00141d4:	83 c4 0c             	add    esp,0xc
c00141d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141db:	52                   	push   edx
c00141dc:	50                   	push   eax
c00141dd:	53                   	push   ebx
c00141de:	e8 e9 6e ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c00141e3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141e5:	31 d2                	xor    edx,edx
c00141e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00141ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00141ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141f2:	52                   	push   edx
c00141f3:	50                   	push   eax
c00141f4:	53                   	push   ebx
c00141f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141f8:	83 c4 20             	add    esp,0x20
c00141fb:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014200:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014208:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001420c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014210:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014213:	0f 84 2b 03 00 00    	je     c0014544 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014219:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014220:	31 d2                	xor    edx,edx
c0014222:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014226:	c1 e8 03             	shr    eax,0x3
c0014229:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001422d:	51                   	push   ecx
c001422e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014232:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014236:	52                   	push   edx
c0014237:	50                   	push   eax
c0014238:	53                   	push   ebx
c0014239:	e8 8e 6e ff ff       	call   c000b0cc <File::seek(unsigned long long)>
c001423e:	5e                   	pop    esi
c001423f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014243:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001424a:	e8 7c 38 ff ff       	call   c0007acb <malloc>
c001424f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014251:	31 d2                	xor    edx,edx
c0014253:	89 c7                	mov    edi,eax
c0014255:	58                   	pop    eax
c0014256:	8d 44 24 58          	lea    eax,[esp+0x58]
c001425a:	50                   	push   eax
c001425b:	57                   	push   edi
c001425c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014260:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014267:	52                   	push   edx
c0014268:	50                   	push   eax
c0014269:	53                   	push   ebx
c001426a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001426d:	83 c4 20             	add    esp,0x20
c0014270:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014278:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001427c:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014280:	0f 8d a5 02 00 00    	jge    c001452b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014286:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001428b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001428f:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014292:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014296:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001429a:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001429e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00142a2:	c1 e8 08             	shr    eax,0x8
c00142a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00142a9:	89 c2                	mov    edx,eax
c00142ab:	c1 e2 04             	shl    edx,0x4
c00142ae:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00142b2:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00142b5:	85 f6                	test   esi,esi
c00142b7:	0f 85 cf 00 00 00    	jne    c001438c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142bd:	83 ec 0c             	sub    esp,0xc
c00142c0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00142c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142c8:	03 02                	add    eax,DWORD PTR [edx]
c00142ca:	50                   	push   eax
c00142cb:	e8 63 f8 ff ff       	call   c0013b33 <Thr::getAddressOfKernelSymbol(char const*)>
c00142d0:	83 c4 10             	add    esp,0x10
c00142d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142d7:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00142dc:	85 c0                	test   eax,eax
c00142de:	89 c6                	mov    esi,eax
c00142e0:	0f 85 a6 00 00 00    	jne    c001438c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142e6:	83 ec 0c             	sub    esp,0xc
c00142e9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00142ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142f1:	03 02                	add    eax,DWORD PTR [edx]
c00142f3:	50                   	push   eax
c00142f4:	e8 67 c7 ff ff       	call   c0010a60 <KeResolveCompatibilitySymbol(char*)>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014300:	85 c0                	test   eax,eax
c0014302:	89 c6                	mov    esi,eax
c0014304:	0f 85 82 00 00 00    	jne    c001438c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001430a:	50                   	push   eax
c001430b:	50                   	push   eax
c001430c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014310:	03 02                	add    eax,DWORD PTR [edx]
c0014312:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014316:	50                   	push   eax
c0014317:	68 1b 11 02 c0       	push   0xc002111b
c001431c:	e8 89 66 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0014321:	58                   	pop    eax
c0014322:	5a                   	pop    edx
c0014323:	68 35 11 02 c0       	push   0xc0021135
c0014328:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001432f:	51                   	push   ecx
c0014330:	e8 1b c3 fe ff       	call   c0000650 <strcpy>
c0014335:	59                   	pop    ecx
c0014336:	58                   	pop    eax
c0014337:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001433b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001433f:	03 02                	add    eax,DWORD PTR [edx]
c0014341:	50                   	push   eax
c0014342:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014349:	51                   	push   ecx
c001434a:	e8 21 c5 fe ff       	call   c0000870 <strcat>
c001434f:	58                   	pop    eax
c0014350:	5a                   	pop    edx
c0014351:	68 cb 11 02 c0       	push   0xc00211cb
c0014356:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001435d:	51                   	push   ecx
c001435e:	e8 0d c5 fe ff       	call   c0000870 <strcat>
c0014363:	83 c4 10             	add    esp,0x10
c0014366:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001436b:	0f 84 77 01 00 00    	je     c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014371:	83 ec 0c             	sub    esp,0xc
c0014374:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001437b:	51                   	push   ecx
c001437c:	e8 f4 c4 ff ff       	call   c0010875 <KePanic(char const*)>
c0014381:	83 c4 10             	add    esp,0x10
c0014384:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014388:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001438c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014391:	83 f8 01             	cmp    eax,0x1
c0014394:	0f 85 9b 00 00 00    	jne    c0014435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001439a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001439e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00143a5:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c00143a9:	01 c8                	add    eax,ecx
c00143ab:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00143b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00143b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00143b9:	0f 94 c2             	sete   dl
c00143bc:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00143c4:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c00143c9:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c00143cd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143d2:	0f b6 d2             	movzx  edx,dl
c00143d5:	74 41                	je     c0014418 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00143d7:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00143da:	85 d2                	test   edx,edx
c00143dc:	75 15                	jne    c00143f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00143de:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143e2:	66 83 f8 0c          	cmp    ax,0xc
c00143e6:	76 05                	jbe    c00143ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00143e8:	b8 0c 00 00 00       	mov    eax,0xc
c00143ed:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00143f1:	76 37                	jbe    c001442a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143f3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00143f8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00143fc:	0f 84 e6 00 00 00    	je     c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014402:	83 ec 0c             	sub    esp,0xc
c0014405:	68 4c 11 02 c0       	push   0xc002114c
c001440a:	e8 66 c4 ff ff       	call   c0010875 <KePanic(char const*)>
c001440f:	83 c4 10             	add    esp,0x10
c0014412:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014416:	eb 12                	jmp    c001442a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014418:	01 c1                	add    ecx,eax
c001441a:	85 d2                	test   edx,edx
c001441c:	75 0c                	jne    c001442a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001441e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014422:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014426:	77 02                	ja     c001442a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014428:	01 f1                	add    ecx,esi
c001442a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001442e:	89 08                	mov    DWORD PTR [eax],ecx
c0014430:	e9 ed 00 00 00       	jmp    c0014522 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014435:	83 f8 02             	cmp    eax,0x2
c0014438:	0f 85 81 00 00 00    	jne    c00144bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001443e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014445:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014449:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001444d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014455:	74 21                	je     c0014478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014457:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001445f:	74 17                	je     c0014478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014461:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014465:	ba 0a 00 00 00       	mov    edx,0xa
c001446a:	83 f9 0e             	cmp    ecx,0xe
c001446d:	77 03                	ja     c0014472 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001446f:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014472:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014476:	76 1f                	jbe    c0014497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014478:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001447d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014481:	74 65                	je     c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014483:	83 ec 0c             	sub    esp,0xc
c0014486:	68 68 11 02 c0       	push   0xc0021168
c001448b:	e8 e5 c3 ff ff       	call   c0010875 <KePanic(char const*)>
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014497:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001449c:	8b 10                	mov    edx,DWORD PTR [eax]
c001449e:	74 15                	je     c00144b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00144a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00144a4:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00144ab:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00144af:	01 d1                	add    ecx,edx
c00144b1:	01 ce                	add    esi,ecx
c00144b3:	eb 06                	jmp    c00144bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00144b5:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00144b9:	01 d6                	add    esi,edx
c00144bb:	89 30                	mov    DWORD PTR [eax],esi
c00144bd:	eb 63                	jmp    c0014522 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00144bf:	56                   	push   esi
c00144c0:	56                   	push   esi
c00144c1:	50                   	push   eax
c00144c2:	68 84 11 02 c0       	push   0xc0021184
c00144c7:	e8 de 64 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00144cc:	83 c4 10             	add    esp,0x10
c00144cf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00144d4:	74 12                	je     c00144e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00144d6:	83 ec 0c             	sub    esp,0xc
c00144d9:	68 8f 11 02 c0       	push   0xc002118f
c00144de:	e8 92 c3 ff ff       	call   c0010875 <KePanic(char const*)>
c00144e3:	83 c4 10             	add    esp,0x10
c00144e6:	eb 3a                	jmp    c0014522 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00144e8:	83 ec 0c             	sub    esp,0xc
c00144eb:	53                   	push   ebx
c00144ec:	e8 7b 6b ff ff       	call   c000b06c <File::close()>
c00144f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144fc:	e8 da 35 ff ff       	call   c0007adb <free>
c0014501:	59                   	pop    ecx
c0014502:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014506:	e8 d0 35 ff ff       	call   c0007adb <free>
c001450b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001450e:	e8 c8 35 ff ff       	call   c0007adb <free>
c0014513:	5b                   	pop    ebx
c0014514:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014518:	e8 be 35 ff ff       	call   c0007adb <free>
c001451d:	83 c4 10             	add    esp,0x10
c0014520:	eb 1e                	jmp    c0014540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014522:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014526:	e9 4d fd ff ff       	jmp    c0014278 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001452b:	83 ec 0c             	sub    esp,0xc
c001452e:	57                   	push   edi
c001452f:	e8 a7 35 ff ff       	call   c0007adb <free>
c0014534:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	e9 cc fc ff ff       	jmp    c001420c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014540:	31 c0                	xor    eax,eax
c0014542:	eb 32                	jmp    c0014576 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014544:	83 ec 0c             	sub    esp,0xc
c0014547:	53                   	push   ebx
c0014548:	e8 1f 6b ff ff       	call   c000b06c <File::close()>
c001454d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001454f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014552:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014555:	58                   	pop    eax
c0014556:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001455a:	e8 7c 35 ff ff       	call   c0007adb <free>
c001455f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014562:	e8 74 35 ff ff       	call   c0007adb <free>
c0014567:	5a                   	pop    edx
c0014568:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001456c:	e8 6a 35 ff ff       	call   c0007adb <free>
c0014571:	83 c4 10             	add    esp,0x10
c0014574:	b0 01                	mov    al,0x1
c0014576:	81 c4 5c 03 00 00    	add    esp,0x35c
c001457c:	5b                   	pop    ebx
c001457d:	5e                   	pop    esi
c001457e:	5f                   	pop    edi
c001457f:	5d                   	pop    ebp
c0014580:	c3                   	ret    

c0014581 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014581:	56                   	push   esi
c0014582:	31 d2                	xor    edx,edx
c0014584:	53                   	push   ebx
c0014585:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001458b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001458f:	39 d3                	cmp    ebx,edx
c0014591:	7e 1b                	jle    c00145ae <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014593:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c001459a:	39 c8                	cmp    eax,ecx
c001459c:	77 0d                	ja     c00145ab <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001459e:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c00145a5:	01 c6                	add    esi,eax
c00145a7:	39 ce                	cmp    esi,ecx
c00145a9:	77 05                	ja     c00145b0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00145ab:	42                   	inc    edx
c00145ac:	eb e1                	jmp    c001458f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00145ae:	31 c0                	xor    eax,eax
c00145b0:	5b                   	pop    ebx
c00145b1:	5e                   	pop    esi
c00145b2:	c3                   	ret    

c00145b3 <Thr::getDriverNameFromAddress(unsigned long)>:
c00145b3:	53                   	push   ebx
c00145b4:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00145ba:	31 c0                	xor    eax,eax
c00145bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00145c0:	39 c3                	cmp    ebx,eax
c00145c2:	7e 22                	jle    c00145e6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00145c4:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c00145cb:	39 ca                	cmp    edx,ecx
c00145cd:	77 14                	ja     c00145e3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145cf:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00145d6:	39 ca                	cmp    edx,ecx
c00145d8:	76 09                	jbe    c00145e3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145da:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145e1:	eb 05                	jmp    c00145e8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145e3:	40                   	inc    eax
c00145e4:	eb da                	jmp    c00145c0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145e6:	31 c0                	xor    eax,eax
c00145e8:	5b                   	pop    ebx
c00145e9:	c3                   	ret    

c00145ea <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145ea:	53                   	push   ebx
c00145eb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145ef:	53                   	push   ebx
c00145f0:	e8 8c ff ff ff       	call   c0014581 <Thr::getDriverBaseFromAddress(unsigned long)>
c00145f5:	5a                   	pop    edx
c00145f6:	31 d2                	xor    edx,edx
c00145f8:	85 c0                	test   eax,eax
c00145fa:	74 04                	je     c0014600 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145fc:	89 da                	mov    edx,ebx
c00145fe:	29 c2                	sub    edx,eax
c0014600:	5b                   	pop    ebx
c0014601:	89 d0                	mov    eax,edx
c0014603:	c3                   	ret    

c0014604 <Thr::loadDLL(char const*, bool)>:
c0014604:	55                   	push   ebp
c0014605:	57                   	push   edi
c0014606:	56                   	push   esi
c0014607:	53                   	push   ebx
c0014608:	81 ec 34 01 00 00    	sub    esp,0x134
c001460e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014615:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001461c:	56                   	push   esi
c001461d:	68 a7 11 02 c0       	push   0xc00211a7
c0014622:	e8 83 63 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0014627:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001462e:	e8 98 34 ff ff       	call   c0007acb <malloc>
c0014633:	83 c4 0c             	add    esp,0xc
c0014636:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001463c:	56                   	push   esi
c001463d:	50                   	push   eax
c001463e:	89 c3                	mov    ebx,eax
c0014640:	e8 0d 69 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0014645:	83 c4 10             	add    esp,0x10
c0014648:	85 db                	test   ebx,ebx
c001464a:	75 3c                	jne    c0014688 <Thr::loadDLL(char const*, bool)+0x84>
c001464c:	89 e8                	mov    eax,ebp
c001464e:	84 c0                	test   al,al
c0014650:	0f 84 e1 01 00 00    	je     c0014837 <Thr::loadDLL(char const*, bool)+0x233>
c0014656:	50                   	push   eax
c0014657:	50                   	push   eax
c0014658:	68 b8 11 02 c0       	push   0xc00211b8
c001465d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014661:	57                   	push   edi
c0014662:	e8 e9 bf fe ff       	call   c0000650 <strcpy>
c0014667:	58                   	pop    eax
c0014668:	5a                   	pop    edx
c0014669:	56                   	push   esi
c001466a:	57                   	push   edi
c001466b:	e8 00 c2 fe ff       	call   c0000870 <strcat>
c0014670:	59                   	pop    ecx
c0014671:	58                   	pop    eax
c0014672:	68 cb 11 02 c0       	push   0xc00211cb
c0014677:	57                   	push   edi
c0014678:	e8 f3 c1 fe ff       	call   c0000870 <strcat>
c001467d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014680:	e8 f0 c1 ff ff       	call   c0010875 <KePanic(char const*)>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	50                   	push   eax
c0014689:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001468d:	50                   	push   eax
c001468e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014692:	50                   	push   eax
c0014693:	53                   	push   ebx
c0014694:	e8 21 6c ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	85 db                	test   ebx,ebx
c001469e:	74 0c                	je     c00146ac <Thr::loadDLL(char const*, bool)+0xa8>
c00146a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146a2:	83 ec 0c             	sub    esp,0xc
c00146a5:	53                   	push   ebx
c00146a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146a9:	83 c4 10             	add    esp,0x10
c00146ac:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00146b1:	75 0a                	jne    c00146bd <Thr::loadDLL(char const*, bool)+0xb9>
c00146b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146b7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00146bb:	75 3e                	jne    c00146fb <Thr::loadDLL(char const*, bool)+0xf7>
c00146bd:	89 e8                	mov    eax,ebp
c00146bf:	31 db                	xor    ebx,ebx
c00146c1:	84 c0                	test   al,al
c00146c3:	0f 84 6e 01 00 00    	je     c0014837 <Thr::loadDLL(char const*, bool)+0x233>
c00146c9:	50                   	push   eax
c00146ca:	50                   	push   eax
c00146cb:	68 b8 11 02 c0       	push   0xc00211b8
c00146d0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00146d4:	53                   	push   ebx
c00146d5:	e8 76 bf fe ff       	call   c0000650 <strcpy>
c00146da:	58                   	pop    eax
c00146db:	5a                   	pop    edx
c00146dc:	56                   	push   esi
c00146dd:	53                   	push   ebx
c00146de:	e8 8d c1 fe ff       	call   c0000870 <strcat>
c00146e3:	59                   	pop    ecx
c00146e4:	5f                   	pop    edi
c00146e5:	68 cb 11 02 c0       	push   0xc00211cb
c00146ea:	53                   	push   ebx
c00146eb:	e8 80 c1 fe ff       	call   c0000870 <strcat>
c00146f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146f3:	e8 7d c1 ff ff       	call   c0010875 <KePanic(char const*)>
c00146f8:	83 c4 10             	add    esp,0x10
c00146fb:	53                   	push   ebx
c00146fc:	6a 03                	push   0x3
c00146fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014702:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014706:	05 ff 0f 00 00       	add    eax,0xfff
c001470b:	83 d2 00             	adc    edx,0x0
c001470e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014712:	50                   	push   eax
c0014713:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014719:	e8 d2 56 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c001471e:	89 c3                	mov    ebx,eax
c0014720:	58                   	pop    eax
c0014721:	5a                   	pop    edx
c0014722:	53                   	push   ebx
c0014723:	68 d2 fc 01 c0       	push   0xc001fcd2
c0014728:	e8 7d 62 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001472d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014730:	e8 4b be fe ff       	call   c0000580 <strlen>
c0014735:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c001473b:	40                   	inc    eax
c001473c:	89 04 24             	mov    DWORD PTR [esp],eax
c001473f:	e8 87 33 ff ff       	call   c0007acb <malloc>
c0014744:	59                   	pop    ecx
c0014745:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c001474c:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014751:	5f                   	pop    edi
c0014752:	56                   	push   esi
c0014753:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001475a:	e8 f1 be fe ff       	call   c0000650 <strcpy>
c001475f:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014764:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c001476b:	8d 50 01             	lea    edx,[eax+0x1]
c001476e:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014774:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014778:	83 c4 0c             	add    esp,0xc
c001477b:	6a 01                	push   0x1
c001477d:	53                   	push   ebx
c001477e:	56                   	push   esi
c001477f:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014786:	e8 b5 f6 ff ff       	call   c0013e40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001478b:	83 c4 10             	add    esp,0x10
c001478e:	89 c7                	mov    edi,eax
c0014790:	89 f8                	mov    eax,edi
c0014792:	83 f0 01             	xor    eax,0x1
c0014795:	84 c0                	test   al,al
c0014797:	74 18                	je     c00147b1 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014799:	89 e8                	mov    eax,ebp
c001479b:	84 c0                	test   al,al
c001479d:	74 12                	je     c00147b1 <Thr::loadDLL(char const*, bool)+0x1ad>
c001479f:	83 ec 0c             	sub    esp,0xc
c00147a2:	68 cd 11 02 c0       	push   0xc00211cd
c00147a7:	e8 c9 c0 ff ff       	call   c0010875 <KePanic(char const*)>
c00147ac:	83 c4 10             	add    esp,0x10
c00147af:	eb 06                	jmp    c00147b7 <Thr::loadDLL(char const*, bool)+0x1b3>
c00147b1:	89 f8                	mov    eax,edi
c00147b3:	84 c0                	test   al,al
c00147b5:	75 10                	jne    c00147c7 <Thr::loadDLL(char const*, bool)+0x1c3>
c00147b7:	83 ec 0c             	sub    esp,0xc
c00147ba:	68 ec 11 02 c0       	push   0xc00211ec
c00147bf:	e8 b1 c0 ff ff       	call   c0010875 <KePanic(char const*)>
c00147c4:	83 c4 10             	add    esp,0x10
c00147c7:	31 f6                	xor    esi,esi
c00147c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147d1:	05 ff 0f 00 00       	add    eax,0xfff
c00147d6:	83 d2 00             	adc    edx,0x0
c00147d9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147e1:	c1 ea 0c             	shr    edx,0xc
c00147e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147e8:	ba 00 00 00 00       	mov    edx,0x0
c00147ed:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00147f1:	89 d0                	mov    eax,edx
c00147f3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147f7:	73 32                	jae    c001482b <Thr::loadDLL(char const*, bool)+0x227>
c00147f9:	50                   	push   eax
c00147fa:	50                   	push   eax
c00147fb:	89 f0                	mov    eax,esi
c00147fd:	c1 e0 0c             	shl    eax,0xc
c0014800:	01 d8                	add    eax,ebx
c0014802:	50                   	push   eax
c0014803:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014809:	e8 ea 50 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c001480e:	83 c4 10             	add    esp,0x10
c0014811:	8b 00                	mov    eax,DWORD PTR [eax]
c0014813:	a8 60                	test   al,0x60
c0014815:	75 11                	jne    c0014828 <Thr::loadDLL(char const*, bool)+0x224>
c0014817:	83 ec 0c             	sub    esp,0xc
c001481a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001481f:	50                   	push   eax
c0014820:	e8 48 35 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0014825:	83 c4 10             	add    esp,0x10
c0014828:	46                   	inc    esi
c0014829:	eb 9e                	jmp    c00147c9 <Thr::loadDLL(char const*, bool)+0x1c5>
c001482b:	89 f8                	mov    eax,edi
c001482d:	84 c0                	test   al,al
c001482f:	b8 00 00 00 00       	mov    eax,0x0
c0014834:	0f 44 d8             	cmove  ebx,eax
c0014837:	81 c4 2c 01 00 00    	add    esp,0x12c
c001483d:	89 d8                	mov    eax,ebx
c001483f:	5b                   	pop    ebx
c0014840:	5e                   	pop    esi
c0014841:	5f                   	pop    edi
c0014842:	5d                   	pop    ebp
c0014843:	c3                   	ret    

c0014844 <Thr::executeDLL(unsigned long, void*)>:
c0014844:	56                   	push   esi
c0014845:	53                   	push   ebx
c0014846:	52                   	push   edx
c0014847:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001484b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001484f:	85 db                	test   ebx,ebx
c0014851:	75 10                	jne    c0014863 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014853:	83 ec 0c             	sub    esp,0xc
c0014856:	68 08 12 02 c0       	push   0xc0021208
c001485b:	e8 15 c0 ff ff       	call   c0010875 <KePanic(char const*)>
c0014860:	83 c4 10             	add    esp,0x10
c0014863:	50                   	push   eax
c0014864:	50                   	push   eax
c0014865:	53                   	push   ebx
c0014866:	68 32 12 02 c0       	push   0xc0021232
c001486b:	e8 3a 61 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0014870:	89 d8                	mov    eax,ebx
c0014872:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014876:	83 c4 14             	add    esp,0x14
c0014879:	5b                   	pop    ebx
c001487a:	5e                   	pop    esi
c001487b:	ff e0                	jmp    eax
c001487d:	66 90                	xchg   ax,ax
c001487f:	90                   	nop

c0014880 <userModeEntryPoint(void*)>:
c0014880:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014885:	83 e8 01             	sub    eax,0x1
c0014888:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001488d:	75 01                	jne    c0014890 <userModeEntryPoint(void*)+0x10>
c001488f:	fb                   	sti    
c0014890:	fb                   	sti    
c0014891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014896:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014899:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001489f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148a3:	e9 97 b9 fe ff       	jmp    c000023f <goToUsermode>

c00148a8 <changeTSS>:
c00148a8:	83 ec 14             	sub    esp,0x14
c00148ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00148b3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00148b8:	c1 e2 15             	shl    edx,0x15
c00148bb:	29 d0                	sub    eax,edx
c00148bd:	50                   	push   eax
c00148be:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00148c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00148c9:	05 7c 11 00 00       	add    eax,0x117c
c00148ce:	50                   	push   eax
c00148cf:	e8 78 46 ff ff       	call   c0008f4c <TSS::setESP(unsigned long)>
c00148d4:	83 c4 1c             	add    esp,0x1c
c00148d7:	c3                   	ret    

c00148d8 <switchToThread(ThreadControlBlock*)>:
c00148d8:	57                   	push   edi
c00148d9:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00148df:	56                   	push   esi
c00148e0:	53                   	push   ebx
c00148e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148e5:	85 c9                	test   ecx,ecx
c00148e7:	0f 85 8b 00 00 00    	jne    c0014978 <switchToThread(ThreadControlBlock*)+0xa0>
c00148ed:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00148f1:	81 fa ff 00 00 00    	cmp    edx,0xff
c00148f7:	74 7b                	je     c0014974 <switchToThread(ThreadControlBlock*)+0x9c>
c00148f9:	b8 00 04 00 00       	mov    eax,0x400
c00148fe:	29 d0                	sub    eax,edx
c0014900:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014903:	d1 f8                	sar    eax,1
c0014905:	01 d0                	add    eax,edx
c0014907:	90                   	nop
c0014908:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001490b:	e8 8e 27 00 00       	call   c001709e <HalQueryPerformanceCounter()>
c0014910:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014915:	89 c6                	mov    esi,eax
c0014917:	89 d7                	mov    edi,edx
c0014919:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c001491f:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014924:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c001492a:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014930:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014936:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001493c:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014942:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014948:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001494b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001494e:	01 c6                	add    esi,eax
c0014950:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014953:	11 d7                	adc    edi,edx
c0014955:	83 ec 0c             	sub    esp,0xc
c0014958:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001495b:	53                   	push   ebx
c001495c:	e8 16 b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014961:	0f 20 c0             	mov    eax,cr0
c0014964:	83 c8 08             	or     eax,0x8
c0014967:	0f 22 c0             	mov    cr0,eax
c001496a:	83 c4 10             	add    esp,0x10
c001496d:	5b                   	pop    ebx
c001496e:	5e                   	pop    esi
c001496f:	5f                   	pop    edi
c0014970:	c3                   	ret    
c0014971:	8d 76 00             	lea    esi,[esi+0x0]
c0014974:	31 c0                	xor    eax,eax
c0014976:	eb 90                	jmp    c0014908 <switchToThread(ThreadControlBlock*)+0x30>
c0014978:	5b                   	pop    ebx
c0014979:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014983:	5e                   	pop    esi
c0014984:	5f                   	pop    edi
c0014985:	c3                   	ret    
c0014986:	66 90                	xchg   ax,ax

c0014988 <Process::addArgs(char**)>:
c0014988:	57                   	push   edi
c0014989:	56                   	push   esi
c001498a:	53                   	push   ebx
c001498b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001498f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014993:	85 f6                	test   esi,esi
c0014995:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001499f:	74 4f                	je     c00149f0 <Process::addArgs(char**)+0x68>
c00149a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00149a3:	85 c0                	test   eax,eax
c00149a5:	74 49                	je     c00149f0 <Process::addArgs(char**)+0x68>
c00149a7:	31 db                	xor    ebx,ebx
c00149a9:	8d 76 00             	lea    esi,[esi+0x0]
c00149ac:	83 ec 0c             	sub    esp,0xc
c00149af:	50                   	push   eax
c00149b0:	e8 cb bb fe ff       	call   c0000580 <strlen>
c00149b5:	83 c0 01             	add    eax,0x1
c00149b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00149bb:	e8 0b 31 ff ff       	call   c0007acb <malloc>
c00149c0:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00149c7:	5a                   	pop    edx
c00149c8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00149cb:	83 c3 01             	add    ebx,0x1
c00149ce:	59                   	pop    ecx
c00149cf:	52                   	push   edx
c00149d0:	50                   	push   eax
c00149d1:	e8 7a bc fe ff       	call   c0000650 <strcpy>
c00149d6:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00149dc:	83 c4 10             	add    esp,0x10
c00149df:	83 c1 01             	add    ecx,0x1
c00149e2:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00149e8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00149eb:	85 c0                	test   eax,eax
c00149ed:	75 bd                	jne    c00149ac <Process::addArgs(char**)+0x24>
c00149ef:	90                   	nop
c00149f0:	5b                   	pop    ebx
c00149f1:	5e                   	pop    esi
c00149f2:	5f                   	pop    edi
c00149f3:	c3                   	ret    

c00149f4 <Process::Process(char const*, Process*, char**)>:
c00149f4:	56                   	push   esi
c00149f5:	53                   	push   ebx
c00149f6:	83 ec 14             	sub    esp,0x14
c00149f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149fd:	05 0c 02 00 00       	add    eax,0x20c
c0014a02:	bb 07 00 00 00       	mov    ebx,0x7
c0014a07:	89 c6                	mov    esi,eax
c0014a09:	8d 76 00             	lea    esi,[esi+0x0]
c0014a0c:	85 db                	test   ebx,ebx
c0014a0e:	78 14                	js     c0014a24 <Process::Process(char const*, Process*, char**)+0x30>
c0014a10:	83 ec 0c             	sub    esp,0xc
c0014a13:	56                   	push   esi
c0014a14:	e8 3f a5 00 00       	call   c001ef58 <ThreadControlBlock::ThreadControlBlock()>
c0014a19:	83 c4 10             	add    esp,0x10
c0014a1c:	83 c6 5f             	add    esi,0x5f
c0014a1f:	83 eb 01             	sub    ebx,0x1
c0014a22:	eb e8                	jmp    c0014a0c <Process::Process(char const*, Process*, char**)+0x18>
c0014a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a28:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a33:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a3a:	83 ec 0c             	sub    esp,0xc
c0014a3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a41:	e8 24 bc ff ff       	call   c001066a <Krnl::newProcessEnv(Process*)>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	89 c2                	mov    edx,eax
c0014a4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a4f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a59:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a62:	a1 00 24 02 c0       	mov    eax,ds:0xc0022400
c0014a67:	8d 50 01             	lea    edx,[eax+0x1]
c0014a6a:	89 15 00 24 02 c0    	mov    DWORD PTR ds:0xc0022400,edx
c0014a70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a74:	89 02                	mov    DWORD PTR [edx],eax
c0014a76:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a85:	e8 41 30 ff ff       	call   c0007acb <malloc>
c0014a8a:	83 c4 10             	add    esp,0x10
c0014a8d:	89 c3                	mov    ebx,eax
c0014a8f:	83 ec 08             	sub    esp,0x8
c0014a92:	6a 00                	push   0x0
c0014a94:	53                   	push   ebx
c0014a95:	e8 1c 57 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014a9a:	83 c4 10             	add    esp,0x10
c0014a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aab:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014abd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014ac3:	e8 c6 c1 ff ff       	call   c0010c8e <KeInitSignals()>
c0014ac8:	89 c2                	mov    edx,eax
c0014aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ace:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ade:	85 c0                	test   eax,eax
c0014ae0:	74 42                	je     c0014b24 <Process::Process(char const*, Process*, char**)+0x130>
c0014ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aec:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014afc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b00:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b06:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b10:	05 0c 01 00 00       	add    eax,0x10c
c0014b15:	83 ec 08             	sub    esp,0x8
c0014b18:	52                   	push   edx
c0014b19:	50                   	push   eax
c0014b1a:	e8 31 bb fe ff       	call   c0000650 <strcpy>
c0014b1f:	83 c4 10             	add    esp,0x10
c0014b22:	eb 64                	jmp    c0014b88 <Process::Process(char const*, Process*, char**)+0x194>
c0014b24:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b2c:	83 ec 0c             	sub    esp,0xc
c0014b2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b33:	e8 93 2f ff ff       	call   c0007acb <malloc>
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	89 c3                	mov    ebx,eax
c0014b3d:	83 ec 08             	sub    esp,0x8
c0014b40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b44:	53                   	push   ebx
c0014b45:	e8 0c 41 ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b51:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b61:	83 ec 0c             	sub    esp,0xc
c0014b64:	50                   	push   eax
c0014b65:	e8 9a 39 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b71:	05 0c 01 00 00       	add    eax,0x10c
c0014b76:	83 ec 08             	sub    esp,0x8
c0014b79:	68 51 12 02 c0       	push   0xc0021251
c0014b7e:	50                   	push   eax
c0014b7f:	e8 cc ba fe ff       	call   c0000650 <strcpy>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	90                   	nop
c0014b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8c:	83 c0 0c             	add    eax,0xc
c0014b8f:	83 ec 08             	sub    esp,0x8
c0014b92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b96:	50                   	push   eax
c0014b97:	e8 b4 ba fe ff       	call   c0000650 <strcpy>
c0014b9c:	83 c4 10             	add    esp,0x10
c0014b9f:	83 ec 08             	sub    esp,0x8
c0014ba2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014ba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014baa:	e8 d9 fd ff ff       	call   c0014988 <Process::addArgs(char**)>
c0014baf:	83 c4 10             	add    esp,0x10
c0014bb2:	83 ec 08             	sub    esp,0x8
c0014bb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bbd:	e8 3f ed ff ff       	call   c0013901 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014bc9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014bcd:	83 f0 01             	xor    eax,0x1
c0014bd0:	88 c2                	mov    dl,al
c0014bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bd6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014bdc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014be1:	83 ec 04             	sub    esp,0x4
c0014be4:	50                   	push   eax
c0014be5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014be9:	68 a8 12 02 c0       	push   0xc00212a8
c0014bee:	e8 b7 5d ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0014bf3:	83 c4 10             	add    esp,0x10
c0014bf6:	90                   	nop
c0014bf7:	83 c4 14             	add    esp,0x14
c0014bfa:	5b                   	pop    ebx
c0014bfb:	5e                   	pop    esi
c0014bfc:	c3                   	ret    
c0014bfd:	90                   	nop
c0014bfe:	66 90                	xchg   ax,ax

c0014c00 <Process::Process(bool, char const*, Process*, char**)>:
c0014c00:	56                   	push   esi
c0014c01:	53                   	push   ebx
c0014c02:	83 ec 24             	sub    esp,0x24
c0014c05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c09:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014c0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c11:	05 0c 02 00 00       	add    eax,0x20c
c0014c16:	bb 07 00 00 00       	mov    ebx,0x7
c0014c1b:	89 c6                	mov    esi,eax
c0014c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c20:	85 db                	test   ebx,ebx
c0014c22:	78 14                	js     c0014c38 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014c24:	83 ec 0c             	sub    esp,0xc
c0014c27:	56                   	push   esi
c0014c28:	e8 2b a3 00 00       	call   c001ef58 <ThreadControlBlock::ThreadControlBlock()>
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	83 c6 5f             	add    esi,0x5f
c0014c33:	83 eb 01             	sub    ebx,0x1
c0014c36:	eb e8                	jmp    c0014c20 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c47:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c4e:	83 ec 0c             	sub    esp,0xc
c0014c51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c55:	e8 10 ba ff ff       	call   c001066a <Krnl::newProcessEnv(Process*)>
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	89 c2                	mov    edx,eax
c0014c5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c63:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c76:	a1 00 24 02 c0       	mov    eax,ds:0xc0022400
c0014c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c7e:	89 15 00 24 02 c0    	mov    DWORD PTR ds:0xc0022400,edx
c0014c84:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c88:	89 02                	mov    DWORD PTR [edx],eax
c0014c8a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c92:	83 ec 0c             	sub    esp,0xc
c0014c95:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c99:	e8 2d 2e ff ff       	call   c0007acb <malloc>
c0014c9e:	83 c4 10             	add    esp,0x10
c0014ca1:	89 c3                	mov    ebx,eax
c0014ca3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014ca8:	83 ec 08             	sub    esp,0x8
c0014cab:	50                   	push   eax
c0014cac:	53                   	push   ebx
c0014cad:	e8 04 55 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014cbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ccd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cd5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014cdb:	e8 ae bf ff ff       	call   c0010c8e <KeInitSignals()>
c0014ce0:	89 c2                	mov    edx,eax
c0014ce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014cec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cf6:	85 c0                	test   eax,eax
c0014cf8:	74 42                	je     c0014d3c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014cfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cfe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d04:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d0e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014d14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d18:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d1e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014d24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d28:	05 0c 01 00 00       	add    eax,0x10c
c0014d2d:	83 ec 08             	sub    esp,0x8
c0014d30:	52                   	push   edx
c0014d31:	50                   	push   eax
c0014d32:	e8 19 b9 fe ff       	call   c0000650 <strcpy>
c0014d37:	83 c4 10             	add    esp,0x10
c0014d3a:	eb 64                	jmp    c0014da0 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d3c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d44:	83 ec 0c             	sub    esp,0xc
c0014d47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d4b:	e8 7b 2d ff ff       	call   c0007acb <malloc>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	89 c3                	mov    ebx,eax
c0014d55:	83 ec 08             	sub    esp,0x8
c0014d58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d5c:	53                   	push   ebx
c0014d5d:	e8 f4 3e ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d69:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d79:	83 ec 0c             	sub    esp,0xc
c0014d7c:	50                   	push   eax
c0014d7d:	e8 82 37 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014d82:	83 c4 10             	add    esp,0x10
c0014d85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d89:	05 0c 01 00 00       	add    eax,0x10c
c0014d8e:	83 ec 08             	sub    esp,0x8
c0014d91:	68 51 12 02 c0       	push   0xc0021251
c0014d96:	50                   	push   eax
c0014d97:	e8 b4 b8 fe ff       	call   c0000650 <strcpy>
c0014d9c:	83 c4 10             	add    esp,0x10
c0014d9f:	90                   	nop
c0014da0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014da4:	83 c0 0c             	add    eax,0xc
c0014da7:	83 ec 08             	sub    esp,0x8
c0014daa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014dae:	50                   	push   eax
c0014daf:	e8 9c b8 fe ff       	call   c0000650 <strcpy>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	83 ec 08             	sub    esp,0x8
c0014dba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014dbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014dc2:	e8 c1 fb ff ff       	call   c0014988 <Process::addArgs(char**)>
c0014dc7:	83 c4 10             	add    esp,0x10
c0014dca:	90                   	nop
c0014dcb:	83 c4 24             	add    esp,0x24
c0014dce:	5b                   	pop    ebx
c0014dcf:	5e                   	pop    esi
c0014dd0:	c3                   	ret    
c0014dd1:	8d 76 00             	lea    esi,[esi+0x0]

c0014dd4 <taskStartupFunction>:
c0014dd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dd9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014ddc:	c3                   	ret    
c0014ddd:	90                   	nop
c0014dde:	66 90                	xchg   ax,ax

c0014de0 <Semaphore::Semaphore(int)>:
c0014de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014de4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014de8:	89 10                	mov    DWORD PTR [eax],edx
c0014dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dee:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014df5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014df9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e04:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014e0b:	90                   	nop
c0014e0c:	c3                   	ret    
c0014e0d:	90                   	nop
c0014e0e:	66 90                	xchg   ax,ax

c0014e10 <Mutex::Mutex()>:
c0014e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e14:	6a 01                	push   0x1
c0014e16:	50                   	push   eax
c0014e17:	e8 c4 ff ff ff       	call   c0014de0 <Semaphore::Semaphore(int)>
c0014e1c:	83 c4 08             	add    esp,0x8
c0014e1f:	90                   	nop
c0014e20:	c3                   	ret    
c0014e21:	90                   	nop
c0014e22:	66 90                	xchg   ax,ax

c0014e24 <Process::createThread(void (*)(void*), void*, int)>:
c0014e24:	57                   	push   edi
c0014e25:	31 c9                	xor    ecx,ecx
c0014e27:	56                   	push   esi
c0014e28:	53                   	push   ebx
c0014e29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e2d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e34:	89 f2                	mov    edx,esi
c0014e36:	66 90                	xchg   ax,ax
c0014e38:	0f b7 c2             	movzx  eax,dx
c0014e3b:	80 e2 01             	and    dl,0x1
c0014e3e:	74 14                	je     c0014e54 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e40:	d1 f8                	sar    eax,1
c0014e42:	83 c1 01             	add    ecx,0x1
c0014e45:	83 f9 10             	cmp    ecx,0x10
c0014e48:	89 c2                	mov    edx,eax
c0014e4a:	75 ec                	jne    c0014e38 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e4c:	31 db                	xor    ebx,ebx
c0014e4e:	89 d8                	mov    eax,ebx
c0014e50:	5b                   	pop    ebx
c0014e51:	5e                   	pop    esi
c0014e52:	5f                   	pop    edi
c0014e53:	c3                   	ret    
c0014e54:	b8 01 00 00 00       	mov    eax,0x1
c0014e59:	d3 e0                	shl    eax,cl
c0014e5b:	09 c6                	or     esi,eax
c0014e5d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e64:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e67:	c1 e0 05             	shl    eax,0x5
c0014e6a:	29 c8                	sub    eax,ecx
c0014e6c:	01 d8                	add    eax,ebx
c0014e6e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e75:	75 0d                	jne    c0014e84 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e77:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e81:	8d 76 00             	lea    esi,[esi+0x0]
c0014e84:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e8a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e8d:	83 ec 0c             	sub    esp,0xc
c0014e90:	c1 e6 05             	shl    esi,0x5
c0014e93:	29 ce                	sub    esi,ecx
c0014e95:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e98:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e9b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014ea1:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014ea7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014ead:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014eb4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014eba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ebe:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014ec4:	89 ca                	mov    edx,ecx
c0014ec6:	f7 da                	neg    edx
c0014ec8:	c1 e2 15             	shl    edx,0x15
c0014ecb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014ed1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014ed7:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0014edb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014ee5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014eeb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014eef:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014ef5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014eff:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014f09:	68 00 01 00 00       	push   0x100
c0014f0e:	e8 b8 2b ff ff       	call   c0007acb <malloc>
c0014f13:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014f16:	58                   	pop    eax
c0014f17:	5a                   	pop    edx
c0014f18:	53                   	push   ebx
c0014f19:	68 84 81 02 c0       	push   0xc0028184
c0014f1e:	e8 cd 9d 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f23:	83 c4 10             	add    esp,0x10
c0014f26:	89 d8                	mov    eax,ebx
c0014f28:	5b                   	pop    ebx
c0014f29:	5e                   	pop    esi
c0014f2a:	5f                   	pop    edi
c0014f2b:	c3                   	ret    

c0014f2c <Process::createUserThread()>:
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	68 80 00 00 00       	push   0x80
c0014f34:	6a 00                	push   0x0
c0014f36:	68 80 48 01 c0       	push   0xc0014880
c0014f3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f3f:	50                   	push   eax
c0014f40:	e8 df fe ff ff       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c0014f45:	83 c4 1c             	add    esp,0x1c
c0014f48:	c3                   	ret    
c0014f49:	8d 76 00             	lea    esi,[esi+0x0]

c0014f4c <setupMultitasking(void (*)())>:
c0014f4c:	56                   	push   esi
c0014f4d:	53                   	push   ebx
c0014f4e:	83 ec 04             	sub    esp,0x4
c0014f51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f55:	eb 11                	jmp    c0014f68 <setupMultitasking(void (*)())+0x1c>
c0014f57:	90                   	nop
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	68 84 81 02 c0       	push   0xc0028184
c0014f60:	e8 cf 9c 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f65:	83 c4 10             	add    esp,0x10
c0014f68:	83 ec 0c             	sub    esp,0xc
c0014f6b:	68 84 81 02 c0       	push   0xc0028184
c0014f70:	e8 9b 9c 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	84 c0                	test   al,al
c0014f7a:	74 dc                	je     c0014f58 <setupMultitasking(void (*)())+0xc>
c0014f7c:	83 ec 0c             	sub    esp,0xc
c0014f7f:	68 24 07 00 00       	push   0x724
c0014f84:	e8 42 2b ff ff       	call   c0007acb <malloc>
c0014f89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f90:	6a 00                	push   0x0
c0014f92:	68 55 12 02 c0       	push   0xc0021255
c0014f97:	6a 01                	push   0x1
c0014f99:	50                   	push   eax
c0014f9a:	89 c3                	mov    ebx,eax
c0014f9c:	e8 5f fc ff ff       	call   c0014c00 <Process::Process(bool, char const*, Process*, char**)>
c0014fa1:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014fa7:	83 c4 14             	add    esp,0x14
c0014faa:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014fb0:	50                   	push   eax
c0014fb1:	e8 a3 37 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0014fb6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014fbd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014fc7:	83 c8 01             	or     eax,0x1
c0014fca:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014fd1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014fd7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fda:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014fe4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fea:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014ff4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014ffa:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015004:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001500e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015014:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001501a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015024:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001502e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015035:	e8 91 2a ff ff       	call   c0007acb <malloc>
c001503a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015040:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015046:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001504c:	5a                   	pop    edx
c001504d:	59                   	pop    ecx
c001504e:	68 51 12 02 c0       	push   0xc0021251
c0015053:	50                   	push   eax
c0015054:	e8 f7 b5 fe ff       	call   c0000650 <strcpy>
c0015059:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015060:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015064:	83 c4 14             	add    esp,0x14
c0015067:	5b                   	pop    ebx
c0015068:	5e                   	pop    esi
c0015069:	e9 fb b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001506e:	66 90                	xchg   ax,ax

c0015070 <schedule()>:
c0015070:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015076:	85 d2                	test   edx,edx
c0015078:	74 0e                	je     c0015088 <schedule()+0x18>
c001507a:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015084:	c3                   	ret    
c0015085:	8d 76 00             	lea    esi,[esi+0x0]
c0015088:	53                   	push   ebx
c0015089:	83 ec 14             	sub    esp,0x14
c001508c:	68 84 81 02 c0       	push   0xc0028184
c0015091:	e8 7a 9b 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015096:	83 c4 10             	add    esp,0x10
c0015099:	84 c0                	test   al,al
c001509b:	75 3f                	jne    c00150dc <schedule()+0x6c>
c001509d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00150a5:	83 fa 01             	cmp    edx,0x1
c00150a8:	74 3a                	je     c00150e4 <schedule()+0x74>
c00150aa:	66 90                	xchg   ax,ax
c00150ac:	83 ec 0c             	sub    esp,0xc
c00150af:	68 84 81 02 c0       	push   0xc0028184
c00150b4:	e8 73 9b 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00150b9:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00150c0:	89 c3                	mov    ebx,eax
c00150c2:	e8 6d 9b 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00150c7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00150ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150d1:	e8 02 f8 ff ff       	call   c00148d8 <switchToThread(ThreadControlBlock*)>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	8d 76 00             	lea    esi,[esi+0x0]
c00150dc:	83 c4 08             	add    esp,0x8
c00150df:	5b                   	pop    ebx
c00150e0:	c3                   	ret    
c00150e1:	8d 76 00             	lea    esi,[esi+0x0]
c00150e4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150eb:	83 ec 08             	sub    esp,0x8
c00150ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150f3:	50                   	push   eax
c00150f4:	68 84 81 02 c0       	push   0xc0028184
c00150f9:	e8 f2 9b 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150fe:	83 c4 10             	add    esp,0x10
c0015101:	eb a9                	jmp    c00150ac <schedule()+0x3c>
c0015103:	90                   	nop

c0015104 <Semaphore::tryAcquire()>:
c0015104:	53                   	push   ebx
c0015105:	83 ec 08             	sub    esp,0x8
c0015108:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001510c:	fa                   	cli    
c001510d:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015113:	8d 42 01             	lea    eax,[edx+0x1]
c0015116:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001511b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015120:	8d 58 01             	lea    ebx,[eax+0x1]
c0015123:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015129:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001512c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001512e:	7c 2c                	jl     c001515c <Semaphore::tryAcquire()+0x58>
c0015130:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015135:	85 c0                	test   eax,eax
c0015137:	75 0b                	jne    c0015144 <Semaphore::tryAcquire()+0x40>
c0015139:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001513e:	85 c0                	test   eax,eax
c0015140:	75 5a                	jne    c001519c <Semaphore::tryAcquire()+0x98>
c0015142:	66 90                	xchg   ax,ax
c0015144:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001514a:	31 c0                	xor    eax,eax
c001514c:	85 d2                	test   edx,edx
c001514e:	75 04                	jne    c0015154 <Semaphore::tryAcquire()+0x50>
c0015150:	fb                   	sti    
c0015151:	8d 76 00             	lea    esi,[esi+0x0]
c0015154:	83 c4 08             	add    esp,0x8
c0015157:	5b                   	pop    ebx
c0015158:	c3                   	ret    
c0015159:	8d 76 00             	lea    esi,[esi+0x0]
c001515c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015161:	83 c3 01             	add    ebx,0x1
c0015164:	85 c0                	test   eax,eax
c0015166:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015169:	75 21                	jne    c001518c <Semaphore::tryAcquire()+0x88>
c001516b:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015171:	85 c9                	test   ecx,ecx
c0015173:	74 17                	je     c001518c <Semaphore::tryAcquire()+0x88>
c0015175:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001517f:	e8 ec fe ff ff       	call   c0015070 <schedule()>
c0015184:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015189:	8d 50 ff             	lea    edx,[eax-0x1]
c001518c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015192:	85 d2                	test   edx,edx
c0015194:	b0 01                	mov    al,0x1
c0015196:	75 bc                	jne    c0015154 <Semaphore::tryAcquire()+0x50>
c0015198:	eb b6                	jmp    c0015150 <Semaphore::tryAcquire()+0x4c>
c001519a:	66 90                	xchg   ax,ax
c001519c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151a6:	e8 c5 fe ff ff       	call   c0015070 <schedule()>
c00151ab:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151b0:	8d 50 ff             	lea    edx,[eax-0x1]
c00151b3:	31 c0                	xor    eax,eax
c00151b5:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00151bb:	85 d2                	test   edx,edx
c00151bd:	75 95                	jne    c0015154 <Semaphore::tryAcquire()+0x50>
c00151bf:	eb 8f                	jmp    c0015150 <Semaphore::tryAcquire()+0x4c>
c00151c1:	90                   	nop
c00151c2:	66 90                	xchg   ax,ax

c00151c4 <Semaphore::assertLocked(char const*)>:
c00151c4:	83 ec 0c             	sub    esp,0xc
c00151c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151cb:	fa                   	cli    
c00151cc:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00151d2:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151d7:	83 c1 01             	add    ecx,0x1
c00151da:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00151e0:	8d 48 01             	lea    ecx,[eax+0x1]
c00151e3:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151e9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151eb:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151ee:	7c 28                	jl     c0015218 <Semaphore::assertLocked(char const*)+0x54>
c00151f0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151f5:	85 c0                	test   eax,eax
c00151f7:	75 0b                	jne    c0015204 <Semaphore::assertLocked(char const*)+0x40>
c00151f9:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151fe:	85 c0                	test   eax,eax
c0015200:	75 32                	jne    c0015234 <Semaphore::assertLocked(char const*)+0x70>
c0015202:	66 90                	xchg   ax,ax
c0015204:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015209:	83 e8 01             	sub    eax,0x1
c001520c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015211:	75 01                	jne    c0015214 <Semaphore::assertLocked(char const*)+0x50>
c0015213:	fb                   	sti    
c0015214:	83 c4 0c             	add    esp,0xc
c0015217:	c3                   	ret    
c0015218:	83 ec 0c             	sub    esp,0xc
c001521b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001521f:	52                   	push   edx
c0015220:	e8 50 b6 ff ff       	call   c0010875 <KePanic(char const*)>
c0015225:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	83 e8 01             	sub    eax,0x1
c0015230:	eb be                	jmp    c00151f0 <Semaphore::assertLocked(char const*)+0x2c>
c0015232:	66 90                	xchg   ax,ax
c0015234:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001523e:	e8 2d fe ff ff       	call   c0015070 <schedule()>
c0015243:	eb bf                	jmp    c0015204 <Semaphore::assertLocked(char const*)+0x40>
c0015245:	8d 76 00             	lea    esi,[esi+0x0]

c0015248 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015248:	83 ec 0c             	sub    esp,0xc
c001524b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015250:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015254:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015257:	e8 14 fe ff ff       	call   c0015070 <schedule()>
c001525c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015261:	83 e8 01             	sub    eax,0x1
c0015264:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015269:	75 01                	jne    c001526c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001526b:	fb                   	sti    
c001526c:	83 c4 0c             	add    esp,0xc
c001526f:	c3                   	ret    

c0015270 <blockTask(TaskState)>:
c0015270:	83 ec 0c             	sub    esp,0xc
c0015273:	fa                   	cli    
c0015274:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015279:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001527d:	83 c0 01             	add    eax,0x1
c0015280:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015285:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001528a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001528d:	e8 de fd ff ff       	call   c0015070 <schedule()>
c0015292:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015297:	83 e8 01             	sub    eax,0x1
c001529a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001529f:	75 03                	jne    c00152a4 <blockTask(TaskState)+0x34>
c00152a1:	fb                   	sti    
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	83 c4 0c             	add    esp,0xc
c00152a7:	c3                   	ret    

c00152a8 <waitTask(int, int*, int)>:
c00152a8:	83 ec 18             	sub    esp,0x18
c00152ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152b4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00152b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00152c3:	6a 07                	push   0x7
c00152c5:	e8 a6 ff ff ff       	call   c0015270 <blockTask(TaskState)>
c00152ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00152d5:	85 d2                	test   edx,edx
c00152d7:	74 0b                	je     c00152e4 <waitTask(int, int*, int)+0x3c>
c00152d9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00152dc:	89 02                	mov    DWORD PTR [edx],eax
c00152de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152e3:	90                   	nop
c00152e4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00152e7:	83 c4 0c             	add    esp,0xc
c00152ea:	c3                   	ret    
c00152eb:	90                   	nop

c00152ec <milliTenthSleepUntil(unsigned int)>:
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152f3:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152f9:	76 05                	jbe    c0015300 <milliTenthSleepUntil(unsigned int)+0x14>
c00152fb:	90                   	nop
c00152fc:	83 c4 0c             	add    esp,0xc
c00152ff:	c3                   	ret    
c0015300:	fa                   	cli    
c0015301:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015307:	83 ec 08             	sub    esp,0x8
c001530a:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015310:	83 c2 01             	add    edx,0x1
c0015313:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015319:	83 c1 01             	add    ecx,0x1
c001531c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015322:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015328:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001532b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015330:	50                   	push   eax
c0015331:	68 78 81 02 c0       	push   0xc0028178
c0015336:	e8 b5 99 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001533b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015342:	e8 29 ff ff ff       	call   c0015270 <blockTask(TaskState)>
c0015347:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	83 e8 01             	sub    eax,0x1
c0015352:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015357:	85 c0                	test   eax,eax
c0015359:	75 09                	jne    c0015364 <milliTenthSleepUntil(unsigned int)+0x78>
c001535b:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015360:	85 c0                	test   eax,eax
c0015362:	75 14                	jne    c0015378 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015364:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015369:	83 e8 01             	sub    eax,0x1
c001536c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015371:	75 89                	jne    c00152fc <milliTenthSleepUntil(unsigned int)+0x10>
c0015373:	fb                   	sti    
c0015374:	83 c4 0c             	add    esp,0xc
c0015377:	c3                   	ret    
c0015378:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015382:	e8 e9 fc ff ff       	call   c0015070 <schedule()>
c0015387:	eb db                	jmp    c0015364 <milliTenthSleepUntil(unsigned int)+0x78>
c0015389:	8d 76 00             	lea    esi,[esi+0x0]

c001538c <milliTenthSleep(unsigned int)>:
c001538c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015390:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015395:	01 c2                	add    edx,eax
c0015397:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001539b:	e9 4c ff ff ff       	jmp    c00152ec <milliTenthSleepUntil(unsigned int)>

c00153a0 <sleep(unsigned int)>:
c00153a0:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00153a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153ac:	eb de                	jmp    c001538c <milliTenthSleep(unsigned int)>
c00153ae:	66 90                	xchg   ax,ax

c00153b0 <Semaphore::acquire()>:
c00153b0:	83 ec 0c             	sub    esp,0xc
c00153b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153b7:	fa                   	cli    
c00153b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153bd:	83 c0 01             	add    eax,0x1
c00153c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153c5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153ca:	8d 48 01             	lea    ecx,[eax+0x1]
c00153cd:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153d3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00153d6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00153d8:	7d 2e                	jge    c0015408 <Semaphore::acquire()+0x58>
c00153da:	83 c1 01             	add    ecx,0x1
c00153dd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153e0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153e5:	85 c0                	test   eax,eax
c00153e7:	75 0b                	jne    c00153f4 <Semaphore::acquire()+0x44>
c00153e9:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153ee:	85 c0                	test   eax,eax
c00153f0:	75 66                	jne    c0015458 <Semaphore::acquire()+0xa8>
c00153f2:	66 90                	xchg   ax,ax
c00153f4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153f9:	83 e8 01             	sub    eax,0x1
c00153fc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015401:	75 01                	jne    c0015404 <Semaphore::acquire()+0x54>
c0015403:	fb                   	sti    
c0015404:	83 c4 0c             	add    esp,0xc
c0015407:	c3                   	ret    
c0015408:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015414:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015417:	85 c9                	test   ecx,ecx
c0015419:	74 51                	je     c001546c <Semaphore::acquire()+0xbc>
c001541b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001541e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015424:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015427:	90                   	nop
c0015428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001542d:	83 ec 0c             	sub    esp,0xc
c0015430:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015433:	68 d4 12 02 c0       	push   0xc00212d4
c0015438:	e8 6d 55 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001543d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015444:	e8 27 fe ff ff       	call   c0015270 <blockTask(TaskState)>
c0015449:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001544e:	83 c4 10             	add    esp,0x10
c0015451:	83 e8 01             	sub    eax,0x1
c0015454:	eb 8a                	jmp    c00153e0 <Semaphore::acquire()+0x30>
c0015456:	66 90                	xchg   ax,ax
c0015458:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015462:	e8 09 fc ff ff       	call   c0015070 <schedule()>
c0015467:	eb 8b                	jmp    c00153f4 <Semaphore::acquire()+0x44>
c0015469:	8d 76 00             	lea    esi,[esi+0x0]
c001546c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015471:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015474:	eb b2                	jmp    c0015428 <Semaphore::acquire()+0x78>
c0015476:	66 90                	xchg   ax,ax

c0015478 <taskReturned>:
c0015478:	83 ec 18             	sub    esp,0x18
c001547b:	68 f4 12 02 c0       	push   0xc00212f4
c0015480:	e8 f0 b3 ff ff       	call   c0010875 <KePanic(char const*)>
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	83 ec 0c             	sub    esp,0xc
c001548b:	6a 02                	push   0x2
c001548d:	e8 de fd ff ff       	call   c0015270 <blockTask(TaskState)>
c0015492:	fa                   	cli    
c0015493:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015498:	83 c0 01             	add    eax,0x1
c001549b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154a0:	e8 cb fb ff ff       	call   c0015070 <schedule()>
c00154a5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	83 e8 01             	sub    eax,0x1
c00154b0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154b5:	85 c0                	test   eax,eax
c00154b7:	75 cf                	jne    c0015488 <taskReturned+0x10>
c00154b9:	fb                   	sti    
c00154ba:	eb cc                	jmp    c0015488 <taskReturned+0x10>

c00154bc <Thr::processFromPID(int)>:
c00154bc:	57                   	push   edi
c00154bd:	56                   	push   esi
c00154be:	53                   	push   ebx
c00154bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154c3:	fa                   	cli    
c00154c4:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	68 84 81 02 c0       	push   0xc0028184
c00154d2:	83 c1 01             	add    ecx,0x1
c00154d5:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00154db:	e8 4c 97 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	89 c7                	mov    edi,eax
c00154e5:	eb 15                	jmp    c00154fc <Thr::processFromPID(int)+0x40>
c00154e7:	90                   	nop
c00154e8:	83 ec 0c             	sub    esp,0xc
c00154eb:	68 84 81 02 c0       	push   0xc0028184
c00154f0:	e8 37 97 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	39 f8                	cmp    eax,edi
c00154fa:	74 50                	je     c001554c <Thr::processFromPID(int)+0x90>
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	68 84 81 02 c0       	push   0xc0028184
c0015504:	e8 23 97 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015509:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015510:	89 c3                	mov    ebx,eax
c0015512:	e8 1d 97 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015517:	58                   	pop    eax
c0015518:	5a                   	pop    edx
c0015519:	53                   	push   ebx
c001551a:	68 84 81 02 c0       	push   0xc0028184
c001551f:	e8 cc 97 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015524:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015527:	83 c4 10             	add    esp,0x10
c001552a:	39 30                	cmp    DWORD PTR [eax],esi
c001552c:	75 ba                	jne    c00154e8 <Thr::processFromPID(int)+0x2c>
c001552e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015533:	83 e8 01             	sub    eax,0x1
c0015536:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001553b:	74 0b                	je     c0015548 <Thr::processFromPID(int)+0x8c>
c001553d:	8d 76 00             	lea    esi,[esi+0x0]
c0015540:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015543:	90                   	nop
c0015544:	5b                   	pop    ebx
c0015545:	5e                   	pop    esi
c0015546:	5f                   	pop    edi
c0015547:	c3                   	ret    
c0015548:	fb                   	sti    
c0015549:	eb f5                	jmp    c0015540 <Thr::processFromPID(int)+0x84>
c001554b:	90                   	nop
c001554c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015551:	8d 50 ff             	lea    edx,[eax-0x1]
c0015554:	31 c0                	xor    eax,eax
c0015556:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001555c:	85 d2                	test   edx,edx
c001555e:	75 e4                	jne    c0015544 <Thr::processFromPID(int)+0x88>
c0015560:	fb                   	sti    
c0015561:	5b                   	pop    ebx
c0015562:	5e                   	pop    esi
c0015563:	5f                   	pop    edi
c0015564:	c3                   	ret    
c0015565:	8d 76 00             	lea    esi,[esi+0x0]

c0015568 <unblockTask(ThreadControlBlock*)>:
c0015568:	53                   	push   ebx
c0015569:	83 ec 08             	sub    esp,0x8
c001556c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015570:	fa                   	cli    
c0015571:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015576:	83 c0 01             	add    eax,0x1
c0015579:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001557e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015581:	85 c0                	test   eax,eax
c0015583:	74 67                	je     c00155ec <unblockTask(ThreadControlBlock*)+0x84>
c0015585:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015588:	83 f8 01             	cmp    eax,0x1
c001558b:	74 37                	je     c00155c4 <unblockTask(ThreadControlBlock*)+0x5c>
c001558d:	83 ec 0c             	sub    esp,0xc
c0015590:	68 84 81 02 c0       	push   0xc0028184
c0015595:	e8 92 96 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001559a:	83 c4 10             	add    esp,0x10
c001559d:	85 c0                	test   eax,eax
c001559f:	75 1b                	jne    c00155bc <unblockTask(ThreadControlBlock*)+0x54>
c00155a1:	eb 5d                	jmp    c0015600 <unblockTask(ThreadControlBlock*)+0x98>
c00155a3:	90                   	nop
c00155a4:	83 ec 08             	sub    esp,0x8
c00155a7:	50                   	push   eax
c00155a8:	68 84 81 02 c0       	push   0xc0028184
c00155ad:	e8 9a 99 00 00       	call   c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00155b2:	83 c4 10             	add    esp,0x10
c00155b5:	85 c0                	test   eax,eax
c00155b7:	74 47                	je     c0015600 <unblockTask(ThreadControlBlock*)+0x98>
c00155b9:	8d 76 00             	lea    esi,[esi+0x0]
c00155bc:	39 c3                	cmp    ebx,eax
c00155be:	75 e4                	jne    c00155a4 <unblockTask(ThreadControlBlock*)+0x3c>
c00155c0:	eb 12                	jmp    c00155d4 <unblockTask(ThreadControlBlock*)+0x6c>
c00155c2:	66 90                	xchg   ax,ax
c00155c4:	83 ec 0c             	sub    esp,0xc
c00155c7:	68 73 12 02 c0       	push   0xc0021273
c00155cc:	e8 d9 53 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155d9:	83 e8 01             	sub    eax,0x1
c00155dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155e1:	75 01                	jne    c00155e4 <unblockTask(ThreadControlBlock*)+0x7c>
c00155e3:	fb                   	sti    
c00155e4:	83 c4 08             	add    esp,0x8
c00155e7:	5b                   	pop    ebx
c00155e8:	c3                   	ret    
c00155e9:	8d 76 00             	lea    esi,[esi+0x0]
c00155ec:	83 ec 0c             	sub    esp,0xc
c00155ef:	68 5c 12 02 c0       	push   0xc002125c
c00155f4:	e8 b1 53 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	eb d6                	jmp    c00155d4 <unblockTask(ThreadControlBlock*)+0x6c>
c00155fe:	66 90                	xchg   ax,ax
c0015600:	83 ec 08             	sub    esp,0x8
c0015603:	53                   	push   ebx
c0015604:	68 84 81 02 c0       	push   0xc0028184
c0015609:	e8 e2 96 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	eb c1                	jmp    c00155d4 <unblockTask(ThreadControlBlock*)+0x6c>
c0015613:	90                   	nop

c0015614 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015614:	55                   	push   ebp
c0015615:	57                   	push   edi
c0015616:	56                   	push   esi
c0015617:	53                   	push   ebx
c0015618:	83 ec 1c             	sub    esp,0x1c
c001561b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001561f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015622:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015628:	85 ed                	test   ebp,ebp
c001562a:	7e 28                	jle    c0015654 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001562c:	31 f6                	xor    esi,esi
c001562e:	66 90                	xchg   ax,ax
c0015630:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015637:	83 ec 0c             	sub    esp,0xc
c001563a:	83 c6 01             	add    esi,0x1
c001563d:	57                   	push   edi
c001563e:	e8 98 24 ff ff       	call   c0007adb <free>
c0015643:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015646:	83 c4 10             	add    esp,0x10
c0015649:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001564f:	7f df                	jg     c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015651:	8d 76 00             	lea    esi,[esi+0x0]
c0015654:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001565e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015663:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015666:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015669:	d3 c0                	rol    eax,cl
c001566b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015672:	21 c8                	and    eax,ecx
c0015674:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001567b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001567e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015686:	89 f7                	mov    edi,esi
c0015688:	0f 85 72 01 00 00    	jne    c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001568e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015694:	85 ed                	test   ebp,ebp
c0015696:	74 1c                	je     c00156b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015698:	83 ec 0c             	sub    esp,0xc
c001569b:	55                   	push   ebp
c001569c:	e8 e5 ae ff ff       	call   c0010586 <EnvVarContainer::~EnvVarContainer()>
c00156a1:	59                   	pop    ecx
c00156a2:	5e                   	pop    esi
c00156a3:	6a 0c                	push   0xc
c00156a5:	55                   	push   ebp
c00156a6:	e8 01 52 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c00156ab:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156ae:	83 c4 10             	add    esp,0x10
c00156b1:	89 f7                	mov    edi,esi
c00156b3:	90                   	nop
c00156b4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156ba:	85 c0                	test   eax,eax
c00156bc:	0f 84 b2 00 00 00    	je     c0015774 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156c2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00156c5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00156c9:	31 c9                	xor    ecx,ecx
c00156cb:	eb 17                	jmp    c00156e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00156cd:	8d 76 00             	lea    esi,[esi+0x0]
c00156d0:	83 c1 01             	add    ecx,0x1
c00156d3:	83 f9 10             	cmp    ecx,0x10
c00156d6:	0f 84 98 00 00 00    	je     c0015774 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156dc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156e2:	66 90                	xchg   ax,ax
c00156e4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156eb:	d3 fa                	sar    edx,cl
c00156ed:	80 e2 01             	and    dl,0x1
c00156f0:	74 de                	je     c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156f2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00156f5:	c1 e2 05             	shl    edx,0x5
c00156f8:	29 ca                	sub    edx,ecx
c00156fa:	01 d0                	add    eax,edx
c00156fc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015702:	83 fd 07             	cmp    ebp,0x7
c0015705:	75 c9                	jne    c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015707:	05 40 02 00 00       	add    eax,0x240
c001570c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001570f:	83 fd ff             	cmp    ebp,0xffffffff
c0015712:	0f 8c f0 00 00 00    	jl     c0015808 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015718:	0f 84 ae 01 00 00    	je     c00158cc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001571e:	85 ed                	test   ebp,ebp
c0015720:	0f 84 92 01 00 00    	je     c00158b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015726:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015728:	75 a6                	jne    c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001572a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001572e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015734:	01 d0                	add    eax,edx
c0015736:	66 90                	xchg   ax,ax
c0015738:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015745:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015748:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001574e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015755:	50                   	push   eax
c0015756:	e8 0d fe ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c001575b:	83 c4 10             	add    esp,0x10
c001575e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015761:	89 f7                	mov    edi,esi
c0015763:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015767:	83 c1 01             	add    ecx,0x1
c001576a:	83 f9 10             	cmp    ecx,0x10
c001576d:	0f 85 69 ff ff ff    	jne    c00156dc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015773:	90                   	nop
c0015774:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001577a:	85 c0                	test   eax,eax
c001577c:	74 62                	je     c00157e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001577e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015784:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001578a:	74 54                	je     c00157e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001578c:	83 ec 0c             	sub    esp,0xc
c001578f:	68 84 81 02 c0       	push   0xc0028184
c0015794:	e8 93 94 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015799:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157a0:	89 c7                	mov    edi,eax
c00157a2:	e8 69 94 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157a7:	83 c4 10             	add    esp,0x10
c00157aa:	84 c0                	test   al,al
c00157ac:	0f 84 ce 00 00 00    	je     c0015880 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00157b2:	66 90                	xchg   ax,ax
c00157b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157b7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157bd:	85 d2                	test   edx,edx
c00157bf:	74 0f                	je     c00157d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00157c1:	8b 02                	mov    eax,DWORD PTR [edx]
c00157c3:	83 ec 0c             	sub    esp,0xc
c00157c6:	52                   	push   edx
c00157c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157ca:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157cd:	83 c4 10             	add    esp,0x10
c00157d0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00157da:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157dd:	8d 76 00             	lea    esi,[esi+0x0]
c00157e0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157e6:	85 db                	test   ebx,ebx
c00157e8:	74 16                	je     c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157ea:	83 ec 0c             	sub    esp,0xc
c00157ed:	53                   	push   ebx
c00157ee:	e8 83 43 ff ff       	call   c0009b76 <VAS::~VAS()>
c00157f3:	58                   	pop    eax
c00157f4:	5a                   	pop    edx
c00157f5:	6a 14                	push   0x14
c00157f7:	53                   	push   ebx
c00157f8:	e8 af 50 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c00157fd:	83 c4 10             	add    esp,0x10
c0015800:	83 c4 1c             	add    esp,0x1c
c0015803:	5b                   	pop    ebx
c0015804:	5e                   	pop    esi
c0015805:	5f                   	pop    edi
c0015806:	5d                   	pop    ebp
c0015807:	c3                   	ret    
c0015808:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001580c:	83 ec 0c             	sub    esp,0xc
c001580f:	68 28 13 02 c0       	push   0xc0021328
c0015814:	e8 5c b0 ff ff       	call   c0010875 <KePanic(char const*)>
c0015819:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001581c:	83 c4 10             	add    esp,0x10
c001581f:	89 f7                	mov    edi,esi
c0015821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015825:	e9 a6 fe ff ff       	jmp    c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001582a:	66 90                	xchg   ax,ax
c001582c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015832:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015838:	75 1e                	jne    c0015858 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001583a:	83 ec 0c             	sub    esp,0xc
c001583d:	68 90 13 02 c0       	push   0xc0021390
c0015842:	e8 63 51 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0015847:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001584e:	e8 1d fa ff ff       	call   c0015270 <blockTask(TaskState)>
c0015853:	83 c4 10             	add    esp,0x10
c0015856:	66 90                	xchg   ax,ax
c0015858:	83 ec 08             	sub    esp,0x8
c001585b:	56                   	push   esi
c001585c:	68 84 81 02 c0       	push   0xc0028184
c0015861:	e8 8a 94 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015866:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001586d:	e8 ba 93 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015872:	83 c4 10             	add    esp,0x10
c0015875:	39 f8                	cmp    eax,edi
c0015877:	0f 84 37 ff ff ff    	je     c00157b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001587d:	8d 76 00             	lea    esi,[esi+0x0]
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	68 84 81 02 c0       	push   0xc0028184
c0015888:	e8 9f 93 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001588d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015894:	89 c6                	mov    esi,eax
c0015896:	e8 99 93 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001589b:	83 c4 10             	add    esp,0x10
c001589e:	39 f3                	cmp    ebx,esi
c00158a0:	74 b6                	je     c0015858 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00158a2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00158a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158a8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00158ae:	75 a8                	jne    c0015858 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00158b0:	e9 77 ff ff ff       	jmp    c001582c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00158b5:	8d 76 00             	lea    esi,[esi+0x0]
c00158b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	68 5c 13 02 c0       	push   0xc002135c
c00158c4:	e9 4b ff ff ff       	jmp    c0015814 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158c9:	8d 76 00             	lea    esi,[esi+0x0]
c00158cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158d0:	8b 36                	mov    esi,DWORD PTR [esi]
c00158d2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00158d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158d8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158de:	01 d7                	add    edi,edx
c00158e0:	89 f8                	mov    eax,edi
c00158e2:	e9 51 fe ff ff       	jmp    c0015738 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158e7:	90                   	nop

c00158e8 <cleanerTaskFunction(void*)>:
c00158e8:	53                   	push   ebx
c00158e9:	83 ec 08             	sub    esp,0x8
c00158ec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158f1:	83 e8 01             	sub    eax,0x1
c00158f4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158f9:	75 01                	jne    c00158fc <cleanerTaskFunction(void*)+0x14>
c00158fb:	fb                   	sti    
c00158fc:	fa                   	cli    
c00158fd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015902:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015909:	8d 50 01             	lea    edx,[eax+0x1]
c001590c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015912:	0f 84 c4 00 00 00    	je     c00159dc <cleanerTaskFunction(void*)+0xf4>
c0015918:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001591d:	85 c0                	test   eax,eax
c001591f:	75 03                	jne    c0015924 <cleanerTaskFunction(void*)+0x3c>
c0015921:	fb                   	sti    
c0015922:	66 90                	xchg   ax,ax
c0015924:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c001592b:	fa                   	cli    
c001592c:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015932:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015938:	83 c2 01             	add    edx,0x1
c001593b:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015941:	83 c1 01             	add    ecx,0x1
c0015944:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001594a:	fa                   	cli    
c001594b:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015951:	83 c3 01             	add    ebx,0x1
c0015954:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c001595a:	eb 28                	jmp    c0015984 <cleanerTaskFunction(void*)+0x9c>
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	68 6c 81 02 c0       	push   0xc002816c
c0015964:	e8 c3 92 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015969:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015970:	89 c3                	mov    ebx,eax
c0015972:	e8 bd 92 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015977:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001597a:	e8 95 fc ff ff       	call   c0015614 <cleanupTerminatedTask(ThreadControlBlock*)>
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	66 90                	xchg   ax,ax
c0015984:	83 ec 0c             	sub    esp,0xc
c0015987:	68 6c 81 02 c0       	push   0xc002816c
c001598c:	e8 7f 92 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015991:	83 c4 10             	add    esp,0x10
c0015994:	84 c0                	test   al,al
c0015996:	74 c4                	je     c001595c <cleanerTaskFunction(void*)+0x74>
c0015998:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001599d:	83 e8 01             	sub    eax,0x1
c00159a0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159a5:	75 01                	jne    c00159a8 <cleanerTaskFunction(void*)+0xc0>
c00159a7:	fb                   	sti    
c00159a8:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159ad:	83 e8 01             	sub    eax,0x1
c00159b0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00159b5:	0f 85 31 ff ff ff    	jne    c00158ec <cleanerTaskFunction(void*)+0x4>
c00159bb:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00159c0:	85 c0                	test   eax,eax
c00159c2:	0f 84 24 ff ff ff    	je     c00158ec <cleanerTaskFunction(void*)+0x4>
c00159c8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159d2:	e8 99 f6 ff ff       	call   c0015070 <schedule()>
c00159d7:	e9 10 ff ff ff       	jmp    c00158ec <cleanerTaskFunction(void*)+0x4>
c00159dc:	83 ec 0c             	sub    esp,0xc
c00159df:	6a 02                	push   0x2
c00159e1:	e8 62 f8 ff ff       	call   c0015248 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	e9 36 ff ff ff       	jmp    c0015924 <cleanerTaskFunction(void*)+0x3c>
c00159ee:	66 90                	xchg   ax,ax

c00159f0 <terminateTask(int)>:
c00159f0:	83 ec 14             	sub    esp,0x14
c00159f3:	fa                   	cli    
c00159f4:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159fa:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015a00:	83 c2 01             	add    edx,0x1
c0015a03:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015a09:	83 c1 01             	add    ecx,0x1
c0015a0c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a12:	fa                   	cli    
c0015a13:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015a1c:	83 c0 01             	add    eax,0x1
c0015a1f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a29:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a31:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a34:	50                   	push   eax
c0015a35:	68 6c 81 02 c0       	push   0xc002816c
c0015a3a:	e8 b1 92 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a4e:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a53:	85 c0                	test   eax,eax
c0015a55:	74 65                	je     c0015abc <terminateTask(int)+0xcc>
c0015a57:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a5e:	83 ec 0c             	sub    esp,0xc
c0015a61:	50                   	push   eax
c0015a62:	e8 01 fb ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015a67:	83 c4 10             	add    esp,0x10
c0015a6a:	66 90                	xchg   ax,ax
c0015a6c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a71:	83 e8 01             	sub    eax,0x1
c0015a74:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a79:	75 01                	jne    c0015a7c <terminateTask(int)+0x8c>
c0015a7b:	fb                   	sti    
c0015a7c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a81:	83 e8 01             	sub    eax,0x1
c0015a84:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a89:	75 09                	jne    c0015a94 <terminateTask(int)+0xa4>
c0015a8b:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a92:	75 3c                	jne    c0015ad0 <terminateTask(int)+0xe0>
c0015a94:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a99:	83 e8 01             	sub    eax,0x1
c0015a9c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015aa1:	75 01                	jne    c0015aa4 <terminateTask(int)+0xb4>
c0015aa3:	fb                   	sti    
c0015aa4:	fa                   	cli    
c0015aa5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aaa:	83 c0 01             	add    eax,0x1
c0015aad:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ab2:	66 90                	xchg   ax,ax
c0015ab4:	e8 b7 f5 ff ff       	call   c0015070 <schedule()>
c0015ab9:	eb d9                	jmp    c0015a94 <terminateTask(int)+0xa4>
c0015abb:	90                   	nop
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	68 8a 12 02 c0       	push   0xc002128a
c0015ac4:	e8 e1 4e ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0015ac9:	83 c4 10             	add    esp,0x10
c0015acc:	eb 9e                	jmp    c0015a6c <terminateTask(int)+0x7c>
c0015ace:	66 90                	xchg   ax,ax
c0015ad0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ada:	eb d8                	jmp    c0015ab4 <terminateTask(int)+0xc4>

c0015adc <Thr::terminateFromIRQ(int)>:
c0015adc:	83 ec 18             	sub    esp,0x18
c0015adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ae3:	50                   	push   eax
c0015ae4:	e8 07 ff ff ff       	call   c00159f0 <terminateTask(int)>
c0015ae9:	90                   	nop
c0015aea:	66 90                	xchg   ax,ax

c0015aec <Semaphore::release()>:
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015af3:	fa                   	cli    
c0015af4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015af9:	83 c0 01             	add    eax,0x1
c0015afc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b01:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b06:	8d 48 01             	lea    ecx,[eax+0x1]
c0015b09:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015b0f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015b12:	85 c9                	test   ecx,ecx
c0015b14:	74 42                	je     c0015b58 <Semaphore::release()+0x6c>
c0015b16:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015b19:	83 ec 0c             	sub    esp,0xc
c0015b1c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b1f:	51                   	push   ecx
c0015b20:	e8 43 fa ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015b25:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	83 e8 01             	sub    eax,0x1
c0015b30:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b35:	85 c0                	test   eax,eax
c0015b37:	75 0b                	jne    c0015b44 <Semaphore::release()+0x58>
c0015b39:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b3e:	85 c0                	test   eax,eax
c0015b40:	75 22                	jne    c0015b64 <Semaphore::release()+0x78>
c0015b42:	66 90                	xchg   ax,ax
c0015b44:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b49:	83 e8 01             	sub    eax,0x1
c0015b4c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b51:	75 01                	jne    c0015b54 <Semaphore::release()+0x68>
c0015b53:	fb                   	sti    
c0015b54:	83 c4 0c             	add    esp,0xc
c0015b57:	c3                   	ret    
c0015b58:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b5b:	83 e9 01             	sub    ecx,0x1
c0015b5e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b61:	eb cd                	jmp    c0015b30 <Semaphore::release()+0x44>
c0015b63:	90                   	nop
c0015b64:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b6e:	e8 fd f4 ff ff       	call   c0015070 <schedule()>
c0015b73:	eb cf                	jmp    c0015b44 <Semaphore::release()+0x58>
c0015b75:	8d 76 00             	lea    esi,[esi+0x0]

c0015b78 <__static_initialization_and_destruction_0(int, int)>:
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b80:	0f 85 8e 00 00 00    	jne    c0015c14 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b86:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b8e:	0f 85 80 00 00 00    	jne    c0015c14 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b94:	83 ec 0c             	sub    esp,0xc
c0015b97:	68 84 81 02 c0       	push   0xc0028184
c0015b9c:	e8 03 94 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ba1:	83 c4 10             	add    esp,0x10
c0015ba4:	83 ec 04             	sub    esp,0x4
c0015ba7:	68 24 1f 02 c0       	push   0xc0021f24
c0015bac:	68 84 81 02 c0       	push   0xc0028184
c0015bb1:	68 54 ef 01 c0       	push   0xc001ef54
c0015bb6:	e8 a1 4c ff ff       	call   c000a85c <__cxa_atexit>
c0015bbb:	83 c4 10             	add    esp,0x10
c0015bbe:	83 ec 0c             	sub    esp,0xc
c0015bc1:	68 78 81 02 c0       	push   0xc0028178
c0015bc6:	e8 d9 93 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	83 ec 04             	sub    esp,0x4
c0015bd1:	68 24 1f 02 c0       	push   0xc0021f24
c0015bd6:	68 78 81 02 c0       	push   0xc0028178
c0015bdb:	68 54 ef 01 c0       	push   0xc001ef54
c0015be0:	e8 77 4c ff ff       	call   c000a85c <__cxa_atexit>
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	83 ec 0c             	sub    esp,0xc
c0015beb:	68 6c 81 02 c0       	push   0xc002816c
c0015bf0:	e8 af 93 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bf5:	83 c4 10             	add    esp,0x10
c0015bf8:	83 ec 04             	sub    esp,0x4
c0015bfb:	68 24 1f 02 c0       	push   0xc0021f24
c0015c00:	68 6c 81 02 c0       	push   0xc002816c
c0015c05:	68 54 ef 01 c0       	push   0xc001ef54
c0015c0a:	e8 4d 4c ff ff       	call   c000a85c <__cxa_atexit>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	66 90                	xchg   ax,ax
c0015c14:	90                   	nop
c0015c15:	83 c4 0c             	add    esp,0xc
c0015c18:	c3                   	ret    
c0015c19:	8d 76 00             	lea    esi,[esi+0x0]

c0015c1c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	83 ec 08             	sub    esp,0x8
c0015c22:	68 ff ff 00 00       	push   0xffff
c0015c27:	6a 01                	push   0x1
c0015c29:	e8 4a ff ff ff       	call   c0015b78 <__static_initialization_and_destruction_0(int, int)>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	83 c4 0c             	add    esp,0xc
c0015c34:	c3                   	ret    

c0015c35 <Vm::inbv(unsigned short)>:
c0015c35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c39:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c3e:	75 06                	jne    c0015c46 <Vm::inbv(unsigned short)+0x11>
c0015c40:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c45:	c3                   	ret    
c0015c46:	ec                   	in     al,dx
c0015c47:	c3                   	ret    

c0015c48 <Vm::outbv(unsigned short, unsigned char)>:
c0015c48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c50:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c55:	75 25                	jne    c0015c7c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c57:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c5d:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c63:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c66:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c6c:	83 fa 20             	cmp    edx,0x20
c0015c6f:	75 0c                	jne    c0015c7d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c71:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c7b:	c3                   	ret    
c0015c7c:	ee                   	out    dx,al
c0015c7d:	c3                   	ret    

c0015c7e <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c7e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c83:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c88:	c1 e0 04             	shl    eax,0x4
c0015c8b:	01 d0                	add    eax,edx
c0015c8d:	c3                   	ret    

c0015c8e <Vm::getSegment(unsigned int)>:
c0015c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c92:	c1 e8 10             	shr    eax,0x10
c0015c95:	c3                   	ret    

c0015c96 <Vm::getOffset(unsigned int)>:
c0015c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c9a:	c3                   	ret    

c0015c9b <Vm::mainloop2()>:
c0015c9b:	83 ec 18             	sub    esp,0x18
c0015c9e:	fa                   	cli    
c0015c9f:	6a 02                	push   0x2
c0015ca1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ca7:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015cae:	e8 95 f5 ff ff       	call   c0015248 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015cbc:	52                   	push   edx
c0015cbd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015cc1:	52                   	push   edx
c0015cc2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015cc6:	52                   	push   edx
c0015cc7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ccb:	50                   	push   eax
c0015ccc:	e8 3e a5 fe ff       	call   c000020f <goToVM86>
c0015cd1:	83 c4 2c             	add    esp,0x2c
c0015cd4:	c3                   	ret    

c0015cd5 <Vm::mainVm8086Loop(void*)>:
c0015cd5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cda:	48                   	dec    eax
c0015cdb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ce0:	75 01                	jne    c0015ce3 <Vm::mainVm8086Loop(void*)+0xe>
c0015ce2:	fb                   	sti    
c0015ce3:	eb b6                	jmp    c0015c9b <Vm::mainloop2()>

c0015ce5 <Vm::mainloop3(unsigned long)>:
c0015ce5:	83 ec 18             	sub    esp,0x18
c0015ce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cec:	fa                   	cli    
c0015ced:	6a 02                	push   0x2
c0015cef:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cf5:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cfc:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015d01:	e8 42 f5 ff ff       	call   c0015248 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d06:	83 c4 1c             	add    esp,0x1c
c0015d09:	eb 90                	jmp    c0015c9b <Vm::mainloop2()>

c0015d0b <Vm::initialise8086()>:
c0015d0b:	83 ec 0c             	sub    esp,0xc
c0015d0e:	68 80 00 00 00       	push   0x80
c0015d13:	6a 00                	push   0x0
c0015d15:	68 d5 5c 01 c0       	push   0xc0015cd5
c0015d1a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015d20:	e8 ff f0 ff ff       	call   c0014e24 <Process::createThread(void (*)(void*), void*, int)>
c0015d25:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d2c:	68 00 01 00 00       	push   0x100
c0015d31:	6a 00                	push   0x0
c0015d33:	6a 00                	push   0x0
c0015d35:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d3a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d3f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d45:	e8 b4 42 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d4a:	83 c4 2c             	add    esp,0x2c
c0015d4d:	c3                   	ret    

c0015d4e <Vm::finish8086()>:
c0015d4e:	53                   	push   ebx
c0015d4f:	83 ec 08             	sub    esp,0x8
c0015d52:	fa                   	cli    
c0015d53:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d59:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d60:	75 15                	jne    c0015d77 <Vm::finish8086()+0x29>
c0015d62:	e8 09 f3 ff ff       	call   c0015070 <schedule()>
c0015d67:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d6c:	48                   	dec    eax
c0015d6d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d72:	75 de                	jne    c0015d52 <Vm::finish8086()+0x4>
c0015d74:	fb                   	sti    
c0015d75:	eb db                	jmp    c0015d52 <Vm::finish8086()+0x4>
c0015d77:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d87:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d8d:	e8 d6 f7 ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015d92:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d97:	83 c4 10             	add    esp,0x10
c0015d9a:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d9d:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015da3:	85 d2                	test   edx,edx
c0015da5:	75 01                	jne    c0015da8 <Vm::finish8086()+0x5a>
c0015da7:	fb                   	sti    
c0015da8:	83 c4 08             	add    esp,0x8
c0015dab:	89 d8                	mov    eax,ebx
c0015dad:	5b                   	pop    ebx
c0015dae:	c3                   	ret    

c0015daf <Vm::getOutput8086(unsigned char*)>:
c0015daf:	57                   	push   edi
c0015db0:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015db6:	56                   	push   esi
c0015db7:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015dbc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015dc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015dc2:	5e                   	pop    esi
c0015dc3:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015dc8:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015dd2:	5f                   	pop    edi
c0015dd3:	c3                   	ret    

c0015dd4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015dd4:	55                   	push   ebp
c0015dd5:	57                   	push   edi
c0015dd6:	56                   	push   esi
c0015dd7:	53                   	push   ebx
c0015dd8:	83 ec 0c             	sub    esp,0xc
c0015ddb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015ddf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015de3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015de7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015deb:	fa                   	cli    
c0015dec:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015df2:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015df9:	75 15                	jne    c0015e10 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015dfb:	e8 70 f2 ff ff       	call   c0015070 <schedule()>
c0015e00:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e05:	48                   	dec    eax
c0015e06:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e0b:	75 de                	jne    c0015deb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e0d:	fb                   	sti    
c0015e0e:	eb db                	jmp    c0015deb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e10:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e1a:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e1f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e23:	0f b7 ff             	movzx  edi,di
c0015e26:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e2a:	0f b7 f6             	movzx  esi,si
c0015e2d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e31:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e35:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e39:	50                   	push   eax
c0015e3a:	6a 20                	push   0x20
c0015e3c:	6a 00                	push   0x0
c0015e3e:	68 e0 81 02 c0       	push   0xc00281e0
c0015e43:	e8 a8 a6 fe ff       	call   c00004f0 <memset>
c0015e48:	5a                   	pop    edx
c0015e49:	59                   	pop    ecx
c0015e4a:	57                   	push   edi
c0015e4b:	56                   	push   esi
c0015e4c:	e8 2d fe ff ff       	call   c0015c7e <Vm::realToLinear(unsigned short, unsigned short)>
c0015e51:	83 c4 10             	add    esp,0x10
c0015e54:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e58:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e5c:	89 c7                	mov    edi,eax
c0015e5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e60:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e67:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e6c:	48                   	dec    eax
c0015e6d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e72:	75 01                	jne    c0015e75 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e74:	fb                   	sti    
c0015e75:	83 ec 0c             	sub    esp,0xc
c0015e78:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e7e:	e8 e5 f6 ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015e83:	83 c4 1c             	add    esp,0x1c
c0015e86:	b0 01                	mov    al,0x1
c0015e88:	5b                   	pop    ebx
c0015e89:	5e                   	pop    esi
c0015e8a:	5f                   	pop    edi
c0015e8b:	5d                   	pop    ebp
c0015e8c:	c3                   	ret    

c0015e8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e8d:	55                   	push   ebp
c0015e8e:	57                   	push   edi
c0015e8f:	56                   	push   esi
c0015e90:	53                   	push   ebx
c0015e91:	83 ec 2c             	sub    esp,0x2c
c0015e94:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e98:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015e9c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015ea0:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015ea4:	fa                   	cli    
c0015ea5:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0015eab:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015eb1:	84 db                	test   bl,bl
c0015eb3:	75 1d                	jne    c0015ed2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x45>
c0015eb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015eb9:	e8 b2 f1 ff ff       	call   c0015070 <schedule()>
c0015ebe:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ec3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ec7:	48                   	dec    eax
c0015ec8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ecd:	75 d5                	jne    c0015ea4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015ecf:	fb                   	sti    
c0015ed0:	eb d2                	jmp    c0015ea4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015ed2:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015edc:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015ee1:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ee5:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0015ee9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015eed:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015ef1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ef5:	50                   	push   eax
c0015ef6:	6a 20                	push   0x20
c0015ef8:	6a 00                	push   0x0
c0015efa:	68 e0 81 02 c0       	push   0xc00281e0
c0015eff:	e8 ec a5 fe ff       	call   c00004f0 <memset>
c0015f04:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f0b:	e8 bb 1b ff ff       	call   c0007acb <malloc>
c0015f10:	83 c4 0c             	add    esp,0xc
c0015f13:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015f19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015f1d:	89 c5                	mov    ebp,eax
c0015f1f:	50                   	push   eax
c0015f20:	e8 2d 50 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	85 ed                	test   ebp,ebp
c0015f2a:	75 0a                	jne    c0015f36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015f2c:	83 ec 0c             	sub    esp,0xc
c0015f2f:	68 b8 13 02 c0       	push   0xc00213b8
c0015f34:	eb 2b                	jmp    c0015f61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0015f36:	50                   	push   eax
c0015f37:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f3b:	50                   	push   eax
c0015f3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f40:	50                   	push   eax
c0015f41:	55                   	push   ebp
c0015f42:	e8 73 53 ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c0015f47:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f4b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f4f:	83 c4 10             	add    esp,0x10
c0015f52:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f57:	74 27                	je     c0015f80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf3>
c0015f59:	83 ec 0c             	sub    esp,0xc
c0015f5c:	68 cc 13 02 c0       	push   0xc00213cc
c0015f61:	e8 0f a9 ff ff       	call   c0010875 <KePanic(char const*)>
c0015f66:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f6b:	83 c4 10             	add    esp,0x10
c0015f6e:	48                   	dec    eax
c0015f6f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f74:	85 c0                	test   eax,eax
c0015f76:	75 01                	jne    c0015f79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f78:	fb                   	sti    
c0015f79:	31 db                	xor    ebx,ebx
c0015f7b:	e9 90 00 00 00       	jmp    c0016010 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f80:	51                   	push   ecx
c0015f81:	51                   	push   ecx
c0015f82:	6a 01                	push   0x1
c0015f84:	55                   	push   ebp
c0015f85:	e8 84 50 ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	85 c0                	test   eax,eax
c0015f8f:	74 26                	je     c0015fb7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12a>
c0015f91:	83 ec 0c             	sub    esp,0xc
c0015f94:	68 e5 13 02 c0       	push   0xc00213e5
c0015f99:	e8 d7 a8 ff ff       	call   c0010875 <KePanic(char const*)>
c0015f9e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fa3:	83 c4 10             	add    esp,0x10
c0015fa6:	48                   	dec    eax
c0015fa7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fac:	85 c0                	test   eax,eax
c0015fae:	75 c9                	jne    c0015f79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015fb0:	fb                   	sti    
c0015fb1:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0015fb5:	eb 59                	jmp    c0016010 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015fb7:	50                   	push   eax
c0015fb8:	0f b7 ff             	movzx  edi,di
c0015fbb:	50                   	push   eax
c0015fbc:	0f b7 f6             	movzx  esi,si
c0015fbf:	57                   	push   edi
c0015fc0:	56                   	push   esi
c0015fc1:	e8 b8 fc ff ff       	call   c0015c7e <Vm::realToLinear(unsigned short, unsigned short)>
c0015fc6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fc9:	5a                   	pop    edx
c0015fca:	8d 74 24 20          	lea    esi,[esp+0x20]
c0015fce:	56                   	push   esi
c0015fcf:	50                   	push   eax
c0015fd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fd4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fd8:	55                   	push   ebp
c0015fd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fdc:	83 c4 14             	add    esp,0x14
c0015fdf:	55                   	push   ebp
c0015fe0:	e8 87 50 ff ff       	call   c000b06c <File::close()>
c0015fe5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fea:	83 c4 10             	add    esp,0x10
c0015fed:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015ff4:	48                   	dec    eax
c0015ff5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ffa:	85 c0                	test   eax,eax
c0015ffc:	75 01                	jne    c0015fff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0015ffe:	fb                   	sti    
c0015fff:	83 ec 0c             	sub    esp,0xc
c0016002:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016008:	e8 5b f5 ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c001600d:	83 c4 10             	add    esp,0x10
c0016010:	83 c4 2c             	add    esp,0x2c
c0016013:	88 d8                	mov    al,bl
c0016015:	5b                   	pop    ebx
c0016016:	5e                   	pop    esi
c0016017:	5f                   	pop    edi
c0016018:	5d                   	pop    ebp
c0016019:	c3                   	ret    

c001601a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001601a:	57                   	push   edi
c001601b:	56                   	push   esi
c001601c:	53                   	push   ebx
c001601d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016021:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016025:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016029:	83 e8 06             	sub    eax,0x6
c001602c:	0f b7 c0             	movzx  eax,ax
c001602f:	50                   	push   eax
c0016030:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016035:	50                   	push   eax
c0016036:	e8 43 fc ff ff       	call   c0015c7e <Vm::realToLinear(unsigned short, unsigned short)>
c001603b:	5a                   	pop    edx
c001603c:	5e                   	pop    esi
c001603d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016040:	8d 56 fa             	lea    edx,[esi-0x6]
c0016043:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0016046:	81 e2 ff ff 00 00    	and    edx,0xffff
c001604c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001604f:	8d 56 02             	lea    edx,[esi+0x2]
c0016052:	66 89 10             	mov    WORD PTR [eax],dx
c0016055:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016058:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001605c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001605f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016063:	89 d6                	mov    esi,edx
c0016065:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001606b:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0016071:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016075:	74 05                	je     c001607c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0016077:	80 ce 02             	or     dh,0x2
c001607a:	89 d6                	mov    esi,edx
c001607c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016080:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016085:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016089:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016091:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016094:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001609c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001609f:	5b                   	pop    ebx
c00160a0:	5e                   	pop    esi
c00160a1:	5f                   	pop    edi
c00160a2:	c3                   	ret    

c00160a3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00160a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ad:	c1 e0 04             	shl    eax,0x4
c00160b0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00160b3:	c3                   	ret    

c00160b4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00160b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160be:	c1 e0 04             	shl    eax,0x4
c00160c1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00160c5:	c3                   	ret    

c00160c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00160c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160d0:	c1 e0 04             	shl    eax,0x4
c00160d3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00160d6:	c3                   	ret    

c00160d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00160d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00160e5:	c1 e0 04             	shl    eax,0x4
c00160e8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160eb:	c3                   	ret    

c00160ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160f1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160fa:	c1 e0 04             	shl    eax,0x4
c00160fd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016101:	c3                   	ret    

c0016102 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016102:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016107:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001610c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016110:	c1 e0 04             	shl    eax,0x4
c0016113:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016116:	c3                   	ret    

c0016117 <Vm::faultHandler(regs*)>:
c0016117:	55                   	push   ebp
c0016118:	57                   	push   edi
c0016119:	56                   	push   esi
c001611a:	53                   	push   ebx
c001611b:	83 ec 2c             	sub    esp,0x2c
c001611e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016122:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016125:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016129:	0f b7 f8             	movzx  edi,ax
c001612c:	0f b7 c0             	movzx  eax,ax
c001612f:	52                   	push   edx
c0016130:	50                   	push   eax
c0016131:	e8 48 fb ff ff       	call   c0015c7e <Vm::realToLinear(unsigned short, unsigned short)>
c0016136:	5a                   	pop    edx
c0016137:	59                   	pop    ecx
c0016138:	89 c1                	mov    ecx,eax
c001613a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001613d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016141:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016146:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001614a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001614d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016151:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016156:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001615a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001615e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016162:	e8 17 fb ff ff       	call   c0015c7e <Vm::realToLinear(unsigned short, unsigned short)>
c0016167:	5e                   	pop    esi
c0016168:	be 06 00 00 00       	mov    esi,0x6
c001616d:	5d                   	pop    ebp
c001616e:	31 ed                	xor    ebp,ebp
c0016170:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016175:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016178:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001617e:	0f 84 54 02 00 00    	je     c00163d8 <Vm::faultHandler(regs*)+0x2c1>
c0016184:	0f 87 94 00 00 00    	ja     c001621e <Vm::faultHandler(regs*)+0x107>
c001618a:	83 fa 66             	cmp    edx,0x66
c001618d:	0f 84 c2 01 00 00    	je     c0016355 <Vm::faultHandler(regs*)+0x23e>
c0016193:	77 47                	ja     c00161dc <Vm::faultHandler(regs*)+0xc5>
c0016195:	83 fa 36             	cmp    edx,0x36
c0016198:	0f 84 aa 01 00 00    	je     c0016348 <Vm::faultHandler(regs*)+0x231>
c001619e:	77 1a                	ja     c00161ba <Vm::faultHandler(regs*)+0xa3>
c00161a0:	83 fa 26             	cmp    edx,0x26
c00161a3:	0f 84 78 01 00 00    	je     c0016321 <Vm::faultHandler(regs*)+0x20a>
c00161a9:	83 fa 2e             	cmp    edx,0x2e
c00161ac:	0f 85 07 06 00 00    	jne    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c00161b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161b5:	31 f6                	xor    esi,esi
c00161b7:	41                   	inc    ecx
c00161b8:	eb bb                	jmp    c0016175 <Vm::faultHandler(regs*)+0x5e>
c00161ba:	83 fa 64             	cmp    edx,0x64
c00161bd:	0f 84 6b 01 00 00    	je     c001632e <Vm::faultHandler(regs*)+0x217>
c00161c3:	0f 87 72 01 00 00    	ja     c001633b <Vm::faultHandler(regs*)+0x224>
c00161c9:	83 fa 3e             	cmp    edx,0x3e
c00161cc:	0f 85 e7 05 00 00    	jne    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c00161d2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161d5:	be 01 00 00 00       	mov    esi,0x1
c00161da:	eb db                	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c00161dc:	83 fa 6d             	cmp    edx,0x6d
c00161df:	0f 84 14 03 00 00    	je     c00164f9 <Vm::faultHandler(regs*)+0x3e2>
c00161e5:	77 17                	ja     c00161fe <Vm::faultHandler(regs*)+0xe7>
c00161e7:	83 fa 67             	cmp    edx,0x67
c00161ea:	0f 84 72 01 00 00    	je     c0016362 <Vm::faultHandler(regs*)+0x24b>
c00161f0:	83 fa 6c             	cmp    edx,0x6c
c00161f3:	0f 84 91 02 00 00    	je     c001648a <Vm::faultHandler(regs*)+0x373>
c00161f9:	e9 bb 05 00 00       	jmp    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c00161fe:	83 fa 6f             	cmp    edx,0x6f
c0016201:	0f 84 20 04 00 00    	je     c0016627 <Vm::faultHandler(regs*)+0x510>
c0016207:	0f 82 82 03 00 00    	jb     c001658f <Vm::faultHandler(regs*)+0x478>
c001620d:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016213:	0f 84 56 01 00 00    	je     c001636f <Vm::faultHandler(regs*)+0x258>
c0016219:	e9 9b 05 00 00       	jmp    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c001621e:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016224:	0f 84 37 05 00 00    	je     c0016761 <Vm::faultHandler(regs*)+0x64a>
c001622a:	0f 87 89 00 00 00    	ja     c00162b9 <Vm::faultHandler(regs*)+0x1a2>
c0016230:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016236:	0f 84 b6 04 00 00    	je     c00166f2 <Vm::faultHandler(regs*)+0x5db>
c001623c:	77 58                	ja     c0016296 <Vm::faultHandler(regs*)+0x17f>
c001623e:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016244:	0f 84 ee 01 00 00    	je     c0016438 <Vm::faultHandler(regs*)+0x321>
c001624a:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016250:	0f 85 63 05 00 00    	jne    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c0016256:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016259:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001625c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016260:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016263:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0016267:	81 ca 00 02 02 00    	or     edx,0x20200
c001626d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016270:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016274:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001627a:	c1 e8 09             	shr    eax,0x9
c001627d:	83 e0 01             	and    eax,0x1
c0016280:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016283:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016286:	83 c0 06             	add    eax,0x6
c0016289:	25 ff ff 00 00       	and    eax,0xffff
c001628e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016291:	e9 1f 05 00 00       	jmp    c00167b5 <Vm::faultHandler(regs*)+0x69e>
c0016296:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001629c:	0f 84 95 04 00 00    	je     c0016737 <Vm::faultHandler(regs*)+0x620>
c00162a2:	0f 82 66 04 00 00    	jb     c001670e <Vm::faultHandler(regs*)+0x5f7>
c00162a8:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00162ae:	0f 84 9a 04 00 00    	je     c001674e <Vm::faultHandler(regs*)+0x637>
c00162b4:	e9 00 05 00 00       	jmp    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c00162b9:	81 fa ef 00 00 00    	cmp    edx,0xef
c00162bf:	0f 84 dd 04 00 00    	je     c00167a2 <Vm::faultHandler(regs*)+0x68b>
c00162c5:	77 2e                	ja     c00162f5 <Vm::faultHandler(regs*)+0x1de>
c00162c7:	81 fa ed 00 00 00    	cmp    edx,0xed
c00162cd:	0f 84 aa 04 00 00    	je     c001677d <Vm::faultHandler(regs*)+0x666>
c00162d3:	81 fa ee 00 00 00    	cmp    edx,0xee
c00162d9:	0f 85 da 04 00 00    	jne    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c00162df:	50                   	push   eax
c00162e0:	50                   	push   eax
c00162e1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162e5:	50                   	push   eax
c00162e6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162ea:	50                   	push   eax
c00162eb:	e8 58 f9 ff ff       	call   c0015c48 <Vm::outbv(unsigned short, unsigned char)>
c00162f0:	e9 a5 04 00 00       	jmp    c001679a <Vm::faultHandler(regs*)+0x683>
c00162f5:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162fb:	0f 84 6d 01 00 00    	je     c001646e <Vm::faultHandler(regs*)+0x357>
c0016301:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016307:	0f 84 6f 01 00 00    	je     c001647c <Vm::faultHandler(regs*)+0x365>
c001630d:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016313:	0f 85 a0 04 00 00    	jne    c00167b9 <Vm::faultHandler(regs*)+0x6a2>
c0016319:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001631c:	e9 96 fe ff ff       	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c0016321:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016324:	be 02 00 00 00       	mov    esi,0x2
c0016329:	e9 89 fe ff ff       	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c001632e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016331:	be 03 00 00 00       	mov    esi,0x3
c0016336:	e9 7c fe ff ff       	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c001633b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001633e:	be 04 00 00 00       	mov    esi,0x4
c0016343:	e9 6f fe ff ff       	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c0016348:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001634b:	be 05 00 00 00       	mov    esi,0x5
c0016350:	e9 62 fe ff ff       	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c0016355:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016358:	bd 01 00 00 00       	mov    ebp,0x1
c001635d:	e9 55 fe ff ff       	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c0016362:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016365:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001636a:	e9 48 fe ff ff       	jmp    c00161b7 <Vm::faultHandler(regs*)+0xa0>
c001636f:	83 e5 01             	and    ebp,0x1
c0016372:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016375:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016379:	74 30                	je     c00163ab <Vm::faultHandler(regs*)+0x294>
c001637b:	83 e9 04             	sub    ecx,0x4
c001637e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016384:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001638a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001638d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016390:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016396:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001639a:	0f 84 12 04 00 00    	je     c00167b2 <Vm::faultHandler(regs*)+0x69b>
c00163a0:	80 ce 02             	or     dh,0x2
c00163a3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00163a6:	e9 07 04 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c00163ab:	83 e9 02             	sub    ecx,0x2
c00163ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00163b4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00163b7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163bb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00163c1:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00163c5:	74 05                	je     c00163cc <Vm::faultHandler(regs*)+0x2b5>
c00163c7:	80 ce 02             	or     dh,0x2
c00163ca:	eb 03                	jmp    c00163cf <Vm::faultHandler(regs*)+0x2b8>
c00163cc:	80 e6 fd             	and    dh,0xfd
c00163cf:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163d3:	e9 da 03 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c00163d8:	83 e5 01             	and    ebp,0x1
c00163db:	74 2a                	je     c0016407 <Vm::faultHandler(regs*)+0x2f0>
c00163dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00163df:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163e5:	81 ca 00 02 02 00    	or     edx,0x20200
c00163eb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00163f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163f6:	c1 e8 09             	shr    eax,0x9
c00163f9:	83 e0 01             	and    eax,0x1
c00163fc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163ff:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016402:	83 c0 04             	add    eax,0x4
c0016405:	eb 24                	jmp    c001642b <Vm::faultHandler(regs*)+0x314>
c0016407:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001640a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016410:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016413:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016416:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001641c:	c1 e8 09             	shr    eax,0x9
c001641f:	83 e0 01             	and    eax,0x1
c0016422:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016425:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016428:	83 c0 02             	add    eax,0x2
c001642b:	25 ff ff 00 00       	and    eax,0xffff
c0016430:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016433:	e9 7a 03 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c0016438:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001643c:	3d ee 00 00 00       	cmp    eax,0xee
c0016441:	75 10                	jne    c0016453 <Vm::faultHandler(regs*)+0x33c>
c0016443:	83 ec 0c             	sub    esp,0xc
c0016446:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016449:	e8 97 f8 ff ff       	call   c0015ce5 <Vm::mainloop3(unsigned long)>
c001644e:	e9 4a 03 00 00       	jmp    c001679d <Vm::faultHandler(regs*)+0x686>
c0016453:	83 ec 0c             	sub    esp,0xc
c0016456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001645a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001645e:	51                   	push   ecx
c001645f:	50                   	push   eax
c0016460:	53                   	push   ebx
c0016461:	e8 b4 fb ff ff       	call   c001601a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016466:	83 c4 20             	add    esp,0x20
c0016469:	e9 47 03 00 00       	jmp    c00167b5 <Vm::faultHandler(regs*)+0x69e>
c001646e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016473:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016477:	e9 36 03 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c001647c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016481:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016485:	e9 28 03 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c001648a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001648f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016492:	74 2b                	je     c00164bf <Vm::faultHandler(regs*)+0x3a8>
c0016494:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001649b:	76 22                	jbe    c00164bf <Vm::faultHandler(regs*)+0x3a8>
c001649d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164a1:	50                   	push   eax
c00164a2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164a6:	50                   	push   eax
c00164a7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164ab:	50                   	push   eax
c00164ac:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164b0:	50                   	push   eax
c00164b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164b5:	50                   	push   eax
c00164b6:	6a 6c                	push   0x6c
c00164b8:	6a 6c                	push   0x6c
c00164ba:	e9 c0 01 00 00       	jmp    c001667f <Vm::faultHandler(regs*)+0x568>
c00164bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00164c3:	83 ec 0c             	sub    esp,0xc
c00164c6:	0f b7 f6             	movzx  esi,si
c00164c9:	50                   	push   eax
c00164ca:	e8 66 f7 ff ff       	call   c0015c35 <Vm::inbv(unsigned short)>
c00164cf:	83 c4 0c             	add    esp,0xc
c00164d2:	0f b6 c0             	movzx  eax,al
c00164d5:	50                   	push   eax
c00164d6:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00164da:	50                   	push   eax
c00164db:	56                   	push   esi
c00164dc:	e8 f6 fb ff ff       	call   c00160d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164e1:	83 c4 10             	add    esp,0x10
c00164e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164e7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164eb:	74 03                	je     c00164f0 <Vm::faultHandler(regs*)+0x3d9>
c00164ed:	48                   	dec    eax
c00164ee:	eb 01                	jmp    c00164f1 <Vm::faultHandler(regs*)+0x3da>
c00164f0:	40                   	inc    eax
c00164f1:	0f b7 c0             	movzx  eax,ax
c00164f4:	e9 8e 00 00 00       	jmp    c0016587 <Vm::faultHandler(regs*)+0x470>
c00164f9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164fe:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016501:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016504:	74 29                	je     c001652f <Vm::faultHandler(regs*)+0x418>
c0016506:	3d ff ff 00 00       	cmp    eax,0xffff
c001650b:	76 22                	jbe    c001652f <Vm::faultHandler(regs*)+0x418>
c001650d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016511:	50                   	push   eax
c0016512:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016516:	50                   	push   eax
c0016517:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001651b:	50                   	push   eax
c001651c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016520:	50                   	push   eax
c0016521:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016525:	50                   	push   eax
c0016526:	6a 6d                	push   0x6d
c0016528:	6a 6d                	push   0x6d
c001652a:	e9 50 01 00 00       	jmp    c001667f <Vm::faultHandler(regs*)+0x568>
c001652f:	83 e5 01             	and    ebp,0x1
c0016532:	0f b7 c8             	movzx  ecx,ax
c0016535:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016538:	0f b7 f6             	movzx  esi,si
c001653b:	74 1e                	je     c001655b <Vm::faultHandler(regs*)+0x444>
c001653d:	ed                   	in     eax,dx
c001653e:	55                   	push   ebp
c001653f:	50                   	push   eax
c0016540:	51                   	push   ecx
c0016541:	56                   	push   esi
c0016542:	e8 bb fb ff ff       	call   c0016102 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016547:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001654a:	83 c4 10             	add    esp,0x10
c001654d:	8d 50 04             	lea    edx,[eax+0x4]
c0016550:	83 e8 04             	sub    eax,0x4
c0016553:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016559:	eb 20                	jmp    c001657b <Vm::faultHandler(regs*)+0x464>
c001655b:	66 ed                	in     ax,dx
c001655d:	57                   	push   edi
c001655e:	0f b7 c0             	movzx  eax,ax
c0016561:	50                   	push   eax
c0016562:	51                   	push   ecx
c0016563:	56                   	push   esi
c0016564:	e8 83 fb ff ff       	call   c00160ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016569:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001656c:	83 c4 10             	add    esp,0x10
c001656f:	8d 50 02             	lea    edx,[eax+0x2]
c0016572:	83 e8 02             	sub    eax,0x2
c0016575:	81 e2 ff ff 00 00    	and    edx,0xffff
c001657b:	25 ff ff 00 00       	and    eax,0xffff
c0016580:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016584:	0f 44 c2             	cmove  eax,edx
c0016587:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001658a:	e9 23 02 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c001658f:	8d 46 ff             	lea    eax,[esi-0x1]
c0016592:	0f b6 f0             	movzx  esi,al
c0016595:	83 fe 05             	cmp    esi,0x5
c0016598:	77 23                	ja     c00165bd <Vm::faultHandler(regs*)+0x4a6>
c001659a:	ff 24 b5 58 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeba8]
c00165a1:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00165a6:	eb 15                	jmp    c00165bd <Vm::faultHandler(regs*)+0x4a6>
c00165a8:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00165ac:	eb 0f                	jmp    c00165bd <Vm::faultHandler(regs*)+0x4a6>
c00165ae:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00165b2:	eb 09                	jmp    c00165bd <Vm::faultHandler(regs*)+0x4a6>
c00165b4:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00165b8:	eb 03                	jmp    c00165bd <Vm::faultHandler(regs*)+0x4a6>
c00165ba:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00165bd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00165c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165c5:	74 29                	je     c00165f0 <Vm::faultHandler(regs*)+0x4d9>
c00165c7:	3d ff ff 00 00       	cmp    eax,0xffff
c00165cc:	76 22                	jbe    c00165f0 <Vm::faultHandler(regs*)+0x4d9>
c00165ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165d2:	50                   	push   eax
c00165d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165d7:	50                   	push   eax
c00165d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165dc:	50                   	push   eax
c00165dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165e1:	50                   	push   eax
c00165e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165e6:	50                   	push   eax
c00165e7:	6a 6e                	push   0x6e
c00165e9:	6a 6e                	push   0x6e
c00165eb:	e9 8f 00 00 00       	jmp    c001667f <Vm::faultHandler(regs*)+0x568>
c00165f0:	52                   	push   edx
c00165f1:	0f b7 c0             	movzx  eax,ax
c00165f4:	52                   	push   edx
c00165f5:	50                   	push   eax
c00165f6:	57                   	push   edi
c00165f7:	e8 a7 fa ff ff       	call   c00160a3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165fc:	59                   	pop    ecx
c00165fd:	5e                   	pop    esi
c00165fe:	0f b6 c0             	movzx  eax,al
c0016601:	50                   	push   eax
c0016602:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016606:	50                   	push   eax
c0016607:	e8 3c f6 ff ff       	call   c0015c48 <Vm::outbv(unsigned short, unsigned char)>
c001660c:	83 c4 10             	add    esp,0x10
c001660f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016612:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016616:	74 03                	je     c001661b <Vm::faultHandler(regs*)+0x504>
c0016618:	48                   	dec    eax
c0016619:	eb 01                	jmp    c001661c <Vm::faultHandler(regs*)+0x505>
c001661b:	40                   	inc    eax
c001661c:	0f b7 c0             	movzx  eax,ax
c001661f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016622:	e9 8b 01 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c0016627:	8d 46 ff             	lea    eax,[esi-0x1]
c001662a:	0f b6 f0             	movzx  esi,al
c001662d:	83 fe 05             	cmp    esi,0x5
c0016630:	77 1e                	ja     c0016650 <Vm::faultHandler(regs*)+0x539>
c0016632:	ff 24 b5 70 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeb90]
c0016639:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001663d:	eb 11                	jmp    c0016650 <Vm::faultHandler(regs*)+0x539>
c001663f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016642:	eb 0c                	jmp    c0016650 <Vm::faultHandler(regs*)+0x539>
c0016644:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016647:	eb 07                	jmp    c0016650 <Vm::faultHandler(regs*)+0x539>
c0016649:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001664c:	eb 02                	jmp    c0016650 <Vm::faultHandler(regs*)+0x539>
c001664e:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016650:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016655:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016658:	74 37                	je     c0016691 <Vm::faultHandler(regs*)+0x57a>
c001665a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016660:	76 2f                	jbe    c0016691 <Vm::faultHandler(regs*)+0x57a>
c0016662:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016666:	50                   	push   eax
c0016667:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001666b:	50                   	push   eax
c001666c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016670:	50                   	push   eax
c0016671:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016675:	50                   	push   eax
c0016676:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001667a:	50                   	push   eax
c001667b:	6a 6f                	push   0x6f
c001667d:	6a 6f                	push   0x6f
c001667f:	68 fe 13 02 c0       	push   0xc00213fe
c0016684:	e8 21 43 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016689:	83 c4 20             	add    esp,0x20
c001668c:	e9 86 01 00 00       	jmp    c0016817 <Vm::faultHandler(regs*)+0x700>
c0016691:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016694:	0f b7 d7             	movzx  edx,di
c0016697:	0f b7 c6             	movzx  eax,si
c001669a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001669d:	81 e1 00 04 00 00    	and    ecx,0x400
c00166a3:	83 e5 01             	and    ebp,0x1
c00166a6:	74 1c                	je     c00166c4 <Vm::faultHandler(regs*)+0x5ad>
c00166a8:	55                   	push   ebp
c00166a9:	55                   	push   ebp
c00166aa:	50                   	push   eax
c00166ab:	52                   	push   edx
c00166ac:	e8 15 fa ff ff       	call   c00160c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00166b1:	83 c4 10             	add    esp,0x10
c00166b4:	89 fa                	mov    edx,edi
c00166b6:	ef                   	out    dx,eax
c00166b7:	8d 46 04             	lea    eax,[esi+0x4]
c00166ba:	83 ee 04             	sub    esi,0x4
c00166bd:	25 ff ff 00 00       	and    eax,0xffff
c00166c2:	eb 1b                	jmp    c00166df <Vm::faultHandler(regs*)+0x5c8>
c00166c4:	55                   	push   ebp
c00166c5:	55                   	push   ebp
c00166c6:	50                   	push   eax
c00166c7:	52                   	push   edx
c00166c8:	e8 e7 f9 ff ff       	call   c00160b4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	89 fa                	mov    edx,edi
c00166d2:	66 ef                	out    dx,ax
c00166d4:	8d 46 02             	lea    eax,[esi+0x2]
c00166d7:	83 ee 02             	sub    esi,0x2
c00166da:	25 ff ff 00 00       	and    eax,0xffff
c00166df:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166e5:	85 c9                	test   ecx,ecx
c00166e7:	0f 44 f0             	cmove  esi,eax
c00166ea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166ed:	e9 c0 00 00 00       	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c00166f2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166f9:	83 ec 0c             	sub    esp,0xc
c00166fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016700:	50                   	push   eax
c0016701:	e8 2f f5 ff ff       	call   c0015c35 <Vm::inbv(unsigned short)>
c0016706:	0f b6 c0             	movzx  eax,al
c0016709:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001670c:	eb 3a                	jmp    c0016748 <Vm::faultHandler(regs*)+0x631>
c001670e:	83 e5 01             	and    ebp,0x1
c0016711:	74 07                	je     c001671a <Vm::faultHandler(regs*)+0x603>
c0016713:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016717:	ed                   	in     eax,dx
c0016718:	eb 14                	jmp    c001672e <Vm::faultHandler(regs*)+0x617>
c001671a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001671d:	66 31 f6             	xor    si,si
c0016720:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016723:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016727:	66 ed                	in     ax,dx
c0016729:	0f b7 c0             	movzx  eax,ax
c001672c:	09 f0                	or     eax,esi
c001672e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016731:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016735:	eb 7e                	jmp    c00167b5 <Vm::faultHandler(regs*)+0x69e>
c0016737:	52                   	push   edx
c0016738:	52                   	push   edx
c0016739:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001673d:	50                   	push   eax
c001673e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016742:	50                   	push   eax
c0016743:	e8 00 f5 ff ff       	call   c0015c48 <Vm::outbv(unsigned short, unsigned char)>
c0016748:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001674c:	eb 4f                	jmp    c001679d <Vm::faultHandler(regs*)+0x686>
c001674e:	83 e5 01             	and    ebp,0x1
c0016751:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016754:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016758:	74 03                	je     c001675d <Vm::faultHandler(regs*)+0x646>
c001675a:	ef                   	out    dx,eax
c001675b:	eb d4                	jmp    c0016731 <Vm::faultHandler(regs*)+0x61a>
c001675d:	66 ef                	out    dx,ax
c001675f:	eb d0                	jmp    c0016731 <Vm::faultHandler(regs*)+0x61a>
c0016761:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016765:	83 ec 0c             	sub    esp,0xc
c0016768:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001676f:	50                   	push   eax
c0016770:	e8 c0 f4 ff ff       	call   c0015c35 <Vm::inbv(unsigned short)>
c0016775:	0f b6 c0             	movzx  eax,al
c0016778:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001677b:	eb 1d                	jmp    c001679a <Vm::faultHandler(regs*)+0x683>
c001677d:	83 e5 01             	and    ebp,0x1
c0016780:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016783:	74 03                	je     c0016788 <Vm::faultHandler(regs*)+0x671>
c0016785:	ed                   	in     eax,dx
c0016786:	eb 0d                	jmp    c0016795 <Vm::faultHandler(regs*)+0x67e>
c0016788:	66 ed                	in     ax,dx
c001678a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001678d:	0f b7 c0             	movzx  eax,ax
c0016790:	66 31 d2             	xor    dx,dx
c0016793:	09 d0                	or     eax,edx
c0016795:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016798:	eb 18                	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c001679a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001679d:	83 c4 10             	add    esp,0x10
c00167a0:	eb 13                	jmp    c00167b5 <Vm::faultHandler(regs*)+0x69e>
c00167a2:	83 e5 01             	and    ebp,0x1
c00167a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00167a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00167ab:	74 03                	je     c00167b0 <Vm::faultHandler(regs*)+0x699>
c00167ad:	ef                   	out    dx,eax
c00167ae:	eb 02                	jmp    c00167b2 <Vm::faultHandler(regs*)+0x69b>
c00167b0:	66 ef                	out    dx,ax
c00167b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167b5:	b0 01                	mov    al,0x1
c00167b7:	eb 60                	jmp    c0016819 <Vm::faultHandler(regs*)+0x702>
c00167b9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167bd:	50                   	push   eax
c00167be:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167c2:	50                   	push   eax
c00167c3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167c7:	50                   	push   eax
c00167c8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167cc:	50                   	push   eax
c00167cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167d1:	50                   	push   eax
c00167d2:	52                   	push   edx
c00167d3:	52                   	push   edx
c00167d4:	68 2b 14 02 c0       	push   0xc002142b
c00167d9:	e8 cc 41 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00167de:	83 c4 20             	add    esp,0x20
c00167e1:	83 ec 0c             	sub    esp,0xc
c00167e4:	6a 60                	push   0x60
c00167e6:	e8 4a f4 ff ff       	call   c0015c35 <Vm::inbv(unsigned short)>
c00167eb:	83 c4 10             	add    esp,0x10
c00167ee:	0f b6 d0             	movzx  edx,al
c00167f1:	83 fa 1c             	cmp    edx,0x1c
c00167f4:	74 05                	je     c00167fb <Vm::faultHandler(regs*)+0x6e4>
c00167f6:	83 fa 5a             	cmp    edx,0x5a
c00167f9:	75 e6                	jne    c00167e1 <Vm::faultHandler(regs*)+0x6ca>
c00167fb:	0f b6 c0             	movzx  eax,al
c00167fe:	83 f8 1c             	cmp    eax,0x1c
c0016801:	74 05                	je     c0016808 <Vm::faultHandler(regs*)+0x6f1>
c0016803:	83 f8 5a             	cmp    eax,0x5a
c0016806:	75 0f                	jne    c0016817 <Vm::faultHandler(regs*)+0x700>
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	6a 60                	push   0x60
c001680d:	e8 23 f4 ff ff       	call   c0015c35 <Vm::inbv(unsigned short)>
c0016812:	83 c4 10             	add    esp,0x10
c0016815:	eb e4                	jmp    c00167fb <Vm::faultHandler(regs*)+0x6e4>
c0016817:	31 c0                	xor    eax,eax
c0016819:	83 c4 2c             	add    esp,0x2c
c001681c:	5b                   	pop    ebx
c001681d:	5e                   	pop    esi
c001681e:	5f                   	pop    edi
c001681f:	5d                   	pop    ebp
c0016820:	c3                   	ret    

c0016821 <noCopro(unsigned long)>:
c0016821:	c3                   	ret    

c0016822 <nmiHandler(regs*, void*)>:
c0016822:	83 ec 0c             	sub    esp,0xc
c0016825:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001682a:	83 ec 0c             	sub    esp,0xc
c001682d:	50                   	push   eax
c001682e:	e8 9b 0a ff ff       	call   c00072ce <Computer::handleNMI()>
c0016833:	83 c4 10             	add    esp,0x10
c0016836:	90                   	nop
c0016837:	83 c4 0c             	add    esp,0xc
c001683a:	c3                   	ret    

c001683b <doubleFault(regs*, void*)>:
c001683b:	55                   	push   ebp
c001683c:	89 e5                	mov    ebp,esp
c001683e:	83 ec 08             	sub    esp,0x8
c0016841:	83 ec 0c             	sub    esp,0xc
c0016844:	68 88 14 02 c0       	push   0xc0021488
c0016849:	e8 27 a0 ff ff       	call   c0010875 <KePanic(char const*)>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	90                   	nop
c0016852:	c9                   	leave  
c0016853:	c3                   	ret    

c0016854 <displayDebugInfo(regs*)>:
c0016854:	83 ec 1c             	sub    esp,0x1c
c0016857:	0f 20 c0             	mov    eax,cr0
c001685a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001685e:	0f 20 d0             	mov    eax,cr2
c0016861:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016865:	0f 20 d8             	mov    eax,cr3
c0016868:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001686c:	0f 20 e0             	mov    eax,cr4
c001686f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016876:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016879:	83 ec 08             	sub    esp,0x8
c001687c:	50                   	push   eax
c001687d:	68 a4 14 02 c0       	push   0xc00214a4
c0016882:	e8 23 41 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016891:	83 ec 08             	sub    esp,0x8
c0016894:	50                   	push   eax
c0016895:	68 95 14 02 c0       	push   0xc0021495
c001689a:	e8 0b 41 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001689f:	83 c4 10             	add    esp,0x10
c00168a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00168a9:	83 ec 08             	sub    esp,0x8
c00168ac:	50                   	push   eax
c00168ad:	68 a0 14 02 c0       	push   0xc00214a0
c00168b2:	e8 f3 40 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168c1:	83 ec 08             	sub    esp,0x8
c00168c4:	50                   	push   eax
c00168c5:	68 af 14 02 c0       	push   0xc00214af
c00168ca:	e8 db 40 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00168cf:	83 c4 10             	add    esp,0x10
c00168d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00168d9:	83 ec 08             	sub    esp,0x8
c00168dc:	50                   	push   eax
c00168dd:	68 ba 14 02 c0       	push   0xc00214ba
c00168e2:	e8 c3 40 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00168e7:	83 c4 10             	add    esp,0x10
c00168ea:	83 ec 08             	sub    esp,0x8
c00168ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168f1:	68 c5 14 02 c0       	push   0xc00214c5
c00168f6:	e8 af 40 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00168fb:	83 c4 10             	add    esp,0x10
c00168fe:	83 ec 08             	sub    esp,0x8
c0016901:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016905:	68 d0 14 02 c0       	push   0xc00214d0
c001690a:	e8 9b 40 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016917:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	50                   	push   eax
c0016921:	e8 33 1e ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0016926:	83 c4 10             	add    esp,0x10
c0016929:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001692e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016934:	83 ec 08             	sub    esp,0x8
c0016937:	68 db 14 02 c0       	push   0xc00214db
c001693c:	50                   	push   eax
c001693d:	e8 54 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016942:	83 c4 10             	add    esp,0x10
c0016945:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001694a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016950:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016954:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016957:	83 ec 08             	sub    esp,0x8
c001695a:	52                   	push   edx
c001695b:	50                   	push   eax
c001695c:	e8 ef 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016961:	83 c4 10             	add    esp,0x10
c0016964:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016969:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001696f:	83 ec 08             	sub    esp,0x8
c0016972:	68 e9 14 02 c0       	push   0xc00214e9
c0016977:	50                   	push   eax
c0016978:	e8 19 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016985:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001698b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016990:	8b 12                	mov    edx,DWORD PTR [edx]
c0016992:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016995:	83 c2 0c             	add    edx,0xc
c0016998:	83 ec 08             	sub    esp,0x8
c001699b:	52                   	push   edx
c001699c:	50                   	push   eax
c001699d:	e8 f4 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169b0:	83 ec 08             	sub    esp,0x8
c00169b3:	68 f2 14 02 c0       	push   0xc00214f2
c00169b8:	50                   	push   eax
c00169b9:	e8 d8 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169d0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00169d3:	83 ec 08             	sub    esp,0x8
c00169d6:	52                   	push   edx
c00169d7:	50                   	push   eax
c00169d8:	e8 73 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169dd:	83 c4 10             	add    esp,0x10
c00169e0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169eb:	83 ec 08             	sub    esp,0x8
c00169ee:	68 fa 14 02 c0       	push   0xc00214fa
c00169f3:	50                   	push   eax
c00169f4:	e8 9d 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169f9:	83 c4 10             	add    esp,0x10
c00169fc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a01:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a0b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016a0e:	83 ec 08             	sub    esp,0x8
c0016a11:	52                   	push   edx
c0016a12:	50                   	push   eax
c0016a13:	e8 38 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a18:	83 c4 10             	add    esp,0x10
c0016a1b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a26:	83 ec 08             	sub    esp,0x8
c0016a29:	68 02 15 02 c0       	push   0xc0021502
c0016a2e:	50                   	push   eax
c0016a2f:	e8 62 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a34:	83 c4 10             	add    esp,0x10
c0016a37:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a46:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a49:	83 ec 08             	sub    esp,0x8
c0016a4c:	52                   	push   edx
c0016a4d:	50                   	push   eax
c0016a4e:	e8 fd 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a53:	83 c4 10             	add    esp,0x10
c0016a56:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a61:	83 ec 08             	sub    esp,0x8
c0016a64:	68 0a 15 02 c0       	push   0xc002150a
c0016a69:	50                   	push   eax
c0016a6a:	e8 27 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a6f:	83 c4 10             	add    esp,0x10
c0016a72:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a81:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a84:	83 ec 08             	sub    esp,0x8
c0016a87:	52                   	push   edx
c0016a88:	50                   	push   eax
c0016a89:	e8 c2 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a8e:	83 c4 10             	add    esp,0x10
c0016a91:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a9c:	83 ec 08             	sub    esp,0x8
c0016a9f:	68 12 15 02 c0       	push   0xc0021512
c0016aa4:	50                   	push   eax
c0016aa5:	e8 ec 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ab2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ab8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016abc:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016abf:	83 ec 08             	sub    esp,0x8
c0016ac2:	52                   	push   edx
c0016ac3:	50                   	push   eax
c0016ac4:	e8 87 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016ac9:	83 c4 10             	add    esp,0x10
c0016acc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ad1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ad7:	83 ec 08             	sub    esp,0x8
c0016ada:	68 1a 15 02 c0       	push   0xc002151a
c0016adf:	50                   	push   eax
c0016ae0:	e8 b1 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016ae5:	83 c4 10             	add    esp,0x10
c0016ae8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016af3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016af7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016afa:	83 ec 08             	sub    esp,0x8
c0016afd:	52                   	push   edx
c0016afe:	50                   	push   eax
c0016aff:	e8 4c 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b04:	83 c4 10             	add    esp,0x10
c0016b07:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b12:	83 ec 08             	sub    esp,0x8
c0016b15:	68 22 15 02 c0       	push   0xc0021522
c0016b1a:	50                   	push   eax
c0016b1b:	e8 76 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b20:	83 c4 10             	add    esp,0x10
c0016b23:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b2e:	83 ec 08             	sub    esp,0x8
c0016b31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b35:	50                   	push   eax
c0016b36:	e8 15 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b3b:	83 c4 10             	add    esp,0x10
c0016b3e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b49:	83 ec 08             	sub    esp,0x8
c0016b4c:	68 2b 15 02 c0       	push   0xc002152b
c0016b51:	50                   	push   eax
c0016b52:	e8 3f 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b57:	83 c4 10             	add    esp,0x10
c0016b5a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b65:	83 ec 08             	sub    esp,0x8
c0016b68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b6c:	50                   	push   eax
c0016b6d:	e8 de 1e ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b80:	83 ec 08             	sub    esp,0x8
c0016b83:	68 33 15 02 c0       	push   0xc0021533
c0016b88:	50                   	push   eax
c0016b89:	e8 08 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b9c:	83 ec 08             	sub    esp,0x8
c0016b9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016ba3:	50                   	push   eax
c0016ba4:	e8 a7 1e ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016ba9:	83 c4 10             	add    esp,0x10
c0016bac:	fa                   	cli    
c0016bad:	f4                   	hlt    
c0016bae:	eb fe                	jmp    c0016bae <displayDebugInfo(regs*)+0x35a>

c0016bb0 <HalSystemIdle()>:
c0016bb0:	56                   	push   esi
c0016bb1:	53                   	push   ebx
c0016bb2:	83 ec 14             	sub    esp,0x14
c0016bb5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bc0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016bc6:	83 e0 04             	and    eax,0x4
c0016bc9:	0f b6 c0             	movzx  eax,al
c0016bcc:	85 c0                	test   eax,eax
c0016bce:	0f 95 c0             	setne  al
c0016bd1:	0f b6 c0             	movzx  eax,al
c0016bd4:	85 c0                	test   eax,eax
c0016bd6:	74 4c                	je     c0016c24 <HalSystemIdle()+0x74>
c0016bd8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bdd:	83 ec 08             	sub    esp,0x8
c0016be0:	68 e1 00 00 00       	push   0xe1
c0016be5:	50                   	push   eax
c0016be6:	e8 ef 04 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bf2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bf6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bfb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bff:	83 e2 02             	and    edx,0x2
c0016c02:	89 d3                	mov    ebx,edx
c0016c04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c08:	83 e2 00             	and    edx,0x0
c0016c0b:	89 d6                	mov    esi,edx
c0016c0d:	56                   	push   esi
c0016c0e:	53                   	push   ebx
c0016c0f:	68 e1 00 00 00       	push   0xe1
c0016c14:	50                   	push   eax
c0016c15:	e8 ec 04 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016c1a:	83 c4 10             	add    esp,0x10
c0016c1d:	e8 72 95 fe ff       	call   c0000194 <doTPAUSE>
c0016c22:	eb 01                	jmp    c0016c25 <HalSystemIdle()+0x75>
c0016c24:	f4                   	hlt    
c0016c25:	90                   	nop
c0016c26:	83 c4 14             	add    esp,0x14
c0016c29:	5b                   	pop    ebx
c0016c2a:	5e                   	pop    esi
c0016c2b:	c3                   	ret    

c0016c2c <displayProgramFault(char const*)>:
c0016c2c:	83 ec 0c             	sub    esp,0xc
c0016c2f:	83 ec 0c             	sub    esp,0xc
c0016c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c36:	e8 6f 3d ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016c3b:	83 c4 10             	add    esp,0x10
c0016c3e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c4e:	85 c0                	test   eax,eax
c0016c50:	74 21                	je     c0016c73 <displayProgramFault(char const*)+0x47>
c0016c52:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c62:	6a 04                	push   0x4
c0016c64:	6a 0f                	push   0xf
c0016c66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c6a:	50                   	push   eax
c0016c6b:	e8 98 1e ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c70:	83 c4 10             	add    esp,0x10
c0016c73:	90                   	nop
c0016c74:	83 c4 0c             	add    esp,0xc
c0016c77:	c3                   	ret    

c0016c78 <gpFault(regs*, void*)>:
c0016c78:	83 ec 1c             	sub    esp,0x1c
c0016c7b:	c7 05 14 82 02 c0 17 61 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc0016117
c0016c85:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c8a:	85 c0                	test   eax,eax
c0016c8c:	74 1e                	je     c0016cac <gpFault(regs*, void*)+0x34>
c0016c8e:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c93:	83 ec 0c             	sub    esp,0xc
c0016c96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c9a:	ff d0                	call   eax
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016ca3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016ca8:	85 c0                	test   eax,eax
c0016caa:	75 2e                	jne    c0016cda <gpFault(regs*, void*)+0x62>
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	68 3b 15 02 c0       	push   0xc002153b
c0016cb4:	e8 73 ff ff ff       	call   c0016c2c <displayProgramFault(char const*)>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	83 ec 0c             	sub    esp,0xc
c0016cbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cc3:	e8 8c fb ff ff       	call   c0016854 <displayDebugInfo(regs*)>
c0016cc8:	83 c4 10             	add    esp,0x10
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	6a 00                	push   0x0
c0016cd0:	e8 07 ee ff ff       	call   c0015adc <Thr::terminateFromIRQ(int)>
c0016cd5:	83 c4 10             	add    esp,0x10
c0016cd8:	eb 01                	jmp    c0016cdb <gpFault(regs*, void*)+0x63>
c0016cda:	90                   	nop
c0016cdb:	83 c4 1c             	add    esp,0x1c
c0016cde:	c3                   	ret    

c0016cdf <pgFault(regs*, void*)>:
c0016cdf:	83 ec 1c             	sub    esp,0x1c
c0016ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ce6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016ce9:	0f 20 d0             	mov    eax,cr2
c0016cec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cf4:	83 ec 04             	sub    esp,0x4
c0016cf7:	52                   	push   edx
c0016cf8:	50                   	push   eax
c0016cf9:	68 18 16 02 c0       	push   0xc0021618
c0016cfe:	e8 a7 3c ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d10:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016d16:	0f 20 d2             	mov    edx,cr2
c0016d19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d21:	83 ec 08             	sub    esp,0x8
c0016d24:	52                   	push   edx
c0016d25:	50                   	push   eax
c0016d26:	e8 fb 37 ff ff       	call   c000a526 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	0f b6 c0             	movzx  eax,al
c0016d31:	85 c0                	test   eax,eax
c0016d33:	75 2e                	jne    c0016d63 <pgFault(regs*, void*)+0x84>
c0016d35:	83 ec 0c             	sub    esp,0xc
c0016d38:	68 54 15 02 c0       	push   0xc0021554
c0016d3d:	e8 ea fe ff ff       	call   c0016c2c <displayProgramFault(char const*)>
c0016d42:	83 c4 10             	add    esp,0x10
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d4c:	e8 03 fb ff ff       	call   c0016854 <displayDebugInfo(regs*)>
c0016d51:	83 c4 10             	add    esp,0x10
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	6a 00                	push   0x0
c0016d59:	e8 7e ed ff ff       	call   c0015adc <Thr::terminateFromIRQ(int)>
c0016d5e:	83 c4 10             	add    esp,0x10
c0016d61:	eb 01                	jmp    c0016d64 <pgFault(regs*, void*)+0x85>
c0016d63:	90                   	nop
c0016d64:	83 c4 1c             	add    esp,0x1c
c0016d67:	c3                   	ret    

c0016d68 <otherISRHandler(regs*, void*)>:
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	83 ec 0c             	sub    esp,0xc
c0016d6e:	68 40 16 02 c0       	push   0xc0021640
c0016d73:	e8 b4 fe ff ff       	call   c0016c2c <displayProgramFault(char const*)>
c0016d78:	83 c4 10             	add    esp,0x10
c0016d7b:	83 ec 0c             	sub    esp,0xc
c0016d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d82:	e8 cd fa ff ff       	call   c0016854 <displayDebugInfo(regs*)>
c0016d87:	83 c4 10             	add    esp,0x10
c0016d8a:	83 ec 0c             	sub    esp,0xc
c0016d8d:	6a 00                	push   0x0
c0016d8f:	e8 48 ed ff ff       	call   c0015adc <Thr::terminateFromIRQ(int)>
c0016d94:	83 c4 10             	add    esp,0x10
c0016d97:	90                   	nop
c0016d98:	83 c4 0c             	add    esp,0xc
c0016d9b:	c3                   	ret    

c0016d9c <opcodeFault(regs*, void*)>:
c0016d9c:	55                   	push   ebp
c0016d9d:	89 e5                	mov    ebp,esp
c0016d9f:	83 ec 08             	sub    esp,0x8
c0016da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016da5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016da8:	83 ec 08             	sub    esp,0x8
c0016dab:	50                   	push   eax
c0016dac:	68 5f 15 02 c0       	push   0xc002155f
c0016db1:	e8 f4 3b ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016dbe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016dc4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016dca:	0f b6 c0             	movzx  eax,al
c0016dcd:	85 c0                	test   eax,eax
c0016dcf:	74 21                	je     c0016df2 <opcodeFault(regs*, void*)+0x56>
c0016dd1:	83 ec 0c             	sub    esp,0xc
c0016dd4:	68 68 16 02 c0       	push   0xc0021668
c0016dd9:	e8 cc 3b ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016dde:	83 c4 10             	add    esp,0x10
c0016de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016de4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016de7:	8d 50 19             	lea    edx,[eax+0x19]
c0016dea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016ded:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016df0:	eb 2b                	jmp    c0016e1d <opcodeFault(regs*, void*)+0x81>
c0016df2:	83 ec 0c             	sub    esp,0xc
c0016df5:	68 6d 15 02 c0       	push   0xc002156d
c0016dfa:	e8 2d fe ff ff       	call   c0016c2c <displayProgramFault(char const*)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016e08:	e8 47 fa ff ff       	call   c0016854 <displayDebugInfo(regs*)>
c0016e0d:	83 c4 10             	add    esp,0x10
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	6a 00                	push   0x0
c0016e15:	e8 c2 ec ff ff       	call   c0015adc <Thr::terminateFromIRQ(int)>
c0016e1a:	83 c4 10             	add    esp,0x10
c0016e1d:	c9                   	leave  
c0016e1e:	c3                   	ret    

c0016e1f <i386SaveCoprocessor(void*)>:
c0016e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e23:	83 c0 3f             	add    eax,0x3f
c0016e26:	83 e0 c0             	and    eax,0xffffffc0
c0016e29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e2d:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016e33 <i386LoadCoprocessor(void*)>:
c0016e33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e37:	83 c0 3f             	add    eax,0x3f
c0016e3a:	83 e0 c0             	and    eax,0xffffffc0
c0016e3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e41:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e47 <x87EmulHandler(regs*, void*)>:
c0016e47:	53                   	push   ebx
c0016e48:	83 ec 08             	sub    esp,0x8
c0016e4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e50:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e54:	74 10                	je     c0016e66 <x87EmulHandler(regs*, void*)+0x1f>
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	68 7a 15 02 c0       	push   0xc002157a
c0016e5e:	e8 12 9a ff ff       	call   c0010875 <KePanic(char const*)>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	0f 20 c0             	mov    eax,cr0
c0016e69:	a8 08                	test   al,0x8
c0016e6b:	74 59                	je     c0016ec6 <x87EmulHandler(regs*, void*)+0x7f>
c0016e6d:	0f 06                	clts   
c0016e6f:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e74:	85 c0                	test   eax,eax
c0016e76:	74 0e                	je     c0016e86 <x87EmulHandler(regs*, void*)+0x3f>
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e7e:	e8 9c ff ff ff       	call   c0016e1f <i386SaveCoprocessor(void*)>
c0016e83:	83 c4 10             	add    esp,0x10
c0016e86:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e8c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e90:	75 12                	jne    c0016ea4 <x87EmulHandler(regs*, void*)+0x5d>
c0016e92:	83 ec 0c             	sub    esp,0xc
c0016e95:	68 40 02 00 00       	push   0x240
c0016e9a:	e8 2c 0c ff ff       	call   c0007acb <malloc>
c0016e9f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016ea2:	eb 10                	jmp    c0016eb4 <x87EmulHandler(regs*, void*)+0x6d>
c0016ea4:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016ea9:	83 ec 0c             	sub    esp,0xc
c0016eac:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016eaf:	e8 7f ff ff ff       	call   c0016e33 <i386LoadCoprocessor(void*)>
c0016eb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb9:	83 c4 10             	add    esp,0x10
c0016ebc:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016ec1:	83 c4 08             	add    esp,0x8
c0016ec4:	5b                   	pop    ebx
c0016ec5:	c3                   	ret    
c0016ec6:	83 ec 0c             	sub    esp,0xc
c0016ec9:	68 8e 15 02 c0       	push   0xc002158e
c0016ece:	e8 d7 3a ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016ed3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016edb:	83 c4 18             	add    esp,0x18
c0016ede:	5b                   	pop    ebx
c0016edf:	e9 f8 eb ff ff       	jmp    c0015adc <Thr::terminateFromIRQ(int)>

c0016ee4 <HalInitialiseCoprocessor()>:
c0016ee4:	83 ec 10             	sub    esp,0x10
c0016ee7:	6a 00                	push   0x0
c0016ee9:	68 47 6e 01 c0       	push   0xc0016e47
c0016eee:	6a 07                	push   0x7
c0016ef0:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016efa:	e8 43 54 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016eff:	e8 2c 70 00 00       	call   c001df30 <avxDetect>
c0016f04:	83 c4 10             	add    esp,0x10
c0016f07:	85 c0                	test   eax,eax
c0016f09:	74 1c                	je     c0016f27 <HalInitialiseCoprocessor()+0x43>
c0016f0b:	c7 05 10 82 02 c0 5a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df5a
c0016f15:	c7 05 0c 82 02 c0 6b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df6b
c0016f1f:	83 c4 0c             	add    esp,0xc
c0016f22:	e9 55 70 00 00       	jmp    c001df7c <avxInit>
c0016f27:	e8 94 73 00 00       	call   c001e2c0 <absolutelyNoChanceInHell>
c0016f2c:	85 c0                	test   eax,eax
c0016f2e:	74 1c                	je     c0016f4c <HalInitialiseCoprocessor()+0x68>
c0016f30:	c7 05 10 82 02 c0 d8 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2d8
c0016f3a:	c7 05 0c 82 02 c0 e0 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2e0
c0016f44:	83 c4 0c             	add    esp,0xc
c0016f47:	e9 9c 73 00 00       	jmp    c001e2e8 <sseInit>
c0016f4c:	e8 b5 73 00 00       	call   c001e306 <x87Detect>
c0016f51:	85 c0                	test   eax,eax
c0016f53:	74 1c                	je     c0016f71 <HalInitialiseCoprocessor()+0x8d>
c0016f55:	c7 05 10 82 02 c0 21 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e321
c0016f5f:	c7 05 0c 82 02 c0 28 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e328
c0016f69:	83 c4 0c             	add    esp,0xc
c0016f6c:	e9 be 73 00 00       	jmp    c001e32f <x87Init>
c0016f71:	c7 05 10 82 02 c0 21 68 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016821
c0016f7b:	c7 05 0c 82 02 c0 21 68 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016821
c0016f85:	0f 20 c0             	mov    eax,cr0
c0016f88:	83 c8 04             	or     eax,0x4
c0016f8b:	0f 22 c0             	mov    cr0,eax
c0016f8e:	83 c4 0c             	add    esp,0xc
c0016f91:	c3                   	ret    

c0016f92 <HalPanic(char const*)>:
c0016f92:	53                   	push   ebx
c0016f93:	83 ec 10             	sub    esp,0x10
c0016f96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f9a:	fa                   	cli    
c0016f9b:	53                   	push   ebx
c0016f9c:	68 a4 15 02 c0       	push   0xc00215a4
c0016fa1:	e8 04 3a ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0016fa6:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016fab:	83 c4 10             	add    esp,0x10
c0016fae:	85 c0                	test   eax,eax
c0016fb0:	74 09                	je     c0016fbb <HalPanic(char const*)+0x29>
c0016fb2:	83 ec 0c             	sub    esp,0xc
c0016fb5:	53                   	push   ebx
c0016fb6:	ff d0                	call   eax
c0016fb8:	83 c4 10             	add    esp,0x10
c0016fbb:	50                   	push   eax
c0016fbc:	6a 01                	push   0x1
c0016fbe:	6a 0f                	push   0xf
c0016fc0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc6:	e8 e9 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fcb:	5a                   	pop    edx
c0016fcc:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fd2:	e8 cd 17 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0016fd7:	59                   	pop    ecx
c0016fd8:	58                   	pop    eax
c0016fd9:	68 84 fd 01 c0       	push   0xc001fd84
c0016fde:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fe4:	e8 03 16 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0016fe9:	83 c4 0c             	add    esp,0xc
c0016fec:	6a 01                	push   0x1
c0016fee:	6a 0f                	push   0xf
c0016ff0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ff6:	e8 b9 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016ffb:	58                   	pop    eax
c0016ffc:	5a                   	pop    edx
c0016ffd:	68 bd 15 02 c0       	push   0xc00215bd
c0017002:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017008:	e8 89 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001700d:	83 c4 0c             	add    esp,0xc
c0017010:	6a 0f                	push   0xf
c0017012:	6a 01                	push   0x1
c0017014:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001701a:	e8 95 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001701f:	59                   	pop    ecx
c0017020:	58                   	pop    eax
c0017021:	68 c6 15 02 c0       	push   0xc00215c6
c0017026:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001702c:	e8 65 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017031:	83 c4 0c             	add    esp,0xc
c0017034:	6a 01                	push   0x1
c0017036:	6a 0f                	push   0xf
c0017038:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001703e:	e8 71 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017043:	58                   	pop    eax
c0017044:	5a                   	pop    edx
c0017045:	68 0a 16 02 c0       	push   0xc002160a
c001704a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017050:	e8 41 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017055:	59                   	pop    ecx
c0017056:	58                   	pop    eax
c0017057:	68 d3 15 02 c0       	push   0xc00215d3
c001705c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017062:	e8 2f 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017067:	58                   	pop    eax
c0017068:	5a                   	pop    edx
c0017069:	68 0d 16 02 c0       	push   0xc002160d
c001706e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017074:	e8 1d 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017079:	59                   	pop    ecx
c001707a:	58                   	pop    eax
c001707b:	53                   	push   ebx
c001707c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017082:	e8 0f 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017087:	58                   	pop    eax
c0017088:	5a                   	pop    edx
c0017089:	68 0a 16 02 c0       	push   0xc002160a
c001708e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017094:	e8 fd 19 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	eb fe                	jmp    c001709c <HalPanic(char const*)+0x10a>

c001709e <HalQueryPerformanceCounter()>:
c001709e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00170a3:	31 d2                	xor    edx,edx
c00170a5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00170ab:	31 c0                	xor    eax,eax
c00170ad:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00170b4:	74 02                	je     c00170b8 <HalQueryPerformanceCounter()+0x1a>
c00170b6:	0f 31                	rdtsc  
c00170b8:	c3                   	ret    

c00170b9 <HalInitialise()>:
c00170b9:	53                   	push   ebx
c00170ba:	83 ec 08             	sub    esp,0x8
c00170bd:	e8 b7 54 ff ff       	call   c000c579 <setupINTS()>
c00170c2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00170c7:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c00170ce:	75 0f                	jne    c00170df <HalInitialise()+0x26>
c00170d0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170d6:	83 e2 fe             	and    edx,0xfffffffe
c00170d9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170df:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c00170e6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170ec:	83 e2 fe             	and    edx,0xfffffffe
c00170ef:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170f5:	e8 9e 02 00 00       	call   c0017398 <picOpen()>
c00170fa:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017101:	74 0a                	je     c001710d <HalInitialise()+0x54>
c0017103:	e8 e0 01 00 00       	call   c00172e8 <picDisable()>
c0017108:	e8 97 67 00 00       	call   c001d8a4 <apicOpen()>
c001710d:	50                   	push   eax
c001710e:	bb 0f 00 00 00       	mov    ebx,0xf
c0017113:	6a 00                	push   0x0
c0017115:	68 68 6d 01 c0       	push   0xc0016d68
c001711a:	6a 00                	push   0x0
c001711c:	e8 21 52 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017121:	83 c4 0c             	add    esp,0xc
c0017124:	6a 00                	push   0x0
c0017126:	68 68 6d 01 c0       	push   0xc0016d68
c001712b:	6a 01                	push   0x1
c001712d:	e8 10 52 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017132:	83 c4 0c             	add    esp,0xc
c0017135:	6a 00                	push   0x0
c0017137:	68 22 68 01 c0       	push   0xc0016822
c001713c:	6a 02                	push   0x2
c001713e:	e8 ff 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017143:	83 c4 0c             	add    esp,0xc
c0017146:	6a 00                	push   0x0
c0017148:	68 68 6d 01 c0       	push   0xc0016d68
c001714d:	6a 03                	push   0x3
c001714f:	e8 ee 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017154:	83 c4 0c             	add    esp,0xc
c0017157:	6a 00                	push   0x0
c0017159:	68 68 6d 01 c0       	push   0xc0016d68
c001715e:	6a 04                	push   0x4
c0017160:	e8 dd 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017165:	83 c4 0c             	add    esp,0xc
c0017168:	6a 00                	push   0x0
c001716a:	68 68 6d 01 c0       	push   0xc0016d68
c001716f:	6a 05                	push   0x5
c0017171:	e8 cc 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017176:	83 c4 0c             	add    esp,0xc
c0017179:	6a 00                	push   0x0
c001717b:	68 9c 6d 01 c0       	push   0xc0016d9c
c0017180:	6a 06                	push   0x6
c0017182:	e8 bb 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017187:	83 c4 0c             	add    esp,0xc
c001718a:	6a 00                	push   0x0
c001718c:	68 3b 68 01 c0       	push   0xc001683b
c0017191:	6a 08                	push   0x8
c0017193:	e8 aa 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017198:	83 c4 0c             	add    esp,0xc
c001719b:	6a 00                	push   0x0
c001719d:	68 68 6d 01 c0       	push   0xc0016d68
c00171a2:	6a 09                	push   0x9
c00171a4:	e8 99 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a9:	83 c4 0c             	add    esp,0xc
c00171ac:	6a 00                	push   0x0
c00171ae:	68 68 6d 01 c0       	push   0xc0016d68
c00171b3:	6a 0a                	push   0xa
c00171b5:	e8 88 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ba:	83 c4 0c             	add    esp,0xc
c00171bd:	6a 00                	push   0x0
c00171bf:	68 68 6d 01 c0       	push   0xc0016d68
c00171c4:	6a 0b                	push   0xb
c00171c6:	e8 77 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171cb:	83 c4 0c             	add    esp,0xc
c00171ce:	6a 00                	push   0x0
c00171d0:	68 78 6c 01 c0       	push   0xc0016c78
c00171d5:	6a 0d                	push   0xd
c00171d7:	e8 66 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171dc:	83 c4 0c             	add    esp,0xc
c00171df:	6a 00                	push   0x0
c00171e1:	68 df 6c 01 c0       	push   0xc0016cdf
c00171e6:	6a 0e                	push   0xe
c00171e8:	e8 55 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ed:	83 c4 10             	add    esp,0x10
c00171f0:	50                   	push   eax
c00171f1:	6a 00                	push   0x0
c00171f3:	68 68 6d 01 c0       	push   0xc0016d68
c00171f8:	53                   	push   ebx
c00171f9:	43                   	inc    ebx
c00171fa:	e8 43 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ff:	83 c4 10             	add    esp,0x10
c0017202:	83 fb 1e             	cmp    ebx,0x1e
c0017205:	75 e9                	jne    c00171f0 <HalInitialise()+0x137>
c0017207:	50                   	push   eax
c0017208:	6a 00                	push   0x0
c001720a:	68 63 1b 01 c0       	push   0xc0011b63
c001720f:	6a 60                	push   0x60
c0017211:	e8 2c 51 ff ff       	call   c000c342 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017216:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001721b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017225:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001722c:	e8 9a 08 ff ff       	call   c0007acb <malloc>
c0017231:	89 04 24             	mov    DWORD PTR [esp],eax
c0017234:	89 c3                	mov    ebx,eax
c0017236:	e8 35 09 00 00       	call   c0017b70 <RTC::RTC()>
c001723b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017245:	5a                   	pop    edx
c0017246:	59                   	pop    ecx
c0017247:	53                   	push   ebx
c0017248:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001724e:	e8 b9 4b ff ff       	call   c000be0c <Device::addChild(Device*)>
c0017253:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017255:	6a 00                	push   0x0
c0017257:	6a 00                	push   0x0
c0017259:	6a 00                	push   0x0
c001725b:	53                   	push   ebx
c001725c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001725f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017264:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001726a:	83 c4 28             	add    esp,0x28
c001726d:	5b                   	pop    ebx
c001726e:	c3                   	ret    

c001726f <HalMakeBeep(int)>:
c001726f:	53                   	push   ebx
c0017270:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017274:	85 db                	test   ebx,ebx
c0017276:	75 07                	jne    c001727f <HalMakeBeep(int)+0x10>
c0017278:	e4 61                	in     al,0x61
c001727a:	83 e0 fc             	and    eax,0xfffffffc
c001727d:	eb 26                	jmp    c00172a5 <HalMakeBeep(int)+0x36>
c001727f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017284:	99                   	cdq    
c0017285:	f7 fb                	idiv   ebx
c0017287:	89 c1                	mov    ecx,eax
c0017289:	b0 b6                	mov    al,0xb6
c001728b:	e6 43                	out    0x43,al
c001728d:	88 c8                	mov    al,cl
c001728f:	e6 42                	out    0x42,al
c0017291:	89 c8                	mov    eax,ecx
c0017293:	c1 e8 08             	shr    eax,0x8
c0017296:	e6 42                	out    0x42,al
c0017298:	e4 61                	in     al,0x61
c001729a:	89 c2                	mov    edx,eax
c001729c:	83 ca 03             	or     edx,0x3
c001729f:	38 d0                	cmp    al,dl
c00172a1:	74 04                	je     c00172a7 <HalMakeBeep(int)+0x38>
c00172a3:	88 d0                	mov    al,dl
c00172a5:	e6 61                	out    0x61,al
c00172a7:	5b                   	pop    ebx
c00172a8:	c3                   	ret    

c00172a9 <HalGetRand()>:
c00172a9:	31 c0                	xor    eax,eax
c00172ab:	c3                   	ret    

c00172ac <HalEndOfInterrupt(int)>:
c00172ac:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00172b3:	74 23                	je     c00172d8 <HalEndOfInterrupt(int)+0x2c>
c00172b5:	83 ec 14             	sub    esp,0x14
c00172b8:	6a 1b                	push   0x1b
c00172ba:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00172c0:	e8 15 fe fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c00172c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00172ca:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00172d4:	83 c4 1c             	add    esp,0x1c
c00172d7:	c3                   	ret    
c00172d8:	e9 3f 02 00 00       	jmp    c001751c <picEOI(int)>

c00172dd <HalRestart()>:
c00172dd:	c3                   	ret    

c00172de <HalShutdown()>:
c00172de:	c3                   	ret    

c00172df <HalSleep()>:
c00172df:	c3                   	ret    

c00172e0 <picIoWait()>:
c00172e0:	eb 00                	jmp    c00172e2 <picIoWait()+0x2>
c00172e2:	eb 00                	jmp    c00172e4 <picIoWait()+0x4>
c00172e4:	90                   	nop
c00172e5:	c3                   	ret    
c00172e6:	66 90                	xchg   ax,ax

c00172e8 <picDisable()>:
c00172e8:	83 ec 10             	sub    esp,0x10
c00172eb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00172f2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017300:	ee                   	out    dx,al
c0017301:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017308:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001730d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017311:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017316:	ee                   	out    dx,al
c0017317:	90                   	nop
c0017318:	83 c4 10             	add    esp,0x10
c001731b:	c3                   	ret    

c001731c <picGetIRQReg(int)>:
c001731c:	83 ec 10             	sub    esp,0x10
c001731f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017323:	0f b6 c0             	movzx  eax,al
c0017326:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001732d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017331:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017335:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001733a:	ee                   	out    dx,al
c001733b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001733f:	0f b6 c0             	movzx  eax,al
c0017342:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017349:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001734d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017351:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017356:	ee                   	out    dx,al
c0017357:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001735e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017363:	89 c2                	mov    edx,eax
c0017365:	ec                   	in     al,dx
c0017366:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001736a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001736e:	0f b6 c0             	movzx  eax,al
c0017371:	c1 e0 08             	shl    eax,0x8
c0017374:	89 c1                	mov    ecx,eax
c0017376:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001737d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017382:	89 c2                	mov    edx,eax
c0017384:	ec                   	in     al,dx
c0017385:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017389:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001738d:	0f b6 c0             	movzx  eax,al
c0017390:	09 c8                	or     eax,ecx
c0017392:	83 c4 10             	add    esp,0x10
c0017395:	c3                   	ret    
c0017396:	66 90                	xchg   ax,ax

c0017398 <picOpen()>:
c0017398:	83 ec 50             	sub    esp,0x50
c001739b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00173a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00173a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00173ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173af:	ee                   	out    dx,al
c00173b0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00173b7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00173bc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00173c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00173c4:	ee                   	out    dx,al
c00173c5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00173cd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00173d5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00173dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173e0:	89 c2                	mov    edx,eax
c00173e2:	ec                   	in     al,dx
c00173e3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00173e7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00173eb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00173ef:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173fa:	89 c2                	mov    edx,eax
c00173fc:	ec                   	in     al,dx
c00173fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017401:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017405:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017409:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017410:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017415:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017419:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001741d:	ee                   	out    dx,al
c001741e:	e8 bd fe ff ff       	call   c00172e0 <picIoWait()>
c0017423:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001742a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001742f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017433:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017437:	ee                   	out    dx,al
c0017438:	e8 a3 fe ff ff       	call   c00172e0 <picIoWait()>
c001743d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017441:	0f b6 c0             	movzx  eax,al
c0017444:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001744b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001744f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017453:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017457:	ee                   	out    dx,al
c0017458:	e8 83 fe ff ff       	call   c00172e0 <picIoWait()>
c001745d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017461:	0f b6 c0             	movzx  eax,al
c0017464:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001746b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001746f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017473:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017477:	ee                   	out    dx,al
c0017478:	e8 63 fe ff ff       	call   c00172e0 <picIoWait()>
c001747d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017484:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017489:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001748d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017491:	ee                   	out    dx,al
c0017492:	e8 49 fe ff ff       	call   c00172e0 <picIoWait()>
c0017497:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001749e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00174a3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00174a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174ab:	ee                   	out    dx,al
c00174ac:	e8 2f fe ff ff       	call   c00172e0 <picIoWait()>
c00174b1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00174b8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00174bd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00174c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00174c5:	ee                   	out    dx,al
c00174c6:	e8 15 fe ff ff       	call   c00172e0 <picIoWait()>
c00174cb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00174d2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00174d7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00174db:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174df:	ee                   	out    dx,al
c00174e0:	e8 fb fd ff ff       	call   c00172e0 <picIoWait()>
c00174e5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00174ea:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00174f1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174fd:	ee                   	out    dx,al
c00174fe:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017503:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001750a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001750e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017512:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017516:	ee                   	out    dx,al
c0017517:	90                   	nop
c0017518:	83 c4 50             	add    esp,0x50
c001751b:	c3                   	ret    

c001751c <picEOI(int)>:
c001751c:	83 ec 10             	sub    esp,0x10
c001751f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017524:	75 1e                	jne    c0017544 <picEOI(int)+0x28>
c0017526:	6a 0b                	push   0xb
c0017528:	e8 ef fd ff ff       	call   c001731c <picGetIRQReg(int)>
c001752d:	83 c4 04             	add    esp,0x4
c0017530:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017535:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001753a:	25 80 00 00 00       	and    eax,0x80
c001753f:	74 73                	je     c00175b4 <picEOI(int)+0x98>
c0017541:	8d 76 00             	lea    esi,[esi+0x0]
c0017544:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017549:	75 31                	jne    c001757c <picEOI(int)+0x60>
c001754b:	6a 0b                	push   0xb
c001754d:	e8 ca fd ff ff       	call   c001731c <picGetIRQReg(int)>
c0017552:	83 c4 04             	add    esp,0x4
c0017555:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001755a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001755e:	98                   	cwde   
c001755f:	85 c0                	test   eax,eax
c0017561:	78 19                	js     c001757c <picEOI(int)+0x60>
c0017563:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001756a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001756f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017573:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017578:	ee                   	out    dx,al
c0017579:	eb 3d                	jmp    c00175b8 <picEOI(int)+0x9c>
c001757b:	90                   	nop
c001757c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017581:	7e 19                	jle    c001759c <picEOI(int)+0x80>
c0017583:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001758a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001758f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017593:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017598:	ee                   	out    dx,al
c0017599:	8d 76 00             	lea    esi,[esi+0x0]
c001759c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00175a3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00175a8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00175ac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00175b1:	ee                   	out    dx,al
c00175b2:	eb 04                	jmp    c00175b8 <picEOI(int)+0x9c>
c00175b4:	90                   	nop
c00175b5:	8d 76 00             	lea    esi,[esi+0x0]
c00175b8:	83 c4 10             	add    esp,0x10
c00175bb:	c3                   	ret    

c00175bc <RTC::open(int, int, void*)>:
c00175bc:	31 c0                	xor    eax,eax
c00175be:	c3                   	ret    
c00175bf:	90                   	nop

c00175c0 <RTC::close(int, int, void*)>:
c00175c0:	31 c0                	xor    eax,eax
c00175c2:	c3                   	ret    
c00175c3:	90                   	nop

c00175c4 <RTC::timeInSecondsUTC()>:
c00175c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175c8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00175ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175d4:	c3                   	ret    
c00175d5:	90                   	nop

c00175d6 <RTC::timeInDatetimeUTC()>:
c00175d6:	53                   	push   ebx
c00175d7:	83 ec 14             	sub    esp,0x14
c00175da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00175e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00175e4:	50                   	push   eax
c00175e5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00175e8:	83 c4 0c             	add    esp,0xc
c00175eb:	52                   	push   edx
c00175ec:	50                   	push   eax
c00175ed:	53                   	push   ebx
c00175ee:	e8 8d 45 ff ff       	call   c000bb80 <secondsToDatetime(unsigned long long)>
c00175f3:	89 d8                	mov    eax,ebx
c00175f5:	83 c4 14             	add    esp,0x14
c00175f8:	5b                   	pop    ebx
c00175f9:	c2 04 00             	ret    0x4

c00175fc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175fc:	56                   	push   esi
c00175fd:	53                   	push   ebx
c00175fe:	83 ec 14             	sub    esp,0x14
c0017601:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017605:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017607:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001760a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001760e:	52                   	push   edx
c001760f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017613:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017617:	50                   	push   eax
c0017618:	e8 63 45 ff ff       	call   c000bb80 <secondsToDatetime(unsigned long long)>
c001761d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017625:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017629:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001762d:	89 f0                	mov    eax,esi
c001762f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017633:	83 c4 20             	add    esp,0x20
c0017636:	5b                   	pop    ebx
c0017637:	5e                   	pop    esi
c0017638:	ff e0                	jmp    eax

c001763a <RTC::~RTC()>:
c001763a:	83 ec 0c             	sub    esp,0xc
c001763d:	ba a8 16 02 c0       	mov    edx,0xc00216a8
c0017642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017646:	89 10                	mov    DWORD PTR [eax],edx
c0017648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	50                   	push   eax
c0017650:	e8 b7 42 ff ff       	call   c000b90c <Clock::~Clock()>
c0017655:	83 c4 10             	add    esp,0x10
c0017658:	90                   	nop
c0017659:	83 c4 0c             	add    esp,0xc
c001765c:	c3                   	ret    
c001765d:	90                   	nop

c001765e <RTC::~RTC()>:
c001765e:	83 ec 0c             	sub    esp,0xc
c0017661:	83 ec 0c             	sub    esp,0xc
c0017664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017668:	e8 cd ff ff ff       	call   c001763a <RTC::~RTC()>
c001766d:	83 c4 10             	add    esp,0x10
c0017670:	83 ec 08             	sub    esp,0x8
c0017673:	68 60 01 00 00       	push   0x160
c0017678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001767c:	e8 2b 32 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c0017681:	83 c4 10             	add    esp,0x10
c0017684:	83 c4 0c             	add    esp,0xc
c0017687:	c3                   	ret    

c0017688 <RTC::get_update_in_progress_flag()>:
c0017688:	83 ec 14             	sub    esp,0x14
c001768b:	6a 0a                	push   0xa
c001768d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017693:	e8 fa fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017698:	83 c4 1c             	add    esp,0x1c
c001769b:	0f b6 c0             	movzx  eax,al
c001769e:	c1 e8 07             	shr    eax,0x7
c00176a1:	c3                   	ret    

c00176a2 <RTC::completeRTCRefresh()>:
c00176a2:	55                   	push   ebp
c00176a3:	57                   	push   edi
c00176a4:	56                   	push   esi
c00176a5:	53                   	push   ebx
c00176a6:	83 ec 3c             	sub    esp,0x3c
c00176a9:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00176af:	83 ec 0c             	sub    esp,0xc
c00176b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00176b6:	e8 cd ff ff ff       	call   c0017688 <RTC::get_update_in_progress_flag()>
c00176bb:	83 c4 10             	add    esp,0x10
c00176be:	84 c0                	test   al,al
c00176c0:	74 0e                	je     c00176d0 <RTC::completeRTCRefresh()+0x2e>
c00176c2:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00176c8:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00176ce:	73 df                	jae    c00176af <RTC::completeRTCRefresh()+0xd>
c00176d0:	50                   	push   eax
c00176d1:	50                   	push   eax
c00176d2:	6a 00                	push   0x0
c00176d4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176da:	e8 b3 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176df:	89 c7                	mov    edi,eax
c00176e1:	58                   	pop    eax
c00176e2:	5a                   	pop    edx
c00176e3:	6a 02                	push   0x2
c00176e5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176eb:	e8 a2 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176f0:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176f4:	59                   	pop    ecx
c00176f5:	5b                   	pop    ebx
c00176f6:	6a 04                	push   0x4
c00176f8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176fe:	e8 8f fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017703:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017707:	5e                   	pop    esi
c0017708:	5d                   	pop    ebp
c0017709:	6a 07                	push   0x7
c001770b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017711:	e8 7c fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017716:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001771a:	58                   	pop    eax
c001771b:	5a                   	pop    edx
c001771c:	6a 08                	push   0x8
c001771e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017724:	e8 69 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017729:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001772d:	59                   	pop    ecx
c001772e:	5b                   	pop    ebx
c001772f:	6a 09                	push   0x9
c0017731:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017737:	e8 56 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001773c:	0f b6 c0             	movzx  eax,al
c001773f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c001774c:	83 ec 0c             	sub    esp,0xc
c001774f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017753:	e8 30 ff ff ff       	call   c0017688 <RTC::get_update_in_progress_flag()>
c0017758:	83 c4 10             	add    esp,0x10
c001775b:	84 c0                	test   al,al
c001775d:	74 0e                	je     c001776d <RTC::completeRTCRefresh()+0xcb>
c001775f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017765:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001776b:	73 df                	jae    c001774c <RTC::completeRTCRefresh()+0xaa>
c001776d:	51                   	push   ecx
c001776e:	51                   	push   ecx
c001776f:	6a 00                	push   0x0
c0017771:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017777:	e8 16 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001777c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017780:	5b                   	pop    ebx
c0017781:	5e                   	pop    esi
c0017782:	6a 02                	push   0x2
c0017784:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001778a:	e8 03 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001778f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017793:	5d                   	pop    ebp
c0017794:	58                   	pop    eax
c0017795:	6a 04                	push   0x4
c0017797:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001779d:	e8 f0 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177a2:	88 c3                	mov    bl,al
c00177a4:	58                   	pop    eax
c00177a5:	5a                   	pop    edx
c00177a6:	6a 07                	push   0x7
c00177a8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177ae:	e8 df f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177b3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00177b7:	59                   	pop    ecx
c00177b8:	5e                   	pop    esi
c00177b9:	6a 08                	push   0x8
c00177bb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177c1:	e8 cc f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177c6:	5d                   	pop    ebp
c00177c7:	89 c6                	mov    esi,eax
c00177c9:	58                   	pop    eax
c00177ca:	6a 09                	push   0x9
c00177cc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177d2:	e8 bb f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177d7:	89 f9                	mov    ecx,edi
c00177d9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	0f b6 e8             	movzx  ebp,al
c00177e3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00177e8:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00177ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177f0:	74 27                	je     c0017819 <RTC::completeRTCRefresh()+0x177>
c00177f2:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00177f6:	89 f0                	mov    eax,esi
c00177f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00177fc:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017800:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017804:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017808:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001780c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017810:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017814:	e9 2d ff ff ff       	jmp    c0017746 <RTC::completeRTCRefresh()+0xa4>
c0017819:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001781e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017822:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017826:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001782a:	75 c6                	jne    c00177f2 <RTC::completeRTCRefresh()+0x150>
c001782c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017831:	89 f1                	mov    ecx,esi
c0017833:	0f b6 fb             	movzx  edi,bl
c0017836:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001783a:	0f b6 c9             	movzx  ecx,cl
c001783d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017841:	89 f1                	mov    ecx,esi
c0017843:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017847:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001784b:	0f 94 c2             	sete   dl
c001784e:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017852:	0f 94 c0             	sete   al
c0017855:	21 d0                	and    eax,edx
c0017857:	31 d2                	xor    edx,edx
c0017859:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001785d:	0f 94 c2             	sete   dl
c0017860:	85 c2                	test   edx,eax
c0017862:	74 8e                	je     c00177f2 <RTC::completeRTCRefresh()+0x150>
c0017864:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017868:	75 88                	jne    c00177f2 <RTC::completeRTCRefresh()+0x150>
c001786a:	52                   	push   edx
c001786b:	52                   	push   edx
c001786c:	6a 0b                	push   0xb
c001786e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017874:	e8 19 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017879:	83 c4 10             	add    esp,0x10
c001787c:	a8 04                	test   al,0x4
c001787e:	75 7a                	jne    c00178fa <RTC::completeRTCRefresh()+0x258>
c0017880:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017884:	c1 ef 04             	shr    edi,0x4
c0017887:	83 e6 0f             	and    esi,0xf
c001788a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001788e:	c1 ed 04             	shr    ebp,0x4
c0017891:	6b ed 0a             	imul   ebp,ebp,0xa
c0017894:	c1 ea 04             	shr    edx,0x4
c0017897:	6b d2 0a             	imul   edx,edx,0xa
c001789a:	83 e1 0f             	and    ecx,0xf
c001789d:	01 d1                	add    ecx,edx
c001789f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00178a3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00178a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178ab:	c1 ea 04             	shr    edx,0x4
c00178ae:	6b d2 0a             	imul   edx,edx,0xa
c00178b1:	83 e1 0f             	and    ecx,0xf
c00178b4:	01 d1                	add    ecx,edx
c00178b6:	89 fa                	mov    edx,edi
c00178b8:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00178bc:	83 e2 07             	and    edx,0x7
c00178bf:	89 d9                	mov    ecx,ebx
c00178c1:	6b d2 0a             	imul   edx,edx,0xa
c00178c4:	83 e1 0f             	and    ecx,0xf
c00178c7:	83 e3 80             	and    ebx,0xffffff80
c00178ca:	01 d1                	add    ecx,edx
c00178cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178d0:	09 cb                	or     ebx,ecx
c00178d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00178d6:	c1 ea 04             	shr    edx,0x4
c00178d9:	6b d2 0a             	imul   edx,edx,0xa
c00178dc:	83 e1 0f             	and    ecx,0xf
c00178df:	01 d1                	add    ecx,edx
c00178e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178e5:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00178e9:	c1 ea 04             	shr    edx,0x4
c00178ec:	6b d2 0a             	imul   edx,edx,0xa
c00178ef:	01 d6                	add    esi,edx
c00178f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178f5:	83 e2 0f             	and    edx,0xf
c00178f8:	01 d5                	add    ebp,edx
c00178fa:	a8 02                	test   al,0x2
c00178fc:	75 15                	jne    c0017913 <RTC::completeRTCRefresh()+0x271>
c00178fe:	f6 c3 80             	test   bl,0x80
c0017901:	74 10                	je     c0017913 <RTC::completeRTCRefresh()+0x271>
c0017903:	83 e3 7f             	and    ebx,0x7f
c0017906:	b9 18 00 00 00       	mov    ecx,0x18
c001790b:	8d 43 0c             	lea    eax,[ebx+0xc]
c001790e:	99                   	cdq    
c001790f:	f7 f9                	idiv   ecx
c0017911:	88 d3                	mov    bl,dl
c0017913:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017919:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001791f:	77 06                	ja     c0017927 <RTC::completeRTCRefresh()+0x285>
c0017921:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017927:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001792c:	31 c9                	xor    ecx,ecx
c001792e:	31 d2                	xor    edx,edx
c0017930:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017934:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017938:	89 cd                	mov    ebp,ecx
c001793a:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001793e:	c1 e7 10             	shl    edi,0x10
c0017941:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017947:	c1 e0 10             	shl    eax,0x10
c001794a:	09 c5                	or     ebp,eax
c001794c:	89 e9                	mov    ecx,ebp
c001794e:	0f b7 c2             	movzx  eax,dx
c0017951:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017955:	09 f8                	or     eax,edi
c0017957:	89 c2                	mov    edx,eax
c0017959:	50                   	push   eax
c001795a:	50                   	push   eax
c001795b:	88 d9                	mov    cl,bl
c001795d:	51                   	push   ecx
c001795e:	52                   	push   edx
c001795f:	e8 97 40 ff ff       	call   c000b9fb <datetimeToSeconds(datetime_t)>
c0017964:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017968:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001796e:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017974:	83 c4 4c             	add    esp,0x4c
c0017977:	5b                   	pop    ebx
c0017978:	5e                   	pop    esi
c0017979:	5f                   	pop    edi
c001797a:	5d                   	pop    ebp
c001797b:	c3                   	ret    

c001797c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001797c:	55                   	push   ebp
c001797d:	57                   	push   edi
c001797e:	56                   	push   esi
c001797f:	53                   	push   ebx
c0017980:	83 ec 30             	sub    esp,0x30
c0017983:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017987:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001798b:	6a 00                	push   0x0
c001798d:	6a 00                	push   0x0
c001798f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017995:	e8 10 f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c001799a:	83 c4 0c             	add    esp,0xc
c001799d:	6a 00                	push   0x0
c001799f:	6a 02                	push   0x2
c00179a1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179a7:	e8 fe f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c00179ac:	89 f8                	mov    eax,edi
c00179ae:	89 f9                	mov    ecx,edi
c00179b0:	0f b6 c4             	movzx  eax,ah
c00179b3:	31 d2                	xor    edx,edx
c00179b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179b9:	c1 e9 10             	shr    ecx,0x10
c00179bc:	89 f0                	mov    eax,esi
c00179be:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00179c2:	89 f0                	mov    eax,esi
c00179c4:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00179c8:	0f b6 c4             	movzx  eax,ah
c00179cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179cf:	89 f0                	mov    eax,esi
c00179d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00179d5:	c1 e8 10             	shr    eax,0x10
c00179d8:	b9 64 00 00 00       	mov    ecx,0x64
c00179dd:	f7 f1                	div    ecx
c00179df:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179e3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00179e7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179eb:	59                   	pop    ecx
c00179ec:	5b                   	pop    ebx
c00179ed:	89 fb                	mov    ebx,edi
c00179ef:	6a 0b                	push   0xb
c00179f1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179f7:	e8 96 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00179fc:	83 c4 10             	add    esp,0x10
c00179ff:	a8 04                	test   al,0x4
c0017a01:	89 c5                	mov    ebp,eax
c0017a03:	75 6e                	jne    c0017a73 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017a05:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a09:	31 d2                	xor    edx,edx
c0017a0b:	0f b6 c1             	movzx  eax,cl
c0017a0e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017a13:	f7 f1                	div    ecx
c0017a15:	c1 e0 04             	shl    eax,0x4
c0017a18:	09 d0                	or     eax,edx
c0017a1a:	31 d2                	xor    edx,edx
c0017a1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017a25:	f7 f1                	div    ecx
c0017a27:	c1 e0 04             	shl    eax,0x4
c0017a2a:	09 d0                	or     eax,edx
c0017a2c:	31 d2                	xor    edx,edx
c0017a2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a32:	0f b6 c3             	movzx  eax,bl
c0017a35:	f7 f1                	div    ecx
c0017a37:	c1 e0 04             	shl    eax,0x4
c0017a3a:	09 d0                	or     eax,edx
c0017a3c:	31 d2                	xor    edx,edx
c0017a3e:	89 c3                	mov    ebx,eax
c0017a40:	89 f0                	mov    eax,esi
c0017a42:	0f b6 c0             	movzx  eax,al
c0017a45:	f7 f1                	div    ecx
c0017a47:	c1 e0 04             	shl    eax,0x4
c0017a4a:	09 d0                	or     eax,edx
c0017a4c:	31 d2                	xor    edx,edx
c0017a4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a57:	f7 f1                	div    ecx
c0017a59:	c1 e0 04             	shl    eax,0x4
c0017a5c:	09 d0                	or     eax,edx
c0017a5e:	31 d2                	xor    edx,edx
c0017a60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a68:	f7 f1                	div    ecx
c0017a6a:	c1 e0 04             	shl    eax,0x4
c0017a6d:	09 d0                	or     eax,edx
c0017a6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a73:	83 e5 02             	and    ebp,0x2
c0017a76:	75 1e                	jne    c0017a96 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a78:	0f b6 c3             	movzx  eax,bl
c0017a7b:	83 f8 0b             	cmp    eax,0xb
c0017a7e:	76 10                	jbe    c0017a90 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a80:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a83:	84 d2                	test   dl,dl
c0017a85:	88 d3                	mov    bl,dl
c0017a87:	75 02                	jne    c0017a8b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a89:	b3 0c                	mov    bl,0xc
c0017a8b:	83 cb 80             	or     ebx,0xffffff80
c0017a8e:	eb 06                	jmp    c0017a96 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a90:	85 c0                	test   eax,eax
c0017a92:	75 02                	jne    c0017a96 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a94:	b3 0c                	mov    bl,0xc
c0017a96:	50                   	push   eax
c0017a97:	0f b6 db             	movzx  ebx,bl
c0017a9a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a9f:	52                   	push   edx
c0017aa0:	6a 00                	push   0x0
c0017aa2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa8:	e8 fd f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aad:	83 c4 0c             	add    esp,0xc
c0017ab0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017ab5:	50                   	push   eax
c0017ab6:	6a 02                	push   0x2
c0017ab8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017abe:	e8 e7 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ac3:	83 c4 0c             	add    esp,0xc
c0017ac6:	53                   	push   ebx
c0017ac7:	6a 04                	push   0x4
c0017ac9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017acf:	e8 d6 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ad4:	83 c4 0c             	add    esp,0xc
c0017ad7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017adc:	52                   	push   edx
c0017add:	6a 07                	push   0x7
c0017adf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ae5:	e8 c0 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aea:	83 c4 0c             	add    esp,0xc
c0017aed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017af2:	50                   	push   eax
c0017af3:	6a 08                	push   0x8
c0017af5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017afb:	e8 aa f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b00:	83 c4 0c             	add    esp,0xc
c0017b03:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017b08:	55                   	push   ebp
c0017b09:	6a 09                	push   0x9
c0017b0b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b11:	e8 94 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b16:	5a                   	pop    edx
c0017b17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017b1b:	e8 82 fb ff ff       	call   c00176a2 <RTC::completeRTCRefresh()>
c0017b20:	83 c4 3c             	add    esp,0x3c
c0017b23:	b0 01                	mov    al,0x1
c0017b25:	5b                   	pop    ebx
c0017b26:	5e                   	pop    esi
c0017b27:	5f                   	pop    edi
c0017b28:	5d                   	pop    ebp
c0017b29:	c3                   	ret    

c0017b2a <rtcIRQHandler(regs*, void*)>:
c0017b2a:	53                   	push   ebx
c0017b2b:	83 ec 10             	sub    esp,0x10
c0017b2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017b32:	6a 0c                	push   0xc
c0017b34:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b3a:	e8 53 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	a8 80                	test   al,0x80
c0017b44:	74 24                	je     c0017b6a <rtcIRQHandler(regs*, void*)+0x40>
c0017b46:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017b4d:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b54:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017b5b:	75 0d                	jne    c0017b6a <rtcIRQHandler(regs*, void*)+0x40>
c0017b5d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b61:	83 c4 08             	add    esp,0x8
c0017b64:	5b                   	pop    ebx
c0017b65:	e9 38 fb ff ff       	jmp    c00176a2 <RTC::completeRTCRefresh()>
c0017b6a:	83 c4 08             	add    esp,0x8
c0017b6d:	5b                   	pop    ebx
c0017b6e:	c3                   	ret    
c0017b6f:	90                   	nop

c0017b70 <RTC::RTC()>:
c0017b70:	83 ec 1c             	sub    esp,0x1c
c0017b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b77:	83 ec 08             	sub    esp,0x8
c0017b7a:	68 8b 16 02 c0       	push   0xc002168b
c0017b7f:	50                   	push   eax
c0017b80:	e8 51 3d ff ff       	call   c000b8d6 <Clock::Clock(char const*)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	ba a8 16 02 c0       	mov    edx,0xc00216a8
c0017b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b91:	89 10                	mov    DWORD PTR [eax],edx
c0017b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b97:	83 ec 0c             	sub    esp,0xc
c0017b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b9e:	6a 01                	push   0x1
c0017ba0:	68 2a 7b 01 c0       	push   0xc0017b2a
c0017ba5:	6a 08                	push   0x8
c0017ba7:	50                   	push   eax
c0017ba8:	e8 0b 42 ff ff       	call   c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017bad:	83 c4 20             	add    esp,0x20
c0017bb0:	89 c2                	mov    edx,eax
c0017bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bb6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017bbc:	fa                   	cli    
c0017bbd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bc2:	83 c0 01             	add    eax,0x1
c0017bc5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bca:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017bcf:	83 ec 08             	sub    esp,0x8
c0017bd2:	6a 0b                	push   0xb
c0017bd4:	50                   	push   eax
c0017bd5:	e8 b8 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017bda:	83 c4 10             	add    esp,0x10
c0017bdd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017be1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017be6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017bea:	83 ca 10             	or     edx,0x10
c0017bed:	0f b6 d2             	movzx  edx,dl
c0017bf0:	83 ec 04             	sub    esp,0x4
c0017bf3:	52                   	push   edx
c0017bf4:	6a 0b                	push   0xb
c0017bf6:	50                   	push   eax
c0017bf7:	e8 ae f6 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bfc:	83 c4 10             	add    esp,0x10
c0017bff:	83 ec 0c             	sub    esp,0xc
c0017c02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c06:	e8 97 fa ff ff       	call   c00176a2 <RTC::completeRTCRefresh()>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c13:	83 e8 01             	sub    eax,0x1
c0017c16:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c1b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c20:	85 c0                	test   eax,eax
c0017c22:	75 01                	jne    c0017c25 <RTC::RTC()+0xb5>
c0017c24:	fb                   	sti    
c0017c25:	90                   	nop
c0017c26:	83 c4 1c             	add    esp,0x1c
c0017c29:	c3                   	ret    
c0017c2a:	66 90                	xchg   ax,ax

c0017c2c <HalConsoleScroll(int, int)>:
c0017c2c:	83 ec 10             	sub    esp,0x10
c0017c2f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017c37:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017c3f:	90                   	nop
c0017c40:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c45:	0f 8f e1 00 00 00    	jg     c0017d2c <HalConsoleScroll(int, int)+0x100>
c0017c4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c53:	90                   	nop
c0017c54:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c5c:	0f 8f be 00 00 00    	jg     c0017d20 <HalConsoleScroll(int, int)+0xf4>
c0017c62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c66:	89 d0                	mov    eax,edx
c0017c68:	c1 e0 02             	shl    eax,0x2
c0017c6b:	01 d0                	add    eax,edx
c0017c6d:	c1 e0 05             	shl    eax,0x5
c0017c70:	89 c2                	mov    edx,eax
c0017c72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c76:	01 d0                	add    eax,edx
c0017c78:	89 c2                	mov    edx,eax
c0017c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c7e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c85:	89 d0                	mov    eax,edx
c0017c87:	c1 e0 02             	shl    eax,0x2
c0017c8a:	01 d0                	add    eax,edx
c0017c8c:	c1 e0 05             	shl    eax,0x5
c0017c8f:	89 c2                	mov    edx,eax
c0017c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c95:	01 d0                	add    eax,edx
c0017c97:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca1:	01 d0                	add    eax,edx
c0017ca3:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017ca5:	88 10                	mov    BYTE PTR [eax],dl
c0017ca7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017cac:	75 66                	jne    c0017d14 <HalConsoleScroll(int, int)+0xe8>
c0017cae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cb2:	83 e0 01             	and    eax,0x1
c0017cb5:	74 39                	je     c0017cf0 <HalConsoleScroll(int, int)+0xc4>
c0017cb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cbb:	83 e0 0f             	and    eax,0xf
c0017cbe:	88 c2                	mov    dl,al
c0017cc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cc4:	c1 e0 04             	shl    eax,0x4
c0017cc7:	09 d0                	or     eax,edx
c0017cc9:	88 c1                	mov    cl,al
c0017ccb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ccf:	89 d0                	mov    eax,edx
c0017cd1:	c1 e0 02             	shl    eax,0x2
c0017cd4:	01 d0                	add    eax,edx
c0017cd6:	c1 e0 05             	shl    eax,0x5
c0017cd9:	89 c2                	mov    edx,eax
c0017cdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cdf:	01 d0                	add    eax,edx
c0017ce1:	89 c2                	mov    edx,eax
c0017ce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ce7:	01 d0                	add    eax,edx
c0017ce9:	88 ca                	mov    dl,cl
c0017ceb:	88 10                	mov    BYTE PTR [eax],dl
c0017ced:	eb 25                	jmp    c0017d14 <HalConsoleScroll(int, int)+0xe8>
c0017cef:	90                   	nop
c0017cf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cf4:	89 d0                	mov    eax,edx
c0017cf6:	c1 e0 02             	shl    eax,0x2
c0017cf9:	01 d0                	add    eax,edx
c0017cfb:	c1 e0 05             	shl    eax,0x5
c0017cfe:	89 c2                	mov    edx,eax
c0017d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d04:	01 d0                	add    eax,edx
c0017d06:	89 c2                	mov    edx,eax
c0017d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d0c:	01 d0                	add    eax,edx
c0017d0e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017d11:	8d 76 00             	lea    esi,[esi+0x0]
c0017d14:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017d19:	e9 36 ff ff ff       	jmp    c0017c54 <HalConsoleScroll(int, int)+0x28>
c0017d1e:	66 90                	xchg   ax,ax
c0017d20:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017d25:	e9 16 ff ff ff       	jmp    c0017c40 <HalConsoleScroll(int, int)+0x14>
c0017d2a:	66 90                	xchg   ax,ax
c0017d2c:	90                   	nop
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	c3                   	ret    
c0017d31:	8d 76 00             	lea    esi,[esi+0x0]

c0017d34 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017d34:	83 ec 14             	sub    esp,0x14
c0017d37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d3b:	88 04 24             	mov    BYTE PTR [esp],al
c0017d3e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d41:	0f b6 c0             	movzx  eax,al
c0017d44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d48:	89 d1                	mov    ecx,edx
c0017d4a:	83 e1 0f             	and    ecx,0xf
c0017d4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d51:	c1 e2 04             	shl    edx,0x4
c0017d54:	0f b6 d2             	movzx  edx,dl
c0017d57:	09 ca                	or     edx,ecx
c0017d59:	c1 e2 08             	shl    edx,0x8
c0017d5c:	09 d0                	or     eax,edx
c0017d5e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d63:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d6f:	89 d0                	mov    eax,edx
c0017d71:	c1 e0 02             	shl    eax,0x2
c0017d74:	01 d0                	add    eax,edx
c0017d76:	c1 e0 04             	shl    eax,0x4
c0017d79:	89 c2                	mov    edx,eax
c0017d7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d7f:	01 d0                	add    eax,edx
c0017d81:	d1 e0                	shl    eax,1
c0017d83:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d8b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017d90:	66 89 10             	mov    WORD PTR [eax],dx
c0017d93:	90                   	nop
c0017d94:	83 c4 14             	add    esp,0x14
c0017d97:	c3                   	ret    

c0017d98 <HalConsoleCursorUpdate(int, int)>:
c0017d98:	83 ec 20             	sub    esp,0x20
c0017d9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d9f:	89 c2                	mov    edx,eax
c0017da1:	c1 e2 02             	shl    edx,0x2
c0017da4:	01 d0                	add    eax,edx
c0017da6:	c1 e0 04             	shl    eax,0x4
c0017da9:	89 c2                	mov    edx,eax
c0017dab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017daf:	01 d0                	add    eax,edx
c0017db1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017db6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017dbd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017dc2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017dc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017dca:	ee                   	out    dx,al
c0017dcb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017dd0:	0f b6 c0             	movzx  eax,al
c0017dd3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017dda:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017dde:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017de2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017de6:	ee                   	out    dx,al
c0017de7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017dee:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017df3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017df7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dfb:	ee                   	out    dx,al
c0017dfc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017e01:	c1 e8 08             	shr    eax,0x8
c0017e04:	0f b6 c0             	movzx  eax,al
c0017e07:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017e0e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e12:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e1a:	ee                   	out    dx,al
c0017e1b:	90                   	nop
c0017e1c:	83 c4 20             	add    esp,0x20
c0017e1f:	c3                   	ret    

c0017e20 <FAT::getName()>:
c0017e20:	b8 dc 16 02 c0       	mov    eax,0xc00216dc
c0017e25:	c3                   	ret    
c0017e26:	66 90                	xchg   ax,ax

c0017e28 <FAT::tell(void*, unsigned long long*)>:
c0017e28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e2d:	75 09                	jne    c0017e38 <FAT::tell(void*, unsigned long long*)+0x10>
c0017e2f:	b8 04 00 00 00       	mov    eax,0x4
c0017e34:	c3                   	ret    
c0017e35:	8d 76 00             	lea    esi,[esi+0x0]
c0017e38:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e3d:	75 09                	jne    c0017e48 <FAT::tell(void*, unsigned long long*)+0x20>
c0017e3f:	b8 04 00 00 00       	mov    eax,0x4
c0017e44:	c3                   	ret    
c0017e45:	8d 76 00             	lea    esi,[esi+0x0]
c0017e48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e4c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017e4f:	ba 00 00 00 00       	mov    edx,0x0
c0017e54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e58:	89 01                	mov    DWORD PTR [ecx],eax
c0017e5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e5d:	b8 00 00 00 00       	mov    eax,0x0
c0017e62:	c3                   	ret    
c0017e63:	90                   	nop

c0017e64 <FAT::stat(void*, unsigned long long*)>:
c0017e64:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e69:	75 09                	jne    c0017e74 <FAT::stat(void*, unsigned long long*)+0x10>
c0017e6b:	b8 04 00 00 00       	mov    eax,0x4
c0017e70:	c3                   	ret    
c0017e71:	8d 76 00             	lea    esi,[esi+0x0]
c0017e74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e79:	75 09                	jne    c0017e84 <FAT::stat(void*, unsigned long long*)+0x20>
c0017e7b:	b8 04 00 00 00       	mov    eax,0x4
c0017e80:	c3                   	ret    
c0017e81:	8d 76 00             	lea    esi,[esi+0x0]
c0017e84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e8b:	ba 00 00 00 00       	mov    edx,0x0
c0017e90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e94:	89 01                	mov    DWORD PTR [ecx],eax
c0017e96:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e99:	b8 00 00 00 00       	mov    eax,0x0
c0017e9e:	c3                   	ret    
c0017e9f:	90                   	nop

c0017ea0 <FAT::~FAT()>:
c0017ea0:	83 ec 0c             	sub    esp,0xc
c0017ea3:	ba 28 17 02 c0       	mov    edx,0xc0021728
c0017ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eac:	89 10                	mov    DWORD PTR [eax],edx
c0017eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eb2:	83 ec 0c             	sub    esp,0xc
c0017eb5:	50                   	push   eax
c0017eb6:	e8 35 2e ff ff       	call   c000acf0 <Filesystem::~Filesystem()>
c0017ebb:	83 c4 10             	add    esp,0x10
c0017ebe:	90                   	nop
c0017ebf:	83 c4 0c             	add    esp,0xc
c0017ec2:	c3                   	ret    
c0017ec3:	90                   	nop

c0017ec4 <FAT::~FAT()>:
c0017ec4:	83 ec 0c             	sub    esp,0xc
c0017ec7:	83 ec 0c             	sub    esp,0xc
c0017eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ece:	e8 cd ff ff ff       	call   c0017ea0 <FAT::~FAT()>
c0017ed3:	83 c4 10             	add    esp,0x10
c0017ed6:	83 ec 08             	sub    esp,0x8
c0017ed9:	6a 08                	push   0x8
c0017edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017edf:	e8 c8 29 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	83 c4 0c             	add    esp,0xc
c0017eea:	c3                   	ret    
c0017eeb:	90                   	nop

c0017eec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017eec:	83 ec 1c             	sub    esp,0x1c
c0017eef:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017ef6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017efb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eff:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f06:	83 f8 ff             	cmp    eax,0xffffffff
c0017f09:	75 35                	jne    c0017f40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017f0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f0f:	88 c2                	mov    dl,al
c0017f11:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f16:	01 d0                	add    eax,edx
c0017f18:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f1c:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f26:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f2d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f36:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f3d:	eb 19                	jmp    c0017f58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017f3f:	90                   	nop
c0017f40:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f44:	88 c2                	mov    dl,al
c0017f46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f4a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f51:	01 d0                	add    eax,edx
c0017f53:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f57:	90                   	nop
c0017f58:	83 ec 04             	sub    esp,0x4
c0017f5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f63:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f67:	50                   	push   eax
c0017f68:	e8 86 d0 fe ff       	call   c0004ff3 <f_getlabel>
c0017f6d:	83 c4 10             	add    esp,0x10
c0017f70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f79:	75 09                	jne    c0017f84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f7b:	b8 00 00 00 00       	mov    eax,0x0
c0017f80:	eb 0a                	jmp    c0017f8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f82:	66 90                	xchg   ax,ax
c0017f84:	b8 01 00 00 00       	mov    eax,0x1
c0017f89:	8d 76 00             	lea    esi,[esi+0x0]
c0017f8c:	83 c4 1c             	add    esp,0x1c
c0017f8f:	c3                   	ret    

c0017f90 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f90:	53                   	push   ebx
c0017f91:	83 ec 58             	sub    esp,0x58
c0017f94:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f9c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017fa0:	b9 00 00 00 00       	mov    ecx,0x0
c0017fa5:	b8 3c 00 00 00       	mov    eax,0x3c
c0017faa:	83 e0 f8             	and    eax,0xfffffff8
c0017fad:	89 c3                	mov    ebx,eax
c0017faf:	b8 00 00 00 00       	mov    eax,0x0
c0017fb4:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0017fb8:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0017fbc:	83 c0 08             	add    eax,0x8
c0017fbf:	39 d8                	cmp    eax,ebx
c0017fc1:	72 f1                	jb     c0017fb4 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017fc3:	01 c2                	add    edx,eax
c0017fc5:	89 0a                	mov    DWORD PTR [edx],ecx
c0017fc7:	83 c2 04             	add    edx,0x4
c0017fca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fce:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fd5:	83 f8 ff             	cmp    eax,0xffffffff
c0017fd8:	75 36                	jne    c0018010 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017fda:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fde:	88 c2                	mov    dl,al
c0017fe0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fe5:	01 d0                	add    eax,edx
c0017fe7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017feb:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017ff1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017ff5:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017ffc:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018001:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018005:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001800c:	eb 1a                	jmp    c0018028 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001800e:	66 90                	xchg   ax,ax
c0018010:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018014:	88 c2                	mov    dl,al
c0018016:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001801a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018021:	01 d0                	add    eax,edx
c0018023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018027:	90                   	nop
c0018028:	83 ec 08             	sub    esp,0x8
c001802b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001802f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018033:	50                   	push   eax
c0018034:	e8 37 88 fe ff       	call   c0000870 <strcat>
c0018039:	83 c4 10             	add    esp,0x10
c001803c:	83 ec 0c             	sub    esp,0xc
c001803f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018043:	50                   	push   eax
c0018044:	e8 fe d0 fe ff       	call   c0005147 <f_setlabel>
c0018049:	83 c4 10             	add    esp,0x10
c001804c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018050:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018055:	75 09                	jne    c0018060 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018057:	b8 00 00 00 00       	mov    eax,0x0
c001805c:	eb 0a                	jmp    c0018068 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001805e:	66 90                	xchg   ax,ax
c0018060:	b8 01 00 00 00       	mov    eax,0x1
c0018065:	8d 76 00             	lea    esi,[esi+0x0]
c0018068:	83 c4 58             	add    esp,0x58
c001806b:	5b                   	pop    ebx
c001806c:	c3                   	ret    
c001806d:	90                   	nop
c001806e:	66 90                	xchg   ax,ax

c0018070 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018070:	83 ec 2c             	sub    esp,0x2c
c0018073:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001807b:	83 ec 08             	sub    esp,0x8
c001807e:	68 00 17 02 c0       	push   0xc0021700
c0018083:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018087:	e8 f4 86 fe ff       	call   c0000780 <strcmp>
c001808c:	83 c4 10             	add    esp,0x10
c001808f:	85 c0                	test   eax,eax
c0018091:	0f 94 c0             	sete   al
c0018094:	0f b6 c0             	movzx  eax,al
c0018097:	85 c0                	test   eax,eax
c0018099:	74 0d                	je     c00180a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001809b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180a3:	e9 c0 00 00 00       	jmp    c0018168 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180a8:	83 ec 08             	sub    esp,0x8
c00180ab:	68 f2 16 02 c0       	push   0xc00216f2
c00180b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180b4:	e8 c7 86 fe ff       	call   c0000780 <strcmp>
c00180b9:	83 c4 10             	add    esp,0x10
c00180bc:	85 c0                	test   eax,eax
c00180be:	0f 94 c0             	sete   al
c00180c1:	0f b6 c0             	movzx  eax,al
c00180c4:	85 c0                	test   eax,eax
c00180c6:	74 10                	je     c00180d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00180c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180d0:	e9 93 00 00 00       	jmp    c0018168 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180d5:	8d 76 00             	lea    esi,[esi+0x0]
c00180d8:	83 ec 08             	sub    esp,0x8
c00180db:	68 f8 16 02 c0       	push   0xc00216f8
c00180e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180e4:	e8 97 86 fe ff       	call   c0000780 <strcmp>
c00180e9:	83 c4 10             	add    esp,0x10
c00180ec:	85 c0                	test   eax,eax
c00180ee:	0f 94 c0             	sete   al
c00180f1:	0f b6 c0             	movzx  eax,al
c00180f4:	85 c0                	test   eax,eax
c00180f6:	74 0c                	je     c0018104 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00180f8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018100:	eb 66                	jmp    c0018168 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018102:	66 90                	xchg   ax,ax
c0018104:	83 ec 08             	sub    esp,0x8
c0018107:	68 3c f4 01 c0       	push   0xc001f43c
c001810c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018110:	e8 6b 86 fe ff       	call   c0000780 <strcmp>
c0018115:	83 c4 10             	add    esp,0x10
c0018118:	85 c0                	test   eax,eax
c001811a:	0f 94 c0             	sete   al
c001811d:	0f b6 c0             	movzx  eax,al
c0018120:	85 c0                	test   eax,eax
c0018122:	74 0c                	je     c0018130 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018124:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001812c:	eb 3a                	jmp    c0018168 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001812e:	66 90                	xchg   ax,ax
c0018130:	83 ec 08             	sub    esp,0x8
c0018133:	68 fe 16 02 c0       	push   0xc00216fe
c0018138:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001813c:	e8 3f 86 fe ff       	call   c0000780 <strcmp>
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	85 c0                	test   eax,eax
c0018146:	0f 94 c0             	sete   al
c0018149:	0f b6 c0             	movzx  eax,al
c001814c:	85 c0                	test   eax,eax
c001814e:	74 0c                	je     c001815c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018150:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018158:	eb 0e                	jmp    c0018168 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001815a:	66 90                	xchg   ax,ax
c001815c:	b8 08 00 00 00       	mov    eax,0x8
c0018161:	e9 ea 00 00 00       	jmp    c0018250 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018166:	66 90                	xchg   ax,ax
c0018168:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001816f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018174:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018178:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001817f:	83 f8 ff             	cmp    eax,0xffffffff
c0018182:	75 34                	jne    c00181b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018184:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018188:	88 c2                	mov    dl,al
c001818a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001818f:	01 d0                	add    eax,edx
c0018191:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018195:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001819b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001819f:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00181a6:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00181af:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00181b6:	eb 18                	jmp    c00181d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00181b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00181bc:	88 c2                	mov    dl,al
c00181be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181c2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181c9:	01 d0                	add    eax,edx
c00181cb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00181cf:	90                   	nop
c00181d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181d4:	88 04 24             	mov    BYTE PTR [esp],al
c00181d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00181db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00181e7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00181ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00181f4:	83 ec 0c             	sub    esp,0xc
c00181f7:	68 00 20 00 00       	push   0x2000
c00181fc:	e8 ca f8 fe ff       	call   c0007acb <malloc>
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018208:	68 00 20 00 00       	push   0x2000
c001820d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018211:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018215:	50                   	push   eax
c0018216:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001821a:	50                   	push   eax
c001821b:	e8 24 d2 fe ff       	call   c0005444 <f_mkfs>
c0018220:	83 c4 10             	add    esp,0x10
c0018223:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018227:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001822c:	75 0a                	jne    c0018238 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001822e:	b8 00 00 00 00       	mov    eax,0x0
c0018233:	eb 1b                	jmp    c0018250 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018235:	8d 76 00             	lea    esi,[esi+0x0]
c0018238:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001823d:	75 09                	jne    c0018248 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001823f:	b8 09 00 00 00       	mov    eax,0x9
c0018244:	eb 0a                	jmp    c0018250 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018246:	66 90                	xchg   ax,ax
c0018248:	b8 01 00 00 00       	mov    eax,0x1
c001824d:	8d 76 00             	lea    esi,[esi+0x0]
c0018250:	83 c4 2c             	add    esp,0x2c
c0018253:	c3                   	ret    

c0018254 <FAT::tryMount(LogicalDisk*, int)>:
c0018254:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001825a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001825f:	83 f8 14             	cmp    eax,0x14
c0018262:	75 18                	jne    c001827c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018264:	83 ec 0c             	sub    esp,0xc
c0018267:	68 04 17 02 c0       	push   0xc0021704
c001826c:	e8 04 86 ff ff       	call   c0010875 <KePanic(char const*)>
c0018271:	83 c4 10             	add    esp,0x10
c0018274:	b0 00                	mov    al,0x0
c0018276:	e9 ed 01 00 00       	jmp    c0018468 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001827b:	90                   	nop
c001827c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018283:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018289:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001828f:	3d 00 02 00 00       	cmp    eax,0x200
c0018294:	74 0a                	je     c00182a0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018296:	b0 00                	mov    al,0x0
c0018298:	e9 cb 01 00 00       	jmp    c0018468 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001829d:	8d 76 00             	lea    esi,[esi+0x0]
c00182a0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00182a8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182af:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00182b6:	83 f8 ff             	cmp    eax,0xffffffff
c00182b9:	74 09                	je     c00182c4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00182bb:	b0 01                	mov    al,0x1
c00182bd:	e9 a6 01 00 00       	jmp    c0018468 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182c2:	66 90                	xchg   ax,ax
c00182c4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00182ce:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00182d6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00182dd:	88 c2                	mov    dl,al
c00182df:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182e4:	01 d0                	add    eax,edx
c00182e6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00182ed:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00182f3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182fa:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018301:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018306:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001830d:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018314:	83 ec 0c             	sub    esp,0xc
c0018317:	68 34 02 00 00       	push   0x234
c001831c:	e8 aa f7 fe ff       	call   c0007acb <malloc>
c0018321:	83 c4 10             	add    esp,0x10
c0018324:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001832b:	83 ec 04             	sub    esp,0x4
c001832e:	6a 00                	push   0x0
c0018330:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018337:	50                   	push   eax
c0018338:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001833f:	e8 fa b8 fe ff       	call   c0003c3e <f_mount>
c0018344:	83 c4 10             	add    esp,0x10
c0018347:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001834e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018356:	74 1c                	je     c0018374 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018358:	83 ec 0c             	sub    esp,0xc
c001835b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018362:	e8 84 f7 fe ff       	call   c0007aeb <rfree>
c0018367:	83 c4 10             	add    esp,0x10
c001836a:	b0 00                	mov    al,0x0
c001836c:	e9 f7 00 00 00       	jmp    c0018468 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018371:	8d 76 00             	lea    esi,[esi+0x0]
c0018374:	83 ec 04             	sub    esp,0x4
c0018377:	68 00 01 00 00       	push   0x100
c001837c:	6a 00                	push   0x0
c001837e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018385:	50                   	push   eax
c0018386:	e8 65 81 fe ff       	call   c00004f0 <memset>
c001838b:	83 c4 10             	add    esp,0x10
c001838e:	83 ec 08             	sub    esp,0x8
c0018391:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018398:	50                   	push   eax
c0018399:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183a0:	50                   	push   eax
c00183a1:	e8 ca 84 fe ff       	call   c0000870 <strcat>
c00183a6:	83 c4 10             	add    esp,0x10
c00183a9:	83 ec 08             	sub    esp,0x8
c00183ac:	68 12 17 02 c0       	push   0xc0021712
c00183b1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183b8:	50                   	push   eax
c00183b9:	e8 b2 84 fe ff       	call   c0000870 <strcat>
c00183be:	83 c4 10             	add    esp,0x10
c00183c1:	83 ec 04             	sub    esp,0x4
c00183c4:	6a 01                	push   0x1
c00183c6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00183cd:	50                   	push   eax
c00183ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183d2:	50                   	push   eax
c00183d3:	e8 c8 b8 fe ff       	call   c0003ca0 <f_open>
c00183d8:	83 c4 10             	add    esp,0x10
c00183db:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00183e2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00183e9:	85 c0                	test   eax,eax
c00183eb:	74 0b                	je     c00183f8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00183ed:	78 31                	js     c0018420 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183ef:	83 e8 04             	sub    eax,0x4
c00183f2:	83 f8 01             	cmp    eax,0x1
c00183f5:	77 29                	ja     c0018420 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183f7:	90                   	nop
c00183f8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018400:	83 ec 0c             	sub    esp,0xc
c0018403:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018407:	50                   	push   eax
c0018408:	e8 43 c0 fe ff       	call   c0004450 <f_close>
c001840d:	83 c4 10             	add    esp,0x10
c0018410:	90                   	nop
c0018411:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018419:	85 c0                	test   eax,eax
c001841b:	74 43                	je     c0018460 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001841d:	eb 31                	jmp    c0018450 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001841f:	90                   	nop
c0018420:	83 ec 0c             	sub    esp,0xc
c0018423:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001842a:	e8 bc f6 fe ff       	call   c0007aeb <rfree>
c001842f:	83 c4 10             	add    esp,0x10
c0018432:	83 ec 04             	sub    esp,0x4
c0018435:	6a 00                	push   0x0
c0018437:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001843e:	50                   	push   eax
c001843f:	6a 00                	push   0x0
c0018441:	e8 f8 b7 fe ff       	call   c0003c3e <f_mount>
c0018446:	83 c4 10             	add    esp,0x10
c0018449:	b0 00                	mov    al,0x0
c001844b:	eb 1b                	jmp    c0018468 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001844d:	8d 76 00             	lea    esi,[esi+0x0]
c0018450:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018455:	83 c0 01             	add    eax,0x1
c0018458:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c001845d:	8d 76 00             	lea    esi,[esi+0x0]
c0018460:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018467:	90                   	nop
c0018468:	81 c4 4c 03 00 00    	add    esp,0x34c
c001846e:	c3                   	ret    
c001846f:	90                   	nop

c0018470 <FAT::allocateSwapfile(char const*, int)>:
c0018470:	55                   	push   ebp
c0018471:	57                   	push   edi
c0018472:	56                   	push   esi
c0018473:	53                   	push   ebx
c0018474:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001847a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018485:	83 ec 0c             	sub    esp,0xc
c0018488:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001848f:	e8 37 f6 fe ff       	call   c0007acb <malloc>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	89 c7                	mov    edi,eax
c0018499:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001849e:	83 ec 04             	sub    esp,0x4
c00184a1:	50                   	push   eax
c00184a2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00184a9:	57                   	push   edi
c00184aa:	e8 a3 2a ff ff       	call   c000af52 <File::File(char const*, Process*)>
c00184af:	83 c4 10             	add    esp,0x10
c00184b2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00184b9:	83 ec 04             	sub    esp,0x4
c00184bc:	8d 44 24 13          	lea    eax,[esp+0x13]
c00184c0:	50                   	push   eax
c00184c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184c5:	50                   	push   eax
c00184c6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184cd:	e8 e8 2d ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c00184d2:	83 c4 10             	add    esp,0x10
c00184d5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184dc:	c1 e0 14             	shl    eax,0x14
c00184df:	89 c7                	mov    edi,eax
c00184e1:	89 c5                	mov    ebp,eax
c00184e3:	c1 fd 1f             	sar    ebp,0x1f
c00184e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184ee:	89 f9                	mov    ecx,edi
c00184f0:	31 c1                	xor    ecx,eax
c00184f2:	89 cb                	mov    ebx,ecx
c00184f4:	89 e9                	mov    ecx,ebp
c00184f6:	31 d1                	xor    ecx,edx
c00184f8:	89 ce                	mov    esi,ecx
c00184fa:	89 f0                	mov    eax,esi
c00184fc:	09 d8                	or     eax,ebx
c00184fe:	0f 84 9c 00 00 00    	je     c00185a0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018504:	83 ec 0c             	sub    esp,0xc
c0018507:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001850e:	e8 73 2c ff ff       	call   c000b186 <File::unlink()>
c0018513:	83 c4 10             	add    esp,0x10
c0018516:	83 ec 08             	sub    esp,0x8
c0018519:	6a 12                	push   0x12
c001851b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018522:	e8 e7 2a ff ff       	call   c000b00e <File::open(FileOpenMode)>
c0018527:	83 c4 10             	add    esp,0x10
c001852a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018531:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018537:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001853e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018545:	c1 e0 14             	shl    eax,0x14
c0018548:	83 ec 04             	sub    esp,0x4
c001854b:	6a 01                	push   0x1
c001854d:	50                   	push   eax
c001854e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018555:	e8 7d cd fe ff       	call   c00052d7 <f_expand>
c001855a:	83 c4 10             	add    esp,0x10
c001855d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018564:	8b 00                	mov    eax,DWORD PTR [eax]
c0018566:	83 c0 10             	add    eax,0x10
c0018569:	8b 00                	mov    eax,DWORD PTR [eax]
c001856b:	83 ec 0c             	sub    esp,0xc
c001856e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018572:	52                   	push   edx
c0018573:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018577:	52                   	push   edx
c0018578:	6a 00                	push   0x0
c001857a:	68 00 04 00 00       	push   0x400
c001857f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018586:	ff d0                	call   eax
c0018588:	83 c4 20             	add    esp,0x20
c001858b:	83 ec 0c             	sub    esp,0xc
c001858e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018595:	e8 d2 2a ff ff       	call   c000b06c <File::close()>
c001859a:	83 c4 10             	add    esp,0x10
c001859d:	8d 76 00             	lea    esi,[esi+0x0]
c00185a0:	83 ec 08             	sub    esp,0x8
c00185a3:	6a 01                	push   0x1
c00185a5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185ac:	e8 5d 2a ff ff       	call   c000b00e <File::open(FileOpenMode)>
c00185b1:	83 c4 10             	add    esp,0x10
c00185b4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00185bd:	83 c0 0c             	add    eax,0xc
c00185c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00185c2:	83 ec 0c             	sub    esp,0xc
c00185c5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00185c9:	52                   	push   edx
c00185ca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00185ce:	52                   	push   edx
c00185cf:	6a 00                	push   0x0
c00185d1:	6a 04                	push   0x4
c00185d3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00185da:	ff d0                	call   eax
c00185dc:	83 c4 20             	add    esp,0x20
c00185df:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185e6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00185ec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00185f3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00185fa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00185fd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018604:	83 ec 0c             	sub    esp,0xc
c0018607:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001860e:	e8 59 2a ff ff       	call   c000b06c <File::close()>
c0018613:	83 c4 10             	add    esp,0x10
c0018616:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001861d:	ba 00 00 00 00       	mov    edx,0x0
c0018622:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018628:	5b                   	pop    ebx
c0018629:	5e                   	pop    esi
c001862a:	5f                   	pop    edi
c001862b:	5d                   	pop    ebp
c001862c:	c3                   	ret    
c001862d:	90                   	nop
c001862e:	66 90                	xchg   ax,ax

c0018630 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018630:	57                   	push   edi
c0018631:	56                   	push   esi
c0018632:	53                   	push   ebx
c0018633:	81 ec 50 02 00 00    	sub    esp,0x250
c0018639:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018641:	74 0d                	je     c0018650 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018643:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001864b:	75 0f                	jne    c001865c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001864d:	8d 76 00             	lea    esi,[esi+0x0]
c0018650:	b8 04 00 00 00       	mov    eax,0x4
c0018655:	e9 3a 01 00 00       	jmp    c0018794 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001865a:	66 90                	xchg   ax,ax
c001865c:	83 ec 08             	sub    esp,0x8
c001865f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018666:	50                   	push   eax
c0018667:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001866e:	e8 a9 c0 fe ff       	call   c000471c <f_readdir>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001867d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018684:	83 ec 0c             	sub    esp,0xc
c0018687:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001868e:	83 c0 16             	add    eax,0x16
c0018691:	50                   	push   eax
c0018692:	e8 e9 7e fe ff       	call   c0000580 <strlen>
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	ba 00 00 00 00       	mov    edx,0x0
c001869f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00186a7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00186ae:	0f b6 c0             	movzx  eax,al
c00186b1:	83 e0 10             	and    eax,0x10
c00186b4:	74 0a                	je     c00186c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00186b6:	b8 02 00 00 00       	mov    eax,0x2
c00186bb:	eb 0b                	jmp    c00186c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	b8 01 00 00 00       	mov    eax,0x1
c00186c5:	8d 76 00             	lea    esi,[esi+0x0]
c00186c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186cc:	83 ec 08             	sub    esp,0x8
c00186cf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00186d6:	83 c0 16             	add    eax,0x16
c00186d9:	50                   	push   eax
c00186da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186de:	83 c0 10             	add    eax,0x10
c00186e1:	50                   	push   eax
c00186e2:	e8 69 7f fe ff       	call   c0000650 <strcpy>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00186f1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00186f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186fc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018703:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001870a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018711:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018718:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001871f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018726:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001872d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018734:	89 c6                	mov    esi,eax
c0018736:	89 d7                	mov    edi,edx
c0018738:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001873a:	89 c8                	mov    eax,ecx
c001873c:	89 fa                	mov    edx,edi
c001873e:	89 f3                	mov    ebx,esi
c0018740:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018747:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001874e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018755:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001875c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018762:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018769:	0f be c0             	movsx  eax,al
c001876c:	85 c0                	test   eax,eax
c001876e:	75 08                	jne    c0018778 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018770:	b8 07 00 00 00       	mov    eax,0x7
c0018775:	eb 1d                	jmp    c0018794 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018777:	90                   	nop
c0018778:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001877f:	85 c0                	test   eax,eax
c0018781:	75 09                	jne    c001878c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018783:	b8 00 00 00 00       	mov    eax,0x0
c0018788:	eb 0a                	jmp    c0018794 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001878a:	66 90                	xchg   ax,ax
c001878c:	b8 01 00 00 00       	mov    eax,0x1
c0018791:	8d 76 00             	lea    esi,[esi+0x0]
c0018794:	81 c4 50 02 00 00    	add    esp,0x250
c001879a:	5b                   	pop    ebx
c001879b:	5e                   	pop    esi
c001879c:	5f                   	pop    edi
c001879d:	c3                   	ret    
c001879e:	66 90                	xchg   ax,ax

c00187a0 <FAT::read(void*, unsigned long, void*, int*)>:
c00187a0:	83 ec 1c             	sub    esp,0x1c
c00187a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187a8:	74 0a                	je     c00187b4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00187aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187af:	75 0b                	jne    c00187bc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00187b1:	8d 76 00             	lea    esi,[esi+0x0]
c00187b4:	b8 04 00 00 00       	mov    eax,0x4
c00187b9:	eb 41                	jmp    c00187fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187bb:	90                   	nop
c00187bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187c0:	50                   	push   eax
c00187c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187cd:	e8 91 b7 fe ff       	call   c0003f63 <f_read>
c00187d2:	83 c4 10             	add    esp,0x10
c00187d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187dd:	89 c2                	mov    edx,eax
c00187df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187e3:	89 10                	mov    DWORD PTR [eax],edx
c00187e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187e9:	85 c0                	test   eax,eax
c00187eb:	75 07                	jne    c00187f4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00187ed:	b8 00 00 00 00       	mov    eax,0x0
c00187f2:	eb 08                	jmp    c00187fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187f4:	b8 01 00 00 00       	mov    eax,0x1
c00187f9:	8d 76 00             	lea    esi,[esi+0x0]
c00187fc:	83 c4 1c             	add    esp,0x1c
c00187ff:	c3                   	ret    

c0018800 <FAT::write(void*, unsigned long, void*, int*)>:
c0018800:	83 ec 1c             	sub    esp,0x1c
c0018803:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018808:	74 0a                	je     c0018814 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001880a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001880f:	75 0b                	jne    c001881c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018811:	8d 76 00             	lea    esi,[esi+0x0]
c0018814:	b8 04 00 00 00       	mov    eax,0x4
c0018819:	eb 41                	jmp    c001885c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001881b:	90                   	nop
c001881c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018820:	50                   	push   eax
c0018821:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018825:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018829:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001882d:	e8 12 b9 fe ff       	call   c0004144 <f_write>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018839:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001883d:	89 c2                	mov    edx,eax
c001883f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018843:	89 10                	mov    DWORD PTR [eax],edx
c0018845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018849:	85 c0                	test   eax,eax
c001884b:	75 07                	jne    c0018854 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001884d:	b8 00 00 00 00       	mov    eax,0x0
c0018852:	eb 08                	jmp    c001885c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018854:	b8 01 00 00 00       	mov    eax,0x1
c0018859:	8d 76 00             	lea    esi,[esi+0x0]
c001885c:	83 c4 1c             	add    esp,0x1c
c001885f:	c3                   	ret    

c0018860 <FAT::close(void*)>:
c0018860:	83 ec 1c             	sub    esp,0x1c
c0018863:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018868:	75 0a                	jne    c0018874 <FAT::close(void*)+0x14>
c001886a:	b8 04 00 00 00       	mov    eax,0x4
c001886f:	eb 3f                	jmp    c00188b0 <FAT::close(void*)+0x50>
c0018871:	8d 76 00             	lea    esi,[esi+0x0]
c0018874:	83 ec 0c             	sub    esp,0xc
c0018877:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001887b:	e8 d0 bb fe ff       	call   c0004450 <f_close>
c0018880:	83 c4 10             	add    esp,0x10
c0018883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018887:	83 ec 0c             	sub    esp,0xc
c001888a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001888e:	e8 48 f2 fe ff       	call   c0007adb <free>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001889a:	85 c0                	test   eax,eax
c001889c:	75 0a                	jne    c00188a8 <FAT::close(void*)+0x48>
c001889e:	b8 00 00 00 00       	mov    eax,0x0
c00188a3:	eb 0b                	jmp    c00188b0 <FAT::close(void*)+0x50>
c00188a5:	8d 76 00             	lea    esi,[esi+0x0]
c00188a8:	b8 01 00 00 00       	mov    eax,0x1
c00188ad:	8d 76 00             	lea    esi,[esi+0x0]
c00188b0:	83 c4 1c             	add    esp,0x1c
c00188b3:	c3                   	ret    

c00188b4 <FAT::closeDir(void*)>:
c00188b4:	83 ec 1c             	sub    esp,0x1c
c00188b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00188bc:	75 0a                	jne    c00188c8 <FAT::closeDir(void*)+0x14>
c00188be:	b8 04 00 00 00       	mov    eax,0x4
c00188c3:	eb 3f                	jmp    c0018904 <FAT::closeDir(void*)+0x50>
c00188c5:	8d 76 00             	lea    esi,[esi+0x0]
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188cf:	e8 26 be fe ff       	call   c00046fa <f_closedir>
c00188d4:	83 c4 10             	add    esp,0x10
c00188d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188db:	83 ec 0c             	sub    esp,0xc
c00188de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188e2:	e8 f4 f1 fe ff       	call   c0007adb <free>
c00188e7:	83 c4 10             	add    esp,0x10
c00188ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188ee:	85 c0                	test   eax,eax
c00188f0:	75 0a                	jne    c00188fc <FAT::closeDir(void*)+0x48>
c00188f2:	b8 00 00 00 00       	mov    eax,0x0
c00188f7:	eb 0b                	jmp    c0018904 <FAT::closeDir(void*)+0x50>
c00188f9:	8d 76 00             	lea    esi,[esi+0x0]
c00188fc:	b8 01 00 00 00       	mov    eax,0x1
c0018901:	8d 76 00             	lea    esi,[esi+0x0]
c0018904:	83 c4 1c             	add    esp,0x1c
c0018907:	c3                   	ret    

c0018908 <FAT::seek(void*, unsigned long long)>:
c0018908:	83 ec 2c             	sub    esp,0x2c
c001890b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001890f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018913:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001891b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018920:	75 0a                	jne    c001892c <FAT::seek(void*, unsigned long long)+0x24>
c0018922:	b8 04 00 00 00       	mov    eax,0x4
c0018927:	eb 33                	jmp    c001895c <FAT::seek(void*, unsigned long long)+0x54>
c0018929:	8d 76 00             	lea    esi,[esi+0x0]
c001892c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018930:	83 ec 08             	sub    esp,0x8
c0018933:	50                   	push   eax
c0018934:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018938:	e8 42 bb fe ff       	call   c000447f <f_lseek>
c001893d:	83 c4 10             	add    esp,0x10
c0018940:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018948:	85 c0                	test   eax,eax
c001894a:	75 08                	jne    c0018954 <FAT::seek(void*, unsigned long long)+0x4c>
c001894c:	b8 00 00 00 00       	mov    eax,0x0
c0018951:	eb 09                	jmp    c001895c <FAT::seek(void*, unsigned long long)+0x54>
c0018953:	90                   	nop
c0018954:	b8 01 00 00 00       	mov    eax,0x1
c0018959:	8d 76 00             	lea    esi,[esi+0x0]
c001895c:	83 c4 2c             	add    esp,0x2c
c001895f:	c3                   	ret    

c0018960 <fatWrapperReadDisk>:
c0018960:	53                   	push   ebx
c0018961:	83 ec 18             	sub    esp,0x18
c0018964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018968:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001896c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018971:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018978:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001897c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018980:	ba 00 00 00 00       	mov    edx,0x0
c0018985:	83 ec 0c             	sub    esp,0xc
c0018988:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001898c:	53                   	push   ebx
c001898d:	52                   	push   edx
c001898e:	50                   	push   eax
c001898f:	51                   	push   ecx
c0018990:	e8 61 48 ff ff       	call   c000d1f6 <LogicalDisk::read(unsigned long long, int, void*)>
c0018995:	83 c4 20             	add    esp,0x20
c0018998:	83 c4 18             	add    esp,0x18
c001899b:	5b                   	pop    ebx
c001899c:	c3                   	ret    
c001899d:	8d 76 00             	lea    esi,[esi+0x0]

c00189a0 <fatWrapperWriteDisk>:
c00189a0:	53                   	push   ebx
c00189a1:	83 ec 18             	sub    esp,0x18
c00189a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189b1:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00189b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00189bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189c0:	ba 00 00 00 00       	mov    edx,0x0
c00189c5:	83 ec 0c             	sub    esp,0xc
c00189c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189cc:	53                   	push   ebx
c00189cd:	52                   	push   edx
c00189ce:	50                   	push   eax
c00189cf:	51                   	push   ecx
c00189d0:	e8 8d 48 ff ff       	call   c000d262 <LogicalDisk::write(unsigned long long, int, void*)>
c00189d5:	83 c4 20             	add    esp,0x20
c00189d8:	83 c4 18             	add    esp,0x18
c00189db:	5b                   	pop    ebx
c00189dc:	c3                   	ret    
c00189dd:	8d 76 00             	lea    esi,[esi+0x0]

c00189e0 <fatWrapperIoctl>:
c00189e0:	53                   	push   ebx
c00189e1:	83 ec 28             	sub    esp,0x28
c00189e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00189ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189f0:	88 d0                	mov    al,dl
c00189f2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189fb:	83 f8 02             	cmp    eax,0x2
c00189fe:	75 34                	jne    c0018a34 <fatWrapperIoctl+0x54>
c0018a00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a0d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a14:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a1a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018a20:	89 c2                	mov    edx,eax
c0018a22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018a26:	66 89 10             	mov    WORD PTR [eax],dx
c0018a29:	b8 00 00 00 00       	mov    eax,0x0
c0018a2e:	e9 c5 00 00 00       	jmp    c0018af8 <fatWrapperIoctl+0x118>
c0018a33:	90                   	nop
c0018a34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a39:	83 f8 01             	cmp    eax,0x1
c0018a3c:	75 6a                	jne    c0018aa8 <fatWrapperIoctl+0xc8>
c0018a3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a46:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a4b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a52:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a58:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018a5e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a64:	89 c8                	mov    eax,ecx
c0018a66:	89 da                	mov    edx,ebx
c0018a68:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a6c:	c1 e0 0a             	shl    eax,0xa
c0018a6f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a74:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a7b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a81:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a87:	89 cb                	mov    ebx,ecx
c0018a89:	c1 fb 1f             	sar    ebx,0x1f
c0018a8c:	53                   	push   ebx
c0018a8d:	51                   	push   ecx
c0018a8e:	52                   	push   edx
c0018a8f:	50                   	push   eax
c0018a90:	e8 ab 5b 00 00       	call   c001e640 <__udivdi3>
c0018a95:	83 c4 10             	add    esp,0x10
c0018a98:	89 c2                	mov    edx,eax
c0018a9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a9e:	89 10                	mov    DWORD PTR [eax],edx
c0018aa0:	b8 00 00 00 00       	mov    eax,0x0
c0018aa5:	eb 51                	jmp    c0018af8 <fatWrapperIoctl+0x118>
c0018aa7:	90                   	nop
c0018aa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aad:	85 c0                	test   eax,eax
c0018aaf:	75 07                	jne    c0018ab8 <fatWrapperIoctl+0xd8>
c0018ab1:	b8 00 00 00 00       	mov    eax,0x0
c0018ab6:	eb 40                	jmp    c0018af8 <fatWrapperIoctl+0x118>
c0018ab8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018abd:	83 f8 03             	cmp    eax,0x3
c0018ac0:	75 1a                	jne    c0018adc <fatWrapperIoctl+0xfc>
c0018ac2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ac6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ace:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018ad4:	b8 00 00 00 00       	mov    eax,0x0
c0018ad9:	eb 1d                	jmp    c0018af8 <fatWrapperIoctl+0x118>
c0018adb:	90                   	nop
c0018adc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ae1:	83 f8 04             	cmp    eax,0x4
c0018ae4:	75 0a                	jne    c0018af0 <fatWrapperIoctl+0x110>
c0018ae6:	b8 00 00 00 00       	mov    eax,0x0
c0018aeb:	eb 0b                	jmp    c0018af8 <fatWrapperIoctl+0x118>
c0018aed:	8d 76 00             	lea    esi,[esi+0x0]
c0018af0:	b8 04 00 00 00       	mov    eax,0x4
c0018af5:	8d 76 00             	lea    esi,[esi+0x0]
c0018af8:	83 c4 28             	add    esp,0x28
c0018afb:	5b                   	pop    ebx
c0018afc:	c3                   	ret    
c0018afd:	90                   	nop
c0018afe:	66 90                	xchg   ax,ax

c0018b00 <FAT::FAT()>:
c0018b00:	83 ec 1c             	sub    esp,0x1c
c0018b03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b07:	83 ec 0c             	sub    esp,0xc
c0018b0a:	50                   	push   eax
c0018b0b:	e8 bc 21 ff ff       	call   c000accc <Filesystem::Filesystem()>
c0018b10:	83 c4 10             	add    esp,0x10
c0018b13:	ba 28 17 02 c0       	mov    edx,0xc0021728
c0018b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b1c:	89 10                	mov    DWORD PTR [eax],edx
c0018b1e:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018b28:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018b30:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018b35:	7f 19                	jg     c0018b50 <FAT::FAT()+0x50>
c0018b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b3b:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018b46:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018b4b:	eb e3                	jmp    c0018b30 <FAT::FAT()+0x30>
c0018b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b50:	90                   	nop
c0018b51:	83 c4 1c             	add    esp,0x1c
c0018b54:	c3                   	ret    
c0018b55:	90                   	nop
c0018b56:	66 90                	xchg   ax,ax

c0018b58 <FAT::fixFilepath(char*)>:
c0018b58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b5c:	8a 00                	mov    al,BYTE PTR [eax]
c0018b5e:	0f be c0             	movsx  eax,al
c0018b61:	83 f8 40             	cmp    eax,0x40
c0018b64:	7e 2e                	jle    c0018b94 <FAT::fixFilepath(char*)+0x3c>
c0018b66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b6a:	8a 00                	mov    al,BYTE PTR [eax]
c0018b6c:	83 e8 41             	sub    eax,0x41
c0018b6f:	88 c2                	mov    dl,al
c0018b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b75:	88 10                	mov    BYTE PTR [eax],dl
c0018b77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b7b:	8a 00                	mov    al,BYTE PTR [eax]
c0018b7d:	0f be c0             	movsx  eax,al
c0018b80:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b87:	83 c0 30             	add    eax,0x30
c0018b8a:	88 c2                	mov    dl,al
c0018b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b90:	88 10                	mov    BYTE PTR [eax],dl
c0018b92:	66 90                	xchg   ax,ax
c0018b94:	90                   	nop
c0018b95:	c3                   	ret    
c0018b96:	66 90                	xchg   ax,ax

c0018b98 <FAT::open(char const*, void**, FileOpenMode)>:
c0018b98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018ba6:	74 0c                	je     c0018bb4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018ba8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018bb0:	75 0e                	jne    c0018bc0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018bb2:	66 90                	xchg   ax,ax
c0018bb4:	b8 04 00 00 00       	mov    eax,0x4
c0018bb9:	e9 46 01 00 00       	jmp    c0018d04 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018bbe:	66 90                	xchg   ax,ax
c0018bc0:	83 ec 08             	sub    esp,0x8
c0018bc3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018bca:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018bce:	50                   	push   eax
c0018bcf:	e8 7c 7a fe ff       	call   c0000650 <strcpy>
c0018bd4:	83 c4 10             	add    esp,0x10
c0018bd7:	83 ec 08             	sub    esp,0x8
c0018bda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bde:	50                   	push   eax
c0018bdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018be6:	e8 6d ff ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0018beb:	83 c4 10             	add    esp,0x10
c0018bee:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018bf6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bfd:	83 e0 01             	and    eax,0x1
c0018c00:	74 12                	je     c0018c14 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018c02:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c09:	83 c8 01             	or     eax,0x1
c0018c0c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c13:	90                   	nop
c0018c14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c1b:	83 e0 04             	and    eax,0x4
c0018c1e:	74 24                	je     c0018c44 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018c20:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c27:	83 c8 30             	or     eax,0x30
c0018c2a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c31:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c38:	83 c8 02             	or     eax,0x2
c0018c3b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c42:	66 90                	xchg   ax,ax
c0018c44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c4b:	83 e0 02             	and    eax,0x2
c0018c4e:	74 14                	je     c0018c64 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018c50:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c57:	83 c8 02             	or     eax,0x2
c0018c5a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c61:	8d 76 00             	lea    esi,[esi+0x0]
c0018c64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c6b:	83 e0 08             	and    eax,0x8
c0018c6e:	74 14                	je     c0018c84 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c70:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c77:	83 c8 04             	or     eax,0x4
c0018c7a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c81:	8d 76 00             	lea    esi,[esi+0x0]
c0018c84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c8b:	83 e0 10             	and    eax,0x10
c0018c8e:	74 14                	je     c0018ca4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c90:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c97:	83 c8 08             	or     eax,0x8
c0018c9a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	68 28 02 00 00       	push   0x228
c0018cac:	e8 1a ee fe ff       	call   c0007acb <malloc>
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	89 c2                	mov    edx,eax
c0018cb6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cbd:	89 10                	mov    DWORD PTR [eax],edx
c0018cbf:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018cc7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cd0:	83 ec 04             	sub    esp,0x4
c0018cd3:	52                   	push   edx
c0018cd4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018cd8:	52                   	push   edx
c0018cd9:	50                   	push   eax
c0018cda:	e8 c1 af fe ff       	call   c0003ca0 <f_open>
c0018cdf:	83 c4 10             	add    esp,0x10
c0018ce2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018ce9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018cf1:	74 09                	je     c0018cfc <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018cf3:	b8 01 00 00 00       	mov    eax,0x1
c0018cf8:	eb 0a                	jmp    c0018d04 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018cfa:	66 90                	xchg   ax,ax
c0018cfc:	b8 00 00 00 00       	mov    eax,0x0
c0018d01:	8d 76 00             	lea    esi,[esi+0x0]
c0018d04:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d0a:	c3                   	ret    
c0018d0b:	90                   	nop

c0018d0c <FAT::openDir(char const*, void**)>:
c0018d0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018d12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018d1a:	74 0c                	je     c0018d28 <FAT::openDir(char const*, void**)+0x1c>
c0018d1c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018d24:	75 0e                	jne    c0018d34 <FAT::openDir(char const*, void**)+0x28>
c0018d26:	66 90                	xchg   ax,ax
c0018d28:	b8 04 00 00 00       	mov    eax,0x4
c0018d2d:	e9 82 00 00 00       	jmp    c0018db4 <FAT::openDir(char const*, void**)+0xa8>
c0018d32:	66 90                	xchg   ax,ax
c0018d34:	83 ec 08             	sub    esp,0x8
c0018d37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d42:	50                   	push   eax
c0018d43:	e8 08 79 fe ff       	call   c0000650 <strcpy>
c0018d48:	83 c4 10             	add    esp,0x10
c0018d4b:	83 ec 08             	sub    esp,0x8
c0018d4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d52:	50                   	push   eax
c0018d53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d5a:	e8 f9 fd ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0018d5f:	83 c4 10             	add    esp,0x10
c0018d62:	83 ec 0c             	sub    esp,0xc
c0018d65:	6a 30                	push   0x30
c0018d67:	e8 5f ed fe ff       	call   c0007acb <malloc>
c0018d6c:	83 c4 10             	add    esp,0x10
c0018d6f:	89 c2                	mov    edx,eax
c0018d71:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d78:	89 10                	mov    DWORD PTR [eax],edx
c0018d7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d83:	83 ec 08             	sub    esp,0x8
c0018d86:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d8a:	52                   	push   edx
c0018d8b:	50                   	push   eax
c0018d8c:	e8 9e b8 fe ff       	call   c000462f <f_opendir>
c0018d91:	83 c4 10             	add    esp,0x10
c0018d94:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d9b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018da3:	74 07                	je     c0018dac <FAT::openDir(char const*, void**)+0xa0>
c0018da5:	b8 01 00 00 00       	mov    eax,0x1
c0018daa:	eb 08                	jmp    c0018db4 <FAT::openDir(char const*, void**)+0xa8>
c0018dac:	b8 00 00 00 00       	mov    eax,0x0
c0018db1:	8d 76 00             	lea    esi,[esi+0x0]
c0018db4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018dba:	c3                   	ret    
c0018dbb:	90                   	nop

c0018dbc <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018dbc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018dc2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018dca:	75 0c                	jne    c0018dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018dcc:	b8 04 00 00 00       	mov    eax,0x4
c0018dd1:	e9 d6 00 00 00       	jmp    c0018eac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dd6:	66 90                	xchg   ax,ax
c0018dd8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018de0:	75 0a                	jne    c0018dec <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018de2:	b8 04 00 00 00       	mov    eax,0x4
c0018de7:	e9 c0 00 00 00       	jmp    c0018eac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dec:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018df4:	75 0a                	jne    c0018e00 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018df6:	b8 04 00 00 00       	mov    eax,0x4
c0018dfb:	e9 ac 00 00 00       	jmp    c0018eac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e00:	83 ec 08             	sub    esp,0x8
c0018e03:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e0a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e11:	50                   	push   eax
c0018e12:	e8 39 78 fe ff       	call   c0000650 <strcpy>
c0018e17:	83 c4 10             	add    esp,0x10
c0018e1a:	83 ec 08             	sub    esp,0x8
c0018e1d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018e24:	50                   	push   eax
c0018e25:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e2c:	e8 27 fd ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0018e31:	83 c4 10             	add    esp,0x10
c0018e34:	83 ec 08             	sub    esp,0x8
c0018e37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e3b:	50                   	push   eax
c0018e3c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e43:	50                   	push   eax
c0018e44:	e8 65 b9 fe ff       	call   c00047ae <f_stat>
c0018e49:	83 c4 10             	add    esp,0x10
c0018e4c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018e53:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018e5a:	85 c0                	test   eax,eax
c0018e5c:	74 0a                	je     c0018e68 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018e5e:	83 f8 04             	cmp    eax,0x4
c0018e61:	74 39                	je     c0018e9c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e63:	eb 3f                	jmp    c0018ea4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e65:	8d 76 00             	lea    esi,[esi+0x0]
c0018e68:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e6c:	0f b6 c0             	movzx  eax,al
c0018e6f:	83 e0 10             	and    eax,0x10
c0018e72:	0f 95 c2             	setne  dl
c0018e75:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e7c:	88 10                	mov    BYTE PTR [eax],dl
c0018e7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e82:	ba 00 00 00 00       	mov    edx,0x0
c0018e87:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e8e:	89 01                	mov    DWORD PTR [ecx],eax
c0018e90:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e93:	b8 00 00 00 00       	mov    eax,0x0
c0018e98:	eb 12                	jmp    c0018eac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e9a:	66 90                	xchg   ax,ax
c0018e9c:	b8 02 00 00 00       	mov    eax,0x2
c0018ea1:	eb 09                	jmp    c0018eac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018ea3:	90                   	nop
c0018ea4:	b8 01 00 00 00       	mov    eax,0x1
c0018ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0018eac:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018eb2:	c3                   	ret    
c0018eb3:	90                   	nop

c0018eb4 <FAT::unlink(char const*)>:
c0018eb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018eba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018ec2:	75 08                	jne    c0018ecc <FAT::unlink(char const*)+0x18>
c0018ec4:	b8 04 00 00 00       	mov    eax,0x4
c0018ec9:	eb 61                	jmp    c0018f2c <FAT::unlink(char const*)+0x78>
c0018ecb:	90                   	nop
c0018ecc:	83 ec 08             	sub    esp,0x8
c0018ecf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ed6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018eda:	50                   	push   eax
c0018edb:	e8 70 77 fe ff       	call   c0000650 <strcpy>
c0018ee0:	83 c4 10             	add    esp,0x10
c0018ee3:	83 ec 08             	sub    esp,0x8
c0018ee6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018eea:	50                   	push   eax
c0018eeb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ef2:	e8 61 fc ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0018ef7:	83 c4 10             	add    esp,0x10
c0018efa:	83 ec 0c             	sub    esp,0xc
c0018efd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f01:	50                   	push   eax
c0018f02:	e8 19 bb fe ff       	call   c0004a20 <f_unlink>
c0018f07:	83 c4 10             	add    esp,0x10
c0018f0a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018f11:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018f18:	85 c0                	test   eax,eax
c0018f1a:	75 08                	jne    c0018f24 <FAT::unlink(char const*)+0x70>
c0018f1c:	b8 00 00 00 00       	mov    eax,0x0
c0018f21:	eb 09                	jmp    c0018f2c <FAT::unlink(char const*)+0x78>
c0018f23:	90                   	nop
c0018f24:	b8 01 00 00 00       	mov    eax,0x1
c0018f29:	8d 76 00             	lea    esi,[esi+0x0]
c0018f2c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018f32:	c3                   	ret    
c0018f33:	90                   	nop

c0018f34 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018f34:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f3a:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018f41:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0018f48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f4c:	88 d0                	mov    al,dl
c0018f4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018f52:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f5a:	75 0c                	jne    c0018f68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018f5c:	b8 04 00 00 00       	mov    eax,0x4
c0018f61:	e9 7e 01 00 00       	jmp    c00190e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0018f66:	66 90                	xchg   ax,ax
c0018f68:	83 ec 08             	sub    esp,0x8
c0018f6b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f72:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f76:	50                   	push   eax
c0018f77:	e8 d4 76 fe ff       	call   c0000650 <strcpy>
c0018f7c:	83 c4 10             	add    esp,0x10
c0018f7f:	83 ec 08             	sub    esp,0x8
c0018f82:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f86:	50                   	push   eax
c0018f87:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f8e:	e8 c5 fb ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f9e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018fa6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fab:	83 e0 01             	and    eax,0x1
c0018fae:	74 14                	je     c0018fc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0018fb0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fb7:	83 c8 01             	or     eax,0x1
c0018fba:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fc9:	83 e0 02             	and    eax,0x2
c0018fcc:	74 12                	je     c0018fe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018fce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fd5:	83 c8 20             	or     eax,0x20
c0018fd8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fdf:	90                   	nop
c0018fe0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fe5:	83 e0 04             	and    eax,0x4
c0018fe8:	74 12                	je     c0018ffc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0018fea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018ff1:	83 c8 04             	or     eax,0x4
c0018ff4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018ffb:	90                   	nop
c0018ffc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019001:	83 e0 08             	and    eax,0x8
c0019004:	74 12                	je     c0019018 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019006:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001900d:	83 c8 02             	or     eax,0x2
c0019010:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019017:	90                   	nop
c0019018:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001901d:	83 e0 01             	and    eax,0x1
c0019020:	74 12                	je     c0019034 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019022:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019029:	83 c8 01             	or     eax,0x1
c001902c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019033:	90                   	nop
c0019034:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019039:	83 e0 02             	and    eax,0x2
c001903c:	74 12                	je     c0019050 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001903e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019045:	83 c8 20             	or     eax,0x20
c0019048:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001904f:	90                   	nop
c0019050:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019055:	83 e0 04             	and    eax,0x4
c0019058:	74 12                	je     c001906c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001905a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019061:	83 c8 04             	or     eax,0x4
c0019064:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001906b:	90                   	nop
c001906c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019071:	83 e0 08             	and    eax,0x8
c0019074:	74 12                	je     c0019088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019076:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001907d:	83 c8 02             	or     eax,0x2
c0019080:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019087:	90                   	nop
c0019088:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001908f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019096:	09 d0                	or     eax,edx
c0019098:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001909f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00190a7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00190af:	83 ec 04             	sub    esp,0x4
c00190b2:	52                   	push   edx
c00190b3:	50                   	push   eax
c00190b4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00190b8:	50                   	push   eax
c00190b9:	e8 d5 bd fe ff       	call   c0004e93 <f_chmod>
c00190be:	83 c4 10             	add    esp,0x10
c00190c1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00190c8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00190cf:	85 c0                	test   eax,eax
c00190d1:	75 09                	jne    c00190dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c00190d3:	b8 00 00 00 00       	mov    eax,0x0
c00190d8:	eb 0a                	jmp    c00190e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c00190da:	66 90                	xchg   ax,ax
c00190dc:	b8 01 00 00 00       	mov    eax,0x1
c00190e1:	8d 76 00             	lea    esi,[esi+0x0]
c00190e4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00190ea:	c3                   	ret    
c00190eb:	90                   	nop

c00190ec <FAT::rename(char const*, char const*)>:
c00190ec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00190f2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00190fa:	74 0c                	je     c0019108 <FAT::rename(char const*, char const*)+0x1c>
c00190fc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019104:	75 0e                	jne    c0019114 <FAT::rename(char const*, char const*)+0x28>
c0019106:	66 90                	xchg   ax,ax
c0019108:	b8 04 00 00 00       	mov    eax,0x4
c001910d:	e9 9e 00 00 00       	jmp    c00191b0 <FAT::rename(char const*, char const*)+0xc4>
c0019112:	66 90                	xchg   ax,ax
c0019114:	83 ec 08             	sub    esp,0x8
c0019117:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001911e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019125:	50                   	push   eax
c0019126:	e8 25 75 fe ff       	call   c0000650 <strcpy>
c001912b:	83 c4 10             	add    esp,0x10
c001912e:	83 ec 08             	sub    esp,0x8
c0019131:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019138:	50                   	push   eax
c0019139:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019140:	e8 13 fa ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0019145:	83 c4 10             	add    esp,0x10
c0019148:	83 ec 08             	sub    esp,0x8
c001914b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019152:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019156:	50                   	push   eax
c0019157:	e8 f4 74 fe ff       	call   c0000650 <strcpy>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	83 ec 08             	sub    esp,0x8
c0019162:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019166:	50                   	push   eax
c0019167:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001916e:	e8 e5 f9 ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0019173:	83 c4 10             	add    esp,0x10
c0019176:	83 ec 08             	sub    esp,0x8
c0019179:	8d 44 24 14          	lea    eax,[esp+0x14]
c001917d:	50                   	push   eax
c001917e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019185:	50                   	push   eax
c0019186:	e8 50 bb fe ff       	call   c0004cdb <f_rename>
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019195:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001919c:	85 c0                	test   eax,eax
c001919e:	75 08                	jne    c00191a8 <FAT::rename(char const*, char const*)+0xbc>
c00191a0:	b8 00 00 00 00       	mov    eax,0x0
c00191a5:	eb 09                	jmp    c00191b0 <FAT::rename(char const*, char const*)+0xc4>
c00191a7:	90                   	nop
c00191a8:	b8 01 00 00 00       	mov    eax,0x1
c00191ad:	8d 76 00             	lea    esi,[esi+0x0]
c00191b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00191b6:	c3                   	ret    
c00191b7:	90                   	nop

c00191b8 <FAT::mkdir(char const*)>:
c00191b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00191be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00191c6:	75 08                	jne    c00191d0 <FAT::mkdir(char const*)+0x18>
c00191c8:	b8 04 00 00 00       	mov    eax,0x4
c00191cd:	eb 61                	jmp    c0019230 <FAT::mkdir(char const*)+0x78>
c00191cf:	90                   	nop
c00191d0:	83 ec 08             	sub    esp,0x8
c00191d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00191da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191de:	50                   	push   eax
c00191df:	e8 6c 74 fe ff       	call   c0000650 <strcpy>
c00191e4:	83 c4 10             	add    esp,0x10
c00191e7:	83 ec 08             	sub    esp,0x8
c00191ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191ee:	50                   	push   eax
c00191ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00191f6:	e8 5d f9 ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c00191fb:	83 c4 10             	add    esp,0x10
c00191fe:	83 ec 0c             	sub    esp,0xc
c0019201:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019205:	50                   	push   eax
c0019206:	e8 35 b9 fe ff       	call   c0004b40 <f_mkdir>
c001920b:	83 c4 10             	add    esp,0x10
c001920e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019215:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001921c:	85 c0                	test   eax,eax
c001921e:	75 08                	jne    c0019228 <FAT::mkdir(char const*)+0x70>
c0019220:	b8 00 00 00 00       	mov    eax,0x0
c0019225:	eb 09                	jmp    c0019230 <FAT::mkdir(char const*)+0x78>
c0019227:	90                   	nop
c0019228:	b8 01 00 00 00       	mov    eax,0x1
c001922d:	8d 76 00             	lea    esi,[esi+0x0]
c0019230:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019236:	c3                   	ret    
c0019237:	90                   	nop

c0019238 <FAT::exists(char const*)>:
c0019238:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001923e:	83 ec 08             	sub    esp,0x8
c0019241:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019248:	8d 44 24 10          	lea    eax,[esp+0x10]
c001924c:	50                   	push   eax
c001924d:	e8 fe 73 fe ff       	call   c0000650 <strcpy>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	83 ec 08             	sub    esp,0x8
c0019258:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001925c:	50                   	push   eax
c001925d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019264:	e8 ef f8 ff ff       	call   c0018b58 <FAT::fixFilepath(char*)>
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	83 ec 08             	sub    esp,0x8
c001926f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019276:	50                   	push   eax
c0019277:	8d 44 24 10          	lea    eax,[esp+0x10]
c001927b:	50                   	push   eax
c001927c:	e8 2d b5 fe ff       	call   c00047ae <f_stat>
c0019281:	83 c4 10             	add    esp,0x10
c0019284:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001928b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019292:	85 c0                	test   eax,eax
c0019294:	75 06                	jne    c001929c <FAT::exists(char const*)+0x64>
c0019296:	b0 01                	mov    al,0x1
c0019298:	eb 06                	jmp    c00192a0 <FAT::exists(char const*)+0x68>
c001929a:	66 90                	xchg   ax,ax
c001929c:	b0 00                	mov    al,0x0
c001929e:	66 90                	xchg   ax,ax
c00192a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00192a6:	c3                   	ret    
c00192a7:	90                   	nop

c00192a8 <isoReadDiscSectorHelper>:
c00192a8:	83 ec 2c             	sub    esp,0x2c
c00192ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00192af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00192b3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00192b8:	83 e8 41             	sub    eax,0x41
c00192bb:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00192c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00192c6:	ba 00 00 00 00       	mov    edx,0x0
c00192cb:	83 ec 0c             	sub    esp,0xc
c00192ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00192d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192d6:	52                   	push   edx
c00192d7:	50                   	push   eax
c00192d8:	51                   	push   ecx
c00192d9:	e8 18 3f ff ff       	call   c000d1f6 <LogicalDisk::read(unsigned long long, int, void*)>
c00192de:	83 c4 20             	add    esp,0x20
c00192e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00192e5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00192ea:	74 0c                	je     c00192f8 <isoReadDiscSectorHelper+0x50>
c00192ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192f0:	c1 e0 0b             	shl    eax,0xb
c00192f3:	eb 0b                	jmp    c0019300 <isoReadDiscSectorHelper+0x58>
c00192f5:	8d 76 00             	lea    esi,[esi+0x0]
c00192f8:	b8 00 00 00 00       	mov    eax,0x0
c00192fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019300:	83 c4 2c             	add    esp,0x2c
c0019303:	c3                   	ret    

c0019304 <iso_kprintf>:
c0019304:	83 ec 0c             	sub    esp,0xc
c0019307:	83 ec 08             	sub    esp,0x8
c001930a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001930e:	68 31 11 02 c0       	push   0xc0021131
c0019313:	e8 92 16 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0019318:	83 c4 10             	add    esp,0x10
c001931b:	90                   	nop
c001931c:	83 c4 0c             	add    esp,0xc
c001931f:	c3                   	ret    

c0019320 <iso_kprintfd>:
c0019320:	83 ec 0c             	sub    esp,0xc
c0019323:	83 ec 08             	sub    esp,0x8
c0019326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001932a:	68 1e 01 02 c0       	push   0xc002011e
c001932f:	e8 76 16 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0019334:	83 c4 10             	add    esp,0x10
c0019337:	90                   	nop
c0019338:	83 c4 0c             	add    esp,0xc
c001933b:	c3                   	ret    

c001933c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001933c:	b8 08 00 00 00       	mov    eax,0x8
c0019341:	c3                   	ret    

c0019342 <ISO9660::getName()>:
c0019342:	b8 88 17 02 c0       	mov    eax,0xc0021788
c0019347:	c3                   	ret    

c0019348 <ISO9660::closeDir(void*)>:
c0019348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001934c:	8b 00                	mov    eax,DWORD PTR [eax]
c001934e:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019351:	90                   	nop

c0019352 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019352:	b8 01 00 00 00       	mov    eax,0x1
c0019357:	c3                   	ret    

c0019358 <ISO9660::unlink(char const*)>:
c0019358:	b8 01 00 00 00       	mov    eax,0x1
c001935d:	c3                   	ret    

c001935e <ISO9660::write(void*, unsigned long, void*, int*)>:
c001935e:	b8 03 00 00 00       	mov    eax,0x3
c0019363:	c3                   	ret    

c0019364 <ISO9660::rename(char const*, char const*)>:
c0019364:	b8 01 00 00 00       	mov    eax,0x1
c0019369:	c3                   	ret    

c001936a <ISO9660::mkdir(char const*)>:
c001936a:	b8 01 00 00 00       	mov    eax,0x1
c001936f:	c3                   	ret    

c0019370 <ISO9660::~ISO9660()>:
c0019370:	83 ec 0c             	sub    esp,0xc
c0019373:	ba c8 18 02 c0       	mov    edx,0xc00218c8
c0019378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001937c:	89 10                	mov    DWORD PTR [eax],edx
c001937e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019382:	83 ec 0c             	sub    esp,0xc
c0019385:	50                   	push   eax
c0019386:	e8 65 19 ff ff       	call   c000acf0 <Filesystem::~Filesystem()>
c001938b:	83 c4 10             	add    esp,0x10
c001938e:	90                   	nop
c001938f:	83 c4 0c             	add    esp,0xc
c0019392:	c3                   	ret    
c0019393:	90                   	nop

c0019394 <ISO9660::~ISO9660()>:
c0019394:	83 ec 0c             	sub    esp,0xc
c0019397:	83 ec 0c             	sub    esp,0xc
c001939a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001939e:	e8 cd ff ff ff       	call   c0019370 <ISO9660::~ISO9660()>
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	83 ec 08             	sub    esp,0x8
c00193a9:	6a 08                	push   0x8
c00193ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193af:	e8 f8 14 ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c00193b4:	83 c4 10             	add    esp,0x10
c00193b7:	83 c4 0c             	add    esp,0xc
c00193ba:	c3                   	ret    
c00193bb:	90                   	nop

c00193bc <ISO9660::exists(char const*)>:
c00193bc:	83 ec 18             	sub    esp,0x18
c00193bf:	68 a3 17 02 c0       	push   0xc00217a3
c00193c4:	e8 ac 74 ff ff       	call   c0010875 <KePanic(char const*)>
c00193c9:	31 c0                	xor    eax,eax
c00193cb:	83 c4 1c             	add    esp,0x1c
c00193ce:	c3                   	ret    
c00193cf:	90                   	nop

c00193d0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00193d0:	56                   	push   esi
c00193d1:	53                   	push   ebx
c00193d2:	53                   	push   ebx
c00193d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00193d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00193db:	85 db                	test   ebx,ebx
c00193dd:	0f 84 ca 00 00 00    	je     c00194ad <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193e3:	85 f6                	test   esi,esi
c00193e5:	0f 84 c2 00 00 00    	je     c00194ad <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193eb:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00193f0:	b8 03 00 00 00       	mov    eax,0x3
c00193f5:	0f 85 b7 00 00 00    	jne    c00194b2 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193fb:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00193fd:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019403:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001940a:	74 1b                	je     c0019427 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001940c:	85 c0                	test   eax,eax
c001940e:	74 10                	je     c0019420 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019410:	83 ec 0c             	sub    esp,0xc
c0019413:	68 c1 17 02 c0       	push   0xc00217c1
c0019418:	e8 58 74 ff ff       	call   c0010875 <KePanic(char const*)>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	8a 03                	mov    al,BYTE PTR [ebx]
c0019422:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019427:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001942a:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019431:	85 c0                	test   eax,eax
c0019433:	74 09                	je     c001943e <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019435:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001943c:	74 48                	je     c0019486 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001943e:	83 ec 0c             	sub    esp,0xc
c0019441:	68 d1 17 02 c0       	push   0xc00217d1
c0019446:	e8 5f 15 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001944b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001944e:	83 c4 10             	add    esp,0x10
c0019451:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019458:	85 c0                	test   eax,eax
c001945a:	74 17                	je     c0019473 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001945c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019463:	83 ec 0c             	sub    esp,0xc
c0019466:	68 f1 17 02 c0       	push   0xc00217f1
c001946b:	e8 3a 15 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0019470:	83 c4 10             	add    esp,0x10
c0019473:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001947a:	83 ec 0c             	sub    esp,0xc
c001947d:	50                   	push   eax
c001947e:	e8 e4 d5 fe ff       	call   c0006a67 <init_percd>
c0019483:	83 c4 10             	add    esp,0x10
c0019486:	51                   	push   ecx
c0019487:	83 c3 03             	add    ebx,0x3
c001948a:	51                   	push   ecx
c001948b:	6a 00                	push   0x0
c001948d:	53                   	push   ebx
c001948e:	e8 97 d0 fe ff       	call   c000652a <iso_open>
c0019493:	83 c4 10             	add    esp,0x10
c0019496:	89 c2                	mov    edx,eax
c0019498:	b8 01 00 00 00       	mov    eax,0x1
c001949d:	83 fa ff             	cmp    edx,0xffffffff
c00194a0:	74 10                	je     c00194b2 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00194a2:	83 c2 32             	add    edx,0x32
c00194a5:	31 c0                	xor    eax,eax
c00194a7:	01 d2                	add    edx,edx
c00194a9:	89 16                	mov    DWORD PTR [esi],edx
c00194ab:	eb 05                	jmp    c00194b2 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00194ad:	b8 04 00 00 00       	mov    eax,0x4
c00194b2:	5a                   	pop    edx
c00194b3:	5b                   	pop    ebx
c00194b4:	5e                   	pop    esi
c00194b5:	c3                   	ret    

c00194b6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00194b6:	53                   	push   ebx
c00194b7:	83 ec 08             	sub    esp,0x8
c00194ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194c2:	85 c0                	test   eax,eax
c00194c4:	74 2d                	je     c00194f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00194c6:	85 db                	test   ebx,ebx
c00194c8:	74 29                	je     c00194f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00194ca:	52                   	push   edx
c00194cb:	b9 02 00 00 00       	mov    ecx,0x2
c00194d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194d4:	99                   	cdq    
c00194d5:	f7 f9                	idiv   ecx
c00194d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194db:	83 e8 32             	sub    eax,0x32
c00194de:	50                   	push   eax
c00194df:	e8 ee d0 fe ff       	call   c00065d2 <iso_read>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	89 03                	mov    DWORD PTR [ebx],eax
c00194e9:	09 d0                	or     eax,edx
c00194eb:	0f 94 c0             	sete   al
c00194ee:	0f b6 c0             	movzx  eax,al
c00194f1:	eb 05                	jmp    c00194f8 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00194f3:	b8 04 00 00 00       	mov    eax,0x4
c00194f8:	83 c4 08             	add    esp,0x8
c00194fb:	5b                   	pop    ebx
c00194fc:	c3                   	ret    
c00194fd:	90                   	nop

c00194fe <ISO9660::seek(void*, unsigned long long)>:
c00194fe:	57                   	push   edi
c00194ff:	b8 04 00 00 00       	mov    eax,0x4
c0019504:	56                   	push   esi
c0019505:	51                   	push   ecx
c0019506:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001950a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001950e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019512:	85 d2                	test   edx,edx
c0019514:	74 26                	je     c001953c <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019516:	89 d0                	mov    eax,edx
c0019518:	b9 02 00 00 00       	mov    ecx,0x2
c001951d:	6a 00                	push   0x0
c001951f:	99                   	cdq    
c0019520:	f7 f9                	idiv   ecx
c0019522:	57                   	push   edi
c0019523:	56                   	push   esi
c0019524:	83 e8 32             	sub    eax,0x32
c0019527:	50                   	push   eax
c0019528:	e8 bb d1 fe ff       	call   c00066e8 <iso_seek>
c001952d:	83 c4 10             	add    esp,0x10
c0019530:	31 f0                	xor    eax,esi
c0019532:	31 fa                	xor    edx,edi
c0019534:	09 d0                	or     eax,edx
c0019536:	0f 95 c0             	setne  al
c0019539:	0f b6 c0             	movzx  eax,al
c001953c:	5a                   	pop    edx
c001953d:	5e                   	pop    esi
c001953e:	5f                   	pop    edi
c001953f:	c3                   	ret    

c0019540 <ISO9660::tell(void*, unsigned long long*)>:
c0019540:	53                   	push   ebx
c0019541:	83 ec 08             	sub    esp,0x8
c0019544:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019548:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001954c:	85 c0                	test   eax,eax
c001954e:	74 24                	je     c0019574 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019550:	85 db                	test   ebx,ebx
c0019552:	74 20                	je     c0019574 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019554:	b9 02 00 00 00       	mov    ecx,0x2
c0019559:	99                   	cdq    
c001955a:	f7 f9                	idiv   ecx
c001955c:	83 ec 0c             	sub    esp,0xc
c001955f:	83 e8 32             	sub    eax,0x32
c0019562:	50                   	push   eax
c0019563:	e8 04 d2 fe ff       	call   c000676c <iso_tell>
c0019568:	83 c4 10             	add    esp,0x10
c001956b:	89 03                	mov    DWORD PTR [ebx],eax
c001956d:	31 c0                	xor    eax,eax
c001956f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019572:	eb 05                	jmp    c0019579 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019574:	b8 04 00 00 00       	mov    eax,0x4
c0019579:	83 c4 08             	add    esp,0x8
c001957c:	5b                   	pop    ebx
c001957d:	c3                   	ret    

c001957e <ISO9660::stat(void*, unsigned long long*)>:
c001957e:	56                   	push   esi
c001957f:	53                   	push   ebx
c0019580:	83 ec 10             	sub    esp,0x10
c0019583:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019587:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001958b:	68 15 18 02 c0       	push   0xc0021815
c0019590:	e8 15 14 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0019595:	83 c4 10             	add    esp,0x10
c0019598:	85 db                	test   ebx,ebx
c001959a:	74 2a                	je     c00195c6 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001959c:	85 f6                	test   esi,esi
c001959e:	74 26                	je     c00195c6 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00195a0:	89 d8                	mov    eax,ebx
c00195a2:	b9 02 00 00 00       	mov    ecx,0x2
c00195a7:	99                   	cdq    
c00195a8:	83 ec 0c             	sub    esp,0xc
c00195ab:	f7 f9                	idiv   ecx
c00195ad:	83 e8 32             	sub    eax,0x32
c00195b0:	50                   	push   eax
c00195b1:	e8 e7 d1 fe ff       	call   c000679d <iso_total>
c00195b6:	83 c4 10             	add    esp,0x10
c00195b9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00195c0:	89 06                	mov    DWORD PTR [esi],eax
c00195c2:	31 c0                	xor    eax,eax
c00195c4:	eb 05                	jmp    c00195cb <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00195c6:	b8 04 00 00 00       	mov    eax,0x4
c00195cb:	5a                   	pop    edx
c00195cc:	5b                   	pop    ebx
c00195cd:	5e                   	pop    esi
c00195ce:	c3                   	ret    
c00195cf:	90                   	nop

c00195d0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00195d0:	55                   	push   ebp
c00195d1:	57                   	push   edi
c00195d2:	56                   	push   esi
c00195d3:	53                   	push   ebx
c00195d4:	83 ec 18             	sub    esp,0x18
c00195d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00195db:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00195df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00195e3:	68 1d 18 02 c0       	push   0xc002181d
c00195e8:	e8 bd 13 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c00195ed:	83 c4 10             	add    esp,0x10
c00195f0:	85 ff                	test   edi,edi
c00195f2:	0f 94 c0             	sete   al
c00195f5:	85 f6                	test   esi,esi
c00195f7:	0f 94 c2             	sete   dl
c00195fa:	09 d0                	or     eax,edx
c00195fc:	a8 01                	test   al,0x1
c00195fe:	0f 85 dd 00 00 00    	jne    c00196e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019604:	85 db                	test   ebx,ebx
c0019606:	0f 84 d5 00 00 00    	je     c00196e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001960c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001960f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019615:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001961c:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019623:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019625:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001962b:	74 1b                	je     c0019648 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001962d:	85 c0                	test   eax,eax
c001962f:	74 10                	je     c0019641 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019631:	83 ec 0c             	sub    esp,0xc
c0019634:	68 c1 17 02 c0       	push   0xc00217c1
c0019639:	e8 37 72 ff ff       	call   c0010875 <KePanic(char const*)>
c001963e:	83 c4 10             	add    esp,0x10
c0019641:	8a 03                	mov    al,BYTE PTR [ebx]
c0019643:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019648:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001964b:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019652:	85 c0                	test   eax,eax
c0019654:	74 09                	je     c001965f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0019656:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001965d:	74 51                	je     c00196b0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001965f:	83 ec 0c             	sub    esp,0xc
c0019662:	68 25 18 02 c0       	push   0xc0021825
c0019667:	e8 3e 13 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001966c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001966f:	83 c4 10             	add    esp,0x10
c0019672:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c001967a:	74 21                	je     c001969d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001967c:	83 ec 0c             	sub    esp,0xc
c001967f:	68 45 18 02 c0       	push   0xc0021845
c0019684:	e8 21 13 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0019689:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019696:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001969d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196a4:	83 ec 0c             	sub    esp,0xc
c00196a7:	50                   	push   eax
c00196a8:	e8 ba d3 fe ff       	call   c0006a67 <init_percd>
c00196ad:	83 c4 10             	add    esp,0x10
c00196b0:	52                   	push   edx
c00196b1:	83 c3 03             	add    ebx,0x3
c00196b4:	52                   	push   edx
c00196b5:	6a 00                	push   0x0
c00196b7:	53                   	push   ebx
c00196b8:	e8 6d ce fe ff       	call   c000652a <iso_open>
c00196bd:	83 c4 10             	add    esp,0x10
c00196c0:	83 f8 ff             	cmp    eax,0xffffffff
c00196c3:	89 c5                	mov    ebp,eax
c00196c5:	75 21                	jne    c00196e8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00196c7:	50                   	push   eax
c00196c8:	50                   	push   eax
c00196c9:	6a 01                	push   0x1
c00196cb:	53                   	push   ebx
c00196cc:	e8 59 ce fe ff       	call   c000652a <iso_open>
c00196d1:	83 c4 10             	add    esp,0x10
c00196d4:	ba 02 00 00 00       	mov    edx,0x2
c00196d9:	40                   	inc    eax
c00196da:	74 2b                	je     c0019707 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196dc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00196df:	eb 24                	jmp    c0019705 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00196e1:	ba 04 00 00 00       	mov    edx,0x4
c00196e6:	eb 1f                	jmp    c0019707 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196e8:	83 ec 0c             	sub    esp,0xc
c00196eb:	50                   	push   eax
c00196ec:	e8 ac d0 fe ff       	call   c000679d <iso_total>
c00196f1:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00196f8:	89 07                	mov    DWORD PTR [edi],eax
c00196fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00196fd:	e8 b2 ce fe ff       	call   c00065b4 <iso_close>
c0019702:	83 c4 10             	add    esp,0x10
c0019705:	31 d2                	xor    edx,edx
c0019707:	83 c4 0c             	add    esp,0xc
c001970a:	89 d0                	mov    eax,edx
c001970c:	5b                   	pop    ebx
c001970d:	5e                   	pop    esi
c001970e:	5f                   	pop    edi
c001970f:	5d                   	pop    ebp
c0019710:	c3                   	ret    
c0019711:	90                   	nop

c0019712 <ISO9660::close(void*)>:
c0019712:	83 ec 0c             	sub    esp,0xc
c0019715:	b8 04 00 00 00       	mov    eax,0x4
c001971a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001971e:	85 d2                	test   edx,edx
c0019720:	74 1b                	je     c001973d <ISO9660::close(void*)+0x2b>
c0019722:	89 d0                	mov    eax,edx
c0019724:	b9 02 00 00 00       	mov    ecx,0x2
c0019729:	99                   	cdq    
c001972a:	83 ec 0c             	sub    esp,0xc
c001972d:	f7 f9                	idiv   ecx
c001972f:	83 e8 32             	sub    eax,0x32
c0019732:	50                   	push   eax
c0019733:	e8 7c ce fe ff       	call   c00065b4 <iso_close>
c0019738:	83 c4 10             	add    esp,0x10
c001973b:	31 c0                	xor    eax,eax
c001973d:	83 c4 0c             	add    esp,0xc
c0019740:	c3                   	ret    
c0019741:	90                   	nop

c0019742 <ISO9660::openDir(char const*, void**)>:
c0019742:	56                   	push   esi
c0019743:	53                   	push   ebx
c0019744:	50                   	push   eax
c0019745:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019749:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001974d:	85 db                	test   ebx,ebx
c001974f:	0f 84 bd 00 00 00    	je     c0019812 <ISO9660::openDir(char const*, void**)+0xd0>
c0019755:	85 f6                	test   esi,esi
c0019757:	0f 84 b5 00 00 00    	je     c0019812 <ISO9660::openDir(char const*, void**)+0xd0>
c001975d:	8a 13                	mov    dl,BYTE PTR [ebx]
c001975f:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019765:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001976c:	74 1b                	je     c0019789 <ISO9660::openDir(char const*, void**)+0x47>
c001976e:	85 c0                	test   eax,eax
c0019770:	74 10                	je     c0019782 <ISO9660::openDir(char const*, void**)+0x40>
c0019772:	83 ec 0c             	sub    esp,0xc
c0019775:	68 c1 17 02 c0       	push   0xc00217c1
c001977a:	e8 f6 70 ff ff       	call   c0010875 <KePanic(char const*)>
c001977f:	83 c4 10             	add    esp,0x10
c0019782:	8a 03                	mov    al,BYTE PTR [ebx]
c0019784:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019789:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001978c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019793:	85 c0                	test   eax,eax
c0019795:	74 10                	je     c00197a7 <ISO9660::openDir(char const*, void**)+0x65>
c0019797:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001979e:	74 1a                	je     c00197ba <ISO9660::openDir(char const*, void**)+0x78>
c00197a0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00197a7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197ae:	83 ec 0c             	sub    esp,0xc
c00197b1:	50                   	push   eax
c00197b2:	e8 b0 d2 fe ff       	call   c0006a67 <init_percd>
c00197b7:	83 c4 10             	add    esp,0x10
c00197ba:	50                   	push   eax
c00197bb:	83 c3 03             	add    ebx,0x3
c00197be:	50                   	push   eax
c00197bf:	6a 01                	push   0x1
c00197c1:	53                   	push   ebx
c00197c2:	e8 63 cd fe ff       	call   c000652a <iso_open>
c00197c7:	83 c4 10             	add    esp,0x10
c00197ca:	83 f8 ff             	cmp    eax,0xffffffff
c00197cd:	89 c3                	mov    ebx,eax
c00197cf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197d4:	75 1c                	jne    c00197f2 <ISO9660::openDir(char const*, void**)+0xb0>
c00197d6:	53                   	push   ebx
c00197d7:	53                   	push   ebx
c00197d8:	68 69 18 02 c0       	push   0xc0021869
c00197dd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197e3:	e8 ae f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	b8 01 00 00 00       	mov    eax,0x1
c00197f0:	eb 25                	jmp    c0019817 <ISO9660::openDir(char const*, void**)+0xd5>
c00197f2:	51                   	push   ecx
c00197f3:	01 db                	add    ebx,ebx
c00197f5:	51                   	push   ecx
c00197f6:	83 c3 65             	add    ebx,0x65
c00197f9:	68 7c 18 02 c0       	push   0xc002187c
c00197fe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019804:	e8 8d f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019809:	83 c4 10             	add    esp,0x10
c001980c:	31 c0                	xor    eax,eax
c001980e:	89 1e                	mov    DWORD PTR [esi],ebx
c0019810:	eb 05                	jmp    c0019817 <ISO9660::openDir(char const*, void**)+0xd5>
c0019812:	b8 04 00 00 00       	mov    eax,0x4
c0019817:	5a                   	pop    edx
c0019818:	5b                   	pop    ebx
c0019819:	5e                   	pop    esi
c001981a:	c3                   	ret    
c001981b:	90                   	nop

c001981c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001981c:	55                   	push   ebp
c001981d:	57                   	push   edi
c001981e:	56                   	push   esi
c001981f:	53                   	push   ebx
c0019820:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019826:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001982d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019834:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001983b:	85 db                	test   ebx,ebx
c001983d:	0f 84 e4 00 00 00    	je     c0019927 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019843:	85 ed                	test   ebp,ebp
c0019845:	0f 84 dc 00 00 00    	je     c0019927 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001984b:	83 ec 0c             	sub    esp,0xc
c001984e:	68 8f 18 02 c0       	push   0xc002188f
c0019853:	e8 52 11 ff ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c0019858:	89 d8                	mov    eax,ebx
c001985a:	b9 02 00 00 00       	mov    ecx,0x2
c001985f:	99                   	cdq    
c0019860:	f7 f9                	idiv   ecx
c0019862:	83 e8 32             	sub    eax,0x32
c0019865:	89 04 24             	mov    DWORD PTR [esp],eax
c0019868:	e8 82 cf fe ff       	call   c00067ef <iso_readdir>
c001986d:	83 c4 10             	add    esp,0x10
c0019870:	85 c0                	test   eax,eax
c0019872:	89 c3                	mov    ebx,eax
c0019874:	75 38                	jne    c00198ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0019876:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001987b:	53                   	push   ebx
c001987c:	53                   	push   ebx
c001987d:	68 9a 18 02 c0       	push   0xc002189a
c0019882:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019888:	e8 09 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c001988d:	83 c4 0c             	add    esp,0xc
c0019890:	68 10 01 00 00       	push   0x110
c0019895:	6a 00                	push   0x0
c0019897:	57                   	push   edi
c0019898:	e8 53 6c fe ff       	call   c00004f0 <memset>
c001989d:	83 c4 10             	add    esp,0x10
c00198a0:	b8 01 00 00 00       	mov    eax,0x1
c00198a5:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00198ac:	eb 7e                	jmp    c001992c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00198ae:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00198b4:	8d 70 08             	lea    esi,[eax+0x8]
c00198b7:	83 ec 0c             	sub    esp,0xc
c00198ba:	56                   	push   esi
c00198bb:	e8 c0 6c fe ff       	call   c0000580 <strlen>
c00198c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00198c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198cc:	83 c4 10             	add    esp,0x10
c00198cf:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c00198d3:	75 0a                	jne    c00198df <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c00198d5:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c00198d8:	b8 02 00 00 00       	mov    eax,0x2
c00198dd:	74 05                	je     c00198e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c00198df:	b8 01 00 00 00       	mov    eax,0x1
c00198e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198e8:	50                   	push   eax
c00198e9:	50                   	push   eax
c00198ea:	56                   	push   esi
c00198eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198ef:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00198f3:	50                   	push   eax
c00198f4:	e8 57 6d fe ff       	call   c0000650 <strcpy>
c00198f9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019900:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019902:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019909:	5a                   	pop    edx
c001990a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001990f:	59                   	pop    ecx
c0019910:	68 ad 18 02 c0       	push   0xc00218ad
c0019915:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001991b:	e8 76 f1 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019920:	83 c4 10             	add    esp,0x10
c0019923:	31 c0                	xor    eax,eax
c0019925:	eb 05                	jmp    c001992c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019927:	b8 04 00 00 00       	mov    eax,0x4
c001992c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019932:	5b                   	pop    ebx
c0019933:	5e                   	pop    esi
c0019934:	5f                   	pop    edi
c0019935:	5d                   	pop    ebp
c0019936:	c3                   	ret    

c0019937 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019937:	57                   	push   edi
c0019938:	56                   	push   esi
c0019939:	53                   	push   ebx
c001993a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001993e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019942:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019948:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001994c:	0f be cb             	movsx  ecx,bl
c001994f:	75 0b                	jne    c001995c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019951:	0f be 05 04 24 02 c0 	movsx  eax,BYTE PTR ds:0xc0022404
c0019958:	39 c8                	cmp    eax,ecx
c001995a:	74 47                	je     c00199a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001995c:	83 ec 0c             	sub    esp,0xc
c001995f:	31 d2                	xor    edx,edx
c0019961:	68 40 83 02 c0       	push   0xc0028340
c0019966:	6a 01                	push   0x1
c0019968:	52                   	push   edx
c0019969:	56                   	push   esi
c001996a:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019971:	e8 80 38 ff ff       	call   c000d1f6 <LogicalDisk::read(unsigned long long, int, void*)>
c0019976:	83 c4 20             	add    esp,0x20
c0019979:	85 c0                	test   eax,eax
c001997b:	75 0e                	jne    c001998b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001997d:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019983:	88 1d 04 24 02 c0    	mov    BYTE PTR ds:0xc0022404,bl
c0019989:	eb 18                	jmp    c00199a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001998b:	50                   	push   eax
c001998c:	68 00 08 00 00       	push   0x800
c0019991:	6a 00                	push   0x0
c0019993:	57                   	push   edi
c0019994:	e8 57 6b fe ff       	call   c00004f0 <memset>
c0019999:	83 c4 10             	add    esp,0x10
c001999c:	b8 01 00 00 00       	mov    eax,0x1
c00199a1:	eb 0e                	jmp    c00199b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00199a3:	be 40 83 02 c0       	mov    esi,0xc0028340
c00199a8:	b9 00 08 00 00       	mov    ecx,0x800
c00199ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199af:	31 c0                	xor    eax,eax
c00199b1:	5b                   	pop    ebx
c00199b2:	5e                   	pop    esi
c00199b3:	5f                   	pop    edi
c00199b4:	c3                   	ret    
c00199b5:	90                   	nop

c00199b6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00199b6:	53                   	push   ebx
c00199b7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00199bd:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c00199c7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00199ce:	8d 58 41             	lea    ebx,[eax+0x41]
c00199d1:	0f be db             	movsx  ebx,bl
c00199d4:	53                   	push   ebx
c00199d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d9:	50                   	push   eax
c00199da:	6a 10                	push   0x10
c00199dc:	e8 56 ff ff ff       	call   c0019937 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00199e1:	83 c4 10             	add    esp,0x10
c00199e4:	31 d2                	xor    edx,edx
c00199e6:	85 c0                	test   eax,eax
c00199e8:	75 33                	jne    c0019a1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ea:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00199ef:	75 2c                	jne    c0019a1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199f1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00199f6:	75 25                	jne    c0019a1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199f8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00199fd:	75 1e                	jne    c0019a1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ff:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019a04:	75 17                	jne    c0019a1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a06:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019a0b:	75 10                	jne    c0019a1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a0d:	83 ec 0c             	sub    esp,0xc
c0019a10:	53                   	push   ebx
c0019a11:	e8 51 d0 fe ff       	call   c0006a67 <init_percd>
c0019a16:	83 c4 10             	add    esp,0x10
c0019a19:	40                   	inc    eax
c0019a1a:	0f 95 c2             	setne  dl
c0019a1d:	81 c4 08 08 00 00    	add    esp,0x808
c0019a23:	88 d0                	mov    al,dl
c0019a25:	5b                   	pop    ebx
c0019a26:	c3                   	ret    
c0019a27:	90                   	nop

c0019a28 <ISO9660::ISO9660()>:
c0019a28:	83 ec 0c             	sub    esp,0xc
c0019a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a2f:	83 ec 0c             	sub    esp,0xc
c0019a32:	50                   	push   eax
c0019a33:	e8 94 12 ff ff       	call   c000accc <Filesystem::Filesystem()>
c0019a38:	83 c4 10             	add    esp,0x10
c0019a3b:	ba c8 18 02 c0       	mov    edx,0xc00218c8
c0019a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a44:	89 10                	mov    DWORD PTR [eax],edx
c0019a46:	e8 2e d1 fe ff       	call   c0006b79 <fs_iso9660_init>
c0019a4b:	90                   	nop
c0019a4c:	83 c4 0c             	add    esp,0xc
c0019a4f:	c3                   	ret    

c0019a50 <SoundCard::beginPlayback()>:
c0019a50:	c7 44 24 04 28 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021928
c0019a58:	e9 18 6e ff ff       	jmp    c0010875 <KePanic(char const*)>
c0019a5d:	90                   	nop

c0019a5e <SoundCard::stopPlayback()>:
c0019a5e:	c7 44 24 04 28 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021928
c0019a66:	e9 0a 6e ff ff       	jmp    c0010875 <KePanic(char const*)>
c0019a6b:	90                   	nop

c0019a6c <SoundCard::SoundCard(char const*)>:
c0019a6c:	83 ec 1c             	sub    esp,0x1c
c0019a6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a73:	83 ec 08             	sub    esp,0x8
c0019a76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a7a:	50                   	push   eax
c0019a7b:	e8 24 25 ff ff       	call   c000bfa4 <Device::Device(char const*)>
c0019a80:	83 c4 10             	add    esp,0x10
c0019a83:	ba 74 19 02 c0       	mov    edx,0xc0021974
c0019a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a8c:	89 10                	mov    DWORD PTR [eax],edx
c0019a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a92:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a9d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aab:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ab9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ac7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019ad1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ad9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019ade:	7f 1a                	jg     c0019afa <SoundCard::SoundCard(char const*)+0x8e>
c0019ae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ae8:	83 c2 54             	add    edx,0x54
c0019aeb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019af3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019af8:	eb df                	jmp    c0019ad9 <SoundCard::SoundCard(char const*)+0x6d>
c0019afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019b05:	90                   	nop
c0019b06:	83 c4 1c             	add    esp,0x1c
c0019b09:	c3                   	ret    

c0019b0a <SoundCard::~SoundCard()>:
c0019b0a:	83 ec 0c             	sub    esp,0xc
c0019b0d:	ba 74 19 02 c0       	mov    edx,0xc0021974
c0019b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b16:	89 10                	mov    DWORD PTR [eax],edx
c0019b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b1c:	83 ec 0c             	sub    esp,0xc
c0019b1f:	50                   	push   eax
c0019b20:	e8 e9 21 ff ff       	call   c000bd0e <Device::~Device()>
c0019b25:	83 c4 10             	add    esp,0x10
c0019b28:	90                   	nop
c0019b29:	83 c4 0c             	add    esp,0xc
c0019b2c:	c3                   	ret    
c0019b2d:	90                   	nop

c0019b2e <SoundCard::~SoundCard()>:
c0019b2e:	83 ec 0c             	sub    esp,0xc
c0019b31:	83 ec 0c             	sub    esp,0xc
c0019b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b38:	e8 cd ff ff ff       	call   c0019b0a <SoundCard::~SoundCard()>
c0019b3d:	83 c4 10             	add    esp,0x10
c0019b40:	83 ec 08             	sub    esp,0x8
c0019b43:	68 e8 01 00 00       	push   0x1e8
c0019b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b4c:	e8 5b 0d ff ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c0019b51:	83 c4 10             	add    esp,0x10
c0019b54:	83 c4 0c             	add    esp,0xc
c0019b57:	c3                   	ret    

c0019b58 <SoundCard::configureRates(int, int, int)>:
c0019b58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b5c:	31 c0                	xor    eax,eax
c0019b5e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b65:	75 20                	jne    c0019b87 <SoundCard::configureRates(int, int, int)+0x2f>
c0019b67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b6b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b75:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b7f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b85:	b0 01                	mov    al,0x1
c0019b87:	c3                   	ret    

c0019b88 <SoundCard::getSamples16(int, short*)>:
c0019b88:	55                   	push   ebp
c0019b89:	57                   	push   edi
c0019b8a:	31 ff                	xor    edi,edi
c0019b8c:	56                   	push   esi
c0019b8d:	53                   	push   ebx
c0019b8e:	31 db                	xor    ebx,ebx
c0019b90:	83 ec 10             	sub    esp,0x10
c0019b93:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b97:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b9b:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b9e:	50                   	push   eax
c0019b9f:	6a 00                	push   0x0
c0019ba1:	55                   	push   ebp
c0019ba2:	e8 49 69 fe ff       	call   c00004f0 <memset>
c0019ba7:	83 c4 10             	add    esp,0x10
c0019baa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bae:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019bb5:	85 c0                	test   eax,eax
c0019bb7:	74 1a                	je     c0019bd3 <SoundCard::getSamples16(int, short*)+0x4b>
c0019bb9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bbd:	75 14                	jne    c0019bd3 <SoundCard::getSamples16(int, short*)+0x4b>
c0019bbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019bc3:	55                   	push   ebp
c0019bc4:	56                   	push   esi
c0019bc5:	50                   	push   eax
c0019bc6:	e8 f1 02 00 00       	call   c0019ebc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019bcb:	83 c4 10             	add    esp,0x10
c0019bce:	39 c3                	cmp    ebx,eax
c0019bd0:	0f 4c d8             	cmovl  ebx,eax
c0019bd3:	47                   	inc    edi
c0019bd4:	83 ff 20             	cmp    edi,0x20
c0019bd7:	75 d1                	jne    c0019baa <SoundCard::getSamples16(int, short*)+0x22>
c0019bd9:	83 c4 0c             	add    esp,0xc
c0019bdc:	89 d8                	mov    eax,ebx
c0019bde:	5b                   	pop    ebx
c0019bdf:	5e                   	pop    esi
c0019be0:	5f                   	pop    edi
c0019be1:	5d                   	pop    ebp
c0019be2:	c3                   	ret    
c0019be3:	90                   	nop

c0019be4 <SoundCard::getSamples32(int, int*)>:
c0019be4:	55                   	push   ebp
c0019be5:	57                   	push   edi
c0019be6:	31 ff                	xor    edi,edi
c0019be8:	56                   	push   esi
c0019be9:	31 f6                	xor    esi,esi
c0019beb:	53                   	push   ebx
c0019bec:	83 ec 10             	sub    esp,0x10
c0019bef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bf3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019bf7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019bfb:	c1 e0 02             	shl    eax,0x2
c0019bfe:	50                   	push   eax
c0019bff:	6a 00                	push   0x0
c0019c01:	55                   	push   ebp
c0019c02:	e8 e9 68 fe ff       	call   c00004f0 <memset>
c0019c07:	83 c4 10             	add    esp,0x10
c0019c0a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019c11:	85 c0                	test   eax,eax
c0019c13:	74 1a                	je     c0019c2f <SoundCard::getSamples32(int, int*)+0x4b>
c0019c15:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c19:	75 14                	jne    c0019c2f <SoundCard::getSamples32(int, int*)+0x4b>
c0019c1b:	53                   	push   ebx
c0019c1c:	55                   	push   ebp
c0019c1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c21:	50                   	push   eax
c0019c22:	e8 65 03 00 00       	call   c0019f8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	39 c6                	cmp    esi,eax
c0019c2c:	0f 4c f0             	cmovl  esi,eax
c0019c2f:	47                   	inc    edi
c0019c30:	83 ff 20             	cmp    edi,0x20
c0019c33:	75 d5                	jne    c0019c0a <SoundCard::getSamples32(int, int*)+0x26>
c0019c35:	85 f6                	test   esi,esi
c0019c37:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019c3e:	75 0f                	jne    c0019c4f <SoundCard::getSamples32(int, int*)+0x6b>
c0019c40:	85 c0                	test   eax,eax
c0019c42:	74 1b                	je     c0019c5f <SoundCard::getSamples32(int, int*)+0x7b>
c0019c44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c46:	83 ec 0c             	sub    esp,0xc
c0019c49:	53                   	push   ebx
c0019c4a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019c4d:	eb 0d                	jmp    c0019c5c <SoundCard::getSamples32(int, int*)+0x78>
c0019c4f:	85 c0                	test   eax,eax
c0019c51:	75 0c                	jne    c0019c5f <SoundCard::getSamples32(int, int*)+0x7b>
c0019c53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c55:	83 ec 0c             	sub    esp,0xc
c0019c58:	53                   	push   ebx
c0019c59:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019c5c:	83 c4 10             	add    esp,0x10
c0019c5f:	83 c4 0c             	add    esp,0xc
c0019c62:	89 f0                	mov    eax,esi
c0019c64:	5b                   	pop    ebx
c0019c65:	5e                   	pop    esi
c0019c66:	5f                   	pop    edi
c0019c67:	5d                   	pop    ebp
c0019c68:	c3                   	ret    
c0019c69:	90                   	nop

c0019c6a <SoundCard::addChannel(SoundPort*)>:
c0019c6a:	83 ec 0c             	sub    esp,0xc
c0019c6d:	31 c0                	xor    eax,eax
c0019c6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c73:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c7b:	74 1b                	je     c0019c98 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c7d:	40                   	inc    eax
c0019c7e:	83 f8 20             	cmp    eax,0x20
c0019c81:	75 f0                	jne    c0019c73 <SoundCard::addChannel(SoundPort*)+0x9>
c0019c83:	83 ec 0c             	sub    esp,0xc
c0019c86:	68 4d 19 02 c0       	push   0xc002194d
c0019c8b:	e8 e5 6b ff ff       	call   c0010875 <KePanic(char const*)>
c0019c90:	83 c4 10             	add    esp,0x10
c0019c93:	83 c8 ff             	or     eax,0xffffffff
c0019c96:	eb 0b                	jmp    c0019ca3 <SoundCard::addChannel(SoundPort*)+0x39>
c0019c98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c9c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019ca3:	83 c4 0c             	add    esp,0xc
c0019ca6:	c3                   	ret    
c0019ca7:	90                   	nop

c0019ca8 <SoundCard::removeChannel(int)>:
c0019ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cb0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019cbb:	c3                   	ret    

c0019cbc <SoundPort::SoundPort(int, int, int, int)>:
c0019cbc:	83 ec 0c             	sub    esp,0xc
c0019cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cce:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019cda:	89 10                	mov    DWORD PTR [eax],edx
c0019cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ce0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ce4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ceb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019cef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019cf2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019cf7:	75 13                	jne    c0019d0c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cff:	05 a0 0f 00 00       	add    eax,0xfa0
c0019d04:	d1 e0                	shl    eax,1
c0019d06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d0a:	66 90                	xchg   ax,ax
c0019d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019d14:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d1b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d26:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d29:	c1 e0 02             	shl    eax,0x2
c0019d2c:	83 ec 0c             	sub    esp,0xc
c0019d2f:	50                   	push   eax
c0019d30:	e8 96 dd fe ff       	call   c0007acb <malloc>
c0019d35:	83 c4 10             	add    esp,0x10
c0019d38:	89 c2                	mov    edx,eax
c0019d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019d41:	90                   	nop
c0019d42:	83 c4 0c             	add    esp,0xc
c0019d45:	c3                   	ret    
c0019d46:	66 90                	xchg   ax,ax

c0019d48 <SoundPort::~SoundPort()>:
c0019d48:	83 ec 0c             	sub    esp,0xc
c0019d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d52:	85 c0                	test   eax,eax
c0019d54:	74 1e                	je     c0019d74 <SoundPort::~SoundPort()+0x2c>
c0019d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d5d:	83 ec 0c             	sub    esp,0xc
c0019d60:	50                   	push   eax
c0019d61:	e8 75 dd fe ff       	call   c0007adb <free>
c0019d66:	83 c4 10             	add    esp,0x10
c0019d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d6d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d74:	90                   	nop
c0019d75:	83 c4 0c             	add    esp,0xc
c0019d78:	c3                   	ret    
c0019d79:	90                   	nop
c0019d7a:	66 90                	xchg   ax,ax

c0019d7c <SoundPort::unpause()>:
c0019d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d80:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d84:	c3                   	ret    
c0019d85:	90                   	nop
c0019d86:	66 90                	xchg   ax,ax

c0019d88 <SoundPort::pause()>:
c0019d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d8c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d90:	c3                   	ret    
c0019d91:	90                   	nop
c0019d92:	66 90                	xchg   ax,ax

c0019d94 <SoundPort::getBufferUsed()>:
c0019d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d9b:	c3                   	ret    

c0019d9c <SoundPort::getBufferSize()>:
c0019d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019da0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019da3:	c3                   	ret    

c0019da4 <SoundPort::buffer16(short*, int)>:
c0019da4:	55                   	push   ebp
c0019da5:	57                   	push   edi
c0019da6:	56                   	push   esi
c0019da7:	53                   	push   ebx
c0019da8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019dac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019db0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019db3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019db6:	74 68                	je     c0019e20 <SoundPort::buffer16(short*, int)+0x7c>
c0019db8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019dbc:	85 c9                	test   ecx,ecx
c0019dbe:	7e 60                	jle    c0019e20 <SoundPort::buffer16(short*, int)+0x7c>
c0019dc0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019dc4:	8d 70 01             	lea    esi,[eax+0x1]
c0019dc7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019dca:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019dcd:	c1 e1 0f             	shl    ecx,0xf
c0019dd0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019dd3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dd6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dd9:	74 4d                	je     c0019e28 <SoundPort::buffer16(short*, int)+0x84>
c0019ddb:	31 f6                	xor    esi,esi
c0019ddd:	eb 21                	jmp    c0019e00 <SoundPort::buffer16(short*, int)+0x5c>
c0019ddf:	90                   	nop
c0019de0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019de5:	8d 79 01             	lea    edi,[ecx+0x1]
c0019de8:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019deb:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019dee:	c1 e3 0f             	shl    ebx,0xf
c0019df1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019df4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019df7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dfa:	74 1c                	je     c0019e18 <SoundPort::buffer16(short*, int)+0x74>
c0019dfc:	89 c6                	mov    esi,eax
c0019dfe:	66 90                	xchg   ax,ax
c0019e00:	8d 46 01             	lea    eax,[esi+0x1]
c0019e03:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019e07:	75 d7                	jne    c0019de0 <SoundPort::buffer16(short*, int)+0x3c>
c0019e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e10:	5b                   	pop    ebx
c0019e11:	5e                   	pop    esi
c0019e12:	5f                   	pop    edi
c0019e13:	5d                   	pop    ebp
c0019e14:	c3                   	ret    
c0019e15:	8d 76 00             	lea    esi,[esi+0x0]
c0019e18:	5b                   	pop    ebx
c0019e19:	8d 46 02             	lea    eax,[esi+0x2]
c0019e1c:	5e                   	pop    esi
c0019e1d:	5f                   	pop    edi
c0019e1e:	5d                   	pop    ebp
c0019e1f:	c3                   	ret    
c0019e20:	5b                   	pop    ebx
c0019e21:	31 c0                	xor    eax,eax
c0019e23:	5e                   	pop    esi
c0019e24:	5f                   	pop    edi
c0019e25:	5d                   	pop    ebp
c0019e26:	c3                   	ret    
c0019e27:	90                   	nop
c0019e28:	b8 01 00 00 00       	mov    eax,0x1
c0019e2d:	eb e1                	jmp    c0019e10 <SoundPort::buffer16(short*, int)+0x6c>
c0019e2f:	90                   	nop

c0019e30 <SoundPort::buffer32(int*, int)>:
c0019e30:	55                   	push   ebp
c0019e31:	57                   	push   edi
c0019e32:	56                   	push   esi
c0019e33:	53                   	push   ebx
c0019e34:	83 ec 04             	sub    esp,0x4
c0019e37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e43:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e46:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e49:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e4c:	74 5a                	je     c0019ea8 <SoundPort::buffer32(int*, int)+0x78>
c0019e4e:	85 c0                	test   eax,eax
c0019e50:	7e 56                	jle    c0019ea8 <SoundPort::buffer32(int*, int)+0x78>
c0019e52:	8d 71 01             	lea    esi,[ecx+0x1]
c0019e55:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e58:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e5b:	8b 37                	mov    esi,DWORD PTR [edi]
c0019e5d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e60:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e63:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e66:	74 4c                	je     c0019eb4 <SoundPort::buffer32(int*, int)+0x84>
c0019e68:	31 f6                	xor    esi,esi
c0019e6a:	eb 1c                	jmp    c0019e88 <SoundPort::buffer32(int*, int)+0x58>
c0019e6c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e6f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e72:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e75:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e78:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e7c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e7f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e82:	74 18                	je     c0019e9c <SoundPort::buffer32(int*, int)+0x6c>
c0019e84:	89 de                	mov    esi,ebx
c0019e86:	66 90                	xchg   ax,ax
c0019e88:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e8b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e8e:	75 dc                	jne    c0019e6c <SoundPort::buffer32(int*, int)+0x3c>
c0019e90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e93:	90                   	nop
c0019e94:	83 c4 04             	add    esp,0x4
c0019e97:	5b                   	pop    ebx
c0019e98:	5e                   	pop    esi
c0019e99:	5f                   	pop    edi
c0019e9a:	5d                   	pop    ebp
c0019e9b:	c3                   	ret    
c0019e9c:	8d 46 02             	lea    eax,[esi+0x2]
c0019e9f:	83 c4 04             	add    esp,0x4
c0019ea2:	5b                   	pop    ebx
c0019ea3:	5e                   	pop    esi
c0019ea4:	5f                   	pop    edi
c0019ea5:	5d                   	pop    ebp
c0019ea6:	c3                   	ret    
c0019ea7:	90                   	nop
c0019ea8:	83 c4 04             	add    esp,0x4
c0019eab:	31 c0                	xor    eax,eax
c0019ead:	5b                   	pop    ebx
c0019eae:	5e                   	pop    esi
c0019eaf:	5f                   	pop    edi
c0019eb0:	5d                   	pop    ebp
c0019eb1:	c3                   	ret    
c0019eb2:	66 90                	xchg   ax,ax
c0019eb4:	b8 01 00 00 00       	mov    eax,0x1
c0019eb9:	eb d9                	jmp    c0019e94 <SoundPort::buffer32(int*, int)+0x64>
c0019ebb:	90                   	nop

c0019ebc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019ebc:	55                   	push   ebp
c0019ebd:	57                   	push   edi
c0019ebe:	56                   	push   esi
c0019ebf:	53                   	push   ebx
c0019ec0:	83 ec 0c             	sub    esp,0xc
c0019ec3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ec7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019ecb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019ecf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ed3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019ed9:	39 03                	cmp    DWORD PTR [ebx],eax
c0019edb:	74 13                	je     c0019ef0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019edd:	83 ec 0c             	sub    esp,0xc
c0019ee0:	68 a0 19 02 c0       	push   0xc00219a0
c0019ee5:	e8 8b 69 ff ff       	call   c0010875 <KePanic(char const*)>
c0019eea:	83 c4 10             	add    esp,0x10
c0019eed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019ef6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019ef9:	74 11                	je     c0019f0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019efb:	83 ec 0c             	sub    esp,0xc
c0019efe:	68 df 19 02 c0       	push   0xc00219df
c0019f03:	e8 6d 69 ff ff       	call   c0010875 <KePanic(char const*)>
c0019f08:	83 c4 10             	add    esp,0x10
c0019f0b:	90                   	nop
c0019f0c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019f12:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f15:	74 11                	je     c0019f28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019f17:	83 ec 0c             	sub    esp,0xc
c0019f1a:	68 df 19 02 c0       	push   0xc00219df
c0019f1f:	e8 51 69 ff ff       	call   c0010875 <KePanic(char const*)>
c0019f24:	83 c4 10             	add    esp,0x10
c0019f27:	90                   	nop
c0019f28:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019f2b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019f2f:	85 f6                	test   esi,esi
c0019f31:	7e 2d                	jle    c0019f60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019f33:	31 c0                	xor    eax,eax
c0019f35:	8d 76 00             	lea    esi,[esi+0x0]
c0019f38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f3b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019f3e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019f44:	85 c9                	test   ecx,ecx
c0019f46:	0f 49 d1             	cmovns edx,ecx
c0019f49:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019f4d:	c1 fa 0f             	sar    edx,0xf
c0019f50:	01 d1                	add    ecx,edx
c0019f52:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019f56:	83 c0 01             	add    eax,0x1
c0019f59:	39 f0                	cmp    eax,esi
c0019f5b:	75 db                	jne    c0019f38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f60:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f63:	83 ec 04             	sub    esp,0x4
c0019f66:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f69:	29 f0                	sub    eax,esi
c0019f6b:	c1 e0 02             	shl    eax,0x2
c0019f6e:	50                   	push   eax
c0019f6f:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f72:	50                   	push   eax
c0019f73:	52                   	push   edx
c0019f74:	e8 57 64 fe ff       	call   c00003d0 <memmove>
c0019f79:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f7c:	29 f0                	sub    eax,esi
c0019f7e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f81:	83 c4 1c             	add    esp,0x1c
c0019f84:	89 f0                	mov    eax,esi
c0019f86:	5b                   	pop    ebx
c0019f87:	5e                   	pop    esi
c0019f88:	5f                   	pop    edi
c0019f89:	5d                   	pop    ebp
c0019f8a:	c3                   	ret    
c0019f8b:	90                   	nop

c0019f8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f8c:	55                   	push   ebp
c0019f8d:	57                   	push   edi
c0019f8e:	56                   	push   esi
c0019f8f:	53                   	push   ebx
c0019f90:	83 ec 0c             	sub    esp,0xc
c0019f93:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f9b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019f9f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019fa3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019fa9:	39 03                	cmp    DWORD PTR [ebx],eax
c0019fab:	74 13                	je     c0019fc0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019fad:	83 ec 0c             	sub    esp,0xc
c0019fb0:	68 c0 19 02 c0       	push   0xc00219c0
c0019fb5:	e8 bb 68 ff ff       	call   c0010875 <KePanic(char const*)>
c0019fba:	83 c4 10             	add    esp,0x10
c0019fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019fc6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019fc9:	74 11                	je     c0019fdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019fcb:	83 ec 0c             	sub    esp,0xc
c0019fce:	68 fb 19 02 c0       	push   0xc00219fb
c0019fd3:	e8 9d 68 ff ff       	call   c0010875 <KePanic(char const*)>
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	90                   	nop
c0019fdc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019fe2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019fe5:	74 11                	je     c0019ff8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019fe7:	83 ec 0c             	sub    esp,0xc
c0019fea:	68 fb 19 02 c0       	push   0xc00219fb
c0019fef:	e8 81 68 ff ff       	call   c0010875 <KePanic(char const*)>
c0019ff4:	83 c4 10             	add    esp,0x10
c0019ff7:	90                   	nop
c0019ff8:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019ffb:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019fff:	85 ff                	test   edi,edi
c001a001:	7e 21                	jle    c001a024 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001a003:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a00a:	31 c0                	xor    eax,eax
c001a00c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a00f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001a012:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a015:	01 d5                	add    ebp,edx
c001a017:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001a01a:	83 c0 04             	add    eax,0x4
c001a01d:	39 c1                	cmp    ecx,eax
c001a01f:	75 eb                	jne    c001a00c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001a021:	8d 76 00             	lea    esi,[esi+0x0]
c001a024:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a027:	83 ec 04             	sub    esp,0x4
c001a02a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a02d:	29 f8                	sub    eax,edi
c001a02f:	c1 e0 02             	shl    eax,0x2
c001a032:	50                   	push   eax
c001a033:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a036:	50                   	push   eax
c001a037:	52                   	push   edx
c001a038:	e8 93 63 fe ff       	call   c00003d0 <memmove>
c001a03d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a040:	29 f8                	sub    eax,edi
c001a042:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a045:	83 c4 1c             	add    esp,0x1c
c001a048:	89 f8                	mov    eax,edi
c001a04a:	5b                   	pop    ebx
c001a04b:	5e                   	pop    esi
c001a04c:	5f                   	pop    edi
c001a04d:	5d                   	pop    ebp
c001a04e:	c3                   	ret    
c001a04f:	90                   	nop

c001a050 <PCI::open(int, int, void*)>:
c001a050:	83 ec 18             	sub    esp,0x18
c001a053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a057:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a05b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a061:	8b 10                	mov    edx,DWORD PTR [eax]
c001a063:	50                   	push   eax
c001a064:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a067:	31 c0                	xor    eax,eax
c001a069:	83 c4 1c             	add    esp,0x1c
c001a06c:	c3                   	ret    
c001a06d:	90                   	nop

c001a06e <PCI::close(int, int, void*)>:
c001a06e:	31 c0                	xor    eax,eax
c001a070:	c3                   	ret    
c001a071:	90                   	nop

c001a072 <PCI::PCI()>:
c001a072:	83 ec 0c             	sub    esp,0xc
c001a075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a079:	83 ec 08             	sub    esp,0x8
c001a07c:	68 17 1a 02 c0       	push   0xc0021a17
c001a081:	50                   	push   eax
c001a082:	e8 e1 16 ff ff       	call   c000b768 <Bus::Bus(char const*)>
c001a087:	83 c4 10             	add    esp,0x10
c001a08a:	ba c0 1a 02 c0       	mov    edx,0xc0021ac0
c001a08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a093:	89 10                	mov    DWORD PTR [eax],edx
c001a095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a099:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a7:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0b6:	0f b6 d0             	movzx  edx,al
c001a0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0bd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0ce:	0f b6 d0             	movzx  edx,al
c001a0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0e4:	8d 50 01             	lea    edx,[eax+0x1]
c001a0e7:	88 d1                	mov    cl,dl
c001a0e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0ed:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a0f3:	0f b6 d0             	movzx  edx,al
c001a0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0fa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a0fe:	83 c9 c0             	or     ecx,0xffffffc0
c001a101:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a105:	90                   	nop
c001a106:	83 c4 0c             	add    esp,0xc
c001a109:	c3                   	ret    

c001a10a <PCI::readBAR8(unsigned int, int)>:
c001a10a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a10e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a112:	f6 c2 01             	test   dl,0x1
c001a115:	74 07                	je     c001a11e <PCI::readBAR8(unsigned int, int)+0x14>
c001a117:	83 e2 fc             	and    edx,0xfffffffc
c001a11a:	01 c2                	add    edx,eax
c001a11c:	ec                   	in     al,dx
c001a11d:	c3                   	ret    
c001a11e:	83 e2 f0             	and    edx,0xfffffff0
c001a121:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a124:	c3                   	ret    
c001a125:	90                   	nop

c001a126 <PCI::readBAR16(unsigned int, int)>:
c001a126:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a12a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a12e:	f6 c2 01             	test   dl,0x1
c001a131:	74 08                	je     c001a13b <PCI::readBAR16(unsigned int, int)+0x15>
c001a133:	83 e2 fc             	and    edx,0xfffffffc
c001a136:	01 c2                	add    edx,eax
c001a138:	66 ed                	in     ax,dx
c001a13a:	c3                   	ret    
c001a13b:	83 e2 f0             	and    edx,0xfffffff0
c001a13e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a142:	c3                   	ret    
c001a143:	90                   	nop

c001a144 <PCI::readBAR32(unsigned int, int)>:
c001a144:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a14c:	f6 c2 01             	test   dl,0x1
c001a14f:	74 07                	je     c001a158 <PCI::readBAR32(unsigned int, int)+0x14>
c001a151:	83 e2 fc             	and    edx,0xfffffffc
c001a154:	01 c2                	add    edx,eax
c001a156:	ed                   	in     eax,dx
c001a157:	c3                   	ret    
c001a158:	83 e2 f0             	and    edx,0xfffffff0
c001a15b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a15e:	c3                   	ret    
c001a15f:	90                   	nop

c001a160 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a160:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a168:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a16c:	f6 c2 01             	test   dl,0x1
c001a16f:	74 07                	je     c001a178 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a171:	83 e2 fc             	and    edx,0xfffffffc
c001a174:	01 ca                	add    edx,ecx
c001a176:	ee                   	out    dx,al
c001a177:	c3                   	ret    
c001a178:	83 e2 f0             	and    edx,0xfffffff0
c001a17b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a17e:	c3                   	ret    
c001a17f:	90                   	nop

c001a180 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a188:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a18c:	f6 c2 01             	test   dl,0x1
c001a18f:	74 08                	je     c001a199 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a191:	83 e2 fc             	and    edx,0xfffffffc
c001a194:	01 ca                	add    edx,ecx
c001a196:	66 ef                	out    dx,ax
c001a198:	c3                   	ret    
c001a199:	83 e2 f0             	and    edx,0xfffffff0
c001a19c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a1a0:	c3                   	ret    
c001a1a1:	90                   	nop

c001a1a2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a1a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1ae:	f6 c2 01             	test   dl,0x1
c001a1b1:	74 07                	je     c001a1ba <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a1b3:	83 e2 fc             	and    edx,0xfffffffc
c001a1b6:	01 ca                	add    edx,ecx
c001a1b8:	ef                   	out    dx,eax
c001a1b9:	c3                   	ret    
c001a1ba:	83 e2 f0             	and    edx,0xfffffff0
c001a1bd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a1c0:	c3                   	ret    
c001a1c1:	90                   	nop

c001a1c2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1c2:	55                   	push   ebp
c001a1c3:	57                   	push   edi
c001a1c4:	56                   	push   esi
c001a1c5:	53                   	push   ebx
c001a1c6:	83 ec 0c             	sub    esp,0xc
c001a1c9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a1ce:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a1d2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a1d6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a1da:	83 fe 07             	cmp    esi,0x7
c001a1dd:	76 10                	jbe    c001a1ef <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a1df:	83 ec 0c             	sub    esp,0xc
c001a1e2:	68 1f 1a 02 c0       	push   0xc0021a1f
c001a1e7:	e8 89 66 ff ff       	call   c0010875 <KePanic(char const*)>
c001a1ec:	83 c4 10             	add    esp,0x10
c001a1ef:	0f b6 db             	movzx  ebx,bl
c001a1f2:	83 fb 0f             	cmp    ebx,0xf
c001a1f5:	76 10                	jbe    c001a207 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a1f7:	83 ec 0c             	sub    esp,0xc
c001a1fa:	68 4f 1a 02 c0       	push   0xc0021a4f
c001a1ff:	e8 71 66 ff ff       	call   c0010875 <KePanic(char const*)>
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	8d 04 36             	lea    eax,[esi+esi*1]
c001a20a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a20f:	83 c8 f0             	or     eax,0xfffffff0
c001a212:	ee                   	out    dx,al
c001a213:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a218:	89 e8                	mov    eax,ebp
c001a21a:	ee                   	out    dx,al
c001a21b:	89 f9                	mov    ecx,edi
c001a21d:	89 d8                	mov    eax,ebx
c001a21f:	0f b6 d9             	movzx  ebx,cl
c001a222:	83 c4 0c             	add    esp,0xc
c001a225:	c1 e0 08             	shl    eax,0x8
c001a228:	83 e3 fc             	and    ebx,0xfffffffc
c001a22b:	09 d8                	or     eax,ebx
c001a22d:	5b                   	pop    ebx
c001a22e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a233:	5e                   	pop    esi
c001a234:	5f                   	pop    edi
c001a235:	5d                   	pop    ebp
c001a236:	c3                   	ret    
c001a237:	90                   	nop

c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a238:	57                   	push   edi
c001a239:	56                   	push   esi
c001a23a:	53                   	push   ebx
c001a23b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a23f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a243:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a247:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a24b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a251:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a255:	83 ff 01             	cmp    edi,0x1
c001a258:	75 3f                	jne    c001a299 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a25a:	89 de                	mov    esi,ebx
c001a25c:	0f b6 c0             	movzx  eax,al
c001a25f:	c1 e0 10             	shl    eax,0x10
c001a262:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a268:	0f b6 c9             	movzx  ecx,cl
c001a26b:	09 f0                	or     eax,esi
c001a26d:	c1 e1 08             	shl    ecx,0x8
c001a270:	0f b6 d2             	movzx  edx,dl
c001a273:	c1 e2 0b             	shl    edx,0xb
c001a276:	09 c8                	or     eax,ecx
c001a278:	09 d0                	or     eax,edx
c001a27a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a27f:	0d 00 00 00 80       	or     eax,0x80000000
c001a284:	ef                   	out    dx,eax
c001a285:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a28a:	ed                   	in     eax,dx
c001a28b:	83 e3 02             	and    ebx,0x2
c001a28e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a295:	d3 e8                	shr    eax,cl
c001a297:	eb 44                	jmp    c001a2dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a299:	83 ff 02             	cmp    edi,0x2
c001a29c:	75 2d                	jne    c001a2cb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a29e:	83 ec 0c             	sub    esp,0xc
c001a2a1:	0f b6 fb             	movzx  edi,bl
c001a2a4:	57                   	push   edi
c001a2a5:	0f b6 c9             	movzx  ecx,cl
c001a2a8:	51                   	push   ecx
c001a2a9:	0f b6 d2             	movzx  edx,dl
c001a2ac:	52                   	push   edx
c001a2ad:	0f b6 c0             	movzx  eax,al
c001a2b0:	50                   	push   eax
c001a2b1:	56                   	push   esi
c001a2b2:	e8 0b ff ff ff       	call   c001a1c2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2b7:	89 c2                	mov    edx,eax
c001a2b9:	ed                   	in     eax,dx
c001a2ba:	83 e3 02             	and    ebx,0x2
c001a2bd:	83 c4 20             	add    esp,0x20
c001a2c0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a2c7:	d3 e8                	shr    eax,cl
c001a2c9:	eb 12                	jmp    c001a2dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2cb:	83 ec 0c             	sub    esp,0xc
c001a2ce:	68 7f 1a 02 c0       	push   0xc0021a7f
c001a2d3:	e8 9d 65 ff ff       	call   c0010875 <KePanic(char const*)>
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	31 c0                	xor    eax,eax
c001a2dd:	5b                   	pop    ebx
c001a2de:	5e                   	pop    esi
c001a2df:	5f                   	pop    edi
c001a2e0:	c3                   	ret    
c001a2e1:	90                   	nop

c001a2e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a2e2:	83 ec 18             	sub    esp,0x18
c001a2e5:	6a 00                	push   0x0
c001a2e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ec:	50                   	push   eax
c001a2ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2f2:	50                   	push   eax
c001a2f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2f8:	50                   	push   eax
c001a2f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2fd:	e8 36 ff ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a302:	83 c4 2c             	add    esp,0x2c
c001a305:	c3                   	ret    

c001a306 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a306:	83 ec 18             	sub    esp,0x18
c001a309:	6a 0e                	push   0xe
c001a30b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a310:	50                   	push   eax
c001a311:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a316:	50                   	push   eax
c001a317:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a31c:	50                   	push   eax
c001a31d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a321:	e8 12 ff ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a326:	83 c4 2c             	add    esp,0x2c
c001a329:	0f b6 c0             	movzx  eax,al
c001a32c:	c3                   	ret    
c001a32d:	90                   	nop

c001a32e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a32e:	55                   	push   ebp
c001a32f:	57                   	push   edi
c001a330:	56                   	push   esi
c001a331:	53                   	push   ebx
c001a332:	83 ec 18             	sub    esp,0x18
c001a335:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a33a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a33f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a344:	6a 0a                	push   0xa
c001a346:	56                   	push   esi
c001a347:	55                   	push   ebp
c001a348:	57                   	push   edi
c001a349:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a34d:	e8 e6 fe ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a352:	83 c4 14             	add    esp,0x14
c001a355:	6a 0a                	push   0xa
c001a357:	56                   	push   esi
c001a358:	55                   	push   ebp
c001a359:	57                   	push   edi
c001a35a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a35e:	89 c3                	mov    ebx,eax
c001a360:	0f b6 db             	movzx  ebx,bl
c001a363:	e8 d0 fe ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a368:	83 c4 2c             	add    esp,0x2c
c001a36b:	25 00 ff 00 00       	and    eax,0xff00
c001a370:	09 d8                	or     eax,ebx
c001a372:	5b                   	pop    ebx
c001a373:	5e                   	pop    esi
c001a374:	5f                   	pop    edi
c001a375:	5d                   	pop    ebp
c001a376:	c3                   	ret    
c001a377:	90                   	nop

c001a378 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a378:	83 ec 18             	sub    esp,0x18
c001a37b:	6a 08                	push   0x8
c001a37d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a382:	50                   	push   eax
c001a383:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a388:	50                   	push   eax
c001a389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a38e:	50                   	push   eax
c001a38f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a393:	e8 a0 fe ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a398:	83 c4 2c             	add    esp,0x2c
c001a39b:	0f b6 c4             	movzx  eax,ah
c001a39e:	c3                   	ret    
c001a39f:	90                   	nop

c001a3a0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a3a0:	83 ec 18             	sub    esp,0x18
c001a3a3:	6a 08                	push   0x8
c001a3a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3aa:	50                   	push   eax
c001a3ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3b0:	50                   	push   eax
c001a3b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3b6:	50                   	push   eax
c001a3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3bb:	e8 78 fe ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3c0:	83 c4 2c             	add    esp,0x2c
c001a3c3:	c3                   	ret    

c001a3c4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a3c4:	83 ec 18             	sub    esp,0x18
c001a3c7:	6a 3c                	push   0x3c
c001a3c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3ce:	50                   	push   eax
c001a3cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3d4:	50                   	push   eax
c001a3d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3da:	50                   	push   eax
c001a3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3df:	e8 54 fe ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3e4:	83 c4 2c             	add    esp,0x2c
c001a3e7:	c3                   	ret    

c001a3e8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a3e8:	83 ec 18             	sub    esp,0x18
c001a3eb:	6a 18                	push   0x18
c001a3ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3f2:	50                   	push   eax
c001a3f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3f8:	50                   	push   eax
c001a3f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3fe:	50                   	push   eax
c001a3ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a403:	e8 30 fe ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a408:	83 c4 2c             	add    esp,0x2c
c001a40b:	0f b6 c4             	movzx  eax,ah
c001a40e:	c3                   	ret    
c001a40f:	90                   	nop

c001a410 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a410:	55                   	push   ebp
c001a411:	57                   	push   edi
c001a412:	56                   	push   esi
c001a413:	53                   	push   ebx
c001a414:	83 ec 28             	sub    esp,0x28
c001a417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a41b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a420:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a425:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a42a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a431:	8d 43 12             	lea    eax,[ebx+0x12]
c001a434:	83 c3 10             	add    ebx,0x10
c001a437:	0f b6 c0             	movzx  eax,al
c001a43a:	0f b6 db             	movzx  ebx,bl
c001a43d:	50                   	push   eax
c001a43e:	51                   	push   ecx
c001a43f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a443:	57                   	push   edi
c001a444:	55                   	push   ebp
c001a445:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a449:	e8 ea fd ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a44e:	83 c4 14             	add    esp,0x14
c001a451:	53                   	push   ebx
c001a452:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a456:	51                   	push   ecx
c001a457:	89 c6                	mov    esi,eax
c001a459:	57                   	push   edi
c001a45a:	55                   	push   ebp
c001a45b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a45f:	c1 e6 10             	shl    esi,0x10
c001a462:	e8 d1 fd ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a467:	83 c4 3c             	add    esp,0x3c
c001a46a:	5b                   	pop    ebx
c001a46b:	0f b7 c0             	movzx  eax,ax
c001a46e:	09 f0                	or     eax,esi
c001a470:	5e                   	pop    esi
c001a471:	5f                   	pop    edi
c001a472:	5d                   	pop    ebp
c001a473:	c3                   	ret    

c001a474 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a474:	55                   	push   ebp
c001a475:	57                   	push   edi
c001a476:	56                   	push   esi
c001a477:	53                   	push   ebx
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a47f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a483:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a487:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a48b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a491:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a495:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a499:	83 f9 01             	cmp    ecx,0x1
c001a49c:	75 5d                	jne    c001a4fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a49e:	0f b6 c8             	movzx  ecx,al
c001a4a1:	89 f0                	mov    eax,esi
c001a4a3:	25 fc 00 00 00       	and    eax,0xfc
c001a4a8:	0f b6 d2             	movzx  edx,dl
c001a4ab:	c1 e1 10             	shl    ecx,0x10
c001a4ae:	c1 e2 0b             	shl    edx,0xb
c001a4b1:	09 c1                	or     ecx,eax
c001a4b3:	89 f8                	mov    eax,edi
c001a4b5:	0f b6 f8             	movzx  edi,al
c001a4b8:	c1 e7 08             	shl    edi,0x8
c001a4bb:	09 f9                	or     ecx,edi
c001a4bd:	09 d1                	or     ecx,edx
c001a4bf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a4c4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a4ca:	89 c8                	mov    eax,ecx
c001a4cc:	ef                   	out    dx,eax
c001a4cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4d2:	ed                   	in     eax,dx
c001a4d3:	83 e6 02             	and    esi,0x2
c001a4d6:	0f b7 db             	movzx  ebx,bx
c001a4d9:	74 0a                	je     c001a4e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a4db:	c1 e3 10             	shl    ebx,0x10
c001a4de:	0f b7 d0             	movzx  edx,ax
c001a4e1:	09 d3                	or     ebx,edx
c001a4e3:	eb 05                	jmp    c001a4ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a4e5:	66 31 c0             	xor    ax,ax
c001a4e8:	09 c3                	or     ebx,eax
c001a4ea:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a4ef:	89 c8                	mov    eax,ecx
c001a4f1:	ef                   	out    dx,eax
c001a4f2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4f7:	89 d8                	mov    eax,ebx
c001a4f9:	eb 41                	jmp    c001a53c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a4fb:	83 f9 02             	cmp    ecx,0x2
c001a4fe:	75 45                	jne    c001a545 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a500:	89 f1                	mov    ecx,esi
c001a502:	83 ec 0c             	sub    esp,0xc
c001a505:	0f b6 f1             	movzx  esi,cl
c001a508:	89 f9                	mov    ecx,edi
c001a50a:	56                   	push   esi
c001a50b:	0f b6 f9             	movzx  edi,cl
c001a50e:	57                   	push   edi
c001a50f:	0f b6 d2             	movzx  edx,dl
c001a512:	52                   	push   edx
c001a513:	0f b6 c0             	movzx  eax,al
c001a516:	50                   	push   eax
c001a517:	55                   	push   ebp
c001a518:	e8 a5 fc ff ff       	call   c001a1c2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a51d:	89 c2                	mov    edx,eax
c001a51f:	ed                   	in     eax,dx
c001a520:	83 c4 20             	add    esp,0x20
c001a523:	f6 c2 02             	test   dl,0x2
c001a526:	0f b7 db             	movzx  ebx,bx
c001a529:	74 0c                	je     c001a537 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a52b:	0f b7 c8             	movzx  ecx,ax
c001a52e:	89 d8                	mov    eax,ebx
c001a530:	c1 e0 10             	shl    eax,0x10
c001a533:	09 c8                	or     eax,ecx
c001a535:	eb 05                	jmp    c001a53c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a537:	66 31 c0             	xor    ax,ax
c001a53a:	09 d8                	or     eax,ebx
c001a53c:	ef                   	out    dx,eax
c001a53d:	83 c4 0c             	add    esp,0xc
c001a540:	5b                   	pop    ebx
c001a541:	5e                   	pop    esi
c001a542:	5f                   	pop    edi
c001a543:	5d                   	pop    ebp
c001a544:	c3                   	ret    
c001a545:	c7 44 24 20 7f 1a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021a7f
c001a54d:	83 c4 0c             	add    esp,0xc
c001a550:	5b                   	pop    ebx
c001a551:	5e                   	pop    esi
c001a552:	5f                   	pop    edi
c001a553:	5d                   	pop    ebp
c001a554:	e9 1c 63 ff ff       	jmp    c0010875 <KePanic(char const*)>
c001a559:	90                   	nop

c001a55a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a55a:	55                   	push   ebp
c001a55b:	57                   	push   edi
c001a55c:	56                   	push   esi
c001a55d:	53                   	push   ebx
c001a55e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a564:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a56b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a572:	0f 85 bd 00 00 00    	jne    c001a635 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a578:	83 ec 0c             	sub    esp,0xc
c001a57b:	68 14 01 00 00       	push   0x114
c001a580:	e8 46 d5 fe ff       	call   c0007acb <malloc>
c001a585:	83 c4 0c             	add    esp,0xc
c001a588:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a58e:	68 85 1a 02 c0       	push   0xc0021a85
c001a593:	50                   	push   eax
c001a594:	89 c3                	mov    ebx,eax
c001a596:	e8 b7 09 ff ff       	call   c000af52 <File::File(char const*, Process*)>
c001a59b:	83 c4 10             	add    esp,0x10
c001a59e:	85 db                	test   ebx,ebx
c001a5a0:	0f 84 6b 02 00 00    	je     c001a811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5a6:	57                   	push   edi
c001a5a7:	57                   	push   edi
c001a5a8:	6a 01                	push   0x1
c001a5aa:	53                   	push   ebx
c001a5ab:	e8 5e 0a ff ff       	call   c000b00e <File::open(FileOpenMode)>
c001a5b0:	83 c4 10             	add    esp,0x10
c001a5b3:	85 c0                	test   eax,eax
c001a5b5:	0f 85 56 02 00 00    	jne    c001a811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5bb:	52                   	push   edx
c001a5bc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a5c0:	50                   	push   eax
c001a5c1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a5c5:	50                   	push   eax
c001a5c6:	53                   	push   ebx
c001a5c7:	e8 ee 0c ff ff       	call   c000b2ba <File::stat(unsigned long long*, bool*)>
c001a5cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5d0:	40                   	inc    eax
c001a5d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5d4:	e8 f2 d4 fe ff       	call   c0007acb <malloc>
c001a5d9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5dd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a5e1:	59                   	pop    ecx
c001a5e2:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a5e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a5e9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a5ed:	51                   	push   ecx
c001a5ee:	50                   	push   eax
c001a5ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5f3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5f7:	53                   	push   ebx
c001a5f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a5fb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a5ff:	83 c4 20             	add    esp,0x20
c001a602:	89 c8                	mov    eax,ecx
c001a604:	99                   	cdq    
c001a605:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a609:	0f 85 02 02 00 00    	jne    c001a811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a60f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a613:	0f 85 f8 01 00 00    	jne    c001a811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a619:	83 ec 0c             	sub    esp,0xc
c001a61c:	53                   	push   ebx
c001a61d:	e8 4a 0a ff ff       	call   c000b06c <File::close()>
c001a622:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a626:	83 c4 10             	add    esp,0x10
c001a629:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a630:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a635:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a63d:	31 c9                	xor    ecx,ecx
c001a63f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a646:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a64c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a653:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a659:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a65e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a666:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a66b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a673:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a677:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a67f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a683:	39 cd                	cmp    ebp,ecx
c001a685:	0f 8e 86 01 00 00    	jle    c001a811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a68b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a68e:	d4 40                	aam    0x40
c001a690:	d5 39                	aad    0x39
c001a692:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a696:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a69a:	d4 40                	aam    0x40
c001a69c:	d5 39                	aad    0x39
c001a69e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a6a2:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a6a6:	d4 40                	aam    0x40
c001a6a8:	d5 39                	aad    0x39
c001a6aa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a6ae:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a6b2:	d4 40                	aam    0x40
c001a6b4:	d5 39                	aad    0x39
c001a6b6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a6ba:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a6be:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a6c2:	3c 56                	cmp    al,0x56
c001a6c4:	74 47                	je     c001a70d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a6c6:	d4 40                	aam    0x40
c001a6c8:	d5 39                	aad    0x39
c001a6ca:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a6cd:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a6d1:	0f b6 db             	movzx  ebx,bl
c001a6d4:	c1 e3 04             	shl    ebx,0x4
c001a6d7:	d4 40                	aam    0x40
c001a6d9:	d5 39                	aad    0x39
c001a6db:	83 e8 30             	sub    eax,0x30
c001a6de:	0f b6 c0             	movzx  eax,al
c001a6e1:	09 c3                	or     ebx,eax
c001a6e3:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a6e7:	c1 e3 04             	shl    ebx,0x4
c001a6ea:	d4 40                	aam    0x40
c001a6ec:	d5 39                	aad    0x39
c001a6ee:	83 e8 30             	sub    eax,0x30
c001a6f1:	0f b6 c0             	movzx  eax,al
c001a6f4:	09 c3                	or     ebx,eax
c001a6f6:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a6fa:	c1 e3 04             	shl    ebx,0x4
c001a6fd:	d4 40                	aam    0x40
c001a6ff:	d5 39                	aad    0x39
c001a701:	83 e8 30             	sub    eax,0x30
c001a704:	0f b6 c0             	movzx  eax,al
c001a707:	09 c3                	or     ebx,eax
c001a709:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a70d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a711:	80 fb 58             	cmp    bl,0x58
c001a714:	74 49                	je     c001a75f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a716:	88 d8                	mov    al,bl
c001a718:	d4 40                	aam    0x40
c001a71a:	d5 39                	aad    0x39
c001a71c:	83 e8 30             	sub    eax,0x30
c001a71f:	0f b6 f8             	movzx  edi,al
c001a722:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a726:	c1 e7 04             	shl    edi,0x4
c001a729:	d4 40                	aam    0x40
c001a72b:	d5 39                	aad    0x39
c001a72d:	83 e8 30             	sub    eax,0x30
c001a730:	0f b6 c0             	movzx  eax,al
c001a733:	09 c7                	or     edi,eax
c001a735:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a739:	c1 e7 04             	shl    edi,0x4
c001a73c:	d4 40                	aam    0x40
c001a73e:	d5 39                	aad    0x39
c001a740:	83 e8 30             	sub    eax,0x30
c001a743:	0f b6 c0             	movzx  eax,al
c001a746:	09 c7                	or     edi,eax
c001a748:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a74c:	c1 e7 04             	shl    edi,0x4
c001a74f:	d4 40                	aam    0x40
c001a751:	d5 39                	aad    0x39
c001a753:	83 e8 30             	sub    eax,0x30
c001a756:	0f b6 c0             	movzx  eax,al
c001a759:	09 c7                	or     edi,eax
c001a75b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a75f:	8d 41 10             	lea    eax,[ecx+0x10]
c001a762:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a766:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a76a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a76e:	83 f9 0a             	cmp    ecx,0xa
c001a771:	74 07                	je     c001a77a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a773:	47                   	inc    edi
c001a774:	39 c5                	cmp    ebp,eax
c001a776:	75 16                	jne    c001a78e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a778:	89 e8                	mov    eax,ebp
c001a77a:	83 f9 0a             	cmp    ecx,0xa
c001a77d:	0f 94 c1             	sete   cl
c001a780:	0f b6 c9             	movzx  ecx,cl
c001a783:	01 c1                	add    ecx,eax
c001a785:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a78a:	75 0f                	jne    c001a79b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a78c:	eb 1c                	jmp    c001a7aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a78e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a791:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a795:	40                   	inc    eax
c001a796:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a799:	eb cb                	jmp    c001a766 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a79b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a79f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a7a4:	0f 85 d9 fe ff ff    	jne    c001a683 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7aa:	80 fb 58             	cmp    bl,0x58
c001a7ad:	74 10                	je     c001a7bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a7af:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a7b4:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a7b9:	0f 85 c4 fe ff ff    	jne    c001a683 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7c3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a7c7:	83 e8 30             	sub    eax,0x30
c001a7ca:	c1 e0 04             	shl    eax,0x4
c001a7cd:	83 eb 30             	sub    ebx,0x30
c001a7d0:	09 d8                	or     eax,ebx
c001a7d2:	0f b6 c0             	movzx  eax,al
c001a7d5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a7d9:	0f 85 a4 fe ff ff    	jne    c001a683 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7e3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7e7:	83 e8 30             	sub    eax,0x30
c001a7ea:	c1 e0 04             	shl    eax,0x4
c001a7ed:	83 eb 30             	sub    ebx,0x30
c001a7f0:	09 d8                	or     eax,ebx
c001a7f2:	0f b6 c0             	movzx  eax,al
c001a7f5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a7f9:	0f 85 84 fe ff ff    	jne    c001a683 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7ff:	50                   	push   eax
c001a800:	50                   	push   eax
c001a801:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a805:	50                   	push   eax
c001a806:	56                   	push   esi
c001a807:	e8 44 5e fe ff       	call   c0000650 <strcpy>
c001a80c:	83 c4 10             	add    esp,0x10
c001a80f:	eb 05                	jmp    c001a816 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a811:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a814:	31 f6                	xor    esi,esi
c001a816:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a81c:	89 f0                	mov    eax,esi
c001a81e:	5b                   	pop    ebx
c001a81f:	5e                   	pop    esi
c001a820:	5f                   	pop    edi
c001a821:	5d                   	pop    ebp
c001a822:	c3                   	ret    
c001a823:	90                   	nop

c001a824 <PCI::checkBus(unsigned char)>:
c001a824:	56                   	push   esi
c001a825:	53                   	push   ebx
c001a826:	31 db                	xor    ebx,ebx
c001a828:	51                   	push   ecx
c001a829:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a82e:	52                   	push   edx
c001a82f:	53                   	push   ebx
c001a830:	43                   	inc    ebx
c001a831:	56                   	push   esi
c001a832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a836:	e8 0f 03 00 00       	call   c001ab4a <PCI::checkDevice(unsigned char, unsigned char)>
c001a83b:	83 c4 10             	add    esp,0x10
c001a83e:	83 fb 20             	cmp    ebx,0x20
c001a841:	75 eb                	jne    c001a82e <PCI::checkBus(unsigned char)+0xa>
c001a843:	58                   	pop    eax
c001a844:	5b                   	pop    ebx
c001a845:	5e                   	pop    esi
c001a846:	c3                   	ret    
c001a847:	90                   	nop

c001a848 <PCI::foundDevice(PCIDeviceInfo)>:
c001a848:	55                   	push   ebp
c001a849:	57                   	push   edi
c001a84a:	56                   	push   esi
c001a84b:	53                   	push   ebx
c001a84c:	83 ec 1c             	sub    esp,0x1c
c001a84f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a854:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a858:	3d ff ff 00 00       	cmp    eax,0xffff
c001a85d:	0f 84 63 01 00 00    	je     c001a9c6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a863:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a868:	66 3d 06 04          	cmp    ax,0x406
c001a86c:	75 2c                	jne    c001a89a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a86e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a873:	50                   	push   eax
c001a874:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a879:	50                   	push   eax
c001a87a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a87f:	50                   	push   eax
c001a880:	53                   	push   ebx
c001a881:	e8 62 fb ff ff       	call   c001a3e8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a886:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a88a:	0f b6 c0             	movzx  eax,al
c001a88d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a891:	83 c4 2c             	add    esp,0x2c
c001a894:	5b                   	pop    ebx
c001a895:	5e                   	pop    esi
c001a896:	5f                   	pop    edi
c001a897:	5d                   	pop    ebp
c001a898:	eb 8a                	jmp    c001a824 <PCI::checkBus(unsigned char)>
c001a89a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001a89f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a8a5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a8a9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a8ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a8b1:	85 d2                	test   edx,edx
c001a8b3:	74 34                	je     c001a8e9 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a8b5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a8b8:	85 c9                	test   ecx,ecx
c001a8ba:	74 29                	je     c001a8e5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8bc:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001a8c2:	31 f5                	xor    ebp,esi
c001a8c4:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001a8ca:	75 19                	jne    c001a8e5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8cc:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001a8d2:	75 11                	jne    c001a8e5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8d4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a8db:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a8df:	0f 84 e1 00 00 00    	je     c001a9c6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a8e5:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8e7:	eb c8                	jmp    c001a8b1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a8e9:	3d 01 06 00 00       	cmp    eax,0x601
c001a8ee:	75 19                	jne    c001a909 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	68 64 01 00 00       	push   0x164
c001a8f8:	e8 ce d1 fe ff       	call   c0007acb <malloc>
c001a8fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a900:	89 c5                	mov    ebp,eax
c001a902:	e8 ab 0e 00 00       	call   c001b7b2 <SATABus::SATABus()>
c001a907:	eb 1e                	jmp    c001a927 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a909:	3d 01 01 00 00       	cmp    eax,0x101
c001a90e:	75 62                	jne    c001a972 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	68 70 02 00 00       	push   0x270
c001a918:	e8 ae d1 fe ff       	call   c0007acb <malloc>
c001a91d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a920:	89 c5                	mov    ebp,eax
c001a922:	e8 f3 02 00 00       	call   c001ac1a <IDE::IDE()>
c001a927:	58                   	pop    eax
c001a928:	5a                   	pop    edx
c001a929:	55                   	push   ebp
c001a92a:	53                   	push   ebx
c001a92b:	e8 dc 14 ff ff       	call   c000be0c <Device::addChild(Device*)>
c001a930:	83 ec 1c             	sub    esp,0x1c
c001a933:	b9 09 00 00 00       	mov    ecx,0x9
c001a938:	fc                   	cld    
c001a939:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a93d:	89 e7                	mov    edi,esp
c001a93f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a941:	55                   	push   ebp
c001a942:	e8 0b 14 ff ff       	call   c000bd52 <Device::preOpenPCI(PCIDeviceInfo)>
c001a947:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a94a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a94e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a956:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a95e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a966:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a969:	83 c4 4c             	add    esp,0x4c
c001a96c:	5b                   	pop    ebx
c001a96d:	5e                   	pop    esi
c001a96e:	5f                   	pop    edi
c001a96f:	5d                   	pop    ebp
c001a970:	ff e0                	jmp    eax
c001a972:	83 ec 0c             	sub    esp,0xc
c001a975:	68 58 01 00 00       	push   0x158
c001a97a:	e8 4c d1 fe ff       	call   c0007acb <malloc>
c001a97f:	5a                   	pop    edx
c001a980:	59                   	pop    ecx
c001a981:	68 9e 1a 02 c0       	push   0xc0021a9e
c001a986:	50                   	push   eax
c001a987:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a98b:	e8 1a 17 ff ff       	call   c000c0aa <DriverlessDevice::DriverlessDevice(char const*)>
c001a990:	5e                   	pop    esi
c001a991:	5f                   	pop    edi
c001a992:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a996:	50                   	push   eax
c001a997:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a99b:	53                   	push   ebx
c001a99c:	e8 6b 14 ff ff       	call   c000be0c <Device::addChild(Device*)>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	b9 09 00 00 00       	mov    ecx,0x9
c001a9a9:	fc                   	cld    
c001a9aa:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a9ae:	89 fe                	mov    esi,edi
c001a9b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a9b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9ba:	83 c4 1c             	add    esp,0x1c
c001a9bd:	5b                   	pop    ebx
c001a9be:	5e                   	pop    esi
c001a9bf:	5f                   	pop    edi
c001a9c0:	5d                   	pop    ebp
c001a9c1:	e9 8c 13 ff ff       	jmp    c000bd52 <Device::preOpenPCI(PCIDeviceInfo)>
c001a9c6:	83 c4 1c             	add    esp,0x1c
c001a9c9:	5b                   	pop    ebx
c001a9ca:	5e                   	pop    esi
c001a9cb:	5f                   	pop    edi
c001a9cc:	5d                   	pop    ebp
c001a9cd:	c3                   	ret    

c001a9ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a9ce:	55                   	push   ebp
c001a9cf:	57                   	push   edi
c001a9d0:	56                   	push   esi
c001a9d1:	53                   	push   ebx
c001a9d2:	83 ec 68             	sub    esp,0x68
c001a9d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9dc:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a9e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a9e4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9eb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a9f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9fb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001aa00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa04:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001aa09:	6a 0c                	push   0xc
c001aa0b:	57                   	push   edi
c001aa0c:	53                   	push   ebx
c001aa0d:	56                   	push   esi
c001aa0e:	55                   	push   ebp
c001aa0f:	e8 24 f8 ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa14:	83 c4 20             	add    esp,0x20
c001aa17:	57                   	push   edi
c001aa18:	53                   	push   ebx
c001aa19:	56                   	push   esi
c001aa1a:	55                   	push   ebp
c001aa1b:	e8 0e f9 ff ff       	call   c001a32e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001aa20:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001aa25:	57                   	push   edi
c001aa26:	53                   	push   ebx
c001aa27:	56                   	push   esi
c001aa28:	55                   	push   ebp
c001aa29:	e8 96 f9 ff ff       	call   c001a3c4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001aa2e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aa32:	83 c4 14             	add    esp,0x14
c001aa35:	6a 3c                	push   0x3c
c001aa37:	57                   	push   edi
c001aa38:	53                   	push   ebx
c001aa39:	56                   	push   esi
c001aa3a:	55                   	push   ebp
c001aa3b:	e8 f8 f7 ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa40:	0f b6 c4             	movzx  eax,ah
c001aa43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa47:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa4b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aa4f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aa54:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aa5a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aa60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa64:	83 c4 20             	add    esp,0x20
c001aa67:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aa6c:	74 30                	je     c001aa9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa6e:	31 c0                	xor    eax,eax
c001aa70:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa74:	7e 28                	jle    c001aa9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa76:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa7e:	39 cb                	cmp    ebx,ecx
c001aa80:	75 19                	jne    c001aa9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa82:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa8a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa8e:	75 0b                	jne    c001aa9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa90:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa97:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa9b:	40                   	inc    eax
c001aa9c:	eb d2                	jmp    c001aa70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa9e:	31 d2                	xor    edx,edx
c001aaa0:	83 ec 0c             	sub    esp,0xc
c001aaa3:	57                   	push   edi
c001aaa4:	53                   	push   ebx
c001aaa5:	56                   	push   esi
c001aaa6:	52                   	push   edx
c001aaa7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aaab:	55                   	push   ebp
c001aaac:	e8 5f f9 ff ff       	call   c001a410 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aab1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aab5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aab9:	42                   	inc    edx
c001aaba:	83 c4 20             	add    esp,0x20
c001aabd:	83 fa 06             	cmp    edx,0x6
c001aac0:	75 de                	jne    c001aaa0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aac2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aac6:	83 ec 0c             	sub    esp,0xc
c001aac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aacd:	c1 e2 08             	shl    edx,0x8
c001aad0:	0f b6 c4             	movzx  eax,ah
c001aad3:	09 d0                	or     eax,edx
c001aad5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aada:	6a 02                	push   0x2
c001aadc:	57                   	push   edi
c001aadd:	53                   	push   ebx
c001aade:	56                   	push   esi
c001aadf:	55                   	push   ebp
c001aae0:	e8 53 f7 ff ff       	call   c001a238 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aae5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aaea:	83 c4 20             	add    esp,0x20
c001aaed:	57                   	push   edi
c001aaee:	53                   	push   ebx
c001aaef:	56                   	push   esi
c001aaf0:	55                   	push   ebp
c001aaf1:	e8 82 f8 ff ff       	call   c001a378 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aaf6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aafa:	57                   	push   edi
c001aafb:	53                   	push   ebx
c001aafc:	56                   	push   esi
c001aafd:	55                   	push   ebp
c001aafe:	e8 df f7 ff ff       	call   c001a2e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab03:	b9 09 00 00 00       	mov    ecx,0x9
c001ab08:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ab0d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ab11:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ab15:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ab19:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ab1d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ab21:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ab25:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ab29:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ab2d:	83 ec 0c             	sub    esp,0xc
c001ab30:	fc                   	cld    
c001ab31:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ab35:	89 e7                	mov    edi,esp
c001ab37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ab39:	55                   	push   ebp
c001ab3a:	e8 09 fd ff ff       	call   c001a848 <PCI::foundDevice(PCIDeviceInfo)>
c001ab3f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab45:	5b                   	pop    ebx
c001ab46:	5e                   	pop    esi
c001ab47:	5f                   	pop    edi
c001ab48:	5d                   	pop    ebp
c001ab49:	c3                   	ret    

c001ab4a <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab4a:	55                   	push   ebp
c001ab4b:	57                   	push   edi
c001ab4c:	56                   	push   esi
c001ab4d:	53                   	push   ebx
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ab56:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ab5b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ab5f:	6a 00                	push   0x0
c001ab61:	56                   	push   esi
c001ab62:	57                   	push   edi
c001ab63:	55                   	push   ebp
c001ab64:	e8 79 f7 ff ff       	call   c001a2e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab69:	6a 00                	push   0x0
c001ab6b:	56                   	push   esi
c001ab6c:	57                   	push   edi
c001ab6d:	55                   	push   ebp
c001ab6e:	e8 5b fe ff ff       	call   c001a9ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab73:	83 c4 20             	add    esp,0x20
c001ab76:	6a 00                	push   0x0
c001ab78:	56                   	push   esi
c001ab79:	57                   	push   edi
c001ab7a:	55                   	push   ebp
c001ab7b:	e8 86 f7 ff ff       	call   c001a306 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	a8 80                	test   al,0x80
c001ab85:	74 2d                	je     c001abb4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab87:	bb 01 00 00 00       	mov    ebx,0x1
c001ab8c:	53                   	push   ebx
c001ab8d:	56                   	push   esi
c001ab8e:	57                   	push   edi
c001ab8f:	55                   	push   ebp
c001ab90:	e8 4d f7 ff ff       	call   c001a2e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	0f b7 c0             	movzx  eax,ax
c001ab9b:	3d ff ff 00 00       	cmp    eax,0xffff
c001aba0:	74 0c                	je     c001abae <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001aba2:	53                   	push   ebx
c001aba3:	56                   	push   esi
c001aba4:	57                   	push   edi
c001aba5:	55                   	push   ebp
c001aba6:	e8 23 fe ff ff       	call   c001a9ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	43                   	inc    ebx
c001abaf:	83 fb 08             	cmp    ebx,0x8
c001abb2:	75 d8                	jne    c001ab8c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001abb4:	83 c4 0c             	add    esp,0xc
c001abb7:	5b                   	pop    ebx
c001abb8:	5e                   	pop    esi
c001abb9:	5f                   	pop    edi
c001abba:	5d                   	pop    ebp
c001abbb:	c3                   	ret    

c001abbc <PCI::detect()>:
c001abbc:	56                   	push   esi
c001abbd:	53                   	push   ebx
c001abbe:	53                   	push   ebx
c001abbf:	31 db                	xor    ebx,ebx
c001abc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abc5:	6a 00                	push   0x0
c001abc7:	6a 00                	push   0x0
c001abc9:	6a 00                	push   0x0
c001abcb:	56                   	push   esi
c001abcc:	e8 35 f7 ff ff       	call   c001a306 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001abd1:	83 c4 10             	add    esp,0x10
c001abd4:	a8 80                	test   al,0x80
c001abd6:	75 21                	jne    c001abf9 <PCI::detect()+0x3d>
c001abd8:	51                   	push   ecx
c001abd9:	51                   	push   ecx
c001abda:	6a 00                	push   0x0
c001abdc:	56                   	push   esi
c001abdd:	e8 42 fc ff ff       	call   c001a824 <PCI::checkBus(unsigned char)>
c001abe2:	83 c4 10             	add    esp,0x10
c001abe5:	eb 2a                	jmp    c001ac11 <PCI::detect()+0x55>
c001abe7:	52                   	push   edx
c001abe8:	52                   	push   edx
c001abe9:	53                   	push   ebx
c001abea:	43                   	inc    ebx
c001abeb:	56                   	push   esi
c001abec:	e8 33 fc ff ff       	call   c001a824 <PCI::checkBus(unsigned char)>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	83 fb 08             	cmp    ebx,0x8
c001abf7:	74 18                	je     c001ac11 <PCI::detect()+0x55>
c001abf9:	53                   	push   ebx
c001abfa:	6a 00                	push   0x0
c001abfc:	6a 00                	push   0x0
c001abfe:	56                   	push   esi
c001abff:	e8 de f6 ff ff       	call   c001a2e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ac04:	83 c4 10             	add    esp,0x10
c001ac07:	0f b7 c0             	movzx  eax,ax
c001ac0a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac0f:	74 d6                	je     c001abe7 <PCI::detect()+0x2b>
c001ac11:	58                   	pop    eax
c001ac12:	5b                   	pop    ebx
c001ac13:	5e                   	pop    esi
c001ac14:	c3                   	ret    
c001ac15:	90                   	nop

c001ac16 <IDE::close(int, int, void*)>:
c001ac16:	83 c8 ff             	or     eax,0xffffffff
c001ac19:	c3                   	ret    

c001ac1a <IDE::IDE()>:
c001ac1a:	83 ec 0c             	sub    esp,0xc
c001ac1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac21:	83 ec 08             	sub    esp,0x8
c001ac24:	68 e4 1a 02 c0       	push   0xc0021ae4
c001ac29:	50                   	push   eax
c001ac2a:	e8 21 15 ff ff       	call   c000c150 <HardDiskController::HardDiskController(char const*)>
c001ac2f:	83 c4 10             	add    esp,0x10
c001ac32:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c001ac37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3b:	89 10                	mov    DWORD PTR [eax],edx
c001ac3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac41:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac48:	90                   	nop
c001ac49:	83 c4 0c             	add    esp,0xc
c001ac4c:	c3                   	ret    
c001ac4d:	90                   	nop

c001ac4e <IDE::prepareInterrupt(unsigned char)>:
c001ac4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac57:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ac5f:	c3                   	ret    

c001ac60 <selectDrive(unsigned char, unsigned char)>:
c001ac60:	c3                   	ret    
c001ac61:	90                   	nop

c001ac62 <IDE::getBase(unsigned char)>:
c001ac62:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ac67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac73:	c3                   	ret    

c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac74:	55                   	push   ebp
c001ac75:	57                   	push   edi
c001ac76:	56                   	push   esi
c001ac77:	53                   	push   ebx
c001ac78:	83 ec 1c             	sub    esp,0x1c
c001ac7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ac83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac8b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac8e:	80 f9 03             	cmp    cl,0x3
c001ac91:	77 4f                	ja     c001ace2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac97:	0f b6 f2             	movzx  esi,dl
c001ac9a:	0f b6 db             	movzx  ebx,bl
c001ac9d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001aca0:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001aca5:	80 ca 80             	or     dl,0x80
c001aca8:	52                   	push   edx
c001aca9:	6a 0c                	push   0xc
c001acab:	56                   	push   esi
c001acac:	57                   	push   edi
c001acad:	e8 c2 ff ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acb2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001acb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acbb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001acbf:	ee                   	out    dx,al
c001acc0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001acc5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001acc9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001accd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001acd5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001acd9:	83 c4 2c             	add    esp,0x2c
c001acdc:	5b                   	pop    ebx
c001acdd:	5e                   	pop    esi
c001acde:	5f                   	pop    edi
c001acdf:	5d                   	pop    ebp
c001ace0:	eb 92                	jmp    c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ace2:	0f b6 cb             	movzx  ecx,bl
c001ace5:	83 f9 07             	cmp    ecx,0x7
c001ace8:	77 12                	ja     c001acfc <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001acea:	0f b6 d2             	movzx  edx,dl
c001aced:	0f b6 db             	movzx  ebx,bl
c001acf0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001acf8:	01 da                	add    edx,ebx
c001acfa:	eb 2f                	jmp    c001ad2b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001acfc:	83 f9 0d             	cmp    ecx,0xd
c001acff:	77 13                	ja     c001ad14 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ad01:	0f b6 d2             	movzx  edx,dl
c001ad04:	0f b6 db             	movzx  ebx,bl
c001ad07:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ad0e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ad12:	eb 17                	jmp    c001ad2b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad14:	83 f9 15             	cmp    ecx,0x15
c001ad17:	77 13                	ja     c001ad2c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ad19:	0f b6 d2             	movzx  edx,dl
c001ad1c:	0f b6 db             	movzx  ebx,bl
c001ad1f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ad27:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ad2b:	ee                   	out    dx,al
c001ad2c:	83 c4 1c             	add    esp,0x1c
c001ad2f:	5b                   	pop    ebx
c001ad30:	5e                   	pop    esi
c001ad31:	5f                   	pop    edi
c001ad32:	5d                   	pop    ebp
c001ad33:	c3                   	ret    

c001ad34 <IDE::read(unsigned char, unsigned char)>:
c001ad34:	57                   	push   edi
c001ad35:	56                   	push   esi
c001ad36:	53                   	push   ebx
c001ad37:	83 ec 10             	sub    esp,0x10
c001ad3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad3e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad42:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad46:	8d 42 f8             	lea    eax,[edx-0x8]
c001ad49:	3c 03                	cmp    al,0x3
c001ad4b:	77 48                	ja     c001ad95 <IDE::read(unsigned char, unsigned char)+0x61>
c001ad4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad51:	0f b6 f1             	movzx  esi,cl
c001ad54:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ad57:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ad5c:	0c 80                	or     al,0x80
c001ad5e:	50                   	push   eax
c001ad5f:	6a 0c                	push   0xc
c001ad61:	56                   	push   esi
c001ad62:	53                   	push   ebx
c001ad63:	e8 0c ff ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad6c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ad71:	0f b6 d2             	movzx  edx,dl
c001ad74:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad78:	ec                   	in     al,dx
c001ad79:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ad7d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ad82:	52                   	push   edx
c001ad83:	6a 0c                	push   0xc
c001ad85:	56                   	push   esi
c001ad86:	53                   	push   ebx
c001ad87:	e8 e8 fe ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad8c:	83 c4 20             	add    esp,0x20
c001ad8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad93:	eb 4c                	jmp    c001ade1 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad95:	0f b6 f2             	movzx  esi,dl
c001ad98:	83 fe 07             	cmp    esi,0x7
c001ad9b:	77 12                	ja     c001adaf <IDE::read(unsigned char, unsigned char)+0x7b>
c001ad9d:	0f b6 c9             	movzx  ecx,cl
c001ada0:	0f b6 d2             	movzx  edx,dl
c001ada3:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001adab:	01 c2                	add    edx,eax
c001adad:	eb 31                	jmp    c001ade0 <IDE::read(unsigned char, unsigned char)+0xac>
c001adaf:	83 fe 0d             	cmp    esi,0xd
c001adb2:	77 13                	ja     c001adc7 <IDE::read(unsigned char, unsigned char)+0x93>
c001adb4:	0f b6 c9             	movzx  ecx,cl
c001adb7:	0f b6 d2             	movzx  edx,dl
c001adba:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001adc1:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001adc5:	eb 19                	jmp    c001ade0 <IDE::read(unsigned char, unsigned char)+0xac>
c001adc7:	31 c0                	xor    eax,eax
c001adc9:	83 fe 15             	cmp    esi,0x15
c001adcc:	77 13                	ja     c001ade1 <IDE::read(unsigned char, unsigned char)+0xad>
c001adce:	0f b6 c9             	movzx  ecx,cl
c001add1:	0f b6 d2             	movzx  edx,dl
c001add4:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001addc:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ade0:	ec                   	in     al,dx
c001ade1:	83 c4 10             	add    esp,0x10
c001ade4:	5b                   	pop    ebx
c001ade5:	5e                   	pop    esi
c001ade6:	5f                   	pop    edi
c001ade7:	c3                   	ret    

c001ade8 <IDE::waitInterrupt(unsigned char)>:
c001ade8:	55                   	push   ebp
c001ade9:	57                   	push   edi
c001adea:	56                   	push   esi
c001adeb:	53                   	push   ebx
c001adec:	31 db                	xor    ebx,ebx
c001adee:	83 ec 0c             	sub    esp,0xc
c001adf1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001adf5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001adfa:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ae02:	89 e8                	mov    eax,ebp
c001ae04:	84 c0                	test   al,al
c001ae06:	75 30                	jne    c001ae38 <IDE::waitInterrupt(unsigned char)+0x50>
c001ae08:	50                   	push   eax
c001ae09:	6a 0c                	push   0xc
c001ae0b:	56                   	push   esi
c001ae0c:	57                   	push   edi
c001ae0d:	e8 22 ff ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	a8 01                	test   al,0x1
c001ae17:	75 27                	jne    c001ae40 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae19:	f6 c3 04             	test   bl,0x4
c001ae1c:	75 12                	jne    c001ae30 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae1e:	83 fb 32             	cmp    ebx,0x32
c001ae21:	7e 0d                	jle    c001ae30 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae23:	83 ec 0c             	sub    esp,0xc
c001ae26:	6a 64                	push   0x64
c001ae28:	e8 5f a5 ff ff       	call   c001538c <milliTenthSleep(unsigned int)>
c001ae2d:	83 c4 10             	add    esp,0x10
c001ae30:	83 fb 3c             	cmp    ebx,0x3c
c001ae33:	74 0b                	je     c001ae40 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae35:	43                   	inc    ebx
c001ae36:	eb c2                	jmp    c001adfa <IDE::waitInterrupt(unsigned char)+0x12>
c001ae38:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae40:	83 c4 0c             	add    esp,0xc
c001ae43:	89 e8                	mov    eax,ebp
c001ae45:	5b                   	pop    ebx
c001ae46:	5e                   	pop    esi
c001ae47:	5f                   	pop    edi
c001ae48:	5d                   	pop    ebp
c001ae49:	c3                   	ret    

c001ae4a <ideChannel0IRQHandler(regs*, void*)>:
c001ae4a:	83 ec 10             	sub    esp,0x10
c001ae4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae51:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae58:	6a 07                	push   0x7
c001ae5a:	6a 00                	push   0x0
c001ae5c:	50                   	push   eax
c001ae5d:	e8 d2 fe ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001ae62:	83 c4 1c             	add    esp,0x1c
c001ae65:	c3                   	ret    

c001ae66 <ideChannel1IRQHandler(regs*, void*)>:
c001ae66:	83 ec 10             	sub    esp,0x10
c001ae69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae6d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ae74:	6a 07                	push   0x7
c001ae76:	6a 01                	push   0x1
c001ae78:	50                   	push   eax
c001ae79:	e8 b6 fe ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001ae7e:	83 c4 1c             	add    esp,0x1c
c001ae81:	c3                   	ret    

c001ae82 <IDE::enableIRQs(unsigned char, bool)>:
c001ae82:	57                   	push   edi
c001ae83:	b8 02 00 00 00       	mov    eax,0x2
c001ae88:	56                   	push   esi
c001ae89:	53                   	push   ebx
c001ae8a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae97:	74 02                	je     c001ae9b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae99:	31 c0                	xor    eax,eax
c001ae9b:	0f b6 db             	movzx  ebx,bl
c001ae9e:	bf 04 00 00 00       	mov    edi,0x4
c001aea3:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001aeaa:	50                   	push   eax
c001aeab:	6a 0c                	push   0xc
c001aead:	53                   	push   ebx
c001aeae:	56                   	push   esi
c001aeaf:	e8 c0 fd ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	50                   	push   eax
c001aeb8:	6a 0c                	push   0xc
c001aeba:	53                   	push   ebx
c001aebb:	56                   	push   esi
c001aebc:	e8 73 fe ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001aec1:	83 c4 10             	add    esp,0x10
c001aec4:	4f                   	dec    edi
c001aec5:	75 f0                	jne    c001aeb7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001aec7:	5b                   	pop    ebx
c001aec8:	5e                   	pop    esi
c001aec9:	5f                   	pop    edi
c001aeca:	c3                   	ret    
c001aecb:	90                   	nop

c001aecc <IDE::open(int, int, void*)>:
c001aecc:	55                   	push   ebp
c001aecd:	57                   	push   edi
c001aece:	56                   	push   esi
c001aecf:	53                   	push   ebx
c001aed0:	83 ec 1c             	sub    esp,0x1c
c001aed3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aed7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001aede:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001aee7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001aef0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001aef7:	0f 85 da 02 00 00    	jne    c001b1d7 <IDE::open(int, int, void*)+0x30b>
c001aefd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001af03:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001af07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af0b:	83 e0 7f             	and    eax,0x7f
c001af0e:	83 f8 05             	cmp    eax,0x5
c001af11:	74 05                	je     c001af18 <IDE::open(int, int, void*)+0x4c>
c001af13:	83 f8 0f             	cmp    eax,0xf
c001af16:	75 32                	jne    c001af4a <IDE::open(int, int, void*)+0x7e>
c001af18:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001af1e:	83 e0 fc             	and    eax,0xfffffffc
c001af21:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af28:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001af2e:	83 e0 fc             	and    eax,0xfffffffc
c001af31:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af38:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af3e:	83 e0 fc             	and    eax,0xfffffffc
c001af41:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af48:	eb 14                	jmp    c001af5e <IDE::open(int, int, void*)+0x92>
c001af4a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001af54:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001af5e:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001af65:	bf f8 0c 00 00       	mov    edi,0xcf8
c001af6a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001af71:	89 fa                	mov    edx,edi
c001af73:	89 f1                	mov    ecx,esi
c001af75:	c1 e1 10             	shl    ecx,0x10
c001af78:	89 e8                	mov    eax,ebp
c001af7a:	c1 e0 0b             	shl    eax,0xb
c001af7d:	09 c1                	or     ecx,eax
c001af7f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af86:	c1 e0 08             	shl    eax,0x8
c001af89:	09 c1                	or     ecx,eax
c001af8b:	89 c8                	mov    eax,ecx
c001af8d:	0d 08 00 00 80       	or     eax,0x80000008
c001af92:	ef                   	out    dx,eax
c001af93:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af98:	ed                   	in     eax,dx
c001af99:	c1 e8 10             	shr    eax,0x10
c001af9c:	3d ff ff 00 00       	cmp    eax,0xffff
c001afa1:	0f 84 f9 00 00 00    	je     c001b0a0 <IDE::open(int, int, void*)+0x1d4>
c001afa7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001afad:	89 fa                	mov    edx,edi
c001afaf:	89 c8                	mov    eax,ecx
c001afb1:	ef                   	out    dx,eax
c001afb2:	b0 fe                	mov    al,0xfe
c001afb4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afb9:	ee                   	out    dx,al
c001afba:	89 c8                	mov    eax,ecx
c001afbc:	89 fa                	mov    edx,edi
c001afbe:	ef                   	out    dx,eax
c001afbf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afc4:	ed                   	in     eax,dx
c001afc5:	3c fe                	cmp    al,0xfe
c001afc7:	0f 85 a4 00 00 00    	jne    c001b071 <IDE::open(int, int, void*)+0x1a5>
c001afcd:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001afd3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001afda:	74 30                	je     c001b00c <IDE::open(int, int, void*)+0x140>
c001afdc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001afe2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001afe6:	83 ec 0c             	sub    esp,0xc
c001afe9:	40                   	inc    eax
c001afea:	0f b6 c0             	movzx  eax,al
c001afed:	50                   	push   eax
c001afee:	55                   	push   ebp
c001afef:	56                   	push   esi
c001aff0:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001aff6:	51                   	push   ecx
c001aff7:	e8 ac 3d ff ff       	call   c000eda8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001affc:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b001:	83 c4 1c             	add    esp,0x1c
c001b004:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b00a:	eb 0a                	jmp    c001b016 <IDE::open(int, int, void*)+0x14a>
c001b00c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b016:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b01d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001b022:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b029:	89 ea                	mov    edx,ebp
c001b02b:	c1 e1 10             	shl    ecx,0x10
c001b02e:	c1 e0 08             	shl    eax,0x8
c001b031:	09 c1                	or     ecx,eax
c001b033:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b03a:	c1 e0 0b             	shl    eax,0xb
c001b03d:	09 c1                	or     ecx,eax
c001b03f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b045:	89 c8                	mov    eax,ecx
c001b047:	ef                   	out    dx,eax
c001b048:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001b04e:	be fc 0c 00 00       	mov    esi,0xcfc
c001b053:	89 f2                	mov    edx,esi
c001b055:	89 f8                	mov    eax,edi
c001b057:	ee                   	out    dx,al
c001b058:	89 c8                	mov    eax,ecx
c001b05a:	89 ea                	mov    edx,ebp
c001b05c:	ef                   	out    dx,eax
c001b05d:	89 f2                	mov    edx,esi
c001b05f:	ed                   	in     eax,dx
c001b060:	0f b6 c0             	movzx  eax,al
c001b063:	39 f8                	cmp    eax,edi
c001b065:	74 49                	je     c001b0b0 <IDE::open(int, int, void*)+0x1e4>
c001b067:	83 ec 0c             	sub    esp,0xc
c001b06a:	68 fc 1a 02 c0       	push   0xc0021afc
c001b06f:	eb 37                	jmp    c001b0a8 <IDE::open(int, int, void*)+0x1dc>
c001b071:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b07a:	75 1a                	jne    c001b096 <IDE::open(int, int, void*)+0x1ca>
c001b07c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b081:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b086:	74 05                	je     c001b08d <IDE::open(int, int, void*)+0x1c1>
c001b088:	83 c0 80             	add    eax,0xffffff80
c001b08b:	75 09                	jne    c001b096 <IDE::open(int, int, void*)+0x1ca>
c001b08d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b094:	eb 1a                	jmp    c001b0b0 <IDE::open(int, int, void*)+0x1e4>
c001b096:	83 ec 0c             	sub    esp,0xc
c001b099:	68 04 1b 02 c0       	push   0xc0021b04
c001b09e:	eb 08                	jmp    c001b0a8 <IDE::open(int, int, void*)+0x1dc>
c001b0a0:	83 ec 0c             	sub    esp,0xc
c001b0a3:	68 35 1b 02 c0       	push   0xc0021b35
c001b0a8:	e8 c8 57 ff ff       	call   c0010875 <KePanic(char const*)>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b0b7:	74 1a                	je     c001b0d3 <IDE::open(int, int, void*)+0x207>
c001b0b9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b0bf:	83 e0 fc             	and    eax,0xfffffffc
c001b0c2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b0c9:	83 c0 08             	add    eax,0x8
c001b0cc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b0d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b0d9:	89 c2                	mov    edx,eax
c001b0db:	83 e2 0f             	and    edx,0xf
c001b0de:	83 fa 08             	cmp    edx,0x8
c001b0e1:	75 0a                	jne    c001b0ed <IDE::open(int, int, void*)+0x221>
c001b0e3:	83 e8 02             	sub    eax,0x2
c001b0e6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b0ed:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b0f3:	89 c2                	mov    edx,eax
c001b0f5:	83 e2 0f             	and    edx,0xf
c001b0f8:	83 fa 08             	cmp    edx,0x8
c001b0fb:	75 0a                	jne    c001b107 <IDE::open(int, int, void*)+0x23b>
c001b0fd:	83 e8 02             	sub    eax,0x2
c001b100:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b107:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b10e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b115:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b118:	89 d0                	mov    eax,edx
c001b11a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b11e:	8d 7a 01             	lea    edi,[edx+0x1]
c001b121:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b125:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b129:	83 e1 3f             	and    ecx,0x3f
c001b12c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b130:	89 f9                	mov    ecx,edi
c001b132:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b139:	8d 78 02             	lea    edi,[eax+0x2]
c001b13c:	0f b6 c9             	movzx  ecx,cl
c001b13f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b142:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b146:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b14a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b14e:	83 e2 3f             	and    edx,0x3f
c001b151:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b155:	89 f9                	mov    ecx,edi
c001b157:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b15d:	8d 78 03             	lea    edi,[eax+0x3]
c001b160:	0f b6 d1             	movzx  edx,cl
c001b163:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b166:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b16a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b16e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b172:	83 e1 3f             	and    ecx,0x3f
c001b175:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b179:	89 f9                	mov    ecx,edi
c001b17b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b181:	8d 78 04             	lea    edi,[eax+0x4]
c001b184:	0f b6 c9             	movzx  ecx,cl
c001b187:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b18a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b18e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b192:	89 fa                	mov    edx,edi
c001b194:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b19a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b19e:	83 e2 3f             	and    edx,0x3f
c001b1a1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b1a5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b1ac:	66 85 f6             	test   si,si
c001b1af:	74 65                	je     c001b216 <IDE::open(int, int, void*)+0x34a>
c001b1b1:	89 f9                	mov    ecx,edi
c001b1b3:	83 c0 05             	add    eax,0x5
c001b1b6:	0f b6 d1             	movzx  edx,cl
c001b1b9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b1bc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b1c0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b1c4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b1ca:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b1ce:	83 e0 3f             	and    eax,0x3f
c001b1d1:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b1d5:	eb 3f                	jmp    c001b216 <IDE::open(int, int, void*)+0x34a>
c001b1d7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b1de:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b1e4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b1eb:	05 06 02 00 00       	add    eax,0x206
c001b1f0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b1f7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b1fe:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b205:	05 06 02 00 00       	add    eax,0x206
c001b20a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b211:	e9 bd fe ff ff       	jmp    c001b0d3 <IDE::open(int, int, void*)+0x207>
c001b216:	50                   	push   eax
c001b217:	50                   	push   eax
c001b218:	6a 00                	push   0x0
c001b21a:	53                   	push   ebx
c001b21b:	e8 2e fa ff ff       	call   c001ac4e <IDE::prepareInterrupt(unsigned char)>
c001b220:	5a                   	pop    edx
c001b221:	59                   	pop    ecx
c001b222:	6a 01                	push   0x1
c001b224:	53                   	push   ebx
c001b225:	e8 24 fa ff ff       	call   c001ac4e <IDE::prepareInterrupt(unsigned char)>
c001b22a:	83 c4 0c             	add    esp,0xc
c001b22d:	6a 00                	push   0x0
c001b22f:	6a 00                	push   0x0
c001b231:	53                   	push   ebx
c001b232:	e8 4b fc ff ff       	call   c001ae82 <IDE::enableIRQs(unsigned char, bool)>
c001b237:	83 c4 0c             	add    esp,0xc
c001b23a:	6a 00                	push   0x0
c001b23c:	6a 01                	push   0x1
c001b23e:	53                   	push   ebx
c001b23f:	e8 3e fc ff ff       	call   c001ae82 <IDE::enableIRQs(unsigned char, bool)>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b24e:	74 34                	je     c001b284 <IDE::open(int, int, void*)+0x3b8>
c001b250:	83 ec 0c             	sub    esp,0xc
c001b253:	53                   	push   ebx
c001b254:	6a 01                	push   0x1
c001b256:	68 4a ae 01 c0       	push   0xc001ae4a
c001b25b:	6a 0e                	push   0xe
c001b25d:	53                   	push   ebx
c001b25e:	e8 55 0b ff ff       	call   c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b263:	83 c4 14             	add    esp,0x14
c001b266:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b26c:	53                   	push   ebx
c001b26d:	6a 01                	push   0x1
c001b26f:	68 66 ae 01 c0       	push   0xc001ae66
c001b274:	6a 0f                	push   0xf
c001b276:	53                   	push   ebx
c001b277:	e8 3c 0b ff ff       	call   c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b27c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b282:	eb 38                	jmp    c001b2bc <IDE::open(int, int, void*)+0x3f0>
c001b284:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	53                   	push   ebx
c001b292:	6a 00                	push   0x0
c001b294:	68 4a ae 01 c0       	push   0xc001ae4a
c001b299:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b29f:	53                   	push   ebx
c001b2a0:	e8 13 0b ff ff       	call   c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2a5:	83 c4 14             	add    esp,0x14
c001b2a8:	53                   	push   ebx
c001b2a9:	6a 00                	push   0x0
c001b2ab:	68 66 ae 01 c0       	push   0xc001ae66
c001b2b0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b2b6:	53                   	push   ebx
c001b2b7:	e8 fc 0a ff ff       	call   c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2be:	83 c4 20             	add    esp,0x20
c001b2c1:	83 ec 0c             	sub    esp,0xc
c001b2c4:	53                   	push   ebx
c001b2c5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b2c8:	83 c4 0c             	add    esp,0xc
c001b2cb:	6a 07                	push   0x7
c001b2cd:	6a 00                	push   0x0
c001b2cf:	53                   	push   ebx
c001b2d0:	e8 5f fa ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b2d5:	83 c4 0c             	add    esp,0xc
c001b2d8:	6a 07                	push   0x7
c001b2da:	6a 01                	push   0x1
c001b2dc:	53                   	push   ebx
c001b2dd:	e8 52 fa ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b2e2:	83 c4 0c             	add    esp,0xc
c001b2e5:	6a 01                	push   0x1
c001b2e7:	6a 00                	push   0x0
c001b2e9:	53                   	push   ebx
c001b2ea:	e8 93 fb ff ff       	call   c001ae82 <IDE::enableIRQs(unsigned char, bool)>
c001b2ef:	83 c4 0c             	add    esp,0xc
c001b2f2:	6a 01                	push   0x1
c001b2f4:	6a 01                	push   0x1
c001b2f6:	53                   	push   ebx
c001b2f7:	e8 86 fb ff ff       	call   c001ae82 <IDE::enableIRQs(unsigned char, bool)>
c001b2fc:	83 c4 2c             	add    esp,0x2c
c001b2ff:	31 c0                	xor    eax,eax
c001b301:	5b                   	pop    ebx
c001b302:	5e                   	pop    esi
c001b303:	5f                   	pop    edi
c001b304:	5d                   	pop    ebp
c001b305:	c3                   	ret    

c001b306 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b306:	55                   	push   ebp
c001b307:	57                   	push   edi
c001b308:	56                   	push   esi
c001b309:	53                   	push   ebx
c001b30a:	83 ec 1c             	sub    esp,0x1c
c001b30d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b311:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b315:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b319:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b31d:	8d 42 f8             	lea    eax,[edx-0x8]
c001b320:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b324:	3c 03                	cmp    al,0x3
c001b326:	77 5a                	ja     c001b382 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b328:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b32c:	0f b6 db             	movzx  ebx,bl
c001b32f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b333:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b336:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b33b:	0c 80                	or     al,0x80
c001b33d:	50                   	push   eax
c001b33e:	6a 0c                	push   0xc
c001b340:	53                   	push   ebx
c001b341:	56                   	push   esi
c001b342:	e8 2d f9 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b347:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b34b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b350:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b354:	0f b6 d2             	movzx  edx,dl
c001b357:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b35b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b35d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b362:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b366:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b36a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b372:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b376:	83 c4 2c             	add    esp,0x2c
c001b379:	5b                   	pop    ebx
c001b37a:	5e                   	pop    esi
c001b37b:	5f                   	pop    edi
c001b37c:	5d                   	pop    ebp
c001b37d:	e9 f2 f8 ff ff       	jmp    c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b382:	0f b6 c2             	movzx  eax,dl
c001b385:	83 f8 07             	cmp    eax,0x7
c001b388:	77 12                	ja     c001b39c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b38a:	0f b6 db             	movzx  ebx,bl
c001b38d:	0f b6 c2             	movzx  eax,dl
c001b390:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b398:	01 c2                	add    edx,eax
c001b39a:	eb 2f                	jmp    c001b3cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b39c:	83 f8 0d             	cmp    eax,0xd
c001b39f:	77 13                	ja     c001b3b4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b3a1:	0f b6 db             	movzx  ebx,bl
c001b3a4:	0f b6 d2             	movzx  edx,dl
c001b3a7:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b3ae:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b3b2:	eb 17                	jmp    c001b3cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3b4:	83 f8 15             	cmp    eax,0x15
c001b3b7:	77 14                	ja     c001b3cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b3b9:	0f b6 db             	movzx  ebx,bl
c001b3bc:	0f b6 d2             	movzx  edx,dl
c001b3bf:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b3c7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b3cb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b3cd:	83 c4 1c             	add    esp,0x1c
c001b3d0:	5b                   	pop    ebx
c001b3d1:	5e                   	pop    esi
c001b3d2:	5f                   	pop    edi
c001b3d3:	5d                   	pop    ebp
c001b3d4:	c3                   	ret    
c001b3d5:	90                   	nop

c001b3d6 <IDE::detect()>:
c001b3d6:	55                   	push   ebp
c001b3d7:	57                   	push   edi
c001b3d8:	56                   	push   esi
c001b3d9:	53                   	push   ebx
c001b3da:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b3e0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b3e7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b3ee:	0f 85 9e 02 00 00    	jne    c001b692 <IDE::detect()+0x2bc>
c001b3f4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b3fb:	31 f6                	xor    esi,esi
c001b3fd:	31 ff                	xor    edi,edi
c001b3ff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b407:	89 f8                	mov    eax,edi
c001b409:	c1 e0 06             	shl    eax,0x6
c001b40c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b414:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b418:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b420:	c1 e0 04             	shl    eax,0x4
c001b423:	83 c8 a0             	or     eax,0xffffffa0
c001b426:	0f b6 c0             	movzx  eax,al
c001b429:	50                   	push   eax
c001b42a:	6a 06                	push   0x6
c001b42c:	56                   	push   esi
c001b42d:	53                   	push   ebx
c001b42e:	e8 41 f8 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b433:	83 c4 0c             	add    esp,0xc
c001b436:	6a 0c                	push   0xc
c001b438:	56                   	push   esi
c001b439:	53                   	push   ebx
c001b43a:	e8 f5 f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b43f:	83 c4 0c             	add    esp,0xc
c001b442:	6a 0c                	push   0xc
c001b444:	56                   	push   esi
c001b445:	53                   	push   ebx
c001b446:	e8 e9 f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b44b:	83 c4 0c             	add    esp,0xc
c001b44e:	6a 0c                	push   0xc
c001b450:	56                   	push   esi
c001b451:	53                   	push   ebx
c001b452:	e8 dd f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b457:	83 c4 0c             	add    esp,0xc
c001b45a:	6a 0c                	push   0xc
c001b45c:	56                   	push   esi
c001b45d:	53                   	push   ebx
c001b45e:	e8 d1 f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b463:	68 ec 00 00 00       	push   0xec
c001b468:	6a 07                	push   0x7
c001b46a:	56                   	push   esi
c001b46b:	53                   	push   ebx
c001b46c:	e8 03 f8 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b471:	83 c4 1c             	add    esp,0x1c
c001b474:	6a 0c                	push   0xc
c001b476:	56                   	push   esi
c001b477:	53                   	push   ebx
c001b478:	e8 b7 f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b47d:	83 c4 0c             	add    esp,0xc
c001b480:	6a 0c                	push   0xc
c001b482:	56                   	push   esi
c001b483:	53                   	push   ebx
c001b484:	e8 ab f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b489:	83 c4 0c             	add    esp,0xc
c001b48c:	6a 0c                	push   0xc
c001b48e:	56                   	push   esi
c001b48f:	53                   	push   ebx
c001b490:	e8 9f f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b495:	83 c4 0c             	add    esp,0xc
c001b498:	6a 0c                	push   0xc
c001b49a:	56                   	push   esi
c001b49b:	53                   	push   ebx
c001b49c:	e8 93 f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b4a1:	83 c4 0c             	add    esp,0xc
c001b4a4:	6a 0c                	push   0xc
c001b4a6:	56                   	push   esi
c001b4a7:	53                   	push   ebx
c001b4a8:	e8 87 f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b4ad:	83 c4 10             	add    esp,0x10
c001b4b0:	84 c0                	test   al,al
c001b4b2:	0f 84 61 01 00 00    	je     c001b619 <IDE::detect()+0x243>
c001b4b8:	31 ed                	xor    ebp,ebp
c001b4ba:	50                   	push   eax
c001b4bb:	6a 0c                	push   0xc
c001b4bd:	56                   	push   esi
c001b4be:	53                   	push   ebx
c001b4bf:	e8 70 f8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b4c4:	83 c4 10             	add    esp,0x10
c001b4c7:	a8 01                	test   al,0x1
c001b4c9:	0f 85 6b 01 00 00    	jne    c001b63a <IDE::detect()+0x264>
c001b4cf:	a8 80                	test   al,0x80
c001b4d1:	75 04                	jne    c001b4d7 <IDE::detect()+0x101>
c001b4d3:	a8 08                	test   al,0x8
c001b4d5:	75 23                	jne    c001b4fa <IDE::detect()+0x124>
c001b4d7:	45                   	inc    ebp
c001b4d8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b4de:	7e da                	jle    c001b4ba <IDE::detect()+0xe4>
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	6a 32                	push   0x32
c001b4e5:	e8 a2 9e ff ff       	call   c001538c <milliTenthSleep(unsigned int)>
c001b4ea:	83 c4 10             	add    esp,0x10
c001b4ed:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b4f3:	75 c5                	jne    c001b4ba <IDE::detect()+0xe4>
c001b4f5:	e9 40 01 00 00       	jmp    c001b63a <IDE::detect()+0x264>
c001b4fa:	31 c9                	xor    ecx,ecx
c001b4fc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b500:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b504:	83 ec 0c             	sub    esp,0xc
c001b507:	68 80 00 00 00       	push   0x80
c001b50c:	55                   	push   ebp
c001b50d:	6a 00                	push   0x0
c001b50f:	56                   	push   esi
c001b510:	53                   	push   ebx
c001b511:	e8 f0 fd ff ff       	call   c001b306 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b516:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b51b:	89 f8                	mov    eax,edi
c001b51d:	c1 e0 06             	shl    eax,0x6
c001b520:	01 d8                	add    eax,ebx
c001b522:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b529:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b530:	89 d1                	mov    ecx,edx
c001b532:	89 f2                	mov    edx,esi
c001b534:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b53a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b53e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b544:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b548:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b54f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b557:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b55e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b566:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b56c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b573:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b579:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b57d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b581:	83 c4 20             	add    esp,0x20
c001b584:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b587:	83 c5 02             	add    ebp,0x2
c001b58a:	83 c0 02             	add    eax,0x2
c001b58d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b593:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b596:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b59c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b5a0:	75 e2                	jne    c001b584 <IDE::detect()+0x1ae>
c001b5a2:	89 f8                	mov    eax,edi
c001b5a4:	c1 e0 06             	shl    eax,0x6
c001b5a7:	01 d8                	add    eax,ebx
c001b5a9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b5b0:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b5b7:	c1 ea 09             	shr    edx,0x9
c001b5ba:	83 e2 01             	and    edx,0x1
c001b5bd:	80 e1 01             	and    cl,0x1
c001b5c0:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b5c6:	75 22                	jne    c001b5ea <IDE::detect()+0x214>
c001b5c8:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b5cf:	74 47                	je     c001b618 <IDE::detect()+0x242>
c001b5d1:	83 ec 0c             	sub    esp,0xc
c001b5d4:	68 7c 01 00 00       	push   0x17c
c001b5d9:	e8 ed c4 fe ff       	call   c0007acb <malloc>
c001b5de:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5e1:	89 c5                	mov    ebp,eax
c001b5e3:	e8 16 05 00 00       	call   c001bafe <ATA::ATA()>
c001b5e8:	eb 17                	jmp    c001b601 <IDE::detect()+0x22b>
c001b5ea:	83 ec 0c             	sub    esp,0xc
c001b5ed:	68 84 01 00 00       	push   0x184
c001b5f2:	e8 d4 c4 fe ff       	call   c0007acb <malloc>
c001b5f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5fa:	89 c5                	mov    ebp,eax
c001b5fc:	e8 6f 0e 00 00       	call   c001c470 <ATAPI::ATAPI()>
c001b601:	5a                   	pop    edx
c001b602:	59                   	pop    ecx
c001b603:	55                   	push   ebp
c001b604:	53                   	push   ebx
c001b605:	e8 02 08 ff ff       	call   c000be0c <Device::addChild(Device*)>
c001b60a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b60d:	53                   	push   ebx
c001b60e:	57                   	push   edi
c001b60f:	6a 00                	push   0x0
c001b611:	55                   	push   ebp
c001b612:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b615:	83 c4 20             	add    esp,0x20
c001b618:	47                   	inc    edi
c001b619:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b61e:	74 0d                	je     c001b62d <IDE::detect()+0x257>
c001b620:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b628:	e9 da fd ff ff       	jmp    c001b407 <IDE::detect()+0x31>
c001b62d:	4e                   	dec    esi
c001b62e:	74 62                	je     c001b692 <IDE::detect()+0x2bc>
c001b630:	be 01 00 00 00       	mov    esi,0x1
c001b635:	e9 c5 fd ff ff       	jmp    c001b3ff <IDE::detect()+0x29>
c001b63a:	50                   	push   eax
c001b63b:	6a 04                	push   0x4
c001b63d:	56                   	push   esi
c001b63e:	53                   	push   ebx
c001b63f:	e8 f0 f6 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b644:	83 c4 0c             	add    esp,0xc
c001b647:	6a 05                	push   0x5
c001b649:	56                   	push   esi
c001b64a:	53                   	push   ebx
c001b64b:	89 c5                	mov    ebp,eax
c001b64d:	e8 e2 f6 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b652:	89 e9                	mov    ecx,ebp
c001b654:	83 c4 10             	add    esp,0x10
c001b657:	0f b6 e9             	movzx  ebp,cl
c001b65a:	83 fd 14             	cmp    ebp,0x14
c001b65d:	74 2d                	je     c001b68c <IDE::detect()+0x2b6>
c001b65f:	83 fd 69             	cmp    ebp,0x69
c001b662:	75 b5                	jne    c001b619 <IDE::detect()+0x243>
c001b664:	3c 96                	cmp    al,0x96
c001b666:	75 b1                	jne    c001b619 <IDE::detect()+0x243>
c001b668:	68 a1 00 00 00       	push   0xa1
c001b66d:	6a 07                	push   0x7
c001b66f:	56                   	push   esi
c001b670:	53                   	push   ebx
c001b671:	e8 fe f5 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b676:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b67d:	e8 0a 9d ff ff       	call   c001538c <milliTenthSleep(unsigned int)>
c001b682:	83 c4 10             	add    esp,0x10
c001b685:	b1 01                	mov    cl,0x1
c001b687:	e9 70 fe ff ff       	jmp    c001b4fc <IDE::detect()+0x126>
c001b68c:	3c eb                	cmp    al,0xeb
c001b68e:	75 cf                	jne    c001b65f <IDE::detect()+0x289>
c001b690:	eb d6                	jmp    c001b668 <IDE::detect()+0x292>
c001b692:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b698:	5b                   	pop    ebx
c001b699:	5e                   	pop    esi
c001b69a:	5f                   	pop    edi
c001b69b:	5d                   	pop    ebp
c001b69c:	c3                   	ret    
c001b69d:	90                   	nop

c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b69e:	55                   	push   ebp
c001b69f:	57                   	push   edi
c001b6a0:	56                   	push   esi
c001b6a1:	53                   	push   ebx
c001b6a2:	83 ec 1c             	sub    esp,0x1c
c001b6a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b6a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b6ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b6b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b6b9:	88 c3                	mov    bl,al
c001b6bb:	25 ff 00 00 00       	and    eax,0xff
c001b6c0:	0f 84 88 00 00 00    	je     c001b74e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6c6:	83 ec 0c             	sub    esp,0xc
c001b6c9:	89 c7                	mov    edi,eax
c001b6cb:	68 5f 1b 02 c0       	push   0xc0021b5f
c001b6d0:	e8 d5 f2 fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001b6d5:	83 c4 10             	add    esp,0x10
c001b6d8:	83 ff 01             	cmp    edi,0x1
c001b6db:	74 6b                	je     c001b748 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b6dd:	83 ff 02             	cmp    edi,0x2
c001b6e0:	75 58                	jne    c001b73a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b6e2:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b6e7:	50                   	push   eax
c001b6e8:	6a 01                	push   0x1
c001b6ea:	01 ff                	add    edi,edi
c001b6ec:	09 fe                	or     esi,edi
c001b6ee:	89 f0                	mov    eax,esi
c001b6f0:	0f b6 f0             	movzx  esi,al
c001b6f3:	c1 e6 06             	shl    esi,0x6
c001b6f6:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b6fe:	50                   	push   eax
c001b6ff:	55                   	push   ebp
c001b700:	e8 2f f6 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	a8 01                	test   al,0x1
c001b70a:	74 02                	je     c001b70e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b70c:	b3 07                	mov    bl,0x7
c001b70e:	a8 02                	test   al,0x2
c001b710:	74 02                	je     c001b714 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b712:	b3 03                	mov    bl,0x3
c001b714:	a8 04                	test   al,0x4
c001b716:	74 02                	je     c001b71a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b718:	b3 14                	mov    bl,0x14
c001b71a:	a8 08                	test   al,0x8
c001b71c:	74 02                	je     c001b720 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b71e:	b3 03                	mov    bl,0x3
c001b720:	a8 10                	test   al,0x10
c001b722:	74 02                	je     c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b724:	b3 15                	mov    bl,0x15
c001b726:	a8 20                	test   al,0x20
c001b728:	74 02                	je     c001b72c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b72a:	b3 03                	mov    bl,0x3
c001b72c:	a8 40                	test   al,0x40
c001b72e:	74 02                	je     c001b732 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b730:	b3 16                	mov    bl,0x16
c001b732:	a8 80                	test   al,0x80
c001b734:	74 18                	je     c001b74e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b736:	b3 0d                	mov    bl,0xd
c001b738:	eb 14                	jmp    c001b74e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b73a:	83 ff 03             	cmp    edi,0x3
c001b73d:	74 0d                	je     c001b74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b73f:	83 ff 04             	cmp    edi,0x4
c001b742:	75 0a                	jne    c001b74e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b744:	b3 08                	mov    bl,0x8
c001b746:	eb 06                	jmp    c001b74e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b748:	b3 13                	mov    bl,0x13
c001b74a:	eb 02                	jmp    c001b74e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b74c:	b3 17                	mov    bl,0x17
c001b74e:	83 c4 1c             	add    esp,0x1c
c001b751:	88 d8                	mov    al,bl
c001b753:	5b                   	pop    ebx
c001b754:	5e                   	pop    esi
c001b755:	5f                   	pop    edi
c001b756:	5d                   	pop    ebp
c001b757:	c3                   	ret    

c001b758 <IDE::polling(unsigned char, unsigned int)>:
c001b758:	57                   	push   edi
c001b759:	56                   	push   esi
c001b75a:	53                   	push   ebx
c001b75b:	bb 04 00 00 00       	mov    ebx,0x4
c001b760:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b764:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b769:	52                   	push   edx
c001b76a:	6a 0c                	push   0xc
c001b76c:	56                   	push   esi
c001b76d:	57                   	push   edi
c001b76e:	e8 c1 f5 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	4b                   	dec    ebx
c001b777:	75 f0                	jne    c001b769 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b779:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b77e:	50                   	push   eax
c001b77f:	6a 0c                	push   0xc
c001b781:	56                   	push   esi
c001b782:	57                   	push   edi
c001b783:	e8 ac f5 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001b788:	83 c4 10             	add    esp,0x10
c001b78b:	a8 01                	test   al,0x1
c001b78d:	75 17                	jne    c001b7a6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b78f:	a8 20                	test   al,0x20
c001b791:	75 0f                	jne    c001b7a2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b793:	4b                   	dec    ebx
c001b794:	74 10                	je     c001b7a6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b796:	a8 80                	test   al,0x80
c001b798:	75 e4                	jne    c001b77e <IDE::polling(unsigned char, unsigned int)+0x26>
c001b79a:	a8 08                	test   al,0x8
c001b79c:	74 e0                	je     c001b77e <IDE::polling(unsigned char, unsigned int)+0x26>
c001b79e:	31 c0                	xor    eax,eax
c001b7a0:	eb 06                	jmp    c001b7a8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7a2:	b0 01                	mov    al,0x1
c001b7a4:	eb 02                	jmp    c001b7a8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7a6:	b0 02                	mov    al,0x2
c001b7a8:	5b                   	pop    ebx
c001b7a9:	5e                   	pop    esi
c001b7aa:	5f                   	pop    edi
c001b7ab:	c3                   	ret    

c001b7ac <SATABus::close(int, int, void*)>:
c001b7ac:	31 c0                	xor    eax,eax
c001b7ae:	c3                   	ret    
c001b7af:	90                   	nop

c001b7b0 <SATABus::detect()>:
c001b7b0:	c3                   	ret    
c001b7b1:	90                   	nop

c001b7b2 <SATABus::SATABus()>:
c001b7b2:	83 ec 0c             	sub    esp,0xc
c001b7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b9:	83 ec 08             	sub    esp,0x8
c001b7bc:	68 98 1b 02 c0       	push   0xc0021b98
c001b7c1:	50                   	push   eax
c001b7c2:	e8 89 09 ff ff       	call   c000c150 <HardDiskController::HardDiskController(char const*)>
c001b7c7:	83 c4 10             	add    esp,0x10
c001b7ca:	ba c4 1b 02 c0       	mov    edx,0xc0021bc4
c001b7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d3:	89 10                	mov    DWORD PTR [eax],edx
c001b7d5:	83 ec 0c             	sub    esp,0xc
c001b7d8:	6a 50                	push   0x50
c001b7da:	e8 c6 c6 fe ff       	call   c0007ea5 <Phys::allocateContiguousPages(int)>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	89 c2                	mov    edx,eax
c001b7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b7ee:	83 ec 0c             	sub    esp,0xc
c001b7f1:	6a 50                	push   0x50
c001b7f3:	e8 0d de fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001b7f8:	83 c4 10             	add    esp,0x10
c001b7fb:	89 c2                	mov    edx,eax
c001b7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b801:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b807:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b80c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b810:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b816:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b81a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b820:	83 ec 0c             	sub    esp,0xc
c001b823:	6a 03                	push   0x3
c001b825:	6a 50                	push   0x50
c001b827:	51                   	push   ecx
c001b828:	52                   	push   edx
c001b829:	50                   	push   eax
c001b82a:	e8 cf e7 fe ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b82f:	83 c4 20             	add    esp,0x20
c001b832:	90                   	nop
c001b833:	83 c4 0c             	add    esp,0xc
c001b836:	c3                   	ret    
c001b837:	90                   	nop

c001b838 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b83c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b83f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b842:	09 c2                	or     edx,eax
c001b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b848:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b84e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b850:	31 c0                	xor    eax,eax
c001b852:	c1 e9 08             	shr    ecx,0x8
c001b855:	83 e1 0f             	and    ecx,0xf
c001b858:	39 c8                	cmp    eax,ecx
c001b85a:	74 0a                	je     c001b866 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b85c:	f6 c2 01             	test   dl,0x1
c001b85f:	74 08                	je     c001b869 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b861:	d1 ea                	shr    edx,1
c001b863:	40                   	inc    eax
c001b864:	eb f2                	jmp    c001b858 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b866:	83 c8 ff             	or     eax,0xffffffff
c001b869:	c3                   	ret    

c001b86a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b86a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b86e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b871:	89 c2                	mov    edx,eax
c001b873:	c1 ea 08             	shr    edx,0x8
c001b876:	83 e2 0f             	and    edx,0xf
c001b879:	4a                   	dec    edx
c001b87a:	75 32                	jne    c001b8ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b87c:	83 e0 0f             	and    eax,0xf
c001b87f:	83 f8 03             	cmp    eax,0x3
c001b882:	75 2a                	jne    c001b8ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b884:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b887:	b8 02 00 00 00       	mov    eax,0x2
c001b88c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b892:	74 1c                	je     c001b8b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b894:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b89a:	b8 04 00 00 00       	mov    eax,0x4
c001b89f:	74 0f                	je     c001b8b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8a1:	31 c0                	xor    eax,eax
c001b8a3:	83 fa 03             	cmp    edx,0x3
c001b8a6:	0f 94 c0             	sete   al
c001b8a9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b8ad:	c3                   	ret    
c001b8ae:	31 c0                	xor    eax,eax
c001b8b0:	c3                   	ret    
c001b8b1:	90                   	nop

c001b8b2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8b9:	0f ba e2 0f          	bt     edx,0xf
c001b8bd:	72 f7                	jb     c001b8b6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b8bf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8c2:	83 ca 10             	or     edx,0x10
c001b8c5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8c8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8cb:	83 ca 01             	or     edx,0x1
c001b8ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8d1:	c3                   	ret    

c001b8d2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8d9:	83 e2 fe             	and    edx,0xfffffffe
c001b8dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8df:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8e2:	83 e2 ef             	and    edx,0xffffffef
c001b8e5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8e8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8eb:	0f ba e2 0e          	bt     edx,0xe
c001b8ef:	72 f7                	jb     c001b8e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8f1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8f4:	0f ba e2 0f          	bt     edx,0xf
c001b8f8:	72 ee                	jb     c001b8e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8fa:	c3                   	ret    
c001b8fb:	90                   	nop

c001b8fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b8fc:	55                   	push   ebp
c001b8fd:	57                   	push   edi
c001b8fe:	56                   	push   esi
c001b8ff:	53                   	push   ebx
c001b900:	83 ec 1c             	sub    esp,0x1c
c001b903:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b907:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b90b:	53                   	push   ebx
c001b90c:	57                   	push   edi
c001b90d:	e8 c0 ff ff ff       	call   c001b8d2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b912:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b916:	83 ec 0c             	sub    esp,0xc
c001b919:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b91f:	c1 e5 0a             	shl    ebp,0xa
c001b922:	01 e8                	add    eax,ebp
c001b924:	89 03                	mov    DWORD PTR [ebx],eax
c001b926:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b928:	68 00 04 00 00       	push   0x400
c001b92d:	6a 00                	push   0x0
c001b92f:	50                   	push   eax
c001b930:	e8 bb 4b fe ff       	call   c00004f0 <memset>
c001b935:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b93b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b93f:	83 c4 1c             	add    esp,0x1c
c001b942:	01 e8                	add    eax,ebp
c001b944:	89 03                	mov    DWORD PTR [ebx],eax
c001b946:	c1 e6 08             	shl    esi,0x8
c001b949:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b950:	81 c6 00 80 00 00    	add    esi,0x8000
c001b956:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b95c:	01 f0                	add    eax,esi
c001b95e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b961:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b964:	68 00 01 00 00       	push   0x100
c001b969:	6a 00                	push   0x0
c001b96b:	50                   	push   eax
c001b96c:	e8 7f 4b fe ff       	call   c00004f0 <memset>
c001b971:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b977:	31 d2                	xor    edx,edx
c001b979:	01 f0                	add    eax,esi
c001b97b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b97e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b985:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b98b:	01 ee                	add    esi,ebp
c001b98d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b991:	83 c4 10             	add    esp,0x10
c001b994:	c1 e5 0d             	shl    ebp,0xd
c001b997:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b99d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b9a3:	83 c6 20             	add    esi,0x20
c001b9a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9aa:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b9b0:	01 e8                	add    eax,ebp
c001b9b2:	01 d0                	add    eax,edx
c001b9b4:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b9b7:	52                   	push   edx
c001b9b8:	68 00 01 00 00       	push   0x100
c001b9bd:	6a 00                	push   0x0
c001b9bf:	50                   	push   eax
c001b9c0:	e8 2b 4b fe ff       	call   c00004f0 <memset>
c001b9c5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b9cb:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b9d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9d6:	83 c4 10             	add    esp,0x10
c001b9d9:	01 e8                	add    eax,ebp
c001b9db:	01 d0                	add    eax,edx
c001b9dd:	81 c2 00 01 00 00    	add    edx,0x100
c001b9e3:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b9e6:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b9ec:	75 af                	jne    c001b99d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b9ee:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9f5:	50                   	push   eax
c001b9f6:	50                   	push   eax
c001b9f7:	53                   	push   ebx
c001b9f8:	57                   	push   edi
c001b9f9:	e8 b4 fe ff ff       	call   c001b8b2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b9fe:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba05:	83 c4 2c             	add    esp,0x2c
c001ba08:	5b                   	pop    ebx
c001ba09:	5e                   	pop    esi
c001ba0a:	5f                   	pop    edi
c001ba0b:	5d                   	pop    ebp
c001ba0c:	c3                   	ret    
c001ba0d:	90                   	nop

c001ba0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ba0e:	55                   	push   ebp
c001ba0f:	57                   	push   edi
c001ba10:	56                   	push   esi
c001ba11:	53                   	push   ebx
c001ba12:	31 db                	xor    ebx,ebx
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba1b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ba1f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ba22:	f7 c7 01 00 00 00    	test   edi,0x1
c001ba28:	74 7a                	je     c001baa4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba2a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba2e:	89 d8                	mov    eax,ebx
c001ba30:	c1 e0 07             	shl    eax,0x7
c001ba33:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ba3a:	55                   	push   ebp
c001ba3b:	56                   	push   esi
c001ba3c:	e8 29 fe ff ff       	call   c001b86a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba41:	5a                   	pop    edx
c001ba42:	59                   	pop    ecx
c001ba43:	83 f8 01             	cmp    eax,0x1
c001ba46:	75 21                	jne    c001ba69 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba48:	50                   	push   eax
c001ba49:	53                   	push   ebx
c001ba4a:	55                   	push   ebp
c001ba4b:	56                   	push   esi
c001ba4c:	e8 ab fe ff ff       	call   c001b8fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba51:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ba58:	e8 6e c0 fe ff       	call   c0007acb <malloc>
c001ba5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba60:	89 c5                	mov    ebp,eax
c001ba62:	e8 c1 10 00 00       	call   c001cb28 <SATA::SATA()>
c001ba67:	eb 24                	jmp    c001ba8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ba69:	83 f8 04             	cmp    eax,0x4
c001ba6c:	75 36                	jne    c001baa4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba6e:	51                   	push   ecx
c001ba6f:	53                   	push   ebx
c001ba70:	55                   	push   ebp
c001ba71:	56                   	push   esi
c001ba72:	e8 85 fe ff ff       	call   c001b8fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba77:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba7e:	e8 48 c0 fe ff       	call   c0007acb <malloc>
c001ba83:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba86:	89 c5                	mov    ebp,eax
c001ba88:	e8 f5 17 00 00       	call   c001d282 <SATAPI::SATAPI()>
c001ba8d:	58                   	pop    eax
c001ba8e:	5a                   	pop    edx
c001ba8f:	55                   	push   ebp
c001ba90:	56                   	push   esi
c001ba91:	e8 76 03 ff ff       	call   c000be0c <Device::addChild(Device*)>
c001ba96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba99:	56                   	push   esi
c001ba9a:	6a 00                	push   0x0
c001ba9c:	53                   	push   ebx
c001ba9d:	55                   	push   ebp
c001ba9e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baa1:	83 c4 20             	add    esp,0x20
c001baa4:	d1 ef                	shr    edi,1
c001baa6:	43                   	inc    ebx
c001baa7:	83 fb 20             	cmp    ebx,0x20
c001baaa:	0f 85 72 ff ff ff    	jne    c001ba22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bab0:	83 c4 0c             	add    esp,0xc
c001bab3:	5b                   	pop    ebx
c001bab4:	5e                   	pop    esi
c001bab5:	5f                   	pop    edi
c001bab6:	5d                   	pop    ebp
c001bab7:	c3                   	ret    

c001bab8 <SATABus::open(int, int, void*)>:
c001bab8:	83 ec 14             	sub    esp,0x14
c001babb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001babf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bac5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bacb:	52                   	push   edx
c001bacc:	50                   	push   eax
c001bacd:	e8 3c ff ff ff       	call   c001ba0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bad2:	31 c0                	xor    eax,eax
c001bad4:	83 c4 1c             	add    esp,0x1c
c001bad7:	c3                   	ret    

c001bad8 <ATA::close(int, int, void*)>:
c001bad8:	83 ec 0c             	sub    esp,0xc
c001badb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bae5:	85 c0                	test   eax,eax
c001bae7:	74 0c                	je     c001baf5 <ATA::close(int, int, void*)+0x1d>
c001bae9:	8b 10                	mov    edx,DWORD PTR [eax]
c001baeb:	83 ec 0c             	sub    esp,0xc
c001baee:	50                   	push   eax
c001baef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	31 c0                	xor    eax,eax
c001baf7:	83 c4 0c             	add    esp,0xc
c001bafa:	c3                   	ret    
c001bafb:	90                   	nop

c001bafc <ATA::powerSaving(PowerSavingLevel)>:
c001bafc:	c3                   	ret    
c001bafd:	90                   	nop

c001bafe <ATA::ATA()>:
c001bafe:	83 ec 0c             	sub    esp,0xc
c001bb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb05:	83 ec 04             	sub    esp,0x4
c001bb08:	68 00 02 00 00       	push   0x200
c001bb0d:	68 91 1c 02 c0       	push   0xc0021c91
c001bb12:	50                   	push   eax
c001bb13:	e8 c2 06 ff ff       	call   c000c1da <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	ba 04 1c 02 c0       	mov    edx,0xc0021c04
c001bb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb24:	89 10                	mov    DWORD PTR [eax],edx
c001bb26:	90                   	nop
c001bb27:	83 c4 0c             	add    esp,0xc
c001bb2a:	c3                   	ret    
c001bb2b:	90                   	nop

c001bb2c <ATA::flush(bool)>:
c001bb2c:	53                   	push   ebx
c001bb2d:	83 ec 08             	sub    esp,0x8
c001bb30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb39:	83 f8 01             	cmp    eax,0x1
c001bb3c:	19 c0                	sbb    eax,eax
c001bb3e:	83 e0 fd             	and    eax,0xfffffffd
c001bb41:	05 ea 00 00 00       	add    eax,0xea
c001bb46:	50                   	push   eax
c001bb47:	6a 07                	push   0x7
c001bb49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb50:	50                   	push   eax
c001bb51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb57:	e8 18 f1 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb5c:	83 c4 0c             	add    esp,0xc
c001bb5f:	6a 00                	push   0x0
c001bb61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb68:	50                   	push   eax
c001bb69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb6f:	e8 e4 fb ff ff       	call   c001b758 <IDE::polling(unsigned char, unsigned int)>
c001bb74:	83 c4 18             	add    esp,0x18
c001bb77:	5b                   	pop    ebx
c001bb78:	c3                   	ret    
c001bb79:	90                   	nop

c001bb7a <ATA::readyForCommand()>:
c001bb7a:	56                   	push   esi
c001bb7b:	53                   	push   ebx
c001bb7c:	53                   	push   ebx
c001bb7d:	31 db                	xor    ebx,ebx
c001bb7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb83:	51                   	push   ecx
c001bb84:	6a 0c                	push   0xc
c001bb86:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb8d:	50                   	push   eax
c001bb8e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb94:	e8 9b f1 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001bb99:	83 c4 10             	add    esp,0x10
c001bb9c:	a8 88                	test   al,0x88
c001bb9e:	74 1f                	je     c001bbbf <ATA::readyForCommand()+0x45>
c001bba0:	43                   	inc    ebx
c001bba1:	83 fb 63             	cmp    ebx,0x63
c001bba4:	7e dd                	jle    c001bb83 <ATA::readyForCommand()+0x9>
c001bba6:	83 ec 0c             	sub    esp,0xc
c001bba9:	6a 0a                	push   0xa
c001bbab:	e8 dc 97 ff ff       	call   c001538c <milliTenthSleep(unsigned int)>
c001bbb0:	83 c4 10             	add    esp,0x10
c001bbb3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bbb9:	75 c8                	jne    c001bb83 <ATA::readyForCommand()+0x9>
c001bbbb:	31 c0                	xor    eax,eax
c001bbbd:	eb 02                	jmp    c001bbc1 <ATA::readyForCommand()+0x47>
c001bbbf:	b0 01                	mov    al,0x1
c001bbc1:	5a                   	pop    edx
c001bbc2:	5b                   	pop    ebx
c001bbc3:	5e                   	pop    esi
c001bbc4:	c3                   	ret    
c001bbc5:	90                   	nop

c001bbc6 <ATA::access(unsigned long long, int, void*, bool)>:
c001bbc6:	55                   	push   ebp
c001bbc7:	57                   	push   edi
c001bbc8:	56                   	push   esi
c001bbc9:	53                   	push   ebx
c001bbca:	83 ec 2c             	sub    esp,0x2c
c001bbcd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bbd1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bbd5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bbd9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bbdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbe1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bbe5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bbe9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bbef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbf3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bbf9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbfd:	c1 e0 06             	shl    eax,0x6
c001bc00:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bc08:	74 5b                	je     c001bc65 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bc0a:	89 fa                	mov    edx,edi
c001bc0c:	89 f0                	mov    eax,esi
c001bc0e:	c1 ea 1c             	shr    edx,0x1c
c001bc11:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bc15:	89 d1                	mov    ecx,edx
c001bc17:	09 c1                	or     ecx,eax
c001bc19:	74 25                	je     c001bc40 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bc1b:	31 ed                	xor    ebp,ebp
c001bc1d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bc24:	89 fa                	mov    edx,edi
c001bc26:	89 f0                	mov    eax,esi
c001bc28:	0f ad d0             	shrd   eax,edx,cl
c001bc2b:	d3 ea                	shr    edx,cl
c001bc2d:	f6 c1 20             	test   cl,0x20
c001bc30:	74 02                	je     c001bc34 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bc32:	89 d0                	mov    eax,edx
c001bc34:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bc38:	45                   	inc    ebp
c001bc39:	83 fd 06             	cmp    ebp,0x6
c001bc3c:	75 df                	jne    c001bc1d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc3e:	eb 71                	jmp    c001bcb1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bc40:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc45:	89 f0                	mov    eax,esi
c001bc47:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc4e:	0f ac f8 10          	shrd   eax,edi,0x10
c001bc52:	bf 01 00 00 00       	mov    edi,0x1
c001bc57:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bc5b:	c1 ee 18             	shr    esi,0x18
c001bc5e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc63:	eb 53                	jmp    c001bcb8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc65:	6a 00                	push   0x0
c001bc67:	6a 3f                	push   0x3f
c001bc69:	57                   	push   edi
c001bc6a:	56                   	push   esi
c001bc6b:	e8 d0 2a 00 00       	call   c001e740 <__umoddi3>
c001bc70:	83 c4 10             	add    esp,0x10
c001bc73:	40                   	inc    eax
c001bc74:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc78:	6a 00                	push   0x0
c001bc7a:	68 f0 03 00 00       	push   0x3f0
c001bc7f:	57                   	push   edi
c001bc80:	56                   	push   esi
c001bc81:	e8 ba 29 00 00       	call   c001e640 <__udivdi3>
c001bc86:	83 c4 10             	add    esp,0x10
c001bc89:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc8e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc95:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc9a:	6a 00                	push   0x0
c001bc9c:	6a 3f                	push   0x3f
c001bc9e:	57                   	push   edi
c001bc9f:	31 ff                	xor    edi,edi
c001bca1:	56                   	push   esi
c001bca2:	e8 99 29 00 00       	call   c001e640 <__udivdi3>
c001bca7:	83 c4 10             	add    esp,0x10
c001bcaa:	83 e0 0f             	and    eax,0xf
c001bcad:	89 c6                	mov    esi,eax
c001bcaf:	eb 07                	jmp    c001bcb8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bcb1:	31 f6                	xor    esi,esi
c001bcb3:	bf 02 00 00 00       	mov    edi,0x2
c001bcb8:	50                   	push   eax
c001bcb9:	6a 00                	push   0x0
c001bcbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcc2:	50                   	push   eax
c001bcc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bcc7:	e8 b6 f1 ff ff       	call   c001ae82 <IDE::enableIRQs(unsigned char, bool)>
c001bccc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bccf:	e8 a6 fe ff ff       	call   c001bb7a <ATA::readyForCommand()>
c001bcd4:	83 c4 10             	add    esp,0x10
c001bcd7:	84 c0                	test   al,al
c001bcd9:	75 0a                	jne    c001bce5 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bcdb:	be 01 00 00 00       	mov    esi,0x1
c001bce0:	e9 9b 02 00 00       	jmp    c001bf80 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bce5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bceb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bcf1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bcf8:	c1 e0 04             	shl    eax,0x4
c001bcfb:	09 c6                	or     esi,eax
c001bcfd:	f7 c7 03 00 00 00    	test   edi,0x3
c001bd03:	75 05                	jne    c001bd0a <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bd05:	83 ce a0             	or     esi,0xffffffa0
c001bd08:	eb 03                	jmp    c001bd0d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bd0a:	83 ce e0             	or     esi,0xffffffe0
c001bd0d:	89 f0                	mov    eax,esi
c001bd0f:	0f b6 f0             	movzx  esi,al
c001bd12:	56                   	push   esi
c001bd13:	6a 06                	push   0x6
c001bd15:	51                   	push   ecx
c001bd16:	52                   	push   edx
c001bd17:	e8 58 ef ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd1c:	83 c4 10             	add    esp,0x10
c001bd1f:	6a 00                	push   0x0
c001bd21:	6a 01                	push   0x1
c001bd23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd2a:	50                   	push   eax
c001bd2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd31:	e8 3e ef ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd36:	89 f8                	mov    eax,edi
c001bd38:	83 c4 10             	add    esp,0x10
c001bd3b:	0f b6 f0             	movzx  esi,al
c001bd3e:	83 fe 02             	cmp    esi,0x2
c001bd41:	75 6e                	jne    c001bdb1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bd43:	6a 00                	push   0x0
c001bd45:	6a 08                	push   0x8
c001bd47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd4e:	50                   	push   eax
c001bd4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd55:	e8 1a ef ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd5a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bd5f:	50                   	push   eax
c001bd60:	6a 09                	push   0x9
c001bd62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd69:	50                   	push   eax
c001bd6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd70:	e8 ff ee ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd75:	83 c4 20             	add    esp,0x20
c001bd78:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd7d:	50                   	push   eax
c001bd7e:	6a 0a                	push   0xa
c001bd80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd87:	50                   	push   eax
c001bd88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd8e:	e8 e1 ee ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd93:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd98:	50                   	push   eax
c001bd99:	6a 0b                	push   0xb
c001bd9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bda2:	50                   	push   eax
c001bda3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bda9:	e8 c6 ee ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdae:	83 c4 20             	add    esp,0x20
c001bdb1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bdb6:	50                   	push   eax
c001bdb7:	6a 02                	push   0x2
c001bdb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdc0:	50                   	push   eax
c001bdc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdc7:	e8 a8 ee ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdcc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bdd1:	50                   	push   eax
c001bdd2:	6a 03                	push   0x3
c001bdd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bddb:	50                   	push   eax
c001bddc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bde2:	e8 8d ee ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bde7:	83 c4 20             	add    esp,0x20
c001bdea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bdef:	50                   	push   eax
c001bdf0:	6a 04                	push   0x4
c001bdf2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdf9:	50                   	push   eax
c001bdfa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be00:	e8 6f ee ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001be0a:	50                   	push   eax
c001be0b:	6a 05                	push   0x5
c001be0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be14:	50                   	push   eax
c001be15:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be1b:	e8 54 ee ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be20:	83 c4 20             	add    esp,0x20
c001be23:	83 fe 02             	cmp    esi,0x2
c001be26:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001be2b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001be30:	85 c9                	test   ecx,ecx
c001be32:	74 07                	je     c001be3b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001be34:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be39:	75 47                	jne    c001be82 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001be3b:	89 f8                	mov    eax,edi
c001be3d:	0f b6 f8             	movzx  edi,al
c001be40:	31 c0                	xor    eax,eax
c001be42:	83 ff 02             	cmp    edi,0x2
c001be45:	0f 95 c0             	setne  al
c001be48:	89 c6                	mov    esi,eax
c001be4a:	74 0c                	je     c001be58 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001be4c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be51:	b8 30 00 00 00       	mov    eax,0x30
c001be56:	75 2f                	jne    c001be87 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be5c:	83 f2 01             	xor    edx,0x1
c001be5f:	85 c9                	test   ecx,ecx
c001be61:	74 09                	je     c001be6c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001be63:	84 d2                	test   dl,dl
c001be65:	b8 24 00 00 00       	mov    eax,0x24
c001be6a:	75 1b                	jne    c001be87 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be6c:	85 f6                	test   esi,esi
c001be6e:	0f 84 67 fe ff ff    	je     c001bcdb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be74:	84 d2                	test   dl,dl
c001be76:	b8 20 00 00 00       	mov    eax,0x20
c001be7b:	75 0a                	jne    c001be87 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be7d:	e9 59 fe ff ff       	jmp    c001bcdb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be82:	b8 34 00 00 00       	mov    eax,0x34
c001be87:	50                   	push   eax
c001be88:	6a 07                	push   0x7
c001be8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be91:	50                   	push   eax
c001be92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be98:	e8 d7 ed ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be9d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bea1:	83 c4 10             	add    esp,0x10
c001bea4:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001bea9:	85 f6                	test   esi,esi
c001beab:	0f 84 b5 00 00 00    	je     c001bf66 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001beb1:	50                   	push   eax
c001beb2:	6a 01                	push   0x1
c001beb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bebb:	50                   	push   eax
c001bebc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bec2:	e8 91 f8 ff ff       	call   c001b758 <IDE::polling(unsigned char, unsigned int)>
c001bec7:	83 c4 10             	add    esp,0x10
c001beca:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bed0:	0f b6 c0             	movzx  eax,al
c001bed3:	85 c0                	test   eax,eax
c001bed5:	74 1f                	je     c001bef6 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001bed7:	50                   	push   eax
c001bed8:	89 c6                	mov    esi,eax
c001beda:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001bee1:	0f b6 d2             	movzx  edx,dl
c001bee4:	50                   	push   eax
c001bee5:	52                   	push   edx
c001bee6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001beec:	e8 ad f7 ff ff       	call   c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bef1:	e9 87 00 00 00       	jmp    c001bf7d <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001bef6:	85 ed                	test   ebp,ebp
c001bef8:	74 3b                	je     c001bf35 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001befa:	31 ff                	xor    edi,edi
c001befc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf00:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001bf04:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001bf09:	50                   	push   eax
c001bf0a:	50                   	push   eax
c001bf0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf12:	50                   	push   eax
c001bf13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf19:	e8 44 ed ff ff       	call   c001ac62 <IDE::getBase(unsigned char)>
c001bf1e:	89 c2                	mov    edx,eax
c001bf20:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bf25:	66 ef                	out    dx,ax
c001bf27:	47                   	inc    edi
c001bf28:	83 c4 10             	add    esp,0x10
c001bf2b:	81 ff 00 01 00 00    	cmp    edi,0x100
c001bf31:	75 c9                	jne    c001befc <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001bf33:	eb 23                	jmp    c001bf58 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bf35:	51                   	push   ecx
c001bf36:	0f b6 d2             	movzx  edx,dl
c001bf39:	51                   	push   ecx
c001bf3a:	52                   	push   edx
c001bf3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf41:	e8 1c ed ff ff       	call   c001ac62 <IDE::getBase(unsigned char)>
c001bf46:	b9 00 01 00 00       	mov    ecx,0x100
c001bf4b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf4f:	89 c2                	mov    edx,eax
c001bf51:	fc                   	cld    
c001bf52:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf60:	4e                   	dec    esi
c001bf61:	e9 43 ff ff ff       	jmp    c001bea9 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001bf66:	31 f6                	xor    esi,esi
c001bf68:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf6d:	74 11                	je     c001bf80 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bf6f:	50                   	push   eax
c001bf70:	50                   	push   eax
c001bf71:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf76:	50                   	push   eax
c001bf77:	53                   	push   ebx
c001bf78:	e8 af fb ff ff       	call   c001bb2c <ATA::flush(bool)>
c001bf7d:	83 c4 10             	add    esp,0x10
c001bf80:	83 c4 2c             	add    esp,0x2c
c001bf83:	89 f0                	mov    eax,esi
c001bf85:	5b                   	pop    ebx
c001bf86:	5e                   	pop    esi
c001bf87:	5f                   	pop    edi
c001bf88:	5d                   	pop    ebp
c001bf89:	c3                   	ret    

c001bf8a <ATA::detectCHS()>:
c001bf8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf8e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf94:	c1 e0 06             	shl    eax,0x6
c001bf97:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf9d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bfa7:	c7 44 24 04 e8 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021be8
c001bfaf:	e9 c1 48 ff ff       	jmp    c0010875 <KePanic(char const*)>

c001bfb4 <ATA::open(int, int, void*)>:
c001bfb4:	53                   	push   ebx
c001bfb5:	83 ec 08             	sub    esp,0x8
c001bfb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfc4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bfca:	c1 e0 06             	shl    eax,0x6
c001bfcd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bfd3:	01 d0                	add    eax,edx
c001bfd5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bfdc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bfe2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bfe9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bff3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bffa:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c000:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c007:	75 0c                	jne    c001c015 <ATA::open(int, int, void*)+0x61>
c001c009:	83 ec 0c             	sub    esp,0xc
c001c00c:	53                   	push   ebx
c001c00d:	e8 78 ff ff ff       	call   c001bf8a <ATA::detectCHS()>
c001c012:	83 c4 10             	add    esp,0x10
c001c015:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c01b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c021:	c1 e0 06             	shl    eax,0x6
c001c024:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c02b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c035:	d1 e8                	shr    eax,1
c001c037:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c03d:	6a 04                	push   0x4
c001c03f:	6a 0c                	push   0xc
c001c041:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c048:	50                   	push   eax
c001c049:	52                   	push   edx
c001c04a:	e8 25 ec ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c04f:	90                   	nop
c001c050:	90                   	nop
c001c051:	6a 00                	push   0x0
c001c053:	6a 0c                	push   0xc
c001c055:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c05c:	50                   	push   eax
c001c05d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c063:	e8 0c ec ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c068:	83 c4 14             	add    esp,0x14
c001c06b:	53                   	push   ebx
c001c06c:	e8 d1 01 ff ff       	call   c000c242 <PhysicalDisk::startCache()>
c001c071:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c074:	e8 15 14 ff ff       	call   c000d48e <createPartitionsForDisk(PhysicalDisk*)>
c001c079:	83 c4 18             	add    esp,0x18
c001c07c:	31 c0                	xor    eax,eax
c001c07e:	5b                   	pop    ebx
c001c07f:	c3                   	ret    

c001c080 <combineCharAndColour(char, unsigned char)>:
c001c080:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c085:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c08b:	c1 e0 08             	shl    eax,0x8
c001c08e:	09 d0                	or     eax,edx
c001c090:	c3                   	ret    

c001c091 <combineColours(unsigned char, unsigned char)>:
c001c091:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c096:	c1 e0 04             	shl    eax,0x4
c001c099:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c09d:	c3                   	ret    

c001c09e <ATA::read(unsigned long long, int, void*)>:
c001c09e:	55                   	push   ebp
c001c09f:	57                   	push   edi
c001c0a0:	56                   	push   esi
c001c0a1:	be 04 00 00 00       	mov    esi,0x4
c001c0a6:	53                   	push   ebx
c001c0a7:	83 ec 0c             	sub    esp,0xc
c001c0aa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c0ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c0ba:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c0bd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c0c3:	0f 87 a1 01 00 00    	ja     c001c26a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0c9:	85 c9                	test   ecx,ecx
c001c0cb:	be 06 00 00 00       	mov    esi,0x6
c001c0d0:	0f 84 94 01 00 00    	je     c001c26a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0d6:	55                   	push   ebp
c001c0d7:	55                   	push   ebp
c001c0d8:	6a 00                	push   0x0
c001c0da:	51                   	push   ecx
c001c0db:	53                   	push   ebx
c001c0dc:	52                   	push   edx
c001c0dd:	50                   	push   eax
c001c0de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0e2:	e8 df fa ff ff       	call   c001bbc6 <ATA::access(unsigned long long, int, void*, bool)>
c001c0e7:	83 c4 20             	add    esp,0x20
c001c0ea:	85 c0                	test   eax,eax
c001c0ec:	89 c6                	mov    esi,eax
c001c0ee:	0f 85 71 01 00 00    	jne    c001c265 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c0f4:	50                   	push   eax
c001c0f5:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0fa:	50                   	push   eax
c001c0fb:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c101:	6a 0f                	push   0xf
c001c103:	6a 00                	push   0x0
c001c105:	89 da                	mov    edx,ebx
c001c107:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c10d:	e8 7f ff ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001c112:	59                   	pop    ecx
c001c113:	b9 0a 00 00 00       	mov    ecx,0xa
c001c118:	5b                   	pop    ebx
c001c119:	0f b6 d8             	movzx  ebx,al
c001c11c:	89 d0                	mov    eax,edx
c001c11e:	53                   	push   ebx
c001c11f:	99                   	cdq    
c001c120:	f7 fd                	idiv   ebp
c001c122:	99                   	cdq    
c001c123:	f7 f9                	idiv   ecx
c001c125:	83 c2 30             	add    edx,0x30
c001c128:	0f b6 d2             	movzx  edx,dl
c001c12b:	52                   	push   edx
c001c12c:	e8 4f ff ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c131:	5f                   	pop    edi
c001c132:	bf e8 03 00 00       	mov    edi,0x3e8
c001c137:	5a                   	pop    edx
c001c138:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c13e:	53                   	push   ebx
c001c13f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c144:	99                   	cdq    
c001c145:	f7 ff                	idiv   edi
c001c147:	99                   	cdq    
c001c148:	f7 f9                	idiv   ecx
c001c14a:	8d 42 30             	lea    eax,[edx+0x30]
c001c14d:	0f b6 c0             	movzx  eax,al
c001c150:	50                   	push   eax
c001c151:	e8 2a ff ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c156:	5f                   	pop    edi
c001c157:	bf 64 00 00 00       	mov    edi,0x64
c001c15c:	5a                   	pop    edx
c001c15d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c163:	53                   	push   ebx
c001c164:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c169:	99                   	cdq    
c001c16a:	f7 ff                	idiv   edi
c001c16c:	99                   	cdq    
c001c16d:	f7 f9                	idiv   ecx
c001c16f:	8d 42 30             	lea    eax,[edx+0x30]
c001c172:	0f b6 c0             	movzx  eax,al
c001c175:	50                   	push   eax
c001c176:	e8 05 ff ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c17b:	5a                   	pop    edx
c001c17c:	5a                   	pop    edx
c001c17d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c183:	53                   	push   ebx
c001c184:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c189:	99                   	cdq    
c001c18a:	f7 f9                	idiv   ecx
c001c18c:	99                   	cdq    
c001c18d:	f7 f9                	idiv   ecx
c001c18f:	8d 42 30             	lea    eax,[edx+0x30]
c001c192:	0f b6 c0             	movzx  eax,al
c001c195:	50                   	push   eax
c001c196:	e8 e5 fe ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c19b:	5a                   	pop    edx
c001c19c:	5a                   	pop    edx
c001c19d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c1a3:	53                   	push   ebx
c001c1a4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c1a9:	99                   	cdq    
c001c1aa:	f7 f9                	idiv   ecx
c001c1ac:	83 c2 30             	add    edx,0x30
c001c1af:	0f b6 d2             	movzx  edx,dl
c001c1b2:	52                   	push   edx
c001c1b3:	e8 c8 fe ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c1b8:	5a                   	pop    edx
c001c1b9:	5a                   	pop    edx
c001c1ba:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1c0:	53                   	push   ebx
c001c1c1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1c6:	99                   	cdq    
c001c1c7:	f7 fd                	idiv   ebp
c001c1c9:	99                   	cdq    
c001c1ca:	f7 f9                	idiv   ecx
c001c1cc:	8d 42 30             	lea    eax,[edx+0x30]
c001c1cf:	0f b6 c0             	movzx  eax,al
c001c1d2:	50                   	push   eax
c001c1d3:	e8 a8 fe ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c1d8:	5d                   	pop    ebp
c001c1d9:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1de:	5a                   	pop    edx
c001c1df:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1e5:	53                   	push   ebx
c001c1e6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1eb:	99                   	cdq    
c001c1ec:	f7 fd                	idiv   ebp
c001c1ee:	99                   	cdq    
c001c1ef:	f7 f9                	idiv   ecx
c001c1f1:	8d 42 30             	lea    eax,[edx+0x30]
c001c1f4:	0f b6 c0             	movzx  eax,al
c001c1f7:	50                   	push   eax
c001c1f8:	e8 83 fe ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c1fd:	5d                   	pop    ebp
c001c1fe:	5a                   	pop    edx
c001c1ff:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c205:	53                   	push   ebx
c001c206:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c20b:	99                   	cdq    
c001c20c:	f7 ff                	idiv   edi
c001c20e:	99                   	cdq    
c001c20f:	f7 f9                	idiv   ecx
c001c211:	8d 42 30             	lea    eax,[edx+0x30]
c001c214:	0f b6 c0             	movzx  eax,al
c001c217:	50                   	push   eax
c001c218:	e8 63 fe ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c21d:	5f                   	pop    edi
c001c21e:	5d                   	pop    ebp
c001c21f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c225:	53                   	push   ebx
c001c226:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c22b:	99                   	cdq    
c001c22c:	f7 f9                	idiv   ecx
c001c22e:	99                   	cdq    
c001c22f:	f7 f9                	idiv   ecx
c001c231:	8d 42 30             	lea    eax,[edx+0x30]
c001c234:	0f b6 c0             	movzx  eax,al
c001c237:	50                   	push   eax
c001c238:	e8 43 fe ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c23d:	5a                   	pop    edx
c001c23e:	5f                   	pop    edi
c001c23f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c245:	53                   	push   ebx
c001c246:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c24b:	99                   	cdq    
c001c24c:	f7 f9                	idiv   ecx
c001c24e:	83 c2 30             	add    edx,0x30
c001c251:	0f b6 d2             	movzx  edx,dl
c001c254:	52                   	push   edx
c001c255:	e8 26 fe ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c25a:	83 c4 10             	add    esp,0x10
c001c25d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c263:	eb 05                	jmp    c001c26a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c265:	be 01 00 00 00       	mov    esi,0x1
c001c26a:	83 c4 0c             	add    esp,0xc
c001c26d:	89 f0                	mov    eax,esi
c001c26f:	5b                   	pop    ebx
c001c270:	5e                   	pop    esi
c001c271:	5f                   	pop    edi
c001c272:	5d                   	pop    ebp
c001c273:	c3                   	ret    

c001c274 <ATA::write(unsigned long long, int, void*)>:
c001c274:	55                   	push   ebp
c001c275:	57                   	push   edi
c001c276:	56                   	push   esi
c001c277:	be 04 00 00 00       	mov    esi,0x4
c001c27c:	53                   	push   ebx
c001c27d:	83 ec 0c             	sub    esp,0xc
c001c280:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c284:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c288:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c28c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c290:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c293:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c299:	0f 87 9c 01 00 00    	ja     c001c43b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c29f:	85 c9                	test   ecx,ecx
c001c2a1:	be 06 00 00 00       	mov    esi,0x6
c001c2a6:	0f 84 8f 01 00 00    	je     c001c43b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2ac:	55                   	push   ebp
c001c2ad:	55                   	push   ebp
c001c2ae:	6a 01                	push   0x1
c001c2b0:	51                   	push   ecx
c001c2b1:	53                   	push   ebx
c001c2b2:	52                   	push   edx
c001c2b3:	50                   	push   eax
c001c2b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2b8:	e8 09 f9 ff ff       	call   c001bbc6 <ATA::access(unsigned long long, int, void*, bool)>
c001c2bd:	83 c4 20             	add    esp,0x20
c001c2c0:	85 c0                	test   eax,eax
c001c2c2:	89 c6                	mov    esi,eax
c001c2c4:	0f 85 6c 01 00 00    	jne    c001c436 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c2ca:	50                   	push   eax
c001c2cb:	bd 10 27 00 00       	mov    ebp,0x2710
c001c2d0:	50                   	push   eax
c001c2d1:	6a 0f                	push   0xf
c001c2d3:	6a 00                	push   0x0
c001c2d5:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c2db:	e8 b1 fd ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001c2e0:	5a                   	pop    edx
c001c2e1:	59                   	pop    ecx
c001c2e2:	b9 0a 00 00 00       	mov    ecx,0xa
c001c2e7:	0f b6 d8             	movzx  ebx,al
c001c2ea:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2ef:	53                   	push   ebx
c001c2f0:	99                   	cdq    
c001c2f1:	f7 fd                	idiv   ebp
c001c2f3:	99                   	cdq    
c001c2f4:	f7 f9                	idiv   ecx
c001c2f6:	8d 42 30             	lea    eax,[edx+0x30]
c001c2f9:	0f b6 c0             	movzx  eax,al
c001c2fc:	50                   	push   eax
c001c2fd:	e8 7e fd ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c302:	5f                   	pop    edi
c001c303:	bf e8 03 00 00       	mov    edi,0x3e8
c001c308:	5a                   	pop    edx
c001c309:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c30f:	53                   	push   ebx
c001c310:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c315:	99                   	cdq    
c001c316:	f7 ff                	idiv   edi
c001c318:	99                   	cdq    
c001c319:	f7 f9                	idiv   ecx
c001c31b:	8d 42 30             	lea    eax,[edx+0x30]
c001c31e:	0f b6 c0             	movzx  eax,al
c001c321:	50                   	push   eax
c001c322:	e8 59 fd ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c327:	5f                   	pop    edi
c001c328:	bf 64 00 00 00       	mov    edi,0x64
c001c32d:	5a                   	pop    edx
c001c32e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c334:	53                   	push   ebx
c001c335:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c33a:	99                   	cdq    
c001c33b:	f7 ff                	idiv   edi
c001c33d:	99                   	cdq    
c001c33e:	f7 f9                	idiv   ecx
c001c340:	8d 42 30             	lea    eax,[edx+0x30]
c001c343:	0f b6 c0             	movzx  eax,al
c001c346:	50                   	push   eax
c001c347:	e8 34 fd ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c34c:	5a                   	pop    edx
c001c34d:	5a                   	pop    edx
c001c34e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c354:	53                   	push   ebx
c001c355:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c35a:	99                   	cdq    
c001c35b:	f7 f9                	idiv   ecx
c001c35d:	99                   	cdq    
c001c35e:	f7 f9                	idiv   ecx
c001c360:	8d 42 30             	lea    eax,[edx+0x30]
c001c363:	0f b6 c0             	movzx  eax,al
c001c366:	50                   	push   eax
c001c367:	e8 14 fd ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c36c:	5a                   	pop    edx
c001c36d:	5a                   	pop    edx
c001c36e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c374:	53                   	push   ebx
c001c375:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c37a:	99                   	cdq    
c001c37b:	f7 f9                	idiv   ecx
c001c37d:	83 c2 30             	add    edx,0x30
c001c380:	0f b6 d2             	movzx  edx,dl
c001c383:	52                   	push   edx
c001c384:	e8 f7 fc ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c389:	5a                   	pop    edx
c001c38a:	5a                   	pop    edx
c001c38b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c391:	53                   	push   ebx
c001c392:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c397:	99                   	cdq    
c001c398:	f7 fd                	idiv   ebp
c001c39a:	99                   	cdq    
c001c39b:	f7 f9                	idiv   ecx
c001c39d:	8d 42 30             	lea    eax,[edx+0x30]
c001c3a0:	0f b6 c0             	movzx  eax,al
c001c3a3:	50                   	push   eax
c001c3a4:	e8 d7 fc ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c3a9:	5d                   	pop    ebp
c001c3aa:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c3af:	5a                   	pop    edx
c001c3b0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3b6:	53                   	push   ebx
c001c3b7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3bc:	99                   	cdq    
c001c3bd:	f7 fd                	idiv   ebp
c001c3bf:	99                   	cdq    
c001c3c0:	f7 f9                	idiv   ecx
c001c3c2:	8d 42 30             	lea    eax,[edx+0x30]
c001c3c5:	0f b6 c0             	movzx  eax,al
c001c3c8:	50                   	push   eax
c001c3c9:	e8 b2 fc ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c3ce:	5d                   	pop    ebp
c001c3cf:	5a                   	pop    edx
c001c3d0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3d6:	53                   	push   ebx
c001c3d7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3dc:	99                   	cdq    
c001c3dd:	f7 ff                	idiv   edi
c001c3df:	99                   	cdq    
c001c3e0:	f7 f9                	idiv   ecx
c001c3e2:	8d 42 30             	lea    eax,[edx+0x30]
c001c3e5:	0f b6 c0             	movzx  eax,al
c001c3e8:	50                   	push   eax
c001c3e9:	e8 92 fc ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c3ee:	5f                   	pop    edi
c001c3ef:	5d                   	pop    ebp
c001c3f0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c3f6:	53                   	push   ebx
c001c3f7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3fc:	99                   	cdq    
c001c3fd:	f7 f9                	idiv   ecx
c001c3ff:	99                   	cdq    
c001c400:	f7 f9                	idiv   ecx
c001c402:	8d 42 30             	lea    eax,[edx+0x30]
c001c405:	0f b6 c0             	movzx  eax,al
c001c408:	50                   	push   eax
c001c409:	e8 72 fc ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c40e:	5a                   	pop    edx
c001c40f:	5f                   	pop    edi
c001c410:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c416:	53                   	push   ebx
c001c417:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c41c:	99                   	cdq    
c001c41d:	f7 f9                	idiv   ecx
c001c41f:	83 c2 30             	add    edx,0x30
c001c422:	0f b6 d2             	movzx  edx,dl
c001c425:	52                   	push   edx
c001c426:	e8 55 fc ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c434:	eb 05                	jmp    c001c43b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c436:	be 01 00 00 00       	mov    esi,0x1
c001c43b:	83 c4 0c             	add    esp,0xc
c001c43e:	89 f0                	mov    eax,esi
c001c440:	5b                   	pop    ebx
c001c441:	5e                   	pop    esi
c001c442:	5f                   	pop    edi
c001c443:	5d                   	pop    ebp
c001c444:	c3                   	ret    
c001c445:	90                   	nop

c001c446 <ATAPI::write(unsigned long long, int, void*)>:
c001c446:	b8 03 00 00 00       	mov    eax,0x3
c001c44b:	c3                   	ret    

c001c44c <ATAPI::close(int, int, void*)>:
c001c44c:	83 ec 0c             	sub    esp,0xc
c001c44f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c453:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c459:	85 c0                	test   eax,eax
c001c45b:	74 0c                	je     c001c469 <ATAPI::close(int, int, void*)+0x1d>
c001c45d:	8b 10                	mov    edx,DWORD PTR [eax]
c001c45f:	83 ec 0c             	sub    esp,0xc
c001c462:	50                   	push   eax
c001c463:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c466:	83 c4 10             	add    esp,0x10
c001c469:	31 c0                	xor    eax,eax
c001c46b:	83 c4 0c             	add    esp,0xc
c001c46e:	c3                   	ret    
c001c46f:	90                   	nop

c001c470 <ATAPI::ATAPI()>:
c001c470:	83 ec 0c             	sub    esp,0xc
c001c473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c477:	83 ec 04             	sub    esp,0x4
c001c47a:	68 00 08 00 00       	push   0x800
c001c47f:	68 31 1d 02 c0       	push   0xc0021d31
c001c484:	50                   	push   eax
c001c485:	e8 50 fd fe ff       	call   c000c1da <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c48a:	83 c4 10             	add    esp,0x10
c001c48d:	ba 4c 1c 02 c0       	mov    edx,0xc0021c4c
c001c492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c496:	89 10                	mov    DWORD PTR [eax],edx
c001c498:	90                   	nop
c001c499:	83 c4 0c             	add    esp,0xc
c001c49c:	c3                   	ret    
c001c49d:	90                   	nop

c001c49e <ATAPI::readyForCommand()>:
c001c49e:	56                   	push   esi
c001c49f:	53                   	push   ebx
c001c4a0:	53                   	push   ebx
c001c4a1:	31 db                	xor    ebx,ebx
c001c4a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4a7:	51                   	push   ecx
c001c4a8:	6a 0c                	push   0xc
c001c4aa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4b1:	50                   	push   eax
c001c4b2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4b8:	e8 77 e8 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001c4bd:	83 c4 10             	add    esp,0x10
c001c4c0:	a8 88                	test   al,0x88
c001c4c2:	74 25                	je     c001c4e9 <ATAPI::readyForCommand()+0x4b>
c001c4c4:	43                   	inc    ebx
c001c4c5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c4cb:	7e da                	jle    c001c4a7 <ATAPI::readyForCommand()+0x9>
c001c4cd:	83 ec 0c             	sub    esp,0xc
c001c4d0:	68 5e 01 00 00       	push   0x15e
c001c4d5:	e8 b2 8e ff ff       	call   c001538c <milliTenthSleep(unsigned int)>
c001c4da:	83 c4 10             	add    esp,0x10
c001c4dd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c4e3:	75 c2                	jne    c001c4a7 <ATAPI::readyForCommand()+0x9>
c001c4e5:	31 c0                	xor    eax,eax
c001c4e7:	eb 02                	jmp    c001c4eb <ATAPI::readyForCommand()+0x4d>
c001c4e9:	b0 01                	mov    al,0x1
c001c4eb:	5a                   	pop    edx
c001c4ec:	5b                   	pop    ebx
c001c4ed:	5e                   	pop    esi
c001c4ee:	c3                   	ret    
c001c4ef:	90                   	nop

c001c4f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c4f0:	55                   	push   ebp
c001c4f1:	57                   	push   edi
c001c4f2:	56                   	push   esi
c001c4f3:	53                   	push   ebx
c001c4f4:	83 ec 20             	sub    esp,0x20
c001c4f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c4fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c4ff:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c503:	6a 01                	push   0x1
c001c505:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c50c:	50                   	push   eax
c001c50d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c513:	e8 6a e9 ff ff       	call   c001ae82 <IDE::enableIRQs(unsigned char, bool)>
c001c518:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c51f:	59                   	pop    ecx
c001c520:	5e                   	pop    esi
c001c521:	50                   	push   eax
c001c522:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c528:	e8 21 e7 ff ff       	call   c001ac4e <IDE::prepareInterrupt(unsigned char)>
c001c52d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c530:	e8 69 ff ff ff       	call   c001c49e <ATAPI::readyForCommand()>
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	84 c0                	test   al,al
c001c53a:	75 0a                	jne    c001c546 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c53c:	bb 01 00 00 00       	mov    ebx,0x1
c001c541:	e9 5f 02 00 00       	jmp    c001c7a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c546:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c54c:	c1 e0 04             	shl    eax,0x4
c001c54f:	0f b6 c0             	movzx  eax,al
c001c552:	50                   	push   eax
c001c553:	6a 06                	push   0x6
c001c555:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c55c:	50                   	push   eax
c001c55d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c563:	e8 0c e7 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c568:	6a 00                	push   0x0
c001c56a:	6a 01                	push   0x1
c001c56c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c573:	50                   	push   eax
c001c574:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c57a:	e8 f5 e6 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c57f:	83 c4 20             	add    esp,0x20
c001c582:	0f b6 c3             	movzx  eax,bl
c001c585:	50                   	push   eax
c001c586:	0f b6 df             	movzx  ebx,bh
c001c589:	6a 04                	push   0x4
c001c58b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c592:	50                   	push   eax
c001c593:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c599:	e8 d6 e6 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c59e:	53                   	push   ebx
c001c59f:	6a 05                	push   0x5
c001c5a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5a8:	50                   	push   eax
c001c5a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5af:	e8 c0 e6 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5b4:	83 c4 20             	add    esp,0x20
c001c5b7:	68 a0 00 00 00       	push   0xa0
c001c5bc:	6a 07                	push   0x7
c001c5be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5c5:	50                   	push   eax
c001c5c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5cc:	e8 a3 e6 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5d1:	83 c4 0c             	add    esp,0xc
c001c5d4:	6a 01                	push   0x1
c001c5d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5dd:	50                   	push   eax
c001c5de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5e4:	e8 6f f1 ff ff       	call   c001b758 <IDE::polling(unsigned char, unsigned int)>
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	0f b6 d8             	movzx  ebx,al
c001c5ef:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c5f5:	85 db                	test   ebx,ebx
c001c5f7:	74 20                	je     c001c619 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c5f9:	53                   	push   ebx
c001c5fa:	0f b6 c0             	movzx  eax,al
c001c5fd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c604:	52                   	push   edx
c001c605:	50                   	push   eax
c001c606:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c60c:	e8 8d f0 ff ff       	call   c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	e9 8c 01 00 00       	jmp    c001c7a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c619:	52                   	push   edx
c001c61a:	0f b6 c0             	movzx  eax,al
c001c61d:	52                   	push   edx
c001c61e:	50                   	push   eax
c001c61f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c625:	e8 38 e6 ff ff       	call   c001ac62 <IDE::getBase(unsigned char)>
c001c62a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c62e:	b9 06 00 00 00       	mov    ecx,0x6
c001c633:	89 c2                	mov    edx,eax
c001c635:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c638:	89 e8                	mov    eax,ebp
c001c63a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	0f b6 c0             	movzx  eax,al
c001c644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c648:	85 db                	test   ebx,ebx
c001c64a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c650:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c657:	0f 84 eb 00 00 00    	je     c001c748 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c65d:	55                   	push   ebp
c001c65e:	55                   	push   ebp
c001c65f:	52                   	push   edx
c001c660:	50                   	push   eax
c001c661:	e8 82 e7 ff ff       	call   c001ade8 <IDE::waitInterrupt(unsigned char)>
c001c666:	83 c4 10             	add    esp,0x10
c001c669:	84 c0                	test   al,al
c001c66b:	0f 84 cb fe ff ff    	je     c001c53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c671:	56                   	push   esi
c001c672:	56                   	push   esi
c001c673:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c67a:	50                   	push   eax
c001c67b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c681:	e8 c8 e5 ff ff       	call   c001ac4e <IDE::prepareInterrupt(unsigned char)>
c001c686:	83 c4 0c             	add    esp,0xc
c001c689:	6a 04                	push   0x4
c001c68b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c692:	50                   	push   eax
c001c693:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c699:	e8 96 e6 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001c69e:	83 c4 0c             	add    esp,0xc
c001c6a1:	6a 05                	push   0x5
c001c6a3:	89 c6                	mov    esi,eax
c001c6a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6ac:	50                   	push   eax
c001c6ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6b3:	e8 7c e6 ff ff       	call   c001ad34 <IDE::read(unsigned char, unsigned char)>
c001c6b8:	83 c4 10             	add    esp,0x10
c001c6bb:	0f b6 e8             	movzx  ebp,al
c001c6be:	89 f0                	mov    eax,esi
c001c6c0:	c1 e5 08             	shl    ebp,0x8
c001c6c3:	0f b6 f0             	movzx  esi,al
c001c6c6:	09 f5                	or     ebp,esi
c001c6c8:	31 f6                	xor    esi,esi
c001c6ca:	d1 fd                	sar    ebp,1
c001c6cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c6d1:	74 5c                	je     c001c72f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c6d3:	39 ee                	cmp    esi,ebp
c001c6d5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6db:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6e2:	75 0d                	jne    c001c6f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c6e4:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c6e7:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c6eb:	4b                   	dec    ebx
c001c6ec:	e9 57 ff ff ff       	jmp    c001c648 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c6f1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c6f5:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c6f9:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c6fe:	51                   	push   ecx
c001c6ff:	51                   	push   ecx
c001c700:	52                   	push   edx
c001c701:	50                   	push   eax
c001c702:	e8 5b e5 ff ff       	call   c001ac62 <IDE::getBase(unsigned char)>
c001c707:	89 c2                	mov    edx,eax
c001c709:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c70e:	66 ef                	out    dx,ax
c001c710:	46                   	inc    esi
c001c711:	83 c4 10             	add    esp,0x10
c001c714:	eb bd                	jmp    c001c6d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c716:	51                   	push   ecx
c001c717:	51                   	push   ecx
c001c718:	52                   	push   edx
c001c719:	50                   	push   eax
c001c71a:	e8 43 e5 ff ff       	call   c001ac62 <IDE::getBase(unsigned char)>
c001c71f:	89 c2                	mov    edx,eax
c001c721:	66 ed                	in     ax,dx
c001c723:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c727:	83 c4 10             	add    esp,0x10
c001c72a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c72e:	46                   	inc    esi
c001c72f:	39 ee                	cmp    esi,ebp
c001c731:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c737:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c73e:	75 d6                	jne    c001c716 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c740:	01 f6                	add    esi,esi
c001c742:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c746:	eb a3                	jmp    c001c6eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c748:	51                   	push   ecx
c001c749:	51                   	push   ecx
c001c74a:	52                   	push   edx
c001c74b:	50                   	push   eax
c001c74c:	e8 97 e6 ff ff       	call   c001ade8 <IDE::waitInterrupt(unsigned char)>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	84 c0                	test   al,al
c001c756:	0f 84 e0 fd ff ff    	je     c001c53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c75c:	52                   	push   edx
c001c75d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c762:	52                   	push   edx
c001c763:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c76a:	50                   	push   eax
c001c76b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c771:	e8 d8 e4 ff ff       	call   c001ac4e <IDE::prepareInterrupt(unsigned char)>
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	50                   	push   eax
c001c77a:	50                   	push   eax
c001c77b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c782:	50                   	push   eax
c001c783:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c789:	e8 d4 e4 ff ff       	call   c001ac62 <IDE::getBase(unsigned char)>
c001c78e:	8d 50 07             	lea    edx,[eax+0x7]
c001c791:	ec                   	in     al,dx
c001c792:	83 c4 10             	add    esp,0x10
c001c795:	a8 88                	test   al,0x88
c001c797:	74 0a                	je     c001c7a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c799:	4b                   	dec    ebx
c001c79a:	75 dd                	jne    c001c779 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c79c:	bb 02 00 00 00       	mov    ebx,0x2
c001c7a1:	eb 02                	jmp    c001c7a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c7a3:	31 db                	xor    ebx,ebx
c001c7a5:	83 c4 1c             	add    esp,0x1c
c001c7a8:	89 d8                	mov    eax,ebx
c001c7aa:	5b                   	pop    ebx
c001c7ab:	5e                   	pop    esi
c001c7ac:	5f                   	pop    edi
c001c7ad:	5d                   	pop    ebp
c001c7ae:	c3                   	ret    
c001c7af:	90                   	nop

c001c7b0 <ATAPI::diskRemoved()>:
c001c7b0:	53                   	push   ebx
c001c7b1:	83 ec 14             	sub    esp,0x14
c001c7b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c7b8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7bf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c7c5:	e8 b2 09 ff ff       	call   c000d17c <LogicalDisk::unmount()>
c001c7ca:	58                   	pop    eax
c001c7cb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c7d1:	e8 8a 13 ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c001c7d6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c7dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7e0:	83 c4 18             	add    esp,0x18
c001c7e3:	5b                   	pop    ebx
c001c7e4:	e9 67 13 ff ff       	jmp    c000db50 <VCache::invalidateReadBuffer()>
c001c7e9:	90                   	nop

c001c7ea <ATAPI::eject()>:
c001c7ea:	57                   	push   edi
c001c7eb:	b9 03 00 00 00       	mov    ecx,0x3
c001c7f0:	53                   	push   ebx
c001c7f1:	83 ec 14             	sub    esp,0x14
c001c7f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7fc:	fc                   	cld    
c001c7fd:	31 c0                	xor    eax,eax
c001c7ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c801:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c806:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c80b:	50                   	push   eax
c001c80c:	50                   	push   eax
c001c80d:	6a 00                	push   0x0
c001c80f:	6a 00                	push   0x0
c001c811:	6a 00                	push   0x0
c001c813:	6a 02                	push   0x2
c001c815:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c819:	50                   	push   eax
c001c81a:	53                   	push   ebx
c001c81b:	e8 d0 fc ff ff       	call   c001c4f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c820:	83 c4 14             	add    esp,0x14
c001c823:	53                   	push   ebx
c001c824:	e8 87 ff ff ff       	call   c001c7b0 <ATAPI::diskRemoved()>
c001c829:	83 c4 24             	add    esp,0x24
c001c82c:	31 c0                	xor    eax,eax
c001c82e:	5b                   	pop    ebx
c001c82f:	5f                   	pop    edi
c001c830:	c3                   	ret    
c001c831:	90                   	nop

c001c832 <ATAPI::diskInserted()>:
c001c832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c836:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c83d:	c3                   	ret    

c001c83e <ATAPI::detectMedia()>:
c001c83e:	56                   	push   esi
c001c83f:	53                   	push   ebx
c001c840:	83 ec 28             	sub    esp,0x28
c001c843:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c847:	6a 0c                	push   0xc
c001c849:	6a 00                	push   0x0
c001c84b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c84f:	56                   	push   esi
c001c850:	e8 9b 3c fe ff       	call   c00004f0 <memset>
c001c855:	58                   	pop    eax
c001c856:	5a                   	pop    edx
c001c857:	6a 00                	push   0x0
c001c859:	6a 00                	push   0x0
c001c85b:	6a 00                	push   0x0
c001c85d:	6a 00                	push   0x0
c001c85f:	56                   	push   esi
c001c860:	53                   	push   ebx
c001c861:	e8 8a fc ff ff       	call   c001c4f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c866:	83 c4 1c             	add    esp,0x1c
c001c869:	6a 0c                	push   0xc
c001c86b:	6a 00                	push   0x0
c001c86d:	56                   	push   esi
c001c86e:	e8 7d 3c fe ff       	call   c00004f0 <memset>
c001c873:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c878:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c87d:	59                   	pop    ecx
c001c87e:	58                   	pop    eax
c001c87f:	6a 01                	push   0x1
c001c881:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c885:	50                   	push   eax
c001c886:	6a 00                	push   0x0
c001c888:	6a 12                	push   0x12
c001c88a:	56                   	push   esi
c001c88b:	53                   	push   ebx
c001c88c:	e8 5f fc ff ff       	call   c001c4f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c891:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c895:	83 c4 20             	add    esp,0x20
c001c898:	83 e0 7f             	and    eax,0x7f
c001c89b:	83 f8 70             	cmp    eax,0x70
c001c89e:	74 15                	je     c001c8b5 <ATAPI::detectMedia()+0x77>
c001c8a0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8a7:	75 0c                	jne    c001c8b5 <ATAPI::detectMedia()+0x77>
c001c8a9:	83 ec 0c             	sub    esp,0xc
c001c8ac:	53                   	push   ebx
c001c8ad:	e8 80 ff ff ff       	call   c001c832 <ATAPI::diskInserted()>
c001c8b2:	83 c4 10             	add    esp,0x10
c001c8b5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c8b9:	83 e0 0f             	and    eax,0xf
c001c8bc:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c8c1:	0f b6 c0             	movzx  eax,al
c001c8c4:	75 19                	jne    c001c8df <ATAPI::detectMedia()+0xa1>
c001c8c6:	83 f8 02             	cmp    eax,0x2
c001c8c9:	75 14                	jne    c001c8df <ATAPI::detectMedia()+0xa1>
c001c8cb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8d2:	74 24                	je     c001c8f8 <ATAPI::detectMedia()+0xba>
c001c8d4:	83 ec 0c             	sub    esp,0xc
c001c8d7:	53                   	push   ebx
c001c8d8:	e8 d3 fe ff ff       	call   c001c7b0 <ATAPI::diskRemoved()>
c001c8dd:	eb 16                	jmp    c001c8f5 <ATAPI::detectMedia()+0xb7>
c001c8df:	85 c0                	test   eax,eax
c001c8e1:	75 15                	jne    c001c8f8 <ATAPI::detectMedia()+0xba>
c001c8e3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8ea:	75 0c                	jne    c001c8f8 <ATAPI::detectMedia()+0xba>
c001c8ec:	83 ec 0c             	sub    esp,0xc
c001c8ef:	53                   	push   ebx
c001c8f0:	e8 3d ff ff ff       	call   c001c832 <ATAPI::diskInserted()>
c001c8f5:	83 c4 10             	add    esp,0x10
c001c8f8:	83 c4 24             	add    esp,0x24
c001c8fb:	5b                   	pop    ebx
c001c8fc:	5e                   	pop    esi
c001c8fd:	c3                   	ret    

c001c8fe <ATAPI::open(int, int, void*)>:
c001c8fe:	56                   	push   esi
c001c8ff:	53                   	push   ebx
c001c900:	50                   	push   eax
c001c901:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c905:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c909:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c90d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c913:	c1 e0 06             	shl    eax,0x6
c001c916:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c91c:	01 d0                	add    eax,edx
c001c91e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c925:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c92b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c932:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c93c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c943:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c949:	6a 04                	push   0x4
c001c94b:	6a 0c                	push   0xc
c001c94d:	51                   	push   ecx
c001c94e:	52                   	push   edx
c001c94f:	e8 20 e3 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c954:	90                   	nop
c001c955:	90                   	nop
c001c956:	6a 00                	push   0x0
c001c958:	6a 0c                	push   0xc
c001c95a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c961:	50                   	push   eax
c001c962:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c968:	e8 07 e3 ff ff       	call   c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c96d:	83 c4 14             	add    esp,0x14
c001c970:	68 78 01 00 00       	push   0x178
c001c975:	e8 51 b1 fe ff       	call   c0007acb <malloc>
c001c97a:	83 c4 0c             	add    esp,0xc
c001c97d:	6a 00                	push   0x0
c001c97f:	68 ff ff ff 7f       	push   0x7fffffff
c001c984:	6a 00                	push   0x0
c001c986:	6a 00                	push   0x0
c001c988:	53                   	push   ebx
c001c989:	68 e3 1d 02 c0       	push   0xc0021de3
c001c98e:	89 c6                	mov    esi,eax
c001c990:	50                   	push   eax
c001c991:	e8 24 06 ff ff       	call   c000cfba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c996:	83 c4 14             	add    esp,0x14
c001c999:	56                   	push   esi
c001c99a:	e8 db 06 ff ff       	call   c000d07a <LogicalDisk::assignDriveLetter()>
c001c99f:	5a                   	pop    edx
c001c9a0:	59                   	pop    ecx
c001c9a1:	0f be c0             	movsx  eax,al
c001c9a4:	50                   	push   eax
c001c9a5:	68 34 1c 02 c0       	push   0xc0021c34
c001c9aa:	e8 fb df fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001c9af:	58                   	pop    eax
c001c9b0:	5a                   	pop    edx
c001c9b1:	56                   	push   esi
c001c9b2:	53                   	push   ebx
c001c9b3:	e8 54 f4 fe ff       	call   c000be0c <Device::addChild(Device*)>
c001c9b8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c9be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9c1:	e8 7c f8 fe ff       	call   c000c242 <PhysicalDisk::startCache()>
c001c9c6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c9cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9d0:	e8 69 fe ff ff       	call   c001c83e <ATAPI::detectMedia()>
c001c9d5:	83 c4 14             	add    esp,0x14
c001c9d8:	31 c0                	xor    eax,eax
c001c9da:	5b                   	pop    ebx
c001c9db:	5e                   	pop    esi
c001c9dc:	c3                   	ret    
c001c9dd:	90                   	nop

c001c9de <ATAPI::read(unsigned long long, int, void*)>:
c001c9de:	55                   	push   ebp
c001c9df:	57                   	push   edi
c001c9e0:	56                   	push   esi
c001c9e1:	53                   	push   ebx
c001c9e2:	83 ec 1c             	sub    esp,0x1c
c001c9e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9e9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c9ed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c9f1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9f8:	74 3c                	je     c001ca36 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c9fa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c9fe:	b9 03 00 00 00       	mov    ecx,0x3
c001ca03:	fc                   	cld    
c001ca04:	31 c0                	xor    eax,eax
c001ca06:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca08:	89 e8                	mov    eax,ebp
c001ca0a:	0f ce                	bswap  esi
c001ca0c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ca10:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ca15:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ca19:	50                   	push   eax
c001ca1a:	50                   	push   eax
c001ca1b:	55                   	push   ebp
c001ca1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca20:	c1 e5 0b             	shl    ebp,0xb
c001ca23:	6a 00                	push   0x0
c001ca25:	55                   	push   ebp
c001ca26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca2a:	50                   	push   eax
c001ca2b:	53                   	push   ebx
c001ca2c:	e8 bf fa ff ff       	call   c001c4f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca31:	83 c4 20             	add    esp,0x20
c001ca34:	eb 1a                	jmp    c001ca50 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ca36:	83 ec 0c             	sub    esp,0xc
c001ca39:	53                   	push   ebx
c001ca3a:	e8 ff fd ff ff       	call   c001c83e <ATAPI::detectMedia()>
c001ca3f:	83 c4 10             	add    esp,0x10
c001ca42:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca49:	75 af                	jne    c001c9fa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca4b:	b8 02 00 00 00       	mov    eax,0x2
c001ca50:	83 c4 1c             	add    esp,0x1c
c001ca53:	5b                   	pop    ebx
c001ca54:	5e                   	pop    esi
c001ca55:	5f                   	pop    edi
c001ca56:	5d                   	pop    ebp
c001ca57:	c3                   	ret    

c001ca58 <SATA::close(int, int, void*)>:
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca65:	85 c0                	test   eax,eax
c001ca67:	74 0c                	je     c001ca75 <SATA::close(int, int, void*)+0x1d>
c001ca69:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca6b:	83 ec 0c             	sub    esp,0xc
c001ca6e:	50                   	push   eax
c001ca6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	31 c0                	xor    eax,eax
c001ca77:	83 c4 0c             	add    esp,0xc
c001ca7a:	c3                   	ret    
c001ca7b:	90                   	nop

c001ca7c <SATA::powerSaving(PowerSavingLevel)>:
c001ca7c:	c3                   	ret    
c001ca7d:	90                   	nop

c001ca7e <SATA::open(int, int, void*)>:
c001ca7e:	56                   	push   esi
c001ca7f:	53                   	push   ebx
c001ca80:	50                   	push   eax
c001ca81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca89:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca93:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca9d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001caa7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cab1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cab8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cabe:	e8 13 b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001cac3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cac9:	89 c6                	mov    esi,eax
c001cacb:	e8 06 b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001cad0:	81 c6 00 10 00 00    	add    esi,0x1000
c001cad6:	39 c6                	cmp    esi,eax
c001cad8:	74 10                	je     c001caea <SATA::open(int, int, void*)+0x6c>
c001cada:	83 ec 0c             	sub    esp,0xc
c001cadd:	68 7c 1c 02 c0       	push   0xc0021c7c
c001cae2:	e8 8e 3d ff ff       	call   c0010875 <KePanic(char const*)>
c001cae7:	83 c4 10             	add    esp,0x10
c001caea:	83 ec 0c             	sub    esp,0xc
c001caed:	6a 02                	push   0x2
c001caef:	e8 11 cb fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001caf4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cafa:	6a 03                	push   0x3
c001cafc:	50                   	push   eax
c001cafd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cb03:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cb09:	e8 d6 d1 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb0e:	83 c4 14             	add    esp,0x14
c001cb11:	53                   	push   ebx
c001cb12:	e8 2b f7 fe ff       	call   c000c242 <PhysicalDisk::startCache()>
c001cb17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb1a:	e8 6f 09 ff ff       	call   c000d48e <createPartitionsForDisk(PhysicalDisk*)>
c001cb1f:	83 c4 14             	add    esp,0x14
c001cb22:	31 c0                	xor    eax,eax
c001cb24:	5b                   	pop    ebx
c001cb25:	5e                   	pop    esi
c001cb26:	c3                   	ret    
c001cb27:	90                   	nop

c001cb28 <SATA::SATA()>:
c001cb28:	83 ec 0c             	sub    esp,0xc
c001cb2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb2f:	83 ec 04             	sub    esp,0x4
c001cb32:	68 00 02 00 00       	push   0x200
c001cb37:	68 90 1c 02 c0       	push   0xc0021c90
c001cb3c:	50                   	push   eax
c001cb3d:	e8 98 f6 fe ff       	call   c000c1da <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb42:	83 c4 10             	add    esp,0x10
c001cb45:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c001cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4e:	89 10                	mov    DWORD PTR [eax],edx
c001cb50:	90                   	nop
c001cb51:	83 c4 0c             	add    esp,0xc
c001cb54:	c3                   	ret    
c001cb55:	90                   	nop

c001cb56 <SATA::access(unsigned long long, int, void*, bool)>:
c001cb56:	55                   	push   ebp
c001cb57:	57                   	push   edi
c001cb58:	56                   	push   esi
c001cb59:	53                   	push   ebx
c001cb5a:	83 ec 2c             	sub    esp,0x2c
c001cb5d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cb61:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb66:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb76:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb7e:	7e 10                	jle    c001cb90 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cb80:	83 ec 0c             	sub    esp,0xc
c001cb83:	68 a0 1c 02 c0       	push   0xc0021ca0
c001cb88:	e8 e8 3c ff ff       	call   c0010875 <KePanic(char const*)>
c001cb8d:	83 c4 10             	add    esp,0x10
c001cb90:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb96:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cb9c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cba2:	89 e8                	mov    eax,ebp
c001cba4:	c1 e0 07             	shl    eax,0x7
c001cba7:	01 d0                	add    eax,edx
c001cba9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cbb3:	8d 45 02             	lea    eax,[ebp+0x2]
c001cbb6:	51                   	push   ecx
c001cbb7:	c1 e0 07             	shl    eax,0x7
c001cbba:	51                   	push   ecx
c001cbbb:	01 d0                	add    eax,edx
c001cbbd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cbc1:	50                   	push   eax
c001cbc2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cbc8:	e8 6b ec ff ff       	call   c001b838 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbd1:	83 c4 10             	add    esp,0x10
c001cbd4:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cbd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cbdd:	0f 84 5b 01 00 00    	je     c001cd3e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cbe3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cbe7:	c1 e0 09             	shl    eax,0x9
c001cbea:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cbef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbf3:	74 0e                	je     c001cc03 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cbf5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cbfb:	89 c1                	mov    ecx,eax
c001cbfd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cc01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cc07:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc0d:	8d 45 02             	lea    eax,[ebp+0x2]
c001cc10:	c1 e0 07             	shl    eax,0x7
c001cc13:	01 d0                	add    eax,edx
c001cc15:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc17:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc1d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc23:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc27:	c1 e1 05             	shl    ecx,0x5
c001cc2a:	01 c8                	add    eax,ecx
c001cc2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc30:	83 e1 01             	and    ecx,0x1
c001cc33:	89 ce                	mov    esi,ecx
c001cc35:	8a 08                	mov    cl,BYTE PTR [eax]
c001cc37:	c1 e6 06             	shl    esi,0x6
c001cc3a:	83 e1 bf             	and    ecx,0xffffffbf
c001cc3d:	09 f1                	or     ecx,esi
c001cc3f:	88 08                	mov    BYTE PTR [eax],cl
c001cc41:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc43:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc49:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc4f:	89 08                	mov    DWORD PTR [eax],ecx
c001cc51:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc57:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc5d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc63:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc66:	50                   	push   eax
c001cc67:	68 90 00 00 00       	push   0x90
c001cc6c:	6a 00                	push   0x0
c001cc6e:	56                   	push   esi
c001cc6f:	e8 7c 38 fe ff       	call   c00004f0 <memset>
c001cc74:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc7a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc84:	83 c4 10             	add    esp,0x10
c001cc87:	48                   	dec    eax
c001cc88:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc8d:	89 c1                	mov    ecx,eax
c001cc8f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc95:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc9a:	09 c8                	or     eax,ecx
c001cc9c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cca2:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cca8:	83 c8 80             	or     eax,0xffffff80
c001ccab:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ccb1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ccb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccb8:	25 00 7f 00 00       	and    eax,0x7f00
c001ccbd:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ccc2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ccc7:	66 89 06             	mov    WORD PTR [esi],ax
c001ccca:	b0 35                	mov    al,0x35
c001cccc:	75 02                	jne    c001ccd0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001ccce:	b0 25                	mov    al,0x25
c001ccd0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ccd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccd7:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ccdb:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ccdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cce3:	c1 e8 10             	shr    eax,0x10
c001cce6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cce9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cced:	c1 e8 18             	shr    eax,0x18
c001ccf0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ccf3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ccf7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ccfa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccfe:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cd01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cd05:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cd09:	89 ee                	mov    esi,ebp
c001cd0b:	31 c0                	xor    eax,eax
c001cd0d:	c1 e6 07             	shl    esi,0x7
c001cd10:	01 d6                	add    esi,edx
c001cd12:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cd18:	80 e1 88             	and    cl,0x88
c001cd1b:	74 0a                	je     c001cd27 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cd1d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd22:	74 0a                	je     c001cd2e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cd24:	40                   	inc    eax
c001cd25:	eb eb                	jmp    c001cd12 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cd27:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd2c:	75 17                	jne    c001cd45 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cd2e:	83 ec 0c             	sub    esp,0xc
c001cd31:	68 d9 1c 02 c0       	push   0xc0021cd9
c001cd36:	e8 6f dc fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001cd3b:	83 c4 10             	add    esp,0x10
c001cd3e:	b8 01 00 00 00       	mov    eax,0x1
c001cd43:	eb 5b                	jmp    c001cda0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd45:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cd49:	c1 e5 07             	shl    ebp,0x7
c001cd4c:	b8 01 00 00 00       	mov    eax,0x1
c001cd51:	01 ea                	add    edx,ebp
c001cd53:	d3 e0                	shl    eax,cl
c001cd55:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd5b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd61:	85 c8                	test   eax,ecx
c001cd63:	74 16                	je     c001cd7b <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001cd65:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd6b:	0f ba e1 1e          	bt     ecx,0x1e
c001cd6f:	73 ea                	jae    c001cd5b <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	68 e7 1c 02 c0       	push   0xc0021ce7
c001cd79:	eb bb                	jmp    c001cd36 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd7b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd81:	0f ba e0 1e          	bt     eax,0x1e
c001cd85:	72 b7                	jb     c001cd3e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd87:	31 c0                	xor    eax,eax
c001cd89:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cd8e:	75 10                	jne    c001cda0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd90:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd96:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cd9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cda0:	83 c4 2c             	add    esp,0x2c
c001cda3:	5b                   	pop    ebx
c001cda4:	5e                   	pop    esi
c001cda5:	5f                   	pop    edi
c001cda6:	5d                   	pop    ebp
c001cda7:	c3                   	ret    

c001cda8 <SATA::read(unsigned long long, int, void*)>:
c001cda8:	55                   	push   ebp
c001cda9:	57                   	push   edi
c001cdaa:	56                   	push   esi
c001cdab:	be 04 00 00 00       	mov    esi,0x4
c001cdb0:	53                   	push   ebx
c001cdb1:	83 ec 0c             	sub    esp,0xc
c001cdb4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdc0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdc4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdc7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdcd:	0f 87 1a 02 00 00    	ja     c001cfed <SATA::read(unsigned long long, int, void*)+0x245>
c001cdd3:	85 c9                	test   ecx,ecx
c001cdd5:	be 06 00 00 00       	mov    esi,0x6
c001cdda:	0f 84 0d 02 00 00    	je     c001cfed <SATA::read(unsigned long long, int, void*)+0x245>
c001cde0:	56                   	push   esi
c001cde1:	56                   	push   esi
c001cde2:	6a 00                	push   0x0
c001cde4:	51                   	push   ecx
c001cde5:	53                   	push   ebx
c001cde6:	52                   	push   edx
c001cde7:	50                   	push   eax
c001cde8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdec:	e8 65 fd ff ff       	call   c001cb56 <SATA::access(unsigned long long, int, void*, bool)>
c001cdf1:	83 c4 20             	add    esp,0x20
c001cdf4:	85 c0                	test   eax,eax
c001cdf6:	89 c6                	mov    esi,eax
c001cdf8:	0f 85 ea 01 00 00    	jne    c001cfe8 <SATA::read(unsigned long long, int, void*)+0x240>
c001cdfe:	50                   	push   eax
c001cdff:	50                   	push   eax
c001ce00:	6a 0f                	push   0xf
c001ce02:	6a 00                	push   0x0
c001ce04:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001ce0a:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce0f:	e8 7d f2 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001ce14:	5a                   	pop    edx
c001ce15:	59                   	pop    ecx
c001ce16:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce1b:	0f b6 c0             	movzx  eax,al
c001ce1e:	50                   	push   eax
c001ce1f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce24:	99                   	cdq    
c001ce25:	f7 f9                	idiv   ecx
c001ce27:	99                   	cdq    
c001ce28:	f7 fb                	idiv   ebx
c001ce2a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce2d:	0f b6 c0             	movzx  eax,al
c001ce30:	50                   	push   eax
c001ce31:	e8 4a f2 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001ce36:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce3c:	5f                   	pop    edi
c001ce3d:	5d                   	pop    ebp
c001ce3e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce43:	6a 0f                	push   0xf
c001ce45:	6a 00                	push   0x0
c001ce47:	e8 45 f2 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001ce4c:	5a                   	pop    edx
c001ce4d:	59                   	pop    ecx
c001ce4e:	0f b6 c0             	movzx  eax,al
c001ce51:	50                   	push   eax
c001ce52:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce57:	99                   	cdq    
c001ce58:	f7 fd                	idiv   ebp
c001ce5a:	99                   	cdq    
c001ce5b:	f7 fb                	idiv   ebx
c001ce5d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce60:	0f b6 c0             	movzx  eax,al
c001ce63:	50                   	push   eax
c001ce64:	e8 17 f2 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001ce69:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce6f:	5f                   	pop    edi
c001ce70:	bf 64 00 00 00       	mov    edi,0x64
c001ce75:	58                   	pop    eax
c001ce76:	6a 0f                	push   0xf
c001ce78:	6a 00                	push   0x0
c001ce7a:	e8 12 f2 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001ce7f:	5a                   	pop    edx
c001ce80:	59                   	pop    ecx
c001ce81:	0f b6 c0             	movzx  eax,al
c001ce84:	50                   	push   eax
c001ce85:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce8a:	99                   	cdq    
c001ce8b:	f7 ff                	idiv   edi
c001ce8d:	99                   	cdq    
c001ce8e:	f7 fb                	idiv   ebx
c001ce90:	8d 42 30             	lea    eax,[edx+0x30]
c001ce93:	0f b6 c0             	movzx  eax,al
c001ce96:	50                   	push   eax
c001ce97:	e8 e4 f1 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001ce9c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cea2:	58                   	pop    eax
c001cea3:	5a                   	pop    edx
c001cea4:	6a 0f                	push   0xf
c001cea6:	6a 00                	push   0x0
c001cea8:	e8 e4 f1 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001cead:	59                   	pop    ecx
c001ceae:	5a                   	pop    edx
c001ceaf:	0f b6 c0             	movzx  eax,al
c001ceb2:	50                   	push   eax
c001ceb3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceb8:	99                   	cdq    
c001ceb9:	f7 fb                	idiv   ebx
c001cebb:	99                   	cdq    
c001cebc:	f7 fb                	idiv   ebx
c001cebe:	8d 42 30             	lea    eax,[edx+0x30]
c001cec1:	0f b6 c0             	movzx  eax,al
c001cec4:	50                   	push   eax
c001cec5:	e8 b6 f1 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001ceca:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ced0:	59                   	pop    ecx
c001ced1:	58                   	pop    eax
c001ced2:	6a 0f                	push   0xf
c001ced4:	6a 00                	push   0x0
c001ced6:	e8 b6 f1 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001cedb:	5a                   	pop    edx
c001cedc:	59                   	pop    ecx
c001cedd:	0f b6 c0             	movzx  eax,al
c001cee0:	50                   	push   eax
c001cee1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cee6:	99                   	cdq    
c001cee7:	f7 fb                	idiv   ebx
c001cee9:	83 c2 30             	add    edx,0x30
c001ceec:	0f b6 d2             	movzx  edx,dl
c001ceef:	52                   	push   edx
c001cef0:	e8 8b f1 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001cef5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cefb:	58                   	pop    eax
c001cefc:	5a                   	pop    edx
c001cefd:	6a 0f                	push   0xf
c001ceff:	6a 00                	push   0x0
c001cf01:	e8 8b f1 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001cf06:	59                   	pop    ecx
c001cf07:	b9 10 27 00 00       	mov    ecx,0x2710
c001cf0c:	5a                   	pop    edx
c001cf0d:	0f b6 c0             	movzx  eax,al
c001cf10:	50                   	push   eax
c001cf11:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf16:	99                   	cdq    
c001cf17:	f7 f9                	idiv   ecx
c001cf19:	99                   	cdq    
c001cf1a:	f7 fb                	idiv   ebx
c001cf1c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf1f:	0f b6 c0             	movzx  eax,al
c001cf22:	50                   	push   eax
c001cf23:	e8 58 f1 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001cf28:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf2e:	59                   	pop    ecx
c001cf2f:	58                   	pop    eax
c001cf30:	6a 0f                	push   0xf
c001cf32:	6a 00                	push   0x0
c001cf34:	e8 58 f1 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001cf39:	5a                   	pop    edx
c001cf3a:	59                   	pop    ecx
c001cf3b:	0f b6 c0             	movzx  eax,al
c001cf3e:	50                   	push   eax
c001cf3f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf44:	99                   	cdq    
c001cf45:	f7 fd                	idiv   ebp
c001cf47:	99                   	cdq    
c001cf48:	f7 fb                	idiv   ebx
c001cf4a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf4d:	0f b6 c0             	movzx  eax,al
c001cf50:	50                   	push   eax
c001cf51:	e8 2a f1 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001cf56:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf5c:	5d                   	pop    ebp
c001cf5d:	58                   	pop    eax
c001cf5e:	6a 0f                	push   0xf
c001cf60:	6a 00                	push   0x0
c001cf62:	e8 2a f1 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001cf67:	5a                   	pop    edx
c001cf68:	59                   	pop    ecx
c001cf69:	0f b6 c0             	movzx  eax,al
c001cf6c:	50                   	push   eax
c001cf6d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf72:	99                   	cdq    
c001cf73:	f7 ff                	idiv   edi
c001cf75:	99                   	cdq    
c001cf76:	f7 fb                	idiv   ebx
c001cf78:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7b:	0f b6 c0             	movzx  eax,al
c001cf7e:	50                   	push   eax
c001cf7f:	e8 fc f0 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001cf84:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf8a:	5f                   	pop    edi
c001cf8b:	5d                   	pop    ebp
c001cf8c:	6a 0f                	push   0xf
c001cf8e:	6a 00                	push   0x0
c001cf90:	e8 fc f0 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001cf95:	5a                   	pop    edx
c001cf96:	59                   	pop    ecx
c001cf97:	0f b6 c0             	movzx  eax,al
c001cf9a:	50                   	push   eax
c001cf9b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfa0:	99                   	cdq    
c001cfa1:	f7 fb                	idiv   ebx
c001cfa3:	99                   	cdq    
c001cfa4:	f7 fb                	idiv   ebx
c001cfa6:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa9:	0f b6 c0             	movzx  eax,al
c001cfac:	50                   	push   eax
c001cfad:	e8 ce f0 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001cfb2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfb8:	5f                   	pop    edi
c001cfb9:	5d                   	pop    ebp
c001cfba:	6a 0f                	push   0xf
c001cfbc:	6a 00                	push   0x0
c001cfbe:	e8 ce f0 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001cfc3:	5a                   	pop    edx
c001cfc4:	59                   	pop    ecx
c001cfc5:	0f b6 c0             	movzx  eax,al
c001cfc8:	50                   	push   eax
c001cfc9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfce:	99                   	cdq    
c001cfcf:	f7 fb                	idiv   ebx
c001cfd1:	83 c2 30             	add    edx,0x30
c001cfd4:	0f b6 d2             	movzx  edx,dl
c001cfd7:	52                   	push   edx
c001cfd8:	e8 a3 f0 ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cfe6:	eb 05                	jmp    c001cfed <SATA::read(unsigned long long, int, void*)+0x245>
c001cfe8:	be 01 00 00 00       	mov    esi,0x1
c001cfed:	83 c4 0c             	add    esp,0xc
c001cff0:	89 f0                	mov    eax,esi
c001cff2:	5b                   	pop    ebx
c001cff3:	5e                   	pop    esi
c001cff4:	5f                   	pop    edi
c001cff5:	5d                   	pop    ebp
c001cff6:	c3                   	ret    
c001cff7:	90                   	nop

c001cff8 <SATA::write(unsigned long long, int, void*)>:
c001cff8:	55                   	push   ebp
c001cff9:	57                   	push   edi
c001cffa:	56                   	push   esi
c001cffb:	53                   	push   ebx
c001cffc:	83 ec 0c             	sub    esp,0xc
c001cfff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d003:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d007:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d00b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d00f:	8d 70 ff             	lea    esi,[eax-0x1]
c001d012:	b8 04 00 00 00       	mov    eax,0x4
c001d017:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d01d:	0f 87 2c 02 00 00    	ja     c001d24f <SATA::write(unsigned long long, int, void*)+0x257>
c001d023:	85 db                	test   ebx,ebx
c001d025:	b8 06 00 00 00       	mov    eax,0x6
c001d02a:	0f 84 1f 02 00 00    	je     c001d24f <SATA::write(unsigned long long, int, void*)+0x257>
c001d030:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d034:	c1 e6 09             	shl    esi,0x9
c001d037:	01 de                	add    esi,ebx
c001d039:	50                   	push   eax
c001d03a:	89 d7                	mov    edi,edx
c001d03c:	50                   	push   eax
c001d03d:	83 c7 01             	add    edi,0x1
c001d040:	6a 01                	push   0x1
c001d042:	89 cd                	mov    ebp,ecx
c001d044:	53                   	push   ebx
c001d045:	83 d5 00             	adc    ebp,0x0
c001d048:	6a 01                	push   0x1
c001d04a:	81 c3 00 02 00 00    	add    ebx,0x200
c001d050:	51                   	push   ecx
c001d051:	52                   	push   edx
c001d052:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d056:	e8 fb fa ff ff       	call   c001cb56 <SATA::access(unsigned long long, int, void*, bool)>
c001d05b:	83 c4 20             	add    esp,0x20
c001d05e:	39 f3                	cmp    ebx,esi
c001d060:	89 fa                	mov    edx,edi
c001d062:	89 e9                	mov    ecx,ebp
c001d064:	75 d3                	jne    c001d039 <SATA::write(unsigned long long, int, void*)+0x41>
c001d066:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d06a:	bd 10 27 00 00       	mov    ebp,0x2710
c001d06f:	bb 0a 00 00 00       	mov    ebx,0xa
c001d074:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d07a:	50                   	push   eax
c001d07b:	50                   	push   eax
c001d07c:	6a 0f                	push   0xf
c001d07e:	6a 00                	push   0x0
c001d080:	e8 0c f0 ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d085:	5a                   	pop    edx
c001d086:	59                   	pop    ecx
c001d087:	0f b6 c0             	movzx  eax,al
c001d08a:	50                   	push   eax
c001d08b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d090:	99                   	cdq    
c001d091:	f7 fd                	idiv   ebp
c001d093:	99                   	cdq    
c001d094:	f7 fb                	idiv   ebx
c001d096:	8d 42 30             	lea    eax,[edx+0x30]
c001d099:	0f b6 c0             	movzx  eax,al
c001d09c:	50                   	push   eax
c001d09d:	e8 de ef ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d0a2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d0a8:	5e                   	pop    esi
c001d0a9:	5f                   	pop    edi
c001d0aa:	bf e8 03 00 00       	mov    edi,0x3e8
c001d0af:	6a 0f                	push   0xf
c001d0b1:	6a 00                	push   0x0
c001d0b3:	e8 d9 ef ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d0b8:	5a                   	pop    edx
c001d0b9:	59                   	pop    ecx
c001d0ba:	0f b6 c0             	movzx  eax,al
c001d0bd:	50                   	push   eax
c001d0be:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0c3:	99                   	cdq    
c001d0c4:	f7 ff                	idiv   edi
c001d0c6:	99                   	cdq    
c001d0c7:	f7 fb                	idiv   ebx
c001d0c9:	8d 42 30             	lea    eax,[edx+0x30]
c001d0cc:	0f b6 c0             	movzx  eax,al
c001d0cf:	50                   	push   eax
c001d0d0:	e8 ab ef ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d0d5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d0db:	5e                   	pop    esi
c001d0dc:	be 64 00 00 00       	mov    esi,0x64
c001d0e1:	58                   	pop    eax
c001d0e2:	6a 0f                	push   0xf
c001d0e4:	6a 00                	push   0x0
c001d0e6:	e8 a6 ef ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d0eb:	5a                   	pop    edx
c001d0ec:	59                   	pop    ecx
c001d0ed:	0f b6 c0             	movzx  eax,al
c001d0f0:	50                   	push   eax
c001d0f1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0f6:	99                   	cdq    
c001d0f7:	f7 fe                	idiv   esi
c001d0f9:	99                   	cdq    
c001d0fa:	f7 fb                	idiv   ebx
c001d0fc:	8d 42 30             	lea    eax,[edx+0x30]
c001d0ff:	0f b6 c0             	movzx  eax,al
c001d102:	50                   	push   eax
c001d103:	e8 78 ef ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d108:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d10e:	58                   	pop    eax
c001d10f:	5a                   	pop    edx
c001d110:	6a 0f                	push   0xf
c001d112:	6a 00                	push   0x0
c001d114:	e8 78 ef ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d119:	59                   	pop    ecx
c001d11a:	5a                   	pop    edx
c001d11b:	0f b6 c0             	movzx  eax,al
c001d11e:	50                   	push   eax
c001d11f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d124:	99                   	cdq    
c001d125:	f7 fb                	idiv   ebx
c001d127:	99                   	cdq    
c001d128:	f7 fb                	idiv   ebx
c001d12a:	8d 42 30             	lea    eax,[edx+0x30]
c001d12d:	0f b6 c0             	movzx  eax,al
c001d130:	50                   	push   eax
c001d131:	e8 4a ef ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d136:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d13c:	59                   	pop    ecx
c001d13d:	58                   	pop    eax
c001d13e:	6a 0f                	push   0xf
c001d140:	6a 00                	push   0x0
c001d142:	e8 4a ef ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d147:	5a                   	pop    edx
c001d148:	59                   	pop    ecx
c001d149:	0f b6 c0             	movzx  eax,al
c001d14c:	50                   	push   eax
c001d14d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d152:	99                   	cdq    
c001d153:	f7 fb                	idiv   ebx
c001d155:	83 c2 30             	add    edx,0x30
c001d158:	0f b6 d2             	movzx  edx,dl
c001d15b:	52                   	push   edx
c001d15c:	e8 1f ef ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d161:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d167:	58                   	pop    eax
c001d168:	5a                   	pop    edx
c001d169:	6a 0f                	push   0xf
c001d16b:	6a 00                	push   0x0
c001d16d:	e8 1f ef ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d172:	59                   	pop    ecx
c001d173:	5a                   	pop    edx
c001d174:	0f b6 c0             	movzx  eax,al
c001d177:	50                   	push   eax
c001d178:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d17d:	99                   	cdq    
c001d17e:	f7 fd                	idiv   ebp
c001d180:	99                   	cdq    
c001d181:	f7 fb                	idiv   ebx
c001d183:	8d 42 30             	lea    eax,[edx+0x30]
c001d186:	0f b6 c0             	movzx  eax,al
c001d189:	50                   	push   eax
c001d18a:	e8 f1 ee ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d18f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d195:	59                   	pop    ecx
c001d196:	5d                   	pop    ebp
c001d197:	6a 0f                	push   0xf
c001d199:	6a 00                	push   0x0
c001d19b:	e8 f1 ee ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d1a0:	5a                   	pop    edx
c001d1a1:	59                   	pop    ecx
c001d1a2:	0f b6 c0             	movzx  eax,al
c001d1a5:	50                   	push   eax
c001d1a6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1ab:	99                   	cdq    
c001d1ac:	f7 ff                	idiv   edi
c001d1ae:	99                   	cdq    
c001d1af:	f7 fb                	idiv   ebx
c001d1b1:	8d 42 30             	lea    eax,[edx+0x30]
c001d1b4:	0f b6 c0             	movzx  eax,al
c001d1b7:	50                   	push   eax
c001d1b8:	e8 c3 ee ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d1bd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1c3:	5f                   	pop    edi
c001d1c4:	5d                   	pop    ebp
c001d1c5:	6a 0f                	push   0xf
c001d1c7:	6a 00                	push   0x0
c001d1c9:	e8 c3 ee ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d1ce:	5a                   	pop    edx
c001d1cf:	59                   	pop    ecx
c001d1d0:	0f b6 c0             	movzx  eax,al
c001d1d3:	50                   	push   eax
c001d1d4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1d9:	99                   	cdq    
c001d1da:	f7 fe                	idiv   esi
c001d1dc:	99                   	cdq    
c001d1dd:	f7 fb                	idiv   ebx
c001d1df:	8d 42 30             	lea    eax,[edx+0x30]
c001d1e2:	0f b6 c0             	movzx  eax,al
c001d1e5:	50                   	push   eax
c001d1e6:	e8 95 ee ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d1eb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d1f1:	5e                   	pop    esi
c001d1f2:	5f                   	pop    edi
c001d1f3:	6a 0f                	push   0xf
c001d1f5:	6a 00                	push   0x0
c001d1f7:	e8 95 ee ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d1fc:	5d                   	pop    ebp
c001d1fd:	5a                   	pop    edx
c001d1fe:	0f b6 c0             	movzx  eax,al
c001d201:	50                   	push   eax
c001d202:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d207:	99                   	cdq    
c001d208:	f7 fb                	idiv   ebx
c001d20a:	99                   	cdq    
c001d20b:	f7 fb                	idiv   ebx
c001d20d:	8d 42 30             	lea    eax,[edx+0x30]
c001d210:	0f b6 c0             	movzx  eax,al
c001d213:	50                   	push   eax
c001d214:	e8 67 ee ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d219:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d21f:	59                   	pop    ecx
c001d220:	5e                   	pop    esi
c001d221:	6a 0f                	push   0xf
c001d223:	6a 00                	push   0x0
c001d225:	e8 67 ee ff ff       	call   c001c091 <combineColours(unsigned char, unsigned char)>
c001d22a:	5f                   	pop    edi
c001d22b:	5d                   	pop    ebp
c001d22c:	0f b6 c0             	movzx  eax,al
c001d22f:	50                   	push   eax
c001d230:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d235:	99                   	cdq    
c001d236:	f7 fb                	idiv   ebx
c001d238:	83 c2 30             	add    edx,0x30
c001d23b:	0f b6 d2             	movzx  edx,dl
c001d23e:	52                   	push   edx
c001d23f:	e8 3c ee ff ff       	call   c001c080 <combineCharAndColour(char, unsigned char)>
c001d244:	83 c4 10             	add    esp,0x10
c001d247:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d24d:	31 c0                	xor    eax,eax
c001d24f:	83 c4 0c             	add    esp,0xc
c001d252:	5b                   	pop    ebx
c001d253:	5e                   	pop    esi
c001d254:	5f                   	pop    edi
c001d255:	5d                   	pop    ebp
c001d256:	c3                   	ret    
c001d257:	90                   	nop

c001d258 <SATAPI::write(unsigned long long, int, void*)>:
c001d258:	b8 03 00 00 00       	mov    eax,0x3
c001d25d:	c3                   	ret    

c001d25e <SATAPI::close(int, int, void*)>:
c001d25e:	83 ec 0c             	sub    esp,0xc
c001d261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d265:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d26b:	85 c0                	test   eax,eax
c001d26d:	74 0c                	je     c001d27b <SATAPI::close(int, int, void*)+0x1d>
c001d26f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d271:	83 ec 0c             	sub    esp,0xc
c001d274:	50                   	push   eax
c001d275:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	31 c0                	xor    eax,eax
c001d27d:	83 c4 0c             	add    esp,0xc
c001d280:	c3                   	ret    
c001d281:	90                   	nop

c001d282 <SATAPI::SATAPI()>:
c001d282:	83 ec 0c             	sub    esp,0xc
c001d285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d289:	83 ec 04             	sub    esp,0x4
c001d28c:	68 00 08 00 00       	push   0x800
c001d291:	68 30 1d 02 c0       	push   0xc0021d30
c001d296:	50                   	push   eax
c001d297:	e8 3e ef fe ff       	call   c000c1da <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	ba 24 1e 02 c0       	mov    edx,0xc0021e24
c001d2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a8:	89 10                	mov    DWORD PTR [eax],edx
c001d2aa:	90                   	nop
c001d2ab:	83 c4 0c             	add    esp,0xc
c001d2ae:	c3                   	ret    
c001d2af:	90                   	nop

c001d2b0 <SATAPI::diskRemoved()>:
c001d2b0:	c3                   	ret    
c001d2b1:	90                   	nop

c001d2b2 <SATAPI::diskInserted()>:
c001d2b2:	83 ec 18             	sub    esp,0x18
c001d2b5:	68 3c 1d 02 c0       	push   0xc0021d3c
c001d2ba:	e8 eb d6 fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001d2bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d2ca:	83 c4 1c             	add    esp,0x1c
c001d2cd:	c3                   	ret    

c001d2ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d2ce:	55                   	push   ebp
c001d2cf:	57                   	push   edi
c001d2d0:	56                   	push   esi
c001d2d1:	53                   	push   ebx
c001d2d2:	83 ec 34             	sub    esp,0x34
c001d2d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d2d9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d2dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2e1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d2e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2e9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d2ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2f9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d2ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d303:	83 c0 02             	add    eax,0x2
c001d306:	c1 e0 07             	shl    eax,0x7
c001d309:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d30d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d311:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d315:	c1 e0 07             	shl    eax,0x7
c001d318:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d31c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d320:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d32a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d32e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d334:	e8 ff e4 ff ff       	call   c001b838 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d339:	83 c4 10             	add    esp,0x10
c001d33c:	89 c2                	mov    edx,eax
c001d33e:	b8 01 00 00 00       	mov    eax,0x1
c001d343:	83 fa ff             	cmp    edx,0xffffffff
c001d346:	0f 84 5f 02 00 00    	je     c001d5ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d34c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d354:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d35a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d35c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d362:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d368:	89 d1                	mov    ecx,edx
c001d36a:	c1 e1 05             	shl    ecx,0x5
c001d36d:	01 c8                	add    eax,ecx
c001d36f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d371:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d377:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d37d:	89 08                	mov    DWORD PTR [eax],ecx
c001d37f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d385:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d38b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d391:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d394:	50                   	push   eax
c001d395:	68 90 00 00 00       	push   0x90
c001d39a:	6a 00                	push   0x0
c001d39c:	53                   	push   ebx
c001d39d:	e8 4e 31 fe ff       	call   c00004f0 <memset>
c001d3a2:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d3a5:	b9 0c 00 00 00       	mov    ecx,0xc
c001d3aa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d3ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3b0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d3b6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d3ba:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d3be:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d3c4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d3c8:	48                   	dec    eax
c001d3c9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d3ce:	89 c1                	mov    ecx,eax
c001d3d0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d3d6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d3db:	09 c8                	or     eax,ecx
c001d3dd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d3e3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d3e9:	83 c8 80             	or     eax,0xffffff80
c001d3ec:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d3f2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d3f5:	25 00 7f 00 00       	and    eax,0x7f00
c001d3fa:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d3ff:	66 89 03             	mov    WORD PTR [ebx],ax
c001d402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d406:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d40a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d40e:	c1 e8 10             	shr    eax,0x10
c001d411:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d418:	c1 e8 18             	shr    eax,0x18
c001d41b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d41e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d422:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d429:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d42c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d430:	83 c4 10             	add    esp,0x10
c001d433:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d437:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d43b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d43f:	31 c0                	xor    eax,eax
c001d441:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d447:	80 e1 88             	and    cl,0x88
c001d44a:	74 0a                	je     c001d456 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d44c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d451:	74 0a                	je     c001d45d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d453:	40                   	inc    eax
c001d454:	eb eb                	jmp    c001d441 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d456:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d45b:	75 43                	jne    c001d4a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d45d:	83 ec 0c             	sub    esp,0xc
c001d460:	68 54 1d 02 c0       	push   0xc0021d54
c001d465:	e8 40 d5 fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001d46a:	58                   	pop    eax
c001d46b:	5a                   	pop    edx
c001d46c:	68 69 1d 02 c0       	push   0xc0021d69
c001d471:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d477:	e8 1a b6 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c001d47c:	59                   	pop    ecx
c001d47d:	5b                   	pop    ebx
c001d47e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d482:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d488:	e8 45 e4 ff ff       	call   c001b8d2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d48d:	5e                   	pop    esi
c001d48e:	5f                   	pop    edi
c001d48f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d493:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d499:	e8 14 e4 ff ff       	call   c001b8b2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d49e:	eb 48                	jmp    c001d4e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d4a0:	b8 01 00 00 00       	mov    eax,0x1
c001d4a5:	88 d1                	mov    cl,dl
c001d4a7:	d3 e0                	shl    eax,cl
c001d4a9:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d4ae:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d4b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d4b8:	89 c7                	mov    edi,eax
c001d4ba:	c1 e3 07             	shl    ebx,0x7
c001d4bd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d4c1:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d4c7:	85 c7                	test   edi,eax
c001d4c9:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d4cf:	0f 84 a3 00 00 00    	je     c001d578 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d4d5:	0f ba e0 1e          	bt     eax,0x1e
c001d4d9:	73 1a                	jae    c001d4f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d4db:	83 ec 0c             	sub    esp,0xc
c001d4de:	68 7b 1d 02 c0       	push   0xc0021d7b
c001d4e3:	e8 c2 d4 fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001d4e8:	83 c4 10             	add    esp,0x10
c001d4eb:	b8 01 00 00 00       	mov    eax,0x1
c001d4f0:	e9 b6 00 00 00       	jmp    c001d5ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d4f5:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d4fb:	83 f8 0d             	cmp    eax,0xd
c001d4fe:	77 0a                	ja     c001d50a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d500:	83 ec 0c             	sub    esp,0xc
c001d503:	68 c8 00 00 00       	push   0xc8
c001d508:	eb 28                	jmp    c001d532 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d50a:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d510:	83 f8 0d             	cmp    eax,0xd
c001d513:	77 0a                	ja     c001d51f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d515:	83 ec 0c             	sub    esp,0xc
c001d518:	68 58 02 00 00       	push   0x258
c001d51d:	eb 13                	jmp    c001d532 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d51f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d525:	83 f8 06             	cmp    eax,0x6
c001d528:	77 10                	ja     c001d53a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d52a:	83 ec 0c             	sub    esp,0xc
c001d52d:	68 dc 05 00 00       	push   0x5dc
c001d532:	e8 55 7e ff ff       	call   c001538c <milliTenthSleep(unsigned int)>
c001d537:	83 c4 10             	add    esp,0x10
c001d53a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d53e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d541:	75 06                	jne    c001d549 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d543:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d547:	74 15                	je     c001d55e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d549:	83 fe 06             	cmp    esi,0x6
c001d54c:	77 10                	ja     c001d55e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d54e:	83 ec 0c             	sub    esp,0xc
c001d551:	68 c4 09 00 00       	push   0x9c4
c001d556:	e8 31 7e ff ff       	call   c001538c <milliTenthSleep(unsigned int)>
c001d55b:	83 c4 10             	add    esp,0x10
c001d55e:	46                   	inc    esi
c001d55f:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d565:	0f 85 56 ff ff ff    	jne    c001d4c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	68 8e 1d 02 c0       	push   0xc0021d8e
c001d573:	e9 6b ff ff ff       	jmp    c001d4e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d578:	0f ba e0 1e          	bt     eax,0x1e
c001d57c:	73 0d                	jae    c001d58b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d57e:	83 ec 0c             	sub    esp,0xc
c001d581:	68 a2 1d 02 c0       	push   0xc0021da2
c001d586:	e9 58 ff ff ff       	jmp    c001d4e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d58b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d590:	74 17                	je     c001d5a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d592:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d597:	74 10                	je     c001d5a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d599:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d59f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d5a3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d5a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5a9:	31 c0                	xor    eax,eax
c001d5ab:	83 c4 2c             	add    esp,0x2c
c001d5ae:	5b                   	pop    ebx
c001d5af:	5e                   	pop    esi
c001d5b0:	5f                   	pop    edi
c001d5b1:	5d                   	pop    ebp
c001d5b2:	c3                   	ret    
c001d5b3:	90                   	nop

c001d5b4 <SATAPI::eject()>:
c001d5b4:	57                   	push   edi
c001d5b5:	b9 03 00 00 00       	mov    ecx,0x3
c001d5ba:	83 ec 18             	sub    esp,0x18
c001d5bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5c1:	fc                   	cld    
c001d5c2:	31 c0                	xor    eax,eax
c001d5c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5c6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5cb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5d0:	50                   	push   eax
c001d5d1:	6a 00                	push   0x0
c001d5d3:	6a 00                	push   0x0
c001d5d5:	6a 00                	push   0x0
c001d5d7:	6a 00                	push   0x0
c001d5d9:	6a 02                	push   0x2
c001d5db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5df:	50                   	push   eax
c001d5e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5e4:	e8 e5 fc ff ff       	call   c001d2ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5e9:	83 c4 38             	add    esp,0x38
c001d5ec:	31 c0                	xor    eax,eax
c001d5ee:	5f                   	pop    edi
c001d5ef:	c3                   	ret    

c001d5f0 <SATAPI::detectMedia()>:
c001d5f0:	53                   	push   ebx
c001d5f1:	83 ec 14             	sub    esp,0x14
c001d5f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5f8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5fe:	e8 5d 05 ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c001d603:	59                   	pop    ecx
c001d604:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d60a:	e8 41 05 ff ff       	call   c000db50 <VCache::invalidateReadBuffer()>
c001d60f:	c7 04 24 b7 1d 02 c0 	mov    DWORD PTR [esp],0xc0021db7
c001d616:	e8 8f d3 fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	31 c0                	xor    eax,eax
c001d620:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d627:	85 d2                	test   edx,edx
c001d629:	74 0f                	je     c001d63a <SATAPI::detectMedia()+0x4a>
c001d62b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d631:	75 07                	jne    c001d63a <SATAPI::detectMedia()+0x4a>
c001d633:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d63a:	40                   	inc    eax
c001d63b:	83 f8 1a             	cmp    eax,0x1a
c001d63e:	75 e0                	jne    c001d620 <SATAPI::detectMedia()+0x30>
c001d640:	83 c4 08             	add    esp,0x8
c001d643:	5b                   	pop    ebx
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <SATAPI::open(int, int, void*)>:
c001d646:	56                   	push   esi
c001d647:	53                   	push   ebx
c001d648:	51                   	push   ecx
c001d649:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d64d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d651:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d65b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d661:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d665:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d66f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d679:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d680:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d686:	e8 4b a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d68b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d691:	89 c6                	mov    esi,eax
c001d693:	e8 3e a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d698:	81 c6 00 10 00 00    	add    esi,0x1000
c001d69e:	39 c6                	cmp    esi,eax
c001d6a0:	74 10                	je     c001d6b2 <SATAPI::open(int, int, void*)+0x6c>
c001d6a2:	83 ec 0c             	sub    esp,0xc
c001d6a5:	68 cc 1d 02 c0       	push   0xc0021dcc
c001d6aa:	e8 c6 31 ff ff       	call   c0010875 <KePanic(char const*)>
c001d6af:	83 c4 10             	add    esp,0x10
c001d6b2:	83 ec 0c             	sub    esp,0xc
c001d6b5:	6a 02                	push   0x2
c001d6b7:	e8 49 bf fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001d6bc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d6c2:	6a 03                	push   0x3
c001d6c4:	50                   	push   eax
c001d6c5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d6cb:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d6d1:	e8 0e c6 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6d6:	83 c4 14             	add    esp,0x14
c001d6d9:	68 78 01 00 00       	push   0x178
c001d6de:	e8 e8 a3 fe ff       	call   c0007acb <malloc>
c001d6e3:	83 c4 0c             	add    esp,0xc
c001d6e6:	6a 00                	push   0x0
c001d6e8:	68 ff ff ff 7f       	push   0x7fffffff
c001d6ed:	6a 00                	push   0x0
c001d6ef:	6a 00                	push   0x0
c001d6f1:	53                   	push   ebx
c001d6f2:	68 e2 1d 02 c0       	push   0xc0021de2
c001d6f7:	89 c6                	mov    esi,eax
c001d6f9:	50                   	push   eax
c001d6fa:	e8 bb f8 fe ff       	call   c000cfba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6ff:	83 c4 14             	add    esp,0x14
c001d702:	56                   	push   esi
c001d703:	e8 72 f9 fe ff       	call   c000d07a <LogicalDisk::assignDriveLetter()>
c001d708:	5a                   	pop    edx
c001d709:	59                   	pop    ecx
c001d70a:	0f be c0             	movsx  eax,al
c001d70d:	50                   	push   eax
c001d70e:	68 34 1c 02 c0       	push   0xc0021c34
c001d713:	e8 92 d2 fe ff       	call   c000a9aa <Dbg::kprintf(char const*, ...)>
c001d718:	58                   	pop    eax
c001d719:	5a                   	pop    edx
c001d71a:	56                   	push   esi
c001d71b:	53                   	push   ebx
c001d71c:	e8 eb e6 fe ff       	call   c000be0c <Device::addChild(Device*)>
c001d721:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d727:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d72a:	e8 13 eb fe ff       	call   c000c242 <PhysicalDisk::startCache()>
c001d72f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d736:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d739:	e8 b2 fe ff ff       	call   c001d5f0 <SATAPI::detectMedia()>
c001d73e:	83 c4 14             	add    esp,0x14
c001d741:	31 c0                	xor    eax,eax
c001d743:	5b                   	pop    ebx
c001d744:	5e                   	pop    esi
c001d745:	c3                   	ret    

c001d746 <SATAPI::read(unsigned long long, int, void*)>:
c001d746:	55                   	push   ebp
c001d747:	57                   	push   edi
c001d748:	56                   	push   esi
c001d749:	53                   	push   ebx
c001d74a:	83 ec 3c             	sub    esp,0x3c
c001d74d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d751:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d755:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d759:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d75d:	83 fd 04             	cmp    ebp,0x4
c001d760:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d764:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d768:	7e 10                	jle    c001d77a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d76a:	83 ec 0c             	sub    esp,0xc
c001d76d:	68 f0 1d 02 c0       	push   0xc0021df0
c001d772:	e8 fe 30 ff ff       	call   c0010875 <KePanic(char const*)>
c001d777:	83 c4 10             	add    esp,0x10
c001d77a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d780:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d786:	51                   	push   ecx
c001d787:	50                   	push   eax
c001d788:	83 c0 02             	add    eax,0x2
c001d78b:	c1 e0 07             	shl    eax,0x7
c001d78e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d794:	50                   	push   eax
c001d795:	52                   	push   edx
c001d796:	e8 61 e1 ff ff       	call   c001b8fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d79b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d79f:	b9 03 00 00 00       	mov    ecx,0x3
c001d7a4:	fc                   	cld    
c001d7a5:	31 c0                	xor    eax,eax
c001d7a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7a9:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d7ae:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d7b3:	83 c4 0c             	add    esp,0xc
c001d7b6:	6a 00                	push   0x0
c001d7b8:	6a 00                	push   0x0
c001d7ba:	6a 00                	push   0x0
c001d7bc:	6a 00                	push   0x0
c001d7be:	6a 02                	push   0x2
c001d7c0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d7c4:	50                   	push   eax
c001d7c5:	53                   	push   ebx
c001d7c6:	e8 03 fb ff ff       	call   c001d2ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7cb:	83 c4 20             	add    esp,0x20
c001d7ce:	85 c0                	test   eax,eax
c001d7d0:	89 c6                	mov    esi,eax
c001d7d2:	75 46                	jne    c001d81a <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d7d4:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d7d8:	b9 03 00 00 00       	mov    ecx,0x3
c001d7dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7e3:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d7e8:	0f c8                	bswap  eax
c001d7ea:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d7ee:	89 e8                	mov    eax,ebp
c001d7f0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d7f4:	50                   	push   eax
c001d7f5:	55                   	push   ebp
c001d7f6:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d7fa:	c1 e5 0b             	shl    ebp,0xb
c001d7fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d801:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d805:	55                   	push   ebp
c001d806:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d80a:	50                   	push   eax
c001d80b:	53                   	push   ebx
c001d80c:	e8 bd fa ff ff       	call   c001d2ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d811:	83 c4 20             	add    esp,0x20
c001d814:	85 c0                	test   eax,eax
c001d816:	89 c6                	mov    esi,eax
c001d818:	74 0c                	je     c001d826 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d81a:	83 ec 0c             	sub    esp,0xc
c001d81d:	53                   	push   ebx
c001d81e:	e8 cd fd ff ff       	call   c001d5f0 <SATAPI::detectMedia()>
c001d823:	83 c4 10             	add    esp,0x10
c001d826:	83 c4 3c             	add    esp,0x3c
c001d829:	89 f0                	mov    eax,esi
c001d82b:	5b                   	pop    ebx
c001d82c:	5e                   	pop    esi
c001d82d:	5f                   	pop    edi
c001d82e:	5d                   	pop    ebp
c001d82f:	c3                   	ret    

c001d830 <IOAPIC::close(int, int, void*)>:
c001d830:	b8 00 00 00 00       	mov    eax,0x0
c001d835:	c3                   	ret    

c001d836 <apicGetBase()>:
c001d836:	55                   	push   ebp
c001d837:	89 e5                	mov    ebp,esp
c001d839:	83 ec 18             	sub    esp,0x18
c001d83c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d841:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d847:	83 e0 08             	and    eax,0x8
c001d84a:	0f b6 c0             	movzx  eax,al
c001d84d:	85 c0                	test   eax,eax
c001d84f:	75 07                	jne    c001d858 <apicGetBase()+0x22>
c001d851:	b8 00 00 00 00       	mov    eax,0x0
c001d856:	eb 21                	jmp    c001d879 <apicGetBase()+0x43>
c001d858:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d85d:	83 ec 08             	sub    esp,0x8
c001d860:	6a 1b                	push   0x1b
c001d862:	50                   	push   eax
c001d863:	e8 72 98 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001d868:	83 c4 10             	add    esp,0x10
c001d86b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d86e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d871:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d874:	25 00 00 ff ff       	and    eax,0xffff0000
c001d879:	c9                   	leave  
c001d87a:	c3                   	ret    
c001d87b:	90                   	nop

c001d87c <IOAPIC::IOAPIC()>:
c001d87c:	83 ec 0c             	sub    esp,0xc
c001d87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d883:	83 ec 08             	sub    esp,0x8
c001d886:	68 54 1e 02 c0       	push   0xc0021e54
c001d88b:	50                   	push   eax
c001d88c:	e8 13 e7 fe ff       	call   c000bfa4 <Device::Device(char const*)>
c001d891:	83 c4 10             	add    esp,0x10
c001d894:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c001d899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d89d:	89 10                	mov    DWORD PTR [eax],edx
c001d89f:	90                   	nop
c001d8a0:	83 c4 0c             	add    esp,0xc
c001d8a3:	c3                   	ret    

c001d8a4 <apicOpen()>:
c001d8a4:	55                   	push   ebp
c001d8a5:	89 e5                	mov    ebp,esp
c001d8a7:	53                   	push   ebx
c001d8a8:	83 ec 34             	sub    esp,0x34
c001d8ab:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d8b0:	83 f0 01             	xor    eax,0x1
c001d8b3:	0f b6 c0             	movzx  eax,al
c001d8b6:	85 c0                	test   eax,eax
c001d8b8:	0f 84 a3 00 00 00    	je     c001d961 <apicOpen()+0xbd>
c001d8be:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d8c2:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d8c7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8cb:	0f b6 c0             	movzx  eax,al
c001d8ce:	39 c2                	cmp    edx,eax
c001d8d0:	0f 83 84 00 00 00    	jae    c001d95a <apicOpen()+0xb6>
c001d8d6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d8dd:	83 ec 0c             	sub    esp,0xc
c001d8e0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d8e3:	e8 e3 a1 fe ff       	call   c0007acb <malloc>
c001d8e8:	83 c4 10             	add    esp,0x10
c001d8eb:	89 c3                	mov    ebx,eax
c001d8ed:	83 ec 0c             	sub    esp,0xc
c001d8f0:	53                   	push   ebx
c001d8f1:	e8 86 ff ff ff       	call   c001d87c <IOAPIC::IOAPIC()>
c001d8f6:	83 c4 10             	add    esp,0x10
c001d8f9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d8fc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d900:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d903:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d90a:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d90f:	83 c0 01             	add    eax,0x1
c001d912:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d917:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d91c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d922:	83 ec 08             	sub    esp,0x8
c001d925:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d928:	50                   	push   eax
c001d929:	e8 de e4 fe ff       	call   c000be0c <Device::addChild(Device*)>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d934:	8b 00                	mov    eax,DWORD PTR [eax]
c001d936:	83 c0 08             	add    eax,0x8
c001d939:	8b 00                	mov    eax,DWORD PTR [eax]
c001d93b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d93f:	6a 00                	push   0x0
c001d941:	6a 00                	push   0x0
c001d943:	52                   	push   edx
c001d944:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d947:	ff d0                	call   eax
c001d949:	83 c4 10             	add    esp,0x10
c001d94c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d94f:	83 c0 01             	add    eax,0x1
c001d952:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d955:	e9 68 ff ff ff       	jmp    c001d8c2 <apicOpen()+0x1e>
c001d95a:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d961:	e8 d0 fe ff ff       	call   c001d836 <apicGetBase()>
c001d966:	05 f0 00 00 00       	add    eax,0xf0
c001d96b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d96e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d971:	8b 00                	mov    eax,DWORD PTR [eax]
c001d973:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d976:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d97d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d984:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d987:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d98a:	89 10                	mov    DWORD PTR [eax],edx
c001d98c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d993:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d998:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d99b:	7d 7c                	jge    c001da19 <apicOpen()+0x175>
c001d99d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9a0:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9a7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d9aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9ad:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9b4:	c1 e8 08             	shr    eax,0x8
c001d9b7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d9bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9be:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9c5:	c1 e8 18             	shr    eax,0x18
c001d9c8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d9cb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d9cf:	3d ff 00 00 00       	cmp    eax,0xff
c001d9d4:	75 3a                	jne    c001da10 <apicOpen()+0x16c>
c001d9d6:	e8 5b fe ff ff       	call   c001d836 <apicGetBase()>
c001d9db:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d9df:	83 fa 01             	cmp    edx,0x1
c001d9e2:	75 07                	jne    c001d9eb <apicOpen()+0x147>
c001d9e4:	ba 60 03 00 00       	mov    edx,0x360
c001d9e9:	eb 05                	jmp    c001d9f0 <apicOpen()+0x14c>
c001d9eb:	ba 50 03 00 00       	mov    edx,0x350
c001d9f0:	01 d0                	add    eax,edx
c001d9f2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d9f5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9fa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d9fd:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001da04:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001da08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da0b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da0e:	89 10                	mov    DWORD PTR [eax],edx
c001da10:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001da14:	e9 7a ff ff ff       	jmp    c001d993 <apicOpen()+0xef>
c001da19:	90                   	nop
c001da1a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001da1d:	c9                   	leave  
c001da1e:	c3                   	ret    
c001da1f:	90                   	nop

c001da20 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001da20:	55                   	push   ebp
c001da21:	89 e5                	mov    ebp,esp
c001da23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da2c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da2f:	72 1d                	jb     c001da4e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da34:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001da3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da3d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da43:	01 d0                	add    eax,edx
c001da45:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da48:	73 04                	jae    c001da4e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da4a:	b0 01                	mov    al,0x1
c001da4c:	eb 02                	jmp    c001da50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da4e:	b0 00                	mov    al,0x0
c001da50:	5d                   	pop    ebp
c001da51:	c3                   	ret    

c001da52 <IOAPIC::read(int)>:
c001da52:	55                   	push   ebp
c001da53:	89 e5                	mov    ebp,esp
c001da55:	83 ec 10             	sub    esp,0x10
c001da58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da5b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da61:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da67:	0f b6 d0             	movzx  edx,al
c001da6a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da6d:	89 10                	mov    DWORD PTR [eax],edx
c001da6f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da72:	83 c0 10             	add    eax,0x10
c001da75:	8b 00                	mov    eax,DWORD PTR [eax]
c001da77:	c9                   	leave  
c001da78:	c3                   	ret    
c001da79:	90                   	nop

c001da7a <IOAPIC::open(int, int, void*)>:
c001da7a:	55                   	push   ebp
c001da7b:	89 e5                	mov    ebp,esp
c001da7d:	57                   	push   edi
c001da7e:	56                   	push   esi
c001da7f:	53                   	push   ebx
c001da80:	83 ec 04             	sub    esp,0x4
c001da83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da86:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da89:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da98:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001daa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dab1:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001dab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dabb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001daca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dacd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dad3:	0f b6 f0             	movzx  esi,al
c001dad6:	89 d0                	mov    eax,edx
c001dad8:	ba 00 00 00 00       	mov    edx,0x0
c001dadd:	89 c7                	mov    edi,eax
c001dadf:	83 e7 ff             	and    edi,0xffffffff
c001dae2:	89 f9                	mov    ecx,edi
c001dae4:	0f b6 da             	movzx  ebx,dl
c001dae7:	89 c8                	mov    eax,ecx
c001dae9:	89 da                	mov    edx,ebx
c001daeb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001daee:	8d 5e 08             	lea    ebx,[esi+0x8]
c001daf1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001daf5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001daf9:	83 e0 00             	and    eax,0x0
c001dafc:	09 d0                	or     eax,edx
c001dafe:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001db02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001db0b:	8d 50 01             	lea    edx,[eax+0x1]
c001db0e:	88 d1                	mov    cl,dl
c001db10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001db13:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001db19:	0f b6 d0             	movzx  edx,al
c001db1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db1f:	83 c2 08             	add    edx,0x8
c001db22:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db26:	0f b6 c9             	movzx  ecx,cl
c001db29:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001db2f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db33:	6a 01                	push   0x1
c001db35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db38:	e8 15 ff ff ff       	call   c001da52 <IOAPIC::read(int)>
c001db3d:	83 c4 08             	add    esp,0x8
c001db40:	c1 f8 10             	sar    eax,0x10
c001db43:	0f b6 c0             	movzx  eax,al
c001db46:	8d 50 01             	lea    edx,[eax+0x1]
c001db49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db4c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db52:	b8 00 00 00 00       	mov    eax,0x0
c001db57:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db5a:	5b                   	pop    ebx
c001db5b:	5e                   	pop    esi
c001db5c:	5f                   	pop    edi
c001db5d:	5d                   	pop    ebp
c001db5e:	c3                   	ret    
c001db5f:	90                   	nop

c001db60 <IOAPIC::write(int, int)>:
c001db60:	55                   	push   ebp
c001db61:	89 e5                	mov    ebp,esp
c001db63:	83 ec 10             	sub    esp,0x10
c001db66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db75:	0f b6 d0             	movzx  edx,al
c001db78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db7b:	89 10                	mov    DWORD PTR [eax],edx
c001db7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db80:	8d 50 10             	lea    edx,[eax+0x10]
c001db83:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db86:	89 02                	mov    DWORD PTR [edx],eax
c001db88:	90                   	nop
c001db89:	c9                   	leave  
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db8c:	55                   	push   ebp
c001db8d:	89 e5                	mov    ebp,esp
c001db8f:	53                   	push   ebx
c001db90:	83 ec 2c             	sub    esp,0x2c
c001db93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db96:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db99:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db9c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dba2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dba5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dba8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dbab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dbae:	88 d8                	mov    al,bl
c001dbb0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dbb3:	88 c8                	mov    al,cl
c001dbb5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dbb8:	88 d0                	mov    al,dl
c001dbba:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dbbd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbc1:	83 c0 08             	add    eax,0x8
c001dbc4:	d1 e0                	shl    eax,1
c001dbc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbc9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbcd:	83 c0 08             	add    eax,0x8
c001dbd0:	d1 e0                	shl    eax,1
c001dbd2:	83 c0 01             	add    eax,0x1
c001dbd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dbd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbdb:	50                   	push   eax
c001dbdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbdf:	e8 6e fe ff ff       	call   c001da52 <IOAPIC::read(int)>
c001dbe4:	83 c4 08             	add    esp,0x8
c001dbe7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dbea:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dbf1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dbf4:	c1 e0 18             	shl    eax,0x18
c001dbf7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dbfa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dbfd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc00:	52                   	push   edx
c001dc01:	50                   	push   eax
c001dc02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc05:	e8 56 ff ff ff       	call   c001db60 <IOAPIC::write(int, int)>
c001dc0a:	83 c4 0c             	add    esp,0xc
c001dc0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc10:	50                   	push   eax
c001dc11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc14:	e8 39 fe ff ff       	call   c001da52 <IOAPIC::read(int)>
c001dc19:	83 c4 08             	add    esp,0x8
c001dc1c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dc1f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dc26:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dc2d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dc34:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dc38:	85 c0                	test   eax,eax
c001dc3a:	74 09                	je     c001dc45 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc3c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc43:	eb 07                	jmp    c001dc4c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc45:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc4c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc50:	85 c0                	test   eax,eax
c001dc52:	74 09                	je     c001dc5d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc54:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc5b:	eb 07                	jmp    c001dc64 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc5d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc64:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc6b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc6f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc78:	52                   	push   edx
c001dc79:	50                   	push   eax
c001dc7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc7d:	e8 de fe ff ff       	call   c001db60 <IOAPIC::write(int, int)>
c001dc82:	83 c4 0c             	add    esp,0xc
c001dc85:	90                   	nop
c001dc86:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc89:	c9                   	leave  
c001dc8a:	c3                   	ret    
c001dc8b:	90                   	nop

c001dc8c <APICTimer::close(int, int, void*)>:
c001dc8c:	b8 00 00 00 00       	mov    eax,0x0
c001dc91:	c3                   	ret    
c001dc92:	66 90                	xchg   ax,ax

c001dc94 <apicTimerHandler(regs*, void*)>:
c001dc94:	83 ec 0c             	sub    esp,0xc
c001dc97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc9d:	b8 10 27 00 00       	mov    eax,0x2710
c001dca2:	ba 00 00 00 00       	mov    edx,0x0
c001dca7:	f7 f1                	div    ecx
c001dca9:	83 ec 0c             	sub    esp,0xc
c001dcac:	50                   	push   eax
c001dcad:	e8 c6 fb fe ff       	call   c000d878 <timerHandler(unsigned int)>
c001dcb2:	83 c4 10             	add    esp,0x10
c001dcb5:	90                   	nop
c001dcb6:	83 c4 0c             	add    esp,0xc
c001dcb9:	c3                   	ret    
c001dcba:	66 90                	xchg   ax,ax

c001dcbc <APICTimer::open(int, int, void*)>:
c001dcbc:	83 ec 0c             	sub    esp,0xc
c001dcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc3:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcc5:	83 c0 24             	add    eax,0x24
c001dcc8:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcca:	83 ec 08             	sub    esp,0x8
c001dccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcd5:	ff d0                	call   eax
c001dcd7:	83 c4 10             	add    esp,0x10
c001dcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dce2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcf0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dcf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcfa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dd00:	83 ec 0c             	sub    esp,0xc
c001dd03:	51                   	push   ecx
c001dd04:	6a 01                	push   0x1
c001dd06:	68 94 dc 01 c0       	push   0xc001dc94
c001dd0b:	52                   	push   edx
c001dd0c:	50                   	push   eax
c001dd0d:	e8 a6 e0 fe ff       	call   c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd12:	83 c4 20             	add    esp,0x20
c001dd15:	89 c2                	mov    edx,eax
c001dd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd1b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd21:	b8 00 00 00 00       	mov    eax,0x0
c001dd26:	83 c4 0c             	add    esp,0xc
c001dd29:	c3                   	ret    
c001dd2a:	66 90                	xchg   ax,ax

c001dd2c <APICTimer::write(int)>:
c001dd2c:	83 ec 0c             	sub    esp,0xc
c001dd2f:	83 ec 0c             	sub    esp,0xc
c001dd32:	68 88 1e 02 c0       	push   0xc0021e88
c001dd37:	e8 39 2b ff ff       	call   c0010875 <KePanic(char const*)>
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd47:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd4d:	90                   	nop
c001dd4e:	83 c4 0c             	add    esp,0xc
c001dd51:	c3                   	ret    
c001dd52:	66 90                	xchg   ax,ax

c001dd54 <APICTimer::APICTimer()>:
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd5b:	83 ec 08             	sub    esp,0x8
c001dd5e:	68 98 1e 02 c0       	push   0xc0021e98
c001dd63:	50                   	push   eax
c001dd64:	e8 43 fa fe ff       	call   c000d7ac <Timer::Timer(char const*)>
c001dd69:	83 c4 10             	add    esp,0x10
c001dd6c:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c001dd71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd75:	89 10                	mov    DWORD PTR [eax],edx
c001dd77:	90                   	nop
c001dd78:	83 c4 0c             	add    esp,0xc
c001dd7b:	c3                   	ret    

c001dd7c <PIT::write(int)>:
c001dd7c:	83 ec 10             	sub    esp,0x10
c001dd7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd91:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd96:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd9b:	89 c2                	mov    edx,eax
c001dd9d:	c1 fa 1f             	sar    edx,0x1f
c001dda0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dda4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dda8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ddaf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ddb4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ddb8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ddbd:	ee                   	out    dx,al
c001ddbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddc2:	0f b6 c0             	movzx  eax,al
c001ddc5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ddcc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ddd0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ddd4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ddd9:	ee                   	out    dx,al
c001ddda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddde:	c1 f8 08             	sar    eax,0x8
c001dde1:	0f b6 c0             	movzx  eax,al
c001dde4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ddeb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddf3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ddf8:	ee                   	out    dx,al
c001ddf9:	90                   	nop
c001ddfa:	83 c4 10             	add    esp,0x10
c001ddfd:	c3                   	ret    
c001ddfe:	66 90                	xchg   ax,ax

c001de00 <pitHandler(regs*, void*)>:
c001de00:	83 ec 0c             	sub    esp,0xc
c001de03:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001de09:	b8 10 27 00 00       	mov    eax,0x2710
c001de0e:	89 c2                	mov    edx,eax
c001de10:	c1 fa 1f             	sar    edx,0x1f
c001de13:	f7 f9                	idiv   ecx
c001de15:	83 ec 0c             	sub    esp,0xc
c001de18:	50                   	push   eax
c001de19:	e8 5a fa fe ff       	call   c000d878 <timerHandler(unsigned int)>
c001de1e:	83 c4 10             	add    esp,0x10
c001de21:	90                   	nop
c001de22:	83 c4 0c             	add    esp,0xc
c001de25:	c3                   	ret    
c001de26:	66 90                	xchg   ax,ax

c001de28 <PIT::open(int, int, void*)>:
c001de28:	83 ec 0c             	sub    esp,0xc
c001de2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001de31:	83 c0 24             	add    eax,0x24
c001de34:	8b 00                	mov    eax,DWORD PTR [eax]
c001de36:	83 ec 08             	sub    esp,0x8
c001de39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de41:	ff d0                	call   eax
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4a:	83 ec 0c             	sub    esp,0xc
c001de4d:	6a 00                	push   0x0
c001de4f:	6a 01                	push   0x1
c001de51:	68 00 de 01 c0       	push   0xc001de00
c001de56:	6a 00                	push   0x0
c001de58:	50                   	push   eax
c001de59:	e8 5a df fe ff       	call   c000bdb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de5e:	83 c4 20             	add    esp,0x20
c001de61:	89 c2                	mov    edx,eax
c001de63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de67:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de6d:	b8 00 00 00 00       	mov    eax,0x0
c001de72:	83 c4 0c             	add    esp,0xc
c001de75:	c3                   	ret    
c001de76:	66 90                	xchg   ax,ax

c001de78 <PIT::close(int, int, void*)>:
c001de78:	83 ec 0c             	sub    esp,0xc
c001de7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de8d:	6a 01                	push   0x1
c001de8f:	68 00 de 01 c0       	push   0xc001de00
c001de94:	6a 00                	push   0x0
c001de96:	50                   	push   eax
c001de97:	e8 52 df fe ff       	call   c000bdee <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de9c:	83 c4 10             	add    esp,0x10
c001de9f:	b8 00 00 00 00       	mov    eax,0x0
c001dea4:	83 c4 0c             	add    esp,0xc
c001dea7:	c3                   	ret    

c001dea8 <PIT::PIT()>:
c001dea8:	83 ec 0c             	sub    esp,0xc
c001deab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deaf:	83 ec 08             	sub    esp,0x8
c001deb2:	68 d4 1e 02 c0       	push   0xc0021ed4
c001deb7:	50                   	push   eax
c001deb8:	e8 ef f8 fe ff       	call   c000d7ac <Timer::Timer(char const*)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	ba fc 1e 02 c0       	mov    edx,0xc0021efc
c001dec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec9:	89 10                	mov    DWORD PTR [eax],edx
c001decb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001decf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ded5:	0f b6 d0             	movzx  edx,al
c001ded8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001deed:	0f b6 d0             	movzx  edx,al
c001def0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001def9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001defd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df03:	8d 50 01             	lea    edx,[eax+0x1]
c001df06:	88 d1                	mov    cl,dl
c001df08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df0c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001df12:	0f b6 d0             	movzx  edx,al
c001df15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df1d:	83 e1 3f             	and    ecx,0x3f
c001df20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df24:	90                   	nop
c001df25:	83 c4 0c             	add    esp,0xc
c001df28:	c3                   	ret    
c001df29:	66 90                	xchg   ax,ax
c001df2b:	66 90                	xchg   ax,ax
c001df2d:	66 90                	xchg   ax,ax
c001df2f:	90                   	nop

c001df30 <avxDetect>:
c001df30:	b8 01 00 00 00       	mov    eax,0x1
c001df35:	0f a2                	cpuid  
c001df37:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001df3d:	74 15                	je     c001df54 <avxDetect.noAVX>
c001df3f:	b8 01 00 00 00       	mov    eax,0x1
c001df44:	0f a2                	cpuid  
c001df46:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df4c:	74 06                	je     c001df54 <avxDetect.noAVX>
c001df4e:	b8 01 00 00 00       	mov    eax,0x1
c001df53:	c3                   	ret    

c001df54 <avxDetect.noAVX>:
c001df54:	b8 00 00 00 00       	mov    eax,0x0
c001df59:	c3                   	ret    

c001df5a <avxSave>:
c001df5a:	53                   	push   ebx
c001df5b:	52                   	push   edx
c001df5c:	31 c0                	xor    eax,eax
c001df5e:	48                   	dec    eax
c001df5f:	89 c2                	mov    edx,eax
c001df61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df65:	0f ae 23             	xsave  [ebx]
c001df68:	5a                   	pop    edx
c001df69:	5b                   	pop    ebx
c001df6a:	c3                   	ret    

c001df6b <avxLoad>:
c001df6b:	53                   	push   ebx
c001df6c:	52                   	push   edx
c001df6d:	31 c0                	xor    eax,eax
c001df6f:	48                   	dec    eax
c001df70:	89 c2                	mov    edx,eax
c001df72:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df76:	0f ae 2b             	xrstor [ebx]
c001df79:	5a                   	pop    edx
c001df7a:	5b                   	pop    ebx
c001df7b:	c3                   	ret    

c001df7c <avxInit>:
c001df7c:	e8 67 03 00 00       	call   c001e2e8 <sseInit>
c001df81:	50                   	push   eax
c001df82:	51                   	push   ecx
c001df83:	0f 20 e0             	mov    eax,cr4
c001df86:	0d 00 00 04 00       	or     eax,0x40000
c001df8b:	0f 22 e0             	mov    cr4,eax
c001df8e:	31 c9                	xor    ecx,ecx
c001df90:	0f 01 d0             	xgetbv 
c001df93:	0d 07 00 00 00       	or     eax,0x7
c001df98:	0f 01 d1             	xsetbv 
c001df9b:	59                   	pop    ecx
c001df9c:	58                   	pop    eax
c001df9d:	c3                   	ret    

c001df9e <avxClose>:
c001df9e:	c3                   	ret    

c001df9f <wouldSheSayYes>:
c001df9f:	c3                   	ret    
c001dfa0:	49                   	dec    ecx
c001dfa1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dfa5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dfa9:	75 20                	jne    c001dfcb <isr0+0xb>
c001dfab:	4e                   	dec    esi
c001dfac:	79 61                	jns    c001e00f <isr7+0x3>
c001dfae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dfb3:	66 90                	xchg   ax,ax
c001dfb5:	66 90                	xchg   ax,ax
c001dfb7:	66 90                	xchg   ax,ax
c001dfb9:	66 90                	xchg   ax,ax
c001dfbb:	66 90                	xchg   ax,ax
c001dfbd:	66 90                	xchg   ax,ax
c001dfbf:	90                   	nop

c001dfc0 <isr0>:
c001dfc0:	fa                   	cli    
c001dfc1:	68 00 00 00 00       	push   0x0
c001dfc6:	68 00 00 00 00       	push   0x0
c001dfcb:	e9 56 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfd0 <isr1>:
c001dfd0:	fa                   	cli    
c001dfd1:	6a 00                	push   0x0
c001dfd3:	6a 01                	push   0x1
c001dfd5:	e9 4c 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfda <isr2>:
c001dfda:	fa                   	cli    
c001dfdb:	6a 00                	push   0x0
c001dfdd:	6a 02                	push   0x2
c001dfdf:	e9 42 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfe4 <isr3>:
c001dfe4:	fa                   	cli    
c001dfe5:	6a 00                	push   0x0
c001dfe7:	6a 03                	push   0x3
c001dfe9:	e9 38 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfee <isr4>:
c001dfee:	fa                   	cli    
c001dfef:	6a 00                	push   0x0
c001dff1:	6a 04                	push   0x4
c001dff3:	e9 2e 01 00 00       	jmp    c001e126 <int_common_stub>

c001dff8 <isr5>:
c001dff8:	fa                   	cli    
c001dff9:	6a 00                	push   0x0
c001dffb:	6a 05                	push   0x5
c001dffd:	e9 24 01 00 00       	jmp    c001e126 <int_common_stub>

c001e002 <isr6>:
c001e002:	fa                   	cli    
c001e003:	6a 00                	push   0x0
c001e005:	6a 06                	push   0x6
c001e007:	e9 1a 01 00 00       	jmp    c001e126 <int_common_stub>

c001e00c <isr7>:
c001e00c:	fa                   	cli    
c001e00d:	6a 00                	push   0x0
c001e00f:	6a 07                	push   0x7
c001e011:	e9 10 01 00 00       	jmp    c001e126 <int_common_stub>

c001e016 <isr8>:
c001e016:	fa                   	cli    
c001e017:	6a 08                	push   0x8
c001e019:	e9 08 01 00 00       	jmp    c001e126 <int_common_stub>

c001e01e <isr9>:
c001e01e:	fa                   	cli    
c001e01f:	6a 00                	push   0x0
c001e021:	6a 09                	push   0x9
c001e023:	e9 fe 00 00 00       	jmp    c001e126 <int_common_stub>

c001e028 <isr10>:
c001e028:	fa                   	cli    
c001e029:	6a 0a                	push   0xa
c001e02b:	e9 f6 00 00 00       	jmp    c001e126 <int_common_stub>

c001e030 <isr11>:
c001e030:	fa                   	cli    
c001e031:	6a 0b                	push   0xb
c001e033:	e9 ee 00 00 00       	jmp    c001e126 <int_common_stub>

c001e038 <isr12>:
c001e038:	fa                   	cli    
c001e039:	6a 0c                	push   0xc
c001e03b:	e9 e6 00 00 00       	jmp    c001e126 <int_common_stub>

c001e040 <isr13>:
c001e040:	fa                   	cli    
c001e041:	6a 0d                	push   0xd
c001e043:	53                   	push   ebx
c001e044:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e048:	81 fb 16 e2 01 c0    	cmp    ebx,0xc001e216
c001e04e:	5b                   	pop    ebx
c001e04f:	0f 84 c3 01 00 00    	je     c001e218 <finishSignal2>
c001e055:	e9 cc 00 00 00       	jmp    c001e126 <int_common_stub>

c001e05a <isr14>:
c001e05a:	fa                   	cli    
c001e05b:	6a 0e                	push   0xe
c001e05d:	e9 c4 00 00 00       	jmp    c001e126 <int_common_stub>

c001e062 <isr15>:
c001e062:	fa                   	cli    
c001e063:	6a 00                	push   0x0
c001e065:	6a 0f                	push   0xf
c001e067:	e9 ba 00 00 00       	jmp    c001e126 <int_common_stub>

c001e06c <isr16>:
c001e06c:	fa                   	cli    
c001e06d:	6a 00                	push   0x0
c001e06f:	6a 10                	push   0x10
c001e071:	e9 b0 00 00 00       	jmp    c001e126 <int_common_stub>

c001e076 <isr17>:
c001e076:	fa                   	cli    
c001e077:	6a 00                	push   0x0
c001e079:	6a 11                	push   0x11
c001e07b:	e9 a6 00 00 00       	jmp    c001e126 <int_common_stub>

c001e080 <isr18>:
c001e080:	fa                   	cli    
c001e081:	6a 00                	push   0x0
c001e083:	6a 12                	push   0x12
c001e085:	e9 9c 00 00 00       	jmp    c001e126 <int_common_stub>

c001e08a <irq3>:
c001e08a:	fa                   	cli    
c001e08b:	6a 00                	push   0x0
c001e08d:	6a 23                	push   0x23
c001e08f:	e9 92 00 00 00       	jmp    c001e126 <int_common_stub>

c001e094 <irq4>:
c001e094:	fa                   	cli    
c001e095:	6a 00                	push   0x0
c001e097:	6a 24                	push   0x24
c001e099:	e9 88 00 00 00       	jmp    c001e126 <int_common_stub>

c001e09e <irq5>:
c001e09e:	fa                   	cli    
c001e09f:	6a 00                	push   0x0
c001e0a1:	6a 25                	push   0x25
c001e0a3:	e9 7e 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0a8 <irq6>:
c001e0a8:	fa                   	cli    
c001e0a9:	6a 00                	push   0x0
c001e0ab:	6a 26                	push   0x26
c001e0ad:	e9 74 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0b2 <irq7>:
c001e0b2:	fa                   	cli    
c001e0b3:	6a 00                	push   0x0
c001e0b5:	6a 27                	push   0x27
c001e0b7:	e9 6a 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0bc <irq8>:
c001e0bc:	fa                   	cli    
c001e0bd:	6a 00                	push   0x0
c001e0bf:	6a 28                	push   0x28
c001e0c1:	e9 60 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0c6 <irq9>:
c001e0c6:	fa                   	cli    
c001e0c7:	6a 00                	push   0x0
c001e0c9:	6a 29                	push   0x29
c001e0cb:	e9 56 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0d0 <irq10>:
c001e0d0:	fa                   	cli    
c001e0d1:	6a 00                	push   0x0
c001e0d3:	6a 2a                	push   0x2a
c001e0d5:	e9 4c 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0da <irq11>:
c001e0da:	fa                   	cli    
c001e0db:	6a 00                	push   0x0
c001e0dd:	6a 2b                	push   0x2b
c001e0df:	e9 42 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0e4 <irq12>:
c001e0e4:	fa                   	cli    
c001e0e5:	6a 00                	push   0x0
c001e0e7:	6a 2c                	push   0x2c
c001e0e9:	e9 38 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0ee <irq13>:
c001e0ee:	fa                   	cli    
c001e0ef:	6a 00                	push   0x0
c001e0f1:	6a 2d                	push   0x2d
c001e0f3:	e9 2e 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0f8 <irq14>:
c001e0f8:	fa                   	cli    
c001e0f9:	6a 00                	push   0x0
c001e0fb:	6a 2e                	push   0x2e
c001e0fd:	e9 24 00 00 00       	jmp    c001e126 <int_common_stub>

c001e102 <irq15>:
c001e102:	fa                   	cli    
c001e103:	6a 00                	push   0x0
c001e105:	6a 2f                	push   0x2f
c001e107:	e9 1a 00 00 00       	jmp    c001e126 <int_common_stub>

c001e10c <irq1>:
c001e10c:	fa                   	cli    
c001e10d:	6a 00                	push   0x0
c001e10f:	6a 21                	push   0x21
c001e111:	eb 13                	jmp    c001e126 <int_common_stub>

c001e113 <irq2>:
c001e113:	fa                   	cli    
c001e114:	6a 00                	push   0x0
c001e116:	6a 22                	push   0x22
c001e118:	eb 0c                	jmp    c001e126 <int_common_stub>

c001e11a <isr96>:
c001e11a:	6a 00                	push   0x0
c001e11c:	6a 60                	push   0x60
c001e11e:	fb                   	sti    
c001e11f:	eb 37                	jmp    c001e158 <syscall_common_stub>

c001e121 <irq0>:
c001e121:	fa                   	cli    
c001e122:	6a 00                	push   0x0
c001e124:	6a 20                	push   0x20

c001e126 <int_common_stub>:
c001e126:	60                   	pusha  
c001e127:	1e                   	push   ds
c001e128:	06                   	push   es
c001e129:	0f a0                	push   fs
c001e12b:	0f a8                	push   gs
c001e12d:	66 b8 10 00          	mov    ax,0x10
c001e131:	66 8e d8             	mov    ds,ax
c001e134:	66 8e c0             	mov    es,ax
c001e137:	66 8e e0             	mov    fs,ax
c001e13a:	66 8e e8             	mov    gs,ax
c001e13d:	54                   	push   esp
c001e13e:	fc                   	cld    
c001e13f:	e8 74 e1 fe ff       	call   c000c2b8 <int_handler>
c001e144:	81 c4 04 00 00 00    	add    esp,0x4
c001e14a:	0f a9                	pop    gs
c001e14c:	0f a1                	pop    fs
c001e14e:	07                   	pop    es
c001e14f:	1f                   	pop    ds
c001e150:	61                   	popa   
c001e151:	81 c4 08 00 00 00    	add    esp,0x8
c001e157:	cf                   	iret   

c001e158 <syscall_common_stub>:
c001e158:	60                   	pusha  
c001e159:	1e                   	push   ds
c001e15a:	06                   	push   es
c001e15b:	0f a0                	push   fs
c001e15d:	0f a8                	push   gs
c001e15f:	66 b8 10 00          	mov    ax,0x10
c001e163:	66 8e d8             	mov    ds,ax
c001e166:	66 8e c0             	mov    es,ax
c001e169:	66 8e e0             	mov    fs,ax
c001e16c:	66 8e e8             	mov    gs,ax
c001e16f:	54                   	push   esp
c001e170:	fc                   	cld    
c001e171:	e8 42 e1 fe ff       	call   c000c2b8 <int_handler>
c001e176:	81 c4 04 00 00 00    	add    esp,0x4
c001e17c:	0f a9                	pop    gs
c001e17e:	0f a1                	pop    fs
c001e180:	07                   	pop    es
c001e181:	1f                   	pop    ds
c001e182:	e8 f4 2c ff ff       	call   c0010e7b <KiCheckSignalZ>
c001e187:	3d 00 00 00 00       	cmp    eax,0x0
c001e18c:	0f 84 c0 00 00 00    	je     c001e252 <skipSignals>
c001e192:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e197:	61                   	popa   
c001e198:	53                   	push   ebx
c001e199:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e19f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e1a2:	5b                   	pop    ebx
c001e1a3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e1a8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e1ab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e1ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1b1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e1b4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e1b7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e1ba:	81 c4 08 00 00 00    	add    esp,0x8
c001e1c0:	5e                   	pop    esi
c001e1c1:	5b                   	pop    ebx
c001e1c2:	59                   	pop    ecx
c001e1c3:	5a                   	pop    edx
c001e1c4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e1c7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e1ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e1cd:	52                   	push   edx
c001e1ce:	51                   	push   ecx
c001e1cf:	53                   	push   ebx
c001e1d0:	56                   	push   esi
c001e1d1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e1d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e1da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e1dd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e1e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e1e6:	60                   	pusha  
c001e1e7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e1ed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e1f0:	89 e3                	mov    ebx,esp
c001e1f2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e1f5:	52                   	push   edx
c001e1f6:	68 16 e2 01 c0       	push   0xc001e216
c001e1fb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e1fe:	89 dc                	mov    esp,ebx
c001e200:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e203:	68 23 00 00 00       	push   0x23
c001e208:	51                   	push   ecx
c001e209:	68 02 02 00 00       	push   0x202
c001e20e:	68 1b 00 00 00       	push   0x1b
c001e213:	ff 36                	push   DWORD PTR [esi]
c001e215:	cf                   	iret   

c001e216 <finishSignal>:
c001e216:	cd 0f                	int    0xf

c001e218 <finishSignal2>:
c001e218:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e21e:	e8 d5 2c ff ff       	call   c0010ef8 <KiFinishSignalZ>
c001e223:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e229:	68 23 00 00 00       	push   0x23
c001e22e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e231:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e234:	68 1b 00 00 00       	push   0x1b
c001e239:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e23c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e23f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e242:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e245:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e248:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e24b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e24e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e251:	cf                   	iret   

c001e252 <skipSignals>:
c001e252:	61                   	popa   
c001e253:	81 c4 08 00 00 00    	add    esp,0x8
c001e259:	cf                   	iret   
c001e25a:	90                   	nop
c001e25b:	90                   	nop

c001e25c <irq16>:
c001e25c:	fa                   	cli    
c001e25d:	6a 00                	push   0x0
c001e25f:	6a 30                	push   0x30
c001e261:	e9 c0 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e266 <irq17>:
c001e266:	fa                   	cli    
c001e267:	6a 00                	push   0x0
c001e269:	6a 31                	push   0x31
c001e26b:	e9 b6 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e270 <irq18>:
c001e270:	fa                   	cli    
c001e271:	6a 00                	push   0x0
c001e273:	6a 32                	push   0x32
c001e275:	e9 ac fe ff ff       	jmp    c001e126 <int_common_stub>

c001e27a <irq19>:
c001e27a:	fa                   	cli    
c001e27b:	6a 00                	push   0x0
c001e27d:	6a 33                	push   0x33
c001e27f:	e9 a2 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e284 <irq20>:
c001e284:	fa                   	cli    
c001e285:	6a 00                	push   0x0
c001e287:	6a 34                	push   0x34
c001e289:	e9 98 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e28e <irq21>:
c001e28e:	fa                   	cli    
c001e28f:	6a 00                	push   0x0
c001e291:	6a 35                	push   0x35
c001e293:	e9 8e fe ff ff       	jmp    c001e126 <int_common_stub>

c001e298 <irq22>:
c001e298:	fa                   	cli    
c001e299:	6a 00                	push   0x0
c001e29b:	6a 36                	push   0x36
c001e29d:	e9 84 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e2a2 <irq23>:
c001e2a2:	fa                   	cli    
c001e2a3:	6a 00                	push   0x0
c001e2a5:	6a 37                	push   0x37
c001e2a7:	e9 7a fe ff ff       	jmp    c001e126 <int_common_stub>
c001e2ac:	66 90                	xchg   ax,ax
c001e2ae:	66 90                	xchg   ax,ax

c001e2b0 <i386GetRDRAND>:
c001e2b0:	b9 64 00 00 00       	mov    ecx,0x64

c001e2b5 <retry>:
c001e2b5:	0f c7 f0             	rdrand eax
c001e2b8:	72 05                	jb     c001e2bf <retry.done>
c001e2ba:	e2 f9                	loop   c001e2b5 <retry>

c001e2bc <retry.fail>:
c001e2bc:	31 c0                	xor    eax,eax
c001e2be:	c3                   	ret    

c001e2bf <retry.done>:
c001e2bf:	c3                   	ret    

c001e2c0 <absolutelyNoChanceInHell>:
c001e2c0:	b8 01 00 00 00       	mov    eax,0x1
c001e2c5:	0f a2                	cpuid  
c001e2c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2cd:	74 06                	je     c001e2d5 <sseDetect.noSSE>
c001e2cf:	b8 01 00 00 00       	mov    eax,0x1
c001e2d4:	c3                   	ret    

c001e2d5 <sseDetect.noSSE>:
c001e2d5:	31 c0                	xor    eax,eax
c001e2d7:	c3                   	ret    

c001e2d8 <sseSave>:
c001e2d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2dc:	0f ae 00             	fxsave [eax]
c001e2df:	c3                   	ret    

c001e2e0 <sseLoad>:
c001e2e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2e4:	0f ae 08             	fxrstor [eax]
c001e2e7:	c3                   	ret    

c001e2e8 <sseInit>:
c001e2e8:	e8 42 00 00 00       	call   c001e32f <x87Init>
c001e2ed:	0f 20 e0             	mov    eax,cr4
c001e2f0:	66 0d 00 06          	or     ax,0x600
c001e2f4:	0f 22 e0             	mov    cr4,eax
c001e2f7:	c3                   	ret    

c001e2f8 <sseClose>:
c001e2f8:	c3                   	ret    
c001e2f9:	66 90                	xchg   ax,ax
c001e2fb:	66 90                	xchg   ax,ax
c001e2fd:	66 90                	xchg   ax,ax
c001e2ff:	90                   	nop

c001e300 <value_37F>:
c001e300:	7f 03                	jg     c001e305 <value_37A+0x1>

c001e302 <value_37E>:
c001e302:	7e 03                	jle    c001e307 <x87Detect+0x1>

c001e304 <value_37A>:
c001e304:	7a 03                	jp     c001e309 <x87Detect+0x3>

c001e306 <x87Detect>:
c001e306:	b8 01 00 00 00       	mov    eax,0x1
c001e30b:	0f a2                	cpuid  
c001e30d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e313:	74 06                	je     c001e31b <x87Detect.nox87>
c001e315:	b8 01 00 00 00       	mov    eax,0x1
c001e31a:	c3                   	ret    

c001e31b <x87Detect.nox87>:
c001e31b:	b8 00 00 00 00       	mov    eax,0x0
c001e320:	c3                   	ret    

c001e321 <x87Save>:
c001e321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e325:	dd 30                	fnsave [eax]
c001e327:	c3                   	ret    

c001e328 <x87Load>:
c001e328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e32c:	dd 20                	frstor [eax]
c001e32e:	c3                   	ret    

c001e32f <x87Init>:
c001e32f:	0f 20 c0             	mov    eax,cr0
c001e332:	66 25 fb ff          	and    ax,0xfffb
c001e336:	66 0d 22 00          	or     ax,0x22
c001e33a:	0f 22 c0             	mov    cr0,eax
c001e33d:	db e3                	fninit 
c001e33f:	0f 06                	clts   
c001e341:	d9 2d 04 e3 01 c0    	fldcw  WORD PTR ds:0xc001e304
c001e347:	c3                   	ret    

c001e348 <x87Close>:
c001e348:	c3                   	ret    
c001e349:	66 90                	xchg   ax,ax
c001e34b:	90                   	nop

c001e34c <__do_global_ctors_aux>:
c001e34c:	a1 00 f3 01 c0       	mov    eax,ds:0xc001f300
c001e351:	83 f8 ff             	cmp    eax,0xffffffff
c001e354:	74 1a                	je     c001e370 <__do_global_ctors_aux+0x24>
c001e356:	55                   	push   ebp
c001e357:	89 e5                	mov    ebp,esp
c001e359:	53                   	push   ebx
c001e35a:	52                   	push   edx
c001e35b:	bb 00 f3 01 c0       	mov    ebx,0xc001f300
c001e360:	ff d0                	call   eax
c001e362:	83 eb 04             	sub    ebx,0x4
c001e365:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e367:	83 f8 ff             	cmp    eax,0xffffffff
c001e36a:	75 f4                	jne    c001e360 <__do_global_ctors_aux+0x14>
c001e36c:	58                   	pop    eax
c001e36d:	5b                   	pop    ebx
c001e36e:	5d                   	pop    ebp
c001e36f:	c3                   	ret    
c001e370:	c3                   	ret    
c001e371:	66 90                	xchg   ax,ax
c001e373:	90                   	nop

c001e374 <__divdi3>:
c001e374:	55                   	push   ebp
c001e375:	57                   	push   edi
c001e376:	56                   	push   esi
c001e377:	53                   	push   ebx
c001e378:	83 ec 1c             	sub    esp,0x1c
c001e37b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e37f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e383:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e386:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e38a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e38e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e392:	85 db                	test   ebx,ebx
c001e394:	0f 88 8e 00 00 00    	js     c001e428 <__divdi3+0xb4>
c001e39a:	89 dd                	mov    ebp,ebx
c001e39c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e3a4:	89 d3                	mov    ebx,edx
c001e3a6:	85 d2                	test   edx,edx
c001e3a8:	79 0d                	jns    c001e3b7 <__divdi3+0x43>
c001e3aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e3ae:	f7 d8                	neg    eax
c001e3b0:	83 d2 00             	adc    edx,0x0
c001e3b3:	f7 da                	neg    edx
c001e3b5:	89 d3                	mov    ebx,edx
c001e3b7:	89 c7                	mov    edi,eax
c001e3b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3bc:	85 db                	test   ebx,ebx
c001e3be:	75 48                	jne    c001e408 <__divdi3+0x94>
c001e3c0:	39 ef                	cmp    edi,ebp
c001e3c2:	76 24                	jbe    c001e3e8 <__divdi3+0x74>
c001e3c4:	89 ea                	mov    edx,ebp
c001e3c6:	f7 f7                	div    edi
c001e3c8:	89 c1                	mov    ecx,eax
c001e3ca:	31 f6                	xor    esi,esi
c001e3cc:	89 c8                	mov    eax,ecx
c001e3ce:	89 f2                	mov    edx,esi
c001e3d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3d4:	85 c9                	test   ecx,ecx
c001e3d6:	74 07                	je     c001e3df <__divdi3+0x6b>
c001e3d8:	f7 d8                	neg    eax
c001e3da:	83 d2 00             	adc    edx,0x0
c001e3dd:	f7 da                	neg    edx
c001e3df:	83 c4 1c             	add    esp,0x1c
c001e3e2:	5b                   	pop    ebx
c001e3e3:	5e                   	pop    esi
c001e3e4:	5f                   	pop    edi
c001e3e5:	5d                   	pop    ebp
c001e3e6:	c3                   	ret    
c001e3e7:	90                   	nop
c001e3e8:	85 ff                	test   edi,edi
c001e3ea:	75 0b                	jne    c001e3f7 <__divdi3+0x83>
c001e3ec:	b8 01 00 00 00       	mov    eax,0x1
c001e3f1:	31 d2                	xor    edx,edx
c001e3f3:	f7 f3                	div    ebx
c001e3f5:	89 c7                	mov    edi,eax
c001e3f7:	31 d2                	xor    edx,edx
c001e3f9:	89 e8                	mov    eax,ebp
c001e3fb:	f7 f7                	div    edi
c001e3fd:	89 c6                	mov    esi,eax
c001e3ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e402:	f7 f7                	div    edi
c001e404:	89 c1                	mov    ecx,eax
c001e406:	eb c4                	jmp    c001e3cc <__divdi3+0x58>
c001e408:	39 eb                	cmp    ebx,ebp
c001e40a:	77 3c                	ja     c001e448 <__divdi3+0xd4>
c001e40c:	0f bd f3             	bsr    esi,ebx
c001e40f:	83 f6 1f             	xor    esi,0x1f
c001e412:	75 40                	jne    c001e454 <__divdi3+0xe0>
c001e414:	39 eb                	cmp    ebx,ebp
c001e416:	72 09                	jb     c001e421 <__divdi3+0xad>
c001e418:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e41b:	0f 87 97 00 00 00    	ja     c001e4b8 <__divdi3+0x144>
c001e421:	b9 01 00 00 00       	mov    ecx,0x1
c001e426:	eb a4                	jmp    c001e3cc <__divdi3+0x58>
c001e428:	f7 d9                	neg    ecx
c001e42a:	83 d3 00             	adc    ebx,0x0
c001e42d:	f7 db                	neg    ebx
c001e42f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e432:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e436:	89 dd                	mov    ebp,ebx
c001e438:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e440:	e9 5f ff ff ff       	jmp    c001e3a4 <__divdi3+0x30>
c001e445:	8d 76 00             	lea    esi,[esi+0x0]
c001e448:	31 f6                	xor    esi,esi
c001e44a:	31 c9                	xor    ecx,ecx
c001e44c:	e9 7b ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e451:	8d 76 00             	lea    esi,[esi+0x0]
c001e454:	b8 20 00 00 00       	mov    eax,0x20
c001e459:	29 f0                	sub    eax,esi
c001e45b:	89 f1                	mov    ecx,esi
c001e45d:	d3 e3                	shl    ebx,cl
c001e45f:	89 fa                	mov    edx,edi
c001e461:	88 c1                	mov    cl,al
c001e463:	d3 ea                	shr    edx,cl
c001e465:	09 da                	or     edx,ebx
c001e467:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e46b:	89 f1                	mov    ecx,esi
c001e46d:	d3 e7                	shl    edi,cl
c001e46f:	89 eb                	mov    ebx,ebp
c001e471:	88 c1                	mov    cl,al
c001e473:	d3 eb                	shr    ebx,cl
c001e475:	89 f1                	mov    ecx,esi
c001e477:	d3 e5                	shl    ebp,cl
c001e479:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e47c:	88 c1                	mov    cl,al
c001e47e:	d3 ea                	shr    edx,cl
c001e480:	09 d5                	or     ebp,edx
c001e482:	89 e8                	mov    eax,ebp
c001e484:	89 da                	mov    edx,ebx
c001e486:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e48a:	89 d3                	mov    ebx,edx
c001e48c:	89 c5                	mov    ebp,eax
c001e48e:	f7 e7                	mul    edi
c001e490:	39 d3                	cmp    ebx,edx
c001e492:	72 18                	jb     c001e4ac <__divdi3+0x138>
c001e494:	74 0a                	je     c001e4a0 <__divdi3+0x12c>
c001e496:	89 e9                	mov    ecx,ebp
c001e498:	31 f6                	xor    esi,esi
c001e49a:	e9 2d ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e49f:	90                   	nop
c001e4a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e4a3:	89 f1                	mov    ecx,esi
c001e4a5:	d3 e7                	shl    edi,cl
c001e4a7:	39 c7                	cmp    edi,eax
c001e4a9:	73 eb                	jae    c001e496 <__divdi3+0x122>
c001e4ab:	90                   	nop
c001e4ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e4af:	31 f6                	xor    esi,esi
c001e4b1:	e9 16 ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e4b6:	66 90                	xchg   ax,ax
c001e4b8:	31 c9                	xor    ecx,ecx
c001e4ba:	e9 0d ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e4bf:	90                   	nop

c001e4c0 <__moddi3>:
c001e4c0:	55                   	push   ebp
c001e4c1:	57                   	push   edi
c001e4c2:	56                   	push   esi
c001e4c3:	53                   	push   ebx
c001e4c4:	83 ec 2c             	sub    esp,0x2c
c001e4c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e4d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e4d7:	85 db                	test   ebx,ebx
c001e4d9:	0f 88 85 00 00 00    	js     c001e564 <__moddi3+0xa4>
c001e4df:	89 de                	mov    esi,ebx
c001e4e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e4e9:	89 d7                	mov    edi,edx
c001e4eb:	85 d2                	test   edx,edx
c001e4ed:	79 09                	jns    c001e4f8 <__moddi3+0x38>
c001e4ef:	f7 d8                	neg    eax
c001e4f1:	83 d2 00             	adc    edx,0x0
c001e4f4:	f7 da                	neg    edx
c001e4f6:	89 d7                	mov    edi,edx
c001e4f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4fc:	89 cd                	mov    ebp,ecx
c001e4fe:	85 ff                	test   edi,edi
c001e500:	75 52                	jne    c001e554 <__moddi3+0x94>
c001e502:	89 c3                	mov    ebx,eax
c001e504:	39 f0                	cmp    eax,esi
c001e506:	76 24                	jbe    c001e52c <__moddi3+0x6c>
c001e508:	89 c8                	mov    eax,ecx
c001e50a:	89 f2                	mov    edx,esi
c001e50c:	f7 f3                	div    ebx
c001e50e:	89 d6                	mov    esi,edx
c001e510:	89 f0                	mov    eax,esi
c001e512:	31 d2                	xor    edx,edx
c001e514:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e518:	85 c9                	test   ecx,ecx
c001e51a:	74 07                	je     c001e523 <__moddi3+0x63>
c001e51c:	f7 d8                	neg    eax
c001e51e:	83 d2 00             	adc    edx,0x0
c001e521:	f7 da                	neg    edx
c001e523:	83 c4 2c             	add    esp,0x2c
c001e526:	5b                   	pop    ebx
c001e527:	5e                   	pop    esi
c001e528:	5f                   	pop    edi
c001e529:	5d                   	pop    ebp
c001e52a:	c3                   	ret    
c001e52b:	90                   	nop
c001e52c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e530:	85 db                	test   ebx,ebx
c001e532:	75 0d                	jne    c001e541 <__moddi3+0x81>
c001e534:	b8 01 00 00 00       	mov    eax,0x1
c001e539:	31 d2                	xor    edx,edx
c001e53b:	f7 f7                	div    edi
c001e53d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e541:	89 f0                	mov    eax,esi
c001e543:	31 d2                	xor    edx,edx
c001e545:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e549:	f7 f7                	div    edi
c001e54b:	89 e8                	mov    eax,ebp
c001e54d:	f7 f7                	div    edi
c001e54f:	89 d6                	mov    esi,edx
c001e551:	eb bd                	jmp    c001e510 <__moddi3+0x50>
c001e553:	90                   	nop
c001e554:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e558:	39 f7                	cmp    edi,esi
c001e55a:	76 20                	jbe    c001e57c <__moddi3+0xbc>
c001e55c:	89 c8                	mov    eax,ecx
c001e55e:	89 f2                	mov    edx,esi
c001e560:	eb b2                	jmp    c001e514 <__moddi3+0x54>
c001e562:	66 90                	xchg   ax,ax
c001e564:	f7 d9                	neg    ecx
c001e566:	83 d3 00             	adc    ebx,0x0
c001e569:	f7 db                	neg    ebx
c001e56b:	89 de                	mov    esi,ebx
c001e56d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e575:	e9 6f ff ff ff       	jmp    c001e4e9 <__moddi3+0x29>
c001e57a:	66 90                	xchg   ax,ax
c001e57c:	0f bd c7             	bsr    eax,edi
c001e57f:	83 f0 1f             	xor    eax,0x1f
c001e582:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e586:	75 24                	jne    c001e5ac <__moddi3+0xec>
c001e588:	39 f7                	cmp    edi,esi
c001e58a:	72 06                	jb     c001e592 <__moddi3+0xd2>
c001e58c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e590:	77 0c                	ja     c001e59e <__moddi3+0xde>
c001e592:	89 e9                	mov    ecx,ebp
c001e594:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e598:	19 fe                	sbb    esi,edi
c001e59a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e59e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5a2:	89 f2                	mov    edx,esi
c001e5a4:	e9 6b ff ff ff       	jmp    c001e514 <__moddi3+0x54>
c001e5a9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5ac:	b8 20 00 00 00       	mov    eax,0x20
c001e5b1:	89 c2                	mov    edx,eax
c001e5b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5b7:	29 da                	sub    edx,ebx
c001e5b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5bd:	88 d9                	mov    cl,bl
c001e5bf:	d3 e7                	shl    edi,cl
c001e5c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5c5:	88 d1                	mov    cl,dl
c001e5c7:	d3 e8                	shr    eax,cl
c001e5c9:	09 c7                	or     edi,eax
c001e5cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5d3:	89 d8                	mov    eax,ebx
c001e5d5:	88 d9                	mov    cl,bl
c001e5d7:	d3 e7                	shl    edi,cl
c001e5d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5dd:	89 f3                	mov    ebx,esi
c001e5df:	88 d1                	mov    cl,dl
c001e5e1:	d3 eb                	shr    ebx,cl
c001e5e3:	89 c7                	mov    edi,eax
c001e5e5:	88 c1                	mov    cl,al
c001e5e7:	d3 e6                	shl    esi,cl
c001e5e9:	89 e8                	mov    eax,ebp
c001e5eb:	88 d1                	mov    cl,dl
c001e5ed:	d3 e8                	shr    eax,cl
c001e5ef:	09 f0                	or     eax,esi
c001e5f1:	89 f9                	mov    ecx,edi
c001e5f3:	d3 e5                	shl    ebp,cl
c001e5f5:	89 da                	mov    edx,ebx
c001e5f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e5fb:	89 d3                	mov    ebx,edx
c001e5fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e601:	89 c6                	mov    esi,eax
c001e603:	89 d1                	mov    ecx,edx
c001e605:	39 d3                	cmp    ebx,edx
c001e607:	72 27                	jb     c001e630 <__moddi3+0x170>
c001e609:	74 21                	je     c001e62c <__moddi3+0x16c>
c001e60b:	29 f5                	sub    ebp,esi
c001e60d:	19 cb                	sbb    ebx,ecx
c001e60f:	89 de                	mov    esi,ebx
c001e611:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e615:	d3 e6                	shl    esi,cl
c001e617:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e61b:	89 f9                	mov    ecx,edi
c001e61d:	d3 ed                	shr    ebp,cl
c001e61f:	09 ee                	or     esi,ebp
c001e621:	89 f0                	mov    eax,esi
c001e623:	d3 eb                	shr    ebx,cl
c001e625:	89 da                	mov    edx,ebx
c001e627:	e9 e8 fe ff ff       	jmp    c001e514 <__moddi3+0x54>
c001e62c:	39 c5                	cmp    ebp,eax
c001e62e:	73 db                	jae    c001e60b <__moddi3+0x14b>
c001e630:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e634:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e638:	89 d1                	mov    ecx,edx
c001e63a:	89 c6                	mov    esi,eax
c001e63c:	eb cd                	jmp    c001e60b <__moddi3+0x14b>
c001e63e:	66 90                	xchg   ax,ax

c001e640 <__udivdi3>:
c001e640:	55                   	push   ebp
c001e641:	57                   	push   edi
c001e642:	56                   	push   esi
c001e643:	53                   	push   ebx
c001e644:	83 ec 1c             	sub    esp,0x1c
c001e647:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e64b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e64f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e653:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e657:	85 d2                	test   edx,edx
c001e659:	75 41                	jne    c001e69c <__udivdi3+0x5c>
c001e65b:	39 f7                	cmp    edi,esi
c001e65d:	76 15                	jbe    c001e674 <__udivdi3+0x34>
c001e65f:	89 e8                	mov    eax,ebp
c001e661:	89 f2                	mov    edx,esi
c001e663:	f7 f7                	div    edi
c001e665:	31 db                	xor    ebx,ebx
c001e667:	89 da                	mov    edx,ebx
c001e669:	83 c4 1c             	add    esp,0x1c
c001e66c:	5b                   	pop    ebx
c001e66d:	5e                   	pop    esi
c001e66e:	5f                   	pop    edi
c001e66f:	5d                   	pop    ebp
c001e670:	c3                   	ret    
c001e671:	8d 76 00             	lea    esi,[esi+0x0]
c001e674:	89 f9                	mov    ecx,edi
c001e676:	85 ff                	test   edi,edi
c001e678:	75 0b                	jne    c001e685 <__udivdi3+0x45>
c001e67a:	b8 01 00 00 00       	mov    eax,0x1
c001e67f:	31 d2                	xor    edx,edx
c001e681:	f7 f7                	div    edi
c001e683:	89 c1                	mov    ecx,eax
c001e685:	31 d2                	xor    edx,edx
c001e687:	89 f0                	mov    eax,esi
c001e689:	f7 f1                	div    ecx
c001e68b:	89 c3                	mov    ebx,eax
c001e68d:	89 e8                	mov    eax,ebp
c001e68f:	f7 f1                	div    ecx
c001e691:	89 da                	mov    edx,ebx
c001e693:	83 c4 1c             	add    esp,0x1c
c001e696:	5b                   	pop    ebx
c001e697:	5e                   	pop    esi
c001e698:	5f                   	pop    edi
c001e699:	5d                   	pop    ebp
c001e69a:	c3                   	ret    
c001e69b:	90                   	nop
c001e69c:	39 f2                	cmp    edx,esi
c001e69e:	77 1c                	ja     c001e6bc <__udivdi3+0x7c>
c001e6a0:	0f bd da             	bsr    ebx,edx
c001e6a3:	83 f3 1f             	xor    ebx,0x1f
c001e6a6:	75 24                	jne    c001e6cc <__udivdi3+0x8c>
c001e6a8:	39 f2                	cmp    edx,esi
c001e6aa:	72 08                	jb     c001e6b4 <__udivdi3+0x74>
c001e6ac:	39 ef                	cmp    edi,ebp
c001e6ae:	0f 87 84 00 00 00    	ja     c001e738 <__udivdi3+0xf8>
c001e6b4:	b8 01 00 00 00       	mov    eax,0x1
c001e6b9:	eb ac                	jmp    c001e667 <__udivdi3+0x27>
c001e6bb:	90                   	nop
c001e6bc:	31 db                	xor    ebx,ebx
c001e6be:	31 c0                	xor    eax,eax
c001e6c0:	89 da                	mov    edx,ebx
c001e6c2:	83 c4 1c             	add    esp,0x1c
c001e6c5:	5b                   	pop    ebx
c001e6c6:	5e                   	pop    esi
c001e6c7:	5f                   	pop    edi
c001e6c8:	5d                   	pop    ebp
c001e6c9:	c3                   	ret    
c001e6ca:	66 90                	xchg   ax,ax
c001e6cc:	b8 20 00 00 00       	mov    eax,0x20
c001e6d1:	29 d8                	sub    eax,ebx
c001e6d3:	88 d9                	mov    cl,bl
c001e6d5:	d3 e2                	shl    edx,cl
c001e6d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e6db:	89 fa                	mov    edx,edi
c001e6dd:	88 c1                	mov    cl,al
c001e6df:	d3 ea                	shr    edx,cl
c001e6e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6e5:	09 d1                	or     ecx,edx
c001e6e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6eb:	88 d9                	mov    cl,bl
c001e6ed:	d3 e7                	shl    edi,cl
c001e6ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6f3:	89 f7                	mov    edi,esi
c001e6f5:	88 c1                	mov    cl,al
c001e6f7:	d3 ef                	shr    edi,cl
c001e6f9:	88 d9                	mov    cl,bl
c001e6fb:	d3 e6                	shl    esi,cl
c001e6fd:	89 ea                	mov    edx,ebp
c001e6ff:	88 c1                	mov    cl,al
c001e701:	d3 ea                	shr    edx,cl
c001e703:	09 d6                	or     esi,edx
c001e705:	89 f0                	mov    eax,esi
c001e707:	89 fa                	mov    edx,edi
c001e709:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e70d:	89 d7                	mov    edi,edx
c001e70f:	89 c6                	mov    esi,eax
c001e711:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e715:	39 d7                	cmp    edi,edx
c001e717:	72 13                	jb     c001e72c <__udivdi3+0xec>
c001e719:	74 09                	je     c001e724 <__udivdi3+0xe4>
c001e71b:	89 f0                	mov    eax,esi
c001e71d:	31 db                	xor    ebx,ebx
c001e71f:	e9 43 ff ff ff       	jmp    c001e667 <__udivdi3+0x27>
c001e724:	88 d9                	mov    cl,bl
c001e726:	d3 e5                	shl    ebp,cl
c001e728:	39 c5                	cmp    ebp,eax
c001e72a:	73 ef                	jae    c001e71b <__udivdi3+0xdb>
c001e72c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e72f:	31 db                	xor    ebx,ebx
c001e731:	e9 31 ff ff ff       	jmp    c001e667 <__udivdi3+0x27>
c001e736:	66 90                	xchg   ax,ax
c001e738:	31 c0                	xor    eax,eax
c001e73a:	e9 28 ff ff ff       	jmp    c001e667 <__udivdi3+0x27>
c001e73f:	90                   	nop

c001e740 <__umoddi3>:
c001e740:	55                   	push   ebp
c001e741:	57                   	push   edi
c001e742:	56                   	push   esi
c001e743:	53                   	push   ebx
c001e744:	83 ec 1c             	sub    esp,0x1c
c001e747:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e74b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e74f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e753:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e757:	89 da                	mov    edx,ebx
c001e759:	85 c0                	test   eax,eax
c001e75b:	75 37                	jne    c001e794 <__umoddi3+0x54>
c001e75d:	39 df                	cmp    edi,ebx
c001e75f:	76 13                	jbe    c001e774 <__umoddi3+0x34>
c001e761:	89 f0                	mov    eax,esi
c001e763:	f7 f7                	div    edi
c001e765:	89 d0                	mov    eax,edx
c001e767:	31 d2                	xor    edx,edx
c001e769:	83 c4 1c             	add    esp,0x1c
c001e76c:	5b                   	pop    ebx
c001e76d:	5e                   	pop    esi
c001e76e:	5f                   	pop    edi
c001e76f:	5d                   	pop    ebp
c001e770:	c3                   	ret    
c001e771:	8d 76 00             	lea    esi,[esi+0x0]
c001e774:	89 fd                	mov    ebp,edi
c001e776:	85 ff                	test   edi,edi
c001e778:	75 0b                	jne    c001e785 <__umoddi3+0x45>
c001e77a:	b8 01 00 00 00       	mov    eax,0x1
c001e77f:	31 d2                	xor    edx,edx
c001e781:	f7 f7                	div    edi
c001e783:	89 c5                	mov    ebp,eax
c001e785:	89 d8                	mov    eax,ebx
c001e787:	31 d2                	xor    edx,edx
c001e789:	f7 f5                	div    ebp
c001e78b:	89 f0                	mov    eax,esi
c001e78d:	f7 f5                	div    ebp
c001e78f:	89 d0                	mov    eax,edx
c001e791:	eb d4                	jmp    c001e767 <__umoddi3+0x27>
c001e793:	90                   	nop
c001e794:	89 f1                	mov    ecx,esi
c001e796:	39 d8                	cmp    eax,ebx
c001e798:	76 0a                	jbe    c001e7a4 <__umoddi3+0x64>
c001e79a:	89 f0                	mov    eax,esi
c001e79c:	83 c4 1c             	add    esp,0x1c
c001e79f:	5b                   	pop    ebx
c001e7a0:	5e                   	pop    esi
c001e7a1:	5f                   	pop    edi
c001e7a2:	5d                   	pop    ebp
c001e7a3:	c3                   	ret    
c001e7a4:	0f bd e8             	bsr    ebp,eax
c001e7a7:	83 f5 1f             	xor    ebp,0x1f
c001e7aa:	75 1c                	jne    c001e7c8 <__umoddi3+0x88>
c001e7ac:	39 d8                	cmp    eax,ebx
c001e7ae:	72 04                	jb     c001e7b4 <__umoddi3+0x74>
c001e7b0:	39 f7                	cmp    edi,esi
c001e7b2:	77 08                	ja     c001e7bc <__umoddi3+0x7c>
c001e7b4:	89 da                	mov    edx,ebx
c001e7b6:	29 fe                	sub    esi,edi
c001e7b8:	19 c2                	sbb    edx,eax
c001e7ba:	89 f1                	mov    ecx,esi
c001e7bc:	89 c8                	mov    eax,ecx
c001e7be:	83 c4 1c             	add    esp,0x1c
c001e7c1:	5b                   	pop    ebx
c001e7c2:	5e                   	pop    esi
c001e7c3:	5f                   	pop    edi
c001e7c4:	5d                   	pop    ebp
c001e7c5:	c3                   	ret    
c001e7c6:	66 90                	xchg   ax,ax
c001e7c8:	ba 20 00 00 00       	mov    edx,0x20
c001e7cd:	29 ea                	sub    edx,ebp
c001e7cf:	89 e9                	mov    ecx,ebp
c001e7d1:	d3 e0                	shl    eax,cl
c001e7d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7d7:	89 f8                	mov    eax,edi
c001e7d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e7dd:	88 d1                	mov    cl,dl
c001e7df:	d3 e8                	shr    eax,cl
c001e7e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7e5:	09 c1                	or     ecx,eax
c001e7e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7eb:	89 e9                	mov    ecx,ebp
c001e7ed:	d3 e7                	shl    edi,cl
c001e7ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7f3:	89 d8                	mov    eax,ebx
c001e7f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7f9:	88 d1                	mov    cl,dl
c001e7fb:	d3 e8                	shr    eax,cl
c001e7fd:	89 c7                	mov    edi,eax
c001e7ff:	89 e9                	mov    ecx,ebp
c001e801:	d3 e3                	shl    ebx,cl
c001e803:	89 f0                	mov    eax,esi
c001e805:	88 d1                	mov    cl,dl
c001e807:	d3 e8                	shr    eax,cl
c001e809:	09 d8                	or     eax,ebx
c001e80b:	89 e9                	mov    ecx,ebp
c001e80d:	d3 e6                	shl    esi,cl
c001e80f:	89 f3                	mov    ebx,esi
c001e811:	89 fa                	mov    edx,edi
c001e813:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e817:	89 d1                	mov    ecx,edx
c001e819:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e81d:	89 c6                	mov    esi,eax
c001e81f:	89 d7                	mov    edi,edx
c001e821:	39 d1                	cmp    ecx,edx
c001e823:	72 27                	jb     c001e84c <__umoddi3+0x10c>
c001e825:	74 21                	je     c001e848 <__umoddi3+0x108>
c001e827:	89 ca                	mov    edx,ecx
c001e829:	29 f3                	sub    ebx,esi
c001e82b:	19 fa                	sbb    edx,edi
c001e82d:	89 d0                	mov    eax,edx
c001e82f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e833:	d3 e0                	shl    eax,cl
c001e835:	89 e9                	mov    ecx,ebp
c001e837:	d3 eb                	shr    ebx,cl
c001e839:	09 d8                	or     eax,ebx
c001e83b:	d3 ea                	shr    edx,cl
c001e83d:	83 c4 1c             	add    esp,0x1c
c001e840:	5b                   	pop    ebx
c001e841:	5e                   	pop    esi
c001e842:	5f                   	pop    edi
c001e843:	5d                   	pop    ebp
c001e844:	c3                   	ret    
c001e845:	8d 76 00             	lea    esi,[esi+0x0]
c001e848:	39 c3                	cmp    ebx,eax
c001e84a:	73 db                	jae    c001e827 <__umoddi3+0xe7>
c001e84c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e850:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e854:	89 d7                	mov    edi,edx
c001e856:	89 c6                	mov    esi,eax
c001e858:	eb cd                	jmp    c001e827 <__umoddi3+0xe7>

Disassembly of section .init:

c001e85a <_init>:
c001e85a:	55                   	push   ebp
c001e85b:	89 e5                	mov    ebp,esp
c001e85d:	e8 92 18 fe ff       	call   c00000f4 <frame_dummy>
c001e862:	e8 e5 fa ff ff       	call   c001e34c <__do_global_ctors_aux>
c001e867:	5d                   	pop    ebp
c001e868:	c3                   	ret    

Disassembly of section .fini:

c001e869 <_fini>:
c001e869:	55                   	push   ebp
c001e86a:	89 e5                	mov    ebp,esp
c001e86c:	e8 13 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e871:	5d                   	pop    ebp
c001e872:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e874 <Computer::~Computer()>:
c001e874:	83 ec 0c             	sub    esp,0xc
c001e877:	ba 94 fb 01 c0       	mov    edx,0xc001fb94
c001e87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e880:	89 10                	mov    DWORD PTR [eax],edx
c001e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e886:	83 ec 0c             	sub    esp,0xc
c001e889:	50                   	push   eax
c001e88a:	e8 7f d4 fe ff       	call   c000bd0e <Device::~Device()>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	90                   	nop
c001e893:	83 c4 0c             	add    esp,0xc
c001e896:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e898 <Computer::~Computer()>:
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a2:	e8 cd ff ff ff       	call   c001e874 <Computer::~Computer()>
c001e8a7:	83 c4 10             	add    esp,0x10
c001e8aa:	83 ec 08             	sub    esp,0x8
c001e8ad:	68 70 01 00 00       	push   0x170
c001e8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b6:	e8 f1 bf fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001e8bb:	83 c4 10             	add    esp,0x10
c001e8be:	83 c4 0c             	add    esp,0xc
c001e8c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e8c2 <idleCommon()>:
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	fa                   	cli    
c001e8c6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e8cc:	e8 9f 67 ff ff       	call   c0015070 <schedule()>
c001e8d1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e8d6:	48                   	dec    eax
c001e8d7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e8dc:	75 01                	jne    c001e8df <idleCommon()+0x1d>
c001e8de:	fb                   	sti    
c001e8df:	83 c4 0c             	add    esp,0xc
c001e8e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e8e4 <LinkedList<UnixFile>::~LinkedList()>:
c001e8e4:	90                   	nop
c001e8e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e8e6 <LinkedList<UnixFile>::LinkedList()>:
c001e8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e926:	90                   	nop
c001e927:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e928 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e930:	75 10                	jne    c001e942 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e932:	83 ec 0c             	sub    esp,0xc
c001e935:	68 a8 fd 01 c0       	push   0xc001fda8
c001e93a:	e8 36 1f ff ff       	call   c0010875 <KePanic(char const*)>
c001e93f:	83 c4 10             	add    esp,0x10
c001e942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e946:	8b 00                	mov    eax,DWORD PTR [eax]
c001e948:	85 c0                	test   eax,eax
c001e94a:	74 34                	je     c001e980 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e953:	85 c0                	test   eax,eax
c001e955:	74 29                	je     c001e980 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e95e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e962:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e969:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e96d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e974:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e977:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e97e:	eb 65                	jmp    c001e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e984:	8b 00                	mov    eax,DWORD PTR [eax]
c001e986:	85 c0                	test   eax,eax
c001e988:	75 4b                	jne    c001e9d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e991:	85 c0                	test   eax,eax
c001e993:	75 40                	jne    c001e9d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e99d:	89 10                	mov    DWORD PTR [eax],edx
c001e99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9bf:	85 c0                	test   eax,eax
c001e9c1:	74 22                	je     c001e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9c3:	83 ec 0c             	sub    esp,0xc
c001e9c6:	68 ca fd 01 c0       	push   0xc001fdca
c001e9cb:	e8 a5 1e ff ff       	call   c0010875 <KePanic(char const*)>
c001e9d0:	83 c4 10             	add    esp,0x10
c001e9d3:	eb 10                	jmp    c001e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9d5:	83 ec 0c             	sub    esp,0xc
c001e9d8:	68 d4 fd 01 c0       	push   0xc001fdd4
c001e9dd:	e8 93 1e ff ff       	call   c0010875 <KePanic(char const*)>
c001e9e2:	83 c4 10             	add    esp,0x10
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ec:	8d 50 01             	lea    edx,[eax+0x1]
c001e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9f6:	90                   	nop
c001e9f7:	83 c4 0c             	add    esp,0xc
c001e9fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9fc <LinkedList<UnixFile>::getFirstElement()>:
c001e9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ea04 <LinkedList<UnixFile>::removeFirst()>:
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea0d:	85 c0                	test   eax,eax
c001ea0f:	75 12                	jne    c001ea23 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ea11:	83 ec 0c             	sub    esp,0xc
c001ea14:	68 e0 fd 01 c0       	push   0xc001fde0
c001ea19:	e8 57 1e ff ff       	call   c0010875 <KePanic(char const*)>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	eb 7e                	jmp    c001eaa1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea2d:	85 c0                	test   eax,eax
c001ea2f:	74 10                	je     c001ea41 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea31:	83 ec 0c             	sub    esp,0xc
c001ea34:	68 2b fe 01 c0       	push   0xc001fe2b
c001ea39:	e8 37 1e ff ff       	call   c0010875 <KePanic(char const*)>
c001ea3e:	83 c4 10             	add    esp,0x10
c001ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea45:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea4a:	85 c0                	test   eax,eax
c001ea4c:	75 33                	jne    c001ea81 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea6a:	83 f8 01             	cmp    eax,0x1
c001ea6d:	74 21                	je     c001ea90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea6f:	83 ec 0c             	sub    esp,0xc
c001ea72:	68 04 fe 01 c0       	push   0xc001fe04
c001ea77:	e8 f9 1d ff ff       	call   c0010875 <KePanic(char const*)>
c001ea7c:	83 c4 10             	add    esp,0x10
c001ea7f:	eb 0f                	jmp    c001ea90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8e:	89 10                	mov    DWORD PTR [eax],edx
c001ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea97:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eaa1:	83 c4 0c             	add    esp,0xc
c001eaa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001eaa6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001eaa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eaaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eaad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eaae <DriverlessDevice::~DriverlessDevice()>:
c001eaae:	ba bc 04 02 c0       	mov    edx,0xc00204bc
c001eab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab7:	89 10                	mov    DWORD PTR [eax],edx
c001eab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eabd:	50                   	push   eax
c001eabe:	e8 4b d2 fe ff       	call   c000bd0e <Device::~Device()>
c001eac3:	83 c4 04             	add    esp,0x4
c001eac6:	90                   	nop
c001eac7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eac8 <DriverlessDevice::~DriverlessDevice()>:
c001eac8:	83 ec 0c             	sub    esp,0xc
c001eacb:	83 ec 0c             	sub    esp,0xc
c001eace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead2:	e8 d7 ff ff ff       	call   c001eaae <DriverlessDevice::~DriverlessDevice()>
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	83 ec 08             	sub    esp,0x8
c001eadd:	68 58 01 00 00       	push   0x158
c001eae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eae6:	e8 c1 bd fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	83 c4 0c             	add    esp,0xc
c001eaf1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eaf2 <LinkedList<Device>::addElement(Device*)>:
c001eaf2:	83 ec 0c             	sub    esp,0xc
c001eaf5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eafa:	75 10                	jne    c001eb0c <LinkedList<Device>::addElement(Device*)+0x1a>
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	68 a8 fd 01 c0       	push   0xc001fda8
c001eb04:	e8 6c 1d ff ff       	call   c0010875 <KePanic(char const*)>
c001eb09:	83 c4 10             	add    esp,0x10
c001eb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb10:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb12:	85 c0                	test   eax,eax
c001eb14:	74 3a                	je     c001eb50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb1d:	85 c0                	test   eax,eax
c001eb1f:	74 2f                	je     c001eb50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb2c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb44:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb4e:	eb 68                	jmp    c001ebb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb54:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb56:	85 c0                	test   eax,eax
c001eb58:	75 4e                	jne    c001eba8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb61:	85 c0                	test   eax,eax
c001eb63:	75 43                	jne    c001eba8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb6d:	89 10                	mov    DWORD PTR [eax],edx
c001eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb81:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb92:	85 c0                	test   eax,eax
c001eb94:	74 22                	je     c001ebb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb96:	83 ec 0c             	sub    esp,0xc
c001eb99:	68 ca fd 01 c0       	push   0xc001fdca
c001eb9e:	e8 d2 1c ff ff       	call   c0010875 <KePanic(char const*)>
c001eba3:	83 c4 10             	add    esp,0x10
c001eba6:	eb 10                	jmp    c001ebb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eba8:	83 ec 0c             	sub    esp,0xc
c001ebab:	68 d4 fd 01 c0       	push   0xc001fdd4
c001ebb0:	e8 c0 1c ff ff       	call   c0010875 <KePanic(char const*)>
c001ebb5:	83 c4 10             	add    esp,0x10
c001ebb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebbf:	8d 50 01             	lea    edx,[eax+0x1]
c001ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebc9:	90                   	nop
c001ebca:	83 c4 0c             	add    esp,0xc
c001ebcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebce <LinkedList<Device>::LinkedList()>:
c001ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec0e:	90                   	nop
c001ec0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ec10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec16:	85 c0                	test   eax,eax
c001ec18:	75 0e                	jne    c001ec28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec21:	85 c0                	test   eax,eax
c001ec23:	75 03                	jne    c001ec28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec25:	b0 01                	mov    al,0x1
c001ec27:	c3                   	ret    
c001ec28:	b0 00                	mov    al,0x0
c001ec2a:	90                   	nop
c001ec2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec3d:	85 c0                	test   eax,eax
c001ec3f:	75 17                	jne    c001ec58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec41:	83 ec 0c             	sub    esp,0xc
c001ec44:	68 e0 fd 01 c0       	push   0xc001fde0
c001ec49:	e8 27 1c ff ff       	call   c0010875 <KePanic(char const*)>
c001ec4e:	83 c4 10             	add    esp,0x10
c001ec51:	e9 96 00 00 00       	jmp    c001ecec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec56:	66 90                	xchg   ax,ax
c001ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec62:	85 c0                	test   eax,eax
c001ec64:	0f 95 c0             	setne  al
c001ec67:	0f b6 c0             	movzx  eax,al
c001ec6a:	85 c0                	test   eax,eax
c001ec6c:	74 12                	je     c001ec80 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec6e:	83 ec 0c             	sub    esp,0xc
c001ec71:	68 2b fe 01 c0       	push   0xc001fe2b
c001ec76:	e8 fa 1b ff ff       	call   c0010875 <KePanic(char const*)>
c001ec7b:	83 c4 10             	add    esp,0x10
c001ec7e:	66 90                	xchg   ax,ax
c001ec80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec89:	85 c0                	test   eax,eax
c001ec8b:	0f 94 c0             	sete   al
c001ec8e:	0f b6 c0             	movzx  eax,al
c001ec91:	85 c0                	test   eax,eax
c001ec93:	74 33                	je     c001ecc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecb1:	83 f8 01             	cmp    eax,0x1
c001ecb4:	74 22                	je     c001ecd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecb6:	83 ec 0c             	sub    esp,0xc
c001ecb9:	68 04 fe 01 c0       	push   0xc001fe04
c001ecbe:	e8 b2 1b ff ff       	call   c0010875 <KePanic(char const*)>
c001ecc3:	83 c4 10             	add    esp,0x10
c001ecc6:	eb 10                	jmp    c001ecd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd5:	89 10                	mov    DWORD PTR [eax],edx
c001ecd7:	90                   	nop
c001ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecdf:	8d 50 ff             	lea    edx,[eax-0x1]
c001ece2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ece9:	8d 76 00             	lea    esi,[esi+0x0]
c001ecec:	83 c4 0c             	add    esp,0xc
c001ecef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecf8:	75 12                	jne    c001ed0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ecfa:	83 ec 0c             	sub    esp,0xc
c001ecfd:	68 a8 fd 01 c0       	push   0xc001fda8
c001ed02:	e8 6e 1b ff ff       	call   c0010875 <KePanic(char const*)>
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	66 90                	xchg   ax,ax
c001ed0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed12:	85 c0                	test   eax,eax
c001ed14:	74 36                	je     c001ed4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed1d:	85 c0                	test   eax,eax
c001ed1f:	74 2b                	je     c001ed4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed41:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed48:	eb 6a                	jmp    c001edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed4a:	66 90                	xchg   ax,ax
c001ed4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed52:	85 c0                	test   eax,eax
c001ed54:	75 4e                	jne    c001eda4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed5d:	85 c0                	test   eax,eax
c001ed5f:	75 43                	jne    c001eda4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed69:	89 10                	mov    DWORD PTR [eax],edx
c001ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed8b:	85 c0                	test   eax,eax
c001ed8d:	74 25                	je     c001edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed8f:	83 ec 0c             	sub    esp,0xc
c001ed92:	68 ca fd 01 c0       	push   0xc001fdca
c001ed97:	e8 d9 1a ff ff       	call   c0010875 <KePanic(char const*)>
c001ed9c:	83 c4 10             	add    esp,0x10
c001ed9f:	eb 13                	jmp    c001edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001eda1:	8d 76 00             	lea    esi,[esi+0x0]
c001eda4:	83 ec 0c             	sub    esp,0xc
c001eda7:	68 d4 fd 01 c0       	push   0xc001fdd4
c001edac:	e8 c4 1a ff ff       	call   c0010875 <KePanic(char const*)>
c001edb1:	83 c4 10             	add    esp,0x10
c001edb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edbb:	8d 50 01             	lea    edx,[eax+0x1]
c001edbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edc5:	90                   	nop
c001edc6:	83 c4 0c             	add    esp,0xc
c001edc9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edcc <ACPI::~ACPI()>:
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	ba c0 0a 02 c0       	mov    edx,0xc0020ac0
c001edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd8:	89 10                	mov    DWORD PTR [eax],edx
c001edda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edde:	83 ec 0c             	sub    esp,0xc
c001ede1:	50                   	push   eax
c001ede2:	e8 27 cf fe ff       	call   c000bd0e <Device::~Device()>
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	90                   	nop
c001edeb:	83 c4 0c             	add    esp,0xc
c001edee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001edf0 <ACPI::~ACPI()>:
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	83 ec 0c             	sub    esp,0xc
c001edf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edfa:	e8 cd ff ff ff       	call   c001edcc <ACPI::~ACPI()>
c001edff:	83 c4 10             	add    esp,0x10
c001ee02:	83 ec 08             	sub    esp,0x8
c001ee05:	68 64 12 00 00       	push   0x1264
c001ee0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee0e:	e8 99 ba fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001ee13:	83 c4 10             	add    esp,0x10
c001ee16:	83 c4 0c             	add    esp,0xc
c001ee19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ee1c <LinkedList<Device>::~LinkedList()>:
c001ee1c:	90                   	nop
c001ee1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ee20 <LinkedList<Device>::isEmpty()>:
c001ee20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee26:	85 c0                	test   eax,eax
c001ee28:	75 0e                	jne    c001ee38 <LinkedList<Device>::isEmpty()+0x18>
c001ee2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee31:	85 c0                	test   eax,eax
c001ee33:	75 03                	jne    c001ee38 <LinkedList<Device>::isEmpty()+0x18>
c001ee35:	b0 01                	mov    al,0x1
c001ee37:	c3                   	ret    
c001ee38:	b0 00                	mov    al,0x0
c001ee3a:	90                   	nop
c001ee3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ee3c <LinkedList<Device>::getFirstElement()>:
c001ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee44 <LinkedList<Device>::removeFirst()>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee4d:	85 c0                	test   eax,eax
c001ee4f:	75 17                	jne    c001ee68 <LinkedList<Device>::removeFirst()+0x24>
c001ee51:	83 ec 0c             	sub    esp,0xc
c001ee54:	68 e0 fd 01 c0       	push   0xc001fde0
c001ee59:	e8 17 1a ff ff       	call   c0010875 <KePanic(char const*)>
c001ee5e:	83 c4 10             	add    esp,0x10
c001ee61:	e9 92 00 00 00       	jmp    c001eef8 <LinkedList<Device>::removeFirst()+0xb4>
c001ee66:	66 90                	xchg   ax,ax
c001ee68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee6f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee75:	85 c0                	test   eax,eax
c001ee77:	74 13                	je     c001ee8c <LinkedList<Device>::removeFirst()+0x48>
c001ee79:	83 ec 0c             	sub    esp,0xc
c001ee7c:	68 2b fe 01 c0       	push   0xc001fe2b
c001ee81:	e8 ef 19 ff ff       	call   c0010875 <KePanic(char const*)>
c001ee86:	83 c4 10             	add    esp,0x10
c001ee89:	8d 76 00             	lea    esi,[esi+0x0]
c001ee8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee92:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee98:	85 c0                	test   eax,eax
c001ee9a:	75 34                	jne    c001eed0 <LinkedList<Device>::removeFirst()+0x8c>
c001ee9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eeb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeb8:	83 f8 01             	cmp    eax,0x1
c001eebb:	74 27                	je     c001eee4 <LinkedList<Device>::removeFirst()+0xa0>
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	68 04 fe 01 c0       	push   0xc001fe04
c001eec5:	e8 ab 19 ff ff       	call   c0010875 <KePanic(char const*)>
c001eeca:	83 c4 10             	add    esp,0x10
c001eecd:	eb 15                	jmp    c001eee4 <LinkedList<Device>::removeFirst()+0xa0>
c001eecf:	90                   	nop
c001eed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001eedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee0:	89 10                	mov    DWORD PTR [eax],edx
c001eee2:	66 90                	xchg   ax,ax
c001eee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeeb:	8d 50 ff             	lea    edx,[eax-0x1]
c001eeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eef5:	8d 76 00             	lea    esi,[esi+0x0]
c001eef8:	83 c4 0c             	add    esp,0xc
c001eefb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eefc <CPU::~CPU()>:
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c001ef04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef08:	89 10                	mov    DWORD PTR [eax],edx
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	83 ec 0c             	sub    esp,0xc
c001ef11:	50                   	push   eax
c001ef12:	e8 f7 cd fe ff       	call   c000bd0e <Device::~Device()>
c001ef17:	83 c4 10             	add    esp,0x10
c001ef1a:	90                   	nop
c001ef1b:	83 c4 0c             	add    esp,0xc
c001ef1e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ef20 <CPU::~CPU()>:
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	83 ec 0c             	sub    esp,0xc
c001ef26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef2a:	e8 cd ff ff ff       	call   c001eefc <CPU::~CPU()>
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	83 ec 08             	sub    esp,0x8
c001ef35:	68 94 11 00 00       	push   0x1194
c001ef3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef3e:	e8 69 b9 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	83 c4 0c             	add    esp,0xc
c001ef49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef54:	90                   	nop
c001ef55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef58 <ThreadControlBlock::ThreadControlBlock()>:
c001ef58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef72:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef7d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef88:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef93:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef9b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef9f:	90                   	nop
c001efa0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001efa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efdd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efe4:	90                   	nop
c001efe5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001efe6 <PCI::~PCI()>:
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	ba c0 1a 02 c0       	mov    edx,0xc0021ac0
c001efee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff2:	89 10                	mov    DWORD PTR [eax],edx
c001eff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff8:	83 ec 0c             	sub    esp,0xc
c001effb:	50                   	push   eax
c001effc:	e8 9f c7 fe ff       	call   c000b7a0 <Bus::~Bus()>
c001f001:	83 c4 10             	add    esp,0x10
c001f004:	90                   	nop
c001f005:	83 c4 0c             	add    esp,0xc
c001f008:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f00a <PCI::~PCI()>:
c001f00a:	83 ec 0c             	sub    esp,0xc
c001f00d:	83 ec 0c             	sub    esp,0xc
c001f010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f014:	e8 cd ff ff ff       	call   c001efe6 <PCI::~PCI()>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	83 ec 08             	sub    esp,0x8
c001f01f:	68 5c 01 00 00       	push   0x15c
c001f024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f028:	e8 7f b8 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f02d:	83 c4 10             	add    esp,0x10
c001f030:	83 c4 0c             	add    esp,0xc
c001f033:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f034 <IDE::~IDE()>:
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c001f03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f040:	89 10                	mov    DWORD PTR [eax],edx
c001f042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	50                   	push   eax
c001f04a:	e8 39 d1 fe ff       	call   c000c188 <HardDiskController::~HardDiskController()>
c001f04f:	83 c4 10             	add    esp,0x10
c001f052:	90                   	nop
c001f053:	83 c4 0c             	add    esp,0xc
c001f056:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f058 <IDE::~IDE()>:
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	83 ec 0c             	sub    esp,0xc
c001f05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f062:	e8 cd ff ff ff       	call   c001f034 <IDE::~IDE()>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	83 ec 08             	sub    esp,0x8
c001f06d:	68 70 02 00 00       	push   0x270
c001f072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f076:	e8 31 b8 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f07b:	83 c4 10             	add    esp,0x10
c001f07e:	83 c4 0c             	add    esp,0xc
c001f081:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f082 <SATABus::~SATABus()>:
c001f082:	83 ec 0c             	sub    esp,0xc
c001f085:	ba c4 1b 02 c0       	mov    edx,0xc0021bc4
c001f08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08e:	89 10                	mov    DWORD PTR [eax],edx
c001f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	50                   	push   eax
c001f098:	e8 eb d0 fe ff       	call   c000c188 <HardDiskController::~HardDiskController()>
c001f09d:	83 c4 10             	add    esp,0x10
c001f0a0:	90                   	nop
c001f0a1:	83 c4 0c             	add    esp,0xc
c001f0a4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f0a6 <SATABus::~SATABus()>:
c001f0a6:	83 ec 0c             	sub    esp,0xc
c001f0a9:	83 ec 0c             	sub    esp,0xc
c001f0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b0:	e8 cd ff ff ff       	call   c001f082 <SATABus::~SATABus()>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	83 ec 08             	sub    esp,0x8
c001f0bb:	68 64 01 00 00       	push   0x164
c001f0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0c4:	e8 e3 b7 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	83 c4 0c             	add    esp,0xc
c001f0cf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f0d0 <ATA::~ATA()>:
c001f0d0:	83 ec 0c             	sub    esp,0xc
c001f0d3:	ba 04 1c 02 c0       	mov    edx,0xc0021c04
c001f0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0dc:	89 10                	mov    DWORD PTR [eax],edx
c001f0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e2:	83 ec 0c             	sub    esp,0xc
c001f0e5:	50                   	push   eax
c001f0e6:	e8 7f d1 fe ff       	call   c000c26a <PhysicalDisk::~PhysicalDisk()>
c001f0eb:	83 c4 10             	add    esp,0x10
c001f0ee:	90                   	nop
c001f0ef:	83 c4 0c             	add    esp,0xc
c001f0f2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f0f4 <ATA::~ATA()>:
c001f0f4:	83 ec 0c             	sub    esp,0xc
c001f0f7:	83 ec 0c             	sub    esp,0xc
c001f0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fe:	e8 cd ff ff ff       	call   c001f0d0 <ATA::~ATA()>
c001f103:	83 c4 10             	add    esp,0x10
c001f106:	83 ec 08             	sub    esp,0x8
c001f109:	68 7c 01 00 00       	push   0x17c
c001f10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f112:	e8 95 b7 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f117:	83 c4 10             	add    esp,0x10
c001f11a:	83 c4 0c             	add    esp,0xc
c001f11d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f11e <ATAPI::~ATAPI()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	ba 4c 1c 02 c0       	mov    edx,0xc0021c4c
c001f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12a:	89 10                	mov    DWORD PTR [eax],edx
c001f12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f130:	83 ec 0c             	sub    esp,0xc
c001f133:	50                   	push   eax
c001f134:	e8 31 d1 fe ff       	call   c000c26a <PhysicalDisk::~PhysicalDisk()>
c001f139:	83 c4 10             	add    esp,0x10
c001f13c:	90                   	nop
c001f13d:	83 c4 0c             	add    esp,0xc
c001f140:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f142 <ATAPI::~ATAPI()>:
c001f142:	83 ec 0c             	sub    esp,0xc
c001f145:	83 ec 0c             	sub    esp,0xc
c001f148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14c:	e8 cd ff ff ff       	call   c001f11e <ATAPI::~ATAPI()>
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	83 ec 08             	sub    esp,0x8
c001f157:	68 84 01 00 00       	push   0x184
c001f15c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f160:	e8 47 b7 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f165:	83 c4 10             	add    esp,0x10
c001f168:	83 c4 0c             	add    esp,0xc
c001f16b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f16c <SATA::~SATA()>:
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c001f174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f178:	89 10                	mov    DWORD PTR [eax],edx
c001f17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f17e:	83 ec 0c             	sub    esp,0xc
c001f181:	50                   	push   eax
c001f182:	e8 e3 d0 fe ff       	call   c000c26a <PhysicalDisk::~PhysicalDisk()>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	90                   	nop
c001f18b:	83 c4 0c             	add    esp,0xc
c001f18e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f190 <SATA::~SATA()>:
c001f190:	83 ec 0c             	sub    esp,0xc
c001f193:	83 ec 0c             	sub    esp,0xc
c001f196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f19a:	e8 cd ff ff ff       	call   c001f16c <SATA::~SATA()>
c001f19f:	83 c4 10             	add    esp,0x10
c001f1a2:	83 ec 08             	sub    esp,0x8
c001f1a5:	68 7c 01 00 00       	push   0x17c
c001f1aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ae:	e8 f9 b6 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	83 c4 0c             	add    esp,0xc
c001f1b9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f1ba <SATAPI::~SATAPI()>:
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	ba 24 1e 02 c0       	mov    edx,0xc0021e24
c001f1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c6:	89 10                	mov    DWORD PTR [eax],edx
c001f1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	50                   	push   eax
c001f1d0:	e8 95 d0 fe ff       	call   c000c26a <PhysicalDisk::~PhysicalDisk()>
c001f1d5:	83 c4 10             	add    esp,0x10
c001f1d8:	90                   	nop
c001f1d9:	83 c4 0c             	add    esp,0xc
c001f1dc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f1de <SATAPI::~SATAPI()>:
c001f1de:	83 ec 0c             	sub    esp,0xc
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1e8:	e8 cd ff ff ff       	call   c001f1ba <SATAPI::~SATAPI()>
c001f1ed:	83 c4 10             	add    esp,0x10
c001f1f0:	83 ec 08             	sub    esp,0x8
c001f1f3:	68 84 01 00 00       	push   0x184
c001f1f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1fc:	e8 ab b6 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	83 c4 0c             	add    esp,0xc
c001f207:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f208 <IOAPIC::~IOAPIC()>:
c001f208:	83 ec 0c             	sub    esp,0xc
c001f20b:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c001f210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f214:	89 10                	mov    DWORD PTR [eax],edx
c001f216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	50                   	push   eax
c001f21e:	e8 eb ca fe ff       	call   c000bd0e <Device::~Device()>
c001f223:	83 c4 10             	add    esp,0x10
c001f226:	90                   	nop
c001f227:	83 c4 0c             	add    esp,0xc
c001f22a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f22c <IOAPIC::~IOAPIC()>:
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	83 ec 0c             	sub    esp,0xc
c001f232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f236:	e8 cd ff ff ff       	call   c001f208 <IOAPIC::~IOAPIC()>
c001f23b:	83 c4 10             	add    esp,0x10
c001f23e:	83 ec 08             	sub    esp,0x8
c001f241:	68 68 01 00 00       	push   0x168
c001f246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f24a:	e8 5d b6 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f24f:	83 c4 10             	add    esp,0x10
c001f252:	83 c4 0c             	add    esp,0xc
c001f255:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f258 <APICTimer::~APICTimer()>:
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c001f260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f264:	89 10                	mov    DWORD PTR [eax],edx
c001f266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26a:	83 ec 0c             	sub    esp,0xc
c001f26d:	50                   	push   eax
c001f26e:	e8 71 e5 fe ff       	call   c000d7e4 <Timer::~Timer()>
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	90                   	nop
c001f277:	83 c4 0c             	add    esp,0xc
c001f27a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f27c <APICTimer::~APICTimer()>:
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f286:	e8 cd ff ff ff       	call   c001f258 <APICTimer::~APICTimer()>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	83 ec 08             	sub    esp,0x8
c001f291:	68 60 01 00 00       	push   0x160
c001f296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f29a:	e8 0d b6 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f29f:	83 c4 10             	add    esp,0x10
c001f2a2:	83 c4 0c             	add    esp,0xc
c001f2a5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f2a8 <PIT::~PIT()>:
c001f2a8:	83 ec 0c             	sub    esp,0xc
c001f2ab:	ba fc 1e 02 c0       	mov    edx,0xc0021efc
c001f2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b4:	89 10                	mov    DWORD PTR [eax],edx
c001f2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ba:	83 ec 0c             	sub    esp,0xc
c001f2bd:	50                   	push   eax
c001f2be:	e8 21 e5 fe ff       	call   c000d7e4 <Timer::~Timer()>
c001f2c3:	83 c4 10             	add    esp,0x10
c001f2c6:	90                   	nop
c001f2c7:	83 c4 0c             	add    esp,0xc
c001f2ca:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f2cc <PIT::~PIT()>:
c001f2cc:	83 ec 0c             	sub    esp,0xc
c001f2cf:	83 ec 0c             	sub    esp,0xc
c001f2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2d6:	e8 cd ff ff ff       	call   c001f2a8 <PIT::~PIT()>
c001f2db:	83 c4 10             	add    esp,0x10
c001f2de:	83 ec 08             	sub    esp,0x8
c001f2e1:	68 5c 01 00 00       	push   0x15c
c001f2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ea:	e8 bd b5 fe ff       	call   c000a8ac <operator delete(void*, unsigned long)>
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	83 c4 0c             	add    esp,0xc
c001f2f5:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 4d 0d 02 c0       	mov    esi,0xc0020d4d
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 69 0d 02 c0       	mov    esi,0xc0020d69
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
